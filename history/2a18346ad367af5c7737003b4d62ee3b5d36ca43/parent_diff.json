{"from": {"secList": ["sec-primary-expression-semantics", "sec-runtime-semantics-iteratordestructuringassignmentevaluation", "sec-left-hand-side-expressions-static-semantics-coveredcallexpression", "sec-syntax-directed-operations-function-name-inference", "sec-runtime-semantics-keyeddestructuringassignmentevaluation", "sec-static-semantics", "sec-static-semantics-coveredparenthesizedexpression", "sec-assignment-operators-runtime-semantics-evaluation", "sec-semantics-static-semantics-isidentifierref", "sec-static-semantics-static-semantics-isidentifierref"], "secData": {"sec-primary-expression-semantics": {"num": "13.2.1", "title": "#sec-primary-expression-semantics Semantics", "html": "<emu-clause id=\"sec-primary-expression-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-primary-expression-semantics\">#sec-primary-expression-semantics</span> Semantics</h1>\n\n      <div id=\"excluded-sec-static-semantics-coveredparenthesizedexpression\"><h1><span class=\"secnum\">13.2.1.1</span>#sec-static-semantics-coveredparenthesizedexpression Static Semantics: CoveredParenthesizedExpression</h1>...</div><div id=\"excluded-sec-semantics-static-semantics-isidentifierref\"><h1><span class=\"secnum\">13.2.1.2</span>#sec-semantics-static-semantics-isidentifierref Static Semantics: IsIdentifierRef</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-iteratordestructuringassignmentevaluation": {"num": "13.15.5.5", "title": "#sec-runtime-semantics-iteratordestructuringassignmentevaluation Runtime Semantics: IteratorDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\" type=\"sdo\" aoid=\"IteratorDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\">#sec-runtime-semantics-iteratordestructuringassignmentevaluation</span> Runtime Semantics: IteratorDestructuringAssignmentEvaluation</h1>\n        <p>With parameter <var>iteratorRecord</var>.</p>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e2bbd46c\"><emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bdc5c277\">\n        <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"816d4abc\"><emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"696f42ef\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"806d0124\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a73ccacf\">\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>value</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>value</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>value</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val> and IsIdentifierRef of <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>v</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Else, let <var>v</var> be <var>value</var>.</li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>v</var> as the argument.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Left to right evaluation order is maintained by evaluating a <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> that is not a destructuring pattern prior to accessing the iterator or evaluating the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"AssignmentRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cf470c76\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat, while <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>,<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>A</var>).</li></ol></li><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>A</var> as the argument.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-left-hand-side-expressions-static-semantics-coveredcallexpression": {"num": "13.3.1.2", "title": "#sec-left-hand-side-expressions-static-semantics-coveredcallexpression Static Semantics: CoveredCallExpression", "html": "<emu-clause id=\"sec-left-hand-side-expressions-static-semantics-coveredcallexpression\" type=\"sdo\" aoid=\"CoveredCallExpression\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions-static-semantics-coveredcallexpression\">#sec-left-hand-side-expressions-static-semantics-coveredcallexpression</span> Static Semantics: CoveredCallExpression</h1>\n        <emu-grammar><emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be44becf\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-nt><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-syntax-directed-operations-function-name-inference": {"num": "8.3", "title": "#sec-syntax-directed-operations-function-name-inference Function Name Inference", "html": "<emu-clause id=\"sec-syntax-directed-operations-function-name-inference\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntax-directed-operations-function-name-inference\">#sec-syntax-directed-operations-function-name-inference</span> Function Name Inference</h1>\n  </emu-clause>\n\n  "}, "sec-runtime-semantics-keyeddestructuringassignmentevaluation": {"num": "13.15.5.6", "title": "#sec-runtime-semantics-keyeddestructuringassignmentevaluation Runtime Semantics: KeyedDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-keyeddestructuringassignmentevaluation\" type=\"sdo\" aoid=\"KeyedDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-keyeddestructuringassignmentevaluation\">#sec-runtime-semantics-keyeddestructuringassignmentevaluation</span> Runtime Semantics: KeyedDestructuringAssignmentEvaluation</h1>\n        <p>With parameters <var>value</var> and <var>propertyName</var>.</p>\n        <emu-grammar><emu-production name=\"AssignmentElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a73ccacf\">\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>propertyName</var>).</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) and IsIdentifierRef of <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rhsValue</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rhsValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Else, let <var>rhsValue</var> be <var>v</var>.</li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> with <var>rhsValue</var> as the argument.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rhsValue</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-static-semantics": {"num": "13.3.1", "title": "#sec-static-semantics Static Semantics", "html": "<emu-clause id=\"sec-static-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics\">#sec-static-semantics</span> Static Semantics</h1>\n\n      <div id=\"excluded-sec-left-hand-side-expressions-static-semantics-early-errors\"><h1><span class=\"secnum\">13.3.1.1</span>#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-left-hand-side-expressions-static-semantics-coveredcallexpression\"><h1><span class=\"secnum\">13.3.1.2</span>#sec-left-hand-side-expressions-static-semantics-coveredcallexpression Static Semantics: CoveredCallExpression</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-isidentifierref\"><h1><span class=\"secnum\">13.3.1.3</span>#sec-static-semantics-static-semantics-isidentifierref Static Semantics: IsIdentifierRef</h1>...</div></emu-clause>\n\n    "}, "sec-static-semantics-coveredparenthesizedexpression": {"num": "13.2.1.1", "title": "#sec-static-semantics-coveredparenthesizedexpression Static Semantics: CoveredParenthesizedExpression", "html": "<emu-clause id=\"sec-static-semantics-coveredparenthesizedexpression\" type=\"sdo\" aoid=\"CoveredParenthesizedExpression\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-coveredparenthesizedexpression\">#sec-static-semantics-coveredparenthesizedexpression</span> Static Semantics: CoveredParenthesizedExpression</h1>\n        <emu-grammar><emu-production name=\"CoverParenthesizedExpressionAndArrowParameterList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4ba6ef9d\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-nt><a href=\"#prod-ParenthesizedExpression\">ParenthesizedExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "13.15.2", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8a33cee0\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-simple-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5f3a8747\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-compound-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>assignmentOpText</var> be the source text matched by <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>.</li><li>Let <var>opText</var> be the sequence of Unicode code points associated with <var>assignmentOpText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>assignmentOpText</var> </th><th> <var>opText</var>       </th></tr>\n                <tr><td> <code>**=</code>              </td><td> <code>**</code>           </td></tr>\n                <tr><td> <code>*=</code>               </td><td> <code>*</code>            </td></tr>\n                <tr><td> <code>/=</code>               </td><td> <code>/</code>            </td></tr>\n                <tr><td> <code>%=</code>               </td><td> <code>%</code>            </td></tr>\n                <tr><td> <code>+=</code>               </td><td> <code>+</code>            </td></tr>\n                <tr><td> <code>-=</code>               </td><td> <code>-</code>            </td></tr>\n                <tr><td> <code>&lt;&lt;=</code>        </td><td> <code>&lt;&lt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;=</code>        </td><td> <code>&gt;&gt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;=</code>    </td><td> <code>&gt;&gt;&gt;</code> </td></tr>\n                <tr><td> <code>&amp;=</code>           </td><td> <code>&amp;</code>        </td></tr>\n                <tr><td> <code>^=</code>               </td><td> <code>^</code>            </td></tr>\n                <tr><td> <code>|=</code>               </td><td> <code>|</code>            </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Let <var>r</var> be <emu-xref aoid=\"ApplyStringOrNumericBinaryOperator\"><a href=\"#sec-applystringornumericbinaryoperator\">ApplyStringOrNumericBinaryOperator</a></emu-xref>(<var>lval</var>, <var>opText</var>, <var>rval</var>).</li><li id=\"step-assignmentexpression-evaluation-compound-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0de56464\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>&amp;&amp;=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>false</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d3d4545\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>||=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>true</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0db89f3e\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>??=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>If <var>lval</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When this expression occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-simple-putvalue\"><a href=\"#step-assignmentexpression-evaluation-simple-putvalue\">1.e</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-compound-getvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-getvalue\">#step-assignmentexpression-evaluation-compound-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">#step-assignmentexpression-evaluation-lgcl-and-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">#step-assignmentexpression-evaluation-lgcl-or-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-getvalue</a></emu-xref> is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. Additionally, it is a runtime error if the <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-compound-putvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-putvalue\">#step-assignmentexpression-evaluation-compound-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">#step-assignmentexpression-evaluation-lgcl-and-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">#step-assignmentexpression-evaluation-lgcl-or-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-putvalue</a></emu-xref> is a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, or to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-semantics-static-semantics-isidentifierref": {"num": "13.2.1.2", "title": "#sec-semantics-static-semantics-isidentifierref Static Semantics: IsIdentifierRef", "html": "<emu-clause id=\"sec-semantics-static-semantics-isidentifierref\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-semantics-static-semantics-isidentifierref\">#sec-semantics-static-semantics-isidentifierref</span> Static Semantics: IsIdentifierRef</h1>\n        <emu-see-also-para op=\"IsIdentifierRef\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PrimaryExpression\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8cee0c59\"><emu-t>this</emu-t></emu-rhs>\n    <emu-rhs a=\"92e97e03\"><emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1bf32393\"><emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd178913\"><emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"242eeccd\"><emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8ce6db1\"><emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb7f7f4\"><emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad589bb4\"><emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3403ed46\"><emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d9922ce8\"><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-static-semantics-static-semantics-isidentifierref": {"num": "13.3.1.3", "title": "#sec-static-semantics-static-semantics-isidentifierref Static Semantics: IsIdentifierRef", "html": "<emu-clause id=\"sec-static-semantics-static-semantics-isidentifierref\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-isidentifierref\">#sec-static-semantics-static-semantics-isidentifierref</span> Static Semantics: IsIdentifierRef</h1>\n        <emu-see-also-para op=\"IsIdentifierRef\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6bbe1777\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"149e7618\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e753fad7\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"25b793e9\"><emu-nt><a href=\"#prod-OptionalExpression\">OptionalExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-primary-expression-semantics", "sec-runtime-semantics-iteratordestructuringassignmentevaluation", "sec-left-hand-side-expressions-static-semantics-coveredcallexpression", "sec-syntax-directed-operations-function-name-inference", "sec-runtime-semantics-keyeddestructuringassignmentevaluation", "sec-static-semantics", "sec-static-semantics-coveredparenthesizedexpression", "sec-assignment-operators-runtime-semantics-evaluation", "sec-static-semantics-isidentifierref"], "secData": {"sec-primary-expression-semantics": {"num": "13.2.1", "title": "#sec-primary-expression-semantics Semantics", "html": "<emu-clause id=\"sec-primary-expression-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-primary-expression-semantics\">#sec-primary-expression-semantics</span> Semantics</h1>\n\n      <div id=\"excluded-sec-static-semantics-coveredparenthesizedexpression\"><h1><span class=\"secnum\">13.2.1.1</span>#sec-static-semantics-coveredparenthesizedexpression Static Semantics: CoveredParenthesizedExpression</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-iteratordestructuringassignmentevaluation": {"num": "13.15.5.5", "title": "#sec-runtime-semantics-iteratordestructuringassignmentevaluation Runtime Semantics: IteratorDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\" type=\"sdo\" aoid=\"IteratorDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\">#sec-runtime-semantics-iteratordestructuringassignmentevaluation</span> Runtime Semantics: IteratorDestructuringAssignmentEvaluation</h1>\n        <p>With parameter <var>iteratorRecord</var>.</p>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e2bbd46c\"><emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bdc5c277\">\n        <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"816d4abc\"><emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"696f42ef\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"806d0124\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a73ccacf\">\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>value</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>value</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>value</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>v</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Else, let <var>v</var> be <var>value</var>.</li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>v</var> as the argument.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Left to right evaluation order is maintained by evaluating a <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> that is not a destructuring pattern prior to accessing the iterator or evaluating the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"AssignmentRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cf470c76\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat, while <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>,<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>A</var>).</li></ol></li><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>A</var> as the argument.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-left-hand-side-expressions-static-semantics-coveredcallexpression": {"num": "13.3.1.2", "title": "#sec-left-hand-side-expressions-static-semantics-coveredcallexpression Static Semantics: CoveredCallExpression", "html": "<emu-clause id=\"sec-left-hand-side-expressions-static-semantics-coveredcallexpression\" type=\"sdo\" aoid=\"CoveredCallExpression\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions-static-semantics-coveredcallexpression\">#sec-left-hand-side-expressions-static-semantics-coveredcallexpression</span> Static Semantics: CoveredCallExpression</h1>\n        <emu-grammar><emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be44becf\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-nt><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-syntax-directed-operations-function-name-inference": {"num": "8.3", "title": "#sec-syntax-directed-operations-function-name-inference Function Name Inference", "html": "<emu-clause id=\"sec-syntax-directed-operations-function-name-inference\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntax-directed-operations-function-name-inference\">#sec-syntax-directed-operations-function-name-inference</span> Function Name Inference</h1>\n\n    <div id=\"excluded-sec-static-semantics-isidentifierref\"><h1><span class=\"secnum\">8.3.1</span>#sec-static-semantics-isidentifierref Static Semantics: IsIdentifierRef</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-keyeddestructuringassignmentevaluation": {"num": "13.15.5.6", "title": "#sec-runtime-semantics-keyeddestructuringassignmentevaluation Runtime Semantics: KeyedDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-keyeddestructuringassignmentevaluation\" type=\"sdo\" aoid=\"KeyedDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-keyeddestructuringassignmentevaluation\">#sec-runtime-semantics-keyeddestructuringassignmentevaluation</span> Runtime Semantics: KeyedDestructuringAssignmentEvaluation</h1>\n        <p>With parameters <var>value</var> and <var>propertyName</var>.</p>\n        <emu-grammar><emu-production name=\"AssignmentElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a73ccacf\">\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>propertyName</var>).</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rhsValue</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rhsValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Else, let <var>rhsValue</var> be <var>v</var>.</li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> with <var>rhsValue</var> as the argument.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rhsValue</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-static-semantics": {"num": "13.3.1", "title": "#sec-static-semantics Static Semantics", "html": "<emu-clause id=\"sec-static-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics\">#sec-static-semantics</span> Static Semantics</h1>\n\n      <div id=\"excluded-sec-left-hand-side-expressions-static-semantics-early-errors\"><h1><span class=\"secnum\">13.3.1.1</span>#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-left-hand-side-expressions-static-semantics-coveredcallexpression\"><h1><span class=\"secnum\">13.3.1.2</span>#sec-left-hand-side-expressions-static-semantics-coveredcallexpression Static Semantics: CoveredCallExpression</h1>...</div></emu-clause>\n\n    "}, "sec-static-semantics-coveredparenthesizedexpression": {"num": "13.2.1.1", "title": "#sec-static-semantics-coveredparenthesizedexpression Static Semantics: CoveredParenthesizedExpression", "html": "<emu-clause id=\"sec-static-semantics-coveredparenthesizedexpression\" type=\"sdo\" aoid=\"CoveredParenthesizedExpression\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-coveredparenthesizedexpression\">#sec-static-semantics-coveredparenthesizedexpression</span> Static Semantics: CoveredParenthesizedExpression</h1>\n        <emu-grammar><emu-production name=\"CoverParenthesizedExpressionAndArrowParameterList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4ba6ef9d\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-nt><a href=\"#prod-ParenthesizedExpression\">ParenthesizedExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "13.15.2", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8a33cee0\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-simple-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5f3a8747\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-compound-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>assignmentOpText</var> be the source text matched by <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>.</li><li>Let <var>opText</var> be the sequence of Unicode code points associated with <var>assignmentOpText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>assignmentOpText</var> </th><th> <var>opText</var>       </th></tr>\n                <tr><td> <code>**=</code>              </td><td> <code>**</code>           </td></tr>\n                <tr><td> <code>*=</code>               </td><td> <code>*</code>            </td></tr>\n                <tr><td> <code>/=</code>               </td><td> <code>/</code>            </td></tr>\n                <tr><td> <code>%=</code>               </td><td> <code>%</code>            </td></tr>\n                <tr><td> <code>+=</code>               </td><td> <code>+</code>            </td></tr>\n                <tr><td> <code>-=</code>               </td><td> <code>-</code>            </td></tr>\n                <tr><td> <code>&lt;&lt;=</code>        </td><td> <code>&lt;&lt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;=</code>        </td><td> <code>&gt;&gt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;=</code>    </td><td> <code>&gt;&gt;&gt;</code> </td></tr>\n                <tr><td> <code>&amp;=</code>           </td><td> <code>&amp;</code>        </td></tr>\n                <tr><td> <code>^=</code>               </td><td> <code>^</code>            </td></tr>\n                <tr><td> <code>|=</code>               </td><td> <code>|</code>            </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Let <var>r</var> be <emu-xref aoid=\"ApplyStringOrNumericBinaryOperator\"><a href=\"#sec-applystringornumericbinaryoperator\">ApplyStringOrNumericBinaryOperator</a></emu-xref>(<var>lval</var>, <var>opText</var>, <var>rval</var>).</li><li id=\"step-assignmentexpression-evaluation-compound-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0de56464\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>&amp;&amp;=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>false</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d3d4545\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>||=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>true</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0db89f3e\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>??=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>If <var>lval</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When this expression occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-simple-putvalue\"><a href=\"#step-assignmentexpression-evaluation-simple-putvalue\">1.e</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-compound-getvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-getvalue\">#step-assignmentexpression-evaluation-compound-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">#step-assignmentexpression-evaluation-lgcl-and-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">#step-assignmentexpression-evaluation-lgcl-or-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-getvalue</a></emu-xref> is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. Additionally, it is a runtime error if the <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-compound-putvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-putvalue\">#step-assignmentexpression-evaluation-compound-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">#step-assignmentexpression-evaluation-lgcl-and-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">#step-assignmentexpression-evaluation-lgcl-or-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-putvalue</a></emu-xref> is a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, or to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-static-semantics-isidentifierref": {"num": "8.3.1", "title": "#sec-static-semantics-isidentifierref Static Semantics: IsIdentifierRef", "html": "<emu-clause id=\"sec-static-semantics-isidentifierref\" oldids=\"sec-semantics-static-semantics-isidentifierref,sec-static-semantics-static-semantics-isidentifierref\" type=\"sdo\" aoid=\"IsIdentifierRef\"><span id=\"sec-static-semantics-static-semantics-isidentifierref\"></span><span id=\"sec-semantics-static-semantics-isidentifierref\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-isidentifierref\">#sec-static-semantics-isidentifierref</span> Static Semantics: IsIdentifierRef</h1>\n      <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"PrimaryExpression\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8cee0c59\"><emu-t>this</emu-t></emu-rhs>\n    <emu-rhs a=\"92e97e03\"><emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1bf32393\"><emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd178913\"><emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"242eeccd\"><emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8ce6db1\"><emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb7f7f4\"><emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad589bb4\"><emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3403ed46\"><emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d9922ce8\"><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6bbe1777\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"149e7618\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e753fad7\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"25b793e9\"><emu-nt><a href=\"#prod-OptionalExpression\">OptionalExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n  "}}, "figData": {}}}