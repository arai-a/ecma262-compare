{"from": {"secList": ["sec-date.prototype-@@toprimitive", "sec-function.prototype-@@hasinstance", "sec-symbol.prototype-@@toprimitive"], "secData": {"sec-date.prototype-@@toprimitive": {"num": "21.4.4.45", "title": "#sec-date.prototype-@@toprimitive Date.prototype [ @@toPrimitive ] ( hint )", "html": "<emu-clause id=\"sec-date.prototype-@@toprimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</span> Date.prototype [ @@toPrimitive ] ( <var>hint</var> )</h1>\n        <p>This function is called by ECMAScript language operators to convert a Date to a primitive value. The allowed values for <var>hint</var> are <emu-val>\"default\"</emu-val>, <emu-val>\"number\"</emu-val>, and <emu-val>\"string\"</emu-val>. Dates are unique among built-in ECMAScript object in that they treat <emu-val>\"default\"</emu-val> as being equivalent to <emu-val>\"string\"</emu-val>, All other built-in ECMAScript objects treat <emu-val>\"default\"</emu-val> as being equivalent to <emu-val>\"number\"</emu-val>.</p>\n        <p>When the <code>@@toPrimitive</code> method is called with argument <var>hint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>hint</var> is <emu-val>\"string\"</emu-val> or <emu-val>\"default\"</emu-val>, then<ol><li>Let <var>tryFirst</var> be <emu-const>string</emu-const>.</li></ol></li><li>Else if <var>hint</var> is <emu-val>\"number\"</emu-val>, then<ol><li>Let <var>tryFirst</var> be <emu-const>number</emu-const>.</li></ol></li><li>Else, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>O</var>, <var>tryFirst</var>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.toPrimitive]\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-function.prototype-@@hasinstance": {"num": "20.2.3.6", "title": "#sec-function.prototype-@@hasinstance Function.prototype [ @@hasInstance ] ( V )", "html": "<emu-clause id=\"sec-function.prototype-@@hasinstance\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype-@@hasinstance\">#sec-function.prototype-@@hasinstance</span> Function.prototype [ @@hasInstance ] ( <var>V</var> )</h1>\n        <p>When the <code>@@hasInstance</code> method of an object <var>F</var> is called with value <var>V</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>F</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryHasInstance\"><a href=\"#sec-ordinaryhasinstance\">OrdinaryHasInstance</a></emu-xref>(<var>F</var>, <var>V</var>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.hasInstance]\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This is the default implementation of <code>@@hasInstance</code> that most functions inherit. <code>@@hasInstance</code> is called by the <code>instanceof</code> operator to determine whether a value is an instance of a specific <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. An expression such as</p>\n          <pre><code class=\"javascript hljs\">v <span class=\"hljs-keyword\">instanceof</span> F</code></pre>\n          <p>evaluates as</p>\n          <pre><code class=\"javascript hljs\">F[@@hasInstance](v)</code></pre>\n          <p>A <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function can control which objects are recognized as its instances by <code>instanceof</code> by exposing a different <code>@@hasInstance</code> method on the function.</p>\n        </div></emu-note>\n        <p>This property is non-writable and non-configurable to prevent tampering that could be used to globally expose the target function of a bound function.</p>\n      </emu-clause>\n    "}, "sec-symbol.prototype-@@toprimitive": {"num": "20.4.3.5", "title": "#sec-symbol.prototype-@@toprimitive Symbol.prototype [ @@toPrimitive ] ( hint )", "html": "<emu-clause id=\"sec-symbol.prototype-@@toprimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.prototype-@@toprimitive\">#sec-symbol.prototype-@@toprimitive</span> Symbol.prototype [ @@toPrimitive ] ( <var>hint</var> )</h1>\n        <p>This function is called by ECMAScript language operators to convert a Symbol object to a primitive value.</p>\n        <p>When the <code>@@toPrimitive</code> method is called with argument <var>hint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Return ?&#160;<emu-xref href=\"#thissymbolvalue\"><a href=\"#thissymbolvalue\">thisSymbolValue</a></emu-xref>(<emu-val>this</emu-val> value).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.toPrimitive]\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The argument is ignored.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-date.prototype-@@toprimitive", "sec-function.prototype-@@hasinstance", "sec-symbol.prototype-@@toprimitive"], "secData": {"sec-date.prototype-@@toprimitive": {"num": "21.4.4.45", "title": "#sec-date.prototype-@@toprimitive Date.prototype [ @@toPrimitive ] ( hint )", "html": "<emu-clause id=\"sec-date.prototype-@@toprimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</span> Date.prototype [ @@toPrimitive ] ( <var>hint</var> )</h1>\n        <p>This function is called by ECMAScript language operators to convert a Date to a primitive value. The allowed values for <var>hint</var> are <emu-val>\"default\"</emu-val>, <emu-val>\"number\"</emu-val>, and <emu-val>\"string\"</emu-val>. Dates are unique among built-in ECMAScript object in that they treat <emu-val>\"default\"</emu-val> as being equivalent to <emu-val>\"string\"</emu-val>, All other built-in ECMAScript objects treat <emu-val>\"default\"</emu-val> as being equivalent to <emu-val>\"number\"</emu-val>.</p>\n        <p>When the <code>@@toPrimitive</code> method is called with argument <var>hint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>hint</var> is <emu-val>\"string\"</emu-val> or <emu-val>\"default\"</emu-val>, then<ol><li>Let <var>tryFirst</var> be <emu-const>string</emu-const>.</li></ol></li><li>Else if <var>hint</var> is <emu-val>\"number\"</emu-val>, then<ol><li>Let <var>tryFirst</var> be <emu-const>number</emu-const>.</li></ol></li><li>Else, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>O</var>, <var>tryFirst</var>).</li></ol></emu-alg>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.toPrimitive]\"</emu-val>.</p>\n      </emu-clause>\n    "}, "sec-function.prototype-@@hasinstance": {"num": "20.2.3.6", "title": "#sec-function.prototype-@@hasinstance Function.prototype [ @@hasInstance ] ( V )", "html": "<emu-clause id=\"sec-function.prototype-@@hasinstance\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype-@@hasinstance\">#sec-function.prototype-@@hasinstance</span> Function.prototype [ @@hasInstance ] ( <var>V</var> )</h1>\n        <p>When the <code>@@hasInstance</code> method of an object <var>F</var> is called with value <var>V</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>F</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryHasInstance\"><a href=\"#sec-ordinaryhasinstance\">OrdinaryHasInstance</a></emu-xref>(<var>F</var>, <var>V</var>).</li></ol></emu-alg>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This is the default implementation of <code>@@hasInstance</code> that most functions inherit. <code>@@hasInstance</code> is called by the <code>instanceof</code> operator to determine whether a value is an instance of a specific <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. An expression such as</p>\n          <pre><code class=\"javascript hljs\">v <span class=\"hljs-keyword\">instanceof</span> F</code></pre>\n          <p>evaluates as</p>\n          <pre><code class=\"javascript hljs\">F[@@hasInstance](v)</code></pre>\n          <p>A <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function can control which objects are recognized as its instances by <code>instanceof</code> by exposing a different <code>@@hasInstance</code> method on the function.</p>\n        </div></emu-note>\n        <p>This property is non-writable and non-configurable to prevent tampering that could be used to globally expose the target function of a bound function.</p>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.hasInstance]\"</emu-val>.</p>\n      </emu-clause>\n    "}, "sec-symbol.prototype-@@toprimitive": {"num": "20.4.3.5", "title": "#sec-symbol.prototype-@@toprimitive Symbol.prototype [ @@toPrimitive ] ( hint )", "html": "<emu-clause id=\"sec-symbol.prototype-@@toprimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.prototype-@@toprimitive\">#sec-symbol.prototype-@@toprimitive</span> Symbol.prototype [ @@toPrimitive ] ( <var>hint</var> )</h1>\n        <p>This function is called by ECMAScript language operators to convert a Symbol object to a primitive value.</p>\n        <p>When the <code>@@toPrimitive</code> method is called with argument <var>hint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Return ?&#160;<emu-xref href=\"#thissymbolvalue\"><a href=\"#thissymbolvalue\">thisSymbolValue</a></emu-xref>(<emu-val>this</emu-val> value).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The argument is ignored.</p>\n        </div></emu-note>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.toPrimitive]\"</emu-val>.</p>\n      </emu-clause>\n\n      "}}, "figData": {}}}