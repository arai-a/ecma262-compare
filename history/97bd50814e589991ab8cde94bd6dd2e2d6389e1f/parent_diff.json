{"from": {"secList": ["sec-date.prototype-@@toprimitive", "sec-tostring", "sec-abstract-relational-comparison", "sec-toprimitive", "sec-bigint-constructor-number-value", "sec-type-conversion", "sec-tonumber", "sec-date.prototype.tojson", "sec-applystringornumericbinaryoperator", "sec-ordinarytoprimitive", "sec-tobigint", "sec-topropertykey", "sec-tonumeric"], "secData": {"sec-date.prototype-@@toprimitive": {"num": "20.4.4.45", "title": "#sec-date.prototype-@@toprimitive Date.prototype [ @@toPrimitive ] ( hint )", "html": "<emu-clause id=\"sec-date.prototype-@@toprimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</span> Date.prototype [ @@toPrimitive ] ( <var>hint</var> )</h1>\n        <p>This function is called by ECMAScript language operators to convert a Date object to a primitive value. The allowed values for <var>hint</var> are <emu-val>\"default\"</emu-val>, <emu-val>\"number\"</emu-val>, and <emu-val>\"string\"</emu-val>. Date objects, are unique among built-in ECMAScript object in that they treat <emu-val>\"default\"</emu-val> as being equivalent to <emu-val>\"string\"</emu-val>, All other built-in ECMAScript objects treat <emu-val>\"default\"</emu-val> as being equivalent to <emu-val>\"number\"</emu-val>.</p>\n        <p>When the <code>@@toPrimitive</code> method is called with argument <var>hint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>hint</var> is the String value <emu-val>\"string\"</emu-val> or the String value <emu-val>\"default\"</emu-val>, then<ol><li>Let <var>tryFirst</var> be <emu-val>\"string\"</emu-val>.</li></ol></li><li>Else if <var>hint</var> is the String value <emu-val>\"number\"</emu-val>, then<ol><li>Let <var>tryFirst</var> be <emu-val>\"number\"</emu-val>.</li></ol></li><li>Else, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>O</var>, <var>tryFirst</var>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.toPrimitive]\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-tostring": {"num": "7.1.17", "title": "#sec-tostring ToString ( argument )", "html": "<emu-clause id=\"sec-tostring\" aoid=\"ToString\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tostring\">#sec-tostring</span> ToString ( <var>argument</var> )</h1>\n      <p>The abstract operation ToString takes argument <var>argument</var>. It converts <var>argument</var> to a value of type String according to <emu-xref href=\"#table-tostring-conversions\"><a href=\"#table-tostring-conversions\" class=\"excluded-xref\" excluded-id=\"table-tostring-conversions\">#table-tostring-conversions</a></emu-xref>:</p>\n      <emu-table id=\"table-tostring-conversions\" caption=\"ToString Conversions\" oldids=\"table-12\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tostring-conversions\">#table-tostring-conversions</span>: <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> Conversions</figcaption><span id=\"table-12\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Argument Type\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              Undefined\n            </td>\n            <td>\n              Return <emu-val>\"undefined\"</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            </td>\n            <td>\n              Return <emu-val>\"null\"</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            </td>\n            <td>\n              <p>If <var>argument</var> is <emu-val>true</emu-val>, return <emu-val>\"true\"</emu-val>.</p>\n              <p>If <var>argument</var> is <emu-val>false</emu-val>, return <emu-val>\"false\"</emu-val>.</p>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            </td>\n            <td>\n              Return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>argument</var>).\n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            </td>\n            <td>\n              Return <var>argument</var>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            </td>\n            <td>\n              Return ! <emu-xref aoid=\"BigInt::toString\"><a href=\"#sec-numeric-types-bigint-tostring\">BigInt::toString</a></emu-xref>(<var>argument</var>).\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Object\n            </td>\n            <td>\n              <p>Apply the following steps:</p>\n              <emu-alg><ol><li>Let <var>primValue</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, hint String).</li><li>Return ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>primValue</var>).</li></ol></emu-alg>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-abstract-relational-comparison": {"num": "7.2.14", "title": "#sec-abstract-relational-comparison Abstract Relational Comparison", "html": "<emu-clause id=\"sec-abstract-relational-comparison\" aoid=\"Abstract Relational Comparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-relational-comparison\">#sec-abstract-relational-comparison</span> Abstract Relational Comparison</h1>\n      <p>The comparison <var>x</var> &lt; <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). In addition to <var>x</var> and <var>y</var> the algorithm takes a Boolean flag named <var>LeftFirst</var> as a parameter. The flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. The default value of <var>LeftFirst</var> is <emu-val>true</emu-val> and indicates that the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. Such a comparison is performed as follows:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), return <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>)::lessThan(<var>nx</var>, <var>ny</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val> or <var>ny</var> is <emu-val>+&#8734;</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val> or <var>ny</var> is <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>nx</var> is less than the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>ny</var>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">1.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-toprimitive": {"num": "7.1.1", "title": "#sec-toprimitive ToPrimitive ( input [ , PreferredType ] )", "html": "<emu-clause id=\"sec-toprimitive\" aoid=\"ToPrimitive\" oldids=\"table-9\"><span id=\"table-9\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toprimitive\">#sec-toprimitive</span> ToPrimitive ( <var>input</var> [ , <var>PreferredType</var> ] )</h1>\n      <p>The abstract operation ToPrimitive takes argument <var>input</var> and optional argument <var>PreferredType</var>. It converts its <var>input</var> argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint <var>PreferredType</var> to favour that type. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>input</var> is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>input</var>) is Object, then<ol><li>If <var>PreferredType</var> is not present, let <var>hint</var> be <emu-val>\"default\"</emu-val>.</li><li>Else if <var>PreferredType</var> is hint String, let <var>hint</var> be <emu-val>\"string\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>PreferredType</var> is hint Number.</li><li>Let <var>hint</var> be <emu-val>\"number\"</emu-val>.</li></ol></li><li>Let <var>exoticToPrim</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>input</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref>).</li><li>If <var>exoticToPrim</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>exoticToPrim</var>, <var>input</var>, &#171; <var>hint</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>hint</var> is <emu-val>\"default\"</emu-val>, set <var>hint</var> to <emu-val>\"number\"</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>input</var>, <var>hint</var>).</li></ol></li><li>Return <var>input</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When ToPrimitive is called with no hint, then it generally behaves as if the hint were Number. However, objects may over-ride this behaviour by defining a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref> method. Of the objects defined in this specification only Date objects (see <emu-xref href=\"#sec-date.prototype-@@toprimitive\"><a href=\"#sec-date.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</a></emu-xref>) and Symbol objects (see <emu-xref href=\"#sec-symbol.prototype-@@toprimitive\"><a href=\"#sec-symbol.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-symbol.prototype-@@toprimitive\">#sec-symbol.prototype-@@toprimitive</a></emu-xref>) over-ride the default ToPrimitive behaviour. Date objects treat no hint as if the hint were String.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ordinarytoprimitive\"><h1><span class=\"secnum\">7.1.1.1</span>#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )</h1>...</div></emu-clause>\n\n    "}, "sec-bigint-constructor-number-value": {"num": "20.2.1.1", "title": "#sec-bigint-constructor-number-value BigInt ( value )", "html": "<emu-clause id=\"sec-bigint-constructor-number-value\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint-constructor-number-value\">#sec-bigint-constructor-number-value</span> BigInt ( <var>value</var> )</h1>\n        <p>When <code>BigInt</code> is called with argument <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>value</var>, hint Number).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>prim</var>) is Number, return ?&#160;<emu-xref aoid=\"NumberToBigInt\"><a href=\"#sec-numbertobigint\">NumberToBigInt</a></emu-xref>(<var>prim</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-numbertobigint\"><h1><span class=\"secnum\">20.2.1.1.1</span>#sec-numbertobigint NumberToBigInt ( number )</h1>...</div></emu-clause>\n    "}, "sec-type-conversion": {"num": "7.1", "title": "#sec-type-conversion Type Conversion", "html": "<emu-clause id=\"sec-type-conversion\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</span> Type Conversion</h1>\n    <p>The ECMAScript language implicitly performs automatic type conversion as needed. To clarify the semantics of certain constructs it is useful to define a set of conversion <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>. The conversion <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are polymorphic; they can accept a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>. But no other specification types are used with these operations.</p>\n    <p>The BigInt type has no implicit conversions in the ECMAScript language; programmers must call BigInt explicitly to convert values from other types.</p>\n\n    <div id=\"excluded-sec-toprimitive\"><h1><span class=\"secnum\">7.1.1</span>#sec-toprimitive ToPrimitive ( input [ , PreferredType ] )</h1>...</div><div id=\"excluded-sec-toboolean\"><h1><span class=\"secnum\">7.1.2</span>#sec-toboolean ToBoolean ( argument )</h1>...</div><div id=\"excluded-sec-tonumeric\"><h1><span class=\"secnum\">7.1.3</span>#sec-tonumeric ToNumeric ( value )</h1>...</div><div id=\"excluded-sec-tonumber\"><h1><span class=\"secnum\">7.1.4</span>#sec-tonumber ToNumber ( argument )</h1>...</div><div id=\"excluded-sec-tointeger\"><h1><span class=\"secnum\">7.1.5</span>#sec-tointeger ToInteger ( argument )</h1>...</div><div id=\"excluded-sec-toint32\"><h1><span class=\"secnum\">7.1.6</span>#sec-toint32 ToInt32 ( argument )</h1>...</div><div id=\"excluded-sec-touint32\"><h1><span class=\"secnum\">7.1.7</span>#sec-touint32 ToUint32 ( argument )</h1>...</div><div id=\"excluded-sec-toint16\"><h1><span class=\"secnum\">7.1.8</span>#sec-toint16 ToInt16 ( argument )</h1>...</div><div id=\"excluded-sec-touint16\"><h1><span class=\"secnum\">7.1.9</span>#sec-touint16 ToUint16 ( argument )</h1>...</div><div id=\"excluded-sec-toint8\"><h1><span class=\"secnum\">7.1.10</span>#sec-toint8 ToInt8 ( argument )</h1>...</div><div id=\"excluded-sec-touint8\"><h1><span class=\"secnum\">7.1.11</span>#sec-touint8 ToUint8 ( argument )</h1>...</div><div id=\"excluded-sec-touint8clamp\"><h1><span class=\"secnum\">7.1.12</span>#sec-touint8clamp ToUint8Clamp ( argument )</h1>...</div><div id=\"excluded-sec-tobigint\"><h1><span class=\"secnum\">7.1.13</span>#sec-tobigint ToBigInt ( argument )</h1>...</div><div id=\"excluded-sec-stringtobigint\"><h1><span class=\"secnum\">7.1.14</span>#sec-stringtobigint StringToBigInt ( argument )</h1>...</div><div id=\"excluded-sec-tobigint64\"><h1><span class=\"secnum\">7.1.15</span>#sec-tobigint64 ToBigInt64 ( argument )</h1>...</div><div id=\"excluded-sec-tobiguint64\"><h1><span class=\"secnum\">7.1.16</span>#sec-tobiguint64 ToBigUint64 ( argument )</h1>...</div><div id=\"excluded-sec-tostring\"><h1><span class=\"secnum\">7.1.17</span>#sec-tostring ToString ( argument )</h1>...</div><div id=\"excluded-sec-toobject\"><h1><span class=\"secnum\">7.1.18</span>#sec-toobject ToObject ( argument )</h1>...</div><div id=\"excluded-sec-topropertykey\"><h1><span class=\"secnum\">7.1.19</span>#sec-topropertykey ToPropertyKey ( argument )</h1>...</div><div id=\"excluded-sec-tolength\"><h1><span class=\"secnum\">7.1.20</span>#sec-tolength ToLength ( argument )</h1>...</div><div id=\"excluded-sec-canonicalnumericindexstring\"><h1><span class=\"secnum\">7.1.21</span>#sec-canonicalnumericindexstring CanonicalNumericIndexString ( argument )</h1>...</div><div id=\"excluded-sec-toindex\"><h1><span class=\"secnum\">7.1.22</span>#sec-toindex ToIndex ( value )</h1>...</div></emu-clause>\n\n  "}, "sec-tonumber": {"num": "7.1.4", "title": "#sec-tonumber ToNumber ( argument )", "html": "<emu-clause id=\"sec-tonumber\" aoid=\"ToNumber\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tonumber\">#sec-tonumber</span> ToNumber ( <var>argument</var> )</h1>\n      <p>The abstract operation ToNumber takes argument <var>argument</var>. It converts <var>argument</var> to a value of type Number according to <emu-xref href=\"#table-tonumber-conversions\"><a href=\"#table-tonumber-conversions\" class=\"excluded-xref\" excluded-id=\"table-tonumber-conversions\">#table-tonumber-conversions</a></emu-xref>:</p>\n      <emu-table id=\"table-tonumber-conversions\" caption=\"ToNumber Conversions\" oldids=\"table-11\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tonumber-conversions\">#table-tonumber-conversions</span>: <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> Conversions</figcaption><span id=\"table-11\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Argument Type\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              Undefined\n            </td>\n            <td>\n              Return <emu-val>NaN</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            </td>\n            <td>\n              Return <emu-val>+0</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            </td>\n            <td>\n              If <var>argument</var> is <emu-val>true</emu-val>, return 1. If <var>argument</var> is <emu-val>false</emu-val>, return <emu-val>+0</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            </td>\n            <td>\n              Return <var>argument</var> (no conversion).\n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            </td>\n            <td>\n              See grammar and conversion algorithm below.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Object\n            </td>\n            <td>\n              <p>Apply the following steps:</p>\n              <emu-alg><ol><li>Let <var>primValue</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, hint Number).</li><li>Return ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>primValue</var>).</li></ol></emu-alg>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n\n      <div id=\"excluded-sec-tonumber-applied-to-the-string-type\"><h1><span class=\"secnum\">7.1.4.1</span>#sec-tonumber-applied-to-the-string-type ToNumber Applied to the String Type</h1>...</div></emu-clause>\n\n    "}, "sec-date.prototype.tojson": {"num": "20.4.4.37", "title": "#sec-date.prototype.tojson Date.prototype.toJSON ( key )", "html": "<emu-clause id=\"sec-date.prototype.tojson\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.tojson\">#sec-date.prototype.tojson</span> Date.prototype.toJSON ( <var>key</var> )</h1>\n        <p>This function provides a String representation of a Date object for use by <code>JSON.stringify</code> (<emu-xref href=\"#sec-json.stringify\"><a href=\"#sec-json.stringify\" class=\"excluded-xref\" excluded-id=\"sec-json.stringify\">#sec-json.stringify</a></emu-xref>).</p>\n        <p>When the <code>toJSON</code> method is called with argument <var>key</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>tv</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>O</var>, hint Number).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number and <var>tv</var> is not finite, return <emu-val>null</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>O</var>, <emu-val>\"toISOString\"</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The argument is ignored.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>toJSON</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a Date object. Therefore, it can be transferred to other kinds of objects for use as a method. However, it does require that any such object have a <code>toISOString</code> method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-applystringornumericbinaryoperator": {"num": "12.15.5", "title": "#sec-applystringornumericbinaryoperator ApplyStringOrNumericBinaryOperator ( lval, opText, rval )", "html": "<emu-clause id=\"sec-applystringornumericbinaryoperator\" aoid=\"ApplyStringOrNumericBinaryOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</span> ApplyStringOrNumericBinaryOperator ( <var>lval</var>, <var>opText</var>, <var>rval</var> )</h1>\n      <p>The abstract operation ApplyStringOrNumericBinaryOperator takes arguments <var>lval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>opText</var> (a sequence of Unicode code points), and <var>rval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>opText</var> is <code>+</code>, then<ol><li id=\"step-binary-op-toprimitive-lval\">Let <var>lprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>lval</var>).</li><li id=\"step-binary-op-toprimitive-rval\">Let <var>rprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>rval</var>).</li><li id=\"step-binary-op-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lprim</var>) is String or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rprim</var>) is String, then<ol><li>Let <var>lstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>rprim</var>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>lstr</var> and <var>rstr</var>.</li></ol></li><li>Set <var>lval</var> to <var>lprim</var>.</li><li>Set <var>rval</var> to <var>rprim</var>.</li></ol></li><li>NOTE: At this point, it must be a numeric operation.</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>Let <var>operation</var> be the abstract operation associated with <var>opText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>opText</var>       </th><th> <var>operation</var>             </th></tr>\n                <tr><td> <code>**</code>           </td><td> <var>T</var>::exponentiate       </td></tr>\n                <tr><td> <code>*</code>            </td><td> <var>T</var>::multiply           </td></tr>\n                <tr><td> <code>/</code>            </td><td> <var>T</var>::divide             </td></tr>\n                <tr><td> <code>%</code>            </td><td> <var>T</var>::remainder          </td></tr>\n                <tr><td> <code>+</code>            </td><td> <var>T</var>::add                </td></tr>\n                <tr><td> <code>-</code>            </td><td> <var>T</var>::subtract           </td></tr>\n                <tr><td> <code>&lt;&lt;</code>     </td><td> <var>T</var>::leftShift          </td></tr>\n                <tr><td> <code>&gt;&gt;</code>     </td><td> <var>T</var>::signedRightShift   </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;</code> </td><td> <var>T</var>::unsignedRightShift </td></tr>\n                <tr><td> <code>&amp;</code>        </td><td> <var>T</var>::bitwiseAND         </td></tr>\n                <tr><td> <code>^</code>            </td><td> <var>T</var>::bitwiseXOR         </td></tr>\n                <tr><td> <code>|</code>            </td><td> <var>T</var>::bitwiseOR          </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Return ? <var>operation</var>(<var>lnum</var>, <var>rnum</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>No hint is provided in the calls to <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref> in steps <emu-xref href=\"#step-binary-op-toprimitive-lval\"><a href=\"#step-binary-op-toprimitive-lval\">1.a</a></emu-xref> and <emu-xref href=\"#step-binary-op-toprimitive-rval\"><a href=\"#step-binary-op-toprimitive-rval\">1.b</a></emu-xref>. All standard objects except Date objects handle the absence of a hint as if the hint Number were given; Date objects handle the absence of a hint as if the hint String were given. Exotic objects may handle the absence of a hint in some other manner.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">1.c</a></emu-xref> differs from step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> of the <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> algorithm, by using the logical-or operation instead of the logical-and operation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ordinarytoprimitive": {"num": "7.1.1.1", "title": "#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )", "html": "<emu-clause id=\"sec-ordinarytoprimitive\" aoid=\"OrdinaryToPrimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarytoprimitive\">#sec-ordinarytoprimitive</span> OrdinaryToPrimitive ( <var>O</var>, <var>hint</var> )</h1>\n        <p>The abstract operation OrdinaryToPrimitive takes arguments <var>O</var> and <var>hint</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>hint</var>) is String and its value is either <emu-val>\"string\"</emu-val> or <emu-val>\"number\"</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"string\"</emu-val>, then<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"toString\"</emu-val>, <emu-val>\"valueOf\"</emu-val> &#187;.</li></ol></li><li>Else,<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"valueOf\"</emu-val>, <emu-val>\"toString\"</emu-val> &#187;.</li></ol></li><li>For each element <var>name</var> of <var>methodNames</var>, do<ol><li>Let <var>method</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>method</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>O</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li></ol></li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-tobigint": {"num": "7.1.13", "title": "#sec-tobigint ToBigInt ( argument )", "html": "<emu-clause id=\"sec-tobigint\" aoid=\"ToBigInt\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tobigint\">#sec-tobigint</span> ToBigInt ( <var>argument</var> )</h1>\n      <p>The abstract operation ToBigInt takes argument <var>argument</var>. It converts <var>argument</var> to a BigInt value, or throws if an implicit conversion from Number would be required. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, hint Number).</li><li>Return the value that <var>prim</var> corresponds to in <emu-xref href=\"#table-tobigint\"><a href=\"#table-tobigint\" class=\"excluded-xref\" excluded-id=\"table-tobigint\">#table-tobigint</a></emu-xref>.</li></ol></emu-alg>\n      <emu-table id=\"table-tobigint\" caption=\"BigInt Conversions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tobigint\">#table-tobigint</span>: BigInt Conversions</figcaption>\n        <table>\n          <tbody>\n            <tr>\n              <th>\n                Argument Type\n              </th>\n              <th>\n                Result\n              </th>\n            </tr>\n            <tr>\n              <td>\n                Undefined\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Null\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Boolean\n              </td>\n              <td>\n                Return <code>1n</code> if <var>prim</var> is <emu-val>true</emu-val> and <code>0n</code> if <var>prim</var> is <emu-val>false</emu-val>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                BigInt\n              </td>\n              <td>\n                Return <var>prim</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Number\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                String\n              </td>\n              <td>\n                <emu-alg><ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>prim</var>).</li><li>If <var>n</var> is <emu-val>NaN</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Return <var>n</var>.</li></ol></emu-alg>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Symbol\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-topropertykey": {"num": "7.1.19", "title": "#sec-topropertykey ToPropertyKey ( argument )", "html": "<emu-clause id=\"sec-topropertykey\" aoid=\"ToPropertyKey\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-topropertykey\">#sec-topropertykey</span> ToPropertyKey ( <var>argument</var> )</h1>\n      <p>The abstract operation ToPropertyKey takes argument <var>argument</var>. It converts <var>argument</var> to a value that can be used as a property key. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>key</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, hint String).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is Symbol, then<ol><li>Return <var>key</var>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>key</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-tonumeric": {"num": "7.1.3", "title": "#sec-tonumeric ToNumeric ( value )", "html": "<emu-clause id=\"sec-tonumeric\" aoid=\"ToNumeric\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tonumeric\">#sec-tonumeric</span> ToNumeric ( <var>value</var> )</h1>\n      <p>The abstract operation ToNumeric takes argument <var>value</var>. It returns <var>value</var> converted to a numeric value of type Number or BigInt. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>primValue</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>value</var>, hint Number).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>primValue</var>) is BigInt, return <var>primValue</var>.</li><li>Return ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>primValue</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-tonumber-conversions": "Table 11", "table-tobigint": "Table 12", "table-tostring-conversions": "Table 13"}}, "to": {"secList": ["sec-date.prototype-@@toprimitive", "sec-tostring", "sec-abstract-relational-comparison", "sec-toprimitive", "sec-bigint-constructor-number-value", "sec-type-conversion", "sec-tonumber", "sec-date.prototype.tojson", "sec-applystringornumericbinaryoperator", "sec-ordinarytoprimitive", "sec-tobigint", "sec-topropertykey", "sec-tonumeric"], "secData": {"sec-date.prototype-@@toprimitive": {"num": "20.4.4.45", "title": "#sec-date.prototype-@@toprimitive Date.prototype [ @@toPrimitive ] ( hint )", "html": "<emu-clause id=\"sec-date.prototype-@@toprimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</span> Date.prototype [ @@toPrimitive ] ( <var>hint</var> )</h1>\n        <p>This function is called by ECMAScript language operators to convert a Date object to a primitive value. The allowed values for <var>hint</var> are <emu-val>\"default\"</emu-val>, <emu-val>\"number\"</emu-val>, and <emu-val>\"string\"</emu-val>. Date objects, are unique among built-in ECMAScript object in that they treat <emu-val>\"default\"</emu-val> as being equivalent to <emu-val>\"string\"</emu-val>, All other built-in ECMAScript objects treat <emu-val>\"default\"</emu-val> as being equivalent to <emu-val>\"number\"</emu-val>.</p>\n        <p>When the <code>@@toPrimitive</code> method is called with argument <var>hint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>hint</var> is <emu-val>\"string\"</emu-val> or <emu-val>\"default\"</emu-val>, then<ol><li>Let <var>tryFirst</var> be <emu-const>string</emu-const>.</li></ol></li><li>Else if <var>hint</var> is <emu-val>\"number\"</emu-val>, then<ol><li>Let <var>tryFirst</var> be <emu-const>number</emu-const>.</li></ol></li><li>Else, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>O</var>, <var>tryFirst</var>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.toPrimitive]\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-tostring": {"num": "7.1.17", "title": "#sec-tostring ToString ( argument )", "html": "<emu-clause id=\"sec-tostring\" aoid=\"ToString\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tostring\">#sec-tostring</span> ToString ( <var>argument</var> )</h1>\n      <p>The abstract operation ToString takes argument <var>argument</var>. It converts <var>argument</var> to a value of type String according to <emu-xref href=\"#table-tostring-conversions\"><a href=\"#table-tostring-conversions\" class=\"excluded-xref\" excluded-id=\"table-tostring-conversions\">#table-tostring-conversions</a></emu-xref>:</p>\n      <emu-table id=\"table-tostring-conversions\" caption=\"ToString Conversions\" oldids=\"table-12\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tostring-conversions\">#table-tostring-conversions</span>: <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> Conversions</figcaption><span id=\"table-12\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Argument Type\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              Undefined\n            </td>\n            <td>\n              Return <emu-val>\"undefined\"</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            </td>\n            <td>\n              Return <emu-val>\"null\"</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            </td>\n            <td>\n              <p>If <var>argument</var> is <emu-val>true</emu-val>, return <emu-val>\"true\"</emu-val>.</p>\n              <p>If <var>argument</var> is <emu-val>false</emu-val>, return <emu-val>\"false\"</emu-val>.</p>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            </td>\n            <td>\n              Return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>argument</var>).\n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            </td>\n            <td>\n              Return <var>argument</var>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            </td>\n            <td>\n              Return ! <emu-xref aoid=\"BigInt::toString\"><a href=\"#sec-numeric-types-bigint-tostring\">BigInt::toString</a></emu-xref>(<var>argument</var>).\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Object\n            </td>\n            <td>\n              <p>Apply the following steps:</p>\n              <emu-alg><ol><li>Let <var>primValue</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, <emu-const>string</emu-const>).</li><li>Return ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>primValue</var>).</li></ol></emu-alg>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-abstract-relational-comparison": {"num": "7.2.14", "title": "#sec-abstract-relational-comparison Abstract Relational Comparison", "html": "<emu-clause id=\"sec-abstract-relational-comparison\" aoid=\"Abstract Relational Comparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-relational-comparison\">#sec-abstract-relational-comparison</span> Abstract Relational Comparison</h1>\n      <p>The comparison <var>x</var> &lt; <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). In addition to <var>x</var> and <var>y</var> the algorithm takes a Boolean flag named <var>LeftFirst</var> as a parameter. The flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. The default value of <var>LeftFirst</var> is <emu-val>true</emu-val> and indicates that the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. Such a comparison is performed as follows:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), return <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>)::lessThan(<var>nx</var>, <var>ny</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val> or <var>ny</var> is <emu-val>+&#8734;</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val> or <var>ny</var> is <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>nx</var> is less than the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>ny</var>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">1.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-toprimitive": {"num": "7.1.1", "title": "#sec-toprimitive ToPrimitive ( input [ , preferredType ] )", "html": "<emu-clause id=\"sec-toprimitive\" aoid=\"ToPrimitive\" oldids=\"table-9\"><span id=\"table-9\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toprimitive\">#sec-toprimitive</span> ToPrimitive ( <var>input</var> [ , <var>preferredType</var> ] )</h1>\n      <p>The abstract operation ToPrimitive takes argument <var>input</var> and optional argument <var>preferredType</var>. It converts its <var>input</var> argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint <var>preferredType</var> to favour that type. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>input</var> is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>input</var>) is Object, then<ol><li>Let <var>exoticToPrim</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>input</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref>).</li><li>If <var>exoticToPrim</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <var>preferredType</var> is not present, let <var>hint</var> be <emu-val>\"default\"</emu-val>.</li><li>Else if <var>preferredType</var> is <emu-const>string</emu-const>, let <var>hint</var> be <emu-val>\"string\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>preferredType</var> is <emu-const>number</emu-const>.</li><li>Let <var>hint</var> be <emu-val>\"number\"</emu-val>.</li></ol></li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>exoticToPrim</var>, <var>input</var>, &#171; <var>hint</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>preferredType</var> is not present, let <var>preferredType</var> be <emu-const>number</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>input</var>, <var>preferredType</var>).</li></ol></li><li>Return <var>input</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When ToPrimitive is called with no hint, then it generally behaves as if the hint were <emu-const>number</emu-const>. However, objects may over-ride this behaviour by defining a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref> method. Of the objects defined in this specification only Date objects (see <emu-xref href=\"#sec-date.prototype-@@toprimitive\"><a href=\"#sec-date.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</a></emu-xref>) and Symbol objects (see <emu-xref href=\"#sec-symbol.prototype-@@toprimitive\"><a href=\"#sec-symbol.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-symbol.prototype-@@toprimitive\">#sec-symbol.prototype-@@toprimitive</a></emu-xref>) over-ride the default ToPrimitive behaviour. Date objects treat no hint as if the hint were <emu-const>string</emu-const>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ordinarytoprimitive\"><h1><span class=\"secnum\">7.1.1.1</span>#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )</h1>...</div></emu-clause>\n\n    "}, "sec-bigint-constructor-number-value": {"num": "20.2.1.1", "title": "#sec-bigint-constructor-number-value BigInt ( value )", "html": "<emu-clause id=\"sec-bigint-constructor-number-value\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint-constructor-number-value\">#sec-bigint-constructor-number-value</span> BigInt ( <var>value</var> )</h1>\n        <p>When <code>BigInt</code> is called with argument <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>value</var>, <emu-const>number</emu-const>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>prim</var>) is Number, return ?&#160;<emu-xref aoid=\"NumberToBigInt\"><a href=\"#sec-numbertobigint\">NumberToBigInt</a></emu-xref>(<var>prim</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-numbertobigint\"><h1><span class=\"secnum\">20.2.1.1.1</span>#sec-numbertobigint NumberToBigInt ( number )</h1>...</div></emu-clause>\n    "}, "sec-type-conversion": {"num": "7.1", "title": "#sec-type-conversion Type Conversion", "html": "<emu-clause id=\"sec-type-conversion\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</span> Type Conversion</h1>\n    <p>The ECMAScript language implicitly performs automatic type conversion as needed. To clarify the semantics of certain constructs it is useful to define a set of conversion <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>. The conversion <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are polymorphic; they can accept a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>. But no other specification types are used with these operations.</p>\n    <p>The BigInt type has no implicit conversions in the ECMAScript language; programmers must call BigInt explicitly to convert values from other types.</p>\n\n    <div id=\"excluded-sec-toprimitive\"><h1><span class=\"secnum\">7.1.1</span>#sec-toprimitive ToPrimitive ( input [ , preferredType ] )</h1>...</div><div id=\"excluded-sec-toboolean\"><h1><span class=\"secnum\">7.1.2</span>#sec-toboolean ToBoolean ( argument )</h1>...</div><div id=\"excluded-sec-tonumeric\"><h1><span class=\"secnum\">7.1.3</span>#sec-tonumeric ToNumeric ( value )</h1>...</div><div id=\"excluded-sec-tonumber\"><h1><span class=\"secnum\">7.1.4</span>#sec-tonumber ToNumber ( argument )</h1>...</div><div id=\"excluded-sec-tointeger\"><h1><span class=\"secnum\">7.1.5</span>#sec-tointeger ToInteger ( argument )</h1>...</div><div id=\"excluded-sec-toint32\"><h1><span class=\"secnum\">7.1.6</span>#sec-toint32 ToInt32 ( argument )</h1>...</div><div id=\"excluded-sec-touint32\"><h1><span class=\"secnum\">7.1.7</span>#sec-touint32 ToUint32 ( argument )</h1>...</div><div id=\"excluded-sec-toint16\"><h1><span class=\"secnum\">7.1.8</span>#sec-toint16 ToInt16 ( argument )</h1>...</div><div id=\"excluded-sec-touint16\"><h1><span class=\"secnum\">7.1.9</span>#sec-touint16 ToUint16 ( argument )</h1>...</div><div id=\"excluded-sec-toint8\"><h1><span class=\"secnum\">7.1.10</span>#sec-toint8 ToInt8 ( argument )</h1>...</div><div id=\"excluded-sec-touint8\"><h1><span class=\"secnum\">7.1.11</span>#sec-touint8 ToUint8 ( argument )</h1>...</div><div id=\"excluded-sec-touint8clamp\"><h1><span class=\"secnum\">7.1.12</span>#sec-touint8clamp ToUint8Clamp ( argument )</h1>...</div><div id=\"excluded-sec-tobigint\"><h1><span class=\"secnum\">7.1.13</span>#sec-tobigint ToBigInt ( argument )</h1>...</div><div id=\"excluded-sec-stringtobigint\"><h1><span class=\"secnum\">7.1.14</span>#sec-stringtobigint StringToBigInt ( argument )</h1>...</div><div id=\"excluded-sec-tobigint64\"><h1><span class=\"secnum\">7.1.15</span>#sec-tobigint64 ToBigInt64 ( argument )</h1>...</div><div id=\"excluded-sec-tobiguint64\"><h1><span class=\"secnum\">7.1.16</span>#sec-tobiguint64 ToBigUint64 ( argument )</h1>...</div><div id=\"excluded-sec-tostring\"><h1><span class=\"secnum\">7.1.17</span>#sec-tostring ToString ( argument )</h1>...</div><div id=\"excluded-sec-toobject\"><h1><span class=\"secnum\">7.1.18</span>#sec-toobject ToObject ( argument )</h1>...</div><div id=\"excluded-sec-topropertykey\"><h1><span class=\"secnum\">7.1.19</span>#sec-topropertykey ToPropertyKey ( argument )</h1>...</div><div id=\"excluded-sec-tolength\"><h1><span class=\"secnum\">7.1.20</span>#sec-tolength ToLength ( argument )</h1>...</div><div id=\"excluded-sec-canonicalnumericindexstring\"><h1><span class=\"secnum\">7.1.21</span>#sec-canonicalnumericindexstring CanonicalNumericIndexString ( argument )</h1>...</div><div id=\"excluded-sec-toindex\"><h1><span class=\"secnum\">7.1.22</span>#sec-toindex ToIndex ( value )</h1>...</div></emu-clause>\n\n  "}, "sec-tonumber": {"num": "7.1.4", "title": "#sec-tonumber ToNumber ( argument )", "html": "<emu-clause id=\"sec-tonumber\" aoid=\"ToNumber\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tonumber\">#sec-tonumber</span> ToNumber ( <var>argument</var> )</h1>\n      <p>The abstract operation ToNumber takes argument <var>argument</var>. It converts <var>argument</var> to a value of type Number according to <emu-xref href=\"#table-tonumber-conversions\"><a href=\"#table-tonumber-conversions\" class=\"excluded-xref\" excluded-id=\"table-tonumber-conversions\">#table-tonumber-conversions</a></emu-xref>:</p>\n      <emu-table id=\"table-tonumber-conversions\" caption=\"ToNumber Conversions\" oldids=\"table-11\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tonumber-conversions\">#table-tonumber-conversions</span>: <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> Conversions</figcaption><span id=\"table-11\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Argument Type\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              Undefined\n            </td>\n            <td>\n              Return <emu-val>NaN</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            </td>\n            <td>\n              Return <emu-val>+0</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            </td>\n            <td>\n              If <var>argument</var> is <emu-val>true</emu-val>, return 1. If <var>argument</var> is <emu-val>false</emu-val>, return <emu-val>+0</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            </td>\n            <td>\n              Return <var>argument</var> (no conversion).\n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            </td>\n            <td>\n              See grammar and conversion algorithm below.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Object\n            </td>\n            <td>\n              <p>Apply the following steps:</p>\n              <emu-alg><ol><li>Let <var>primValue</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, <emu-const>number</emu-const>).</li><li>Return ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>primValue</var>).</li></ol></emu-alg>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n\n      <div id=\"excluded-sec-tonumber-applied-to-the-string-type\"><h1><span class=\"secnum\">7.1.4.1</span>#sec-tonumber-applied-to-the-string-type ToNumber Applied to the String Type</h1>...</div></emu-clause>\n\n    "}, "sec-date.prototype.tojson": {"num": "20.4.4.37", "title": "#sec-date.prototype.tojson Date.prototype.toJSON ( key )", "html": "<emu-clause id=\"sec-date.prototype.tojson\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.tojson\">#sec-date.prototype.tojson</span> Date.prototype.toJSON ( <var>key</var> )</h1>\n        <p>This function provides a String representation of a Date object for use by <code>JSON.stringify</code> (<emu-xref href=\"#sec-json.stringify\"><a href=\"#sec-json.stringify\" class=\"excluded-xref\" excluded-id=\"sec-json.stringify\">#sec-json.stringify</a></emu-xref>).</p>\n        <p>When the <code>toJSON</code> method is called with argument <var>key</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>tv</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>O</var>, <emu-const>number</emu-const>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number and <var>tv</var> is not finite, return <emu-val>null</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>O</var>, <emu-val>\"toISOString\"</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The argument is ignored.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>toJSON</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a Date object. Therefore, it can be transferred to other kinds of objects for use as a method. However, it does require that any such object have a <code>toISOString</code> method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-applystringornumericbinaryoperator": {"num": "12.15.5", "title": "#sec-applystringornumericbinaryoperator ApplyStringOrNumericBinaryOperator ( lval, opText, rval )", "html": "<emu-clause id=\"sec-applystringornumericbinaryoperator\" aoid=\"ApplyStringOrNumericBinaryOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</span> ApplyStringOrNumericBinaryOperator ( <var>lval</var>, <var>opText</var>, <var>rval</var> )</h1>\n      <p>The abstract operation ApplyStringOrNumericBinaryOperator takes arguments <var>lval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>opText</var> (a sequence of Unicode code points), and <var>rval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>opText</var> is <code>+</code>, then<ol><li id=\"step-binary-op-toprimitive-lval\">Let <var>lprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>lval</var>).</li><li id=\"step-binary-op-toprimitive-rval\">Let <var>rprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>rval</var>).</li><li id=\"step-binary-op-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lprim</var>) is String or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rprim</var>) is String, then<ol><li>Let <var>lstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>rprim</var>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>lstr</var> and <var>rstr</var>.</li></ol></li><li>Set <var>lval</var> to <var>lprim</var>.</li><li>Set <var>rval</var> to <var>rprim</var>.</li></ol></li><li>NOTE: At this point, it must be a numeric operation.</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>Let <var>operation</var> be the abstract operation associated with <var>opText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>opText</var>       </th><th> <var>operation</var>             </th></tr>\n                <tr><td> <code>**</code>           </td><td> <var>T</var>::exponentiate       </td></tr>\n                <tr><td> <code>*</code>            </td><td> <var>T</var>::multiply           </td></tr>\n                <tr><td> <code>/</code>            </td><td> <var>T</var>::divide             </td></tr>\n                <tr><td> <code>%</code>            </td><td> <var>T</var>::remainder          </td></tr>\n                <tr><td> <code>+</code>            </td><td> <var>T</var>::add                </td></tr>\n                <tr><td> <code>-</code>            </td><td> <var>T</var>::subtract           </td></tr>\n                <tr><td> <code>&lt;&lt;</code>     </td><td> <var>T</var>::leftShift          </td></tr>\n                <tr><td> <code>&gt;&gt;</code>     </td><td> <var>T</var>::signedRightShift   </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;</code> </td><td> <var>T</var>::unsignedRightShift </td></tr>\n                <tr><td> <code>&amp;</code>        </td><td> <var>T</var>::bitwiseAND         </td></tr>\n                <tr><td> <code>^</code>            </td><td> <var>T</var>::bitwiseXOR         </td></tr>\n                <tr><td> <code>|</code>            </td><td> <var>T</var>::bitwiseOR          </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Return ? <var>operation</var>(<var>lnum</var>, <var>rnum</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>No hint is provided in the calls to <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref> in steps <emu-xref href=\"#step-binary-op-toprimitive-lval\"><a href=\"#step-binary-op-toprimitive-lval\">1.a</a></emu-xref> and <emu-xref href=\"#step-binary-op-toprimitive-rval\"><a href=\"#step-binary-op-toprimitive-rval\">1.b</a></emu-xref>. All standard objects except Date objects handle the absence of a hint as if <emu-const>number</emu-const> were given; Date objects handle the absence of a hint as if <emu-const>string</emu-const> were given. Exotic objects may handle the absence of a hint in some other manner.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">1.c</a></emu-xref> differs from step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> of the <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> algorithm, by using the logical-or operation instead of the logical-and operation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ordinarytoprimitive": {"num": "7.1.1.1", "title": "#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )", "html": "<emu-clause id=\"sec-ordinarytoprimitive\" aoid=\"OrdinaryToPrimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarytoprimitive\">#sec-ordinarytoprimitive</span> OrdinaryToPrimitive ( <var>O</var>, <var>hint</var> )</h1>\n        <p>The abstract operation OrdinaryToPrimitive takes arguments <var>O</var> and <var>hint</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>hint</var> is either <emu-const>string</emu-const> or <emu-const>number</emu-const>.</li><li>If <var>hint</var> is <emu-const>string</emu-const>, then<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"toString\"</emu-val>, <emu-val>\"valueOf\"</emu-val> &#187;.</li></ol></li><li>Else,<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"valueOf\"</emu-val>, <emu-val>\"toString\"</emu-val> &#187;.</li></ol></li><li>For each element <var>name</var> of <var>methodNames</var>, do<ol><li>Let <var>method</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>method</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>O</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li></ol></li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-tobigint": {"num": "7.1.13", "title": "#sec-tobigint ToBigInt ( argument )", "html": "<emu-clause id=\"sec-tobigint\" aoid=\"ToBigInt\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tobigint\">#sec-tobigint</span> ToBigInt ( <var>argument</var> )</h1>\n      <p>The abstract operation ToBigInt takes argument <var>argument</var>. It converts <var>argument</var> to a BigInt value, or throws if an implicit conversion from Number would be required. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, <emu-const>number</emu-const>).</li><li>Return the value that <var>prim</var> corresponds to in <emu-xref href=\"#table-tobigint\"><a href=\"#table-tobigint\" class=\"excluded-xref\" excluded-id=\"table-tobigint\">#table-tobigint</a></emu-xref>.</li></ol></emu-alg>\n      <emu-table id=\"table-tobigint\" caption=\"BigInt Conversions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tobigint\">#table-tobigint</span>: BigInt Conversions</figcaption>\n        <table>\n          <tbody>\n            <tr>\n              <th>\n                Argument Type\n              </th>\n              <th>\n                Result\n              </th>\n            </tr>\n            <tr>\n              <td>\n                Undefined\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Null\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Boolean\n              </td>\n              <td>\n                Return <code>1n</code> if <var>prim</var> is <emu-val>true</emu-val> and <code>0n</code> if <var>prim</var> is <emu-val>false</emu-val>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                BigInt\n              </td>\n              <td>\n                Return <var>prim</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Number\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                String\n              </td>\n              <td>\n                <emu-alg><ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>prim</var>).</li><li>If <var>n</var> is <emu-val>NaN</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Return <var>n</var>.</li></ol></emu-alg>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Symbol\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-topropertykey": {"num": "7.1.19", "title": "#sec-topropertykey ToPropertyKey ( argument )", "html": "<emu-clause id=\"sec-topropertykey\" aoid=\"ToPropertyKey\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-topropertykey\">#sec-topropertykey</span> ToPropertyKey ( <var>argument</var> )</h1>\n      <p>The abstract operation ToPropertyKey takes argument <var>argument</var>. It converts <var>argument</var> to a value that can be used as a property key. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>key</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, <emu-const>string</emu-const>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is Symbol, then<ol><li>Return <var>key</var>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>key</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-tonumeric": {"num": "7.1.3", "title": "#sec-tonumeric ToNumeric ( value )", "html": "<emu-clause id=\"sec-tonumeric\" aoid=\"ToNumeric\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tonumeric\">#sec-tonumeric</span> ToNumeric ( <var>value</var> )</h1>\n      <p>The abstract operation ToNumeric takes argument <var>value</var>. It returns <var>value</var> converted to a numeric value of type Number or BigInt. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>primValue</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>value</var>, <emu-const>number</emu-const>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>primValue</var>) is BigInt, return <var>primValue</var>.</li><li>Return ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>primValue</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-tonumber-conversions": "Table 11", "table-tobigint": "Table 12", "table-tostring-conversions": "Table 13"}}}