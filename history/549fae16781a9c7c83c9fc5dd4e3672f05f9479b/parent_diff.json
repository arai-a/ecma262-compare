{"from": {"secList": ["sec-list-and-record-specification-type"], "secData": {"sec-list-and-record-specification-type": {"num": "6.2.1", "title": "#sec-list-and-record-specification-type The List and Record Specification Types", "html": "<emu-clause id=\"sec-list-and-record-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-list-and-record-specification-type\">#sec-list-and-record-specification-type</span> The List and Record Specification Types</h1>\n      <p>The <dfn variants=\"Lists\">List</dfn> type is used to explain the evaluation of argument lists (see <emu-xref href=\"#sec-argument-lists\"><a href=\"#sec-argument-lists\" class=\"excluded-xref\" excluded-id=\"sec-argument-lists\">#sec-argument-lists</a></emu-xref>) in <code>new</code> expressions, in function calls, and in other algorithms where a simple ordered list of values is needed. Values of the List type are simply ordered sequences of list elements containing the individual values. These sequences may be of any length. The elements of a list may be randomly accessed using 0-origin indices. For notational convenience an array-like syntax can be used to access List elements. For example, <var>arguments</var>[2] is shorthand for saying the 3<sup>rd</sup> element of the List <var>arguments</var>.</p>\n      <p>When an algorithm iterates over the elements of a List without specifying an order, the order used is the order of the elements in the List.</p>\n      <p>For notational convenience within this specification, a literal syntax can be used to express a new List value. For example, &#171; 1, 2 &#187; defines a List value that has two elements each of which is initialized to a specific value. A new empty List can be expressed as &#171; &#187;.</p>\n      <p>In this specification, the phrase \"the <dfn id=\"list-concatenation\">list-concatenation</dfn> of <var>A</var>, <var>B</var>, ...\" (where each argument is a possibly empty List) denotes a new List value whose elements are the concatenation of the elements (in order) of each of the arguments (in order).</p>\n      <p>The <dfn variants=\"Records\">Record</dfn> type is used to describe data aggregations within the algorithms of this specification. A Record type value consists of one or more named fields. The value of each field is either an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or an abstract value represented by a name associated with the Record type. Field names are always enclosed in double brackets, for example [[Value]].</p>\n      <p>For notational convenience within this specification, an object literal-like syntax can be used to express a Record value. For example, { [[Field1]]: 42, [[Field2]]: <emu-val>false</emu-val>, [[Field3]]: <emu-const>empty</emu-const> } defines a Record value that has three fields, each of which is initialized to a specific value. Field name order is not significant. Any fields that are not explicitly listed are considered to be absent.</p>\n      <p>In specification text and algorithms, dot notation may be used to refer to a specific field of a Record value. For example, if R is the record shown in the previous paragraph then R.[[Field2]] is shorthand for &#8220;the field of R named [[Field2]]&#8221;.</p>\n      <p>Schema for commonly used Record field combinations may be named, and that name may be used as a prefix to a literal Record value to identify the specific kind of aggregations that is being described. For example: PropertyDescriptor { [[Value]]: 42, [[Writable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-list-and-record-specification-type"], "secData": {"sec-list-and-record-specification-type": {"num": "6.2.1", "title": "#sec-list-and-record-specification-type The List and Record Specification Types", "html": "<emu-clause id=\"sec-list-and-record-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-list-and-record-specification-type\">#sec-list-and-record-specification-type</span> The List and Record Specification Types</h1>\n      <p>The <dfn variants=\"Lists\">List</dfn> type is used to explain the evaluation of argument lists (see <emu-xref href=\"#sec-argument-lists\"><a href=\"#sec-argument-lists\" class=\"excluded-xref\" excluded-id=\"sec-argument-lists\">#sec-argument-lists</a></emu-xref>) in <code>new</code> expressions, in function calls, and in other algorithms where a simple ordered list of values is needed. Values of the List type are simply ordered sequences of list elements containing the individual values. These sequences may be of any length. The elements of a list may be randomly accessed using 0-origin indices. For notational convenience an array-like syntax can be used to access List elements. For example, <var>arguments</var>[2] is shorthand for saying the 3<sup>rd</sup> element of the List <var>arguments</var>.</p>\n      <p>When an algorithm iterates over the elements of a List without specifying an order, the order used is the order of the elements in the List.</p>\n      <p>For notational convenience within this specification, a literal syntax can be used to express a new List value. For example, &#171; 1, 2 &#187; defines a List value that has two elements each of which is initialized to a specific value. A new empty List can be expressed as &#171; &#187;.</p>\n      <p>In this specification, the phrase \"the <dfn id=\"list-concatenation\">list-concatenation</dfn> of <var>A</var>, <var>B</var>, ...\" (where each argument is a possibly empty List) denotes a new List value whose elements are the concatenation of the elements (in order) of each of the arguments (in order).</p>\n      <p>The <dfn variants=\"Records\">Record</dfn> type is used to describe data aggregations within the algorithms of this specification. A Record type value consists of one or more named fields. The value of each field is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or specification value. Field names are always enclosed in double brackets, for example [[Value]].</p>\n      <p>For notational convenience within this specification, an object literal-like syntax can be used to express a Record value. For example, { [[Field1]]: 42, [[Field2]]: <emu-val>false</emu-val>, [[Field3]]: <emu-const>empty</emu-const> } defines a Record value that has three fields, each of which is initialized to a specific value. Field name order is not significant. Any fields that are not explicitly listed are considered to be absent.</p>\n      <p>In specification text and algorithms, dot notation may be used to refer to a specific field of a Record value. For example, if R is the record shown in the previous paragraph then R.[[Field2]] is shorthand for &#8220;the field of R named [[Field2]]&#8221;.</p>\n      <p>Schema for commonly used Record field combinations may be named, and that name may be used as a prefix to a literal Record value to identify the specific kind of aggregations that is being described. For example: PropertyDescriptor { [[Value]]: 42, [[Writable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n\n    "}}, "figData": {}}}