{"from": {"secList": ["sec-instanceofoperator"], "secData": {"sec-instanceofoperator": {"num": "12.10.4", "title": "#sec-instanceofoperator Runtime Semantics: InstanceofOperator ( V, target )", "html": "<emu-clause id=\"sec-instanceofoperator\" aoid=\"InstanceofOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-instanceofoperator\">#sec-instanceofoperator</span> Runtime Semantics: InstanceofOperator ( <var>V</var>, <var>target</var> )</h1>\n      <p>The abstract operation InstanceofOperator takes arguments <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>target</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It implements the generic algorithm for determining if <var>V</var> is an instance of <var>target</var> either by consulting <var>target</var>'s @@hasinstance method or, if absent, determining whether the value of <var>target</var>'s <emu-val>\"prototype\"</emu-val> property is present in <var>V</var>'s prototype chain. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>instOfHandler</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>target</var>, @@hasInstance).</li><li>If <var>instOfHandler</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>instOfHandler</var>, <var>target</var>, &#171; <var>V</var> &#187;)).</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>target</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryHasInstance\"><a href=\"#sec-ordinaryhasinstance\">OrdinaryHasInstance</a></emu-xref>(<var>target</var>, <var>V</var>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Steps 4 and 5 provide compatibility with previous editions of ECMAScript that did not use a @@hasInstance method to define the <code>instanceof</code> operator semantics. If an object does not define or inherit @@hasInstance it uses the default <code>instanceof</code> semantics.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-instanceofoperator"], "secData": {"sec-instanceofoperator": {"num": "12.10.4", "title": "#sec-instanceofoperator Runtime Semantics: InstanceofOperator ( V, target )", "html": "<emu-clause id=\"sec-instanceofoperator\" aoid=\"InstanceofOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-instanceofoperator\">#sec-instanceofoperator</span> Runtime Semantics: InstanceofOperator ( <var>V</var>, <var>target</var> )</h1>\n      <p>The abstract operation InstanceofOperator takes arguments <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>target</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It implements the generic algorithm for determining if <var>V</var> is an instance of <var>target</var> either by consulting <var>target</var>'s @@hasInstance method or, if absent, determining whether the value of <var>target</var>'s <emu-val>\"prototype\"</emu-val> property is present in <var>V</var>'s prototype chain. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>instOfHandler</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>target</var>, @@hasInstance).</li><li>If <var>instOfHandler</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>instOfHandler</var>, <var>target</var>, &#171; <var>V</var> &#187;)).</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>target</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryHasInstance\"><a href=\"#sec-ordinaryhasinstance\">OrdinaryHasInstance</a></emu-xref>(<var>target</var>, <var>V</var>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Steps 4 and 5 provide compatibility with previous editions of ECMAScript that did not use a @@hasInstance method to define the <code>instanceof</code> operator semantics. If an object does not define or inherit @@hasInstance it uses the default <code>instanceof</code> semantics.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}}, "figData": {}}}