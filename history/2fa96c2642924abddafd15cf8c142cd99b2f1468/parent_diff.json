{"from": {"secList": ["sec-source-text-module-records", "sec-async-function-constructor-arguments", "sec-asyncgeneratorfunction", "sec-declarative-environment-records-setmutablebinding-n-v-s", "sec-runtime-semantics-classdefinitionevaluation", "sec-mathematical-operations", "sec-asyncgeneratorfunction-constructor"], "secData": {"sec-source-text-module-records": {"num": "15.2.1.17", "title": "#sec-source-text-module-records Source Text Module Records", "html": "<emu-clause id=\"sec-source-text-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-records\">#sec-source-text-module-records</span> Source Text Module Records</h1>\n\n        <p>A  <dfn id=\"sourctextmodule-record\">Source Text Module Record</dfn> is used to represent information about a module that was defined from ECMAScript source text (<emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>) that was parsed using the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Its fields contain digested information about the names that are imported by the module and its concrete methods use this digest to link, link, and evaluate the module.</p>\n\n        <p>A <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> can exist in a module graph with other subclasses of the abstract <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> type, and can participate in cycles with other subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type.</p>\n\n        <p>In addition to the fields defined in  <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref>, Source Text Module Records have the additional fields listed in  <emu-xref href=\"#table-38\"><a href=\"#table-38\" class=\"excluded-xref\" excluded-id=\"table-38\">#table-38</a></emu-xref>. Each of these fields is initially set in <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref>.</p>\n        <emu-table id=\"table-38\" caption=\"Additional Fields of Source Text Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-38\">#table-38</span>: Additional Fields of Source Text Module Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ECMAScriptCode]]\n              \n              </td>\n              <td>\n                a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n              \n              </td>\n              <td>\n                The result of parsing the source text of this module using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportEntries]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry Records\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry records derived from the code of this module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalExportEntries]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to declarations that occur within the module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IndirectExportEntries]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to reexported imports that occur within the module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[StarExportEntries]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to export * declarations that occur within the module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>An  <dfn id=\"importentry-record\">ImportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative import. Each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> has the fields defined in  <emu-xref href=\"#table-39\"><a href=\"#table-39\" class=\"excluded-xref\" excluded-id=\"table-39\">#table-39</a></emu-xref>:</p>\n        <emu-table id=\"table-39\" caption=\"ImportEntry Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-39\">#table-39</span>: <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              \n              </td>\n              <td>\n                String\n              \n              </td>\n              <td>\n                String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              \n              </td>\n              <td>\n                String\n              \n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. The value <code>\"*\"</code> indicates that the import request is for the target module's namespace object.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              \n              </td>\n              <td>\n                String\n              \n              </td>\n              <td>\n                The name that is used to locally access the imported value from within the importing module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-40\"><a href=\"#table-40\" class=\"excluded-xref\" excluded-id=\"table-40\">#table-40</a></emu-xref> gives examples of ImportEntry records fields used to represent the syntactic import forms:</p>\n          <emu-table id=\"table-40\" caption=\"Import Forms Mappings to ImportEntry Records\" informative=\"\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-40\">#table-40</span> (Informative): Import Forms Mappings to ImportEntry Records</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Import Statement Form\n                \n                </th>\n                <th>\n                  [[ModuleRequest]]\n                \n                </th>\n                <th>\n                  [[ImportName]]\n                \n                </th>\n                <th>\n                  [[LocalName]]\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>import v from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"default\"</code>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import * as ns from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"*\"</code>\n                \n                </td>\n                <td>\n                  <code>\"ns\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x} from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x as v} from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import \"mod\";</code>\n                \n                </td>\n                <td colspan=\"3\">\n                  An <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> is not created.\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>An  <dfn id=\"exportentry-record\">ExportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative export. Each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> has the fields defined in  <emu-xref href=\"#table-41\"><a href=\"#table-41\" class=\"excluded-xref\" excluded-id=\"table-41\">#table-41</a></emu-xref>:</p>\n        <emu-table id=\"table-41\" caption=\"ExportEntry Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-41\">#table-41</span>: <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ExportName]]\n              \n              </td>\n              <td>\n                String | null\n              \n              </td>\n              <td>\n                The name used to export this binding by this module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              \n              </td>\n              <td>\n                String | null\n              \n              </td>\n              <td>\n                The String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              \n              </td>\n              <td>\n                String | null\n              \n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>. <code>\"*\"</code> indicates that the export request is for all exported bindings.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              \n              </td>\n              <td>\n                String | null\n              \n              </td>\n              <td>\n                The name that is used to locally access the exported value from within the importing module. <emu-val>null</emu-val> if the exported value is not locally accessible from within the module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-42\"><a href=\"#table-42\" class=\"excluded-xref\" excluded-id=\"table-42\">#table-42</a></emu-xref> gives examples of the ExportEntry record fields used to represent the syntactic export forms:</p>\n          <emu-table id=\"table-42\" caption=\"Export Forms Mappings to ExportEntry Records\" informative=\"\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-42\">#table-42</span> (Informative): Export Forms Mappings to ExportEntry Records</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Export Statement Form\n                \n                </th>\n                <th>\n                  [[ExportName]]\n                \n                </th>\n                <th>\n                  [[ModuleRequest]]\n                \n                </th>\n                <th>\n                  [[ImportName]]\n                \n                </th>\n                <th>\n                  [[LocalName]]\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>export var v;</code>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function f(){}</code>\n                \n                </td>\n                <td>\n                  <code>\"default\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"f\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function(){}</code>\n                \n                </td>\n                <td>\n                  <code>\"default\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"*default*\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default 42;</code>\n                \n                </td>\n                <td>\n                  <code>\"default\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"*default*\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x};</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x};</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x} from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x} from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export * from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"*\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>The following definitions specify the required concrete methods and other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> for Source Text Module Records</p>\n\n        <div id=\"excluded-sec-parsemodule\"><h1><span class=\"secnum\">15.2.1.17.1</span>#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )</h1>...</div><div id=\"excluded-sec-getexportednames\"><h1><span class=\"secnum\">15.2.1.17.2</span>#sec-getexportednames GetExportedNames ( [ exportStarSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-resolveexport\"><h1><span class=\"secnum\">15.2.1.17.3</span>#sec-resolveexport ResolveExport ( exportName [ , resolveSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-initialize-environment\"><h1><span class=\"secnum\">15.2.1.17.4</span>#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-execute-module\"><h1><span class=\"secnum\">15.2.1.17.5</span>#sec-source-text-module-record-execute-module ExecuteModule ( ) Concrete Method</h1>...</div></emu-clause>\n\n      "}, "sec-async-function-constructor-arguments": {"num": "25.7.1.1", "title": "#sec-async-function-constructor-arguments AsyncFunction ( _p1_, _p2_, \u2026 , _pn_, _body_ )", "html": "<emu-clause id=\"sec-async-function-constructor-arguments\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor-arguments\">#sec-async-function-constructor-arguments</span> AsyncFunction ( _p1_, _p2_, &#8230; , _pn_, _body_ )</h1>\n\n        <p>The last argument specifies the body (executable code) of an async function. Any preceding arguments specify formal parameters.</p>\n\n        <p>When the `AsyncFunction` function is called with some arguments _p1_, _p2_, &#8230;, _pn_, _body_ (where _n_ might be 0, that is, there are no _p_ arguments, and where _body_ might also not be provided), the following steps are taken:</p>\n\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return <emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <code>\"async\"</code>, <var>args</var>).\n        </li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">See NOTE for <emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>.</div></emu-note>\n      </emu-clause>\n    "}, "sec-asyncgeneratorfunction": {"num": "25.3.1.1", "title": "#sec-asyncgeneratorfunction AsyncGeneratorFunction ( _p1_, _p2_, ..., _pn_, _body_ )", "html": "<emu-clause id=\"sec-asyncgeneratorfunction\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction\">#sec-asyncgeneratorfunction</span> AsyncGeneratorFunction ( _p1_, _p2_, ..., _pn_, _body_ )</h1>\n        <p>The last argument specifies the body (executable code) of an async generator function; any preceding arguments specify formal parameters.</p>\n        <p>When the `AsyncGeneratorFunction` function is called with some arguments _p1_, _p2_, &#8230; , _pn_, _body_ (where _n_ might be 0, that is, there are no \"_p_\" arguments, and where _body_ might also not be provided), the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return ?&#160;<emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <code>\"async generator\"</code>, <var>args</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>See NOTE for <emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-declarative-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.1.5", "title": "#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">#sec-declarative-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for declarative Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A binding for <var>N</var> normally already exists, but in rare cases it may not. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> does not have a binding for <var>N</var>, then<ol><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Perform <var>envRec</var>.CreateMutableBinding(<var>N</var>, <emu-val>true</emu-val>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is a strict binding, set <var>S</var> to <emu-val>true</emu-val>.</li><li>If the binding for <var>N</var> in <var>envRec</var> has not yet been initialized, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Else if the binding for <var>N</var> in <var>envRec</var> is a mutable binding, change its bound value to <var>V</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is an attempt to change the value of an immutable binding.</li><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An example of ECMAScript code that results in a missing binding at step 2 is:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>)</span>{<span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"var x; x = (delete x, 0);\"</span>)}</code></pre>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.13", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b8ea6aa5\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lex</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>lex</var>).</li><li>Let <var>classScopeEnvRec</var> be <var>classScope</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be the intrinsic object <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%ObjectPrototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be the intrinsic object <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%FunctionPrototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be the intrinsic object <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%FunctionPrototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <code>\"prototype\"</code>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(... args){ <span class=\"hljs-keyword\">super</span> (...args);}</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(){ }</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be the result of performing DefineMethod for <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var> as the optional <var>functionPrototype</var> argument.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>constructorInfo</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <code>\"derived\"</code>.</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>If <var>className</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <code>\"constructor\"</code>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>m</var> in order from <var>methods</var>, do<ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be the result of performing PropertyDefinitionEvaluation for <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be the result of performing PropertyDefinitionEvaluation for <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>Mathematical operations such as addition, subtraction, negation, multiplication, division, and the mathematical functions defined later in this clause should always be understood as computing exact mathematical results on mathematical real numbers, which unless otherwise noted do not include infinities and do not include a negative zero that is distinguished from positive zero. Algorithms in this standard that model floating-point arithmetic include explicit steps, where necessary, to handle infinities and signed zero and to perform rounding. If a mathematical operation or function is applied to a floating-point number, it should be understood as being applied to the exact mathematical value represented by that floating-point number; such a floating-point number must be finite, and if it is <emu-val>+0</emu-val> or <emu-val>-0</emu-val> then the corresponding mathematical value is simply 0.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is  <emu-eqn class=\"inline\">-<var>x</var></emu-eqn> if <var>x</var> is negative (less than zero) and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically smallest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function  <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions include <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that  <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>k</var>) &lt; <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>y</var>) and <var>x</var> - <var>k</var> = <var>q</var> &#215; <var>y</var></emu-eqn> for some integer <var>q</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor(<var>x</var>)</emu-eqn> produces the largest integer (closest to positive infinity) that is not larger than <var>x</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<var>x</var>) = <var>x</var> - (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 1)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-asyncgeneratorfunction-constructor": {"num": "25.3.1", "title": "#sec-asyncgeneratorfunction-constructor The AsyncGeneratorFunction Constructor", "html": "<emu-clause id=\"sec-asyncgeneratorfunction-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction-constructor\">#sec-asyncgeneratorfunction-constructor</span> The AsyncGeneratorFunction Constructor</h1>\n      <p>The AsyncGeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object <dfn>%AsyncGeneratorFunction%</dfn>.</li>\n        <li>creates and initializes a new AsyncGeneratorFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call `AsyncGeneratorFunction (...)` is equivalent to the object creation expression `new AsyncGeneratorFunction (...)` with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an `extends` clause of a class definition. Subclass constructors that intend to inherit the specified `AsyncGeneratorFunction` behaviour must include a `super` call to the `AsyncGeneratorFunction` <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal slots necessary for built-in AsyncGeneratorFunction behaviour. All ECMAScript syntactic forms for defining async generator function objects create direct instances of `AsyncGeneratorFunction`. There is no syntactic means to create instances of `AsyncGeneratorFunction` subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-asyncgeneratorfunction\"><h1><span class=\"secnum\">25.3.1.1</span>#sec-asyncgeneratorfunction AsyncGeneratorFunction ( _p1_, _p2_, ..., _pn_, _body_ )</h1>...</div></emu-clause>\n\n    "}}, "figData": {"table-3": "Table 3", "table-4": "Table 4", "table-cyclic-module-fields": "Table 39", "table-38": "Table 41", "table-39": "Table 42", "table-40": "Table 43", "table-41": "Table 44", "table-42": "Table 45"}}, "to": {"secList": ["sec-source-text-module-records", "sec-async-function-constructor-arguments", "sec-asyncgeneratorfunction", "sec-declarative-environment-records-setmutablebinding-n-v-s", "sec-runtime-semantics-classdefinitionevaluation", "sec-mathematical-operations", "sec-asyncgeneratorfunction-constructor"], "secData": {"sec-source-text-module-records": {"num": "15.2.1.17", "title": "#sec-source-text-module-records Source Text Module Records", "html": "<emu-clause id=\"sec-source-text-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-records\">#sec-source-text-module-records</span> Source Text Module Records</h1>\n\n        <p>A  <dfn id=\"sourctextmodule-record\">Source Text Module Record</dfn> is used to represent information about a module that was defined from ECMAScript source text (<emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>) that was parsed using the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Its fields contain digested information about the names that are imported by the module and its concrete methods use this digest to link, link, and evaluate the module.</p>\n\n        <p>A <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> can exist in a module graph with other subclasses of the abstract <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> type, and can participate in cycles with other subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type.</p>\n\n        <p>In addition to the fields defined in  <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref>, Source Text Module Records have the additional fields listed in  <emu-xref href=\"#table-38\"><a href=\"#table-38\" class=\"excluded-xref\" excluded-id=\"table-38\">#table-38</a></emu-xref>. Each of these fields is initially set in <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref>.</p>\n        <emu-table id=\"table-38\" caption=\"Additional Fields of Source Text Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-38\">#table-38</span>: Additional Fields of Source Text Module Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ECMAScriptCode]]\n              \n              </td>\n              <td>\n                a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n              \n              </td>\n              <td>\n                The result of parsing the source text of this module using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportEntries]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry Records\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry records derived from the code of this module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalExportEntries]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to declarations that occur within the module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IndirectExportEntries]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to reexported imports that occur within the module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[StarExportEntries]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to export * declarations that occur within the module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>An  <dfn id=\"importentry-record\">ImportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative import. Each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> has the fields defined in  <emu-xref href=\"#table-39\"><a href=\"#table-39\" class=\"excluded-xref\" excluded-id=\"table-39\">#table-39</a></emu-xref>:</p>\n        <emu-table id=\"table-39\" caption=\"ImportEntry Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-39\">#table-39</span>: <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              \n              </td>\n              <td>\n                String\n              \n              </td>\n              <td>\n                String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              \n              </td>\n              <td>\n                String\n              \n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. The value <code>\"*\"</code> indicates that the import request is for the target module's namespace object.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              \n              </td>\n              <td>\n                String\n              \n              </td>\n              <td>\n                The name that is used to locally access the imported value from within the importing module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-40\"><a href=\"#table-40\" class=\"excluded-xref\" excluded-id=\"table-40\">#table-40</a></emu-xref> gives examples of ImportEntry records fields used to represent the syntactic import forms:</p>\n          <emu-table id=\"table-40\" caption=\"Import Forms Mappings to ImportEntry Records\" informative=\"\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-40\">#table-40</span> (Informative): Import Forms Mappings to ImportEntry Records</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Import Statement Form\n                \n                </th>\n                <th>\n                  [[ModuleRequest]]\n                \n                </th>\n                <th>\n                  [[ImportName]]\n                \n                </th>\n                <th>\n                  [[LocalName]]\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>import v from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"default\"</code>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import * as ns from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"*\"</code>\n                \n                </td>\n                <td>\n                  <code>\"ns\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x} from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x as v} from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import \"mod\";</code>\n                \n                </td>\n                <td colspan=\"3\">\n                  An <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> is not created.\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>An  <dfn id=\"exportentry-record\">ExportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative export. Each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> has the fields defined in  <emu-xref href=\"#table-41\"><a href=\"#table-41\" class=\"excluded-xref\" excluded-id=\"table-41\">#table-41</a></emu-xref>:</p>\n        <emu-table id=\"table-41\" caption=\"ExportEntry Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-41\">#table-41</span>: <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ExportName]]\n              \n              </td>\n              <td>\n                String | null\n              \n              </td>\n              <td>\n                The name used to export this binding by this module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              \n              </td>\n              <td>\n                String | null\n              \n              </td>\n              <td>\n                The String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              \n              </td>\n              <td>\n                String | null\n              \n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>. <code>\"*\"</code> indicates that the export request is for all exported bindings.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              \n              </td>\n              <td>\n                String | null\n              \n              </td>\n              <td>\n                The name that is used to locally access the exported value from within the importing module. <emu-val>null</emu-val> if the exported value is not locally accessible from within the module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-42\"><a href=\"#table-42\" class=\"excluded-xref\" excluded-id=\"table-42\">#table-42</a></emu-xref> gives examples of the ExportEntry record fields used to represent the syntactic export forms:</p>\n          <emu-table id=\"table-42\" caption=\"Export Forms Mappings to ExportEntry Records\" informative=\"\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-42\">#table-42</span> (Informative): Export Forms Mappings to ExportEntry Records</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Export Statement Form\n                \n                </th>\n                <th>\n                  [[ExportName]]\n                \n                </th>\n                <th>\n                  [[ModuleRequest]]\n                \n                </th>\n                <th>\n                  [[ImportName]]\n                \n                </th>\n                <th>\n                  [[LocalName]]\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>export var v;</code>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function f() {}</code>\n                \n                </td>\n                <td>\n                  <code>\"default\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"f\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function () {}</code>\n                \n                </td>\n                <td>\n                  <code>\"default\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"*default*\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default 42;</code>\n                \n                </td>\n                <td>\n                  <code>\"default\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"*default*\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x};</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x};</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x} from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x} from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <code>\"x\"</code>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"v\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export * from \"mod\";</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n                <td>\n                  <code>\"mod\"</code>\n                \n                </td>\n                <td>\n                  <code>\"*\"</code>\n                \n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>The following definitions specify the required concrete methods and other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> for Source Text Module Records</p>\n\n        <div id=\"excluded-sec-parsemodule\"><h1><span class=\"secnum\">15.2.1.17.1</span>#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )</h1>...</div><div id=\"excluded-sec-getexportednames\"><h1><span class=\"secnum\">15.2.1.17.2</span>#sec-getexportednames GetExportedNames ( [ exportStarSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-resolveexport\"><h1><span class=\"secnum\">15.2.1.17.3</span>#sec-resolveexport ResolveExport ( exportName [ , resolveSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-initialize-environment\"><h1><span class=\"secnum\">15.2.1.17.4</span>#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-execute-module\"><h1><span class=\"secnum\">15.2.1.17.5</span>#sec-source-text-module-record-execute-module ExecuteModule ( ) Concrete Method</h1>...</div></emu-clause>\n\n      "}, "sec-async-function-constructor-arguments": {"num": "25.7.1.1", "title": "#sec-async-function-constructor-arguments AsyncFunction ( _p1_, _p2_, \u2026 , _pn_, _body_ )", "html": "<emu-clause id=\"sec-async-function-constructor-arguments\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor-arguments\">#sec-async-function-constructor-arguments</span> AsyncFunction ( _p1_, _p2_, &#8230; , _pn_, _body_ )</h1>\n\n        <p>The last argument specifies the body (executable code) of an async function. Any preceding arguments specify formal parameters.</p>\n\n        <p>When the `AsyncFunction` function is called with some arguments _p1_, _p2_, &#8230; , _pn_, _body_ (where _n_ might be 0, that is, there are no _p_ arguments, and where _body_ might also not be provided), the following steps are taken:</p>\n\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return <emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <code>\"async\"</code>, <var>args</var>).\n        </li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">See NOTE for <emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>.</div></emu-note>\n      </emu-clause>\n    "}, "sec-asyncgeneratorfunction": {"num": "25.3.1.1", "title": "#sec-asyncgeneratorfunction AsyncGeneratorFunction ( _p1_, _p2_, \u2026 , _pn_, _body_ )", "html": "<emu-clause id=\"sec-asyncgeneratorfunction\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction\">#sec-asyncgeneratorfunction</span> AsyncGeneratorFunction ( _p1_, _p2_, &#8230; , _pn_, _body_ )</h1>\n        <p>The last argument specifies the body (executable code) of an async generator function; any preceding arguments specify formal parameters.</p>\n        <p>When the `AsyncGeneratorFunction` function is called with some arguments _p1_, _p2_, &#8230; , _pn_, _body_ (where _n_ might be 0, that is, there are no \"_p_\" arguments, and where _body_ might also not be provided), the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return ?&#160;<emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <code>\"async generator\"</code>, <var>args</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>See NOTE for <emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-declarative-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.1.5", "title": "#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">#sec-declarative-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for declarative Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A binding for <var>N</var> normally already exists, but in rare cases it may not. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> does not have a binding for <var>N</var>, then<ol><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Perform <var>envRec</var>.CreateMutableBinding(<var>N</var>, <emu-val>true</emu-val>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is a strict binding, set <var>S</var> to <emu-val>true</emu-val>.</li><li>If the binding for <var>N</var> in <var>envRec</var> has not yet been initialized, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Else if the binding for <var>N</var> in <var>envRec</var> is a mutable binding, change its bound value to <var>V</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is an attempt to change the value of an immutable binding.</li><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An example of ECMAScript code that results in a missing binding at step 2 is:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"var x; x = (delete x, 0);\"</span>); }</code></pre>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.13", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b8ea6aa5\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lex</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>lex</var>).</li><li>Let <var>classScopeEnvRec</var> be <var>classScope</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be the intrinsic object <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%ObjectPrototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be the intrinsic object <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%FunctionPrototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be the intrinsic object <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%FunctionPrototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <code>\"prototype\"</code>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(...args) { <span class=\"hljs-keyword\">super</span>(...args); }</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>() {}</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be the result of performing DefineMethod for <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var> as the optional <var>functionPrototype</var> argument.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>constructorInfo</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <code>\"derived\"</code>.</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>If <var>className</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <code>\"constructor\"</code>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>m</var> in order from <var>methods</var>, do<ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be the result of performing PropertyDefinitionEvaluation for <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be the result of performing PropertyDefinitionEvaluation for <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>Mathematical operations such as addition, subtraction, negation, multiplication, division, and the mathematical functions defined later in this clause should always be understood as computing exact mathematical results on mathematical real numbers, which unless otherwise noted do not include infinities and do not include a negative zero that is distinguished from positive zero. Algorithms in this standard that model floating-point arithmetic include explicit steps, where necessary, to handle infinities and signed zero and to perform rounding. If a mathematical operation or function is applied to a floating-point number, it should be understood as being applied to the exact mathematical value represented by that floating-point number; such a floating-point number must be finite, and if it is <emu-val>+0</emu-val> or <emu-val>-0</emu-val> then the corresponding mathematical value is simply 0.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is  <emu-eqn class=\"inline\">-<var>x</var></emu-eqn> if <var>x</var> is negative (less than zero) and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function  <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically largest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions include <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that  <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>k</var>) &lt; <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>y</var>) and <var>x</var> - <var>k</var> = <var>q</var> &#215; <var>y</var></emu-eqn> for some integer <var>q</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor(<var>x</var>)</emu-eqn> produces the largest integer (closest to positive infinity) that is not larger than <var>x</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<var>x</var>) = <var>x</var> - (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 1)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-asyncgeneratorfunction-constructor": {"num": "25.3.1", "title": "#sec-asyncgeneratorfunction-constructor The AsyncGeneratorFunction Constructor", "html": "<emu-clause id=\"sec-asyncgeneratorfunction-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction-constructor\">#sec-asyncgeneratorfunction-constructor</span> The AsyncGeneratorFunction Constructor</h1>\n      <p>The AsyncGeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object <dfn>%AsyncGeneratorFunction%</dfn>.</li>\n        <li>creates and initializes a new AsyncGeneratorFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call `AsyncGeneratorFunction (...)` is equivalent to the object creation expression `new AsyncGeneratorFunction (...)` with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an `extends` clause of a class definition. Subclass constructors that intend to inherit the specified `AsyncGeneratorFunction` behaviour must include a `super` call to the `AsyncGeneratorFunction` <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal slots necessary for built-in AsyncGeneratorFunction behaviour. All ECMAScript syntactic forms for defining async generator function objects create direct instances of `AsyncGeneratorFunction`. There is no syntactic means to create instances of `AsyncGeneratorFunction` subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-asyncgeneratorfunction\"><h1><span class=\"secnum\">25.3.1.1</span>#sec-asyncgeneratorfunction AsyncGeneratorFunction ( _p1_, _p2_, &#8230; , _pn_, _body_ )</h1>...</div></emu-clause>\n\n    "}}, "figData": {"table-3": "Table 3", "table-4": "Table 4", "table-cyclic-module-fields": "Table 39", "table-38": "Table 41", "table-39": "Table 42", "table-40": "Table 43", "table-41": "Table 44", "table-42": "Table 45"}}}