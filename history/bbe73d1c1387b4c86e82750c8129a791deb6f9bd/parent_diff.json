{"from": {"secList": ["sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind", "sec-for-in-and-for-of-statements"], "secData": {"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind": {"num": "13.7.5.12", "title": "#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind Runtime Semantics: ForIn/OfHeadEvaluation ( TDZnames, expr, iterationKind )", "html": "<emu-clause id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\" aoid=\"ForIn/OfHeadEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\">#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind</span> Runtime Semantics: ForIn/OfHeadEvaluation ( <var>TDZnames</var>, <var>expr</var>, <var>iterationKind</var> )</h1>\n        <p>The abstract operation ForIn/OfHeadEvaluation is called with arguments <var>TDZnames</var>, <var>expr</var>, and <var>iterationKind</var>. The value of <var>iterationKind</var> is either <emu-const>enumerate</emu-const>, <emu-const>iterate</emu-const>, or <emu-const>async-iterate</emu-const>.</p>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>TDZnames</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>TDZnames</var> has no duplicate entries.</li><li>Let <var>TDZ</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>TDZEnvRec</var> be <var>TDZ</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>For each string <var>name</var> in <var>TDZnames</var>, do<ol><li>Perform ! <var>TDZEnvRec</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>TDZ</var>.</li></ol></li><li>Let <var>exprRef</var> be the result of evaluating <var>expr</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>If <var>exprValue</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>exprValue</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>(<var>obj</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>If <var>iterationKind</var> is <emu-const>async-iterate</emu-const>, let <var>iteratorHint</var> be <emu-const>async</emu-const>.</li><li>Else, let <var>iteratorHint</var> be <emu-const>sync</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>exprValue</var>, <var>iteratorHint</var>).\n        </li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-for-in-and-for-of-statements": {"num": "13.7.5", "title": "#sec-for-in-and-for-of-statements The for-in, for-of, and for-await-of Statements", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</h1>\n\n      <div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">13.7.5.1</span>#sec-for-in-and-for-of-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-boundnames\"><h1><span class=\"secnum\">13.7.5.2</span>#sec-for-in-and-for-of-statements-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">13.7.5.3</span>#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">13.7.5.4</span>#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">13.7.5.5</span>#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><h1><span class=\"secnum\">13.7.5.6</span>#sec-for-in-and-for-of-statements-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">13.7.5.7</span>#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">13.7.5.8</span>#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization\"><h1><span class=\"secnum\">13.7.5.9</span>#sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization Runtime Semantics: BindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindinginstantiation\"><h1><span class=\"secnum\">13.7.5.10</span>#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\"><h1><span class=\"secnum\">13.7.5.11</span>#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\"><h1><span class=\"secnum\">13.7.5.12</span>#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind Runtime Semantics: ForIn/OfHeadEvaluation ( TDZnames, expr, iterationKind )</h1>...</div><div id=\"excluded-sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\"><h1><span class=\"secnum\">13.7.5.13</span>#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.7.5.14</span>#sec-for-in-and-for-of-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-enumerate-object-properties\"><h1><span class=\"secnum\">13.7.5.15</span>#sec-enumerate-object-properties EnumerateObjectProperties ( O )</h1>...</div><div id=\"excluded-sec-for-in-iterator-objects\"><h1><span class=\"secnum\">13.7.5.16</span>#sec-for-in-iterator-objects For-In Iterator Objects</h1>...</div></emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-runtime-semantics-forinofheadevaluation", "sec-for-in-and-for-of-statements"], "secData": {"sec-runtime-semantics-forinofheadevaluation": {"num": "13.7.5.12", "title": "#sec-runtime-semantics-forinofheadevaluation Runtime Semantics: ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )", "html": "<emu-clause id=\"sec-runtime-semantics-forinofheadevaluation\" oldids=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\" aoid=\"ForIn/OfHeadEvaluation\">\n        <span id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forinofheadevaluation\">#sec-runtime-semantics-forinofheadevaluation</span> Runtime Semantics: ForIn/OfHeadEvaluation ( <var>uninitializedBoundNames</var>, <var>expr</var>, <var>iterationKind</var> )</h1>\n        <p>The abstract operation ForIn/OfHeadEvaluation is called with arguments <var>uninitializedBoundNames</var>, <var>expr</var>, and <var>iterationKind</var>. The value of <var>iterationKind</var> is either <emu-const>enumerate</emu-const>, <emu-const>iterate</emu-const>, or <emu-const>async-iterate</emu-const>.</p>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>uninitializedBoundNames</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>uninitializedBoundNames</var> has no duplicate entries.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>newEnvRec</var> be <var>newEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>For each string <var>name</var> in <var>uninitializedBoundNames</var>, do<ol><li>Perform ! <var>newEnvRec</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li></ol></li><li>Let <var>exprRef</var> be the result of evaluating <var>expr</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>If <var>exprValue</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>exprValue</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>(<var>obj</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>If <var>iterationKind</var> is <emu-const>async-iterate</emu-const>, let <var>iteratorHint</var> be <emu-const>async</emu-const>.</li><li>Else, let <var>iteratorHint</var> be <emu-const>sync</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>exprValue</var>, <var>iteratorHint</var>).\n        </li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-for-in-and-for-of-statements": {"num": "13.7.5", "title": "#sec-for-in-and-for-of-statements The for-in, for-of, and for-await-of Statements", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</h1>\n\n      <div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">13.7.5.1</span>#sec-for-in-and-for-of-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-boundnames\"><h1><span class=\"secnum\">13.7.5.2</span>#sec-for-in-and-for-of-statements-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">13.7.5.3</span>#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">13.7.5.4</span>#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">13.7.5.5</span>#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><h1><span class=\"secnum\">13.7.5.6</span>#sec-for-in-and-for-of-statements-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">13.7.5.7</span>#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">13.7.5.8</span>#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization\"><h1><span class=\"secnum\">13.7.5.9</span>#sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization Runtime Semantics: BindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindinginstantiation\"><h1><span class=\"secnum\">13.7.5.10</span>#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\"><h1><span class=\"secnum\">13.7.5.11</span>#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forinofheadevaluation\"><h1><span class=\"secnum\">13.7.5.12</span>#sec-runtime-semantics-forinofheadevaluation Runtime Semantics: ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )</h1>...</div><div id=\"excluded-sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\"><h1><span class=\"secnum\">13.7.5.13</span>#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.7.5.14</span>#sec-for-in-and-for-of-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-enumerate-object-properties\"><h1><span class=\"secnum\">13.7.5.15</span>#sec-enumerate-object-properties EnumerateObjectProperties ( O )</h1>...</div><div id=\"excluded-sec-for-in-iterator-objects\"><h1><span class=\"secnum\">13.7.5.16</span>#sec-for-in-iterator-objects For-In Iterator Objects</h1>...</div></emu-clause>\n  "}}, "figData": {}}}