{"from": {"secList": ["sec-toint16", "sec-touint32", "sec-toint32", "sec-toint8", "sec-touint16", "sec-touint8"], "secData": {"sec-toint16": {"num": "7.1.8", "title": "#sec-toint16 ToInt16 ( argument )", "html": "<emu-clause id=\"sec-toint16\" aoid=\"ToInt16\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toint16\">#sec-toint16</span> ToInt16 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToInt16 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>16</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">-2<sup>15</sup></emu-eqn>) through <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">2<sup>15</sup> - 1</emu-eqn>), inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>Let <var>int16bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>16</sup>.</li><li>If <var>int16bit</var> &#8805; 2<sup>15</sup>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int16bit</var> - 2<sup>16</sup>); otherwise return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int16bit</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-touint32": {"num": "7.1.7", "title": "#sec-touint32 ToUint32 ( argument )", "html": "<emu-clause id=\"sec-touint32\" aoid=\"ToUint32\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-touint32\">#sec-touint32</span> ToUint32 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToUint32 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>32</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-val>+0</emu-val><sub>&#120125;</sub> through <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">2<sup>32</sup> - 1</emu-eqn>), inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>Let <var>int32bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>32</sup>.</li><li id=\"step-touint32-return\">Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int32bit</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Given the above definition of ToUint32:</p>\n        <ul>\n          <li>\n            Step <emu-xref href=\"#step-touint32-return\"><a href=\"#step-touint32-return\" class=\"excluded-xref\" excluded-id=\"step-touint32-return\">#step-touint32-return</a></emu-xref> is the only difference between ToUint32 and <emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>.\n          </li>\n          <li>\n            The ToUint32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that value unchanged.\n          </li>\n          <li>\n            ToUint32(<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>)) is the same value as ToUint32(<var>x</var>) for all values of <var>x</var>. (It is to preserve this latter property that <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> are mapped to <emu-val>+0</emu-val><sub>&#120125;</sub>.)\n          </li>\n          <li>\n            ToUint32 maps <emu-val>-0</emu-val><sub>&#120125;</sub> to <emu-val>+0</emu-val><sub>&#120125;</sub>.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-toint32": {"num": "7.1.6", "title": "#sec-toint32 ToInt32 ( argument )", "html": "<emu-clause id=\"sec-toint32\" aoid=\"ToInt32\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toint32\">#sec-toint32</span> ToInt32 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToInt32 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>32</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn>) through <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>), inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>Let <var>int32bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>32</sup>.</li><li>If <var>int32bit</var> &#8805; 2<sup>31</sup>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int32bit</var> - 2<sup>32</sup>); otherwise return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int32bit</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Given the above definition of ToInt32:</p>\n        <ul>\n          <li>\n            The ToInt32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that value unchanged.\n          </li>\n          <li>\n            ToInt32(<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>x</var>)) is the same value as ToInt32(<var>x</var>) for all values of <var>x</var>. (It is to preserve this latter property that <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> are mapped to <emu-val>+0</emu-val><sub>&#120125;</sub>.)\n          </li>\n          <li>\n            ToInt32 maps <emu-val>-0</emu-val><sub>&#120125;</sub> to <emu-val>+0</emu-val><sub>&#120125;</sub>.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-toint8": {"num": "7.1.10", "title": "#sec-toint8 ToInt8 ( argument )", "html": "<emu-clause id=\"sec-toint8\" aoid=\"ToInt8\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toint8\">#sec-toint8</span> ToInt8 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToInt8 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>8</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-val>-128</emu-val><sub>&#120125;</sub> through <emu-val>127</emu-val><sub>&#120125;</sub>, inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>Let <var>int8bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>8</sup>.</li><li>If <var>int8bit</var> &#8805; 2<sup>7</sup>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int8bit</var> - 2<sup>8</sup>); otherwise return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int8bit</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-touint16": {"num": "7.1.9", "title": "#sec-touint16 ToUint16 ( argument )", "html": "<emu-clause id=\"sec-touint16\" aoid=\"ToUint16\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-touint16\">#sec-touint16</span> ToUint16 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToUint16 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>16</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-val>+0</emu-val><sub>&#120125;</sub> through <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>), inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li id=\"step-touint16-mod\">Let <var>int16bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>16</sup>.</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int16bit</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Given the above definition of ToUint16:</p>\n        <ul>\n          <li>\n            The substitution of 2<sup>16</sup> for 2<sup>32</sup> in step <emu-xref href=\"#step-touint16-mod\"><a href=\"#step-touint16-mod\" class=\"excluded-xref\" excluded-id=\"step-touint16-mod\">#step-touint16-mod</a></emu-xref> is the only difference between <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref> and ToUint16.\n          </li>\n          <li>\n            ToUint16 maps <emu-val>-0</emu-val><sub>&#120125;</sub> to <emu-val>+0</emu-val><sub>&#120125;</sub>.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-touint8": {"num": "7.1.11", "title": "#sec-touint8 ToUint8 ( argument )", "html": "<emu-clause id=\"sec-touint8\" aoid=\"ToUint8\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-touint8\">#sec-touint8</span> ToUint8 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToUint8 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>8</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-val>+0</emu-val><sub>&#120125;</sub> through <emu-val>255</emu-val><sub>&#120125;</sub>, inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>Let <var>int8bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>8</sup>.</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int8bit</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-toint16", "sec-touint32", "sec-toint32", "sec-toint8", "sec-touint16", "sec-touint8"], "secData": {"sec-toint16": {"num": "7.1.8", "title": "#sec-toint16 ToInt16 ( argument )", "html": "<emu-clause id=\"sec-toint16\" aoid=\"ToInt16\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toint16\">#sec-toint16</span> ToInt16 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToInt16 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>16</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">-2<sup>15</sup></emu-eqn>) through <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">2<sup>15</sup> - 1</emu-eqn>), inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> whose sign is the sign of <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>Let <var>int16bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>16</sup>.</li><li>If <var>int16bit</var> &#8805; 2<sup>15</sup>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int16bit</var> - 2<sup>16</sup>); otherwise return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int16bit</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-touint32": {"num": "7.1.7", "title": "#sec-touint32 ToUint32 ( argument )", "html": "<emu-clause id=\"sec-touint32\" aoid=\"ToUint32\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-touint32\">#sec-touint32</span> ToUint32 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToUint32 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>32</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-val>+0</emu-val><sub>&#120125;</sub> through <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">2<sup>32</sup> - 1</emu-eqn>), inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> whose sign is the sign of <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>Let <var>int32bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>32</sup>.</li><li id=\"step-touint32-return\">Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int32bit</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Given the above definition of ToUint32:</p>\n        <ul>\n          <li>\n            Step <emu-xref href=\"#step-touint32-return\"><a href=\"#step-touint32-return\" class=\"excluded-xref\" excluded-id=\"step-touint32-return\">#step-touint32-return</a></emu-xref> is the only difference between ToUint32 and <emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>.\n          </li>\n          <li>\n            The ToUint32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that value unchanged.\n          </li>\n          <li>\n            ToUint32(<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>)) is the same value as ToUint32(<var>x</var>) for all values of <var>x</var>. (It is to preserve this latter property that <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> are mapped to <emu-val>+0</emu-val><sub>&#120125;</sub>.)\n          </li>\n          <li>\n            ToUint32 maps <emu-val>-0</emu-val><sub>&#120125;</sub> to <emu-val>+0</emu-val><sub>&#120125;</sub>.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-toint32": {"num": "7.1.6", "title": "#sec-toint32 ToInt32 ( argument )", "html": "<emu-clause id=\"sec-toint32\" aoid=\"ToInt32\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toint32\">#sec-toint32</span> ToInt32 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToInt32 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>32</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn>) through <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>), inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> whose sign is the sign of <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>Let <var>int32bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>32</sup>.</li><li>If <var>int32bit</var> &#8805; 2<sup>31</sup>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int32bit</var> - 2<sup>32</sup>); otherwise return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int32bit</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Given the above definition of ToInt32:</p>\n        <ul>\n          <li>\n            The ToInt32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that value unchanged.\n          </li>\n          <li>\n            ToInt32(<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>x</var>)) is the same value as ToInt32(<var>x</var>) for all values of <var>x</var>. (It is to preserve this latter property that <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> are mapped to <emu-val>+0</emu-val><sub>&#120125;</sub>.)\n          </li>\n          <li>\n            ToInt32 maps <emu-val>-0</emu-val><sub>&#120125;</sub> to <emu-val>+0</emu-val><sub>&#120125;</sub>.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-toint8": {"num": "7.1.10", "title": "#sec-toint8 ToInt8 ( argument )", "html": "<emu-clause id=\"sec-toint8\" aoid=\"ToInt8\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toint8\">#sec-toint8</span> ToInt8 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToInt8 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>8</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-val>-128</emu-val><sub>&#120125;</sub> through <emu-val>127</emu-val><sub>&#120125;</sub>, inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> whose sign is the sign of <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>Let <var>int8bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>8</sup>.</li><li>If <var>int8bit</var> &#8805; 2<sup>7</sup>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int8bit</var> - 2<sup>8</sup>); otherwise return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int8bit</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-touint16": {"num": "7.1.9", "title": "#sec-touint16 ToUint16 ( argument )", "html": "<emu-clause id=\"sec-touint16\" aoid=\"ToUint16\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-touint16\">#sec-touint16</span> ToUint16 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToUint16 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>16</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-val>+0</emu-val><sub>&#120125;</sub> through <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>), inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> whose sign is the sign of <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li id=\"step-touint16-mod\">Let <var>int16bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>16</sup>.</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int16bit</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Given the above definition of ToUint16:</p>\n        <ul>\n          <li>\n            The substitution of 2<sup>16</sup> for 2<sup>32</sup> in step <emu-xref href=\"#step-touint16-mod\"><a href=\"#step-touint16-mod\" class=\"excluded-xref\" excluded-id=\"step-touint16-mod\">#step-touint16-mod</a></emu-xref> is the only difference between <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref> and ToUint16.\n          </li>\n          <li>\n            ToUint16 maps <emu-val>-0</emu-val><sub>&#120125;</sub> to <emu-val>+0</emu-val><sub>&#120125;</sub>.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-touint8": {"num": "7.1.11", "title": "#sec-touint8 ToUint8 ( argument )", "html": "<emu-clause id=\"sec-touint8\" aoid=\"ToUint8\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-touint8\">#sec-touint8</span> ToUint8 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToUint8 takes argument <var>argument</var>. It converts <var>argument</var> to one of 2<sup>8</sup> <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> values in the range <emu-val>+0</emu-val><sub>&#120125;</sub> through <emu-val>255</emu-val><sub>&#120125;</sub>, inclusive. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-0</emu-val><sub>&#120125;</sub>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>int</var> be the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> whose sign is the sign of <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>Let <var>int8bit</var> be <var>int</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>8</sup>.</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>int8bit</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}}