{"from": {"secList": ["sec-template-literals", "sec-argument-lists-runtime-semantics-argumentlistevaluation", "sec-function-calls-runtime-semantics-evaluation", "sec-evaluatenew", "sec-argument-lists", "sec-template-literals-runtime-semantics-argumentlistevaluation", "sec-evaluatecall", "sec-super-keyword-runtime-semantics-evaluation"], "secData": {"sec-template-literals": {"num": "13.2.9", "title": "#sec-template-literals Template Literals", "html": "<emu-clause id=\"sec-template-literals\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-template-literals\">#sec-template-literals</span> Template Literals</h1>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"TemplateLiteral\" params=\"Yield, Await, Tagged\" id=\"prod-TemplateLiteral\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"f1a0e47a\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"SubstitutionTemplate\" params=\"Yield, Await, Tagged\" id=\"prod-SubstitutionTemplate\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"069aff93\">\n        <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"TemplateSpans\" params=\"Yield, Await, Tagged\" id=\"prod-TemplateSpans\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"de941338\">\n        <emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"TemplateMiddleList\" params=\"Yield, Await, Tagged\" id=\"prod-TemplateMiddleList\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"db7fc148\">\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6dd46bd2\">\n        <emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n      <div id=\"excluded-sec-static-semantics-template-early-errors\"><h1><span class=\"secnum\">13.2.9.1</span>#sec-static-semantics-template-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-templatestrings\"><h1><span class=\"secnum\">13.2.9.2</span>#sec-static-semantics-templatestrings Static Semantics: TemplateStrings</h1>...</div><div id=\"excluded-sec-template-literals-runtime-semantics-argumentlistevaluation\"><h1><span class=\"secnum\">13.2.9.3</span>#sec-template-literals-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation</h1>...</div><div id=\"excluded-sec-gettemplateobject\"><h1><span class=\"secnum\">13.2.9.4</span>#sec-gettemplateobject GetTemplateObject ( templateLiteral )</h1>...</div><div id=\"excluded-sec-runtime-semantics-substitutionevaluation\"><h1><span class=\"secnum\">13.2.9.5</span>#sec-runtime-semantics-substitutionevaluation Runtime Semantics: SubstitutionEvaluation</h1>...</div><div id=\"excluded-sec-template-literals-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.2.9.6</span>#sec-template-literals-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-argument-lists-runtime-semantics-argumentlistevaluation": {"num": "13.3.8.1", "title": "#sec-argument-lists-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation", "html": "<emu-clause id=\"sec-argument-lists-runtime-semantics-argumentlistevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-argument-lists-runtime-semantics-argumentlistevaluation\">#sec-argument-lists-runtime-semantics-argumentlistevaluation</span> Runtime Semantics: ArgumentListEvaluation</h1>\n        <emu-see-also-para op=\"ArgumentListEvaluation\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"Arguments\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"78e44c33\">\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d4fc7da4\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>arg</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5bb8853e\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>list</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>list</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>list</var>.</li></ol></li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7ff23fee\">\n        <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Append <var>arg</var> to the end of <var>precedingArgs</var>.</li><li>Return <var>precedingArgs</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"678ad0f9\">\n        <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>)).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>precedingArgs</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>precedingArgs</var>.</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-function-calls-runtime-semantics-evaluation": {"num": "13.3.6.1", "title": "#sec-function-calls-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-calls-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-calls-runtime-semantics-evaluation\">#sec-function-calls-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be CoveredCallExpression of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>memberExpr</var> be the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> of <var>expr</var>.</li><li>Let <var>arguments</var> be the <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> of <var>expr</var>.</li><li>Let <var>ref</var> be the result of evaluating <var>memberExpr</var>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>, and <var>ref</var>.[[ReferencedName]] is <emu-val>\"eval\"</emu-val>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>func</var>, <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\">%eval%</a></emu-xref>) is <emu-val>true</emu-val>, then<ol><li>Let <var>argList</var> be ? ArgumentListEvaluation of <var>arguments</var>.</li><li>If <var>argList</var> has no elements, return <emu-val>undefined</emu-val>.</li><li>Let <var>evalArg</var> be the first element of <var>argList</var>.</li><li>If the source code matching this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strictCaller</var> be <emu-val>true</emu-val>. Otherwise let <var>strictCaller</var> be <emu-val>false</emu-val>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li id=\"step-callexpression-evaluation-direct-eval\">Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>evalArg</var>, <var>evalRealm</var>, <var>strictCaller</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailCall</var>).</li></ol></emu-alg>\n        <p>A <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> evaluation that executes step <emu-xref href=\"#step-callexpression-evaluation-direct-eval\"><a href=\"#step-callexpression-evaluation-direct-eval\">6.a.vi</a></emu-xref> is a <dfn>direct eval</dfn>.</p>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"42e81a1c\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-evaluatenew": {"num": "13.3.5.1.1", "title": "#sec-evaluatenew EvaluateNew ( constructExpr, arguments )", "html": "<emu-clause id=\"sec-evaluatenew\" aoid=\"EvaluateNew\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatenew\">#sec-evaluatenew</span> EvaluateNew ( <var>constructExpr</var>, <var>arguments</var> )</h1>\n          <p>The abstract operation EvaluateNew takes arguments <var>constructExpr</var> and <var>arguments</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>constructExpr</var> is either a <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt> or a <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>arguments</var> is either <emu-const>empty</emu-const> or an <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>.</li><li>Let <var>ref</var> be the result of evaluating <var>constructExpr</var>.</li><li>Let <var>constructor</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>arguments</var> is <emu-const>empty</emu-const>, let <var>argList</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else,<ol><li>Let <var>argList</var> be ? ArgumentListEvaluation of <var>arguments</var>.</li></ol></li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>constructor</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>constructor</var>, <var>argList</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-argument-lists": {"num": "13.3.8", "title": "#sec-argument-lists Argument Lists", "html": "<emu-clause id=\"sec-argument-lists\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-argument-lists\">#sec-argument-lists</span> Argument Lists</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The evaluation of an argument list produces a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of values.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-argument-lists-runtime-semantics-argumentlistevaluation\"><h1><span class=\"secnum\">13.3.8.1</span>#sec-argument-lists-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation</h1>...</div></emu-clause>\n\n    "}, "sec-template-literals-runtime-semantics-argumentlistevaluation": {"num": "13.2.9.3", "title": "#sec-template-literals-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation", "html": "<emu-clause id=\"sec-template-literals-runtime-semantics-argumentlistevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-template-literals-runtime-semantics-argumentlistevaluation\">#sec-template-literals-runtime-semantics-argumentlistevaluation</span> Runtime Semantics: ArgumentListEvaluation</h1>\n        <emu-see-also-para op=\"ArgumentListEvaluation\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>siteObj</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1dab93f5\"><emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Let <var>remaining</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose first element is <var>siteObj</var> and whose subsequent elements are the elements of <var>remaining</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be95cc40\">\n        <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>firstSubRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>firstSub</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>firstSubRef</var>).</li><li>Let <var>restSub</var> be ? SubstitutionEvaluation of <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>restSub</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose first element is <var>firstSub</var> and whose subsequent elements are the elements of <var>restSub</var>. <var>restSub</var> may contain no elements.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-evaluatecall": {"num": "13.3.6.2", "title": "#sec-evaluatecall EvaluateCall ( func, ref, arguments, tailPosition )", "html": "<emu-clause id=\"sec-evaluatecall\" aoid=\"EvaluateCall\" oldids=\"sec-evaluatedirectcall\"><span id=\"sec-evaluatedirectcall\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatecall\">#sec-evaluatecall</span> EvaluateCall ( <var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailPosition</var> )</h1>\n        <p>The abstract operation EvaluateCall takes arguments <var>func</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>ref</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>), <var>arguments</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>tailPosition</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>thisValue</var> be <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>ref</var>).</li></ol></li><li>Else,<ol><li>Let <var>refEnv</var> be <var>ref</var>.[[Base]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>refEnv</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>refEnv</var>.WithBaseObject().</li></ol></li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>argList</var> be ? ArgumentListEvaluation of <var>arguments</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>tailPosition</var> is <emu-val>true</emu-val>, perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisValue</var>, <var>argList</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>tailPosition</var> is <emu-val>true</emu-val>, the above call will not return here, but instead evaluation will continue as if the following return has already occurred.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>result</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-super-keyword-runtime-semantics-evaluation": {"num": "13.3.7.1", "title": "#sec-super-keyword-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-super-keyword-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-super-keyword-runtime-semantics-evaluation\">#sec-super-keyword-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b698f30f\">\n        <emu-t>super</emu-t>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f690ec4a\">\n        <emu-t>super</emu-t>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyKey</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If the code matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperCall\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a833032f\">\n        <emu-t>super</emu-t>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>newTarget</var> be <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>func</var> be !&#160;<emu-xref aoid=\"GetSuperConstructor\"><a href=\"#sec-getsuperconstructor\">GetSuperConstructor</a></emu-xref>().</li><li>Let <var>argList</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>argList</var>, <var>newTarget</var>).</li><li>Let <var>thisER</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Return ? <var>thisER</var>.BindThisValue(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-template-literals", "sec-function-calls-runtime-semantics-evaluation", "sec-evaluatenew", "sec-argument-lists", "sec-runtime-semantics-argumentlistevaluation", "sec-evaluatecall", "sec-super-keyword-runtime-semantics-evaluation"], "secData": {"sec-template-literals": {"num": "13.2.9", "title": "#sec-template-literals Template Literals", "html": "<emu-clause id=\"sec-template-literals\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-template-literals\">#sec-template-literals</span> Template Literals</h1>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"TemplateLiteral\" params=\"Yield, Await, Tagged\" id=\"prod-TemplateLiteral\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"f1a0e47a\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"SubstitutionTemplate\" params=\"Yield, Await, Tagged\" id=\"prod-SubstitutionTemplate\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"069aff93\">\n        <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"TemplateSpans\" params=\"Yield, Await, Tagged\" id=\"prod-TemplateSpans\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"de941338\">\n        <emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"TemplateMiddleList\" params=\"Yield, Await, Tagged\" id=\"prod-TemplateMiddleList\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"db7fc148\">\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6dd46bd2\">\n        <emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n      <div id=\"excluded-sec-static-semantics-template-early-errors\"><h1><span class=\"secnum\">13.2.9.1</span>#sec-static-semantics-template-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-templatestrings\"><h1><span class=\"secnum\">13.2.9.2</span>#sec-static-semantics-templatestrings Static Semantics: TemplateStrings</h1>...</div><div id=\"excluded-sec-gettemplateobject\"><h1><span class=\"secnum\">13.2.9.3</span>#sec-gettemplateobject GetTemplateObject ( templateLiteral )</h1>...</div><div id=\"excluded-sec-runtime-semantics-substitutionevaluation\"><h1><span class=\"secnum\">13.2.9.4</span>#sec-runtime-semantics-substitutionevaluation Runtime Semantics: SubstitutionEvaluation</h1>...</div><div id=\"excluded-sec-template-literals-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.2.9.5</span>#sec-template-literals-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-function-calls-runtime-semantics-evaluation": {"num": "13.3.6.1", "title": "#sec-function-calls-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-calls-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-calls-runtime-semantics-evaluation\">#sec-function-calls-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be CoveredCallExpression of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>memberExpr</var> be the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> of <var>expr</var>.</li><li>Let <var>arguments</var> be the <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> of <var>expr</var>.</li><li>Let <var>ref</var> be the result of evaluating <var>memberExpr</var>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>, and <var>ref</var>.[[ReferencedName]] is <emu-val>\"eval\"</emu-val>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>func</var>, <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\">%eval%</a></emu-xref>) is <emu-val>true</emu-val>, then<ol><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <var>arguments</var>.</li><li>If <var>argList</var> has no elements, return <emu-val>undefined</emu-val>.</li><li>Let <var>evalArg</var> be the first element of <var>argList</var>.</li><li>If the source code matching this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strictCaller</var> be <emu-val>true</emu-val>. Otherwise let <var>strictCaller</var> be <emu-val>false</emu-val>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li id=\"step-callexpression-evaluation-direct-eval\">Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>evalArg</var>, <var>evalRealm</var>, <var>strictCaller</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailCall</var>).</li></ol></emu-alg>\n        <p>A <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> evaluation that executes step <emu-xref href=\"#step-callexpression-evaluation-direct-eval\"><a href=\"#step-callexpression-evaluation-direct-eval\">6.a.vi</a></emu-xref> is a <dfn>direct eval</dfn>.</p>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"42e81a1c\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-evaluatenew": {"num": "13.3.5.1.1", "title": "#sec-evaluatenew EvaluateNew ( constructExpr, arguments )", "html": "<emu-clause id=\"sec-evaluatenew\" aoid=\"EvaluateNew\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatenew\">#sec-evaluatenew</span> EvaluateNew ( <var>constructExpr</var>, <var>arguments</var> )</h1>\n          <p>The abstract operation EvaluateNew takes arguments <var>constructExpr</var> and <var>arguments</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>constructExpr</var> is either a <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt> or a <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>arguments</var> is either <emu-const>empty</emu-const> or an <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>.</li><li>Let <var>ref</var> be the result of evaluating <var>constructExpr</var>.</li><li>Let <var>constructor</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>arguments</var> is <emu-const>empty</emu-const>, let <var>argList</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else,<ol><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <var>arguments</var>.</li></ol></li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>constructor</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>constructor</var>, <var>argList</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-argument-lists": {"num": "13.3.8", "title": "#sec-argument-lists Argument Lists", "html": "<emu-clause id=\"sec-argument-lists\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-argument-lists\">#sec-argument-lists</span> Argument Lists</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The evaluation of an argument list produces a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of values.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-runtime-semantics-argumentlistevaluation\"><h1><span class=\"secnum\">13.3.8.1</span>#sec-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-argumentlistevaluation": {"num": "13.3.8.1", "title": "#sec-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-argumentlistevaluation\" oldids=\"sec-template-literals-runtime-semantics-argumentlistevaluation,sec-argument-lists-runtime-semantics-argumentlistevaluation\" type=\"sdo\" aoid=\"ArgumentListEvaluation\"><span id=\"sec-argument-lists-runtime-semantics-argumentlistevaluation\"></span><span id=\"sec-template-literals-runtime-semantics-argumentlistevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-argumentlistevaluation\">#sec-runtime-semantics-argumentlistevaluation</span> Runtime Semantics: ArgumentListEvaluation</h1>\n        <emu-grammar><emu-production name=\"Arguments\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"78e44c33\">\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d4fc7da4\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>arg</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5bb8853e\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>list</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>list</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>list</var>.</li></ol></li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7ff23fee\">\n        <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Append <var>arg</var> to the end of <var>precedingArgs</var>.</li><li>Return <var>precedingArgs</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"678ad0f9\">\n        <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>)).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>precedingArgs</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>precedingArgs</var>.</li></ol></li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>siteObj</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1dab93f5\"><emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Let <var>remaining</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose first element is <var>siteObj</var> and whose subsequent elements are the elements of <var>remaining</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be95cc40\">\n        <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>firstSubRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>firstSub</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>firstSubRef</var>).</li><li>Let <var>restSub</var> be ? SubstitutionEvaluation of <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>restSub</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose first element is <var>firstSub</var> and whose subsequent elements are the elements of <var>restSub</var>. <var>restSub</var> may contain no elements.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-evaluatecall": {"num": "13.3.6.2", "title": "#sec-evaluatecall EvaluateCall ( func, ref, arguments, tailPosition )", "html": "<emu-clause id=\"sec-evaluatecall\" aoid=\"EvaluateCall\" oldids=\"sec-evaluatedirectcall\"><span id=\"sec-evaluatedirectcall\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatecall\">#sec-evaluatecall</span> EvaluateCall ( <var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailPosition</var> )</h1>\n        <p>The abstract operation EvaluateCall takes arguments <var>func</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>ref</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>), <var>arguments</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>tailPosition</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>thisValue</var> be <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>ref</var>).</li></ol></li><li>Else,<ol><li>Let <var>refEnv</var> be <var>ref</var>.[[Base]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>refEnv</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>refEnv</var>.WithBaseObject().</li></ol></li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <var>arguments</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>tailPosition</var> is <emu-val>true</emu-val>, perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisValue</var>, <var>argList</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>tailPosition</var> is <emu-val>true</emu-val>, the above call will not return here, but instead evaluation will continue as if the following return has already occurred.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>result</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-super-keyword-runtime-semantics-evaluation": {"num": "13.3.7.1", "title": "#sec-super-keyword-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-super-keyword-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-super-keyword-runtime-semantics-evaluation\">#sec-super-keyword-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b698f30f\">\n        <emu-t>super</emu-t>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f690ec4a\">\n        <emu-t>super</emu-t>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyKey</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If the code matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperCall\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a833032f\">\n        <emu-t>super</emu-t>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>newTarget</var> be <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>func</var> be !&#160;<emu-xref aoid=\"GetSuperConstructor\"><a href=\"#sec-getsuperconstructor\">GetSuperConstructor</a></emu-xref>().</li><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>argList</var>, <var>newTarget</var>).</li><li>Let <var>thisER</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Return ? <var>thisER</var>.BindThisValue(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}