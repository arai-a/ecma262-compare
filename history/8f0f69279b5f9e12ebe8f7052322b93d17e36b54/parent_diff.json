{"from": {"secList": ["sec-object-internal-methods-and-internal-slots", "sec-invariants-of-the-essential-internal-methods"], "secData": {"sec-object-internal-methods-and-internal-slots": {"num": "6.1.7.2", "title": "#sec-object-internal-methods-and-internal-slots Object Internal Methods and Internal Slots", "html": "<emu-clause id=\"sec-object-internal-methods-and-internal-slots\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-internal-methods-and-internal-slots\">#sec-object-internal-methods-and-internal-slots</span> Object Internal Methods and Internal Slots</h1>\n        <p>The actual semantics of objects, in ECMAScript, are specified via algorithms called  <em>internal methods</em>. Each object in an ECMAScript engine is associated with a set of internal methods that defines its runtime behaviour. These internal methods are not part of the ECMAScript language. They are defined by this specification purely for expository purposes. However, each object within an implementation of ECMAScript must behave as specified by the internal methods associated with it. The exact manner in which this is accomplished is determined by the implementation.</p>\n        <p>Internal method names are polymorphic. This means that different object values may perform different algorithms when a common internal method name is invoked upon them. That actual object upon which an internal method is invoked is the &#8220;target&#8221; of the invocation. If, at runtime, the implementation of an algorithm attempts to use an internal method of an object that the object does not support, a <emu-val>TypeError</emu-val> exception is thrown.</p>\n        <p>Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties and they are not inherited. Depending upon the specific internal slot specification, such state may consist of values of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref> or of specific ECMAScript specification type values. Unless explicitly specified otherwise, internal slots are allocated as part of the process of creating an object and may not be dynamically added to an object. Unless specified otherwise, the initial value of an internal slot is the value <emu-val>undefined</emu-val>. Various algorithms within this specification create objects that have internal slots. However, the ECMAScript language provides no direct way to associate internal slots with an object.</p>\n        <p>Internal methods and internal slots are identified within this specification using names enclosed in double square brackets [[ ]].</p>\n        <p><emu-xref href=\"#table-5\"><a href=\"#table-5\" class=\"excluded-xref\" excluded-id=\"table-5\">#table-5</a></emu-xref> summarizes the  <em>essential internal methods</em> used by this specification that are applicable to all objects created or manipulated by ECMAScript code. Every object must have algorithms for all of the essential internal methods. However, all objects do not necessarily use the same algorithms for those methods.</p>\n        <p>The &#8220;Signature&#8221; column of  <emu-xref href=\"#table-5\"><a href=\"#table-5\" class=\"excluded-xref\" excluded-id=\"table-5\">#table-5</a></emu-xref> and other similar tables describes the invocation pattern for each internal method. The invocation pattern always includes a parenthesized list of descriptive parameter names. If a parameter name is the same as an ECMAScript type name then the name describes the required type of the parameter value. If an internal method explicitly returns a value, its parameter list is followed by the symbol &#8220;&#8594;&#8221; and the type name of the returned value. The type names used in signatures refer to the types defined in clause  <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref> augmented by the following additional names. &#8220;<em>any</em>&#8221; means the value may be any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</p>\n        <p>In addition to its parameters, an internal method always has access to the object that is the target of the method invocation.</p>\n        <p>An internal method implicitly returns a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>.</p>\n        <emu-table id=\"table-5\" caption=\"Essential Internal Methods\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-5\">#table-5</span>: Essential Internal Methods</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              \n              </th>\n              <th>\n                Signature\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[GetPrototypeOf]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Object | Null\n              \n              </td>\n              <td>\n                Determine the object that provides inherited properties for this object. A <emu-val>null</emu-val> value indicates that there are no inherited properties.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetPrototypeOf]]\n              \n              </td>\n              <td>\n                (Object | Null)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Associate this object with another object that provides inherited properties. Passing <emu-val>null</emu-val> indicates that there are no inherited properties. Returns <emu-val>true</emu-val> indicating that the operation was completed successfully or <emu-val>false</emu-val> indicating that the operation was not successful.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsExtensible]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Determine whether it is permitted to add additional properties to this object.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[PreventExtensions]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Control whether new properties may be added to this object. Returns <emu-val>true</emu-val> if the operation was successful or <emu-val>false</emu-val> if the operation was unsuccessful.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GetOwnProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Undefined | <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>\n              \n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> for the own property of this object whose key is <var>propertyKey</var>, or <emu-val>undefined</emu-val> if no such property exists.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DefineOwnProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>PropertyDescriptor</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Create or alter the own property, whose key is <var>propertyKey</var>, to have the state described by <var>PropertyDescriptor</var>. Return <emu-val>true</emu-val> if that property was successfully created/updated or <emu-val>false</emu-val> if the property could not be created or updated.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HasProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Return a Boolean value indicating whether this object already has either an own or inherited property whose key is <var>propertyKey</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>Receiver</var>)  <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Return the value of the property whose key is <var>propertyKey</var> from this object. If any ECMAScript code must be executed to retrieve the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>value</var>, <var>Receiver</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Set the value of the property whose key is <var>propertyKey</var> to <var>value</var>. If any ECMAScript code must be executed to set the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code. Returns <emu-val>true</emu-val> if the property value was set or <emu-val>false</emu-val> if it could not be set.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Delete]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Remove the own property whose key is <var>propertyKey</var> from this object. Return <emu-val>false</emu-val> if the property was not deleted and is still present. Return <emu-val>true</emu-val> if the property was deleted or is not present.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[OwnPropertyKeys]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of propertyKey\n              \n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are all of the own property keys for the object.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p><emu-xref href=\"#table-6\"><a href=\"#table-6\" class=\"excluded-xref\" excluded-id=\"table-6\">#table-6</a></emu-xref> summarizes additional essential internal methods that are supported by objects that may be called as functions. A  <dfn id=\"function-object\">function object</dfn> is an object that supports the [[Call]] internal method. A  <dfn id=\"constructor\">constructor</dfn> is an object that supports the [[Construct]] internal method. Every object that supports [[Construct]] must support [[Call]]; that is, every <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. Therefore, a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may also be referred to as a  <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function</em> or  <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref></em>.</p>\n        <emu-table id=\"table-6\" caption=\"Additional Essential Internal Methods of Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-6\">#table-6</span>: Additional Essential Internal Methods of Function Objects</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              \n              </th>\n              <th>\n                Signature\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Call]]\n              \n              </td>\n              <td>\n                (<em>any</em>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of  <em>any</em>)  <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a <emu-val>this</emu-val> value and a list containing the arguments passed to the function by a call expression. Objects that implement this internal method are  <em>callable</em>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Construct]]\n              \n              </td>\n              <td>\n                (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of  <em>any</em>, Object)  <b>&#8594;</b> Object\n              \n              </td>\n              <td>\n                Creates an object. Invoked via the <code>new</code> or <code>super</code> operators. The first argument to the internal method is a list containing the arguments of the operator. The second argument is the object to which the <code>new</code> operator was initially applied. Objects that implement this internal method are called  <em>constructors</em>. A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not necessarily a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and such non-<emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function objects do not have a [[Construct]] internal method.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The semantics of the essential internal methods for ordinary objects and standard exotic objects are specified in clause  <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>. If any specified use of an internal method of an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> is not supported by an implementation, that usage must throw a <emu-val>TypeError</emu-val> exception when attempted.</p>\n      </emu-clause>\n\n      "}, "sec-invariants-of-the-essential-internal-methods": {"num": "6.1.7.3", "title": "#sec-invariants-of-the-essential-internal-methods Invariants of the Essential Internal Methods", "html": "<emu-clause id=\"sec-invariants-of-the-essential-internal-methods\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-invariants-of-the-essential-internal-methods\">#sec-invariants-of-the-essential-internal-methods</span> Invariants of the Essential Internal Methods</h1>\n        <p>The Internal Methods of Objects of an ECMAScript engine must conform to the list of invariants specified below. Ordinary ECMAScript Objects as well as all standard exotic objects in this specification maintain these invariants. ECMAScript Proxy objects maintain these invariants by means of runtime checks on the result of traps invoked on the [[ProxyHandler]] object.</p>\n        <p>Any implementation provided exotic objects must also maintain these invariants for those objects. Violation of these invariants may cause ECMAScript code to have unpredictable behaviour and create security issues. However, violation of these invariants must never compromise the memory safety of an implementation.</p>\n        <p>An implementation must not allow these invariants to be circumvented in any manner such as by providing alternative interfaces that implement the functionality of the essential internal methods without enforcing their invariants.</p>\n        <h2>Definitions:</h2>\n        <ul>\n          <li>\n            The  <em>target</em> of an internal method is the object upon which the internal method is called.\n          \n          </li>\n          <li>\n            A target is  <em>non-extensible</em> if it has been observed to return <emu-val>false</emu-val> from its [[IsExtensible]] internal method, or <emu-val>true</emu-val> from its [[PreventExtensions]] internal method.\n          \n          </li>\n          <li>\n            A  <em>non-existent</em> property is a property that does not exist as an own property on a non-extensible target.\n          \n          </li>\n          <li>\n            All references to  <em><emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref></em> are according to the definition of the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> algorithm.\n          \n          </li>\n        </ul>\n        <h2>[[GetPrototypeOf]] ( )</h2>\n        <ul>\n          <li>\n            The Type of the return value must be either Object or Null.\n          \n          </li>\n          <li>\n            If target is non-extensible, and [[GetPrototypeOf]] returns a value <var>V</var>, then any future calls to [[GetPrototypeOf]] should return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          \n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>An object's prototype chain should have finite length (that is, starting from any object, recursively applying the [[GetPrototypeOf]] internal method to its result should eventually lead to the value <emu-val>null</emu-val>). However, this requirement is not enforceable as an object level invariant if the prototype chain includes any exotic objects that do not use the ordinary object definition of [[GetPrototypeOf]]. Such a circular prototype chain may result in infinite loops when accessing object properties.</p>\n        </div></emu-note>\n        <h2>[[SetPrototypeOf]] ( <var>V</var> )</h2>\n        <ul>\n          <li>\n            The Type of the return value must be Boolean.\n          \n          </li>\n          <li>\n            If target is non-extensible, [[SetPrototypeOf]] must return <emu-val>false</emu-val>, unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as the target's observed [[GetPrototypeOf]] value.\n          \n          </li>\n        </ul>\n        <h2>[[IsExtensible]] ( )</h2>\n        <ul>\n          <li>\n            The Type of the return value must be Boolean.\n          \n          </li>\n          <li>\n            If [[IsExtensible]] returns <emu-val>false</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n        <h2>[[PreventExtensions]] ( )</h2>\n        <ul>\n          <li>\n            The Type of the return value must be Boolean.\n          \n          </li>\n          <li>\n            If [[PreventExtensions]] returns <emu-val>true</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val> and the target is now considered non-extensible.\n          \n          </li>\n        </ul>\n        <h2>[[GetOwnProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The Type of the return value must be either <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or Undefined.\n          \n          </li>\n          <li>\n            If the Type of the return value is <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, the return value must be a  <emu-xref href=\"#sec-completepropertydescriptor\"><a href=\"#sec-completepropertydescriptor\">complete property descriptor</a></emu-xref>.\n          \n          </li>\n          <li>\n            If <var>P</var> is described as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, all future calls to [[GetOwnProperty]] ( <var>P</var> ) must return Property Descritor whose [[Value]] is <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          \n          </li>\n          <li>\n            If <var>P</var>'s attributes other than [[Writable]] may change over time or if the property might be deleted, then <var>P</var>'s [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          \n          </li>\n          <li>\n            If the [[Writable]] attribute may change from <emu-val>false</emu-val> to <emu-val>true</emu-val>, then the [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          \n          </li>\n          <li>\n            If the target is non-extensible and <var>P</var> is non-existent, then all future calls to [[GetOwnProperty]] (<var>P</var>) on the target must describe <var>P</var> as non-existent (i.e. [[GetOwnProperty]] (<var>P</var>) must return <emu-val>undefined</emu-val>).\n          \n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>As a consequence of the third invariant, if a property is described as a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> and it may return different values over time, then either or both of the [[Writable]] and [[Configurable]] attributes must be <emu-val>true</emu-val> even if no mechanism to change the value is exposed via the other internal methods.</p>\n        </div></emu-note>\n        <h2>[[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h2>\n        <ul>\n          <li>\n            The Type of the return value must be Boolean.\n          \n          </li>\n          <li>\n            [[DefineOwnProperty]] must return <emu-val>false</emu-val> if <var>P</var> has previously been observed as a non-configurable own property of the target, unless either:\n            \n            <ol>\n              <li>\n                <var>P</var> is a writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>. A non-configurable writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> can be changed into a non-configurable non-writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>.\n              \n              </li>\n              <li>\n                All attributes of <var>Desc</var> are the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s attributes.\n              \n              </li>\n            </ol>\n          </li>\n          <li>\n            [[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>) must return <emu-val>false</emu-val> if target is non-extensible and <var>P</var> is a non-existent own property. That is, a non-extensible target object cannot be extended with new properties.\n          \n          </li>\n        </ul>\n        <h2>[[HasProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The Type of the return value must be Boolean.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[HasProperty]] must return <emu-val>true</emu-val>.\n          \n          </li>\n        </ul>\n        <h2>[[Get]] ( <var>P</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The return value must be an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target with value <var>V</var>, then [[Get]] must return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Get]] attribute is <emu-val>undefined</emu-val>, the [[Get]] operation must return <emu-val>undefined</emu-val>.\n          \n          </li>\n        </ul>\n        <h2>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The Type of the return value must be Boolean.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target, then [[Set]] must return <emu-val>false</emu-val> unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Set]] attribute is <emu-val>undefined</emu-val>, the [[Set]] operation must return <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n        <h2>[[Delete]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The Type of the return value must be Boolean.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[Delete]] must return <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n        <h2>[[OwnPropertyKeys]] ( )</h2>\n        <ul>\n          <li>\n            The return value must be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          \n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must not contain any duplicate entries.\n          \n          </li>\n          <li>\n            The Type of each element of the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is either String or Symbol.\n          \n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain at least the keys of all non-configurable own properties that have previously been observed.\n          \n          </li>\n          <li>\n            If the object is non-extensible, the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain only the keys of all own properties of the object that are observable using [[GetOwnProperty]].\n          \n          </li>\n        </ul>\n        <h2>[[Call]] ( )</h2>\n        <ul>\n          <li>\n            The return value must be an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.\n          \n          </li>\n        </ul>\n        <h2>[[Construct]] ( )</h2>\n        <ul>\n          <li>\n            The Type of the return value must be Object.\n          \n          </li>\n        </ul>\n      </emu-clause>\n\n      "}}, "figData": {"table-5": "Table 5", "table-6": "Table 6"}}, "to": {"secList": ["sec-object-internal-methods-and-internal-slots", "sec-invariants-of-the-essential-internal-methods"], "secData": {"sec-object-internal-methods-and-internal-slots": {"num": "6.1.7.2", "title": "#sec-object-internal-methods-and-internal-slots Object Internal Methods and Internal Slots", "html": "<emu-clause id=\"sec-object-internal-methods-and-internal-slots\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-internal-methods-and-internal-slots\">#sec-object-internal-methods-and-internal-slots</span> Object Internal Methods and Internal Slots</h1>\n        <p>The actual semantics of objects, in ECMAScript, are specified via algorithms called  <em>internal methods</em>. Each object in an ECMAScript engine is associated with a set of internal methods that defines its runtime behaviour. These internal methods are not part of the ECMAScript language. They are defined by this specification purely for expository purposes. However, each object within an implementation of ECMAScript must behave as specified by the internal methods associated with it. The exact manner in which this is accomplished is determined by the implementation.</p>\n        <p>Internal method names are polymorphic. This means that different object values may perform different algorithms when a common internal method name is invoked upon them. That actual object upon which an internal method is invoked is the &#8220;target&#8221; of the invocation. If, at runtime, the implementation of an algorithm attempts to use an internal method of an object that the object does not support, a <emu-val>TypeError</emu-val> exception is thrown.</p>\n        <p>Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties and they are not inherited. Depending upon the specific internal slot specification, such state may consist of values of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref> or of specific ECMAScript specification type values. Unless explicitly specified otherwise, internal slots are allocated as part of the process of creating an object and may not be dynamically added to an object. Unless specified otherwise, the initial value of an internal slot is the value <emu-val>undefined</emu-val>. Various algorithms within this specification create objects that have internal slots. However, the ECMAScript language provides no direct way to associate internal slots with an object.</p>\n        <p>Internal methods and internal slots are identified within this specification using names enclosed in double square brackets [[ ]].</p>\n        <p><emu-xref href=\"#table-5\"><a href=\"#table-5\" class=\"excluded-xref\" excluded-id=\"table-5\">#table-5</a></emu-xref> summarizes the  <em>essential internal methods</em> used by this specification that are applicable to all objects created or manipulated by ECMAScript code. Every object must have algorithms for all of the essential internal methods. However, all objects do not necessarily use the same algorithms for those methods.</p>\n        <p>The &#8220;Signature&#8221; column of  <emu-xref href=\"#table-5\"><a href=\"#table-5\" class=\"excluded-xref\" excluded-id=\"table-5\">#table-5</a></emu-xref> and other similar tables describes the invocation pattern for each internal method. The invocation pattern always includes a parenthesized list of descriptive parameter names. If a parameter name is the same as an ECMAScript type name then the name describes the required type of the parameter value. If an internal method explicitly returns a value, its parameter list is followed by the symbol &#8220;&#8594;&#8221; and the type name of the returned value. The type names used in signatures refer to the types defined in clause  <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref> augmented by the following additional names. &#8220;<em>any</em>&#8221; means the value may be any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</p>\n        <p>In addition to its parameters, an internal method always has access to the object that is the target of the method invocation.</p>\n        <p>An internal method implicitly returns a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, either a normal completion that wraps a value of the return type shown in its invocation pattern, or a throw completion.</p>\n        <emu-table id=\"table-5\" caption=\"Essential Internal Methods\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-5\">#table-5</span>: Essential Internal Methods</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              \n              </th>\n              <th>\n                Signature\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[GetPrototypeOf]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Object | Null\n              \n              </td>\n              <td>\n                Determine the object that provides inherited properties for this object. A <emu-val>null</emu-val> value indicates that there are no inherited properties.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetPrototypeOf]]\n              \n              </td>\n              <td>\n                (Object | Null)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Associate this object with another object that provides inherited properties. Passing <emu-val>null</emu-val> indicates that there are no inherited properties. Returns <emu-val>true</emu-val> indicating that the operation was completed successfully or <emu-val>false</emu-val> indicating that the operation was not successful.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsExtensible]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Determine whether it is permitted to add additional properties to this object.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[PreventExtensions]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Control whether new properties may be added to this object. Returns <emu-val>true</emu-val> if the operation was successful or <emu-val>false</emu-val> if the operation was unsuccessful.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GetOwnProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Undefined | <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>\n              \n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> for the own property of this object whose key is <var>propertyKey</var>, or <emu-val>undefined</emu-val> if no such property exists.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DefineOwnProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>PropertyDescriptor</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Create or alter the own property, whose key is <var>propertyKey</var>, to have the state described by <var>PropertyDescriptor</var>. Return <emu-val>true</emu-val> if that property was successfully created/updated or <emu-val>false</emu-val> if the property could not be created or updated.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HasProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Return a Boolean value indicating whether this object already has either an own or inherited property whose key is <var>propertyKey</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>Receiver</var>)  <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Return the value of the property whose key is <var>propertyKey</var> from this object. If any ECMAScript code must be executed to retrieve the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>value</var>, <var>Receiver</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Set the value of the property whose key is <var>propertyKey</var> to <var>value</var>. If any ECMAScript code must be executed to set the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code. Returns <emu-val>true</emu-val> if the property value was set or <emu-val>false</emu-val> if it could not be set.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Delete]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Remove the own property whose key is <var>propertyKey</var> from this object. Return <emu-val>false</emu-val> if the property was not deleted and is still present. Return <emu-val>true</emu-val> if the property was deleted or is not present.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[OwnPropertyKeys]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of propertyKey\n              \n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are all of the own property keys for the object.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p><emu-xref href=\"#table-6\"><a href=\"#table-6\" class=\"excluded-xref\" excluded-id=\"table-6\">#table-6</a></emu-xref> summarizes additional essential internal methods that are supported by objects that may be called as functions. A  <dfn id=\"function-object\">function object</dfn> is an object that supports the [[Call]] internal method. A  <dfn id=\"constructor\">constructor</dfn> is an object that supports the [[Construct]] internal method. Every object that supports [[Construct]] must support [[Call]]; that is, every <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. Therefore, a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may also be referred to as a  <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function</em> or  <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref></em>.</p>\n        <emu-table id=\"table-6\" caption=\"Additional Essential Internal Methods of Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-6\">#table-6</span>: Additional Essential Internal Methods of Function Objects</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              \n              </th>\n              <th>\n                Signature\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Call]]\n              \n              </td>\n              <td>\n                (<em>any</em>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of  <em>any</em>)  <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a <emu-val>this</emu-val> value and a list containing the arguments passed to the function by a call expression. Objects that implement this internal method are  <em>callable</em>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Construct]]\n              \n              </td>\n              <td>\n                (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of  <em>any</em>, Object)  <b>&#8594;</b> Object\n              \n              </td>\n              <td>\n                Creates an object. Invoked via the <code>new</code> or <code>super</code> operators. The first argument to the internal method is a list containing the arguments of the operator. The second argument is the object to which the <code>new</code> operator was initially applied. Objects that implement this internal method are called  <em>constructors</em>. A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not necessarily a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and such non-<emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function objects do not have a [[Construct]] internal method.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The semantics of the essential internal methods for ordinary objects and standard exotic objects are specified in clause  <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>. If any specified use of an internal method of an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> is not supported by an implementation, that usage must throw a <emu-val>TypeError</emu-val> exception when attempted.</p>\n      </emu-clause>\n\n      "}, "sec-invariants-of-the-essential-internal-methods": {"num": "6.1.7.3", "title": "#sec-invariants-of-the-essential-internal-methods Invariants of the Essential Internal Methods", "html": "<emu-clause id=\"sec-invariants-of-the-essential-internal-methods\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-invariants-of-the-essential-internal-methods\">#sec-invariants-of-the-essential-internal-methods</span> Invariants of the Essential Internal Methods</h1>\n        <p>The Internal Methods of Objects of an ECMAScript engine must conform to the list of invariants specified below. Ordinary ECMAScript Objects as well as all standard exotic objects in this specification maintain these invariants. ECMAScript Proxy objects maintain these invariants by means of runtime checks on the result of traps invoked on the [[ProxyHandler]] object.</p>\n        <p>Any implementation provided exotic objects must also maintain these invariants for those objects. Violation of these invariants may cause ECMAScript code to have unpredictable behaviour and create security issues. However, violation of these invariants must never compromise the memory safety of an implementation.</p>\n        <p>An implementation must not allow these invariants to be circumvented in any manner such as by providing alternative interfaces that implement the functionality of the essential internal methods without enforcing their invariants.</p>\n        <h2>Definitions:</h2>\n        <ul>\n          <li>\n            The  <em>target</em> of an internal method is the object upon which the internal method is called.\n          \n          </li>\n          <li>\n            A target is  <em>non-extensible</em> if it has been observed to return <emu-val>false</emu-val> from its [[IsExtensible]] internal method, or <emu-val>true</emu-val> from its [[PreventExtensions]] internal method.\n          \n          </li>\n          <li>\n            A  <em>non-existent</em> property is a property that does not exist as an own property on a non-extensible target.\n          \n          </li>\n          <li>\n            All references to  <em><emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref></em> are according to the definition of the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> algorithm.\n          \n          </li>\n        </ul>\n        <h2>Return value:</h2>\n        <p>The value returned by any internal method must be a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> with either:</p>\n        <ul>\n          <li>[[Type]] = <emu-const>normal</emu-const>, [[Target]] = <emu-const>empty</emu-const>, and [[Value]] = a value of the \"normal return type\" shown below for that internal method, or</li>\n          <li>[[Type]] = <emu-const>throw</emu-const>, [[Target]] = <emu-const>empty</emu-const>, and [[Value]] = any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>An internal method must not return a completion with [[Type]] = <emu-const>continue</emu-const>, <emu-const>break</emu-const>, or <emu-const>return</emu-const>.</p>\n        </div></emu-note>\n        <h2>[[GetPrototypeOf]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is either Object or Null.\n          \n          </li>\n          <li>\n            If target is non-extensible, and [[GetPrototypeOf]] returns a value <var>V</var>, then any future calls to [[GetPrototypeOf]] should return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          \n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>An object's prototype chain should have finite length (that is, starting from any object, recursively applying the [[GetPrototypeOf]] internal method to its result should eventually lead to the value <emu-val>null</emu-val>). However, this requirement is not enforceable as an object level invariant if the prototype chain includes any exotic objects that do not use the ordinary object definition of [[GetPrototypeOf]]. Such a circular prototype chain may result in infinite loops when accessing object properties.</p>\n        </div></emu-note>\n        <h2>[[SetPrototypeOf]] ( <var>V</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          \n          </li>\n          <li>\n            If target is non-extensible, [[SetPrototypeOf]] must return <emu-val>false</emu-val>, unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as the target's observed [[GetPrototypeOf]] value.\n          \n          </li>\n        </ul>\n        <h2>[[IsExtensible]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          \n          </li>\n          <li>\n            If [[IsExtensible]] returns <emu-val>false</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n        <h2>[[PreventExtensions]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          \n          </li>\n          <li>\n            If [[PreventExtensions]] returns <emu-val>true</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val> and the target is now considered non-extensible.\n          \n          </li>\n        </ul>\n        <h2>[[GetOwnProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is either <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or Undefined.\n          \n          </li>\n          <li>\n            If the Type of the return value is <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, the return value must be a  <emu-xref href=\"#sec-completepropertydescriptor\"><a href=\"#sec-completepropertydescriptor\">complete property descriptor</a></emu-xref>.\n          \n          </li>\n          <li>\n            If <var>P</var> is described as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, all future calls to [[GetOwnProperty]] ( <var>P</var> ) must return Property Descritor whose [[Value]] is <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          \n          </li>\n          <li>\n            If <var>P</var>'s attributes other than [[Writable]] may change over time or if the property might be deleted, then <var>P</var>'s [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          \n          </li>\n          <li>\n            If the [[Writable]] attribute may change from <emu-val>false</emu-val> to <emu-val>true</emu-val>, then the [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          \n          </li>\n          <li>\n            If the target is non-extensible and <var>P</var> is non-existent, then all future calls to [[GetOwnProperty]] (<var>P</var>) on the target must describe <var>P</var> as non-existent (i.e. [[GetOwnProperty]] (<var>P</var>) must return <emu-val>undefined</emu-val>).\n          \n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>As a consequence of the third invariant, if a property is described as a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> and it may return different values over time, then either or both of the [[Writable]] and [[Configurable]] attributes must be <emu-val>true</emu-val> even if no mechanism to change the value is exposed via the other internal methods.</p>\n        </div></emu-note>\n        <h2>[[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          \n          </li>\n          <li>\n            [[DefineOwnProperty]] must return <emu-val>false</emu-val> if <var>P</var> has previously been observed as a non-configurable own property of the target, unless either:\n            \n            <ol>\n              <li>\n                <var>P</var> is a writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>. A non-configurable writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> can be changed into a non-configurable non-writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>.\n              \n              </li>\n              <li>\n                All attributes of <var>Desc</var> are the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s attributes.\n              \n              </li>\n            </ol>\n          </li>\n          <li>\n            [[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>) must return <emu-val>false</emu-val> if target is non-extensible and <var>P</var> is a non-existent own property. That is, a non-extensible target object cannot be extended with new properties.\n          \n          </li>\n        </ul>\n        <h2>[[HasProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[HasProperty]] must return <emu-val>true</emu-val>.\n          \n          </li>\n        </ul>\n        <h2>[[Get]] ( <var>P</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target with value <var>V</var>, then [[Get]] must return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Get]] attribute is <emu-val>undefined</emu-val>, the [[Get]] operation must return <emu-val>undefined</emu-val>.\n          \n          </li>\n        </ul>\n        <h2>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target, then [[Set]] must return <emu-val>false</emu-val> unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Set]] attribute is <emu-val>undefined</emu-val>, the [[Set]] operation must return <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n        <h2>[[Delete]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          \n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[Delete]] must return <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n        <h2>[[OwnPropertyKeys]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          \n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must not contain any duplicate entries.\n          \n          </li>\n          <li>\n            The Type of each element of the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is either String or Symbol.\n          \n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain at least the keys of all non-configurable own properties that have previously been observed.\n          \n          </li>\n          <li>\n            If the object is non-extensible, the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain only the keys of all own properties of the object that are observable using [[GetOwnProperty]].\n          \n          </li>\n        </ul>\n        <h2>[[Call]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n          \n          </li>\n        </ul>\n        <h2>[[Construct]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Object.\n          \n          </li>\n        </ul>\n      </emu-clause>\n\n      "}}, "figData": {"table-5": "Table 5", "table-6": "Table 6"}}}