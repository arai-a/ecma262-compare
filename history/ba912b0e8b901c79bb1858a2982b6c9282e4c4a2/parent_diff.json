{"from": {"secList": ["sec-bigint.prototype.tostring", "sec-dataview.prototype.setbiguint64", "sec-dataview.prototype.getbigint64", "sec-dataview.prototype.getbiguint64", "sec-dataview.prototype.setbigint64"], "secData": {"sec-bigint.prototype.tostring": {"num": "20.2.3.3", "title": "#sec-bigint.prototype.tostring BigInt.prototype.toString ( [ radix ] )", "html": "<emu-clause id=\"sec-bigint.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.prototype.tostring\">#sec-bigint.prototype.tostring</span> BigInt.prototype.toString ( [ <var>radix</var> ] )</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The optional <var>radix</var> should be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the inclusive range 2 to 36. If <var>radix</var> not present or is <emu-val>undefined</emu-val> the Number 10 is used as the value of <var>radix</var>.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisbigintvalue\"><a href=\"#sec-thisbigintvalue\">thisBigIntValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>radix</var> is not present, let <var>radixNumber</var> be 10.</li><li>Else if <var>radix</var> is <emu-val>undefined</emu-val>, let <var>radixNumber</var> be 10.</li><li>Else, let <var>radixNumber</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>radix</var>).</li><li>If <var>radixNumber</var> &lt; 2 or <var>radixNumber</var> &gt; 36, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>radixNumber</var> = 10, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Return the String representation of this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> using the radix specified by <var>radixNumber</var>. Letters <code>a</code>-<code>z</code> are used for digits with values 10 through 35. The precise algorithm is implementation-dependent, however the algorithm should be a generalization of that specified in <emu-xref href=\"#sec-numeric-types-bigint-tostring\"><a href=\"#sec-numeric-types-bigint-tostring\" class=\"excluded-xref\" excluded-id=\"sec-numeric-types-bigint-tostring\">#sec-numeric-types-bigint-tostring</a></emu-xref>.</li></ol></emu-alg>\n        <p>The <code>toString</code> function is not generic; it throws a <emu-val>TypeError</emu-val> exception if its <emu-val>this</emu-val> value is not a BigInt or a BigInt object. Therefore, it cannot be transferred to other kinds of objects for use as a method.</p>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setbiguint64": {"num": "24.3.4.16", "title": "#sec-dataview.prototype.setbiguint64 DataView.prototype.setBigUint64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbiguint64\">#sec-dataview.prototype.setbiguint64</span> DataView.prototype.setBigUint64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigUint64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigUint64</emu-const>, <var>value</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.getbigint64": {"num": "24.3.4.5", "title": "#sec-dataview.prototype.getbigint64 DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbigint64\">#sec-dataview.prototype.getbigint64</span> DataView.prototype.getBigInt64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigInt64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigInt64</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.getbiguint64": {"num": "24.3.4.6", "title": "#sec-dataview.prototype.getbiguint64 DataView.prototype.getBigUint64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbiguint64\">#sec-dataview.prototype.getbiguint64</span> DataView.prototype.getBigUint64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigUint64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigUint64</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setbigint64": {"num": "24.3.4.15", "title": "#sec-dataview.prototype.setbigint64 DataView.prototype.setBigInt64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbigint64\">#sec-dataview.prototype.setbigint64</span> DataView.prototype.setBigInt64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigInt64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigInt64</emu-const>, <var>value</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-bigint.prototype.tostring", "sec-dataview.prototype.setbiguint64", "sec-dataview.prototype.getbigint64", "sec-dataview.prototype.getbiguint64", "sec-dataview.prototype.setbigint64"], "secData": {"sec-bigint.prototype.tostring": {"num": "20.2.3.3", "title": "#sec-bigint.prototype.tostring BigInt.prototype.toString ( [ radix ] )", "html": "<emu-clause id=\"sec-bigint.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.prototype.tostring\">#sec-bigint.prototype.tostring</span> BigInt.prototype.toString ( [ <var>radix</var> ] )</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The optional <var>radix</var> should be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the inclusive range 2 to 36. If <var>radix</var> is <emu-val>undefined</emu-val> the Number 10 is used as the value of <var>radix</var>.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisbigintvalue\"><a href=\"#sec-thisbigintvalue\">thisBigIntValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>radix</var> is <emu-val>undefined</emu-val>, let <var>radixNumber</var> be 10.</li><li>Else, let <var>radixNumber</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>radix</var>).</li><li>If <var>radixNumber</var> &lt; 2 or <var>radixNumber</var> &gt; 36, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>radixNumber</var> = 10, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Return the String representation of this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> using the radix specified by <var>radixNumber</var>. Letters <code>a</code>-<code>z</code> are used for digits with values 10 through 35. The precise algorithm is implementation-dependent, however the algorithm should be a generalization of that specified in <emu-xref href=\"#sec-numeric-types-bigint-tostring\"><a href=\"#sec-numeric-types-bigint-tostring\" class=\"excluded-xref\" excluded-id=\"sec-numeric-types-bigint-tostring\">#sec-numeric-types-bigint-tostring</a></emu-xref>.</li></ol></emu-alg>\n        <p>The <code>toString</code> function is not generic; it throws a <emu-val>TypeError</emu-val> exception if its <emu-val>this</emu-val> value is not a BigInt or a BigInt object. Therefore, it cannot be transferred to other kinds of objects for use as a method.</p>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setbiguint64": {"num": "24.3.4.16", "title": "#sec-dataview.prototype.setbiguint64 DataView.prototype.setBigUint64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbiguint64\">#sec-dataview.prototype.setbiguint64</span> DataView.prototype.setBigUint64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigUint64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigUint64</emu-const>, <var>value</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.getbigint64": {"num": "24.3.4.5", "title": "#sec-dataview.prototype.getbigint64 DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbigint64\">#sec-dataview.prototype.getbigint64</span> DataView.prototype.getBigInt64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigInt64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigInt64</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.getbiguint64": {"num": "24.3.4.6", "title": "#sec-dataview.prototype.getbiguint64 DataView.prototype.getBigUint64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbiguint64\">#sec-dataview.prototype.getbiguint64</span> DataView.prototype.getBigUint64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigUint64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigUint64</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setbigint64": {"num": "24.3.4.15", "title": "#sec-dataview.prototype.setbigint64 DataView.prototype.setBigInt64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbigint64\">#sec-dataview.prototype.setbigint64</span> DataView.prototype.setBigInt64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigInt64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigInt64</emu-const>, <var>value</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}