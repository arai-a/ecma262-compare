{"from": {"secList": ["sec-automatic-semicolon-insertion", "sec-ecmascript-language-lexical-grammar", "sec-examples-of-automatic-semicolon-insertion"], "secData": {"sec-automatic-semicolon-insertion": {"num": "11.9", "title": "#sec-automatic-semicolon-insertion Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-automatic-semicolon-insertion\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</span> Automatic Semicolon Insertion</h1>\n    <p>Most ECMAScript statements and declarations must be terminated with a semicolon. Such semicolons may always appear explicitly in the source text. For convenience, however, such semicolons may be omitted from the source text in certain situations. These situations are described by saying that semicolons are automatically inserted into the source code token stream in those situations.</p>\n\n    <div id=\"excluded-sec-rules-of-automatic-semicolon-insertion\"><h1><span class=\"secnum\">11.9.1</span>#sec-rules-of-automatic-semicolon-insertion Rules of Automatic Semicolon Insertion</h1>...</div><div id=\"excluded-sec-examples-of-automatic-semicolon-insertion\"><h1><span class=\"secnum\">11.9.2</span>#sec-examples-of-automatic-semicolon-insertion Examples of Automatic Semicolon Insertion</h1>...</div></emu-clause>\n"}, "sec-ecmascript-language-lexical-grammar": {"num": "11", "title": "#sec-ecmascript-language-lexical-grammar ECMAScript Language: Lexical Grammar", "html": "<emu-clause id=\"sec-ecmascript-language-lexical-grammar\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-lexical-grammar\">#sec-ecmascript-language-lexical-grammar</span> ECMAScript Language: Lexical Grammar</h1>\n  <p>The source text of an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is first converted into a sequence of input elements, which are tokens, line terminators, comments, or white space. The source text is scanned from left to right, repeatedly taking the longest possible sequence of code points as the next input element.</p>\n  <p>There are several situations where the identification of lexical input elements is sensitive to the syntactic grammar context that is consuming the input elements. This requires multiple goal symbols for the lexical grammar. The <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> goal is used in syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>, a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt> <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is permitted but neither a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, nor a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt> goal is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt> or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted but a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is not permitted. In all other contexts, <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt> is used as the lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.</p>\n  <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n    <p>The use of multiple lexical goals ensures that there are no lexical ambiguities that would affect automatic semicolon insertion. For example, there are no syntactic grammar contexts where both a leading division or division-assignment, and a leading <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> are permitted. This is not affected by semicolon insertion (see  <emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>); in examples such as the following:</p>\n    <pre><code class=\"javascript hljs\">a = b\n/hi/g.exec(c).map(d);</code></pre>\n    <p>where the first non-whitespace, non-comment code point after a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is U+002F (SOLIDUS) and the syntactic context allows division or division-assignment, no semicolon is inserted at the <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>. That is, the above example is interpreted in the same way as:</p>\n    <pre><code class=\"javascript hljs\">a = b / hi / g.exec(c).map(d);</code></pre>\n  </div></emu-note>\n  <h2>Syntax</h2>\n  <emu-grammar type=\"definition\"><emu-production name=\"InputElementDiv\" type=\"lexical\" id=\"prod-InputElementDiv\">\n    <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"28035084\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"121314a7\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExp\" type=\"lexical\" id=\"prod-InputElementRegExp\">\n    <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"121314a7\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExpOrTemplateTail\" type=\"lexical\" id=\"prod-InputElementRegExpOrTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"62ae6eb9\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementTemplateTail\" type=\"lexical\" id=\"prod-InputElementTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"28035084\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"62ae6eb9\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n  <div id=\"excluded-sec-unicode-format-control-characters\"><h1><span class=\"secnum\">11.1</span>#sec-unicode-format-control-characters Unicode Format-Control Characters</h1>...</div><div id=\"excluded-sec-white-space\"><h1><span class=\"secnum\">11.2</span>#sec-white-space White Space</h1>...</div><div id=\"excluded-sec-line-terminators\"><h1><span class=\"secnum\">11.3</span>#sec-line-terminators Line Terminators</h1>...</div><div id=\"excluded-sec-comments\"><h1><span class=\"secnum\">11.4</span>#sec-comments Comments</h1>...</div><div id=\"excluded-sec-tokens\"><h1><span class=\"secnum\">11.5</span>#sec-tokens Tokens</h1>...</div><div id=\"excluded-sec-names-and-keywords\"><h1><span class=\"secnum\">11.6</span>#sec-names-and-keywords Names and Keywords</h1>...</div><div id=\"excluded-sec-punctuators\"><h1><span class=\"secnum\">11.7</span>#sec-punctuators Punctuators</h1>...</div><div id=\"excluded-sec-ecmascript-language-lexical-grammar-literals\"><h1><span class=\"secnum\">11.8</span>#sec-ecmascript-language-lexical-grammar-literals Literals</h1>...</div><div id=\"excluded-sec-automatic-semicolon-insertion\"><h1><span class=\"secnum\">11.9</span>#sec-automatic-semicolon-insertion Automatic Semicolon Insertion</h1>...</div></emu-clause>\n\n"}, "sec-examples-of-automatic-semicolon-insertion": {"num": "11.9.2", "title": "#sec-examples-of-automatic-semicolon-insertion Examples of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-examples-of-automatic-semicolon-insertion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-examples-of-automatic-semicolon-insertion\">#sec-examples-of-automatic-semicolon-insertion</span> Examples of Automatic Semicolon Insertion</h1>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is not a valid sentence in the ECMAScript grammar, even with the automatic semicolon insertion rules. In contrast, the source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is also not a valid ECMAScript sentence, but is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n;<span class=\"hljs-number\">2</span> ;} <span class=\"hljs-number\">3</span>;</code></pre>\n      <p>which is a valid ECMAScript sentence.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">for</span> (a; b\n)</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion because the semicolon is needed for the header of a <code>for</code> statement. Automatic semicolon insertion never inserts one of the two semicolons in the header of a <code>for</code> statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>\na + b</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>;\na + b;</code></pre>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>The expression <code>a + b</code> is not treated as a value to be returned by the <code>return</code> statement, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> separates it from the token <code>return</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b\n++c</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">a = b;\n++c;</code></pre>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The token <code>++</code> is not treated as a postfix operator applying to the variable <code>b</code>, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs between <code>b</code> and <code>++</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (a &gt; b)\n<span class=\"hljs-keyword\">else</span> c = d</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion before the <code>else</code> token, even though no production of the grammar applies at that point, because an automatically inserted semicolon would then be parsed as an empty statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b + c\n(d + e).print()</code></pre>\n      <p>is  <em>not</em> transformed by automatic semicolon insertion, because the parenthesized expression that begins the second line can be interpreted as an argument list for a function call:</p>\n      <pre><code class=\"javascript hljs\">a = b + c(d + e).print()</code></pre>\n      <p>In the circumstance that an assignment statement must begin with a left parenthesis, it is a good idea for the programmer to provide an explicit semicolon at the end of the preceding statement rather than to rely on automatic semicolon insertion.</p>\n    </emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-automatic-semicolon-insertion", "sec-no-lineterminator-here-automatic-semicolon-insertion-list", "sec-asi-interesting-cases-in-statement-lists", "sec-ecmascript-language-lexical-grammar", "sec-asi-cases-with-no-lineterminator-here", "sec-interesting-cases-of-automatic-semicolon-insertion", "sec-examples-of-automatic-semicolon-insertion"], "secData": {"sec-automatic-semicolon-insertion": {"num": "11.9", "title": "#sec-automatic-semicolon-insertion Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-automatic-semicolon-insertion\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</span> Automatic Semicolon Insertion</h1>\n    <p>Most ECMAScript statements and declarations must be terminated with a semicolon. Such semicolons may always appear explicitly in the source text. For convenience, however, such semicolons may be omitted from the source text in certain situations. These situations are described by saying that semicolons are automatically inserted into the source code token stream in those situations.</p>\n\n    <div id=\"excluded-sec-rules-of-automatic-semicolon-insertion\"><h1><span class=\"secnum\">11.9.1</span>#sec-rules-of-automatic-semicolon-insertion Rules of Automatic Semicolon Insertion</h1>...</div><div id=\"excluded-sec-examples-of-automatic-semicolon-insertion\"><h1><span class=\"secnum\">11.9.2</span>#sec-examples-of-automatic-semicolon-insertion Examples of Automatic Semicolon Insertion</h1>...</div></emu-clause>\n  "}, "sec-no-lineterminator-here-automatic-semicolon-insertion-list": {"num": "11.11.1", "title": "#sec-no-lineterminator-here-automatic-semicolon-insertion-list List of Grammar Productions with Optional Operands and \u201c[no LineTerminator here]\u201d", "html": "<emu-clause id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\">#sec-no-lineterminator-here-automatic-semicolon-insertion-list</span> List of Grammar Productions with Optional Operands and &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221;</h1>\n      <ul>\n        <li><emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>.</li>\n        <li>Async Function Definitions (<emu-xref href=\"#sec-async-function-definitions\"><a href=\"#sec-async-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</a></emu-xref>) with relation to Function Definitions (<emu-xref href=\"#sec-function-definitions\"><a href=\"#sec-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</a></emu-xref>)  </li>\n      </ul>\n    </emu-clause>\n  "}, "sec-asi-interesting-cases-in-statement-lists": {"num": "11.10.1", "title": "#sec-asi-interesting-cases-in-statement-lists Interesting Cases of Automatic Semicolon Insertion in Statement Lists", "html": "<emu-clause id=\"sec-asi-interesting-cases-in-statement-lists\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asi-interesting-cases-in-statement-lists\">#sec-asi-interesting-cases-in-statement-lists</span> Interesting Cases of Automatic Semicolon Insertion in Statement Lists</h1>\n      <p>In a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>, many <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>s end in semicolons, which may be omitted using automatic semicolon insertion. As a consequence of the rules above, at the end of a line ending an expression, a semicolon is required if the following line begins with any of the following:\n      \n      </p><ul>\n        <li><strong>An opening parenthesis (<code>(</code>)</strong>. Without a semicolon, the two lines together are treated as a <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li>\n        <li><strong>An opening square bracket (<code>[</code>)</strong>. Without a semicolon, the two lines together are treated as property access, rather than an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or <emu-nt><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a></emu-nt>.</li>\n        <li><strong>A template literal (<code>`</code>)</strong>. Without a semicolon, the two lines together are interpreted as a tagged Template (<emu-xref href=\"#sec-tagged-templates\"><a href=\"#sec-tagged-templates\" class=\"excluded-xref\" excluded-id=\"sec-tagged-templates\">#sec-tagged-templates</a></emu-xref>), with the previous expression as the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li>\n        <li><strong>Unary  <code>+</code> or  <code>-</code></strong>. Without a semicolon, the two lines together are interpreted as a usage of the corresponding binary operator.</li>\n        <li><strong>A RegExp literal</strong>. Without a semicolon, the two lines together may be parsed instead as the <code>/</code> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt>, for example if the RegExp has flags.</li>\n      </ul>\n    </emu-clause>\n  "}, "sec-ecmascript-language-lexical-grammar": {"num": "11", "title": "#sec-ecmascript-language-lexical-grammar ECMAScript Language: Lexical Grammar", "html": "<emu-clause id=\"sec-ecmascript-language-lexical-grammar\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-lexical-grammar\">#sec-ecmascript-language-lexical-grammar</span> ECMAScript Language: Lexical Grammar</h1>\n  <p>The source text of an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is first converted into a sequence of input elements, which are tokens, line terminators, comments, or white space. The source text is scanned from left to right, repeatedly taking the longest possible sequence of code points as the next input element.</p>\n  <p>There are several situations where the identification of lexical input elements is sensitive to the syntactic grammar context that is consuming the input elements. This requires multiple goal symbols for the lexical grammar. The <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> goal is used in syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>, a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt> <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is permitted but neither a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, nor a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt> goal is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt> or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted but a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is not permitted. In all other contexts, <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt> is used as the lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.</p>\n  <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n    <p>The use of multiple lexical goals ensures that there are no lexical ambiguities that would affect automatic semicolon insertion. For example, there are no syntactic grammar contexts where both a leading division or division-assignment, and a leading <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> are permitted. This is not affected by semicolon insertion (see  <emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>); in examples such as the following:</p>\n    <pre><code class=\"javascript hljs\">a = b\n/hi/g.exec(c).map(d);</code></pre>\n    <p>where the first non-whitespace, non-comment code point after a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is U+002F (SOLIDUS) and the syntactic context allows division or division-assignment, no semicolon is inserted at the <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>. That is, the above example is interpreted in the same way as:</p>\n    <pre><code class=\"javascript hljs\">a = b / hi / g.exec(c).map(d);</code></pre>\n  </div></emu-note>\n  <h2>Syntax</h2>\n  <emu-grammar type=\"definition\"><emu-production name=\"InputElementDiv\" type=\"lexical\" id=\"prod-InputElementDiv\">\n    <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"28035084\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"121314a7\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExp\" type=\"lexical\" id=\"prod-InputElementRegExp\">\n    <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"121314a7\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExpOrTemplateTail\" type=\"lexical\" id=\"prod-InputElementRegExpOrTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"62ae6eb9\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementTemplateTail\" type=\"lexical\" id=\"prod-InputElementTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"28035084\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"62ae6eb9\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n  <div id=\"excluded-sec-unicode-format-control-characters\"><h1><span class=\"secnum\">11.1</span>#sec-unicode-format-control-characters Unicode Format-Control Characters</h1>...</div><div id=\"excluded-sec-white-space\"><h1><span class=\"secnum\">11.2</span>#sec-white-space White Space</h1>...</div><div id=\"excluded-sec-line-terminators\"><h1><span class=\"secnum\">11.3</span>#sec-line-terminators Line Terminators</h1>...</div><div id=\"excluded-sec-comments\"><h1><span class=\"secnum\">11.4</span>#sec-comments Comments</h1>...</div><div id=\"excluded-sec-tokens\"><h1><span class=\"secnum\">11.5</span>#sec-tokens Tokens</h1>...</div><div id=\"excluded-sec-names-and-keywords\"><h1><span class=\"secnum\">11.6</span>#sec-names-and-keywords Names and Keywords</h1>...</div><div id=\"excluded-sec-punctuators\"><h1><span class=\"secnum\">11.7</span>#sec-punctuators Punctuators</h1>...</div><div id=\"excluded-sec-ecmascript-language-lexical-grammar-literals\"><h1><span class=\"secnum\">11.8</span>#sec-ecmascript-language-lexical-grammar-literals Literals</h1>...</div><div id=\"excluded-sec-automatic-semicolon-insertion\"><h1><span class=\"secnum\">11.9</span>#sec-automatic-semicolon-insertion Automatic Semicolon Insertion</h1>...</div><div id=\"excluded-sec-interesting-cases-of-automatic-semicolon-insertion\"><h1><span class=\"secnum\">11.10</span>#sec-interesting-cases-of-automatic-semicolon-insertion Interesting Cases of Automatic Semicolon Insertion</h1>...</div><div id=\"excluded-sec-asi-cases-with-no-lineterminator-here\"><h1><span class=\"secnum\">11.11</span>#sec-asi-cases-with-no-lineterminator-here Cases of Automatic Semicolon Insertion and &#8220;[no LineTerminator here]&#8221;</h1>...</div></emu-clause>\n\n"}, "sec-asi-cases-with-no-lineterminator-here": {"num": "11.11", "title": "#sec-asi-cases-with-no-lineterminator-here Cases of Automatic Semicolon Insertion and \u201c[no LineTerminator here]\u201d", "html": "<emu-clause id=\"sec-asi-cases-with-no-lineterminator-here\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asi-cases-with-no-lineterminator-here\">#sec-asi-cases-with-no-lineterminator-here</span> Cases of Automatic Semicolon Insertion and &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221;</h1>\n    <em>This section is non-normative.</em>\n    <p>ECMAScript contains grammar productions which include &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221;. These productions are sometimes a means to have optional operands in the grammar. Introducing a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> in these locations would change the grammar production of a source text by using the grammar production without the optional operand.</p>\n\n    <p>The rest of this section describes a number of productions using &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221; in this version of ECMAScript.</p>\n    <div id=\"excluded-sec-no-lineterminator-here-automatic-semicolon-insertion-list\"><h1><span class=\"secnum\">11.11.1</span>#sec-no-lineterminator-here-automatic-semicolon-insertion-list List of Grammar Productions with Optional Operands and &#8220;[no LineTerminator here]&#8221;</h1>...</div></emu-clause>\n"}, "sec-interesting-cases-of-automatic-semicolon-insertion": {"num": "11.10", "title": "#sec-interesting-cases-of-automatic-semicolon-insertion Interesting Cases of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-interesting-cases-of-automatic-semicolon-insertion\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-interesting-cases-of-automatic-semicolon-insertion\">#sec-interesting-cases-of-automatic-semicolon-insertion</span> Interesting Cases of Automatic Semicolon Insertion</h1>\n    <em>This section is non-normative.</em>\n    <p>ECMAScript programs can be written in a style with very few semicolons by relying on automatic semicolon insertion. As described above, semicolons are not inserted at every newline, and automatic semicolon insertion can depend on multiple tokens across line terminators.</p>\n\n    <p>As new syntactic features are added to ECMAScript, additional grammar productions could be added that cause lines relying on automatic semicolon insertion preceding them to change grammar productions when parsed.</p>\n\n    <p>The interesting cases of automatic semicolon insertion are places where a semicolon may or may not be inserted depending on preceding source text according to the rules above. These places are considered interesting if changes outside of an existing source text grammar production could change the grammar production of the existing source text depending on automatic semicolon insertion. The rest of this section describes a number of interesting cases of automatic semicolon insertion in this version of ECMAScript.</p>\n    <div id=\"excluded-sec-asi-interesting-cases-in-statement-lists\"><h1><span class=\"secnum\">11.10.1</span>#sec-asi-interesting-cases-in-statement-lists Interesting Cases of Automatic Semicolon Insertion in Statement Lists</h1>...</div></emu-clause>\n  "}, "sec-examples-of-automatic-semicolon-insertion": {"num": "11.9.2", "title": "#sec-examples-of-automatic-semicolon-insertion Examples of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-examples-of-automatic-semicolon-insertion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-examples-of-automatic-semicolon-insertion\">#sec-examples-of-automatic-semicolon-insertion</span> Examples of Automatic Semicolon Insertion</h1>\n      <em>This section is non-normative.</em>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is not a valid sentence in the ECMAScript grammar, even with the automatic semicolon insertion rules. In contrast, the source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is also not a valid ECMAScript sentence, but is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n;<span class=\"hljs-number\">2</span> ;} <span class=\"hljs-number\">3</span>;</code></pre>\n      <p>which is a valid ECMAScript sentence.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">for</span> (a; b\n)</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion because the semicolon is needed for the header of a <code>for</code> statement. Automatic semicolon insertion never inserts one of the two semicolons in the header of a <code>for</code> statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>\na + b</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>;\na + b;</code></pre>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>The expression <code>a + b</code> is not treated as a value to be returned by the <code>return</code> statement, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> separates it from the token <code>return</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b\n++c</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">a = b;\n++c;</code></pre>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The token <code>++</code> is not treated as a postfix operator applying to the variable <code>b</code>, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs between <code>b</code> and <code>++</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (a &gt; b)\n<span class=\"hljs-keyword\">else</span> c = d</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion before the <code>else</code> token, even though no production of the grammar applies at that point, because an automatically inserted semicolon would then be parsed as an empty statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b + c\n(d + e).print()</code></pre>\n      <p>is  <em>not</em> transformed by automatic semicolon insertion, because the parenthesized expression that begins the second line can be interpreted as an argument list for a function call:</p>\n      <pre><code class=\"javascript hljs\">a = b + c(d + e).print()</code></pre>\n      <p>In the circumstance that an assignment statement must begin with a left parenthesis, it is a good idea for the programmer to provide an explicit semicolon at the end of the preceding statement rather than to rely on automatic semicolon insertion.</p>\n    </emu-clause>\n  "}}, "figData": {}}}