{"from": {"secList": ["sec-completion-record-specification-type", "sec-code-realms", "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-generatorresume", "sec-getthisenvironment", "sec-asyncgenerator-definitions-namedevaluation", "sec-runtime-semantics-definemethod", "sec-assignment-operators-runtime-semantics-evaluation", "sec-identifier-names-static-semantics-stringvalue", "sec-arrow-function-definitions-runtime-semantics-namedevaluation", "sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "sec-multiplicative-operators-runtime-semantics-evaluation", "sec-function-definitions-runtime-semantics-evaluation", "sec-generatorresumeabrupt", "sec-strict-mode-of-ecmascript", "sec-globaldeclarationinstantiation", "sec-source-text-module-record-execute-module", "sec-runtime-semantics-scriptevaluation", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-function-definitions-runtime-semantics-namedevaluation", "sec-asyncgenerator-definitions-instantiatefunctionobject", "sec-returnifabrupt-shorthands", "sec-class-definitions-runtime-semantics-namedevaluation", "sec-the-environment-record-type-hierarchy", "sec-regexp-identifier-names-static-semantics-stringvalue", "sec-ecmascript-standard-built-in-objects", "sec-async-function-definitions-runtime-semantics-namedevaluation", "sec-function.prototype-@@hasinstance", "sec-preparefortailcall", "sec-asyncgenerator-definitions-evaluation", "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "sec-asyncgenerator-definitions-propertydefinitionevaluation", "sec-async-arrow-function-definitions-runtime-semantics-namedevaluation", "sec-performeval", "sec-async-function-definitions-InstantiateFunctionObject", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-asyncgeneratorresumenext", "sec-static-semantics-sourcetext", "sec-boundfunctioncreate", "sec-async-function-definitions-PropertyDefinitionEvaluation", "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions", "sec-runtime-semantics-bindingclassdeclarationevaluation", "sec-class-definitions-runtime-semantics-evaluation", "sec-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-generator-function-definitions-runtime-semantics-namedevaluation"], "secData": {"sec-completion-record-specification-type": {"num": "6.2.3", "title": "#sec-completion-record-specification-type The Completion Record Specification Type", "html": "<emu-clause id=\"sec-completion-record-specification-type\" aoid=\"Completion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completion-record-specification-type\">#sec-completion-record-specification-type</span> The Completion Record Specification Type</h1>\n      <p>The Completion type is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> used to explain the runtime propagation of values and control flow such as the behaviour of statements (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) that perform nonlocal transfers of control.</p>\n      <p>Values of the Completion type are <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> values whose fields are defined as by <emu-xref href=\"#table-completion-record-fields\"><a href=\"#table-completion-record-fields\" class=\"excluded-xref\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</a></emu-xref>. Such values are referred to as <dfn>Completion Record</dfn>s.</p>\n      <emu-table id=\"table-completion-record-fields\" caption=\"Completion Record Fields\" oldids=\"table-8\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</span>: <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> Fields</figcaption><span id=\"table-8\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[Type]]\n            </td>\n            <td>\n              One of <emu-const>normal</emu-const>, <emu-const>break</emu-const>, <emu-const>continue</emu-const>, <emu-const>return</emu-const>, or <emu-const>throw</emu-const>\n            </td>\n            <td>\n              The type of completion that occurred.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Value]]\n            </td>\n            <td>\n              any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The value that was produced.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Target]]\n            </td>\n            <td>\n              any ECMAScript string or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The target label for directed control transfers.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The term &#8220;<dfn>abrupt completion</dfn>&#8221; refers to any completion with a [[Type]] value other than <emu-const>normal</emu-const>.</p>\n\n      <emu-clause id=\"await\" aoid=\"Await\">\n        <h1><span class=\"secnum\">6.2.3.1</span> Await</h1>\n\n        <p>Algorithm steps that say</p>\n\n        <emu-alg><ol><li>Let <var>completion</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n        <p>mean the same thing as:</p>\n\n        <emu-alg><ol><li>Let <var>asyncContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>value</var>).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#await-fulfilled\" title=\"\"><a href=\"#await-fulfilled\">Await Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onFulfilled</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#await-rejected\" title=\"\"><a href=\"#await-rejected\">Await Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onRejected</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>completion</var>, the following steps of the algorithm that invoked <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> will be performed, with <var>completion</var> available.</li><li>Return.</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>asyncContext</var>.</li></ol></emu-alg>\n\n        <p>where all aliases in the above steps, with the exception of <var>completion</var>, are ephemeral and visible only in the steps pertaining to Await.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Await can be combined with the <code>?</code> and <code>!</code> prefixes, so that for example</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n          <p>means the same thing as:</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        </div></emu-note>\n\n        <emu-clause id=\"await-fulfilled\">\n          <h1><span class=\"secnum\">6.2.3.1.1</span> Await Fulfilled Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise fulfillment value to the caller as a normal completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is 1.</p>\n        </emu-clause>\n\n        <emu-clause id=\"await-rejected\">\n          <h1><span class=\"secnum\">6.2.3.1.2</span> Await Rejected Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise rejection reason to the caller as an abrupt throw completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>reason</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is 1.</p>\n        </emu-clause>\n      </emu-clause>\n\n      <div id=\"excluded-sec-normalcompletion\"><h1><span class=\"secnum\">6.2.3.2</span>#sec-normalcompletion NormalCompletion</h1>...</div><div id=\"excluded-sec-throwcompletion\"><h1><span class=\"secnum\">6.2.3.3</span>#sec-throwcompletion ThrowCompletion</h1>...</div><div id=\"excluded-sec-updateempty\"><h1><span class=\"secnum\">6.2.3.4</span>#sec-updateempty UpdateEmpty ( completionRecord, value )</h1>...</div></emu-clause>\n\n    "}, "sec-code-realms": {"num": "8.2", "title": "#sec-code-realms Realms", "html": "<emu-clause id=\"sec-code-realms\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-code-realms\">#sec-code-realms</span> Realms</h1>\n    <p>Before it is evaluated, all ECMAScript code must be associated with a <dfn id=\"realm\">realm</dfn>. Conceptually, a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> consists of a set of intrinsic objects, an ECMAScript <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>, all of the ECMAScript code that is loaded within the scope of that <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>, and other associated state and resources.</p>\n    <p>A <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is represented in this specification as a <dfn id=\"realm-record\">Realm Record</dfn> with the fields specified in <emu-xref href=\"#table-realm-record-fields\"><a href=\"#table-realm-record-fields\" class=\"excluded-xref\" excluded-id=\"table-realm-record-fields\">#table-realm-record-fields</a></emu-xref>:</p>\n    <emu-table id=\"table-realm-record-fields\" caption=\"Realm Record Fields\" oldids=\"table-21\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-realm-record-fields\">#table-realm-record-fields</span>: <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> Fields</figcaption><span id=\"table-21\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          </th>\n          <th>\n            Value\n          </th>\n          <th>\n            Meaning\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Intrinsics]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose field names are intrinsic keys and whose values are objects\n          </td>\n          <td>\n            The intrinsic values used by code associated with this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalObject]]\n          </td>\n          <td>\n            Object\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalEnv]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[TemplateMap]]\n          </td>\n          <td>\n            A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, [[Array]]: Object }.\n          </td>\n          <td>\n            <p>Template objects are canonicalized separately for each <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> using its <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>'s [[TemplateMap]]. Each [[Site]] value is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> that is a <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>. The associated [[Array]] value is the corresponding template object that is passed to a tag function.</p>\n            <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Once a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> becomes unreachable, the corresponding [[Array]] is also unreachable, and it would be unobservable if an implementation removed the pair from the [[TemplateMap]] list.</div></emu-note>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HostDefined]]\n          </td>\n          <td>\n            Any, default value is <emu-val>undefined</emu-val>.\n          </td>\n          <td>\n            Field reserved for use by hosts that need to associate additional information with a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <div id=\"excluded-sec-createrealm\"><h1><span class=\"secnum\">8.2.1</span>#sec-createrealm CreateRealm ( )</h1>...</div><div id=\"excluded-sec-createintrinsics\"><h1><span class=\"secnum\">8.2.2</span>#sec-createintrinsics CreateIntrinsics ( realmRec )</h1>...</div><div id=\"excluded-sec-setrealmglobalobject\"><h1><span class=\"secnum\">8.2.3</span>#sec-setrealmglobalobject SetRealmGlobalObject ( realmRec, globalObj, thisValue )</h1>...</div><div id=\"excluded-sec-setdefaultglobalbindings\"><h1><span class=\"secnum\">8.2.4</span>#sec-setdefaultglobalbindings SetDefaultGlobalBindings ( realmRec )</h1>...</div></emu-clause>\n\n  "}, "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.4.11", "title": "#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-generatorresume": {"num": "26.4.3.3", "title": "#sec-generatorresume GeneratorResume ( generator, value )", "html": "<emu-clause id=\"sec-generatorresume\" aoid=\"GeneratorResume\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresume\">#sec-generatorresume</span> GeneratorResume ( <var>generator</var>, <var>value</var> )</h1>\n        <p>The abstract operation GeneratorResume takes arguments <var>generator</var> and <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <emu-const>completed</emu-const>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-getthisenvironment": {"num": "8.3.3", "title": "#sec-getthisenvironment GetThisEnvironment ( )", "html": "<emu-clause id=\"sec-getthisenvironment\" aoid=\"GetThisEnvironment\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getthisenvironment\">#sec-getthisenvironment</span> GetThisEnvironment ( )</h1>\n      <p>The abstract operation GetThisEnvironment takes no arguments. It finds the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that currently supplies the binding of the <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> <code>this</code>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li id=\"step-getthisenvironment-loop\">Repeat,<ol><li>Let <var>exists</var> be <var>env</var>.HasThisBinding().</li><li>If <var>exists</var> is <emu-val>true</emu-val>, return <var>env</var>.</li><li>Let <var>outer</var> be <var>env</var>.[[OuterEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>outer</var> is not <emu-val>null</emu-val>.</li><li>Set <var>env</var> to <var>outer</var>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The loop in step <emu-xref href=\"#step-getthisenvironment-loop\"><a href=\"#step-getthisenvironment-loop\" class=\"excluded-xref\" excluded-id=\"step-getthisenvironment-loop\">#step-getthisenvironment-loop</a></emu-xref> will always terminate because the list of environments always ends with the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> which has a <code>this</code> binding.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-definitions-namedevaluation": {"num": "14.5.13", "title": "#sec-asyncgenerator-definitions-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-namedevaluation\">#sec-asyncgenerator-definitions-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-definemethod": {"num": "14.3.7", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>functionPrototype</var> is present, then<ol><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>prototype</var>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "12.15.4", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-simple-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? DestructuringAssignmentEvaluation of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5f3a8747\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-compound-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>assignmentOpText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>.</li><li>Let <var>opText</var> be the sequence of Unicode code points associated with <var>assignmentOpText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>assignmentOpText</var> </th><th> <var>opText</var>       </th></tr>\n                <tr><td> <code>**=</code>              </td><td> <code>**</code>           </td></tr>\n                <tr><td> <code>*=</code>               </td><td> <code>*</code>            </td></tr>\n                <tr><td> <code>/=</code>               </td><td> <code>/</code>            </td></tr>\n                <tr><td> <code>%=</code>               </td><td> <code>%</code>            </td></tr>\n                <tr><td> <code>+=</code>               </td><td> <code>+</code>            </td></tr>\n                <tr><td> <code>-=</code>               </td><td> <code>-</code>            </td></tr>\n                <tr><td> <code>&lt;&lt;=</code>        </td><td> <code>&lt;&lt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;=</code>        </td><td> <code>&gt;&gt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;=</code>    </td><td> <code>&gt;&gt;&gt;</code> </td></tr>\n                <tr><td> <code>&amp;=</code>           </td><td> <code>&amp;</code>        </td></tr>\n                <tr><td> <code>^=</code>               </td><td> <code>^</code>            </td></tr>\n                <tr><td> <code>|=</code>               </td><td> <code>|</code>            </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Let <var>r</var> be <emu-xref aoid=\"ApplyStringOrNumericBinaryOperator\"><a href=\"#sec-applystringornumericbinaryoperator\">ApplyStringOrNumericBinaryOperator</a></emu-xref>(<var>lval</var>, <var>opText</var>, <var>rval</var>).</li><li id=\"step-assignmentexpression-evaluation-compound-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0de56464\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>&amp;&amp;=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>false</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d3d4545\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>||=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>true</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0db89f3e\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>??=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>If <var>lval</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When this expression occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-simple-putvalue\"><a href=\"#step-assignmentexpression-evaluation-simple-putvalue\">1.e</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-compound-getvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-getvalue\">#step-assignmentexpression-evaluation-compound-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">#step-assignmentexpression-evaluation-lgcl-and-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">#step-assignmentexpression-evaluation-lgcl-or-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-getvalue</a></emu-xref> is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. Additionally, it is a runtime error if the <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-compound-putvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-putvalue\">#step-assignmentexpression-evaluation-compound-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">#step-assignmentexpression-evaluation-lgcl-and-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">#step-assignmentexpression-evaluation-lgcl-or-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-putvalue</a></emu-xref> is a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, or to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-identifier-names-static-semantics-stringvalue": {"num": "11.6.1.2", "title": "#sec-identifier-names-static-semantics-stringvalue Static Semantics: StringValue", "html": "<emu-clause id=\"sec-identifier-names-static-semantics-stringvalue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifier-names-static-semantics-stringvalue\">#sec-identifier-names-static-semantics-stringvalue</span> Static Semantics: StringValue</h1>\n        <emu-see-also-para op=\"StringValue\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IdentifierName\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"434685ab\"><emu-nt><a href=\"#prod-IdentifierStart\">IdentifierStart</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"700c1cee\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-nt><a href=\"#prod-IdentifierPart\">IdentifierPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>idText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>idTextUnescaped</var> be the result of replacing any occurrences of <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt> in <var>idText</var> with the code point represented by the <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>idTextUnescaped</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-arrow-function-definitions-runtime-semantics-namedevaluation": {"num": "14.2.16", "title": "#sec-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-arrow-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions-runtime-semantics-namedevaluation\">#sec-arrow-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2a7a3456\"><emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li>Let <var>parameters</var> be CoveredFormalsList of <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>.</li><li id=\"step-arrowfunction-evaluation-functioncreate\">Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step <emu-xref href=\"#step-arrowfunction-evaluation-functioncreate\"><a href=\"#step-arrowfunction-evaluation-functioncreate\" class=\"excluded-xref\" excluded-id=\"step-arrowfunction-evaluation-functioncreate\">#step-arrowfunction-evaluation-functioncreate</a></emu-xref> is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-method-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.3.8", "title": "#sec-method-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? DefineMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>methodDef</var>.[[Closure]], [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>desc</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f1487956\"><emu-t>get</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4402354c\"><emu-t>set</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-multiplicative-operators-runtime-semantics-evaluation": {"num": "12.7.3", "title": "#sec-multiplicative-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">#sec-multiplicative-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"MultiplicativeExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fb9fe2a0\"><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>opText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt>.</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateStringOrNumericBinaryExpression\"><a href=\"#sec-evaluatestringornumericbinaryexpression\">EvaluateStringOrNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt>, <var>opText</var>, <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-function-definitions-runtime-semantics-evaluation": {"num": "14.1.25", "title": "#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>An alternative semantics is provided in <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>A <emu-val>\"prototype\"</emu-val> property is automatically created for every function defined using a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, to allow for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-generatorresumeabrupt": {"num": "26.4.3.4", "title": "#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion )", "html": "<emu-clause id=\"sec-generatorresumeabrupt\" aoid=\"GeneratorResumeAbrupt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresumeabrupt\">#sec-generatorresumeabrupt</span> GeneratorResumeAbrupt ( <var>generator</var>, <var>abruptCompletion</var> )</h1>\n        <p>The abstract operation GeneratorResumeAbrupt takes arguments <var>generator</var> and <var>abruptCompletion</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>abruptCompletion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>abruptCompletion</var>.[[Value]], <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>abruptCompletion</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>abruptCompletion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are reserved words within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must not extend, as described in <emu-xref href=\"#sec-additional-syntax-numeric-literals\"><a href=\"#sec-additional-syntax-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-numeric-literals\">#sec-additional-syntax-numeric-literals</a></emu-xref>, the syntax of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt>, nor extend the syntax of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt>.\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, may not extend the syntax of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> to include <emu-xref href=\"#prod-annexB-LegacyOctalEscapeSequence\"><a href=\"#prod-annexB-LegacyOctalEscapeSequence\"><emu-nt>LegacyOctalEscapeSequence</emu-nt></a></emu-xref> or <emu-xref href=\"#prod-annexB-NonOctalDecimalEscapeSequence\"><a href=\"#prod-annexB-NonOctalDecimalEscapeSequence\"><emu-nt>NonOctalDecimalEscapeSequence</emu-nt></a></emu-xref> as described in <emu-xref href=\"#sec-additional-syntax-string-literals\"><a href=\"#sec-additional-syntax-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</a></emu-xref>.\n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot has the value <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the StringValue <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    </li>\n    <li>\n      Arguments objects for strict functions define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    </li>\n    <li>\n      Arguments objects for strict functions do not dynamically share their <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property values with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    </li>\n    <li>\n      For strict functions, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the StringValue of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a Function, Generator, or AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-globaldeclarationinstantiation": {"num": "15.1.11", "title": "#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> Runtime Semantics: GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>The abstract operation GlobalDeclarationInstantiation takes arguments <var>script</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the LexicallyDeclaredNames of <var>script</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>script</var>.</li><li>For each element <var>name</var> of <var>lexNames</var>, do<ol><li>If <var>env</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>env</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each element <var>name</var> of <var>varNames</var>, do<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> of the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>script</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>env</var>.</li><li>Perform ? <var>env</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> of <var>declaredVarNames</var>, do<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-source-text-module-record-execute-module": {"num": "15.2.1.17.5", "title": "#sec-source-text-module-record-execute-module ExecuteModule ( ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-execute-module\" aoid=\"ExecuteModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-execute-module\">#sec-source-text-module-record-execute-module</span> ExecuteModule ( ) Concrete Method</h1>\n          <p>The ExecuteModule concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> abstract method.</p>\n          <p>This abstract method performs the following steps:</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>moduleContext</var> be <var>module</var>.[[Context]].</li><li>Push <var>moduleContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>moduleContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be the result of evaluating <var>module</var>.[[ECMAScriptCode]].</li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> <var>moduleContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-runtime-semantics-scriptevaluation": {"num": "15.1.10", "title": "#sec-runtime-semantics-scriptevaluation ScriptEvaluation ( scriptRecord )", "html": "<emu-clause id=\"sec-runtime-semantics-scriptevaluation\" aoid=\"ScriptEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-scriptevaluation\">#sec-runtime-semantics-scriptevaluation</span> ScriptEvaluation ( <var>scriptRecord</var> )</h1>\n      <p>The abstract operation ScriptEvaluation takes argument <var>scriptRecord</var>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>Let <var>globalEnv</var> be <var>scriptRecord</var>.[[Realm]].[[GlobalEnv]].</li><li>Let <var>scriptContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>scriptContext</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>scriptContext</var> to <var>scriptRecord</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>scriptContext</var> to <var>scriptRecord</var>.</li><li>Set the VariableEnvironment of <var>scriptContext</var> to <var>globalEnv</var>.</li><li>Set the LexicalEnvironment of <var>scriptContext</var> to <var>globalEnv</var>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Push <var>scriptContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>scriptContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>scriptBody</var> be <var>scriptRecord</var>.[[ECMAScriptCode]].</li><li>Let <var>result</var> be <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref>(<var>scriptBody</var>, <var>globalEnv</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>scriptBody</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> <var>scriptContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e741ede8\"><emu-t>yield</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47a33813\"><emu-t>yield</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"throw\"</emu-val>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).</li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-function-definitions-runtime-semantics-namedevaluation": {"num": "14.1.24", "title": "#sec-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-namedevaluation\">#sec-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-definitions-instantiatefunctionobject": {"num": "14.5.11", "title": "#sec-asyncgenerator-definitions-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">#sec-asyncgenerator-definitions-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-returnifabrupt-shorthands": {"num": "5.2.3.4", "title": "#sec-returnifabrupt-shorthands ReturnIfAbrupt Shorthands", "html": "<emu-clause id=\"sec-returnifabrupt-shorthands\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-returnifabrupt-shorthands\">#sec-returnifabrupt-shorthands</span> ReturnIfAbrupt Shorthands</h1>\n        <p>Invocations of <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and syntax-directed operations that are prefixed by <code>?</code> indicate that <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref> should be applied to the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>. For example, the step:</p>\n        <emu-alg><ol><li>?&#160;OperationName().</li></ol></emu-alg>\n        <p>is equivalent to the following step:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(OperationName()).</li></ol></emu-alg>\n        <p>Similarly, for method application style, the step:</p>\n        <emu-alg><ol><li>? <var>someValue</var>.OperationName().</li></ol></emu-alg>\n        <p>is equivalent to:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>someValue</var>.OperationName()).</li></ol></emu-alg>\n        <p>Similarly, prefix <code>!</code> is used to indicate that the following invocation of an abstract or <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> will never return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and that the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>'s [[Value]] field should be used in place of the return value of the operation. For example, the step:</p>\n        <emu-alg><ol><li>Let <var>val</var> be !&#160;OperationName().</li></ol></emu-alg>\n        <p>is equivalent to the following steps:</p>\n        <emu-alg><ol><li>Let <var>val</var> be OperationName().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>val</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>If <var>val</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>val</var> to <var>val</var>.[[Value]].</li></ol></emu-alg>\n        <p>Syntax-directed operations for <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> make use of this shorthand by placing <code>!</code> or <code>?</code> before the invocation of the operation:</p>\n        <emu-alg><ol><li>Perform ! SyntaxDirectedOperation of <emu-nt>NonTerminal</emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-class-definitions-runtime-semantics-namedevaluation": {"num": "14.6.16", "title": "#sec-class-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-namedevaluation\">#sec-class-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be the result of ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <var>name</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li><li>Set <var>value</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-the-environment-record-type-hierarchy": {"num": "8.1.1", "title": "#sec-the-environment-record-type-hierarchy The Environment Record Type Hierarchy", "html": "<emu-clause id=\"sec-the-environment-record-type-hierarchy\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-the-environment-record-type-hierarchy\">#sec-the-environment-record-type-hierarchy</span> The Environment Record Type Hierarchy</h1>\n      <p>Environment Records can be thought of as existing in a simple object-oriented hierarchy where <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is an abstract class with three concrete subclasses: <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>, <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, and <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>. Function Environment Records and module Environment Records are subclasses of <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</p>\n      <ul>\n        <li>\n          <p><emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> (abstract)</p>\n          <ul>\n            <li>\n              <p>A <em><emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref></em> is used to define the effect of ECMAScript language syntactic elements such as <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s, <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>s, and <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clauses that directly associate identifier bindings with ECMAScript language values.</p>\n              <ul>\n                <li>\n                  <p>A <em><emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref></em> corresponds to the invocation of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, and contains bindings for the top-level declarations within that function. It may establish a new <code>this</code> binding. It also captures the state necessary to support <code>super</code> method invocations.</p>\n                </li>\n                <li>\n                  <p>A <em><emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref></em> contains the bindings for the top-level declarations of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It also contains the bindings that are explicitly imported by the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Its [[OuterEnv]] is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</p>\n                </li>\n              </ul>\n            </li>\n            <li>\n              <p>An <em><emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref></em> is used to define the effect of ECMAScript elements such as <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> that associate identifier bindings with the properties of some object.</p>\n            </li>\n            <li>\n              <p>A <em><emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref></em> is used for <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> global declarations. It does not have an outer environment; its [[OuterEnv]] is <emu-val>null</emu-val>. It may be prepopulated with identifier bindings and it includes an associated <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> whose properties provide some of the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>'s identifier bindings. As ECMAScript code is executed, additional properties may be added to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and the initial properties may be modified.</p>\n            </li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> abstract class includes the abstract specification methods defined in <emu-xref href=\"#table-abstract-methods-of-environment-records\"><a href=\"#table-abstract-methods-of-environment-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-environment-records\">#table-abstract-methods-of-environment-records</a></emu-xref>. These abstract methods have distinct concrete algorithms for each of the concrete subclasses.</p>\n      <emu-table id=\"table-abstract-methods-of-environment-records\" caption=\"Abstract Methods of Environment Records\" oldids=\"table-15\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-abstract-methods-of-environment-records\">#table-abstract-methods-of-environment-records</span>: Abstract Methods of Environment Records</figcaption><span id=\"table-15\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Method\n            </th>\n            <th>\n              Purpose\n            </th>\n          </tr>\n          <tr>\n            <td>\n              HasBinding(N)\n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> has a binding for the String value <var>N</var>. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              CreateMutableBinding(N, D)\n            </td>\n            <td>\n              Create a new but uninitialized mutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be subsequently deleted.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              CreateImmutableBinding(N, S)\n            </td>\n            <td>\n              Create a new but uninitialized immutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If <var>S</var> is <emu-val>true</emu-val> then attempts to set it after it has been initialized will always throw an exception, regardless of the strict mode setting of operations that reference that binding.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              InitializeBinding(N, V)\n            </td>\n            <td>\n              Set the value of an already existing but uninitialized binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and is a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              SetMutableBinding(N, V, S)\n            </td>\n            <td>\n              Set the value of an already existing mutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and may be a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>. <var>S</var> is a Boolean flag. If <var>S</var> is <emu-val>true</emu-val> and the binding cannot be set throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              GetBindingValue(N, S)\n            </td>\n            <td>\n              Returns the value of an already existing binding from an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>S</var> is used to identify references originating in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> or that otherwise require strict mode reference semantics. If <var>S</var> is <emu-val>true</emu-val> and the binding does not exist throw a <emu-val>ReferenceError</emu-val> exception. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              DeleteBinding(N)\n            </td>\n            <td>\n              Delete a binding from an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If a binding for <var>N</var> exists, remove the binding and return <emu-val>true</emu-val>. If the binding exists but cannot be removed return <emu-val>false</emu-val>. If the binding does not exist return <emu-val>true</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              HasThisBinding()\n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> establishes a <code>this</code> binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              HasSuperBinding()\n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> establishes a <code>super</code> method binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              WithBaseObject()\n            </td>\n            <td>\n              If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is associated with a <code>with</code> statement, return the with object. Otherwise, return <emu-val>undefined</emu-val>.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n\n      <div id=\"excluded-sec-declarative-environment-records\"><h1><span class=\"secnum\">8.1.1.1</span>#sec-declarative-environment-records Declarative Environment Records</h1>...</div><div id=\"excluded-sec-object-environment-records\"><h1><span class=\"secnum\">8.1.1.2</span>#sec-object-environment-records Object Environment Records</h1>...</div><div id=\"excluded-sec-function-environment-records\"><h1><span class=\"secnum\">8.1.1.3</span>#sec-function-environment-records Function Environment Records</h1>...</div><div id=\"excluded-sec-global-environment-records\"><h1><span class=\"secnum\">8.1.1.4</span>#sec-global-environment-records Global Environment Records</h1>...</div><div id=\"excluded-sec-module-environment-records\"><h1><span class=\"secnum\">8.1.1.5</span>#sec-module-environment-records Module Environment Records</h1>...</div></emu-clause>\n\n    "}, "sec-regexp-identifier-names-static-semantics-stringvalue": {"num": "21.2.1.6", "title": "#sec-regexp-identifier-names-static-semantics-stringvalue Static Semantics: StringValue", "html": "<emu-clause id=\"sec-regexp-identifier-names-static-semantics-stringvalue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-identifier-names-static-semantics-stringvalue\">#sec-regexp-identifier-names-static-semantics-stringvalue</span> Static Semantics: StringValue</h1>\n        <emu-see-also-para op=\"StringValue\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"RegExpIdentifierName\" params=\"U\" type=\"lexical\">\n    <emu-nt params=\"U\"><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a><emu-mods><emu-params>[U]</emu-params></emu-mods></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4aeafadc\"><emu-nt params=\"?U\"><a href=\"#prod-RegExpIdentifierStart\">RegExpIdentifierStart</a><emu-mods><emu-params>[?U]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8644c18\"><emu-nt params=\"?U\"><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a><emu-mods><emu-params>[?U]</emu-params></emu-mods></emu-nt><emu-nt params=\"?U\"><a href=\"#prod-RegExpIdentifierPart\">RegExpIdentifierPart</a><emu-mods><emu-params>[?U]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>idText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a></emu-nt>.</li><li>Let <var>idTextUnescaped</var> be the result of replacing any occurrences of <code>\\</code> <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt> in <var>idText</var> with the code point represented by the <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>idTextUnescaped</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ecmascript-standard-built-in-objects": {"num": "17", "title": "#sec-ecmascript-standard-built-in-objects ECMAScript Standard Built-in Objects", "html": "<emu-clause id=\"sec-ecmascript-standard-built-in-objects\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-standard-built-in-objects\">#sec-ecmascript-standard-built-in-objects</span> ECMAScript Standard Built-in Objects</h1>\n  <p>There are certain built-in objects available whenever an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> begins execution. One, the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, is part of the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> of the executing program. Others are accessible as initial properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> or indirectly as properties of accessible built-in objects.</p>\n  <p>Unless specified otherwise, a built-in object that is callable as a function is a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the characteristics described in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>. Unless specified otherwise, the [[Extensible]] internal slot of a built-in object initially has the value <emu-val>true</emu-val>. Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has a [[Realm]] internal slot whose value is the <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> of the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> for which the object was initially created.</p>\n  <p>Many built-in objects are functions: they can be invoked with arguments. Some of them furthermore are constructors: they are functions intended for use with the <code>new</code> operator. For each built-in function, this specification describes the arguments required by that function and the properties of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. For each built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, this specification furthermore describes properties of the prototype object of that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and properties of specific object instances returned by a <code>new</code> expression that invokes that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is given fewer arguments than the function is specified to require, the function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> shall behave exactly as if it had been given sufficient additional arguments, each such argument being the <emu-val>undefined</emu-val> value. Such missing arguments are considered to be &#8220;not present&#8221; and may be identified in that manner by specification algorithms. In the description of a particular function, the terms &#8220;<emu-val>this</emu-val> value&#8221; and &#8220;NewTarget&#8221; have the meanings given in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> described is given more arguments than the function is specified to allow, the extra arguments are evaluated by the call and then ignored by the function. However, an implementation may define implementation specific behaviour relating to such arguments as long as the behaviour is not the throwing of a <emu-val>TypeError</emu-val> exception that is predicated simply on the presence of an extra argument.</p>\n  <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n    <p>Implementations that add additional capabilities to the set of built-in functions are encouraged to do so by adding new functions rather than adding new parameters to existing functions.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified every built-in function and every built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">Function prototype object</a></emu-xref>, which is the initial value of the expression <code>Function.prototype</code> (<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-function-prototype-object\">#sec-properties-of-the-function-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot.</p>\n  <p>Unless otherwise specified every built-in prototype object has the <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">Object prototype object</a></emu-xref>, which is the initial value of the expression <code>Object.prototype</code> (<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-object-prototype-object\">#sec-properties-of-the-object-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot, except the <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">Object prototype object</a></emu-xref> itself.</p>\n  <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function.</p>\n  <p>Each built-in function defined in this specification is created by calling the <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref> abstract operation (<emu-xref href=\"#sec-createbuiltinfunction\"><a href=\"#sec-createbuiltinfunction\" class=\"excluded-xref\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</a></emu-xref>).</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"length\"</emu-val> property whose value is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Unless otherwise specified, this value is equal to the number of required parameters shown in the subclause headings for the function description. Optional parameters and rest parameters are not included in the parameter count.</p>\n  <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n    <p>For example, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that is the initial value of the <emu-val>\"map\"</emu-val> property of the <emu-xref href=\"#sec-properties-of-the-array-prototype-object\"><a href=\"#sec-properties-of-the-array-prototype-object\">Array prototype object</a></emu-xref> is described under the subclause heading &#171;Array.prototype.map (callbackFn [ , thisArg])&#187; which shows the two named arguments callbackFn and thisArg, the latter being optional; therefore the value of the <emu-val>\"length\"</emu-val> property of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is 1.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified, the <emu-val>\"length\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"name\"</emu-val> property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are identified as anonymous functions use the empty String as the value of the <emu-val>\"name\"</emu-val> property. For functions that are specified as properties of objects, the name value is the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string used to access the function. Functions that are specified as get or set accessor functions of built-in properties have <emu-val>\"get \"</emu-val> or <emu-val>\"set \"</emu-val> prepended to the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string. The value of the <emu-val>\"name\"</emu-val> property is explicitly specified for each built-in functions whose property key is a Symbol value. The <emu-val>\"name\"</emu-val> property is set using <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>.</p>\n  <p>Unless otherwise specified, the <emu-val>\"name\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every other <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> described in clauses <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref> and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified.</p>\n  <p>Every <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> described in clauses <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref> and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, <emu-val>undefined</emu-val>. If only a set accessor is described the get accessor is the default value, <emu-val>undefined</emu-val>.</p>\n</emu-clause>\n\n"}, "sec-async-function-definitions-runtime-semantics-namedevaluation": {"num": "14.7.13", "title": "#sec-async-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-namedevaluation\">#sec-async-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-function.prototype-@@hasinstance": {"num": "19.2.3.6", "title": "#sec-function.prototype-@@hasinstance Function.prototype [ @@hasInstance ] ( V )", "html": "<emu-clause id=\"sec-function.prototype-@@hasinstance\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype-@@hasinstance\">#sec-function.prototype-@@hasinstance</span> Function.prototype [ @@hasInstance ] ( <var>V</var> )</h1>\n        <p>When the <code>@@hasInstance</code> method of an object <var>F</var> is called with value <var>V</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>F</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryHasInstance\"><a href=\"#sec-ordinaryhasinstance\">OrdinaryHasInstance</a></emu-xref>(<var>F</var>, <var>V</var>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.hasInstance]\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This is the default implementation of <code>@@hasInstance</code> that most functions inherit. <code>@@hasInstance</code> is called by the <code>instanceof</code> operator to determine whether a value is an instance of a specific <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. An expression such as</p>\n          <pre><code class=\"javascript hljs\">v <span class=\"hljs-keyword\">instanceof</span> F</code></pre>\n          <p>evaluates as</p>\n          <pre><code class=\"javascript hljs\">F[@@hasInstance](v)</code></pre>\n          <p>A <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function can control which objects are recognized as its instances by <code>instanceof</code> by exposing a different <code>@@hasInstance</code> method on the function.</p>\n        </div></emu-note>\n        <p>This property is non-writable and non-configurable to prevent tampering that could be used to globally expose the target function of a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function</a></emu-xref>.</p>\n      </emu-clause>\n    "}, "sec-preparefortailcall": {"num": "14.9.3", "title": "#sec-preparefortailcall Runtime Semantics: PrepareForTailCall ( )", "html": "<emu-clause id=\"sec-preparefortailcall\" aoid=\"PrepareForTailCall\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-preparefortailcall\">#sec-preparefortailcall</span> Runtime Semantics: PrepareForTailCall ( )</h1>\n      <p>The abstract operation PrepareForTailCall takes no arguments. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>leafContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> <var>leafContext</var>.</li><li>Pop <var>leafContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> now on the top of the stack becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>leafContext</var> has no further use. It will never be activated as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li></ol></emu-alg>\n      <p>A tail position call must either release any transient internal resources associated with the currently executing function <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> before invoking the target function or reuse those resources in support of the target function.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For example, a tail position call should only grow an implementation's activation record stack by the amount that the size of the target function's activation record exceeds the size of the calling function's activation record. If the target function's activation record is smaller, then the total size of the stack should decrease.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.4.12", "title": "#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c5c757ac\"><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-definitions-propertydefinitionevaluation": {"num": "14.5.12", "title": "#sec-asyncgenerator-definitions-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">#sec-asyncgenerator-definitions-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameter <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be384400\"><emu-t>async</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>desc</var> be PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-arrow-function-definitions-runtime-semantics-namedevaluation": {"num": "14.8.16", "title": "#sec-async-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\">#sec-async-arrow-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7505c63a\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"694c2ff0\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>head</var> be CoveredAsyncArrowHead of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\"><span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval takes arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Set <var>inFunction</var> to <emu-val>true</emu-val>.</li><li>Set <var>inMethod</var> to <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, set <var>inDerivedConstructor</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Perform the following substeps in an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>x</var>), for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>runningContext</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>runningContext</var>'s VariableEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>runningContext</var> is not already suspended, suspend <var>runningContext</var>.</li><li>Let <var>evalContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>evalContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>evalContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set <var>evalContext</var>'s ScriptOrModule to <var>runningContext</var>'s ScriptOrModule.</li><li>Set <var>evalContext</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set <var>evalContext</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Push <var>evalContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> <var>evalContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-function-definitions-InstantiateFunctionObject": {"num": "14.7.10", "title": "#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-async-function-definitions-InstantiateFunctionObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-InstantiateFunctionObject\">#sec-async-function-definitions-InstantiateFunctionObject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-asyncgeneratorresumenext": {"num": "26.5.3.5", "title": "#sec-asyncgeneratorresumenext AsyncGeneratorResumeNext ( generator )", "html": "<emu-clause id=\"sec-asyncgeneratorresumenext\" aoid=\"AsyncGeneratorResumeNext\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</span> AsyncGeneratorResumeNext ( <var>generator</var> )</h1>\n        <p>The abstract operation AsyncGeneratorResumeNext takes argument <var>generator</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>state</var> be <var>generator</var>.[[AsyncGeneratorState]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is not <emu-const>executing</emu-const>.</li><li>If <var>state</var> is <emu-const>awaiting-return</emu-const>, return <emu-val>undefined</emu-val>.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li>If <var>queue</var> is an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, return <emu-val>undefined</emu-val>.</li><li>Let <var>next</var> be the value of the first element of <var>queue</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>next</var> is an AsyncGeneratorRequest record.</li><li>Let <var>completion</var> be <var>next</var>.[[Completion]].</li><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>completion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>awaiting-return</emu-const>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>completion</var>.[[Value]]).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-fulfilled\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-fulfilled\">AsyncGeneratorResumeNext Return Processor Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onFulfilled</var>.[[Generator]] to <var>generator</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-rejected\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-rejected\">AsyncGeneratorResumeNext Return Processor Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onRejected</var>.[[Generator]] to <var>generator</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>completion</var>.[[Value]]).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li></ol></li></ol></li><li>Else if <var>state</var> is <emu-const>completed</emu-const>, return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[AsyncGeneratorContext]].</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> <var>callerContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>completion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>callerContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-fulfilled\">\n          <h1><span class=\"secnum\">26.5.3.5.1</span> AsyncGeneratorResumeNext Return Processor Fulfilled Functions</h1>\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function has a [[Generator]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>F</var>.[[Generator]], <var>value</var>, <emu-val>true</emu-val>).</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is 1.</p>\n        </emu-clause>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-rejected\">\n          <h1><span class=\"secnum\">26.5.3.5.2</span> AsyncGeneratorResumeNext Return Processor Rejected Functions</h1>\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function has a [[Generator]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>F</var>.[[Generator]], <var>reason</var>).</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is 1.</p>\n        </emu-clause>\n      </emu-clause>\n\n      "}, "sec-static-semantics-sourcetext": {"num": "21.2.1.5", "title": "#sec-static-semantics-sourcetext Static Semantics: SourceText", "html": "<emu-clause id=\"sec-static-semantics-sourcetext\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-sourcetext\">#sec-static-semantics-sourcetext</span> Static Semantics: SourceText</h1>\n        <emu-grammar><emu-production name=\"UnicodePropertyNameCharacters\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnicodePropertyNameCharacters\">UnicodePropertyNameCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c1247f44\"><emu-nt><a href=\"#prod-UnicodePropertyNameCharacter\">UnicodePropertyNameCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-UnicodePropertyNameCharacters\">UnicodePropertyNameCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"UnicodePropertyValueCharacters\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnicodePropertyValueCharacters\">UnicodePropertyValueCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5a208aa0\"><emu-nt><a href=\"#prod-UnicodePropertyValueCharacter\">UnicodePropertyValueCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-UnicodePropertyValueCharacters\">UnicodePropertyValueCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, in source text order, of Unicode code points in the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> this production.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-boundfunctioncreate": {"num": "9.4.1.3", "title": "#sec-boundfunctioncreate BoundFunctionCreate ( targetFunction, boundThis, boundArgs )", "html": "<emu-clause id=\"sec-boundfunctioncreate\" aoid=\"BoundFunctionCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-boundfunctioncreate\">#sec-boundfunctioncreate</span> BoundFunctionCreate ( <var>targetFunction</var>, <var>boundThis</var>, <var>boundArgs</var> )</h1>\n        <p>The abstract operation BoundFunctionCreate takes arguments <var>targetFunction</var>, <var>boundThis</var>, and <var>boundArgs</var>. It is used to specify the creation of new <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function</a></emu-xref> exotic objects. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>targetFunction</var>) is Object.</li><li>Let <var>proto</var> be ? <var>targetFunction</var>.[[GetPrototypeOf]]().</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-bound-function-exotic-objects\"><a href=\"#table-internal-slots-of-bound-function-exotic-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-bound-function-exotic-objects\">#table-internal-slots-of-bound-function-exotic-objects</a></emu-xref>, plus [[Prototype]] and [[Extensible]].</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>obj</var>.[[Prototype]] to <var>proto</var>.</li><li>Set <var>obj</var>.[[Call]] as described in <emu-xref href=\"#sec-bound-function-exotic-objects-call-thisargument-argumentslist\"><a href=\"#sec-bound-function-exotic-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">#sec-bound-function-exotic-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>targetFunction</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>obj</var>.[[Construct]] as described in <emu-xref href=\"#sec-bound-function-exotic-objects-construct-argumentslist-newtarget\"><a href=\"#sec-bound-function-exotic-objects-construct-argumentslist-newtarget\" class=\"excluded-xref\" excluded-id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">#sec-bound-function-exotic-objects-construct-argumentslist-newtarget</a></emu-xref>.</li></ol></li><li>Set <var>obj</var>.[[BoundTargetFunction]] to <var>targetFunction</var>.</li><li>Set <var>obj</var>.[[BoundThis]] to <var>boundThis</var>.</li><li>Set <var>obj</var>.[[BoundArguments]] to <var>boundArgs</var>.</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-function-definitions-PropertyDefinitionEvaluation": {"num": "14.7.12", "title": "#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">#sec-async-function-definitions-PropertyDefinitionEvaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"759e5682\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions": {"num": "F", "title": "#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions Additions and Changes That Introduce Incompatibilities with Prior Editions", "html": "<emu-annex id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions</span> Additions and Changes That Introduce Incompatibilities with Prior Editions</h1>\n  <p><emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\" class=\"excluded-xref\" excluded-id=\"sec-reference-specification-type\">#sec-reference-specification-type</a></emu-xref>: In ECMAScript 2015, Function calls are not allowed to return a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> value.</p>\n  <p><emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>: In ECMAScript 2015, <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> applied to a String value now recognizes and converts <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> and <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> numeric strings. In previous editions such strings were converted to <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-code-realms\"><a href=\"#sec-code-realms\" class=\"excluded-xref\" excluded-id=\"sec-code-realms\">#sec-code-realms</a></emu-xref>: In ECMAScript 2018, Template objects are canonicalized based on <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> (source location), instead of across all occurrences of that template literal or tagged template in a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> in previous editions.</p>\n  <p><emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\" class=\"excluded-xref\" excluded-id=\"sec-white-space\">#sec-white-space</a></emu-xref>: In ECMASCript 2016, Unicode 8.0.0 or higher is mandated, as opposed to ECMAScript 2015 which mandated Unicode 5.1. In particular, this caused U+180E MONGOLIAN VOWEL SEPARATOR, which was in the <code>Space_Separator</code> (<code>Zs</code>) category and thus treated as whitespace in ECMAScript 2015, to be moved to the <code>Format</code> (<code>Cf</code>) category (as of Unicode 6.3.0). This causes whitespace-sensitive methods to behave differently. For example, <code>\"\\u180E\".trim().length</code> was <code>0</code> in previous editions, but <code>1</code> in ECMAScript 2016 and later. Additionally, ECMAScript 2017 mandated always using the latest version of the Unicode standard.</p>\n  <p><emu-xref href=\"#sec-names-and-keywords\"><a href=\"#sec-names-and-keywords\" class=\"excluded-xref\" excluded-id=\"sec-names-and-keywords\">#sec-names-and-keywords</a></emu-xref>: In ECMAScript 2015, the valid code points for an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are specified in terms of the Unicode properties &#8220;ID_Start&#8221; and &#8220;ID_Continue&#8221;. In previous editions, the valid <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> or <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> code points were specified by enumerating various Unicode code point categories.</p>\n  <p><emu-xref href=\"#sec-rules-of-automatic-semicolon-insertion\"><a href=\"#sec-rules-of-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</a></emu-xref>: In ECMAScript 2015, Automatic Semicolon Insertion adds a semicolon at the end of a do-while statement if the semicolon is missing. This change aligns the specification with the actual behaviour of most existing implementations.</p>\n  <p><emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, it is no longer an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> to have duplicate property names in Object Initializers.</p>\n  <p><emu-xref href=\"#sec-assignment-operators-static-semantics-early-errors\"><a href=\"#sec-assignment-operators-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators-static-semantics-early-errors\">#sec-assignment-operators-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> containing an assignment to an immutable binding such as the function name of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> does not produce an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>. Instead it produces a runtime error.</p>\n  <p><emu-xref href=\"#sec-block\"><a href=\"#sec-block\" class=\"excluded-xref\" excluded-id=\"sec-block\">#sec-block</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> beginning with the token let followed by the input elements <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> then <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions, automatic semicolon insertion would always insert a semicolon before the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> input element.</p>\n  <p><emu-xref href=\"#sec-expression-statement\"><a href=\"#sec-expression-statement\" class=\"excluded-xref\" excluded-id=\"sec-expression-statement\">#sec-expression-statement</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> beginning with the token <code>let</code> followed by the token <code>[</code> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a sequence would be the start of an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-if-statement-runtime-semantics-evaluation\"><a href=\"#sec-if-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-if-statement-runtime-semantics-evaluation\">#sec-if-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of an <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If no <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part is evaluated or if the evaluated <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the <code>(</code> token of a for statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the ( token of a for-in statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: Prior to ECMAScript 2015, an initialization expression could appear as part of the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> that precedes the <code>in</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>. In ECMAScript 2015, the <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> in that same position does not allow the occurrence of such an initializer. In ECMAScript 2017, such an initializer is permitted only in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, the completion value of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is not evaluated or if the final evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-with-statement-runtime-semantics-evaluation\"><a href=\"#sec-with-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-switch-statement-runtime-semantics-evaluation\"><a href=\"#sec-switch-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-runtime-semantics-evaluation\">#sec-switch-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> part of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>: In ECMAScript 2015, it is an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause to contain a <code>var</code> declaration for the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter. In previous editions, such a variable declaration would be instantiated in the enclosing variable environment but the declaration's <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> value would be assigned to the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>, <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref>: In ECMAScript 2015, a runtime <emu-val>SyntaxError</emu-val> is thrown if a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause evaluates a non-strict direct <code>eval</code> whose eval code includes a <code>var</code> or <code>FunctionDeclaration</code> declaration that binds the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement-runtime-semantics-evaluation\"><a href=\"#sec-try-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-runtime-semantics-evaluation\">#sec-try-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a throw completion and it has a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> part that evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val> if there is no <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause or if its <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause evaluates to an <emu-const>empty</emu-const> normal completion.</p>\n  <p><emu-xref href=\"#sec-method-definitions-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-method-definitions-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</a></emu-xref> In ECMAScript 2015, the function objects that are created as the values of the [[Get]] or [[Set]] attribute of accessor properties in an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> are not <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> functions and they do not have a <emu-val>\"prototype\"</emu-val> own property. In the previous edition, they were constructors and had a <emu-val>\"prototype\"</emu-val> property.</p>\n  <p><emu-xref href=\"#sec-object.freeze\"><a href=\"#sec-object.freeze\" class=\"excluded-xref\" excluded-id=\"sec-object.freeze\">#sec-object.freeze</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.freeze</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertydescriptor\"><a href=\"#sec-object.getownpropertydescriptor\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertydescriptor\">#sec-object.getownpropertydescriptor</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyDescriptor</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertynames\"><a href=\"#sec-object.getownpropertynames\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertynames\">#sec-object.getownpropertynames</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyNames</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getprototypeof\"><a href=\"#sec-object.getprototypeof\" class=\"excluded-xref\" excluded-id=\"sec-object.getprototypeof\">#sec-object.getprototypeof</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getPrototypeOf</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isextensible\"><a href=\"#sec-object.isextensible\" class=\"excluded-xref\" excluded-id=\"sec-object.isextensible\">#sec-object.isextensible</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isExtensible</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isfrozen\"><a href=\"#sec-object.isfrozen\" class=\"excluded-xref\" excluded-id=\"sec-object.isfrozen\">#sec-object.isfrozen</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isFrozen</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.issealed\"><a href=\"#sec-object.issealed\" class=\"excluded-xref\" excluded-id=\"sec-object.issealed\">#sec-object.issealed</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isSealed</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.keys\"><a href=\"#sec-object.keys\" class=\"excluded-xref\" excluded-id=\"sec-object.keys\">#sec-object.keys</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.keys</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.preventextensions\"><a href=\"#sec-object.preventextensions\" class=\"excluded-xref\" excluded-id=\"sec-object.preventextensions\">#sec-object.preventextensions</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.preventExtensions</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.seal\"><a href=\"#sec-object.seal\" class=\"excluded-xref\" excluded-id=\"sec-object.seal\">#sec-object.seal</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.seal</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-function.prototype.bind\"><a href=\"#sec-function.prototype.bind\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.bind\">#sec-function.prototype.bind</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function</a></emu-xref> is set to the [[GetPrototypeOf]] value of its target function. In the previous edition, [[Prototype]] was always set to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-function-instances-length\"><a href=\"#sec-function-instances-length\" class=\"excluded-xref\" excluded-id=\"sec-function-instances-length\">#sec-function-instances-length</a></emu-xref>: In ECMAScript 2015, the <emu-val>\"length\"</emu-val> property of function instances is configurable. In previous editions it was non-configurable.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-nativeerror-constructors\"><a href=\"#sec-properties-of-the-nativeerror-constructors\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-nativeerror-constructors\">#sec-properties-of-the-nativeerror-constructors</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is the Error <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. In previous editions it was the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">Function prototype object</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-date-prototype-object\">#sec-properties-of-the-date-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\">Date prototype object</a></emu-xref> is not a Date instance. In previous editions it was a Date instance whose TimeValue was <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.localeCompare</code> function must treat Strings that are canonically equivalent according to the Unicode standard as being identical. In previous editions implementations were permitted to ignore canonical equivalence and could instead use a bit-wise comparison.</p>\n  <p><emu-xref href=\"#sec-string.prototype.tolowercase\"><a href=\"#sec-string.prototype.tolowercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.tolowercase\">#sec-string.prototype.tolowercase</a></emu-xref> and <emu-xref href=\"#sec-string.prototype.touppercase\"><a href=\"#sec-string.prototype.touppercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.touppercase\">#sec-string.prototype.touppercase</a></emu-xref> In ECMAScript 2015, lowercase/upper conversion processing operates on code points. In previous editions such the conversion processing was only applied to individual code units. The only affected code points are those in the Deseret block of Unicode.</p>\n  <p><emu-xref href=\"#sec-string.prototype.trim\"><a href=\"#sec-string.prototype.trim\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.trim</code> method is defined to recognize white space code points that may exists outside of the Unicode BMP. However, as of Unicode 7 no such code points are defined. In previous editions such code points would not have been recognized as white space.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref> In ECMAScript 2015, If the <var>pattern</var> argument is a RegExp instance and the <var>flags</var> argument is not <emu-val>undefined</emu-val>, a new RegExp instance is created just like <var>pattern</var> except that <var>pattern</var>'s flags are replaced by the argument <var>flags</var>. In previous editions a <emu-val>TypeError</emu-val> exception was thrown when <var>pattern</var> was a RegExp instance and <var>flags</var> was not <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref> is not a RegExp instance. In previous editions it was a RegExp instance whose pattern is the empty String.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, <emu-val>\"source\"</emu-val>, <emu-val>\"global\"</emu-val>, <emu-val>\"ignoreCase\"</emu-val>, and <emu-val>\"multiline\"</emu-val> are accessor properties defined on the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref>. In previous editions they were data properties defined on RegExp instances.</p>\n  <p><emu-xref href=\"#sec-atomics.notify\"><a href=\"#sec-atomics.notify\" class=\"excluded-xref\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</a></emu-xref>: In ECMAScript 2019, <code>Atomics.wake</code> has been renamed to <code>Atomics.notify</code> to prevent confusion with <code>Atomics.wait</code>.</p>\n  <p><emu-xref href=\"#sec-asyncfromsynciteratorcontinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\" class=\"excluded-xref\" excluded-id=\"sec-asyncfromsynciteratorcontinuation\">#sec-asyncfromsynciteratorcontinuation</a></emu-xref>, <emu-xref href=\"#sec-asyncgeneratorresumenext\"><a href=\"#sec-asyncgeneratorresumenext\" class=\"excluded-xref\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</a></emu-xref>: In ECMAScript 2019, the number of Jobs enqueued by <code>await</code> was reduced, which could create an observable difference in resolution order between a <code>then()</code> call and an <code>await</code> expression.</p>\n</emu-annex>\n"}, "sec-runtime-semantics-bindingclassdeclarationevaluation": {"num": "14.6.15", "title": "#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\">#sec-runtime-semantics-bindingclassdeclarationevaluation</span> Runtime Semantics: BindingClassDeclarationEvaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>className</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<var>className</var>, <var>value</var>, <var>env</var>).</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <emu-val>\"default\"</emu-val>.</li><li>Set <var>value</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and establishing its binding is handled as part of the evaluation action for that production. See <emu-xref href=\"#sec-exports-runtime-semantics-evaluation\"><a href=\"#sec-exports-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-exports-runtime-semantics-evaluation\">#sec-exports-runtime-semantics-evaluation</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-class-definitions-runtime-semantics-evaluation": {"num": "14.6.17", "title": "#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-evaluation\">#sec-class-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Perform ? BindingClassDeclarationEvaluation of this <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and is never directly evaluated.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <emu-val>\"\"</emu-val>.</li><li>Set <var>value</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>className</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.1.23", "title": "#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-namedevaluation": {"num": "14.4.13", "title": "#sec-generator-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-namedevaluation\">#sec-generator-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-completion-record-fields": "Table 9", "table-abstract-methods-of-environment-records": "Table 16", "table-realm-record-fields": "Table 22", "table-internal-slots-of-bound-function-exotic-objects": "Table 29"}}, "to": {"secList": ["sec-completion-record-specification-type", "sec-code-realms", "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-generatorresume", "sec-getthisenvironment", "sec-asyncgenerator-definitions-namedevaluation", "sec-runtime-semantics-definemethod", "sec-assignment-operators-runtime-semantics-evaluation", "sec-identifier-names-static-semantics-stringvalue", "sec-arrow-function-definitions-runtime-semantics-namedevaluation", "sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "sec-multiplicative-operators-runtime-semantics-evaluation", "sec-function-definitions-runtime-semantics-evaluation", "sec-generatorresumeabrupt", "sec-strict-mode-of-ecmascript", "sec-globaldeclarationinstantiation", "sec-source-text-module-record-execute-module", "sec-runtime-semantics-scriptevaluation", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-function-definitions-runtime-semantics-namedevaluation", "sec-asyncgenerator-definitions-instantiatefunctionobject", "sec-returnifabrupt-shorthands", "sec-class-definitions-runtime-semantics-namedevaluation", "sec-the-environment-record-type-hierarchy", "sec-regexp-identifier-names-static-semantics-stringvalue", "sec-ecmascript-standard-built-in-objects", "sec-async-function-definitions-runtime-semantics-namedevaluation", "sec-function.prototype-@@hasinstance", "sec-preparefortailcall", "sec-asyncgenerator-definitions-evaluation", "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "sec-asyncgenerator-definitions-propertydefinitionevaluation", "sec-async-arrow-function-definitions-runtime-semantics-namedevaluation", "sec-performeval", "sec-async-function-definitions-InstantiateFunctionObject", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-asyncgeneratorresumenext", "sec-static-semantics-sourcetext", "sec-boundfunctioncreate", "sec-async-function-definitions-PropertyDefinitionEvaluation", "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions", "sec-runtime-semantics-bindingclassdeclarationevaluation", "sec-class-definitions-runtime-semantics-evaluation", "sec-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-generator-function-definitions-runtime-semantics-namedevaluation"], "secData": {"sec-completion-record-specification-type": {"num": "6.2.3", "title": "#sec-completion-record-specification-type The Completion Record Specification Type", "html": "<emu-clause id=\"sec-completion-record-specification-type\" aoid=\"Completion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completion-record-specification-type\">#sec-completion-record-specification-type</span> The Completion Record Specification Type</h1>\n      <p>The Completion type is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> used to explain the runtime propagation of values and control flow such as the behaviour of statements (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) that perform nonlocal transfers of control.</p>\n      <p>Values of the Completion type are <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> values whose fields are defined as by <emu-xref href=\"#table-completion-record-fields\"><a href=\"#table-completion-record-fields\" class=\"excluded-xref\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</a></emu-xref>. Such values are referred to as <dfn>Completion Record</dfn>s.</p>\n      <emu-table id=\"table-completion-record-fields\" caption=\"Completion Record Fields\" oldids=\"table-8\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</span>: <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> Fields</figcaption><span id=\"table-8\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[Type]]\n            </td>\n            <td>\n              One of <emu-const>normal</emu-const>, <emu-const>break</emu-const>, <emu-const>continue</emu-const>, <emu-const>return</emu-const>, or <emu-const>throw</emu-const>\n            </td>\n            <td>\n              The type of completion that occurred.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Value]]\n            </td>\n            <td>\n              any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The value that was produced.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Target]]\n            </td>\n            <td>\n              any ECMAScript string or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The target label for directed control transfers.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The term &#8220;<dfn>abrupt completion</dfn>&#8221; refers to any completion with a [[Type]] value other than <emu-const>normal</emu-const>.</p>\n\n      <emu-clause id=\"await\" aoid=\"Await\">\n        <h1><span class=\"secnum\">6.2.3.1</span> Await</h1>\n\n        <p>Algorithm steps that say</p>\n\n        <emu-alg><ol><li>Let <var>completion</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n        <p>mean the same thing as:</p>\n\n        <emu-alg><ol><li>Let <var>asyncContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>value</var>).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#await-fulfilled\" title=\"\"><a href=\"#await-fulfilled\">Await Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onFulfilled</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#await-rejected\" title=\"\"><a href=\"#await-rejected\">Await Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onRejected</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>completion</var>, the following steps of the algorithm that invoked <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> will be performed, with <var>completion</var> available.</li><li>Return.</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>asyncContext</var>.</li></ol></emu-alg>\n\n        <p>where all aliases in the above steps, with the exception of <var>completion</var>, are ephemeral and visible only in the steps pertaining to Await.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Await can be combined with the <code>?</code> and <code>!</code> prefixes, so that for example</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n          <p>means the same thing as:</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        </div></emu-note>\n\n        <emu-clause id=\"await-fulfilled\">\n          <h1><span class=\"secnum\">6.2.3.1.1</span> Await Fulfilled Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise fulfillment value to the caller as a normal completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is 1.</p>\n        </emu-clause>\n\n        <emu-clause id=\"await-rejected\">\n          <h1><span class=\"secnum\">6.2.3.1.2</span> Await Rejected Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise rejection reason to the caller as an abrupt throw completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>reason</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is 1.</p>\n        </emu-clause>\n      </emu-clause>\n\n      <div id=\"excluded-sec-normalcompletion\"><h1><span class=\"secnum\">6.2.3.2</span>#sec-normalcompletion NormalCompletion</h1>...</div><div id=\"excluded-sec-throwcompletion\"><h1><span class=\"secnum\">6.2.3.3</span>#sec-throwcompletion ThrowCompletion</h1>...</div><div id=\"excluded-sec-updateempty\"><h1><span class=\"secnum\">6.2.3.4</span>#sec-updateempty UpdateEmpty ( completionRecord, value )</h1>...</div></emu-clause>\n\n    "}, "sec-code-realms": {"num": "8.2", "title": "#sec-code-realms Realms", "html": "<emu-clause id=\"sec-code-realms\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-code-realms\">#sec-code-realms</span> Realms</h1>\n    <p>Before it is evaluated, all ECMAScript code must be associated with a <dfn id=\"realm\">realm</dfn>. Conceptually, a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> consists of a set of intrinsic objects, an ECMAScript global environment, all of the ECMAScript code that is loaded within the scope of that global environment, and other associated state and resources.</p>\n    <p>A <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is represented in this specification as a <dfn id=\"realm-record\">Realm Record</dfn> with the fields specified in <emu-xref href=\"#table-realm-record-fields\"><a href=\"#table-realm-record-fields\" class=\"excluded-xref\" excluded-id=\"table-realm-record-fields\">#table-realm-record-fields</a></emu-xref>:</p>\n    <emu-table id=\"table-realm-record-fields\" caption=\"Realm Record Fields\" oldids=\"table-21\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-realm-record-fields\">#table-realm-record-fields</span>: <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> Fields</figcaption><span id=\"table-21\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          </th>\n          <th>\n            Value\n          </th>\n          <th>\n            Meaning\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Intrinsics]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose field names are intrinsic keys and whose values are objects\n          </td>\n          <td>\n            The intrinsic values used by code associated with this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalObject]]\n          </td>\n          <td>\n            Object\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalEnv]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>\n          </td>\n          <td>\n            The global environment for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[TemplateMap]]\n          </td>\n          <td>\n            A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, [[Array]]: Object }.\n          </td>\n          <td>\n            <p>Template objects are canonicalized separately for each <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> using its <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>'s [[TemplateMap]]. Each [[Site]] value is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> that is a <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>. The associated [[Array]] value is the corresponding template object that is passed to a tag function.</p>\n            <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Once a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> becomes unreachable, the corresponding [[Array]] is also unreachable, and it would be unobservable if an implementation removed the pair from the [[TemplateMap]] list.</div></emu-note>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HostDefined]]\n          </td>\n          <td>\n            Any, default value is <emu-val>undefined</emu-val>.\n          </td>\n          <td>\n            Field reserved for use by hosts that need to associate additional information with a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <div id=\"excluded-sec-createrealm\"><h1><span class=\"secnum\">8.2.1</span>#sec-createrealm CreateRealm ( )</h1>...</div><div id=\"excluded-sec-createintrinsics\"><h1><span class=\"secnum\">8.2.2</span>#sec-createintrinsics CreateIntrinsics ( realmRec )</h1>...</div><div id=\"excluded-sec-setrealmglobalobject\"><h1><span class=\"secnum\">8.2.3</span>#sec-setrealmglobalobject SetRealmGlobalObject ( realmRec, globalObj, thisValue )</h1>...</div><div id=\"excluded-sec-setdefaultglobalbindings\"><h1><span class=\"secnum\">8.2.4</span>#sec-setdefaultglobalbindings SetDefaultGlobalBindings ( realmRec )</h1>...</div></emu-clause>\n\n  "}, "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.4.11", "title": "#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-generatorresume": {"num": "26.4.3.3", "title": "#sec-generatorresume GeneratorResume ( generator, value )", "html": "<emu-clause id=\"sec-generatorresume\" aoid=\"GeneratorResume\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresume\">#sec-generatorresume</span> GeneratorResume ( <var>generator</var>, <var>value</var> )</h1>\n        <p>The abstract operation GeneratorResume takes arguments <var>generator</var> and <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <emu-const>completed</emu-const>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-getthisenvironment": {"num": "8.3.3", "title": "#sec-getthisenvironment GetThisEnvironment ( )", "html": "<emu-clause id=\"sec-getthisenvironment\" aoid=\"GetThisEnvironment\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getthisenvironment\">#sec-getthisenvironment</span> GetThisEnvironment ( )</h1>\n      <p>The abstract operation GetThisEnvironment takes no arguments. It finds the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that currently supplies the binding of the <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> <code>this</code>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li id=\"step-getthisenvironment-loop\">Repeat,<ol><li>Let <var>exists</var> be <var>env</var>.HasThisBinding().</li><li>If <var>exists</var> is <emu-val>true</emu-val>, return <var>env</var>.</li><li>Let <var>outer</var> be <var>env</var>.[[OuterEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>outer</var> is not <emu-val>null</emu-val>.</li><li>Set <var>env</var> to <var>outer</var>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The loop in step <emu-xref href=\"#step-getthisenvironment-loop\"><a href=\"#step-getthisenvironment-loop\" class=\"excluded-xref\" excluded-id=\"step-getthisenvironment-loop\">#step-getthisenvironment-loop</a></emu-xref> will always terminate because the list of environments always ends with the global environment which has a <code>this</code> binding.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-definitions-namedevaluation": {"num": "14.5.13", "title": "#sec-asyncgenerator-definitions-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-namedevaluation\">#sec-asyncgenerator-definitions-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-definemethod": {"num": "14.3.7", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>functionPrototype</var> is present, then<ol><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>prototype</var>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "12.15.4", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-simple-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? DestructuringAssignmentEvaluation of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5f3a8747\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-compound-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>assignmentOpText</var> be the source text matched by <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>.</li><li>Let <var>opText</var> be the sequence of Unicode code points associated with <var>assignmentOpText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>assignmentOpText</var> </th><th> <var>opText</var>       </th></tr>\n                <tr><td> <code>**=</code>              </td><td> <code>**</code>           </td></tr>\n                <tr><td> <code>*=</code>               </td><td> <code>*</code>            </td></tr>\n                <tr><td> <code>/=</code>               </td><td> <code>/</code>            </td></tr>\n                <tr><td> <code>%=</code>               </td><td> <code>%</code>            </td></tr>\n                <tr><td> <code>+=</code>               </td><td> <code>+</code>            </td></tr>\n                <tr><td> <code>-=</code>               </td><td> <code>-</code>            </td></tr>\n                <tr><td> <code>&lt;&lt;=</code>        </td><td> <code>&lt;&lt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;=</code>        </td><td> <code>&gt;&gt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;=</code>    </td><td> <code>&gt;&gt;&gt;</code> </td></tr>\n                <tr><td> <code>&amp;=</code>           </td><td> <code>&amp;</code>        </td></tr>\n                <tr><td> <code>^=</code>               </td><td> <code>^</code>            </td></tr>\n                <tr><td> <code>|=</code>               </td><td> <code>|</code>            </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Let <var>r</var> be <emu-xref aoid=\"ApplyStringOrNumericBinaryOperator\"><a href=\"#sec-applystringornumericbinaryoperator\">ApplyStringOrNumericBinaryOperator</a></emu-xref>(<var>lval</var>, <var>opText</var>, <var>rval</var>).</li><li id=\"step-assignmentexpression-evaluation-compound-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0de56464\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>&amp;&amp;=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>false</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d3d4545\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>||=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>true</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0db89f3e\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>??=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>If <var>lval</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When this expression occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-simple-putvalue\"><a href=\"#step-assignmentexpression-evaluation-simple-putvalue\">1.e</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-compound-getvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-getvalue\">#step-assignmentexpression-evaluation-compound-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">#step-assignmentexpression-evaluation-lgcl-and-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">#step-assignmentexpression-evaluation-lgcl-or-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-getvalue</a></emu-xref> is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. Additionally, it is a runtime error if the <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-compound-putvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-putvalue\">#step-assignmentexpression-evaluation-compound-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">#step-assignmentexpression-evaluation-lgcl-and-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">#step-assignmentexpression-evaluation-lgcl-or-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-putvalue</a></emu-xref> is a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, or to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-identifier-names-static-semantics-stringvalue": {"num": "11.6.1.2", "title": "#sec-identifier-names-static-semantics-stringvalue Static Semantics: StringValue", "html": "<emu-clause id=\"sec-identifier-names-static-semantics-stringvalue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifier-names-static-semantics-stringvalue\">#sec-identifier-names-static-semantics-stringvalue</span> Static Semantics: StringValue</h1>\n        <emu-see-also-para op=\"StringValue\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IdentifierName\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"434685ab\"><emu-nt><a href=\"#prod-IdentifierStart\">IdentifierStart</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"700c1cee\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-nt><a href=\"#prod-IdentifierPart\">IdentifierPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>idText</var> be the source text matched by <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>idTextUnescaped</var> be the result of replacing any occurrences of <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt> in <var>idText</var> with the code point represented by the <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>idTextUnescaped</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-arrow-function-definitions-runtime-semantics-namedevaluation": {"num": "14.2.16", "title": "#sec-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-arrow-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions-runtime-semantics-namedevaluation\">#sec-arrow-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2a7a3456\"><emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li>Let <var>parameters</var> be CoveredFormalsList of <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>.</li><li id=\"step-arrowfunction-evaluation-functioncreate\">Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step <emu-xref href=\"#step-arrowfunction-evaluation-functioncreate\"><a href=\"#step-arrowfunction-evaluation-functioncreate\" class=\"excluded-xref\" excluded-id=\"step-arrowfunction-evaluation-functioncreate\">#step-arrowfunction-evaluation-functioncreate</a></emu-xref> is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-method-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.3.8", "title": "#sec-method-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? DefineMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>methodDef</var>.[[Closure]], [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>desc</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f1487956\"><emu-t>get</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4402354c\"><emu-t>set</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-multiplicative-operators-runtime-semantics-evaluation": {"num": "12.7.3", "title": "#sec-multiplicative-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">#sec-multiplicative-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"MultiplicativeExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fb9fe2a0\"><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>opText</var> be the source text matched by <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt>.</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateStringOrNumericBinaryExpression\"><a href=\"#sec-evaluatestringornumericbinaryexpression\">EvaluateStringOrNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt>, <var>opText</var>, <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-function-definitions-runtime-semantics-evaluation": {"num": "14.1.25", "title": "#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>An alternative semantics is provided in <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>A <emu-val>\"prototype\"</emu-val> property is automatically created for every function defined using a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, to allow for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-generatorresumeabrupt": {"num": "26.4.3.4", "title": "#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion )", "html": "<emu-clause id=\"sec-generatorresumeabrupt\" aoid=\"GeneratorResumeAbrupt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresumeabrupt\">#sec-generatorresumeabrupt</span> GeneratorResumeAbrupt ( <var>generator</var>, <var>abruptCompletion</var> )</h1>\n        <p>The abstract operation GeneratorResumeAbrupt takes arguments <var>generator</var> and <var>abruptCompletion</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>abruptCompletion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>abruptCompletion</var>.[[Value]], <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>abruptCompletion</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>abruptCompletion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are reserved words within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must not extend, as described in <emu-xref href=\"#sec-additional-syntax-numeric-literals\"><a href=\"#sec-additional-syntax-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-numeric-literals\">#sec-additional-syntax-numeric-literals</a></emu-xref>, the syntax of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> to include <emu-nt>LegacyOctalIntegerLiteral</emu-nt>, nor extend the syntax of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> to include <emu-nt>NonOctalDecimalIntegerLiteral</emu-nt>.\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, may not extend the syntax of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> to include <emu-xref href=\"#prod-annexB-LegacyOctalEscapeSequence\"><a href=\"#prod-annexB-LegacyOctalEscapeSequence\"><emu-nt>LegacyOctalEscapeSequence</emu-nt></a></emu-xref> or <emu-xref href=\"#prod-annexB-NonOctalDecimalEscapeSequence\"><a href=\"#prod-annexB-NonOctalDecimalEscapeSequence\"><emu-nt>NonOctalDecimalEscapeSequence</emu-nt></a></emu-xref> as described in <emu-xref href=\"#sec-additional-syntax-string-literals\"><a href=\"#sec-additional-syntax-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</a></emu-xref>.\n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot has the value <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the StringValue <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    </li>\n    <li>\n      Arguments objects for strict functions define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    </li>\n    <li>\n      Arguments objects for strict functions do not dynamically share their <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property values with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    </li>\n    <li>\n      For strict functions, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the StringValue of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a Function, Generator, or AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-globaldeclarationinstantiation": {"num": "15.1.11", "title": "#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> Runtime Semantics: GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current global environment. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>The abstract operation GlobalDeclarationInstantiation takes arguments <var>script</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the global environment in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the LexicallyDeclaredNames of <var>script</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>script</var>.</li><li>For each element <var>name</var> of <var>lexNames</var>, do<ol><li>If <var>env</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>env</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each element <var>name</var> of <var>varNames</var>, do<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> of the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>script</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>env</var>.</li><li>Perform ? <var>env</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> of <var>declaredVarNames</var>, do<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-source-text-module-record-execute-module": {"num": "15.2.1.17.5", "title": "#sec-source-text-module-record-execute-module ExecuteModule ( ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-execute-module\" aoid=\"ExecuteModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-execute-module\">#sec-source-text-module-record-execute-module</span> ExecuteModule ( ) Concrete Method</h1>\n          <p>The ExecuteModule concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> abstract method.</p>\n          <p>This abstract method performs the following steps:</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>Suspend the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>moduleContext</var> be <var>module</var>.[[Context]].</li><li>Push <var>moduleContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>moduleContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be the result of evaluating <var>module</var>.[[ECMAScriptCode]].</li><li>Suspend <var>moduleContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-runtime-semantics-scriptevaluation": {"num": "15.1.10", "title": "#sec-runtime-semantics-scriptevaluation ScriptEvaluation ( scriptRecord )", "html": "<emu-clause id=\"sec-runtime-semantics-scriptevaluation\" aoid=\"ScriptEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-scriptevaluation\">#sec-runtime-semantics-scriptevaluation</span> ScriptEvaluation ( <var>scriptRecord</var> )</h1>\n      <p>The abstract operation ScriptEvaluation takes argument <var>scriptRecord</var>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>Let <var>globalEnv</var> be <var>scriptRecord</var>.[[Realm]].[[GlobalEnv]].</li><li>Let <var>scriptContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>scriptContext</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>scriptContext</var> to <var>scriptRecord</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>scriptContext</var> to <var>scriptRecord</var>.</li><li>Set the VariableEnvironment of <var>scriptContext</var> to <var>globalEnv</var>.</li><li>Set the LexicalEnvironment of <var>scriptContext</var> to <var>globalEnv</var>.</li><li>Suspend the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Push <var>scriptContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>scriptContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>scriptBody</var> be <var>scriptRecord</var>.[[ECMAScriptCode]].</li><li>Let <var>result</var> be <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref>(<var>scriptBody</var>, <var>globalEnv</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>scriptBody</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Suspend <var>scriptContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e741ede8\"><emu-t>yield</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47a33813\"><emu-t>yield</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"throw\"</emu-val>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).</li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-function-definitions-runtime-semantics-namedevaluation": {"num": "14.1.24", "title": "#sec-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-namedevaluation\">#sec-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-definitions-instantiatefunctionobject": {"num": "14.5.11", "title": "#sec-asyncgenerator-definitions-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">#sec-asyncgenerator-definitions-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-returnifabrupt-shorthands": {"num": "5.2.3.4", "title": "#sec-returnifabrupt-shorthands ReturnIfAbrupt Shorthands", "html": "<emu-clause id=\"sec-returnifabrupt-shorthands\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-returnifabrupt-shorthands\">#sec-returnifabrupt-shorthands</span> ReturnIfAbrupt Shorthands</h1>\n        <p>Invocations of <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and syntax-directed operations that are prefixed by <code>?</code> indicate that <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref> should be applied to the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>. For example, the step:</p>\n        <emu-alg><ol><li>?&#160;OperationName().</li></ol></emu-alg>\n        <p>is equivalent to the following step:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(OperationName()).</li></ol></emu-alg>\n        <p>Similarly, for method application style, the step:</p>\n        <emu-alg><ol><li>? <var>someValue</var>.OperationName().</li></ol></emu-alg>\n        <p>is equivalent to:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>someValue</var>.OperationName()).</li></ol></emu-alg>\n        <p>Similarly, prefix <code>!</code> is used to indicate that the following invocation of an abstract or syntax-directed operation will never return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and that the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>'s [[Value]] field should be used in place of the return value of the operation. For example, the step:</p>\n        <emu-alg><ol><li>Let <var>val</var> be !&#160;OperationName().</li></ol></emu-alg>\n        <p>is equivalent to the following steps:</p>\n        <emu-alg><ol><li>Let <var>val</var> be OperationName().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>val</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>If <var>val</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>val</var> to <var>val</var>.[[Value]].</li></ol></emu-alg>\n        <p>Syntax-directed operations for <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> make use of this shorthand by placing <code>!</code> or <code>?</code> before the invocation of the operation:</p>\n        <emu-alg><ol><li>Perform ! SyntaxDirectedOperation of <emu-nt>NonTerminal</emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-class-definitions-runtime-semantics-namedevaluation": {"num": "14.6.16", "title": "#sec-class-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-namedevaluation\">#sec-class-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be the result of ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <var>name</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-the-environment-record-type-hierarchy": {"num": "8.1.1", "title": "#sec-the-environment-record-type-hierarchy The Environment Record Type Hierarchy", "html": "<emu-clause id=\"sec-the-environment-record-type-hierarchy\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-the-environment-record-type-hierarchy\">#sec-the-environment-record-type-hierarchy</span> The Environment Record Type Hierarchy</h1>\n      <p>Environment Records can be thought of as existing in a simple object-oriented hierarchy where <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is an abstract class with three concrete subclasses: <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>, <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, and <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>. Function Environment Records and module Environment Records are subclasses of <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</p>\n      <ul>\n        <li>\n          <p><emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> (abstract)</p>\n          <ul>\n            <li>\n              <p>A <em><emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref></em> is used to define the effect of ECMAScript language syntactic elements such as <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s, <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>s, and <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clauses that directly associate identifier bindings with ECMAScript language values.</p>\n              <ul>\n                <li>\n                  <p>A <em><emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref></em> corresponds to the invocation of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, and contains bindings for the top-level declarations within that function. It may establish a new <code>this</code> binding. It also captures the state necessary to support <code>super</code> method invocations.</p>\n                </li>\n                <li>\n                  <p>A <em><emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref></em> contains the bindings for the top-level declarations of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It also contains the bindings that are explicitly imported by the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Its [[OuterEnv]] is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</p>\n                </li>\n              </ul>\n            </li>\n            <li>\n              <p>An <em><emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref></em> is used to define the effect of ECMAScript elements such as <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> that associate identifier bindings with the properties of some object.</p>\n            </li>\n            <li>\n              <p>A <em><emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref></em> is used for <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> global declarations. It does not have an outer environment; its [[OuterEnv]] is <emu-val>null</emu-val>. It may be prepopulated with identifier bindings and it includes an associated <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> whose properties provide some of the global environment's identifier bindings. As ECMAScript code is executed, additional properties may be added to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and the initial properties may be modified.</p>\n            </li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> abstract class includes the abstract specification methods defined in <emu-xref href=\"#table-abstract-methods-of-environment-records\"><a href=\"#table-abstract-methods-of-environment-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-environment-records\">#table-abstract-methods-of-environment-records</a></emu-xref>. These abstract methods have distinct concrete algorithms for each of the concrete subclasses.</p>\n      <emu-table id=\"table-abstract-methods-of-environment-records\" caption=\"Abstract Methods of Environment Records\" oldids=\"table-15\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-abstract-methods-of-environment-records\">#table-abstract-methods-of-environment-records</span>: Abstract Methods of Environment Records</figcaption><span id=\"table-15\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Method\n            </th>\n            <th>\n              Purpose\n            </th>\n          </tr>\n          <tr>\n            <td>\n              HasBinding(N)\n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> has a binding for the String value <var>N</var>. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              CreateMutableBinding(N, D)\n            </td>\n            <td>\n              Create a new but uninitialized mutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be subsequently deleted.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              CreateImmutableBinding(N, S)\n            </td>\n            <td>\n              Create a new but uninitialized immutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If <var>S</var> is <emu-val>true</emu-val> then attempts to set it after it has been initialized will always throw an exception, regardless of the strict mode setting of operations that reference that binding.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              InitializeBinding(N, V)\n            </td>\n            <td>\n              Set the value of an already existing but uninitialized binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and is a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              SetMutableBinding(N, V, S)\n            </td>\n            <td>\n              Set the value of an already existing mutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and may be a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>. <var>S</var> is a Boolean flag. If <var>S</var> is <emu-val>true</emu-val> and the binding cannot be set throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              GetBindingValue(N, S)\n            </td>\n            <td>\n              Returns the value of an already existing binding from an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>S</var> is used to identify references originating in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> or that otherwise require strict mode reference semantics. If <var>S</var> is <emu-val>true</emu-val> and the binding does not exist throw a <emu-val>ReferenceError</emu-val> exception. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              DeleteBinding(N)\n            </td>\n            <td>\n              Delete a binding from an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If a binding for <var>N</var> exists, remove the binding and return <emu-val>true</emu-val>. If the binding exists but cannot be removed return <emu-val>false</emu-val>. If the binding does not exist return <emu-val>true</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              HasThisBinding()\n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> establishes a <code>this</code> binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              HasSuperBinding()\n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> establishes a <code>super</code> method binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              WithBaseObject()\n            </td>\n            <td>\n              If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is associated with a <code>with</code> statement, return the with object. Otherwise, return <emu-val>undefined</emu-val>.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n\n      <div id=\"excluded-sec-declarative-environment-records\"><h1><span class=\"secnum\">8.1.1.1</span>#sec-declarative-environment-records Declarative Environment Records</h1>...</div><div id=\"excluded-sec-object-environment-records\"><h1><span class=\"secnum\">8.1.1.2</span>#sec-object-environment-records Object Environment Records</h1>...</div><div id=\"excluded-sec-function-environment-records\"><h1><span class=\"secnum\">8.1.1.3</span>#sec-function-environment-records Function Environment Records</h1>...</div><div id=\"excluded-sec-global-environment-records\"><h1><span class=\"secnum\">8.1.1.4</span>#sec-global-environment-records Global Environment Records</h1>...</div><div id=\"excluded-sec-module-environment-records\"><h1><span class=\"secnum\">8.1.1.5</span>#sec-module-environment-records Module Environment Records</h1>...</div></emu-clause>\n\n    "}, "sec-regexp-identifier-names-static-semantics-stringvalue": {"num": "21.2.1.6", "title": "#sec-regexp-identifier-names-static-semantics-stringvalue Static Semantics: StringValue", "html": "<emu-clause id=\"sec-regexp-identifier-names-static-semantics-stringvalue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-identifier-names-static-semantics-stringvalue\">#sec-regexp-identifier-names-static-semantics-stringvalue</span> Static Semantics: StringValue</h1>\n        <emu-see-also-para op=\"StringValue\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"RegExpIdentifierName\" params=\"U\" type=\"lexical\">\n    <emu-nt params=\"U\"><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a><emu-mods><emu-params>[U]</emu-params></emu-mods></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4aeafadc\"><emu-nt params=\"?U\"><a href=\"#prod-RegExpIdentifierStart\">RegExpIdentifierStart</a><emu-mods><emu-params>[?U]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8644c18\"><emu-nt params=\"?U\"><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a><emu-mods><emu-params>[?U]</emu-params></emu-mods></emu-nt><emu-nt params=\"?U\"><a href=\"#prod-RegExpIdentifierPart\">RegExpIdentifierPart</a><emu-mods><emu-params>[?U]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>idText</var> be the source text matched by <emu-nt><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a></emu-nt>.</li><li>Let <var>idTextUnescaped</var> be the result of replacing any occurrences of <code>\\</code> <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt> in <var>idText</var> with the code point represented by the <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>idTextUnescaped</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ecmascript-standard-built-in-objects": {"num": "17", "title": "#sec-ecmascript-standard-built-in-objects ECMAScript Standard Built-in Objects", "html": "<emu-clause id=\"sec-ecmascript-standard-built-in-objects\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-standard-built-in-objects\">#sec-ecmascript-standard-built-in-objects</span> ECMAScript Standard Built-in Objects</h1>\n  <p>There are certain built-in objects available whenever an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> begins execution. One, the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, is part of the global environment of the executing program. Others are accessible as initial properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> or indirectly as properties of accessible built-in objects.</p>\n  <p>Unless specified otherwise, a built-in object that is callable as a function is a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the characteristics described in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>. Unless specified otherwise, the [[Extensible]] internal slot of a built-in object initially has the value <emu-val>true</emu-val>. Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has a [[Realm]] internal slot whose value is the <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> of the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> for which the object was initially created.</p>\n  <p>Many built-in objects are functions: they can be invoked with arguments. Some of them furthermore are constructors: they are functions intended for use with the <code>new</code> operator. For each built-in function, this specification describes the arguments required by that function and the properties of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. For each built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, this specification furthermore describes properties of the prototype object of that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and properties of specific object instances returned by a <code>new</code> expression that invokes that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is given fewer arguments than the function is specified to require, the function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> shall behave exactly as if it had been given sufficient additional arguments, each such argument being the <emu-val>undefined</emu-val> value. Such missing arguments are considered to be &#8220;not present&#8221; and may be identified in that manner by specification algorithms. In the description of a particular function, the terms &#8220;<emu-val>this</emu-val> value&#8221; and &#8220;NewTarget&#8221; have the meanings given in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> described is given more arguments than the function is specified to allow, the extra arguments are evaluated by the call and then ignored by the function. However, an implementation may define implementation specific behaviour relating to such arguments as long as the behaviour is not the throwing of a <emu-val>TypeError</emu-val> exception that is predicated simply on the presence of an extra argument.</p>\n  <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n    <p>Implementations that add additional capabilities to the set of built-in functions are encouraged to do so by adding new functions rather than adding new parameters to existing functions.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified every built-in function and every built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">Function prototype object</a></emu-xref>, which is the initial value of the expression <code>Function.prototype</code> (<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-function-prototype-object\">#sec-properties-of-the-function-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot.</p>\n  <p>Unless otherwise specified every built-in prototype object has the <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">Object prototype object</a></emu-xref>, which is the initial value of the expression <code>Object.prototype</code> (<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-object-prototype-object\">#sec-properties-of-the-object-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot, except the <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">Object prototype object</a></emu-xref> itself.</p>\n  <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function.</p>\n  <p>Each built-in function defined in this specification is created by calling the <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref> abstract operation (<emu-xref href=\"#sec-createbuiltinfunction\"><a href=\"#sec-createbuiltinfunction\" class=\"excluded-xref\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</a></emu-xref>).</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"length\"</emu-val> property whose value is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Unless otherwise specified, this value is equal to the number of required parameters shown in the subclause headings for the function description. Optional parameters and rest parameters are not included in the parameter count.</p>\n  <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n    <p>For example, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that is the initial value of the <emu-val>\"map\"</emu-val> property of the <emu-xref href=\"#sec-properties-of-the-array-prototype-object\"><a href=\"#sec-properties-of-the-array-prototype-object\">Array prototype object</a></emu-xref> is described under the subclause heading &#171;Array.prototype.map (callbackFn [ , thisArg])&#187; which shows the two named arguments callbackFn and thisArg, the latter being optional; therefore the value of the <emu-val>\"length\"</emu-val> property of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is 1.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified, the <emu-val>\"length\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"name\"</emu-val> property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are identified as anonymous functions use the empty String as the value of the <emu-val>\"name\"</emu-val> property. For functions that are specified as properties of objects, the name value is the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string used to access the function. Functions that are specified as get or set accessor functions of built-in properties have <emu-val>\"get \"</emu-val> or <emu-val>\"set \"</emu-val> prepended to the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string. The value of the <emu-val>\"name\"</emu-val> property is explicitly specified for each built-in functions whose property key is a Symbol value. The <emu-val>\"name\"</emu-val> property is set using <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>.</p>\n  <p>Unless otherwise specified, the <emu-val>\"name\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every other <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> described in clauses <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref> and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified.</p>\n  <p>Every <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> described in clauses <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref> and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, <emu-val>undefined</emu-val>. If only a set accessor is described the get accessor is the default value, <emu-val>undefined</emu-val>.</p>\n</emu-clause>\n\n"}, "sec-async-function-definitions-runtime-semantics-namedevaluation": {"num": "14.7.13", "title": "#sec-async-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-namedevaluation\">#sec-async-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-function.prototype-@@hasinstance": {"num": "19.2.3.6", "title": "#sec-function.prototype-@@hasinstance Function.prototype [ @@hasInstance ] ( V )", "html": "<emu-clause id=\"sec-function.prototype-@@hasinstance\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype-@@hasinstance\">#sec-function.prototype-@@hasinstance</span> Function.prototype [ @@hasInstance ] ( <var>V</var> )</h1>\n        <p>When the <code>@@hasInstance</code> method of an object <var>F</var> is called with value <var>V</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>F</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryHasInstance\"><a href=\"#sec-ordinaryhasinstance\">OrdinaryHasInstance</a></emu-xref>(<var>F</var>, <var>V</var>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.hasInstance]\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This is the default implementation of <code>@@hasInstance</code> that most functions inherit. <code>@@hasInstance</code> is called by the <code>instanceof</code> operator to determine whether a value is an instance of a specific <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. An expression such as</p>\n          <pre><code class=\"javascript hljs\">v <span class=\"hljs-keyword\">instanceof</span> F</code></pre>\n          <p>evaluates as</p>\n          <pre><code class=\"javascript hljs\">F[@@hasInstance](v)</code></pre>\n          <p>A <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function can control which objects are recognized as its instances by <code>instanceof</code> by exposing a different <code>@@hasInstance</code> method on the function.</p>\n        </div></emu-note>\n        <p>This property is non-writable and non-configurable to prevent tampering that could be used to globally expose the target function of a bound function.</p>\n      </emu-clause>\n    "}, "sec-preparefortailcall": {"num": "14.9.3", "title": "#sec-preparefortailcall Runtime Semantics: PrepareForTailCall ( )", "html": "<emu-clause id=\"sec-preparefortailcall\" aoid=\"PrepareForTailCall\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-preparefortailcall\">#sec-preparefortailcall</span> Runtime Semantics: PrepareForTailCall ( )</h1>\n      <p>The abstract operation PrepareForTailCall takes no arguments. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>leafContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>leafContext</var>.</li><li>Pop <var>leafContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> now on the top of the stack becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>leafContext</var> has no further use. It will never be activated as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li></ol></emu-alg>\n      <p>A tail position call must either release any transient internal resources associated with the currently executing function <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> before invoking the target function or reuse those resources in support of the target function.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For example, a tail position call should only grow an implementation's activation record stack by the amount that the size of the target function's activation record exceeds the size of the calling function's activation record. If the target function's activation record is smaller, then the total size of the stack should decrease.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.4.12", "title": "#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c5c757ac\"><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-definitions-propertydefinitionevaluation": {"num": "14.5.12", "title": "#sec-asyncgenerator-definitions-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">#sec-asyncgenerator-definitions-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameter <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be384400\"><emu-t>async</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>desc</var> be PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-arrow-function-definitions-runtime-semantics-namedevaluation": {"num": "14.8.16", "title": "#sec-async-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\">#sec-async-arrow-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7505c63a\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"694c2ff0\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>head</var> be CoveredAsyncArrowHead of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\"><span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval takes arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Set <var>inFunction</var> to <emu-val>true</emu-val>.</li><li>Set <var>inMethod</var> to <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, set <var>inDerivedConstructor</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Perform the following substeps in an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>x</var>), for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>runningContext</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>runningContext</var>'s VariableEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>runningContext</var> is not already suspended, suspend <var>runningContext</var>.</li><li>Let <var>evalContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>evalContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>evalContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set <var>evalContext</var>'s ScriptOrModule to <var>runningContext</var>'s ScriptOrModule.</li><li>Set <var>evalContext</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set <var>evalContext</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Push <var>evalContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Suspend <var>evalContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-function-definitions-InstantiateFunctionObject": {"num": "14.7.10", "title": "#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-async-function-definitions-InstantiateFunctionObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-InstantiateFunctionObject\">#sec-async-function-definitions-InstantiateFunctionObject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-asyncgeneratorresumenext": {"num": "26.5.3.5", "title": "#sec-asyncgeneratorresumenext AsyncGeneratorResumeNext ( generator )", "html": "<emu-clause id=\"sec-asyncgeneratorresumenext\" aoid=\"AsyncGeneratorResumeNext\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</span> AsyncGeneratorResumeNext ( <var>generator</var> )</h1>\n        <p>The abstract operation AsyncGeneratorResumeNext takes argument <var>generator</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>state</var> be <var>generator</var>.[[AsyncGeneratorState]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is not <emu-const>executing</emu-const>.</li><li>If <var>state</var> is <emu-const>awaiting-return</emu-const>, return <emu-val>undefined</emu-val>.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li>If <var>queue</var> is an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, return <emu-val>undefined</emu-val>.</li><li>Let <var>next</var> be the value of the first element of <var>queue</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>next</var> is an AsyncGeneratorRequest record.</li><li>Let <var>completion</var> be <var>next</var>.[[Completion]].</li><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>completion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>awaiting-return</emu-const>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>completion</var>.[[Value]]).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-fulfilled\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-fulfilled\">AsyncGeneratorResumeNext Return Processor Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onFulfilled</var>.[[Generator]] to <var>generator</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-rejected\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-rejected\">AsyncGeneratorResumeNext Return Processor Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onRejected</var>.[[Generator]] to <var>generator</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>completion</var>.[[Value]]).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li></ol></li></ol></li><li>Else if <var>state</var> is <emu-const>completed</emu-const>, return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[AsyncGeneratorContext]].</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>callerContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>completion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>callerContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-fulfilled\">\n          <h1><span class=\"secnum\">26.5.3.5.1</span> AsyncGeneratorResumeNext Return Processor Fulfilled Functions</h1>\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function has a [[Generator]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>F</var>.[[Generator]], <var>value</var>, <emu-val>true</emu-val>).</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is 1.</p>\n        </emu-clause>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-rejected\">\n          <h1><span class=\"secnum\">26.5.3.5.2</span> AsyncGeneratorResumeNext Return Processor Rejected Functions</h1>\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function has a [[Generator]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>F</var>.[[Generator]], <var>reason</var>).</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is 1.</p>\n        </emu-clause>\n      </emu-clause>\n\n      "}, "sec-static-semantics-sourcetext": {"num": "21.2.1.5", "title": "#sec-static-semantics-sourcetext Static Semantics: SourceText", "html": "<emu-clause id=\"sec-static-semantics-sourcetext\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-sourcetext\">#sec-static-semantics-sourcetext</span> Static Semantics: SourceText</h1>\n        <emu-grammar><emu-production name=\"UnicodePropertyNameCharacters\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnicodePropertyNameCharacters\">UnicodePropertyNameCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c1247f44\"><emu-nt><a href=\"#prod-UnicodePropertyNameCharacter\">UnicodePropertyNameCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-UnicodePropertyNameCharacters\">UnicodePropertyNameCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"UnicodePropertyValueCharacters\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnicodePropertyValueCharacters\">UnicodePropertyValueCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5a208aa0\"><emu-nt><a href=\"#prod-UnicodePropertyValueCharacter\">UnicodePropertyValueCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-UnicodePropertyValueCharacters\">UnicodePropertyValueCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, in source text order, of Unicode code points in the source text matched by this production.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-boundfunctioncreate": {"num": "9.4.1.3", "title": "#sec-boundfunctioncreate BoundFunctionCreate ( targetFunction, boundThis, boundArgs )", "html": "<emu-clause id=\"sec-boundfunctioncreate\" aoid=\"BoundFunctionCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-boundfunctioncreate\">#sec-boundfunctioncreate</span> BoundFunctionCreate ( <var>targetFunction</var>, <var>boundThis</var>, <var>boundArgs</var> )</h1>\n        <p>The abstract operation BoundFunctionCreate takes arguments <var>targetFunction</var>, <var>boundThis</var>, and <var>boundArgs</var>. It is used to specify the creation of new bound function exotic objects. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>targetFunction</var>) is Object.</li><li>Let <var>proto</var> be ? <var>targetFunction</var>.[[GetPrototypeOf]]().</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-bound-function-exotic-objects\"><a href=\"#table-internal-slots-of-bound-function-exotic-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-bound-function-exotic-objects\">#table-internal-slots-of-bound-function-exotic-objects</a></emu-xref>, plus [[Prototype]] and [[Extensible]].</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>obj</var>.[[Prototype]] to <var>proto</var>.</li><li>Set <var>obj</var>.[[Call]] as described in <emu-xref href=\"#sec-bound-function-exotic-objects-call-thisargument-argumentslist\"><a href=\"#sec-bound-function-exotic-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">#sec-bound-function-exotic-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>targetFunction</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>obj</var>.[[Construct]] as described in <emu-xref href=\"#sec-bound-function-exotic-objects-construct-argumentslist-newtarget\"><a href=\"#sec-bound-function-exotic-objects-construct-argumentslist-newtarget\" class=\"excluded-xref\" excluded-id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">#sec-bound-function-exotic-objects-construct-argumentslist-newtarget</a></emu-xref>.</li></ol></li><li>Set <var>obj</var>.[[BoundTargetFunction]] to <var>targetFunction</var>.</li><li>Set <var>obj</var>.[[BoundThis]] to <var>boundThis</var>.</li><li>Set <var>obj</var>.[[BoundArguments]] to <var>boundArgs</var>.</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-function-definitions-PropertyDefinitionEvaluation": {"num": "14.7.12", "title": "#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">#sec-async-function-definitions-PropertyDefinitionEvaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"759e5682\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions": {"num": "F", "title": "#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions Additions and Changes That Introduce Incompatibilities with Prior Editions", "html": "<emu-annex id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions</span> Additions and Changes That Introduce Incompatibilities with Prior Editions</h1>\n  <p><emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\" class=\"excluded-xref\" excluded-id=\"sec-reference-specification-type\">#sec-reference-specification-type</a></emu-xref>: In ECMAScript 2015, Function calls are not allowed to return a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> value.</p>\n  <p><emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>: In ECMAScript 2015, <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> applied to a String value now recognizes and converts <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> and <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> numeric strings. In previous editions such strings were converted to <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-code-realms\"><a href=\"#sec-code-realms\" class=\"excluded-xref\" excluded-id=\"sec-code-realms\">#sec-code-realms</a></emu-xref>: In ECMAScript 2018, Template objects are canonicalized based on <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> (source location), instead of across all occurrences of that template literal or tagged template in a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> in previous editions.</p>\n  <p><emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\" class=\"excluded-xref\" excluded-id=\"sec-white-space\">#sec-white-space</a></emu-xref>: In ECMASCript 2016, Unicode 8.0.0 or higher is mandated, as opposed to ECMAScript 2015 which mandated Unicode 5.1. In particular, this caused U+180E MONGOLIAN VOWEL SEPARATOR, which was in the <code>Space_Separator</code> (<code>Zs</code>) category and thus treated as whitespace in ECMAScript 2015, to be moved to the <code>Format</code> (<code>Cf</code>) category (as of Unicode 6.3.0). This causes whitespace-sensitive methods to behave differently. For example, <code>\"\\u180E\".trim().length</code> was <code>0</code> in previous editions, but <code>1</code> in ECMAScript 2016 and later. Additionally, ECMAScript 2017 mandated always using the latest version of the Unicode standard.</p>\n  <p><emu-xref href=\"#sec-names-and-keywords\"><a href=\"#sec-names-and-keywords\" class=\"excluded-xref\" excluded-id=\"sec-names-and-keywords\">#sec-names-and-keywords</a></emu-xref>: In ECMAScript 2015, the valid code points for an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are specified in terms of the Unicode properties &#8220;ID_Start&#8221; and &#8220;ID_Continue&#8221;. In previous editions, the valid <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> or <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> code points were specified by enumerating various Unicode code point categories.</p>\n  <p><emu-xref href=\"#sec-rules-of-automatic-semicolon-insertion\"><a href=\"#sec-rules-of-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</a></emu-xref>: In ECMAScript 2015, Automatic Semicolon Insertion adds a semicolon at the end of a do-while statement if the semicolon is missing. This change aligns the specification with the actual behaviour of most existing implementations.</p>\n  <p><emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, it is no longer an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> to have duplicate property names in Object Initializers.</p>\n  <p><emu-xref href=\"#sec-assignment-operators-static-semantics-early-errors\"><a href=\"#sec-assignment-operators-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators-static-semantics-early-errors\">#sec-assignment-operators-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> containing an assignment to an immutable binding such as the function name of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> does not produce an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>. Instead it produces a runtime error.</p>\n  <p><emu-xref href=\"#sec-block\"><a href=\"#sec-block\" class=\"excluded-xref\" excluded-id=\"sec-block\">#sec-block</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> beginning with the token let followed by the input elements <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> then <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions, automatic semicolon insertion would always insert a semicolon before the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> input element.</p>\n  <p><emu-xref href=\"#sec-expression-statement\"><a href=\"#sec-expression-statement\" class=\"excluded-xref\" excluded-id=\"sec-expression-statement\">#sec-expression-statement</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> beginning with the token <code>let</code> followed by the token <code>[</code> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a sequence would be the start of an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-if-statement-runtime-semantics-evaluation\"><a href=\"#sec-if-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-if-statement-runtime-semantics-evaluation\">#sec-if-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of an <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If no <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part is evaluated or if the evaluated <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the <code>(</code> token of a for statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the ( token of a for-in statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: Prior to ECMAScript 2015, an initialization expression could appear as part of the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> that precedes the <code>in</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>. In ECMAScript 2015, the <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> in that same position does not allow the occurrence of such an initializer. In ECMAScript 2017, such an initializer is permitted only in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, the completion value of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is not evaluated or if the final evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-with-statement-runtime-semantics-evaluation\"><a href=\"#sec-with-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-switch-statement-runtime-semantics-evaluation\"><a href=\"#sec-switch-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-runtime-semantics-evaluation\">#sec-switch-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> part of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>: In ECMAScript 2015, it is an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause to contain a <code>var</code> declaration for the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter. In previous editions, such a variable declaration would be instantiated in the enclosing variable environment but the declaration's <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> value would be assigned to the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>, <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref>: In ECMAScript 2015, a runtime <emu-val>SyntaxError</emu-val> is thrown if a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause evaluates a non-strict direct <code>eval</code> whose eval code includes a <code>var</code> or <code>FunctionDeclaration</code> declaration that binds the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement-runtime-semantics-evaluation\"><a href=\"#sec-try-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-runtime-semantics-evaluation\">#sec-try-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a throw completion and it has a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> part that evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val> if there is no <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause or if its <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause evaluates to an <emu-const>empty</emu-const> normal completion.</p>\n  <p><emu-xref href=\"#sec-method-definitions-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-method-definitions-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</a></emu-xref> In ECMAScript 2015, the function objects that are created as the values of the [[Get]] or [[Set]] attribute of accessor properties in an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> are not <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> functions and they do not have a <emu-val>\"prototype\"</emu-val> own property. In the previous edition, they were constructors and had a <emu-val>\"prototype\"</emu-val> property.</p>\n  <p><emu-xref href=\"#sec-object.freeze\"><a href=\"#sec-object.freeze\" class=\"excluded-xref\" excluded-id=\"sec-object.freeze\">#sec-object.freeze</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.freeze</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertydescriptor\"><a href=\"#sec-object.getownpropertydescriptor\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertydescriptor\">#sec-object.getownpropertydescriptor</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyDescriptor</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertynames\"><a href=\"#sec-object.getownpropertynames\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertynames\">#sec-object.getownpropertynames</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyNames</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getprototypeof\"><a href=\"#sec-object.getprototypeof\" class=\"excluded-xref\" excluded-id=\"sec-object.getprototypeof\">#sec-object.getprototypeof</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getPrototypeOf</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isextensible\"><a href=\"#sec-object.isextensible\" class=\"excluded-xref\" excluded-id=\"sec-object.isextensible\">#sec-object.isextensible</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isExtensible</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isfrozen\"><a href=\"#sec-object.isfrozen\" class=\"excluded-xref\" excluded-id=\"sec-object.isfrozen\">#sec-object.isfrozen</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isFrozen</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.issealed\"><a href=\"#sec-object.issealed\" class=\"excluded-xref\" excluded-id=\"sec-object.issealed\">#sec-object.issealed</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isSealed</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.keys\"><a href=\"#sec-object.keys\" class=\"excluded-xref\" excluded-id=\"sec-object.keys\">#sec-object.keys</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.keys</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.preventextensions\"><a href=\"#sec-object.preventextensions\" class=\"excluded-xref\" excluded-id=\"sec-object.preventextensions\">#sec-object.preventextensions</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.preventExtensions</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.seal\"><a href=\"#sec-object.seal\" class=\"excluded-xref\" excluded-id=\"sec-object.seal\">#sec-object.seal</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.seal</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-function.prototype.bind\"><a href=\"#sec-function.prototype.bind\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.bind\">#sec-function.prototype.bind</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a bound function is set to the [[GetPrototypeOf]] value of its target function. In the previous edition, [[Prototype]] was always set to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-function-instances-length\"><a href=\"#sec-function-instances-length\" class=\"excluded-xref\" excluded-id=\"sec-function-instances-length\">#sec-function-instances-length</a></emu-xref>: In ECMAScript 2015, the <emu-val>\"length\"</emu-val> property of function instances is configurable. In previous editions it was non-configurable.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-nativeerror-constructors\"><a href=\"#sec-properties-of-the-nativeerror-constructors\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-nativeerror-constructors\">#sec-properties-of-the-nativeerror-constructors</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is the Error <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. In previous editions it was the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">Function prototype object</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-date-prototype-object\">#sec-properties-of-the-date-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\">Date prototype object</a></emu-xref> is not a Date instance. In previous editions it was a Date instance whose TimeValue was <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.localeCompare</code> function must treat Strings that are canonically equivalent according to the Unicode standard as being identical. In previous editions implementations were permitted to ignore canonical equivalence and could instead use a bit-wise comparison.</p>\n  <p><emu-xref href=\"#sec-string.prototype.tolowercase\"><a href=\"#sec-string.prototype.tolowercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.tolowercase\">#sec-string.prototype.tolowercase</a></emu-xref> and <emu-xref href=\"#sec-string.prototype.touppercase\"><a href=\"#sec-string.prototype.touppercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.touppercase\">#sec-string.prototype.touppercase</a></emu-xref> In ECMAScript 2015, lowercase/upper conversion processing operates on code points. In previous editions such the conversion processing was only applied to individual code units. The only affected code points are those in the Deseret block of Unicode.</p>\n  <p><emu-xref href=\"#sec-string.prototype.trim\"><a href=\"#sec-string.prototype.trim\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.trim</code> method is defined to recognize white space code points that may exists outside of the Unicode BMP. However, as of Unicode 7 no such code points are defined. In previous editions such code points would not have been recognized as white space.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref> In ECMAScript 2015, If the <var>pattern</var> argument is a RegExp instance and the <var>flags</var> argument is not <emu-val>undefined</emu-val>, a new RegExp instance is created just like <var>pattern</var> except that <var>pattern</var>'s flags are replaced by the argument <var>flags</var>. In previous editions a <emu-val>TypeError</emu-val> exception was thrown when <var>pattern</var> was a RegExp instance and <var>flags</var> was not <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref> is not a RegExp instance. In previous editions it was a RegExp instance whose pattern is the empty String.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, <emu-val>\"source\"</emu-val>, <emu-val>\"global\"</emu-val>, <emu-val>\"ignoreCase\"</emu-val>, and <emu-val>\"multiline\"</emu-val> are accessor properties defined on the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref>. In previous editions they were data properties defined on RegExp instances.</p>\n  <p><emu-xref href=\"#sec-atomics.notify\"><a href=\"#sec-atomics.notify\" class=\"excluded-xref\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</a></emu-xref>: In ECMAScript 2019, <code>Atomics.wake</code> has been renamed to <code>Atomics.notify</code> to prevent confusion with <code>Atomics.wait</code>.</p>\n  <p><emu-xref href=\"#sec-asyncfromsynciteratorcontinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\" class=\"excluded-xref\" excluded-id=\"sec-asyncfromsynciteratorcontinuation\">#sec-asyncfromsynciteratorcontinuation</a></emu-xref>, <emu-xref href=\"#sec-asyncgeneratorresumenext\"><a href=\"#sec-asyncgeneratorresumenext\" class=\"excluded-xref\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</a></emu-xref>: In ECMAScript 2019, the number of Jobs enqueued by <code>await</code> was reduced, which could create an observable difference in resolution order between a <code>then()</code> call and an <code>await</code> expression.</p>\n</emu-annex>\n"}, "sec-runtime-semantics-bindingclassdeclarationevaluation": {"num": "14.6.15", "title": "#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\">#sec-runtime-semantics-bindingclassdeclarationevaluation</span> Runtime Semantics: BindingClassDeclarationEvaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>className</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<var>className</var>, <var>value</var>, <var>env</var>).</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <emu-val>\"default\"</emu-val>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and establishing its binding is handled as part of the evaluation action for that production. See <emu-xref href=\"#sec-exports-runtime-semantics-evaluation\"><a href=\"#sec-exports-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-exports-runtime-semantics-evaluation\">#sec-exports-runtime-semantics-evaluation</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-class-definitions-runtime-semantics-evaluation": {"num": "14.6.17", "title": "#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-evaluation\">#sec-class-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Perform ? BindingClassDeclarationEvaluation of this <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and is never directly evaluated.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <emu-val>\"\"</emu-val>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>className</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.1.23", "title": "#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-namedevaluation": {"num": "14.4.13", "title": "#sec-generator-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-namedevaluation\">#sec-generator-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-completion-record-fields": "Table 9", "table-abstract-methods-of-environment-records": "Table 16", "table-realm-record-fields": "Table 22", "table-internal-slots-of-bound-function-exotic-objects": "Table 29"}}}