{"from": {"secList": ["sec-asi-interesting-cases-in-statement-lists", "sec-evaluate-identifier-key-property-access", "sec-evaluate-expression-key-property-access"], "secData": {"sec-asi-interesting-cases-in-statement-lists": {"num": "11.10.1", "title": "#sec-asi-interesting-cases-in-statement-lists Interesting Cases of Automatic Semicolon Insertion in Statement Lists", "html": "<emu-clause id=\"sec-asi-interesting-cases-in-statement-lists\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asi-interesting-cases-in-statement-lists\">#sec-asi-interesting-cases-in-statement-lists</span> Interesting Cases of Automatic Semicolon Insertion in Statement Lists</h1>\n      <p>In a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>, many <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>s end in semicolons, which may be omitted using automatic semicolon insertion. As a consequence of the rules above, at the end of a line ending an expression, a semicolon is required if the following line begins with any of the following:\n      \n      </p><ul>\n        <li><strong>An opening parenthesis (<code>(</code>)</strong>. Without a semicolon, the two lines together are treated as a <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li>\n        <li><strong>An opening square bracket (<code>[</code>)</strong>. Without a semicolon, the two lines together are treated as property access, rather than an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or <emu-nt><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a></emu-nt>.</li>\n        <li><strong>A template literal (<code>`</code>)</strong>. Without a semicolon, the two lines together are interpreted as a tagged Template (<emu-xref href=\"#sec-tagged-templates\"><a href=\"#sec-tagged-templates\" class=\"excluded-xref\" excluded-id=\"sec-tagged-templates\">#sec-tagged-templates</a></emu-xref>), with the previous expression as the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li>\n        <li><strong>Unary  <code>+</code> or  <code>-</code></strong>. Without a semicolon, the two lines together are interpreted as a usage of the corresponding binary operator.</li>\n        <li><strong>A RegExp literal</strong>. Without a semicolon, the two lines together may be parsed instead as the <code>/</code> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt>, for example if the RegExp has flags.</li>\n      </ul>\n    </emu-clause>\n  "}, "sec-evaluate-identifier-key-property-access": {"num": "12.3.4", "title": "#sec-evaluate-identifier-key-property-access Runtime Semantics: EvaluatePropertyAccessWithIdentifierKey( baseValue, identifierName, strict )", "html": "<emu-clause id=\"sec-evaluate-identifier-key-property-access\" aoid=\"EvaluatePropertyAccessWithIdentifierKey\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluate-identifier-key-property-access\">#sec-evaluate-identifier-key-property-access</span> Runtime Semantics: EvaluatePropertyAccessWithIdentifierKey( <var>baseValue</var>, <var>identifierName</var>, <var>strict</var> )</h1>\n      <p>The abstract operation EvaluatePropertyAccessWithIdentifierKey takes as arguments a value <var>baseValue</var>, a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>identifierName</var>, and a Boolean argument <var>strict</var>. It performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>identifierName</var> is an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyNameString</var> be StringValue of <var>identifierName</var>.</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyNameString</var>, and whose strict reference flag is <var>strict</var>.\n    </li></ol></emu-alg></emu-clause>\n\n    "}, "sec-evaluate-expression-key-property-access": {"num": "12.3.3", "title": "#sec-evaluate-expression-key-property-access Runtime Semantics: EvaluatePropertyAccessWithExpressionKey( baseValue, expression, strict )", "html": "<emu-clause id=\"sec-evaluate-expression-key-property-access\" aoid=\"EvaluatePropertyAccessWithExpressionKey\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluate-expression-key-property-access\">#sec-evaluate-expression-key-property-access</span> Runtime Semantics: EvaluatePropertyAccessWithExpressionKey( <var>baseValue</var>, <var>expression</var>, <var>strict</var> )</h1>\n      <p>The abstract operation EvaluatePropertyAccessWithExpressionKey takes as arguments a value <var>baseValue</var>, a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>expression</var>, and a Boolean argument <var>strict</var>. It performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>propertyNameReference</var> be the result of evaluating <var>expression</var>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyKey</var>, and whose strict reference flag is <var>strict</var>.\n    </li></ol></emu-alg></emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-asi-interesting-cases-in-statement-lists", "sec-evaluate-identifier-key-property-access", "sec-evaluate-expression-key-property-access"], "secData": {"sec-asi-interesting-cases-in-statement-lists": {"num": "11.10.1", "title": "#sec-asi-interesting-cases-in-statement-lists Interesting Cases of Automatic Semicolon Insertion in Statement Lists", "html": "<emu-clause id=\"sec-asi-interesting-cases-in-statement-lists\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asi-interesting-cases-in-statement-lists\">#sec-asi-interesting-cases-in-statement-lists</span> Interesting Cases of Automatic Semicolon Insertion in Statement Lists</h1>\n      <p>In a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>, many <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>s end in semicolons, which may be omitted using automatic semicolon insertion. As a consequence of the rules above, at the end of a line ending an expression, a semicolon is required if the following line begins with any of the following:</p>\n      <ul>\n        <li><strong>An opening parenthesis (<code>(</code>)</strong>. Without a semicolon, the two lines together are treated as a <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li>\n        <li><strong>An opening square bracket (<code>[</code>)</strong>. Without a semicolon, the two lines together are treated as property access, rather than an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or <emu-nt><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a></emu-nt>.</li>\n        <li><strong>A template literal (<code>`</code>)</strong>. Without a semicolon, the two lines together are interpreted as a tagged Template (<emu-xref href=\"#sec-tagged-templates\"><a href=\"#sec-tagged-templates\" class=\"excluded-xref\" excluded-id=\"sec-tagged-templates\">#sec-tagged-templates</a></emu-xref>), with the previous expression as the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li>\n        <li><strong>Unary  <code>+</code> or  <code>-</code></strong>. Without a semicolon, the two lines together are interpreted as a usage of the corresponding binary operator.</li>\n        <li><strong>A RegExp literal</strong>. Without a semicolon, the two lines together may be parsed instead as the <code>/</code> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt>, for example if the RegExp has flags.</li>\n      </ul>\n    </emu-clause>\n  "}, "sec-evaluate-identifier-key-property-access": {"num": "12.3.4", "title": "#sec-evaluate-identifier-key-property-access Runtime Semantics: EvaluatePropertyAccessWithIdentifierKey( baseValue, identifierName, strict )", "html": "<emu-clause id=\"sec-evaluate-identifier-key-property-access\" aoid=\"EvaluatePropertyAccessWithIdentifierKey\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluate-identifier-key-property-access\">#sec-evaluate-identifier-key-property-access</span> Runtime Semantics: EvaluatePropertyAccessWithIdentifierKey( <var>baseValue</var>, <var>identifierName</var>, <var>strict</var> )</h1>\n      <p>The abstract operation EvaluatePropertyAccessWithIdentifierKey takes as arguments a value <var>baseValue</var>, a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>identifierName</var>, and a Boolean argument <var>strict</var>. It performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>identifierName</var> is an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyNameString</var> be StringValue of <var>identifierName</var>.</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyNameString</var>, and whose strict reference flag is <var>strict</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-evaluate-expression-key-property-access": {"num": "12.3.3", "title": "#sec-evaluate-expression-key-property-access Runtime Semantics: EvaluatePropertyAccessWithExpressionKey( baseValue, expression, strict )", "html": "<emu-clause id=\"sec-evaluate-expression-key-property-access\" aoid=\"EvaluatePropertyAccessWithExpressionKey\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluate-expression-key-property-access\">#sec-evaluate-expression-key-property-access</span> Runtime Semantics: EvaluatePropertyAccessWithExpressionKey( <var>baseValue</var>, <var>expression</var>, <var>strict</var> )</h1>\n      <p>The abstract operation EvaluatePropertyAccessWithExpressionKey takes as arguments a value <var>baseValue</var>, a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>expression</var>, and a Boolean argument <var>strict</var>. It performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>propertyNameReference</var> be the result of evaluating <var>expression</var>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyKey</var>, and whose strict reference flag is <var>strict</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n    "}}, "figData": {}}}