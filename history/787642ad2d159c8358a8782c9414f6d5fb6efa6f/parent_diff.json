{"from": {"secList": ["sec-mathematical-operations", "sec-numerictorawbytes", "sec-terms-and-definitions-nan", "sec-numeric-types-number-divide", "sec-number.min_value", "sec-maketime", "sec-ecmascript-language-types-number-type", "sec-bibliography", "sec-terms-and-definitions-number-value", "sec-numeric-types-number-remainder", "sec-rawbytestonumeric", "sec-numeric-types-number-exponentiate", "sec-numeric-types-number-multiply", "sec-math.fround", "sec-function-properties-of-the-math-object", "sec-numeric-types-number-add"], "secData": {"sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to two kinds of numeric values:</p>\n      <ul>\n        <li><em>Number</em>: IEEE 754-2008 double-precision floating point values, used as the default numeric type.</li>\n        <li><em><emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">Mathematical value</a></emu-xref></em>: Arbitrary real numbers, used for specific situations.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values and operations (including addition, subtraction, negation, multiplication, division, and comparison) are distinguished among different numeric kinds using subscripts. The subscript  <sub><dfn id=\"&#120125;\">&#120125;</dfn></sub> refers to Numbers, and the subscript  <sub><dfn id=\"&#8477;\">&#8477;</dfn></sub> refers to mathematical values. A subscript is used following each numeric value and operation.</p>\n      <p>For brevity, the  <sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub> subscript can be omitted on Number values&#8212;a numeric value with no subscript is interpreted to be a Number. An operation with no subscript is interpreted to be a Number operation, unless one of the parameters has a particular subscript, in which case the operation adopts that subscript. For example, 1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> + 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> = 3<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> is a statement about mathematical values, and 1 + 2 = 3 is a statement about Numbers.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a Number. Phrases which refer to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> are explicitly annotated as such; for example, \"the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in ...\".</p>\n      <p>It is not defined to mix Numbers and mathematical values in either arithmetic or comparison operations, and any such undefined operation would be an editorial error in this specification text.</p>\n      <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> 0, alternatively written 0<sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub>, is defined as the double-precision floating point positive zero value. In certain contexts, it may also be written as <emu-val>+0</emu-val> for clarity.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>In certain contexts, an operation is specified which is generic between Numbers and mathematical values. In these cases, the subscript can be a variable; <var>t</var> is often used for this purpose, for example 5<sub><var>t</var></sub> &#215; 10<sub><var>t</var></sub> = 50<sub><var>t</var></sub> for any <var>t</var> ranging over <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref> and <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>, since the values involved are within the range where the semantics coincide.</p>\n      <p>Conversions between mathematical values and numbers are never implicit, and always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\", and is defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from a Number to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the  <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). Note that the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined, and the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val> and <emu-val>-0</emu-val> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.</p>\n      <p>When the term  <dfn id=\"integer\">integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers, unless otherwise stated: when the term  <dfn id=\"mathematical integer\">mathematical integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers. As shorthand, <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> can be used to refer to either of the two, as determined by <var>t</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is  <emu-eqn class=\"inline\">-<sub><var>t</var></sub><var>x</var></emu-eqn> if <var>x</var> &lt;<sub><var>t</var></sub> 0<sub><var>t</var></sub> and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function  <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions include <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo<sub><var>t</var></sub> <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that  <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>k</var>) &lt;<sub><var>t</var></sub> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>y</var>) and <var>x</var>-<sub><var>t</var></sub><var>k</var> = <var>q</var> &#215;<sub><var>t</var></sub> <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> <var>q</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> (closest to positive infinity) that is not larger than <var>x</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref><sub><var>t</var></sub>(<var>x</var>) = <var>x</var> -<sub><var>t</var></sub> (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref><sub><var>t</var></sub> 1<sub><var>t</var></sub>)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n    "}, "sec-numerictorawbytes": {"num": "24.1.1.11", "title": "#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )", "html": "<emu-clause id=\"sec-numerictorawbytes\" aoid=\"NumericToRawBytes\" oldids=\"sec-numbertorawbytes\">\n        <span id=\"sec-numbertorawbytes\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numerictorawbytes\">#sec-numerictorawbytes</span> NumericToRawBytes ( <var>type</var>, <var>value</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation NumericToRawBytes takes three parameters, a TypedArray element type <var>type</var>, a BigInt or a Number <var>value</var>, and a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 4 bytes that are the result of converting <var>value</var> to IEEE 754-2008 binary32 format using roundTiesToEven mode. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen IEEE 754-2008 binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else if <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 8 bytes that are the IEEE 754-2008 binary64 format encoding of <var>value</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen IEEE 754-2008 binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>convOp</var> be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>intValue</var> be <var>convOp</var>(<var>value</var>) treated as a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>, whether the result is a BigInt or Number.</li><li>If <var>intValue</var> &#8805; 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li><li>Else,<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary 2's complement encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li></ol></li><li>Return <var>rawBytes</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-terms-and-definitions-nan": {"num": "4.3.24", "title": "#sec-terms-and-definitions-nan NaN", "html": "<emu-clause id=\"sec-terms-and-definitions-nan\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-terms-and-definitions-nan\">#sec-terms-and-definitions-nan</span> NaN</h1>\n      <p><emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that is an IEEE 754-2008 &#8220;Not-a-Number&#8221; value</p>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-divide": {"num": "6.1.6.1.5", "title": "#sec-numeric-types-number-divide Number::divide ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-divide\" oldids=\"sec-applying-the-div-operator\">\n          <span id=\"sec-applying-the-div-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-divide\">#sec-numeric-types-number-divide</span> Number::divide ( <var>x</var>, <var>y</var> )</h1>\n          <p>The <code>/</code> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> performs division, producing the quotient of <var>x</var> and <var>y</var>. <var>x</var> is the dividend and <var>y</var> is the divisor. ECMAScript does not perform <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> division. The operands and result of all division operations are double-precision floating-point numbers. The result of division is determined by the specification of IEEE 754-2008 arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n            \n            </li>\n            <li>\n              Division of an infinity by an infinity results in <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              Division of an infinity by a zero results in an infinity. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              Division of an infinity by a nonzero finite value results in a signed infinity. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              Division of a finite value by an infinity results in zero. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              Division of a zero by a zero results in <emu-val>NaN</emu-val>; division of zero by any other finite value results in zero, with the sign determined by the rule already stated above.\n            \n            </li>\n            <li>\n              Division of a nonzero finite value by a zero results in a signed infinity. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, the quotient is computed and rounded to the nearest representable value using IEEE 754-2008 roundTiesToEven mode. If the magnitude is too large to represent, the operation overflows; the result is then an infinity of appropriate sign. If the magnitude is too small to represent, the operation underflows and the result is a zero of the appropriate sign. The ECMAScript language requires support of gradual underflow as defined by IEEE 754-2008.\n            \n            </li>\n          </ul>\n        </emu-clause>\n\n        "}, "sec-number.min_value": {"num": "20.1.2.9", "title": "#sec-number.min_value Number.MIN_VALUE", "html": "<emu-clause id=\"sec-number.min_value\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.min_value\">#sec-number.min_value</span> Number.MIN_VALUE</h1>\n        <p>The value of <code>Number.MIN_VALUE</code> is the smallest positive value of the Number type, which is approximately  <emu-eqn class=\"inline\">5 &#215; 10<sup>-324</sup></emu-eqn>.</p>\n        <p>In the IEEE 754-2008 double precision binary representation, the smallest possible value is a denormalized number. If an implementation does not support denormalized values, the value of <code>Number.MIN_VALUE</code> must be the smallest non-zero positive value that can actually be represented by the implementation.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-maketime": {"num": "20.4.1.11", "title": "#sec-maketime MakeTime ( hour, min, sec, ms )", "html": "<emu-clause id=\"sec-maketime\" aoid=\"MakeTime\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-maketime\">#sec-maketime</span> MakeTime ( <var>hour</var>, <var>min</var>, <var>sec</var>, <var>ms</var> )</h1>\n        <p>The abstract operation MakeTime calculates a number of milliseconds from its four arguments, which must be ECMAScript Number values. This operator functions as follows:</p>\n        <emu-alg><ol><li>If <var>hour</var> is not finite or <var>min</var> is not finite or <var>sec</var> is not finite or <var>ms</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Let <var>h</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>hour</var>).</li><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>min</var>).</li><li>Let <var>s</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>sec</var>).</li><li>Let <var>milli</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>ms</var>).</li><li>Let <var>t</var> be <var>h</var> <code>*</code> <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref> <code>+</code> <var>m</var> <code>*</code> <emu-xref aoid=\"msPerMinute\"><a href=\"#eqn-msPerMinute\">msPerMinute</a></emu-xref> <code>+</code> <var>s</var> <code>*</code> <emu-xref aoid=\"msPerSecond\"><a href=\"#eqn-msPerSecond\">msPerSecond</a></emu-xref> <code>+</code> <var>milli</var>, performing the arithmetic according to IEEE 754-2008 rules (that is, as if using the ECMAScript operators <code>*</code> and <code>+</code>).</li><li>Return <var>t</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ecmascript-language-types-number-type": {"num": "6.1.6.1", "title": "#sec-ecmascript-language-types-number-type The Number Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-number-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</span> The Number Type</h1>\n        <p>The Number type has exactly 18437736874454810627<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> + 3<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) values, representing the double-precision 64-bit format IEEE 754-2008 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9007199254740990<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) distinct &#8220;Not-a-Number&#8221; values of the IEEE Standard are represented in ECMAScript as a single special <emu-val>NaN</emu-val> value. (Note that the <emu-val>NaN</emu-val> value is produced by the program expression <code>NaN</code>.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is implementation-dependent; to ECMAScript code, all <emu-val>NaN</emu-val> values are indistinguishable from each other.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The bit pattern that might be observed in an ArrayBuffer (see  <emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>) or a SharedArrayBuffer (see  <emu-xref href=\"#sec-sharedarraybuffer-objects\"><a href=\"#sec-sharedarraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-sharedarraybuffer-objects\">#sec-sharedarraybuffer-objects</a></emu-xref>) after a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> has been stored into it is not necessarily the same as the internal representation of that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> used by the ECMAScript implementation.</p>\n        </div></emu-note>\n        <p>There are two other special values, called <emu-val>positive Infinity</emu-val> and <emu-val>negative Infinity</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>, respectively. (Note that these two infinite Number values are produced by the program expressions <code>+Infinity</code> (or simply <code>Infinity</code>) and <code>-Infinity</code>.)</p>\n        <p>The other 18437736874454810624<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>) values are called the finite numbers. Half of these are positive numbers and half are negative numbers; for every finite positive <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> there is a corresponding negative value having the same magnitude.</p>\n        <p>Note that there is both a <emu-val>positive zero</emu-val> and a <emu-val>negative zero</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+0</emu-val> and <emu-val>-0</emu-val>, respectively. (Note that these two different zero Number values are produced by the program expressions <code>+0</code> (or simply <code>0</code>) and <code>-0</code>.)</p>\n        <p>The 18437736874454810622<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) finite nonzero values are of two kinds:</p>\n        <p>18428729675200069632<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>54<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>) of them are normalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> or -1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> but not less than 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>52<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup>, and <var>e</var> is a <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> ranging from -1074<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> to 971<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, inclusive.</p>\n        <p>The remaining 9007199254740990<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) values are denormalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> or -1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>52<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup>, and <var>e</var> is -1074<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.</p>\n        <p>Note that all the positive and negative mathematical integers whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type (indeed, the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> 0 has two representations, <emu-val>+0</emu-val> and <emu-val>-0</emu-val>).</p>\n        <p>A finite number has an  <em>odd significand</em> if it is nonzero and the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> <var>m</var> used to express it (in one of the two forms shown above) is odd. Otherwise, it has an  <em>even significand</em>.</p>\n        <p>In this specification, the phrase &#8220;the  <dfn id=\"number-value\">Number value</dfn> for <var>x</var>&#8221; where <var>x</var> represents an exact real mathematical quantity (which might even be an irrational number such as &#960;) means a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> chosen in the following manner. Consider the set of all finite values of the Number type, with <emu-val>-0</emu-val> removed and with two additional values added to it that are not representable in the Number type, namely 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> (which is  <emu-eqn class=\"inline\">+1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>971<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>) and  <emu-eqn class=\"inline\">-2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn> (which is  <emu-eqn class=\"inline\">-1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>971<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>). Choose the member of this set that is closest in value to <var>x</var>. If two values of the set are equally close, then the one with an even significand is chosen; for this purpose, the two extra values 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> and  <emu-eqn class=\"inline\">-2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn> are considered to have even significands. Finally, if 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> was chosen, replace it with <emu-val>+&#8734;</emu-val>; if  <emu-eqn class=\"inline\">-2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn> was chosen, replace it with <emu-val>-&#8734;</emu-val>; if <emu-val>+0</emu-val> was chosen, replace it with <emu-val>-0</emu-val> if and only if <var>x</var> is less than zero; any other chosen value is used unchanged. The result is the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>. (This procedure corresponds exactly to the behaviour of the IEEE 754-2008 roundTiesToEven mode.)</p>\n        <p>Some ECMAScript operators deal only with integers in specific ranges such as  <emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn> through  <emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>, inclusive, or in the range 0 through  <emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>, inclusive. These operators accept any value of the Number type but first convert each such value to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the expected range. See the descriptions of the numeric conversion operations in  <emu-xref href=\"#sec-type-conversion\"><a href=\"#sec-type-conversion\" class=\"excluded-xref\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</a></emu-xref>.</p>\n\n        <p>The Number::unit value is <emu-val>1</emu-val>.</p>\n\n        <div id=\"excluded-sec-numeric-types-number-unaryMinus\"><h1><span class=\"secnum\">6.1.6.1.1</span>#sec-numeric-types-number-unaryMinus Number::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.1.2</span>#sec-numeric-types-number-bitwiseNOT Number::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-exponentiate\"><h1><span class=\"secnum\">6.1.6.1.3</span>#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-number-multiply\"><h1><span class=\"secnum\">6.1.6.1.4</span>#sec-numeric-types-number-multiply Number::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-divide\"><h1><span class=\"secnum\">6.1.6.1.5</span>#sec-numeric-types-number-divide Number::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-remainder\"><h1><span class=\"secnum\">6.1.6.1.6</span>#sec-numeric-types-number-remainder Number::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-number-add\"><h1><span class=\"secnum\">6.1.6.1.7</span>#sec-numeric-types-number-add Number::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-subtract\"><h1><span class=\"secnum\">6.1.6.1.8</span>#sec-numeric-types-number-subtract Number::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-leftShift\"><h1><span class=\"secnum\">6.1.6.1.9</span>#sec-numeric-types-number-leftShift Number::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-signedRightShift\"><h1><span class=\"secnum\">6.1.6.1.10</span>#sec-numeric-types-number-signedRightShift Number::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.1.11</span>#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-lessThan\"><h1><span class=\"secnum\">6.1.6.1.12</span>#sec-numeric-types-number-lessThan Number::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-equal\"><h1><span class=\"secnum\">6.1.6.1.13</span>#sec-numeric-types-number-equal Number::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValue\"><h1><span class=\"secnum\">6.1.6.1.14</span>#sec-numeric-types-number-sameValue Number::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValueZero\"><h1><span class=\"secnum\">6.1.6.1.15</span>#sec-numeric-types-number-sameValueZero Number::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-numberbitwiseop\"><h1><span class=\"secnum\">6.1.6.1.16</span>#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.1.17</span>#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.1.18</span>#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.1.19</span>#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-tostring\"><h1><span class=\"secnum\">6.1.6.1.20</span>#sec-numeric-types-number-tostring Number::toString ( x )</h1>...</div></emu-clause>\n\n      "}, "sec-bibliography": {"num": "G", "title": "#sec-bibliography Bibliography", "html": "<emu-annex id=\"sec-bibliography\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bibliography\">#sec-bibliography</span> Bibliography</h1>\n  <ol>\n    <li>\n      IEEE Std 754-2008:  <i>IEEE Standard for Floating-Point Arithmetic</i>. Institute of Electrical and Electronic Engineers, New York (2008)\n    \n    </li>\n    <li>\n      <i>The Unicode Standard</i>, available at &lt;<a href=\"https://unicode.org/versions/latest\">https://unicode.org/versions/latest</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Note #5: Canonical Equivalence in Applications</i>, available at &lt;<a href=\"https://unicode.org/notes/tn5/\">https://unicode.org/notes/tn5/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Standard #10: Unicode Collation Algorithm</i>, available at &lt;<a href=\"https://unicode.org/reports/tr10/\">https://unicode.org/reports/tr10/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #15, Unicode Normalization Forms</i>, available at &lt;<a href=\"https://unicode.org/reports/tr15/\">https://unicode.org/reports/tr15/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #18: Unicode Regular Expressions</i>, available at &lt;<a href=\"https://unicode.org/reports/tr18/\">https://unicode.org/reports/tr18/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #24: Unicode <code>Script</code> Property</i>, available at &lt;<a href=\"https://unicode.org/reports/tr24/\">https://unicode.org/reports/tr24/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #31, Unicode Identifiers and Pattern Syntax</i>, available at &lt;<a href=\"https://unicode.org/reports/tr31/\">https://unicode.org/reports/tr31/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #44: Unicode Character Database</i>, available at &lt;<a href=\"https://unicode.org/reports/tr44/\">https://unicode.org/reports/tr44/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Standard #51: Unicode Emoji</i>, available at &lt;<a href=\"https://unicode.org/reports/tr51/\">https://unicode.org/reports/tr51/</a>&gt;\n    \n    </li>\n    <li>\n      <i>IANA Time Zone Database</i>, available at &lt;<a href=\"https://www.iana.org/time-zones\">https://www.iana.org/time-zones</a>&gt;\n    \n    </li>\n    <li>\n      ISO 8601:2004(E)  <i>Data elements and interchange formats &#8212; Information interchange &#8212; Representation of dates and times</i>\n    </li>\n    <li>\n      <i>RFC 1738 &#8220;Uniform Resource Locators (URL)&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc1738\">https://tools.ietf.org/html/rfc1738</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 2396 &#8220;Uniform Resource Identifiers (URI): Generic Syntax&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc2396\">https://tools.ietf.org/html/rfc2396</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 3629 &#8220;UTF-8, a transformation format of ISO 10646&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc3629\">https://tools.ietf.org/html/rfc3629</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 7231 &#8220;Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc7231\">https://tools.ietf.org/html/rfc7231</a>&gt;\n    \n    </li>\n  </ol>\n</emu-annex>"}, "sec-terms-and-definitions-number-value": {"num": "4.3.20", "title": "#sec-terms-and-definitions-number-value Number value", "html": "<emu-clause id=\"sec-terms-and-definitions-number-value\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-terms-and-definitions-number-value\">#sec-terms-and-definitions-number-value</span> Number value</h1>\n      <p>primitive value corresponding to a double-precision 64-bit binary format IEEE 754-2008 value</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is a member of the Number type and is a direct representation of a number.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-remainder": {"num": "6.1.6.1.6", "title": "#sec-numeric-types-number-remainder Number::remainder ( n, d )", "html": "<emu-clause id=\"sec-numeric-types-number-remainder\" oldids=\"sec-applying-the-mod-operator\">\n          <span id=\"sec-applying-the-mod-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-remainder\">#sec-numeric-types-number-remainder</span> Number::remainder ( <var>n</var>, <var>d</var> )</h1>\n          <p>The <code>%</code> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> yields the remainder of its operands from an implied division; <var>n</var> is the dividend and <var>d</var> is the divisor.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>In C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts floating-point operands.</p>\n          </div></emu-note>\n          <p>The result of a floating-point remainder operation as computed by the <code>%</code> operator is not the same as the &#8220;remainder&#8221; operation defined by IEEE 754-2008. The IEEE 754-2008 &#8220;remainder&#8221; operation computes the remainder from a rounding division, not a truncating division, and so its behaviour is not analogous to that of the usual <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> remainder operator. Instead the ECMAScript language defines <code>%</code> on floating-point operations to behave in a manner analogous to that of the Java <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> remainder operator; this may be compared with the C library function fmod.</p>\n          <p>The result of an ECMAScript floating-point remainder operation is determined by the rules of IEEE arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              The sign of the result equals the sign of the dividend.\n            \n            </li>\n            <li>\n              If the dividend is an infinity, or the divisor is a zero, or both, the result is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              If the dividend is finite and the divisor is an infinity, the result equals the dividend.\n            \n            </li>\n            <li>\n              If the dividend is a zero and the divisor is nonzero and finite, the result is the same as the dividend.\n            \n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, the floating-point remainder <var>r</var> from a dividend <var>n</var> and a divisor <var>d</var> is defined by the mathematical relation <var>r</var> = <var>n</var> - (<var>d</var> &#215; <var>q</var>) where <var>q</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is negative only if <var>n</var>/<var>d</var> is negative and positive only if <var>n</var>/<var>d</var> is positive, and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of <var>n</var> and <var>d</var>. <var>r</var> is computed and rounded to the nearest representable value using IEEE 754-2008 roundTiesToEven mode.\n            \n            </li>\n          </ul>\n        </emu-clause>\n\n        "}, "sec-rawbytestonumeric": {"num": "24.1.1.9", "title": "#sec-rawbytestonumeric RawBytesToNumeric ( type, rawBytes, isLittleEndian )", "html": "<emu-clause id=\"sec-rawbytestonumeric\" aoid=\"RawBytesToNumeric\" oldids=\"sec-rawbytestonumber\">\n        <span id=\"sec-rawbytestonumber\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rawbytestonumeric\">#sec-rawbytestonumeric</span> RawBytesToNumeric ( <var>type</var>, <var>rawBytes</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation RawBytesToNumeric takes three parameters, a TypedArray element type <var>type</var>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>rawBytes</var>, and a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is <emu-val>false</emu-val>, reverse the order of the elements of <var>rawBytes</var>.</li><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary32 value.</li><li>If <var>value</var> is an IEEE 754-2008 binary32 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary64 value.</li><li>If <var>value</var> is an IEEE 754-2008 binary64 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsUnsignedElementType\"><a href=\"#sec-isunsignedelementtype\">IsUnsignedElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.</li></ol></li><li>Else,<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of a binary little-endian 2's complement number of bit length <var>elementSize</var> &#215; 8.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, return the BigInt value that corresponds to <var>intValue</var>.</li><li>Otherwise, return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>intValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-numeric-types-number-exponentiate": {"num": "6.1.6.1.3", "title": "#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )", "html": "<emu-clause id=\"sec-numeric-types-number-exponentiate\" oldids=\"sec-applying-the-exp-operator\">\n          <span id=\"sec-applying-the-exp-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-exponentiate\">#sec-numeric-types-number-exponentiate</span> Number::exponentiate ( <var>base</var>, <var>exponent</var> )</h1>\n          <p>\n            Returns an implementation-dependent approximation of the result of raising <var>base</var> to the power <var>exponent</var>.\n          \n          </p>\n          <ul>\n            <li>If <var>exponent</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>+0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>-0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>NaN</emu-val> and <var>exponent</var> is nonzero, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> &lt; 0 and <var>base</var> is finite and <var>exponent</var> is finite and <var>exponent</var> is not an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>NaN</emu-val>.</li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>The result of <var>base</var> <code>**</code> <var>exponent</var> when <var>base</var> is <emu-val>1</emu-val> or <emu-val>-1</emu-val> and <var>exponent</var> is <emu-val>+Infinity</emu-val> or <emu-val>-Infinity</emu-val> differs from IEEE 754-2008. The first edition of ECMAScript specified a result of <emu-val>NaN</emu-val> for this operation, whereas later versions of IEEE 754-2008 specified <emu-val>1</emu-val>. The historical ECMAScript behaviour is preserved for compatibility reasons.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-multiply": {"num": "6.1.6.1.4", "title": "#sec-numeric-types-number-multiply Number::multiply ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-multiply\" oldids=\"sec-applying-the-mul-operator\">\n          <span id=\"sec-applying-the-mul-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-multiply\">#sec-numeric-types-number-multiply</span> Number::multiply ( <var>x</var>, <var>y</var> )</h1>\n          <p>The <code>*</code> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> performs multiplication, producing the product of <var>x</var> and <var>y</var>. Multiplication is commutative. Multiplication is not always associative in ECMAScript, because of finite precision.</p>\n          <p>The result of a floating-point multiplication is governed by the rules of IEEE 754-2008 binary double-precision arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n            \n            </li>\n            <li>\n              Multiplication of an infinity by a zero results in <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              Multiplication of an infinity by an infinity results in an infinity. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              Multiplication of an infinity by a finite nonzero value results in a signed infinity. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              In the remaining cases, where neither an infinity nor <emu-val>NaN</emu-val> is involved, the product is computed and rounded to the nearest representable value using IEEE 754-2008 roundTiesToEven mode. If the magnitude is too large to represent, the result is then an infinity of appropriate sign. If the magnitude is too small to represent, the result is then a zero of appropriate sign. The ECMAScript language requires support of gradual underflow as defined by IEEE 754-2008.\n            \n            </li>\n          </ul>\n        </emu-clause>\n\n        "}, "sec-math.fround": {"num": "20.3.2.17", "title": "#sec-math.fround Math.fround ( x )", "html": "<emu-clause id=\"sec-math.fround\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.fround\">#sec-math.fround</span> Math.fround ( <var>x</var> )</h1>\n        <p>When <code>Math.fround</code> is called with argument <var>x</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <var>x</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>x</var> is one of <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, <emu-val>+&#8734;</emu-val>, <emu-val>-&#8734;</emu-val>, return <var>x</var>.</li><li>Let <var>x32</var> be the result of converting <var>x</var> to a value in IEEE 754-2008 binary32 format using roundTiesToEven mode.</li><li>Let <var>x64</var> be the result of converting <var>x32</var> to a value in IEEE 754-2008 binary64 format.</li><li>Return the ECMAScript <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> corresponding to <var>x64</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-function-properties-of-the-math-object": {"num": "20.3.2", "title": "#sec-function-properties-of-the-math-object Function Properties of the Math Object", "html": "<emu-clause id=\"sec-function-properties-of-the-math-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-properties-of-the-math-object\">#sec-function-properties-of-the-math-object</span> Function Properties of the Math Object</h1>\n      <p>Each of the following <code>Math</code> object functions applies the <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> abstract operation to each of its arguments (in left-to-right order if there is more than one). If <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, that <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> is immediately returned. Otherwise, the function performs a computation on the resulting <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>(s). The value returned by each function is a Number.</p>\n      <p>In the function descriptions below, the symbols <emu-val>NaN</emu-val>, <emu-val>-0</emu-val>, <emu-val>+0</emu-val>, <emu-val>-&#8734;</emu-val> and <emu-val>+&#8734;</emu-val> refer to the Number values described in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The behaviour of the functions <code>acos</code>, <code>acosh</code>, <code>asin</code>, <code>asinh</code>, <code>atan</code>, <code>atanh</code>, <code>atan2</code>, <code>cbrt</code>, <code>cos</code>, <code>cosh</code>, <code>exp</code>, <code>expm1</code>, <code>hypot</code>, <code>log</code>,<code>log1p</code>, <code>log2</code>, <code>log10</code>, <code>pow</code>, <code>random</code>, <code>sin</code>, <code>sinh</code>, <code>sqrt</code>, <code>tan</code>, and <code>tanh</code> is not precisely specified here except to require specific results for certain argument values that represent boundary cases of interest. For other argument values, these functions are intended to compute approximations to the results of familiar mathematical functions, but some latitude is allowed in the choice of approximation algorithms. The general intent is that an implementer should be able to use the same mathematical library for ECMAScript on a given hardware platform that is available to C programmers on that platform.</p>\n        <p>Although the choice of algorithms is left to the implementation, it is recommended (but not specified by this standard) that implementations use the approximation algorithms for IEEE 754-2008 arithmetic contained in <code>fdlibm</code>, the freely distributable mathematical library from Sun Microsystems (<a href=\"http://www.netlib.org/fdlibm\">http://www.netlib.org/fdlibm</a>).</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-math.abs\"><h1><span class=\"secnum\">20.3.2.1</span>#sec-math.abs Math.abs ( x )</h1>...</div><div id=\"excluded-sec-math.acos\"><h1><span class=\"secnum\">20.3.2.2</span>#sec-math.acos Math.acos ( x )</h1>...</div><div id=\"excluded-sec-math.acosh\"><h1><span class=\"secnum\">20.3.2.3</span>#sec-math.acosh Math.acosh ( x )</h1>...</div><div id=\"excluded-sec-math.asin\"><h1><span class=\"secnum\">20.3.2.4</span>#sec-math.asin Math.asin ( x )</h1>...</div><div id=\"excluded-sec-math.asinh\"><h1><span class=\"secnum\">20.3.2.5</span>#sec-math.asinh Math.asinh ( x )</h1>...</div><div id=\"excluded-sec-math.atan\"><h1><span class=\"secnum\">20.3.2.6</span>#sec-math.atan Math.atan ( x )</h1>...</div><div id=\"excluded-sec-math.atanh\"><h1><span class=\"secnum\">20.3.2.7</span>#sec-math.atanh Math.atanh ( x )</h1>...</div><div id=\"excluded-sec-math.atan2\"><h1><span class=\"secnum\">20.3.2.8</span>#sec-math.atan2 Math.atan2 ( y, x )</h1>...</div><div id=\"excluded-sec-math.cbrt\"><h1><span class=\"secnum\">20.3.2.9</span>#sec-math.cbrt Math.cbrt ( x )</h1>...</div><div id=\"excluded-sec-math.ceil\"><h1><span class=\"secnum\">20.3.2.10</span>#sec-math.ceil Math.ceil ( x )</h1>...</div><div id=\"excluded-sec-math.clz32\"><h1><span class=\"secnum\">20.3.2.11</span>#sec-math.clz32 Math.clz32 ( x )</h1>...</div><div id=\"excluded-sec-math.cos\"><h1><span class=\"secnum\">20.3.2.12</span>#sec-math.cos Math.cos ( x )</h1>...</div><div id=\"excluded-sec-math.cosh\"><h1><span class=\"secnum\">20.3.2.13</span>#sec-math.cosh Math.cosh ( x )</h1>...</div><div id=\"excluded-sec-math.exp\"><h1><span class=\"secnum\">20.3.2.14</span>#sec-math.exp Math.exp ( x )</h1>...</div><div id=\"excluded-sec-math.expm1\"><h1><span class=\"secnum\">20.3.2.15</span>#sec-math.expm1 Math.expm1 ( x )</h1>...</div><div id=\"excluded-sec-math.floor\"><h1><span class=\"secnum\">20.3.2.16</span>#sec-math.floor Math.floor ( x )</h1>...</div><div id=\"excluded-sec-math.fround\"><h1><span class=\"secnum\">20.3.2.17</span>#sec-math.fround Math.fround ( x )</h1>...</div><div id=\"excluded-sec-math.hypot\"><h1><span class=\"secnum\">20.3.2.18</span>#sec-math.hypot Math.hypot ( value1, value2, ...values )</h1>...</div><div id=\"excluded-sec-math.imul\"><h1><span class=\"secnum\">20.3.2.19</span>#sec-math.imul Math.imul ( x, y )</h1>...</div><div id=\"excluded-sec-math.log\"><h1><span class=\"secnum\">20.3.2.20</span>#sec-math.log Math.log ( x )</h1>...</div><div id=\"excluded-sec-math.log1p\"><h1><span class=\"secnum\">20.3.2.21</span>#sec-math.log1p Math.log1p ( x )</h1>...</div><div id=\"excluded-sec-math.log10\"><h1><span class=\"secnum\">20.3.2.22</span>#sec-math.log10 Math.log10 ( x )</h1>...</div><div id=\"excluded-sec-math.log2\"><h1><span class=\"secnum\">20.3.2.23</span>#sec-math.log2 Math.log2 ( x )</h1>...</div><div id=\"excluded-sec-math.max\"><h1><span class=\"secnum\">20.3.2.24</span>#sec-math.max Math.max ( value1, value2, ...values )</h1>...</div><div id=\"excluded-sec-math.min\"><h1><span class=\"secnum\">20.3.2.25</span>#sec-math.min Math.min ( value1, value2, ...values )</h1>...</div><div id=\"excluded-sec-math.pow\"><h1><span class=\"secnum\">20.3.2.26</span>#sec-math.pow Math.pow ( base, exponent )</h1>...</div><div id=\"excluded-sec-math.random\"><h1><span class=\"secnum\">20.3.2.27</span>#sec-math.random Math.random ( )</h1>...</div><div id=\"excluded-sec-math.round\"><h1><span class=\"secnum\">20.3.2.28</span>#sec-math.round Math.round ( x )</h1>...</div><div id=\"excluded-sec-math.sign\"><h1><span class=\"secnum\">20.3.2.29</span>#sec-math.sign Math.sign ( x )</h1>...</div><div id=\"excluded-sec-math.sin\"><h1><span class=\"secnum\">20.3.2.30</span>#sec-math.sin Math.sin ( x )</h1>...</div><div id=\"excluded-sec-math.sinh\"><h1><span class=\"secnum\">20.3.2.31</span>#sec-math.sinh Math.sinh ( x )</h1>...</div><div id=\"excluded-sec-math.sqrt\"><h1><span class=\"secnum\">20.3.2.32</span>#sec-math.sqrt Math.sqrt ( x )</h1>...</div><div id=\"excluded-sec-math.tan\"><h1><span class=\"secnum\">20.3.2.33</span>#sec-math.tan Math.tan ( x )</h1>...</div><div id=\"excluded-sec-math.tanh\"><h1><span class=\"secnum\">20.3.2.34</span>#sec-math.tanh Math.tanh ( x )</h1>...</div><div id=\"excluded-sec-math.trunc\"><h1><span class=\"secnum\">20.3.2.35</span>#sec-math.trunc Math.trunc ( x )</h1>...</div></emu-clause>\n  "}, "sec-numeric-types-number-add": {"num": "6.1.6.1.7", "title": "#sec-numeric-types-number-add Number::add ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-add\" oldids=\"sec-applying-the-additive-operators-to-numbers\">\n          <span id=\"sec-applying-the-additive-operators-to-numbers\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-add\">#sec-numeric-types-number-add</span> Number::add ( <var>x</var>, <var>y</var> )</h1>\n          <p>The <code>+</code> operator performs addition when applied to <var>x</var> and <var>y</var>, producing the sum of the operands.</p>\n          <p>Addition is a commutative operation, but not always associative.</p>\n          <p>The result of an addition is determined using the rules of IEEE 754-2008 binary double-precision arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              The sum of two infinities of opposite sign is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              The sum of two infinities of the same sign is the infinity of that sign.\n            \n            </li>\n            <li>\n              The sum of an infinity and a finite value is equal to the infinite operand.\n            \n            </li>\n            <li>\n              The sum of two negative zeroes is <emu-val>-0</emu-val>. The sum of two positive zeroes, or of two zeroes of opposite sign, is <emu-val>+0</emu-val>.\n            \n            </li>\n            <li>\n              The sum of a zero and a nonzero finite value is equal to the nonzero operand.\n            \n            </li>\n            <li>\n              The sum of two nonzero finite values of the same magnitude and opposite sign is <emu-val>+0</emu-val>.\n            \n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, and the operands have the same sign or have different magnitudes, the sum is computed and rounded to the nearest representable value using IEEE 754-2008 roundTiesToEven mode. If the magnitude is too large to represent, the operation overflows and the result is then an infinity of appropriate sign. The ECMAScript language requires support of gradual underflow as defined by IEEE 754-2008.\n            \n            </li>\n          </ul>\n        </emu-clause>\n\n        "}}, "figData": {"table-the-typedarray-constructors": "Table 63"}}, "to": {"secList": ["sec-mathematical-operations", "sec-numerictorawbytes", "sec-terms-and-definitions-nan", "sec-numeric-types-number-divide", "sec-number.min_value", "sec-maketime", "sec-ecmascript-language-types-number-type", "sec-bibliography", "sec-terms-and-definitions-number-value", "sec-numeric-types-number-remainder", "sec-rawbytestonumeric", "sec-numeric-types-number-exponentiate", "sec-numeric-types-number-multiply", "sec-math.fround", "sec-function-properties-of-the-math-object", "sec-numeric-types-number-add"], "secData": {"sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to two kinds of numeric values:</p>\n      <ul>\n        <li><em>Number</em>: <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> double-precision floating point values, used as the default numeric type.</li>\n        <li><em><emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">Mathematical value</a></emu-xref></em>: Arbitrary real numbers, used for specific situations.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values and operations (including addition, subtraction, negation, multiplication, division, and comparison) are distinguished among different numeric kinds using subscripts. The subscript  <sub><dfn id=\"&#120125;\">&#120125;</dfn></sub> refers to Numbers, and the subscript  <sub><dfn id=\"&#8477;\">&#8477;</dfn></sub> refers to mathematical values. A subscript is used following each numeric value and operation.</p>\n      <p>For brevity, the  <sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub> subscript can be omitted on Number values&#8212;a numeric value with no subscript is interpreted to be a Number. An operation with no subscript is interpreted to be a Number operation, unless one of the parameters has a particular subscript, in which case the operation adopts that subscript. For example, 1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> + 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> = 3<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> is a statement about mathematical values, and 1 + 2 = 3 is a statement about Numbers.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a Number. Phrases which refer to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> are explicitly annotated as such; for example, \"the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in ...\".</p>\n      <p>It is not defined to mix Numbers and mathematical values in either arithmetic or comparison operations, and any such undefined operation would be an editorial error in this specification text.</p>\n      <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> 0, alternatively written 0<sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub>, is defined as the double-precision floating point positive zero value. In certain contexts, it may also be written as <emu-val>+0</emu-val> for clarity.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>In certain contexts, an operation is specified which is generic between Numbers and mathematical values. In these cases, the subscript can be a variable; <var>t</var> is often used for this purpose, for example 5<sub><var>t</var></sub> &#215; 10<sub><var>t</var></sub> = 50<sub><var>t</var></sub> for any <var>t</var> ranging over <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref> and <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>, since the values involved are within the range where the semantics coincide.</p>\n      <p>Conversions between mathematical values and numbers are never implicit, and always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\", and is defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from a Number to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the  <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). Note that the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined, and the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val> and <emu-val>-0</emu-val> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.</p>\n      <p>When the term  <dfn id=\"integer\">integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers, unless otherwise stated: when the term  <dfn id=\"mathematical integer\">mathematical integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers. As shorthand, <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> can be used to refer to either of the two, as determined by <var>t</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is  <emu-eqn class=\"inline\">-<sub><var>t</var></sub><var>x</var></emu-eqn> if <var>x</var> &lt;<sub><var>t</var></sub> 0<sub><var>t</var></sub> and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function  <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions include <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo<sub><var>t</var></sub> <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that  <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>k</var>) &lt;<sub><var>t</var></sub> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>y</var>) and <var>x</var>-<sub><var>t</var></sub><var>k</var> = <var>q</var> &#215;<sub><var>t</var></sub> <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> <var>q</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> (closest to positive infinity) that is not larger than <var>x</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref><sub><var>t</var></sub>(<var>x</var>) = <var>x</var> -<sub><var>t</var></sub> (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref><sub><var>t</var></sub> 1<sub><var>t</var></sub>)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n    "}, "sec-numerictorawbytes": {"num": "24.1.1.11", "title": "#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )", "html": "<emu-clause id=\"sec-numerictorawbytes\" aoid=\"NumericToRawBytes\" oldids=\"sec-numbertorawbytes\">\n        <span id=\"sec-numbertorawbytes\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numerictorawbytes\">#sec-numerictorawbytes</span> NumericToRawBytes ( <var>type</var>, <var>value</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation NumericToRawBytes takes three parameters, a TypedArray element type <var>type</var>, a BigInt or a Number <var>value</var>, and a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 4 bytes that are the result of converting <var>value</var> to <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 format using roundTiesToEven mode. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else if <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 8 bytes that are the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 format encoding of <var>value</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>convOp</var> be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>intValue</var> be <var>convOp</var>(<var>value</var>) treated as a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>, whether the result is a BigInt or Number.</li><li>If <var>intValue</var> &#8805; 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li><li>Else,<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary 2's complement encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li></ol></li><li>Return <var>rawBytes</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-terms-and-definitions-nan": {"num": "4.3.24", "title": "#sec-terms-and-definitions-nan NaN", "html": "<emu-clause id=\"sec-terms-and-definitions-nan\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-terms-and-definitions-nan\">#sec-terms-and-definitions-nan</span> NaN</h1>\n      <p><emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that is an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> &#8220;Not-a-Number&#8221; value</p>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-divide": {"num": "6.1.6.1.5", "title": "#sec-numeric-types-number-divide Number::divide ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-divide\" oldids=\"sec-applying-the-div-operator\">\n          <span id=\"sec-applying-the-div-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-divide\">#sec-numeric-types-number-divide</span> Number::divide ( <var>x</var>, <var>y</var> )</h1>\n          <p>The <code>/</code> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> performs division, producing the quotient of <var>x</var> and <var>y</var>. <var>x</var> is the dividend and <var>y</var> is the divisor. ECMAScript does not perform <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> division. The operands and result of all division operations are double-precision floating-point numbers. The result of division is determined by the specification of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n            \n            </li>\n            <li>\n              Division of an infinity by an infinity results in <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              Division of an infinity by a zero results in an infinity. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              Division of an infinity by a nonzero finite value results in a signed infinity. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              Division of a finite value by an infinity results in zero. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              Division of a zero by a zero results in <emu-val>NaN</emu-val>; division of zero by any other finite value results in zero, with the sign determined by the rule already stated above.\n            \n            </li>\n            <li>\n              Division of a nonzero finite value by a zero results in a signed infinity. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, the quotient is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the operation overflows; the result is then an infinity of appropriate sign. If the magnitude is too small to represent, the operation underflows and the result is a zero of the appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            \n            </li>\n          </ul>\n        </emu-clause>\n\n        "}, "sec-number.min_value": {"num": "20.1.2.9", "title": "#sec-number.min_value Number.MIN_VALUE", "html": "<emu-clause id=\"sec-number.min_value\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.min_value\">#sec-number.min_value</span> Number.MIN_VALUE</h1>\n        <p>The value of <code>Number.MIN_VALUE</code> is the smallest positive value of the Number type, which is approximately  <emu-eqn class=\"inline\">5 &#215; 10<sup>-324</sup></emu-eqn>.</p>\n        <p>In the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> double precision binary representation, the smallest possible value is a denormalized number. If an implementation does not support denormalized values, the value of <code>Number.MIN_VALUE</code> must be the smallest non-zero positive value that can actually be represented by the implementation.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-maketime": {"num": "20.4.1.11", "title": "#sec-maketime MakeTime ( hour, min, sec, ms )", "html": "<emu-clause id=\"sec-maketime\" aoid=\"MakeTime\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-maketime\">#sec-maketime</span> MakeTime ( <var>hour</var>, <var>min</var>, <var>sec</var>, <var>ms</var> )</h1>\n        <p>The abstract operation MakeTime calculates a number of milliseconds from its four arguments, which must be ECMAScript Number values. This operator functions as follows:</p>\n        <emu-alg><ol><li>If <var>hour</var> is not finite or <var>min</var> is not finite or <var>sec</var> is not finite or <var>ms</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Let <var>h</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>hour</var>).</li><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>min</var>).</li><li>Let <var>s</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>sec</var>).</li><li>Let <var>milli</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>ms</var>).</li><li>Let <var>t</var> be <var>h</var> <code>*</code> <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref> <code>+</code> <var>m</var> <code>*</code> <emu-xref aoid=\"msPerMinute\"><a href=\"#eqn-msPerMinute\">msPerMinute</a></emu-xref> <code>+</code> <var>s</var> <code>*</code> <emu-xref aoid=\"msPerSecond\"><a href=\"#eqn-msPerSecond\">msPerSecond</a></emu-xref> <code>+</code> <var>milli</var>, performing the arithmetic according to <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> rules (that is, as if using the ECMAScript operators <code>*</code> and <code>+</code>).</li><li>Return <var>t</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ecmascript-language-types-number-type": {"num": "6.1.6.1", "title": "#sec-ecmascript-language-types-number-type The Number Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-number-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</span> The Number Type</h1>\n        <p>The Number type has exactly 18437736874454810627<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> + 3<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) values, representing the double-precision 64-bit format <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9007199254740990<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) distinct &#8220;Not-a-Number&#8221; values of the IEEE Standard are represented in ECMAScript as a single special <emu-val>NaN</emu-val> value. (Note that the <emu-val>NaN</emu-val> value is produced by the program expression <code>NaN</code>.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is implementation-dependent; to ECMAScript code, all <emu-val>NaN</emu-val> values are indistinguishable from each other.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The bit pattern that might be observed in an ArrayBuffer (see  <emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>) or a SharedArrayBuffer (see  <emu-xref href=\"#sec-sharedarraybuffer-objects\"><a href=\"#sec-sharedarraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-sharedarraybuffer-objects\">#sec-sharedarraybuffer-objects</a></emu-xref>) after a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> has been stored into it is not necessarily the same as the internal representation of that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> used by the ECMAScript implementation.</p>\n        </div></emu-note>\n        <p>There are two other special values, called <emu-val>positive Infinity</emu-val> and <emu-val>negative Infinity</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>, respectively. (Note that these two infinite Number values are produced by the program expressions <code>+Infinity</code> (or simply <code>Infinity</code>) and <code>-Infinity</code>.)</p>\n        <p>The other 18437736874454810624<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>) values are called the finite numbers. Half of these are positive numbers and half are negative numbers; for every finite positive <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> there is a corresponding negative value having the same magnitude.</p>\n        <p>Note that there is both a <emu-val>positive zero</emu-val> and a <emu-val>negative zero</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+0</emu-val> and <emu-val>-0</emu-val>, respectively. (Note that these two different zero Number values are produced by the program expressions <code>+0</code> (or simply <code>0</code>) and <code>-0</code>.)</p>\n        <p>The 18437736874454810622<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) finite nonzero values are of two kinds:</p>\n        <p>18428729675200069632<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>54<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>) of them are normalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> or -1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> but not less than 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>52<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup>, and <var>e</var> is a <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> ranging from -1074<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> to 971<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, inclusive.</p>\n        <p>The remaining 9007199254740990<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) values are denormalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> or -1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>52<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup>, and <var>e</var> is -1074<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.</p>\n        <p>Note that all the positive and negative mathematical integers whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type (indeed, the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> 0 has two representations, <emu-val>+0</emu-val> and <emu-val>-0</emu-val>).</p>\n        <p>A finite number has an  <em>odd significand</em> if it is nonzero and the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> <var>m</var> used to express it (in one of the two forms shown above) is odd. Otherwise, it has an  <em>even significand</em>.</p>\n        <p>In this specification, the phrase &#8220;the  <dfn id=\"number-value\">Number value</dfn> for <var>x</var>&#8221; where <var>x</var> represents an exact real mathematical quantity (which might even be an irrational number such as &#960;) means a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> chosen in the following manner. Consider the set of all finite values of the Number type, with <emu-val>-0</emu-val> removed and with two additional values added to it that are not representable in the Number type, namely 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> (which is  <emu-eqn class=\"inline\">+1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>971<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>) and  <emu-eqn class=\"inline\">-2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn> (which is  <emu-eqn class=\"inline\">-1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>971<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>). Choose the member of this set that is closest in value to <var>x</var>. If two values of the set are equally close, then the one with an even significand is chosen; for this purpose, the two extra values 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> and  <emu-eqn class=\"inline\">-2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn> are considered to have even significands. Finally, if 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> was chosen, replace it with <emu-val>+&#8734;</emu-val>; if  <emu-eqn class=\"inline\">-2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn> was chosen, replace it with <emu-val>-&#8734;</emu-val>; if <emu-val>+0</emu-val> was chosen, replace it with <emu-val>-0</emu-val> if and only if <var>x</var> is less than zero; any other chosen value is used unchanged. The result is the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>. (This procedure corresponds exactly to the behaviour of the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode.)</p>\n        <p>Some ECMAScript operators deal only with integers in specific ranges such as  <emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn> through  <emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>, inclusive, or in the range 0 through  <emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>, inclusive. These operators accept any value of the Number type but first convert each such value to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the expected range. See the descriptions of the numeric conversion operations in  <emu-xref href=\"#sec-type-conversion\"><a href=\"#sec-type-conversion\" class=\"excluded-xref\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</a></emu-xref>.</p>\n\n        <p>The Number::unit value is <emu-val>1</emu-val>.</p>\n\n        <div id=\"excluded-sec-numeric-types-number-unaryMinus\"><h1><span class=\"secnum\">6.1.6.1.1</span>#sec-numeric-types-number-unaryMinus Number::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.1.2</span>#sec-numeric-types-number-bitwiseNOT Number::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-exponentiate\"><h1><span class=\"secnum\">6.1.6.1.3</span>#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-number-multiply\"><h1><span class=\"secnum\">6.1.6.1.4</span>#sec-numeric-types-number-multiply Number::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-divide\"><h1><span class=\"secnum\">6.1.6.1.5</span>#sec-numeric-types-number-divide Number::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-remainder\"><h1><span class=\"secnum\">6.1.6.1.6</span>#sec-numeric-types-number-remainder Number::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-number-add\"><h1><span class=\"secnum\">6.1.6.1.7</span>#sec-numeric-types-number-add Number::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-subtract\"><h1><span class=\"secnum\">6.1.6.1.8</span>#sec-numeric-types-number-subtract Number::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-leftShift\"><h1><span class=\"secnum\">6.1.6.1.9</span>#sec-numeric-types-number-leftShift Number::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-signedRightShift\"><h1><span class=\"secnum\">6.1.6.1.10</span>#sec-numeric-types-number-signedRightShift Number::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.1.11</span>#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-lessThan\"><h1><span class=\"secnum\">6.1.6.1.12</span>#sec-numeric-types-number-lessThan Number::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-equal\"><h1><span class=\"secnum\">6.1.6.1.13</span>#sec-numeric-types-number-equal Number::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValue\"><h1><span class=\"secnum\">6.1.6.1.14</span>#sec-numeric-types-number-sameValue Number::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValueZero\"><h1><span class=\"secnum\">6.1.6.1.15</span>#sec-numeric-types-number-sameValueZero Number::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-numberbitwiseop\"><h1><span class=\"secnum\">6.1.6.1.16</span>#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.1.17</span>#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.1.18</span>#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.1.19</span>#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-tostring\"><h1><span class=\"secnum\">6.1.6.1.20</span>#sec-numeric-types-number-tostring Number::toString ( x )</h1>...</div></emu-clause>\n\n      "}, "sec-bibliography": {"num": "G", "title": "#sec-bibliography Bibliography", "html": "<emu-annex id=\"sec-bibliography\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bibliography\">#sec-bibliography</span> Bibliography</h1>\n  <ol>\n    <li>\n      <dfn>IEEE 754-2019</dfn>:  <i>IEEE Standard for Floating-Point Arithmetic</i>. Institute of Electrical and Electronic Engineers, New York (2019)\n      \n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>There are no normative changes between IEEE 754-2008 and IEEE 754-2019 that affect the ECMA-262 specification.</p>\n      </div></emu-note>\n    </li>\n    <li>\n      <i>The Unicode Standard</i>, available at &lt;<a href=\"https://unicode.org/versions/latest\">https://unicode.org/versions/latest</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Note #5: Canonical Equivalence in Applications</i>, available at &lt;<a href=\"https://unicode.org/notes/tn5/\">https://unicode.org/notes/tn5/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Standard #10: Unicode Collation Algorithm</i>, available at &lt;<a href=\"https://unicode.org/reports/tr10/\">https://unicode.org/reports/tr10/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #15, Unicode Normalization Forms</i>, available at &lt;<a href=\"https://unicode.org/reports/tr15/\">https://unicode.org/reports/tr15/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #18: Unicode Regular Expressions</i>, available at &lt;<a href=\"https://unicode.org/reports/tr18/\">https://unicode.org/reports/tr18/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #24: Unicode <code>Script</code> Property</i>, available at &lt;<a href=\"https://unicode.org/reports/tr24/\">https://unicode.org/reports/tr24/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #31, Unicode Identifiers and Pattern Syntax</i>, available at &lt;<a href=\"https://unicode.org/reports/tr31/\">https://unicode.org/reports/tr31/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #44: Unicode Character Database</i>, available at &lt;<a href=\"https://unicode.org/reports/tr44/\">https://unicode.org/reports/tr44/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Standard #51: Unicode Emoji</i>, available at &lt;<a href=\"https://unicode.org/reports/tr51/\">https://unicode.org/reports/tr51/</a>&gt;\n    \n    </li>\n    <li>\n      <i>IANA Time Zone Database</i>, available at &lt;<a href=\"https://www.iana.org/time-zones\">https://www.iana.org/time-zones</a>&gt;\n    \n    </li>\n    <li>\n      ISO 8601:2004(E)  <i>Data elements and interchange formats &#8212; Information interchange &#8212; Representation of dates and times</i>\n    </li>\n    <li>\n      <i>RFC 1738 &#8220;Uniform Resource Locators (URL)&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc1738\">https://tools.ietf.org/html/rfc1738</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 2396 &#8220;Uniform Resource Identifiers (URI): Generic Syntax&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc2396\">https://tools.ietf.org/html/rfc2396</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 3629 &#8220;UTF-8, a transformation format of ISO 10646&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc3629\">https://tools.ietf.org/html/rfc3629</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 7231 &#8220;Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc7231\">https://tools.ietf.org/html/rfc7231</a>&gt;\n    \n    </li>\n  </ol>\n</emu-annex>"}, "sec-terms-and-definitions-number-value": {"num": "4.3.20", "title": "#sec-terms-and-definitions-number-value Number value", "html": "<emu-clause id=\"sec-terms-and-definitions-number-value\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-terms-and-definitions-number-value\">#sec-terms-and-definitions-number-value</span> Number value</h1>\n      <p>primitive value corresponding to a double-precision 64-bit binary format <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> value</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is a member of the Number type and is a direct representation of a number.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-remainder": {"num": "6.1.6.1.6", "title": "#sec-numeric-types-number-remainder Number::remainder ( n, d )", "html": "<emu-clause id=\"sec-numeric-types-number-remainder\" oldids=\"sec-applying-the-mod-operator\">\n          <span id=\"sec-applying-the-mod-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-remainder\">#sec-numeric-types-number-remainder</span> Number::remainder ( <var>n</var>, <var>d</var> )</h1>\n          <p>The <code>%</code> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> yields the remainder of its operands from an implied division; <var>n</var> is the dividend and <var>d</var> is the divisor.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>In C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts floating-point operands.</p>\n          </div></emu-note>\n          <p>The result of a floating-point remainder operation as computed by the <code>%</code> operator is not the same as the &#8220;remainder&#8221; operation defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> &#8220;remainder&#8221; operation computes the remainder from a rounding division, not a truncating division, and so its behaviour is not analogous to that of the usual <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> remainder operator. Instead the ECMAScript language defines <code>%</code> on floating-point operations to behave in a manner analogous to that of the Java <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> remainder operator; this may be compared with the C library function fmod.</p>\n          <p>The result of an ECMAScript floating-point remainder operation is determined by the rules of IEEE arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              The sign of the result equals the sign of the dividend.\n            \n            </li>\n            <li>\n              If the dividend is an infinity, or the divisor is a zero, or both, the result is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              If the dividend is finite and the divisor is an infinity, the result equals the dividend.\n            \n            </li>\n            <li>\n              If the dividend is a zero and the divisor is nonzero and finite, the result is the same as the dividend.\n            \n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, the floating-point remainder <var>r</var> from a dividend <var>n</var> and a divisor <var>d</var> is defined by the mathematical relation <var>r</var> = <var>n</var> - (<var>d</var> &#215; <var>q</var>) where <var>q</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is negative only if <var>n</var>/<var>d</var> is negative and positive only if <var>n</var>/<var>d</var> is positive, and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of <var>n</var> and <var>d</var>. <var>r</var> is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode.\n            \n            </li>\n          </ul>\n        </emu-clause>\n\n        "}, "sec-rawbytestonumeric": {"num": "24.1.1.9", "title": "#sec-rawbytestonumeric RawBytesToNumeric ( type, rawBytes, isLittleEndian )", "html": "<emu-clause id=\"sec-rawbytestonumeric\" aoid=\"RawBytesToNumeric\" oldids=\"sec-rawbytestonumber\">\n        <span id=\"sec-rawbytestonumber\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rawbytestonumeric\">#sec-rawbytestonumeric</span> RawBytesToNumeric ( <var>type</var>, <var>rawBytes</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation RawBytesToNumeric takes three parameters, a TypedArray element type <var>type</var>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>rawBytes</var>, and a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is <emu-val>false</emu-val>, reverse the order of the elements of <var>rawBytes</var>.</li><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 value.</li><li>If <var>value</var> is an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 value.</li><li>If <var>value</var> is an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsUnsignedElementType\"><a href=\"#sec-isunsignedelementtype\">IsUnsignedElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.</li></ol></li><li>Else,<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of a binary little-endian 2's complement number of bit length <var>elementSize</var> &#215; 8.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, return the BigInt value that corresponds to <var>intValue</var>.</li><li>Otherwise, return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>intValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-numeric-types-number-exponentiate": {"num": "6.1.6.1.3", "title": "#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )", "html": "<emu-clause id=\"sec-numeric-types-number-exponentiate\" oldids=\"sec-applying-the-exp-operator\">\n          <span id=\"sec-applying-the-exp-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-exponentiate\">#sec-numeric-types-number-exponentiate</span> Number::exponentiate ( <var>base</var>, <var>exponent</var> )</h1>\n          <p>\n            Returns an implementation-dependent approximation of the result of raising <var>base</var> to the power <var>exponent</var>.\n          \n          </p>\n          <ul>\n            <li>If <var>exponent</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>+0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>-0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>NaN</emu-val> and <var>exponent</var> is nonzero, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> &lt; 0 and <var>base</var> is finite and <var>exponent</var> is finite and <var>exponent</var> is not an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>NaN</emu-val>.</li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>The result of <var>base</var> <code>**</code> <var>exponent</var> when <var>base</var> is <emu-val>1</emu-val> or <emu-val>-1</emu-val> and <var>exponent</var> is <emu-val>+Infinity</emu-val> or <emu-val>-Infinity</emu-val> differs from <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The first edition of ECMAScript specified a result of <emu-val>NaN</emu-val> for this operation, whereas later versions of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> specified <emu-val>1</emu-val>. The historical ECMAScript behaviour is preserved for compatibility reasons.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-multiply": {"num": "6.1.6.1.4", "title": "#sec-numeric-types-number-multiply Number::multiply ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-multiply\" oldids=\"sec-applying-the-mul-operator\">\n          <span id=\"sec-applying-the-mul-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-multiply\">#sec-numeric-types-number-multiply</span> Number::multiply ( <var>x</var>, <var>y</var> )</h1>\n          <p>The <code>*</code> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> performs multiplication, producing the product of <var>x</var> and <var>y</var>. Multiplication is commutative. Multiplication is not always associative in ECMAScript, because of finite precision.</p>\n          <p>The result of a floating-point multiplication is governed by the rules of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary double-precision arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n            \n            </li>\n            <li>\n              Multiplication of an infinity by a zero results in <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              Multiplication of an infinity by an infinity results in an infinity. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              Multiplication of an infinity by a finite nonzero value results in a signed infinity. The sign is determined by the rule already stated above.\n            \n            </li>\n            <li>\n              In the remaining cases, where neither an infinity nor <emu-val>NaN</emu-val> is involved, the product is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the result is then an infinity of appropriate sign. If the magnitude is too small to represent, the result is then a zero of appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            \n            </li>\n          </ul>\n        </emu-clause>\n\n        "}, "sec-math.fround": {"num": "20.3.2.17", "title": "#sec-math.fround Math.fround ( x )", "html": "<emu-clause id=\"sec-math.fround\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.fround\">#sec-math.fround</span> Math.fround ( <var>x</var> )</h1>\n        <p>When <code>Math.fround</code> is called with argument <var>x</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <var>x</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>x</var> is one of <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, <emu-val>+&#8734;</emu-val>, <emu-val>-&#8734;</emu-val>, return <var>x</var>.</li><li>Let <var>x32</var> be the result of converting <var>x</var> to a value in <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 format using roundTiesToEven mode.</li><li>Let <var>x64</var> be the result of converting <var>x32</var> to a value in <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 format.</li><li>Return the ECMAScript <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> corresponding to <var>x64</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-function-properties-of-the-math-object": {"num": "20.3.2", "title": "#sec-function-properties-of-the-math-object Function Properties of the Math Object", "html": "<emu-clause id=\"sec-function-properties-of-the-math-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-properties-of-the-math-object\">#sec-function-properties-of-the-math-object</span> Function Properties of the Math Object</h1>\n      <p>Each of the following <code>Math</code> object functions applies the <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> abstract operation to each of its arguments (in left-to-right order if there is more than one). If <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, that <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> is immediately returned. Otherwise, the function performs a computation on the resulting <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>(s). The value returned by each function is a Number.</p>\n      <p>In the function descriptions below, the symbols <emu-val>NaN</emu-val>, <emu-val>-0</emu-val>, <emu-val>+0</emu-val>, <emu-val>-&#8734;</emu-val> and <emu-val>+&#8734;</emu-val> refer to the Number values described in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The behaviour of the functions <code>acos</code>, <code>acosh</code>, <code>asin</code>, <code>asinh</code>, <code>atan</code>, <code>atanh</code>, <code>atan2</code>, <code>cbrt</code>, <code>cos</code>, <code>cosh</code>, <code>exp</code>, <code>expm1</code>, <code>hypot</code>, <code>log</code>,<code>log1p</code>, <code>log2</code>, <code>log10</code>, <code>pow</code>, <code>random</code>, <code>sin</code>, <code>sinh</code>, <code>sqrt</code>, <code>tan</code>, and <code>tanh</code> is not precisely specified here except to require specific results for certain argument values that represent boundary cases of interest. For other argument values, these functions are intended to compute approximations to the results of familiar mathematical functions, but some latitude is allowed in the choice of approximation algorithms. The general intent is that an implementer should be able to use the same mathematical library for ECMAScript on a given hardware platform that is available to C programmers on that platform.</p>\n        <p>Although the choice of algorithms is left to the implementation, it is recommended (but not specified by this standard) that implementations use the approximation algorithms for <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> arithmetic contained in <code>fdlibm</code>, the freely distributable mathematical library from Sun Microsystems (<a href=\"http://www.netlib.org/fdlibm\">http://www.netlib.org/fdlibm</a>).</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-math.abs\"><h1><span class=\"secnum\">20.3.2.1</span>#sec-math.abs Math.abs ( x )</h1>...</div><div id=\"excluded-sec-math.acos\"><h1><span class=\"secnum\">20.3.2.2</span>#sec-math.acos Math.acos ( x )</h1>...</div><div id=\"excluded-sec-math.acosh\"><h1><span class=\"secnum\">20.3.2.3</span>#sec-math.acosh Math.acosh ( x )</h1>...</div><div id=\"excluded-sec-math.asin\"><h1><span class=\"secnum\">20.3.2.4</span>#sec-math.asin Math.asin ( x )</h1>...</div><div id=\"excluded-sec-math.asinh\"><h1><span class=\"secnum\">20.3.2.5</span>#sec-math.asinh Math.asinh ( x )</h1>...</div><div id=\"excluded-sec-math.atan\"><h1><span class=\"secnum\">20.3.2.6</span>#sec-math.atan Math.atan ( x )</h1>...</div><div id=\"excluded-sec-math.atanh\"><h1><span class=\"secnum\">20.3.2.7</span>#sec-math.atanh Math.atanh ( x )</h1>...</div><div id=\"excluded-sec-math.atan2\"><h1><span class=\"secnum\">20.3.2.8</span>#sec-math.atan2 Math.atan2 ( y, x )</h1>...</div><div id=\"excluded-sec-math.cbrt\"><h1><span class=\"secnum\">20.3.2.9</span>#sec-math.cbrt Math.cbrt ( x )</h1>...</div><div id=\"excluded-sec-math.ceil\"><h1><span class=\"secnum\">20.3.2.10</span>#sec-math.ceil Math.ceil ( x )</h1>...</div><div id=\"excluded-sec-math.clz32\"><h1><span class=\"secnum\">20.3.2.11</span>#sec-math.clz32 Math.clz32 ( x )</h1>...</div><div id=\"excluded-sec-math.cos\"><h1><span class=\"secnum\">20.3.2.12</span>#sec-math.cos Math.cos ( x )</h1>...</div><div id=\"excluded-sec-math.cosh\"><h1><span class=\"secnum\">20.3.2.13</span>#sec-math.cosh Math.cosh ( x )</h1>...</div><div id=\"excluded-sec-math.exp\"><h1><span class=\"secnum\">20.3.2.14</span>#sec-math.exp Math.exp ( x )</h1>...</div><div id=\"excluded-sec-math.expm1\"><h1><span class=\"secnum\">20.3.2.15</span>#sec-math.expm1 Math.expm1 ( x )</h1>...</div><div id=\"excluded-sec-math.floor\"><h1><span class=\"secnum\">20.3.2.16</span>#sec-math.floor Math.floor ( x )</h1>...</div><div id=\"excluded-sec-math.fround\"><h1><span class=\"secnum\">20.3.2.17</span>#sec-math.fround Math.fround ( x )</h1>...</div><div id=\"excluded-sec-math.hypot\"><h1><span class=\"secnum\">20.3.2.18</span>#sec-math.hypot Math.hypot ( value1, value2, ...values )</h1>...</div><div id=\"excluded-sec-math.imul\"><h1><span class=\"secnum\">20.3.2.19</span>#sec-math.imul Math.imul ( x, y )</h1>...</div><div id=\"excluded-sec-math.log\"><h1><span class=\"secnum\">20.3.2.20</span>#sec-math.log Math.log ( x )</h1>...</div><div id=\"excluded-sec-math.log1p\"><h1><span class=\"secnum\">20.3.2.21</span>#sec-math.log1p Math.log1p ( x )</h1>...</div><div id=\"excluded-sec-math.log10\"><h1><span class=\"secnum\">20.3.2.22</span>#sec-math.log10 Math.log10 ( x )</h1>...</div><div id=\"excluded-sec-math.log2\"><h1><span class=\"secnum\">20.3.2.23</span>#sec-math.log2 Math.log2 ( x )</h1>...</div><div id=\"excluded-sec-math.max\"><h1><span class=\"secnum\">20.3.2.24</span>#sec-math.max Math.max ( value1, value2, ...values )</h1>...</div><div id=\"excluded-sec-math.min\"><h1><span class=\"secnum\">20.3.2.25</span>#sec-math.min Math.min ( value1, value2, ...values )</h1>...</div><div id=\"excluded-sec-math.pow\"><h1><span class=\"secnum\">20.3.2.26</span>#sec-math.pow Math.pow ( base, exponent )</h1>...</div><div id=\"excluded-sec-math.random\"><h1><span class=\"secnum\">20.3.2.27</span>#sec-math.random Math.random ( )</h1>...</div><div id=\"excluded-sec-math.round\"><h1><span class=\"secnum\">20.3.2.28</span>#sec-math.round Math.round ( x )</h1>...</div><div id=\"excluded-sec-math.sign\"><h1><span class=\"secnum\">20.3.2.29</span>#sec-math.sign Math.sign ( x )</h1>...</div><div id=\"excluded-sec-math.sin\"><h1><span class=\"secnum\">20.3.2.30</span>#sec-math.sin Math.sin ( x )</h1>...</div><div id=\"excluded-sec-math.sinh\"><h1><span class=\"secnum\">20.3.2.31</span>#sec-math.sinh Math.sinh ( x )</h1>...</div><div id=\"excluded-sec-math.sqrt\"><h1><span class=\"secnum\">20.3.2.32</span>#sec-math.sqrt Math.sqrt ( x )</h1>...</div><div id=\"excluded-sec-math.tan\"><h1><span class=\"secnum\">20.3.2.33</span>#sec-math.tan Math.tan ( x )</h1>...</div><div id=\"excluded-sec-math.tanh\"><h1><span class=\"secnum\">20.3.2.34</span>#sec-math.tanh Math.tanh ( x )</h1>...</div><div id=\"excluded-sec-math.trunc\"><h1><span class=\"secnum\">20.3.2.35</span>#sec-math.trunc Math.trunc ( x )</h1>...</div></emu-clause>\n  "}, "sec-numeric-types-number-add": {"num": "6.1.6.1.7", "title": "#sec-numeric-types-number-add Number::add ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-add\" oldids=\"sec-applying-the-additive-operators-to-numbers\">\n          <span id=\"sec-applying-the-additive-operators-to-numbers\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-add\">#sec-numeric-types-number-add</span> Number::add ( <var>x</var>, <var>y</var> )</h1>\n          <p>The <code>+</code> operator performs addition when applied to <var>x</var> and <var>y</var>, producing the sum of the operands.</p>\n          <p>Addition is a commutative operation, but not always associative.</p>\n          <p>The result of an addition is determined using the rules of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary double-precision arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              The sum of two infinities of opposite sign is <emu-val>NaN</emu-val>.\n            \n            </li>\n            <li>\n              The sum of two infinities of the same sign is the infinity of that sign.\n            \n            </li>\n            <li>\n              The sum of an infinity and a finite value is equal to the infinite operand.\n            \n            </li>\n            <li>\n              The sum of two negative zeroes is <emu-val>-0</emu-val>. The sum of two positive zeroes, or of two zeroes of opposite sign, is <emu-val>+0</emu-val>.\n            \n            </li>\n            <li>\n              The sum of a zero and a nonzero finite value is equal to the nonzero operand.\n            \n            </li>\n            <li>\n              The sum of two nonzero finite values of the same magnitude and opposite sign is <emu-val>+0</emu-val>.\n            \n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, and the operands have the same sign or have different magnitudes, the sum is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the operation overflows and the result is then an infinity of appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            \n            </li>\n          </ul>\n        </emu-clause>\n\n        "}}, "figData": {"table-the-typedarray-constructors": "Table 63"}}}