{"from": {"secList": ["sec-terms-and-definitions", "sec-primitive-value", "sec-ecmascript-overview"], "secData": {"sec-terms-and-definitions": {"num": "4.3", "title": "#sec-terms-and-definitions Terms and Definitions", "html": "<emu-clause id=\"sec-terms-and-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-terms-and-definitions\">#sec-terms-and-definitions</span> Terms and Definitions</h1>\n    <p>For the purposes of this document, the following terms and definitions apply.</p>\n\n    <div id=\"excluded-sec-type\"><h1><span class=\"secnum\">4.3.1</span>#sec-type type</h1>...</div><div id=\"excluded-sec-primitive-value\"><h1><span class=\"secnum\">4.3.2</span>#sec-primitive-value primitive value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-object\"><h1><span class=\"secnum\">4.3.3</span>#sec-terms-and-definitions-object object</h1>...</div><div id=\"excluded-sec-constructor\"><h1><span class=\"secnum\">4.3.4</span>#sec-constructor constructor</h1>...</div><div id=\"excluded-sec-terms-and-definitions-prototype\"><h1><span class=\"secnum\">4.3.5</span>#sec-terms-and-definitions-prototype prototype</h1>...</div><div id=\"excluded-sec-ordinary-object\"><h1><span class=\"secnum\">4.3.6</span>#sec-ordinary-object ordinary object</h1>...</div><div id=\"excluded-sec-exotic-object\"><h1><span class=\"secnum\">4.3.7</span>#sec-exotic-object exotic object</h1>...</div><div id=\"excluded-sec-standard-object\"><h1><span class=\"secnum\">4.3.8</span>#sec-standard-object standard object</h1>...</div><div id=\"excluded-sec-built-in-object\"><h1><span class=\"secnum\">4.3.9</span>#sec-built-in-object built-in object</h1>...</div><div id=\"excluded-sec-undefined-value\"><h1><span class=\"secnum\">4.3.10</span>#sec-undefined-value undefined value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-undefined-type\"><h1><span class=\"secnum\">4.3.11</span>#sec-terms-and-definitions-undefined-type Undefined type</h1>...</div><div id=\"excluded-sec-null-value\"><h1><span class=\"secnum\">4.3.12</span>#sec-null-value null value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-null-type\"><h1><span class=\"secnum\">4.3.13</span>#sec-terms-and-definitions-null-type Null type</h1>...</div><div id=\"excluded-sec-terms-and-definitions-boolean-value\"><h1><span class=\"secnum\">4.3.14</span>#sec-terms-and-definitions-boolean-value Boolean value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-boolean-type\"><h1><span class=\"secnum\">4.3.15</span>#sec-terms-and-definitions-boolean-type Boolean type</h1>...</div><div id=\"excluded-sec-boolean-object\"><h1><span class=\"secnum\">4.3.16</span>#sec-boolean-object Boolean object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-string-value\"><h1><span class=\"secnum\">4.3.17</span>#sec-terms-and-definitions-string-value String value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-string-type\"><h1><span class=\"secnum\">4.3.18</span>#sec-terms-and-definitions-string-type String type</h1>...</div><div id=\"excluded-sec-string-object\"><h1><span class=\"secnum\">4.3.19</span>#sec-string-object String object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-number-value\"><h1><span class=\"secnum\">4.3.20</span>#sec-terms-and-definitions-number-value Number value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-number-type\"><h1><span class=\"secnum\">4.3.21</span>#sec-terms-and-definitions-number-type Number type</h1>...</div><div id=\"excluded-sec-number-object\"><h1><span class=\"secnum\">4.3.22</span>#sec-number-object Number object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-infinity\"><h1><span class=\"secnum\">4.3.23</span>#sec-terms-and-definitions-infinity Infinity</h1>...</div><div id=\"excluded-sec-terms-and-definitions-nan\"><h1><span class=\"secnum\">4.3.24</span>#sec-terms-and-definitions-nan NaN</h1>...</div><div id=\"excluded-sec-symbol-value\"><h1><span class=\"secnum\">4.3.25</span>#sec-symbol-value Symbol value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-symbol-type\"><h1><span class=\"secnum\">4.3.26</span>#sec-terms-and-definitions-symbol-type Symbol type</h1>...</div><div id=\"excluded-sec-symbol-object\"><h1><span class=\"secnum\">4.3.27</span>#sec-symbol-object Symbol object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-function\"><h1><span class=\"secnum\">4.3.28</span>#sec-terms-and-definitions-function function</h1>...</div><div id=\"excluded-sec-built-in-function\"><h1><span class=\"secnum\">4.3.29</span>#sec-built-in-function built-in function</h1>...</div><div id=\"excluded-sec-property\"><h1><span class=\"secnum\">4.3.30</span>#sec-property property</h1>...</div><div id=\"excluded-sec-method\"><h1><span class=\"secnum\">4.3.31</span>#sec-method method</h1>...</div><div id=\"excluded-sec-built-in-method\"><h1><span class=\"secnum\">4.3.32</span>#sec-built-in-method built-in method</h1>...</div><div id=\"excluded-sec-attribute\"><h1><span class=\"secnum\">4.3.33</span>#sec-attribute attribute</h1>...</div><div id=\"excluded-sec-own-property\"><h1><span class=\"secnum\">4.3.34</span>#sec-own-property own property</h1>...</div><div id=\"excluded-sec-inherited-property\"><h1><span class=\"secnum\">4.3.35</span>#sec-inherited-property inherited property</h1>...</div></emu-clause>\n\n  "}, "sec-primitive-value": {"num": "4.3.2", "title": "#sec-primitive-value primitive value", "html": "<emu-clause id=\"sec-primitive-value\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-primitive-value\">#sec-primitive-value</span> primitive value</h1>\n      <p>member of one of the types Undefined, Null, Boolean, Number, Symbol, or String as defined in clause  <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref></p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A primitive value is a datum that is represented directly at the lowest level of the language implementation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ecmascript-overview": {"num": "4.2", "title": "#sec-ecmascript-overview ECMAScript Overview", "html": "<emu-clause id=\"sec-ecmascript-overview\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-overview\">#sec-ecmascript-overview</span> ECMAScript Overview</h1>\n    <p>The following is an informal overview of ECMAScript&#8212;not all parts of the language are described. This overview is not part of the standard proper.</p>\n    <p>ECMAScript is object-based: basic language and host facilities are provided by objects, and an ECMAScript program is a cluster of communicating objects. In ECMAScript, an  <em>object</em> is a collection of zero or more  <em>properties</em> each with  <em>attributes</em> that determine how each property can be used&#8212;for example, when the Writable attribute for a property is set to <emu-val>false</emu-val>, any attempt by executed ECMAScript code to assign a different value to the property fails. Properties are containers that hold other objects,  <em>primitive values</em>, or  <em>functions</em>. A primitive value is a member of one of the following built-in types:  <b>Undefined</b>,  <b>Null</b>,  <b>Boolean</b>,  <b>Number</b>,  <b>String</b>, and  <b>Symbol;</b> an object is a member of the built-in type  <b>Object</b>; and a function is a callable object. A function that is associated with an object via a property is called a  <em>method</em>.</p>\n    <p>ECMAScript defines a collection of  <em>built-in objects</em> that round out the definition of ECMAScript entities. These built-in objects include the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>; objects that are fundamental to the <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of the language including <code>Object</code>, <code>Function</code>, <code>Boolean</code>, <code>Symbol</code>, and various <code>Error</code> objects; objects that represent and manipulate numeric values including <code>Math</code>, <code>Number</code>, and <code>Date</code>; the text processing objects <code>String</code> and <code>RegExp</code>; objects that are indexed collections of values including <code>Array</code> and nine different kinds of Typed Arrays whose elements all have a specific numeric data representation; keyed collections including <code>Map</code> and <code>Set</code> objects; objects supporting structured data including the <code>JSON</code> object, <code>ArrayBuffer</code>, <code>SharedArrayBuffer</code>, and <code>DataView</code>; objects supporting control abstractions including generator functions and <code>Promise</code> objects; and reflection objects including <code>Proxy</code> and <code>Reflect</code>.</p>\n    <p>ECMAScript also defines a set of built-in  <em>operators</em>. ECMAScript operators include various unary operations, multiplicative operators, additive operators, bitwise shift operators, relational operators, equality operators, binary bitwise operators, binary logical operators, assignment operators, and the comma operator.</p>\n    <p>Large ECMAScript programs are supported by  <em>modules</em> which allow a program to be divided into multiple sequences of statements and declarations. Each module explicitly identifies declarations it uses that need to be provided by other modules and which of its declarations are available for use by other modules.</p>\n    <p>ECMAScript syntax intentionally resembles Java syntax. ECMAScript syntax is relaxed to enable it to serve as an easy-to-use scripting language. For example, a variable is not required to have its type declared nor are types associated with properties, and defined functions are not required to have their declarations appear textually before calls to them.</p>\n\n    <div id=\"excluded-sec-objects\"><h1><span class=\"secnum\">4.2.1</span>#sec-objects Objects</h1>...</div><div id=\"excluded-sec-strict-variant-of-ecmascript\"><h1><span class=\"secnum\">4.2.2</span>#sec-strict-variant-of-ecmascript The Strict Variant of ECMAScript</h1>...</div></emu-clause>\n\n  "}}, "figData": {}}, "to": {"secList": ["sec-terms-and-definitions-bigint-type", "sec-terms-and-definitions-bigint-value", "sec-terms-and-definitions", "sec-primitive-value", "sec-ecmascript-overview", "sec-bigint-object"], "secData": {"sec-terms-and-definitions-bigint-type": {"num": "4.3.26", "title": "#sec-terms-and-definitions-bigint-type BigInt type", "html": "<emu-clause id=\"sec-terms-and-definitions-bigint-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-terms-and-definitions-bigint-type\">#sec-terms-and-definitions-bigint-type</span> BigInt type</h1>\n      <p>set of all possible BigInt values</p>\n    </emu-clause>\n\n    "}, "sec-terms-and-definitions-bigint-value": {"num": "4.3.25", "title": "#sec-terms-and-definitions-bigint-value BigInt value", "html": "<emu-clause id=\"sec-terms-and-definitions-bigint-value\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-terms-and-definitions-bigint-value\">#sec-terms-and-definitions-bigint-value</span> BigInt value</h1>\n      <p>primitive value corresponding to an arbitrary-precision <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value</p>\n    </emu-clause>\n\n    "}, "sec-terms-and-definitions": {"num": "4.3", "title": "#sec-terms-and-definitions Terms and Definitions", "html": "<emu-clause id=\"sec-terms-and-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-terms-and-definitions\">#sec-terms-and-definitions</span> Terms and Definitions</h1>\n    <p>For the purposes of this document, the following terms and definitions apply.</p>\n\n    <div id=\"excluded-sec-type\"><h1><span class=\"secnum\">4.3.1</span>#sec-type type</h1>...</div><div id=\"excluded-sec-primitive-value\"><h1><span class=\"secnum\">4.3.2</span>#sec-primitive-value primitive value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-object\"><h1><span class=\"secnum\">4.3.3</span>#sec-terms-and-definitions-object object</h1>...</div><div id=\"excluded-sec-constructor\"><h1><span class=\"secnum\">4.3.4</span>#sec-constructor constructor</h1>...</div><div id=\"excluded-sec-terms-and-definitions-prototype\"><h1><span class=\"secnum\">4.3.5</span>#sec-terms-and-definitions-prototype prototype</h1>...</div><div id=\"excluded-sec-ordinary-object\"><h1><span class=\"secnum\">4.3.6</span>#sec-ordinary-object ordinary object</h1>...</div><div id=\"excluded-sec-exotic-object\"><h1><span class=\"secnum\">4.3.7</span>#sec-exotic-object exotic object</h1>...</div><div id=\"excluded-sec-standard-object\"><h1><span class=\"secnum\">4.3.8</span>#sec-standard-object standard object</h1>...</div><div id=\"excluded-sec-built-in-object\"><h1><span class=\"secnum\">4.3.9</span>#sec-built-in-object built-in object</h1>...</div><div id=\"excluded-sec-undefined-value\"><h1><span class=\"secnum\">4.3.10</span>#sec-undefined-value undefined value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-undefined-type\"><h1><span class=\"secnum\">4.3.11</span>#sec-terms-and-definitions-undefined-type Undefined type</h1>...</div><div id=\"excluded-sec-null-value\"><h1><span class=\"secnum\">4.3.12</span>#sec-null-value null value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-null-type\"><h1><span class=\"secnum\">4.3.13</span>#sec-terms-and-definitions-null-type Null type</h1>...</div><div id=\"excluded-sec-terms-and-definitions-boolean-value\"><h1><span class=\"secnum\">4.3.14</span>#sec-terms-and-definitions-boolean-value Boolean value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-boolean-type\"><h1><span class=\"secnum\">4.3.15</span>#sec-terms-and-definitions-boolean-type Boolean type</h1>...</div><div id=\"excluded-sec-boolean-object\"><h1><span class=\"secnum\">4.3.16</span>#sec-boolean-object Boolean object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-string-value\"><h1><span class=\"secnum\">4.3.17</span>#sec-terms-and-definitions-string-value String value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-string-type\"><h1><span class=\"secnum\">4.3.18</span>#sec-terms-and-definitions-string-type String type</h1>...</div><div id=\"excluded-sec-string-object\"><h1><span class=\"secnum\">4.3.19</span>#sec-string-object String object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-number-value\"><h1><span class=\"secnum\">4.3.20</span>#sec-terms-and-definitions-number-value Number value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-number-type\"><h1><span class=\"secnum\">4.3.21</span>#sec-terms-and-definitions-number-type Number type</h1>...</div><div id=\"excluded-sec-number-object\"><h1><span class=\"secnum\">4.3.22</span>#sec-number-object Number object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-infinity\"><h1><span class=\"secnum\">4.3.23</span>#sec-terms-and-definitions-infinity Infinity</h1>...</div><div id=\"excluded-sec-terms-and-definitions-nan\"><h1><span class=\"secnum\">4.3.24</span>#sec-terms-and-definitions-nan NaN</h1>...</div><div id=\"excluded-sec-terms-and-definitions-bigint-value\"><h1><span class=\"secnum\">4.3.25</span>#sec-terms-and-definitions-bigint-value BigInt value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-bigint-type\"><h1><span class=\"secnum\">4.3.26</span>#sec-terms-and-definitions-bigint-type BigInt type</h1>...</div><div id=\"excluded-sec-bigint-object\"><h1><span class=\"secnum\">4.3.27</span>#sec-bigint-object BigInt object</h1>...</div><div id=\"excluded-sec-symbol-value\"><h1><span class=\"secnum\">4.3.28</span>#sec-symbol-value Symbol value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-symbol-type\"><h1><span class=\"secnum\">4.3.29</span>#sec-terms-and-definitions-symbol-type Symbol type</h1>...</div><div id=\"excluded-sec-symbol-object\"><h1><span class=\"secnum\">4.3.30</span>#sec-symbol-object Symbol object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-function\"><h1><span class=\"secnum\">4.3.31</span>#sec-terms-and-definitions-function function</h1>...</div><div id=\"excluded-sec-built-in-function\"><h1><span class=\"secnum\">4.3.32</span>#sec-built-in-function built-in function</h1>...</div><div id=\"excluded-sec-property\"><h1><span class=\"secnum\">4.3.33</span>#sec-property property</h1>...</div><div id=\"excluded-sec-method\"><h1><span class=\"secnum\">4.3.34</span>#sec-method method</h1>...</div><div id=\"excluded-sec-built-in-method\"><h1><span class=\"secnum\">4.3.35</span>#sec-built-in-method built-in method</h1>...</div><div id=\"excluded-sec-attribute\"><h1><span class=\"secnum\">4.3.36</span>#sec-attribute attribute</h1>...</div><div id=\"excluded-sec-own-property\"><h1><span class=\"secnum\">4.3.37</span>#sec-own-property own property</h1>...</div><div id=\"excluded-sec-inherited-property\"><h1><span class=\"secnum\">4.3.38</span>#sec-inherited-property inherited property</h1>...</div></emu-clause>\n\n  "}, "sec-primitive-value": {"num": "4.3.2", "title": "#sec-primitive-value primitive value", "html": "<emu-clause id=\"sec-primitive-value\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-primitive-value\">#sec-primitive-value</span> primitive value</h1>\n      <p>member of one of the types Undefined, Null, Boolean, Number, BigInt, Symbol, or String as defined in clause  <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref></p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A primitive value is a datum that is represented directly at the lowest level of the language implementation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ecmascript-overview": {"num": "4.2", "title": "#sec-ecmascript-overview ECMAScript Overview", "html": "<emu-clause id=\"sec-ecmascript-overview\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-overview\">#sec-ecmascript-overview</span> ECMAScript Overview</h1>\n    <p>The following is an informal overview of ECMAScript&#8212;not all parts of the language are described. This overview is not part of the standard proper.</p>\n    <p>ECMAScript is object-based: basic language and host facilities are provided by objects, and an ECMAScript program is a cluster of communicating objects. In ECMAScript, an  <em>object</em> is a collection of zero or more  <em>properties</em> each with  <em>attributes</em> that determine how each property can be used&#8212;for example, when the Writable attribute for a property is set to <emu-val>false</emu-val>, any attempt by executed ECMAScript code to assign a different value to the property fails. Properties are containers that hold other objects,  <em>primitive values</em>, or  <em>functions</em>. A primitive value is a member of one of the following built-in types:  <b>Undefined</b>,  <b>Null</b>,  <b>Boolean</b>,  <b>Number</b>,  <b>BigInt</b>,  <b>String</b>, and  <b>Symbol;</b> an object is a member of the built-in type  <b>Object</b>; and a function is a callable object. A function that is associated with an object via a property is called a  <em>method</em>.</p>\n    <p>ECMAScript defines a collection of  <em>built-in objects</em> that round out the definition of ECMAScript entities. These built-in objects include the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>; objects that are fundamental to the <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of the language including <code>Object</code>, <code>Function</code>, <code>Boolean</code>, <code>Symbol</code>, and various <code>Error</code> objects; objects that represent and manipulate numeric values including <code>Math</code>, <code>Number</code>, and <code>Date</code>; the text processing objects <code>String</code> and <code>RegExp</code>; objects that are indexed collections of values including <code>Array</code> and nine different kinds of Typed Arrays whose elements all have a specific numeric data representation; keyed collections including <code>Map</code> and <code>Set</code> objects; objects supporting structured data including the <code>JSON</code> object, <code>ArrayBuffer</code>, <code>SharedArrayBuffer</code>, and <code>DataView</code>; objects supporting control abstractions including generator functions and <code>Promise</code> objects; and reflection objects including <code>Proxy</code> and <code>Reflect</code>.</p>\n    <p>ECMAScript also defines a set of built-in  <em>operators</em>. ECMAScript operators include various unary operations, multiplicative operators, additive operators, bitwise shift operators, relational operators, equality operators, binary bitwise operators, binary logical operators, assignment operators, and the comma operator.</p>\n    <p>Large ECMAScript programs are supported by  <em>modules</em> which allow a program to be divided into multiple sequences of statements and declarations. Each module explicitly identifies declarations it uses that need to be provided by other modules and which of its declarations are available for use by other modules.</p>\n    <p>ECMAScript syntax intentionally resembles Java syntax. ECMAScript syntax is relaxed to enable it to serve as an easy-to-use scripting language. For example, a variable is not required to have its type declared nor are types associated with properties, and defined functions are not required to have their declarations appear textually before calls to them.</p>\n\n    <div id=\"excluded-sec-objects\"><h1><span class=\"secnum\">4.2.1</span>#sec-objects Objects</h1>...</div><div id=\"excluded-sec-strict-variant-of-ecmascript\"><h1><span class=\"secnum\">4.2.2</span>#sec-strict-variant-of-ecmascript The Strict Variant of ECMAScript</h1>...</div></emu-clause>\n\n  "}, "sec-bigint-object": {"num": "4.3.27", "title": "#sec-bigint-object BigInt object", "html": "<emu-clause id=\"sec-bigint-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint-object\">#sec-bigint-object</span> BigInt object</h1>\n      <p>member of the Object type that is an instance of the standard built-in <code>BigInt</code> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref></p>\n    </emu-clause>\n\n    "}}, "figData": {}}}