{"from": {"secList": ["sec-string.prototype.trimstart", "sec-string.prototype.trim", "sec-string.prototype.trimend", "sec-%typedarray%.prototype.copywithin"], "secData": {"sec-string.prototype.trimstart": {"num": "21.1.3.30", "title": "#sec-string.prototype.trimstart String.prototype.trimStart ( )", "html": "<emu-clause id=\"sec-string.prototype.trimstart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trimstart\">#sec-string.prototype.trimstart</span> String.prototype.trimStart ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <code>\"start\"</code>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trimStart</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.trim": {"num": "21.1.3.28", "title": "#sec-string.prototype.trim String.prototype.trim ( )", "html": "<emu-clause id=\"sec-string.prototype.trim\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</span> String.prototype.trim ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <code>\"start+end\"</code>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trim</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-trimstring\"><h1><span class=\"secnum\">21.1.3.28.1</span>#sec-trimstring Runtime Semantics: TrimString ( string, where )</h1>...</div></emu-clause>\n\n      "}, "sec-string.prototype.trimend": {"num": "21.1.3.29", "title": "#sec-string.prototype.trimend String.prototype.trimEnd ( )", "html": "<emu-clause id=\"sec-string.prototype.trimend\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trimend\">#sec-string.prototype.trimend</span> String.prototype.trimEnd ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <code>\"end\"</code>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trimEnd</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.copywithin": {"num": "22.2.3.5", "title": "#sec-%typedarray%.prototype.copywithin %TypedArray%.prototype.copyWithin ( target, start [ , end ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.copywithin\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.copywithin\">#sec-%typedarray%.prototype.copywithin</span> %TypedArray%.prototype.copyWithin ( <var>target</var>, <var>start</var> [ , <var>end</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.copyWithin</code> are the same as for <code>Array.prototype.copyWithin</code> as defined in  <emu-xref href=\"#sec-array.prototype.copywithin\"><a href=\"#sec-array.prototype.copywithin\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.copywithin\">#sec-array.prototype.copywithin</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>Let <var>relativeTarget</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>target</var>).</li><li>If <var>relativeTarget</var> &lt; 0, let <var>to</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeTarget</var>), 0); else let <var>to</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeTarget</var>, <var>len</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>from</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>from</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>count</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>final</var> - <var>from</var>, <var>len</var> - <var>to</var>).</li><li>If <var>count</var> &gt; 0, then<ol><li>NOTE: The copying must be performed in a manner that preserves the bit-level encoding of the source data.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>typedArrayName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>typedArrayName</var>.</li><li>Let <var>byteOffset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>toByteIndex</var> be <var>to</var> &#215; <var>elementSize</var> + <var>byteOffset</var>.</li><li>Let <var>fromByteIndex</var> be <var>from</var> &#215; <var>elementSize</var> + <var>byteOffset</var>.</li><li>Let <var>countBytes</var> be <var>count</var> &#215; <var>elementSize</var>.</li><li>If <var>fromByteIndex</var> &lt; <var>toByteIndex</var> and <var>toByteIndex</var> &lt; <var>fromByteIndex</var> + <var>countBytes</var>, then<ol><li>Let <var>direction</var> be -1.</li><li>Set <var>fromByteIndex</var> to <var>fromByteIndex</var> + <var>countBytes</var> - 1.</li><li>Set <var>toByteIndex</var> to <var>toByteIndex</var> + <var>countBytes</var> - 1.</li></ol></li><li>Else,<ol><li>Let <var>direction</var> be 1.</li></ol></li><li>Repeat, while <var>countBytes</var> &gt; 0<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>fromByteIndex</var>, <code>\"Uint8\"</code>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>toByteIndex</var>, <code>\"Uint8\"</code>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>fromByteIndex</var> to <var>fromByteIndex</var> + <var>direction</var>.</li><li>Set <var>toByteIndex</var> to <var>toByteIndex</var> + <var>direction</var>.</li><li>Set <var>countBytes</var> to <var>countBytes</var> - 1.</li></ol></li></ol></li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-validatetypedarray\"><h1><span class=\"secnum\">22.2.3.5.1</span>#sec-validatetypedarray Runtime Semantics: ValidateTypedArray ( O )</h1>...</div></emu-clause>\n\n      "}}, "figData": {"table-4": "Table 4", "table-49": "Table 60"}}, "to": {"secList": ["sec-string.prototype.trimstart", "sec-string.prototype.trim", "sec-string.prototype.trimend", "sec-%typedarray%.prototype.copywithin"], "secData": {"sec-string.prototype.trimstart": {"num": "21.1.3.30", "title": "#sec-string.prototype.trimstart String.prototype.trimStart ( )", "html": "<emu-clause id=\"sec-string.prototype.trimstart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trimstart\">#sec-string.prototype.trimstart</span> String.prototype.trimStart ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <code>\"start\"</code>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trimStart</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.trim": {"num": "21.1.3.28", "title": "#sec-string.prototype.trim String.prototype.trim ( )", "html": "<emu-clause id=\"sec-string.prototype.trim\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</span> String.prototype.trim ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <code>\"start+end\"</code>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trim</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-trimstring\"><h1><span class=\"secnum\">21.1.3.28.1</span>#sec-trimstring Runtime Semantics: TrimString ( string, where )</h1>...</div></emu-clause>\n\n      "}, "sec-string.prototype.trimend": {"num": "21.1.3.29", "title": "#sec-string.prototype.trimend String.prototype.trimEnd ( )", "html": "<emu-clause id=\"sec-string.prototype.trimend\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trimend\">#sec-string.prototype.trimend</span> String.prototype.trimEnd ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <code>\"end\"</code>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trimEnd</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.copywithin": {"num": "22.2.3.5", "title": "#sec-%typedarray%.prototype.copywithin %TypedArray%.prototype.copyWithin ( target, start [ , end ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.copywithin\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.copywithin\">#sec-%typedarray%.prototype.copywithin</span> %TypedArray%.prototype.copyWithin ( <var>target</var>, <var>start</var> [ , <var>end</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.copyWithin</code> are the same as for <code>Array.prototype.copyWithin</code> as defined in  <emu-xref href=\"#sec-array.prototype.copywithin\"><a href=\"#sec-array.prototype.copywithin\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.copywithin\">#sec-array.prototype.copywithin</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>Let <var>relativeTarget</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>target</var>).</li><li>If <var>relativeTarget</var> &lt; 0, let <var>to</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeTarget</var>), 0); else let <var>to</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeTarget</var>, <var>len</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>from</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>from</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>count</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>final</var> - <var>from</var>, <var>len</var> - <var>to</var>).</li><li>If <var>count</var> &gt; 0, then<ol><li>NOTE: The copying must be performed in a manner that preserves the bit-level encoding of the source data.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>typedArrayName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>typedArrayName</var>.</li><li>Let <var>byteOffset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>toByteIndex</var> be <var>to</var> &#215; <var>elementSize</var> + <var>byteOffset</var>.</li><li>Let <var>fromByteIndex</var> be <var>from</var> &#215; <var>elementSize</var> + <var>byteOffset</var>.</li><li>Let <var>countBytes</var> be <var>count</var> &#215; <var>elementSize</var>.</li><li>If <var>fromByteIndex</var> &lt; <var>toByteIndex</var> and <var>toByteIndex</var> &lt; <var>fromByteIndex</var> + <var>countBytes</var>, then<ol><li>Let <var>direction</var> be -1.</li><li>Set <var>fromByteIndex</var> to <var>fromByteIndex</var> + <var>countBytes</var> - 1.</li><li>Set <var>toByteIndex</var> to <var>toByteIndex</var> + <var>countBytes</var> - 1.</li></ol></li><li>Else,<ol><li>Let <var>direction</var> be 1.</li></ol></li><li>Repeat, while <var>countBytes</var> &gt; 0<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>fromByteIndex</var>, <code>\"Uint8\"</code>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>toByteIndex</var>, <code>\"Uint8\"</code>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>fromByteIndex</var> to <var>fromByteIndex</var> + <var>direction</var>.</li><li>Set <var>toByteIndex</var> to <var>toByteIndex</var> + <var>direction</var>.</li><li>Set <var>countBytes</var> to <var>countBytes</var> - 1.</li></ol></li></ol></li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-validatetypedarray\"><h1><span class=\"secnum\">22.2.3.5.1</span>#sec-validatetypedarray Runtime Semantics: ValidateTypedArray ( O )</h1>...</div></emu-clause>\n\n      "}}, "figData": {"table-4": "Table 4", "table-49": "Table 60"}}}