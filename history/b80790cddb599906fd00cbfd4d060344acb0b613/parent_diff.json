{"from": {"secList": ["sec-privateelementfind", "sec-privatemethodoraccessoradd", "sec-privateset", "sec-operations-on-objects", "sec-privateget", "sec-relational-operators-runtime-semantics-evaluation", "sec-privatefieldadd"], "secData": {"sec-privateelementfind": {"num": "7.3.26", "title": "#sec-privateelementfind PrivateElementFind ( P, O )", "html": "<emu-clause id=\"sec-privateelementfind\" aoid=\"PrivateElementFind\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateelementfind\">#sec-privateelementfind</span> PrivateElementFind ( <var>P</var>, <var>O</var> )</h1>\n      <p>The abstract operation PrivateElementFind takes arguments <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>) and <var>O</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>O</var>.[[PrivateElements]] contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>P</var>, then<ol><li>Let <var>entry</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li>Return <var>entry</var>.</li></ol></li><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privatemethodoraccessoradd": {"num": "7.3.28", "title": "#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( method, O )", "html": "<emu-clause id=\"sec-privatemethodoraccessoradd\" aoid=\"PrivateMethodOrAccessorAdd\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privatemethodoraccessoradd\">#sec-privatemethodoraccessoradd</span> PrivateMethodOrAccessorAdd ( <var>method</var>, <var>O</var> )</h1>\n      <p>The abstract operation PrivateMethodOrAccessorAdd takes arguments <var>method</var> (a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>) and <var>O</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>method</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>method</var>.[[Key]], <var>O</var>).</li><li>If <var>entry</var> is not <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>method</var> to <var>O</var>.[[PrivateElements]].</li><li>NOTE: The values for private methods and accessors are shared across instances. This step does not create a new copy of the method or accessor.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privateset": {"num": "7.3.30", "title": "#sec-privateset PrivateSet ( P, O, value )", "html": "<emu-clause id=\"sec-privateset\" aoid=\"PrivateSet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateset\">#sec-privateset</span> PrivateSet ( <var>P</var>, <var>O</var>, <var>value</var> )</h1>\n      <p>The abstract operation PrivateSet takes arguments <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>), <var>O</var> (an Object), and <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>P</var>, <var>O</var>).</li><li>If <var>entry</var> is <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>entry</var>.[[Kind]] is <emu-const>field</emu-const>, then<ol><li>Set <var>entry</var>.[[Value]] to <var>value</var>.</li></ol></li><li>Else if <var>entry</var>.[[Kind]] is <emu-const>method</emu-const>, then<ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>entry</var>.[[Kind]] is <emu-const>accessor</emu-const>.</li><li>If <var>entry</var>.[[Set]] is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>setter</var> be <var>entry</var>.[[Set]].</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>setter</var>, <var>O</var>, &#171; <var>value</var> &#187;).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-operations-on-objects": {"num": "7.3", "title": "#sec-operations-on-objects Operations on Objects", "html": "<emu-clause id=\"sec-operations-on-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-operations-on-objects\">#sec-operations-on-objects</span> Operations on Objects</h1>\n\n    <div id=\"excluded-sec-makebasicobject\"><h1><span class=\"secnum\">7.3.1</span>#sec-makebasicobject MakeBasicObject ( internalSlotsList )</h1>...</div><div id=\"excluded-sec-get-o-p\"><h1><span class=\"secnum\">7.3.2</span>#sec-get-o-p Get ( O, P )</h1>...</div><div id=\"excluded-sec-getv\"><h1><span class=\"secnum\">7.3.3</span>#sec-getv GetV ( V, P )</h1>...</div><div id=\"excluded-sec-set-o-p-v-throw\"><h1><span class=\"secnum\">7.3.4</span>#sec-set-o-p-v-throw Set ( O, P, V, Throw )</h1>...</div><div id=\"excluded-sec-createdataproperty\"><h1><span class=\"secnum\">7.3.5</span>#sec-createdataproperty CreateDataProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createmethodproperty\"><h1><span class=\"secnum\">7.3.6</span>#sec-createmethodproperty CreateMethodProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createdatapropertyorthrow\"><h1><span class=\"secnum\">7.3.7</span>#sec-createdatapropertyorthrow CreateDataPropertyOrThrow ( O, P, V )</h1>...</div><div id=\"excluded-sec-definepropertyorthrow\"><h1><span class=\"secnum\">7.3.8</span>#sec-definepropertyorthrow DefinePropertyOrThrow ( O, P, desc )</h1>...</div><div id=\"excluded-sec-deletepropertyorthrow\"><h1><span class=\"secnum\">7.3.9</span>#sec-deletepropertyorthrow DeletePropertyOrThrow ( O, P )</h1>...</div><div id=\"excluded-sec-getmethod\"><h1><span class=\"secnum\">7.3.10</span>#sec-getmethod GetMethod ( V, P )</h1>...</div><div id=\"excluded-sec-hasproperty\"><h1><span class=\"secnum\">7.3.11</span>#sec-hasproperty HasProperty ( O, P )</h1>...</div><div id=\"excluded-sec-hasownproperty\"><h1><span class=\"secnum\">7.3.12</span>#sec-hasownproperty HasOwnProperty ( O, P )</h1>...</div><div id=\"excluded-sec-call\"><h1><span class=\"secnum\">7.3.13</span>#sec-call Call ( F, V [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-construct\"><h1><span class=\"secnum\">7.3.14</span>#sec-construct Construct ( F [ , argumentsList [ , newTarget ] ] )</h1>...</div><div id=\"excluded-sec-setintegritylevel\"><h1><span class=\"secnum\">7.3.15</span>#sec-setintegritylevel SetIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-testintegritylevel\"><h1><span class=\"secnum\">7.3.16</span>#sec-testintegritylevel TestIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-createarrayfromlist\"><h1><span class=\"secnum\">7.3.17</span>#sec-createarrayfromlist CreateArrayFromList ( elements )</h1>...</div><div id=\"excluded-sec-lengthofarraylike\"><h1><span class=\"secnum\">7.3.18</span>#sec-lengthofarraylike LengthOfArrayLike ( obj )</h1>...</div><div id=\"excluded-sec-createlistfromarraylike\"><h1><span class=\"secnum\">7.3.19</span>#sec-createlistfromarraylike CreateListFromArrayLike ( obj [ , elementTypes ] )</h1>...</div><div id=\"excluded-sec-invoke\"><h1><span class=\"secnum\">7.3.20</span>#sec-invoke Invoke ( V, P [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-ordinaryhasinstance\"><h1><span class=\"secnum\">7.3.21</span>#sec-ordinaryhasinstance OrdinaryHasInstance ( C, O )</h1>...</div><div id=\"excluded-sec-speciesconstructor\"><h1><span class=\"secnum\">7.3.22</span>#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )</h1>...</div><div id=\"excluded-sec-enumerableownpropertynames\"><h1><span class=\"secnum\">7.3.23</span>#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )</h1>...</div><div id=\"excluded-sec-getfunctionrealm\"><h1><span class=\"secnum\">7.3.24</span>#sec-getfunctionrealm GetFunctionRealm ( obj )</h1>...</div><div id=\"excluded-sec-copydataproperties\"><h1><span class=\"secnum\">7.3.25</span>#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )</h1>...</div><div id=\"excluded-sec-privateelementfind\"><h1><span class=\"secnum\">7.3.26</span>#sec-privateelementfind PrivateElementFind ( P, O )</h1>...</div><div id=\"excluded-sec-privatefieldadd\"><h1><span class=\"secnum\">7.3.27</span>#sec-privatefieldadd PrivateFieldAdd ( P, O, value )</h1>...</div><div id=\"excluded-sec-privatemethodoraccessoradd\"><h1><span class=\"secnum\">7.3.28</span>#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( method, O )</h1>...</div><div id=\"excluded-sec-privateget\"><h1><span class=\"secnum\">7.3.29</span>#sec-privateget PrivateGet ( P, O )</h1>...</div><div id=\"excluded-sec-privateset\"><h1><span class=\"secnum\">7.3.30</span>#sec-privateset PrivateSet ( P, O, value )</h1>...</div><div id=\"excluded-sec-definefield\"><h1><span class=\"secnum\">7.3.31</span>#sec-definefield DefineField ( receiver, fieldRecord )</h1>...</div><div id=\"excluded-sec-initializeinstanceelements\"><h1><span class=\"secnum\">7.3.32</span>#sec-initializeinstanceelements InitializeInstanceElements ( O, constructor )</h1>...</div></emu-clause>\n\n  "}, "sec-privateget": {"num": "7.3.29", "title": "#sec-privateget PrivateGet ( P, O )", "html": "<emu-clause id=\"sec-privateget\" aoid=\"PrivateGet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateget\">#sec-privateget</span> PrivateGet ( <var>P</var>, <var>O</var> )</h1>\n      <p>The abstract operation PrivateGet takes arguments <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>) and <var>O</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>P</var>, <var>O</var>).</li><li>If <var>entry</var> is <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>entry</var>.[[Kind]] is <emu-const>field</emu-const> or <emu-const>method</emu-const>, then<ol><li>Return <var>entry</var>.[[Value]].</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>entry</var>.[[Kind]] is <emu-const>accessor</emu-const>.</li><li>If <var>entry</var>.[[Get]] is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>getter</var> be <var>entry</var>.[[Get]].</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>getter</var>, <var>O</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-relational-operators-runtime-semantics-evaluation": {"num": "13.10.1", "title": "#sec-relational-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-runtime-semantics-evaluation\">#sec-relational-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0hbjkrqw\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gziyg7ut\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcktdtrm\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3cupp_tq\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ec9rmdp\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>instanceof</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InstanceofOperator\"><a href=\"#sec-instanceofoperator\">InstanceofOperator</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9mtjpkmx\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>rval</var>, ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>lval</var>)).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bfkxjj0f\">\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>privateIdentifier</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>privateName</var> be !&#160;<emu-xref aoid=\"ResolvePrivateIdentifier\"><a href=\"#sec-resolve-private-identifier\">ResolvePrivateIdentifier</a></emu-xref>(<var>privateEnv</var>, <var>privateIdentifier</var>).</li><li>If !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>privateName</var>, <var>rval</var>) is not <emu-const>empty</emu-const>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privatefieldadd": {"num": "7.3.27", "title": "#sec-privatefieldadd PrivateFieldAdd ( P, O, value )", "html": "<emu-clause id=\"sec-privatefieldadd\" aoid=\"PrivateFieldAdd\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privatefieldadd\">#sec-privatefieldadd</span> PrivateFieldAdd ( <var>P</var>, <var>O</var>, <var>value</var> )</h1>\n      <p>The abstract operation PrivateFieldAdd takes arguments <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>), <var>O</var> (an Object), and <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>P</var>, <var>O</var>).</li><li>If <var>entry</var> is not <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>P</var>, [[Kind]]: <emu-const>field</emu-const>, [[Value]]: <var>value</var> } to <var>O</var>.[[PrivateElements]].</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-privateelementfind", "sec-privatemethodoraccessoradd", "sec-privateset", "sec-operations-on-objects", "sec-privateget", "sec-relational-operators-runtime-semantics-evaluation", "sec-privatefieldadd"], "secData": {"sec-privateelementfind": {"num": "7.3.26", "title": "#sec-privateelementfind PrivateElementFind ( O, P )", "html": "<emu-clause id=\"sec-privateelementfind\" aoid=\"PrivateElementFind\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateelementfind\">#sec-privateelementfind</span> PrivateElementFind ( <var>O</var>, <var>P</var> )</h1>\n      <p>The abstract operation PrivateElementFind takes arguments <var>O</var> (an Object) and <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>O</var>.[[PrivateElements]] contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>P</var>, then<ol><li>Let <var>entry</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li>Return <var>entry</var>.</li></ol></li><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privatemethodoraccessoradd": {"num": "7.3.28", "title": "#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( method, O )", "html": "<emu-clause id=\"sec-privatemethodoraccessoradd\" aoid=\"PrivateMethodOrAccessorAdd\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privatemethodoraccessoradd\">#sec-privatemethodoraccessoradd</span> PrivateMethodOrAccessorAdd ( <var>method</var>, <var>O</var> )</h1>\n      <p>The abstract operation PrivateMethodOrAccessorAdd takes arguments <var>method</var> (a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>) and <var>O</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>method</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>O</var>, <var>method</var>.[[Key]]).</li><li>If <var>entry</var> is not <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>method</var> to <var>O</var>.[[PrivateElements]].</li><li>NOTE: The values for private methods and accessors are shared across instances. This step does not create a new copy of the method or accessor.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privateset": {"num": "7.3.30", "title": "#sec-privateset PrivateSet ( P, O, value )", "html": "<emu-clause id=\"sec-privateset\" aoid=\"PrivateSet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateset\">#sec-privateset</span> PrivateSet ( <var>P</var>, <var>O</var>, <var>value</var> )</h1>\n      <p>The abstract operation PrivateSet takes arguments <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>), <var>O</var> (an Object), and <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>O</var>, <var>P</var>).</li><li>If <var>entry</var> is <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>entry</var>.[[Kind]] is <emu-const>field</emu-const>, then<ol><li>Set <var>entry</var>.[[Value]] to <var>value</var>.</li></ol></li><li>Else if <var>entry</var>.[[Kind]] is <emu-const>method</emu-const>, then<ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>entry</var>.[[Kind]] is <emu-const>accessor</emu-const>.</li><li>If <var>entry</var>.[[Set]] is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>setter</var> be <var>entry</var>.[[Set]].</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>setter</var>, <var>O</var>, &#171; <var>value</var> &#187;).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-operations-on-objects": {"num": "7.3", "title": "#sec-operations-on-objects Operations on Objects", "html": "<emu-clause id=\"sec-operations-on-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-operations-on-objects\">#sec-operations-on-objects</span> Operations on Objects</h1>\n\n    <div id=\"excluded-sec-makebasicobject\"><h1><span class=\"secnum\">7.3.1</span>#sec-makebasicobject MakeBasicObject ( internalSlotsList )</h1>...</div><div id=\"excluded-sec-get-o-p\"><h1><span class=\"secnum\">7.3.2</span>#sec-get-o-p Get ( O, P )</h1>...</div><div id=\"excluded-sec-getv\"><h1><span class=\"secnum\">7.3.3</span>#sec-getv GetV ( V, P )</h1>...</div><div id=\"excluded-sec-set-o-p-v-throw\"><h1><span class=\"secnum\">7.3.4</span>#sec-set-o-p-v-throw Set ( O, P, V, Throw )</h1>...</div><div id=\"excluded-sec-createdataproperty\"><h1><span class=\"secnum\">7.3.5</span>#sec-createdataproperty CreateDataProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createmethodproperty\"><h1><span class=\"secnum\">7.3.6</span>#sec-createmethodproperty CreateMethodProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createdatapropertyorthrow\"><h1><span class=\"secnum\">7.3.7</span>#sec-createdatapropertyorthrow CreateDataPropertyOrThrow ( O, P, V )</h1>...</div><div id=\"excluded-sec-definepropertyorthrow\"><h1><span class=\"secnum\">7.3.8</span>#sec-definepropertyorthrow DefinePropertyOrThrow ( O, P, desc )</h1>...</div><div id=\"excluded-sec-deletepropertyorthrow\"><h1><span class=\"secnum\">7.3.9</span>#sec-deletepropertyorthrow DeletePropertyOrThrow ( O, P )</h1>...</div><div id=\"excluded-sec-getmethod\"><h1><span class=\"secnum\">7.3.10</span>#sec-getmethod GetMethod ( V, P )</h1>...</div><div id=\"excluded-sec-hasproperty\"><h1><span class=\"secnum\">7.3.11</span>#sec-hasproperty HasProperty ( O, P )</h1>...</div><div id=\"excluded-sec-hasownproperty\"><h1><span class=\"secnum\">7.3.12</span>#sec-hasownproperty HasOwnProperty ( O, P )</h1>...</div><div id=\"excluded-sec-call\"><h1><span class=\"secnum\">7.3.13</span>#sec-call Call ( F, V [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-construct\"><h1><span class=\"secnum\">7.3.14</span>#sec-construct Construct ( F [ , argumentsList [ , newTarget ] ] )</h1>...</div><div id=\"excluded-sec-setintegritylevel\"><h1><span class=\"secnum\">7.3.15</span>#sec-setintegritylevel SetIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-testintegritylevel\"><h1><span class=\"secnum\">7.3.16</span>#sec-testintegritylevel TestIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-createarrayfromlist\"><h1><span class=\"secnum\">7.3.17</span>#sec-createarrayfromlist CreateArrayFromList ( elements )</h1>...</div><div id=\"excluded-sec-lengthofarraylike\"><h1><span class=\"secnum\">7.3.18</span>#sec-lengthofarraylike LengthOfArrayLike ( obj )</h1>...</div><div id=\"excluded-sec-createlistfromarraylike\"><h1><span class=\"secnum\">7.3.19</span>#sec-createlistfromarraylike CreateListFromArrayLike ( obj [ , elementTypes ] )</h1>...</div><div id=\"excluded-sec-invoke\"><h1><span class=\"secnum\">7.3.20</span>#sec-invoke Invoke ( V, P [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-ordinaryhasinstance\"><h1><span class=\"secnum\">7.3.21</span>#sec-ordinaryhasinstance OrdinaryHasInstance ( C, O )</h1>...</div><div id=\"excluded-sec-speciesconstructor\"><h1><span class=\"secnum\">7.3.22</span>#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )</h1>...</div><div id=\"excluded-sec-enumerableownpropertynames\"><h1><span class=\"secnum\">7.3.23</span>#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )</h1>...</div><div id=\"excluded-sec-getfunctionrealm\"><h1><span class=\"secnum\">7.3.24</span>#sec-getfunctionrealm GetFunctionRealm ( obj )</h1>...</div><div id=\"excluded-sec-copydataproperties\"><h1><span class=\"secnum\">7.3.25</span>#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )</h1>...</div><div id=\"excluded-sec-privateelementfind\"><h1><span class=\"secnum\">7.3.26</span>#sec-privateelementfind PrivateElementFind ( O, P )</h1>...</div><div id=\"excluded-sec-privatefieldadd\"><h1><span class=\"secnum\">7.3.27</span>#sec-privatefieldadd PrivateFieldAdd ( P, O, value )</h1>...</div><div id=\"excluded-sec-privatemethodoraccessoradd\"><h1><span class=\"secnum\">7.3.28</span>#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( method, O )</h1>...</div><div id=\"excluded-sec-privateget\"><h1><span class=\"secnum\">7.3.29</span>#sec-privateget PrivateGet ( P, O )</h1>...</div><div id=\"excluded-sec-privateset\"><h1><span class=\"secnum\">7.3.30</span>#sec-privateset PrivateSet ( P, O, value )</h1>...</div><div id=\"excluded-sec-definefield\"><h1><span class=\"secnum\">7.3.31</span>#sec-definefield DefineField ( receiver, fieldRecord )</h1>...</div><div id=\"excluded-sec-initializeinstanceelements\"><h1><span class=\"secnum\">7.3.32</span>#sec-initializeinstanceelements InitializeInstanceElements ( O, constructor )</h1>...</div></emu-clause>\n\n  "}, "sec-privateget": {"num": "7.3.29", "title": "#sec-privateget PrivateGet ( P, O )", "html": "<emu-clause id=\"sec-privateget\" aoid=\"PrivateGet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateget\">#sec-privateget</span> PrivateGet ( <var>P</var>, <var>O</var> )</h1>\n      <p>The abstract operation PrivateGet takes arguments <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>) and <var>O</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>O</var>, <var>P</var>).</li><li>If <var>entry</var> is <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>entry</var>.[[Kind]] is <emu-const>field</emu-const> or <emu-const>method</emu-const>, then<ol><li>Return <var>entry</var>.[[Value]].</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>entry</var>.[[Kind]] is <emu-const>accessor</emu-const>.</li><li>If <var>entry</var>.[[Get]] is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>getter</var> be <var>entry</var>.[[Get]].</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>getter</var>, <var>O</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-relational-operators-runtime-semantics-evaluation": {"num": "13.10.1", "title": "#sec-relational-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-runtime-semantics-evaluation\">#sec-relational-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0hbjkrqw\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gziyg7ut\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcktdtrm\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3cupp_tq\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ec9rmdp\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>instanceof</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InstanceofOperator\"><a href=\"#sec-instanceofoperator\">InstanceofOperator</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9mtjpkmx\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>rval</var>, ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>lval</var>)).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bfkxjj0f\">\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>privateIdentifier</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>privateName</var> be !&#160;<emu-xref aoid=\"ResolvePrivateIdentifier\"><a href=\"#sec-resolve-private-identifier\">ResolvePrivateIdentifier</a></emu-xref>(<var>privateEnv</var>, <var>privateIdentifier</var>).</li><li>If !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>rval</var>, <var>privateName</var>) is not <emu-const>empty</emu-const>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privatefieldadd": {"num": "7.3.27", "title": "#sec-privatefieldadd PrivateFieldAdd ( P, O, value )", "html": "<emu-clause id=\"sec-privatefieldadd\" aoid=\"PrivateFieldAdd\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privatefieldadd\">#sec-privatefieldadd</span> PrivateFieldAdd ( <var>P</var>, <var>O</var>, <var>value</var> )</h1>\n      <p>The abstract operation PrivateFieldAdd takes arguments <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>), <var>O</var> (an Object), and <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>O</var>, <var>P</var>).</li><li>If <var>entry</var> is not <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>P</var>, [[Kind]]: <emu-const>field</emu-const>, [[Value]]: <var>value</var> } to <var>O</var>.[[PrivateElements]].</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}}