{"from": {"secList": ["sec-utf16decode", "sec-advancestringindex", "sec-string.prototype.codepointat", "sec-%stringiteratorprototype%.next", "sec-source-text", "sec-encode"], "secData": {"sec-utf16decode": {"num": "10.1.2", "title": "#sec-utf16decode Static Semantics: UTF16Decode ( lead, trail )", "html": "<emu-clause id=\"sec-utf16decode\" aoid=\"UTF16Decode\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-utf16decode\">#sec-utf16decode</span> Static Semantics: UTF16Decode ( <var>lead</var>, <var>trail</var> )</h1>\n      <p>Two code units, <var>lead</var> and <var>trail</var>, that form a UTF-16  <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> are converted to a code point by performing the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lead</var> is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and <var>trail</var> is a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>.</li><li>Let <var>cp</var> be (<var>lead</var> - 0xD800) &#215; 0x400 + (<var>trail</var> - 0xDC00) + 0x10000.</li><li>Return the code point <var>cp</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-advancestringindex": {"num": "21.2.5.2.3", "title": "#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )", "html": "<emu-clause id=\"sec-advancestringindex\" aoid=\"AdvanceStringIndex\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-advancestringindex\">#sec-advancestringindex</span> AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )</h1>\n          <p>The abstract operation AdvanceStringIndex with arguments <var>S</var>, <var>index</var>, and <var>unicode</var> performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> is an integer such that 0 &#8804; <var>index</var> &#8804; 2<sup>53</sup> - 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unicode</var>) is Boolean.</li><li>If <var>unicode</var> is <emu-val>false</emu-val>, return <var>index</var> + 1.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>If <var>index</var> + 1 &#8805; <var>length</var>, return <var>index</var> + 1.</li><li>Let <var>first</var> be the code unit at index <var>index</var> within <var>S</var>.</li><li>If <var>first</var> is not a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref>, return <var>index</var> + 1.</li><li>Let <var>second</var> be the code unit at index <var>index</var> + 1 within <var>S</var>.</li><li>If <var>second</var> is not a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, return <var>index</var> + 1.</li><li>Return <var>index</var> + 2.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-string.prototype.codepointat": {"num": "21.1.3.3", "title": "#sec-string.prototype.codepointat String.prototype.codePointAt ( pos )", "html": "<emu-clause id=\"sec-string.prototype.codepointat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.codepointat\">#sec-string.prototype.codepointat</span> String.prototype.codePointAt ( <var>pos</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns a nonnegative integer Number less than or equal to 0x10FFFF that is the code point value of the UTF-16 encoded code point (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>) starting at the string element at index <var>pos</var> within the String resulting from converting this object to a String. If there is no element at that index, the result is <emu-val>undefined</emu-val>. If a valid UTF-16  <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> does not begin at <var>pos</var>, the result is the code unit at <var>pos</var>.</p>\n        </div></emu-note>\n        <p>When the <code>codePointAt</code> method is called with one argument <var>pos</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>position</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>pos</var>).</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>position</var> &lt; 0 or <var>position</var> &#8805; <var>size</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>first</var> be the code unit at index <var>position</var> within the String <var>S</var>.</li><li>If <var>first</var> is not a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> or if <var>position</var> + 1 = <var>size</var>, return the numeric value of <var>first</var>.</li><li>Let <var>second</var> be the code unit at index <var>position</var> + 1 within the String <var>S</var>.</li><li>If <var>second</var> is not a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, return the numeric value of <var>first</var>.</li><li>Let <var>cp</var> be <emu-xref aoid=\"UTF16Decode\"><a href=\"#sec-utf16decode\">UTF16Decode</a></emu-xref>(<var>first</var>, <var>second</var>).</li><li>Return the code point value of <var>cp</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>codePointAt</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%stringiteratorprototype%.next": {"num": "21.1.5.2.1", "title": "#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%stringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%.next\">#sec-%stringiteratorprototype%.next</span> %StringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a String Iterator Instance (<emu-xref href=\"#sec-properties-of-string-iterator-instances\"><a href=\"#sec-properties-of-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-string-iterator-instances\">#sec-properties-of-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>s</var> be <var>O</var>.[[IteratedString]].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>position</var> be <var>O</var>.[[StringIteratorNextIndex]].</li><li>Let <var>len</var> be the length of <var>s</var>.</li><li>If <var>position</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedString]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>first</var> be the code unit at index <var>position</var> within <var>s</var>.</li><li>If <var>first</var> is not a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> or if <var>position</var> + 1 = <var>len</var>, let <var>resultString</var> be the String value consisting of the single code unit <var>first</var>.</li><li>Else,<ol><li>Let <var>second</var> be the code unit at index <var>position</var> + 1 within the String <var>s</var>.</li><li>If <var>second</var> is not a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, let <var>resultString</var> be the String value consisting of the single code unit <var>first</var>.</li><li>Else, let <var>resultString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit <var>first</var> and the code unit <var>second</var>.</li></ol></li><li>Let <var>resultSize</var> be the number of code units in <var>resultString</var>.</li><li>Set <var>O</var>.[[StringIteratorNextIndex]] to <var>position</var> + <var>resultSize</var>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultString</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-source-text": {"num": "10.1", "title": "#sec-source-text Source Text", "html": "<emu-clause id=\"sec-source-text\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text\">#sec-source-text</span> Source Text</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"SourceCharacter\" type=\"lexical\" id=\"prod-SourceCharacter\">\n    <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c64b38bd\"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>\n</emu-production></emu-grammar>\n    <p>ECMAScript code is expressed using Unicode. ECMAScript source text is a sequence of code points. All Unicode code point values from U+0000 to U+10FFFF, including surrogate code points, may occur in source text where permitted by the ECMAScript grammars. The actual encodings used to store and interchange ECMAScript source text is not relevant to this specification. Regardless of the external source text encoding, a conforming ECMAScript implementation processes the source text as if it was an equivalent sequence of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values, each <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> being a Unicode code point. Conforming ECMAScript implementations are not required to perform any normalization of source text, or behave as though they were performing normalization of source text.</p>\n    <p>The components of a combining character sequence are treated as individual Unicode code points even though a user might think of the whole sequence as a single character.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>In string literals, regular expression literals, template literals and identifiers, any Unicode code point may also be expressed using Unicode escape sequences that explicitly express a code point's numeric value. Within a comment, such an escape sequence is effectively ignored as part of the comment.</p>\n      <p>ECMAScript differs from the Java programming language in the behaviour of Unicode escape sequences. In a Java program, if the Unicode escape sequence <code>\\u000A</code>, for example, occurs within a single-line comment, it is interpreted as a line terminator (Unicode code point U+000A is LINE FEED (LF)) and therefore the next code point is not part of the comment. Similarly, if the Unicode escape sequence <code>\\u000A</code> occurs within a string literal in a Java program, it is likewise interpreted as a line terminator, which is not allowed within a string literal&#8212;one must write <code>\\n</code> instead of <code>\\u000A</code> to cause a LINE FEED (LF) to be part of the String value of a string literal. In an ECMAScript program, a Unicode escape sequence occurring within a comment is never interpreted and therefore cannot contribute to termination of the comment. Similarly, a Unicode escape sequence occurring within a string literal in an ECMAScript program always contributes to the literal and is never interpreted as a line terminator or as a code point that might terminate the string literal.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-utf16encoding\"><h1><span class=\"secnum\">10.1.1</span>#sec-utf16encoding Static Semantics: UTF16Encoding ( cp )</h1>...</div><div id=\"excluded-sec-utf16decode\"><h1><span class=\"secnum\">10.1.2</span>#sec-utf16decode Static Semantics: UTF16Decode ( lead, trail )</h1>...</div></emu-clause>\n\n  "}, "sec-encode": {"num": "18.2.6.1.1", "title": "#sec-encode Runtime Semantics: Encode ( string, unescapedSet )", "html": "<emu-clause id=\"sec-encode\" aoid=\"Encode\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-encode\">#sec-encode</span> Runtime Semantics: Encode ( <var>string</var>, <var>unescapedSet</var> )</h1>\n          <p>The encoding and escaping process is described by the abstract operation Encode taking two String arguments <var>string</var> and <var>unescapedSet</var>.</p>\n          <emu-alg><ol><li>Let <var>strLen</var> be the number of code units in <var>string</var>.</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> equals <var>strLen</var>, return <var>R</var>.</li><li>Let <var>C</var> be the code unit at index <var>k</var> within <var>string</var>.</li><li>If <var>C</var> is in <var>unescapedSet</var>, then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>R</var> and <var>S</var>.</li></ol></li><li>Else,<ol><li>If <var>C</var> is a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, throw a <emu-val>URIError</emu-val> exception.</li><li>If <var>C</var> is not a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref>, then<ol><li>Let <var>V</var> be the code point with the same numeric value as code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Increase <var>k</var> by 1.</li><li>If <var>k</var> equals <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>kChar</var> be the code unit at index <var>k</var> within <var>string</var>.</li><li>If <var>kChar</var> is not a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>V</var> be <emu-xref aoid=\"UTF16Decode\"><a href=\"#sec-utf16decode\">UTF16Decode</a></emu-xref>(<var>C</var>, <var>kChar</var>).</li></ol></li><li>Let <var>Octets</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of octets resulting by applying the UTF-8 transformation to <var>V</var>.</li><li>For each element <var>octet</var> of <var>Octets</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Let <var>S</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li><code>\"%\"</code></li><li>the String representation of <var>octet</var>, formatted as a two-digit uppercase hexadecimal number, padded to the left with a zero if necessary</li></ul></li><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>R</var> and <var>S</var>.</li></ol></li></ol></li><li>Increase <var>k</var> by 1.\n          </li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}, "to": {"secList": ["sec-utf16decode", "sec-advancestringindex", "sec-string.prototype.codepointat", "sec-%stringiteratorprototype%.next", "sec-source-text", "sec-encode"], "secData": {"sec-utf16decode": {"num": "10.1.2", "title": "#sec-utf16decode Static Semantics: UTF16Decode ( lead, trail )", "html": "<emu-clause id=\"sec-utf16decode\" aoid=\"UTF16Decode\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-utf16decode\">#sec-utf16decode</span> Static Semantics: UTF16Decode ( <var>lead</var>, <var>trail</var> )</h1>\n      <p>Two code units, <var>lead</var> and <var>trail</var>, that form a UTF-16  <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> are converted to a code point by performing the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lead</var> is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and <var>trail</var> is a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>.</li><li>Let <var>cp</var> be (<var>lead</var> - 0xD800) &#215; 0x400 + (<var>trail</var> - 0xDC00) + 0x10000.</li><li>Return the code point <var>cp</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-advancestringindex": {"num": "21.2.5.2.3", "title": "#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )", "html": "<emu-clause id=\"sec-advancestringindex\" aoid=\"AdvanceStringIndex\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-advancestringindex\">#sec-advancestringindex</span> AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )</h1>\n          <p>The abstract operation AdvanceStringIndex with arguments <var>S</var>, <var>index</var>, and <var>unicode</var> performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> is an integer such that 0 &#8804; <var>index</var> &#8804; 2<sup>53</sup> - 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unicode</var>) is Boolean.</li><li>If <var>unicode</var> is <emu-val>false</emu-val>, return <var>index</var> + 1.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>If <var>index</var> + 1 &#8805; <var>length</var>, return <var>index</var> + 1.</li><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>S</var>, <var>index</var>).</li><li>Return <var>index</var> + <var>cp</var>.[[CodeUnitCount]].\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-string.prototype.codepointat": {"num": "21.1.3.3", "title": "#sec-string.prototype.codepointat String.prototype.codePointAt ( pos )", "html": "<emu-clause id=\"sec-string.prototype.codepointat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.codepointat\">#sec-string.prototype.codepointat</span> String.prototype.codePointAt ( <var>pos</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns a nonnegative integer Number less than or equal to 0x10FFFF that is the code point value of the UTF-16 encoded code point (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>) starting at the string element at index <var>pos</var> within the String resulting from converting this object to a String. If there is no element at that index, the result is <emu-val>undefined</emu-val>. If a valid UTF-16  <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> does not begin at <var>pos</var>, the result is the code unit at <var>pos</var>.</p>\n        </div></emu-note>\n        <p>When the <code>codePointAt</code> method is called with one argument <var>pos</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>position</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>pos</var>).</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>position</var> &lt; 0 or <var>position</var> &#8805; <var>size</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>S</var>, <var>position</var>).</li><li>Return <var>cp</var>.[[CodePoint]].\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>codePointAt</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%stringiteratorprototype%.next": {"num": "21.1.5.2.1", "title": "#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%stringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%.next\">#sec-%stringiteratorprototype%.next</span> %StringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a String Iterator Instance (<emu-xref href=\"#sec-properties-of-string-iterator-instances\"><a href=\"#sec-properties-of-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-string-iterator-instances\">#sec-properties-of-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>s</var> be <var>O</var>.[[IteratedString]].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>position</var> be <var>O</var>.[[StringIteratorNextIndex]].</li><li>Let <var>len</var> be the length of <var>s</var>.</li><li>If <var>position</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedString]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>s</var>, <var>position</var>).</li><li>Let <var>resultString</var> be the String value containing <var>cp</var>.[[CodeUnitCount]] consecutive code units from <var>s</var> beginning with the code unit at index <var>position</var>.</li><li>Set <var>O</var>.[[StringIteratorNextIndex]] to <var>position</var> + <var>cp</var>.[[CodeUnitCount]].</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultString</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-source-text": {"num": "10.1", "title": "#sec-source-text Source Text", "html": "<emu-clause id=\"sec-source-text\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text\">#sec-source-text</span> Source Text</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"SourceCharacter\" type=\"lexical\" id=\"prod-SourceCharacter\">\n    <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c64b38bd\"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>\n</emu-production></emu-grammar>\n    <p>ECMAScript code is expressed using Unicode. ECMAScript source text is a sequence of code points. All Unicode code point values from U+0000 to U+10FFFF, including surrogate code points, may occur in source text where permitted by the ECMAScript grammars. The actual encodings used to store and interchange ECMAScript source text is not relevant to this specification. Regardless of the external source text encoding, a conforming ECMAScript implementation processes the source text as if it was an equivalent sequence of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values, each <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> being a Unicode code point. Conforming ECMAScript implementations are not required to perform any normalization of source text, or behave as though they were performing normalization of source text.</p>\n    <p>The components of a combining character sequence are treated as individual Unicode code points even though a user might think of the whole sequence as a single character.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>In string literals, regular expression literals, template literals and identifiers, any Unicode code point may also be expressed using Unicode escape sequences that explicitly express a code point's numeric value. Within a comment, such an escape sequence is effectively ignored as part of the comment.</p>\n      <p>ECMAScript differs from the Java programming language in the behaviour of Unicode escape sequences. In a Java program, if the Unicode escape sequence <code>\\u000A</code>, for example, occurs within a single-line comment, it is interpreted as a line terminator (Unicode code point U+000A is LINE FEED (LF)) and therefore the next code point is not part of the comment. Similarly, if the Unicode escape sequence <code>\\u000A</code> occurs within a string literal in a Java program, it is likewise interpreted as a line terminator, which is not allowed within a string literal&#8212;one must write <code>\\n</code> instead of <code>\\u000A</code> to cause a LINE FEED (LF) to be part of the String value of a string literal. In an ECMAScript program, a Unicode escape sequence occurring within a comment is never interpreted and therefore cannot contribute to termination of the comment. Similarly, a Unicode escape sequence occurring within a string literal in an ECMAScript program always contributes to the literal and is never interpreted as a line terminator or as a code point that might terminate the string literal.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-utf16encoding\"><h1><span class=\"secnum\">10.1.1</span>#sec-utf16encoding Static Semantics: UTF16Encoding ( cp )</h1>...</div><div id=\"excluded-sec-utf16decode\"><h1><span class=\"secnum\">10.1.2</span>#sec-utf16decode Static Semantics: UTF16Decode ( lead, trail )</h1>...</div><div id=\"excluded-sec-codepointat\"><h1><span class=\"secnum\">10.1.3</span>#sec-codepointat Static Semantics: CodePointAt ( string, position )</h1>...</div></emu-clause>\n\n  "}, "sec-encode": {"num": "18.2.6.1.1", "title": "#sec-encode Runtime Semantics: Encode ( string, unescapedSet )", "html": "<emu-clause id=\"sec-encode\" aoid=\"Encode\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-encode\">#sec-encode</span> Runtime Semantics: Encode ( <var>string</var>, <var>unescapedSet</var> )</h1>\n          <p>The encoding and escaping process is described by the abstract operation Encode taking two String arguments <var>string</var> and <var>unescapedSet</var>.</p>\n          <emu-alg><ol><li>Let <var>strLen</var> be the number of code units in <var>string</var>.</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> equals <var>strLen</var>, return <var>R</var>.</li><li>Let <var>C</var> be the code unit at index <var>k</var> within <var>string</var>.</li><li>If <var>C</var> is in <var>unescapedSet</var>, then<ol><li>Set <var>k</var> to <var>k</var> + 1.</li><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>R</var> and <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>string</var>, <var>k</var>).</li><li>If <var>cp</var>.[[IsUnpairedSurrogate]] is <emu-val>true</emu-val>, throw a <emu-val>URIError</emu-val> exception.</li><li>Set <var>k</var> to <var>k</var> + <var>cp</var>.[[CodeUnitCount]].</li><li>Let <var>Octets</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of octets resulting by applying the UTF-8 transformation to <var>cp</var>.[[CodePoint]].</li><li>For each element <var>octet</var> of <var>Octets</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the previous value of <var>R</var></li><li><code>\"%\"</code></li><li>the String representation of <var>octet</var>, formatted as a two-digit uppercase hexadecimal number, padded to the left with a zero if necessary\n          </li></ul></li></ol></li></ol></li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}}