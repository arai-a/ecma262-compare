{"from": {"secList": ["sec-jobs-and-job-queues", "sec-triggerpromisereactions", "sec-runjobs", "sec-enqueuejob", "sec-promiseresolvethenablejob", "sec-promise-objects"], "secData": {"sec-jobs-and-job-queues": {"num": "8.4", "title": "#sec-jobs-and-job-queues Jobs and Job Queues", "html": "<emu-clause id=\"sec-jobs-and-job-queues\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs-and-job-queues\">#sec-jobs-and-job-queues</span> Jobs and Job Queues</h1>\n    <p>A Job is an abstract operation that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress. A Job abstract operation may be defined to accept an arbitrary set of job parameters.</p>\n    <p>Execution of a Job can be initiated only when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty. A PendingJob is a request for the future execution of a Job. A PendingJob is an internal <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose fields are specified in  <emu-xref href=\"#table-25\"><a href=\"#table-25\" class=\"excluded-xref\" excluded-id=\"table-25\">#table-25</a></emu-xref>. Once execution of a Job is initiated, the Job always executes to completion. No other Job may be initiated until the currently running Job completes. However, the currently running Job or external events may cause the enqueuing of additional PendingJobs that may be initiated sometime after completion of the currently running Job.</p>\n    <emu-table id=\"table-25\" caption=\"PendingJob Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-25\">#table-25</span>: PendingJob <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          \n          </th>\n          <th>\n            Value\n          \n          </th>\n          <th>\n            Meaning\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Job]]\n          \n          </td>\n          <td>\n            The name of a Job abstract operation\n          \n          </td>\n          <td>\n            This is the abstract operation that is performed when execution of this PendingJob is initiated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Arguments]]\n          \n          </td>\n          <td>\n            A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of argument values that are to be passed to [[Job]] when it is activated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            A <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> for the initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> when this PendingJob is initiated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            A <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module for the initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> when this PendingJob is initiated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HostDefined]]\n          \n          </td>\n          <td>\n            Any, default value is <emu-val>undefined</emu-val>.\n          \n          </td>\n          <td>\n            Field reserved for use by host environments that need to associate additional information with a pending Job.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>A Job Queue is a FIFO queue of PendingJob records. Each Job Queue has a name and the full set of available Job Queues are defined by an ECMAScript implementation. Every ECMAScript implementation has at least the Job Queues defined in  <emu-xref href=\"#table-26\"><a href=\"#table-26\" class=\"excluded-xref\" excluded-id=\"table-26\">#table-26</a></emu-xref>.</p>\n    <p>Each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> has its own set of named Job Queues.  All references to a named job queue in this specification denote the named job queue of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</p>\n    <emu-table id=\"table-26\" caption=\"Required Job Queues\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-26\">#table-26</span>: Required Job Queues</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Name\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            ScriptJobs\n          \n          </td>\n          <td>\n            Jobs that validate and evaluate ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> and <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> source text. See clauses 10 and 15.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            PromiseJobs\n          \n          </td>\n          <td>\n            Jobs that are responses to the settlement of a Promise (see  <emu-xref href=\"#sec-promise-objects\"><a href=\"#sec-promise-objects\" class=\"excluded-xref\" excluded-id=\"sec-promise-objects\">#sec-promise-objects</a></emu-xref>).\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>A request for the future execution of a Job is made by enqueueing, on a Job Queue, a PendingJob record that includes a Job abstract operation name and any necessary argument values. When there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the ECMAScript implementation removes the first PendingJob from a Job Queue and uses the information contained in it to create an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and starts execution of the associated Job abstract operation.</p>\n    <p>The PendingJob records from a single Job Queue are always initiated in FIFO order. This specification does not define the order in which multiple Job Queues are serviced. An ECMAScript implementation may interweave the FIFO evaluation of the PendingJob records of a Job Queue with the evaluation of the PendingJob records of one or more other Job Queues. An implementation must define what occurs when there are no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and all Job Queues are empty.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>Typically an ECMAScript implementation will have its Job Queues pre-initialized with at least one PendingJob and one of those Jobs will be the first to be executed. An implementation might choose to free all resources and terminate if the current Job completes and all Job Queues are empty. Alternatively, it might choose to wait for a some implementation specific <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> or mechanism to enqueue new PendingJob requests.</p>\n    </div></emu-note>\n    <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used to create and manage Jobs and Job Queues:</p>\n\n    <div id=\"excluded-sec-enqueuejob\"><h1><span class=\"secnum\">8.4.1</span>#sec-enqueuejob EnqueueJob ( queueName, job, arguments )</h1>...</div></emu-clause>\n\n  "}, "sec-triggerpromisereactions": {"num": "25.6.1.8", "title": "#sec-triggerpromisereactions TriggerPromiseReactions ( reactions, argument )", "html": "<emu-clause id=\"sec-triggerpromisereactions\" aoid=\"TriggerPromiseReactions\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-triggerpromisereactions\">#sec-triggerpromisereactions</span> TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )</h1>\n        <p>The abstract operation TriggerPromiseReactions takes a collection of PromiseReactionRecords and enqueues a new Job for each record. Each such Job processes the [[Type]] and [[Handler]] of the PromiseReactionRecord, and if the [[Handler]] is a function, calls it passing the given argument. If the [[Handler]] is <emu-val>undefined</emu-val>, the behaviour is determined by the [[Type]].</p>\n        <emu-alg><ol><li>For each <var>reaction</var> in <var>reactions</var>, in original insertion order, do<ol><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<code>\"PromiseJobs\"</code>, <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>, &#171; <var>reaction</var>, <var>argument</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runjobs": {"num": "8.6", "title": "#sec-runjobs RunJobs ( )", "html": "<emu-clause id=\"sec-runjobs\" aoid=\"RunJobs\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runjobs\">#sec-runjobs</span> RunJobs ( )</h1>\n    <p>The abstract operation RunJobs performs the following steps:</p>\n    <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"InitializeHostDefinedRealm\"><a href=\"#sec-initializehostdefinedrealm\">InitializeHostDefinedRealm</a></emu-xref>().</li><li>In an implementation-dependent manner, obtain the ECMAScript source texts (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>) and any associated host-defined values for zero or more ECMAScript scripts and/or ECMAScript modules. For each such <var>sourceText</var> and <var>hostDefined</var>, do<ol><li>If <var>sourceText</var> is the source code of a script, then<ol><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<code>\"ScriptJobs\"</code>, <emu-xref aoid=\"ScriptEvaluationJob\"><a href=\"#sec-scriptevaluationjob\">ScriptEvaluationJob</a></emu-xref>, &#171; <var>sourceText</var>, <var>hostDefined</var> &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is the source code of a module.</li><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<code>\"ScriptJobs\"</code>, <emu-xref aoid=\"TopLevelModuleEvaluationJob\"><a href=\"#sec-toplevelmoduleevaluationjob\">TopLevelModuleEvaluationJob</a></emu-xref>, &#171; <var>sourceText</var>, <var>hostDefined</var> &#187;).</li></ol></li></ol></li><li>Repeat,<ol><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is now empty.</li><li>Let <var>nextQueue</var> be a non-empty Job Queue chosen in an implementation-defined manner. If all Job Queues are empty, the result is implementation-defined.</li><li>Let <var>nextPending</var> be the PendingJob record at the front of <var>nextQueue</var>. Remove that record from <var>nextQueue</var>.</li><li>Let <var>newContext</var> be a new <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>newContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>newContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>nextPending</var>.[[Realm]].</li><li>Set <var>newContext</var>'s ScriptOrModule to <var>nextPending</var>.[[ScriptOrModule]].</li><li>Push <var>newContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>newContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Perform any implementation or host environment defined job initialization using <var>nextPending</var>.</li><li>Let <var>result</var> be the result of performing the abstract operation named by <var>nextPending</var>.[[Job]] using the elements of <var>nextPending</var>.[[Arguments]] as its arguments.</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform <emu-xref aoid=\"HostReportErrors\"><a href=\"#sec-host-report-errors\">HostReportErrors</a></emu-xref>(&#171; <var>result</var>.[[Value]] &#187;).\n    </li></ol></li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-enqueuejob": {"num": "8.4.1", "title": "#sec-enqueuejob EnqueueJob ( queueName, job, arguments )", "html": "<emu-clause id=\"sec-enqueuejob\" aoid=\"EnqueueJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enqueuejob\">#sec-enqueuejob</span> EnqueueJob ( <var>queueName</var>, <var>job</var>, <var>arguments</var> )</h1>\n      <p>The EnqueueJob abstract operation requires three arguments: <var>queueName</var>, <var>job</var>, and <var>arguments</var>. It performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>queueName</var>) is String and its value is the name of a Job Queue recognized by this implementation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>job</var> is the name of a Job.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>arguments</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that has the same number of elements as the number of parameters required by <var>job</var>.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>callerScriptOrModule</var> be <var>callerContext</var>'s ScriptOrModule.</li><li>Let <var>pending</var> be PendingJob { [[Job]]: <var>job</var>, [[Arguments]]: <var>arguments</var>, [[Realm]]: <var>callerRealm</var>, [[ScriptOrModule]]: <var>callerScriptOrModule</var>, [[HostDefined]]: <emu-val>undefined</emu-val> }.</li><li>Perform any implementation or host environment defined processing of <var>pending</var>. This may include modifying the [[HostDefined]] field or any other field of <var>pending</var>.</li><li>Add <var>pending</var> at the back of the Job Queue named by <var>queueName</var>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-promiseresolvethenablejob": {"num": "25.6.2.2", "title": "#sec-promiseresolvethenablejob PromiseResolveThenableJob ( promiseToResolve, thenable, then )", "html": "<emu-clause id=\"sec-promiseresolvethenablejob\" aoid=\"PromiseResolveThenableJob\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promiseresolvethenablejob\">#sec-promiseresolvethenablejob</span> PromiseResolveThenableJob ( <var>promiseToResolve</var>, <var>thenable</var>, <var>then</var> )</h1>\n        <p>The job PromiseResolveThenableJob with parameters <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>resolvingFunctions</var> be <emu-xref aoid=\"CreateResolvingFunctions\"><a href=\"#sec-createresolvingfunctions\">CreateResolvingFunctions</a></emu-xref>(<var>promiseToResolve</var>).</li><li>Let <var>thenCallResult</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>then</var>, <var>thenable</var>, &#171; <var>resolvingFunctions</var>.[[Resolve]], <var>resolvingFunctions</var>.[[Reject]] &#187;).</li><li>If <var>thenCallResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resolvingFunctions</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>thenCallResult</var>.[[Value]] &#187;).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>thenCallResult</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This Job uses the supplied thenable and its <code>then</code> method to resolve the given promise. This process must take place as a Job to ensure that the evaluation of the <code>then</code> method occurs after evaluation of any surrounding code has completed.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-promise-objects": {"num": "25.6", "title": "#sec-promise-objects Promise Objects", "html": "<emu-clause id=\"sec-promise-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-objects\">#sec-promise-objects</span> Promise Objects</h1>\n    <p>A Promise is an object that is used as a placeholder for the eventual results of a deferred (and possibly asynchronous) computation.</p>\n    <p>Any Promise object is in one of three mutually exclusive states:  <em>fulfilled</em>,  <em>rejected</em>, and  <em>pending</em>:</p>\n    <ul>\n      <li>\n        A promise <code>p</code> is fulfilled if <code>p.then(f, r)</code> will immediately enqueue a Job to call the function <code>f</code>.\n      \n      </li>\n      <li>\n        A promise <code>p</code> is rejected if <code>p.then(f, r)</code> will immediately enqueue a Job to call the function <code>r</code>.\n      \n      </li>\n      <li>\n        A promise is pending if it is neither fulfilled nor rejected.\n      \n      </li>\n    </ul>\n    <p>A promise is said to be  <em>settled</em> if it is not pending, i.e. if it is either fulfilled or rejected.</p>\n    <p>A promise is  <em>resolved</em> if it is settled or if it has been &#8220;locked in&#8221; to match the state of another promise. Attempting to resolve or reject a resolved promise has no effect. A promise is  <em>unresolved</em> if it is not resolved. An unresolved promise is always in the pending state. A resolved promise may be pending, fulfilled or rejected.</p>\n\n    <div id=\"excluded-sec-promise-abstract-operations\"><h1><span class=\"secnum\">25.6.1</span>#sec-promise-abstract-operations Promise Abstract Operations</h1>...</div><div id=\"excluded-sec-promise-jobs\"><h1><span class=\"secnum\">25.6.2</span>#sec-promise-jobs Promise Jobs</h1>...</div><div id=\"excluded-sec-promise-constructor\"><h1><span class=\"secnum\">25.6.3</span>#sec-promise-constructor The Promise Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-promise-constructor\"><h1><span class=\"secnum\">25.6.4</span>#sec-properties-of-the-promise-constructor Properties of the Promise Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-promise-prototype-object\"><h1><span class=\"secnum\">25.6.5</span>#sec-properties-of-the-promise-prototype-object Properties of the Promise Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-promise-instances\"><h1><span class=\"secnum\">25.6.6</span>#sec-properties-of-promise-instances Properties of Promise Instances</h1>...</div></emu-clause>\n\n  "}}, "figData": {"table-2": "Table 3", "table-25": "Table 26", "table-26": "Table 27"}}, "to": {"secList": ["sec-jobs-and-job-queues", "sec-triggerpromisereactions", "sec-runjobs", "sec-enqueuejob", "sec-promiseresolvethenablejob", "sec-promise-objects"], "secData": {"sec-jobs-and-job-queues": {"num": "8.4", "title": "#sec-jobs-and-job-queues Jobs and Job Queues", "html": "<emu-clause id=\"sec-jobs-and-job-queues\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs-and-job-queues\">#sec-jobs-and-job-queues</span> Jobs and Job Queues</h1>\n    <p>A  <dfn id=\"job\">Job</dfn> is an abstract operation that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress. A <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> abstract operation may be defined to accept an arbitrary set of job parameters.</p>\n    <p>Execution of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> can be initiated only when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty. A PendingJob is a request for the future execution of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>. A PendingJob is an internal <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose fields are specified in  <emu-xref href=\"#table-25\"><a href=\"#table-25\" class=\"excluded-xref\" excluded-id=\"table-25\">#table-25</a></emu-xref>. Once execution of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> is initiated, the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> always executes to completion. No other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be initiated until the currently running <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> completes. However, the currently running <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> or external events may cause the enqueuing of additional PendingJobs that may be initiated sometime after completion of the currently running <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>.</p>\n    <emu-table id=\"table-25\" caption=\"PendingJob Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-25\">#table-25</span>: PendingJob <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          \n          </th>\n          <th>\n            Value\n          \n          </th>\n          <th>\n            Meaning\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Job]]\n          \n          </td>\n          <td>\n            The name of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> abstract operation\n          \n          </td>\n          <td>\n            This is the abstract operation that is performed when execution of this PendingJob is initiated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Arguments]]\n          \n          </td>\n          <td>\n            A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of argument values that are to be passed to [[Job]] when it is activated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            A <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> for the initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> when this PendingJob is initiated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            A <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module for the initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> when this PendingJob is initiated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HostDefined]]\n          \n          </td>\n          <td>\n            Any, default value is <emu-val>undefined</emu-val>.\n          \n          </td>\n          <td>\n            Field reserved for use by host environments that need to associate additional information with a pending <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>A  <dfn id=\"job-queue\">Job Queue</dfn> is a FIFO queue of PendingJob records. Each <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> has a name and the full set of available <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues are defined by an ECMAScript implementation. Every ECMAScript implementation has at least the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues defined in  <emu-xref href=\"#table-26\"><a href=\"#table-26\" class=\"excluded-xref\" excluded-id=\"table-26\">#table-26</a></emu-xref>.</p>\n    <p>Each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> has its own set of named <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues.  All references to a named job queue in this specification denote the named job queue of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</p>\n    <emu-table id=\"table-26\" caption=\"Required Job Queues\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-26\">#table-26</span>: Required <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Name\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            ScriptJobs\n          \n          </td>\n          <td>\n            Jobs that validate and evaluate ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> and <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> source text. See clauses 10 and 15.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            PromiseJobs\n          \n          </td>\n          <td>\n            Jobs that are responses to the settlement of a Promise (see  <emu-xref href=\"#sec-promise-objects\"><a href=\"#sec-promise-objects\" class=\"excluded-xref\" excluded-id=\"sec-promise-objects\">#sec-promise-objects</a></emu-xref>).\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>A request for the future execution of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> is made by enqueueing, on a <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref>, a PendingJob record that includes a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> abstract operation name and any necessary argument values. When there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the ECMAScript implementation removes the first PendingJob from a <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> and uses the information contained in it to create an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and starts execution of the associated <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> abstract operation.</p>\n    <p>The PendingJob records from a single <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> are always initiated in FIFO order. This specification does not define the order in which multiple <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues are serviced. An ECMAScript implementation may interweave the FIFO evaluation of the PendingJob records of a <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> with the evaluation of the PendingJob records of one or more other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues. An implementation must define what occurs when there are no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and all <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues are empty.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>Typically an ECMAScript implementation will have its <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues pre-initialized with at least one PendingJob and one of those Jobs will be the first to be executed. An implementation might choose to free all resources and terminate if the current <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> completes and all <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues are empty. Alternatively, it might choose to wait for a some implementation specific <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> or mechanism to enqueue new PendingJob requests.</p>\n    </div></emu-note>\n    <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used to create and manage Jobs and <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues:</p>\n\n    <div id=\"excluded-sec-enqueuejob\"><h1><span class=\"secnum\">8.4.1</span>#sec-enqueuejob EnqueueJob ( queueName, job, arguments )</h1>...</div></emu-clause>\n\n  "}, "sec-triggerpromisereactions": {"num": "25.6.1.8", "title": "#sec-triggerpromisereactions TriggerPromiseReactions ( reactions, argument )", "html": "<emu-clause id=\"sec-triggerpromisereactions\" aoid=\"TriggerPromiseReactions\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-triggerpromisereactions\">#sec-triggerpromisereactions</span> TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )</h1>\n        <p>The abstract operation TriggerPromiseReactions takes a collection of PromiseReactionRecords and enqueues a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> for each record. Each such <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> processes the [[Type]] and [[Handler]] of the PromiseReactionRecord, and if the [[Handler]] is a function, calls it passing the given argument. If the [[Handler]] is <emu-val>undefined</emu-val>, the behaviour is determined by the [[Type]].</p>\n        <emu-alg><ol><li>For each <var>reaction</var> in <var>reactions</var>, in original insertion order, do<ol><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<code>\"PromiseJobs\"</code>, <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>, &#171; <var>reaction</var>, <var>argument</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runjobs": {"num": "8.6", "title": "#sec-runjobs RunJobs ( )", "html": "<emu-clause id=\"sec-runjobs\" aoid=\"RunJobs\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runjobs\">#sec-runjobs</span> RunJobs ( )</h1>\n    <p>The abstract operation RunJobs performs the following steps:</p>\n    <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"InitializeHostDefinedRealm\"><a href=\"#sec-initializehostdefinedrealm\">InitializeHostDefinedRealm</a></emu-xref>().</li><li>In an implementation-dependent manner, obtain the ECMAScript source texts (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>) and any associated host-defined values for zero or more ECMAScript scripts and/or ECMAScript modules. For each such <var>sourceText</var> and <var>hostDefined</var>, do<ol><li>If <var>sourceText</var> is the source code of a script, then<ol><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<code>\"ScriptJobs\"</code>, <emu-xref aoid=\"ScriptEvaluationJob\"><a href=\"#sec-scriptevaluationjob\">ScriptEvaluationJob</a></emu-xref>, &#171; <var>sourceText</var>, <var>hostDefined</var> &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is the source code of a module.</li><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<code>\"ScriptJobs\"</code>, <emu-xref aoid=\"TopLevelModuleEvaluationJob\"><a href=\"#sec-toplevelmoduleevaluationjob\">TopLevelModuleEvaluationJob</a></emu-xref>, &#171; <var>sourceText</var>, <var>hostDefined</var> &#187;).</li></ol></li></ol></li><li>Repeat,<ol><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is now empty.</li><li>Let <var>nextQueue</var> be a non-empty <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> chosen in an implementation-defined manner. If all <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues are empty, the result is implementation-defined.</li><li>Let <var>nextPending</var> be the PendingJob record at the front of <var>nextQueue</var>. Remove that record from <var>nextQueue</var>.</li><li>Let <var>newContext</var> be a new <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>newContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>newContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>nextPending</var>.[[Realm]].</li><li>Set <var>newContext</var>'s ScriptOrModule to <var>nextPending</var>.[[ScriptOrModule]].</li><li>Push <var>newContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>newContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Perform any implementation or host environment defined job initialization using <var>nextPending</var>.</li><li>Let <var>result</var> be the result of performing the abstract operation named by <var>nextPending</var>.[[Job]] using the elements of <var>nextPending</var>.[[Arguments]] as its arguments.</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform <emu-xref aoid=\"HostReportErrors\"><a href=\"#sec-host-report-errors\">HostReportErrors</a></emu-xref>(&#171; <var>result</var>.[[Value]] &#187;).\n    </li></ol></li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-enqueuejob": {"num": "8.4.1", "title": "#sec-enqueuejob EnqueueJob ( queueName, job, arguments )", "html": "<emu-clause id=\"sec-enqueuejob\" aoid=\"EnqueueJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enqueuejob\">#sec-enqueuejob</span> EnqueueJob ( <var>queueName</var>, <var>job</var>, <var>arguments</var> )</h1>\n      <p>The EnqueueJob abstract operation requires three arguments: <var>queueName</var>, <var>job</var>, and <var>arguments</var>. It performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>queueName</var>) is String and its value is the name of a <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> recognized by this implementation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>job</var> is the name of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>arguments</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that has the same number of elements as the number of parameters required by <var>job</var>.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>callerScriptOrModule</var> be <var>callerContext</var>'s ScriptOrModule.</li><li>Let <var>pending</var> be PendingJob { [[Job]]: <var>job</var>, [[Arguments]]: <var>arguments</var>, [[Realm]]: <var>callerRealm</var>, [[ScriptOrModule]]: <var>callerScriptOrModule</var>, [[HostDefined]]: <emu-val>undefined</emu-val> }.</li><li>Perform any implementation or host environment defined processing of <var>pending</var>. This may include modifying the [[HostDefined]] field or any other field of <var>pending</var>.</li><li>Add <var>pending</var> at the back of the <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> named by <var>queueName</var>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-promiseresolvethenablejob": {"num": "25.6.2.2", "title": "#sec-promiseresolvethenablejob PromiseResolveThenableJob ( promiseToResolve, thenable, then )", "html": "<emu-clause id=\"sec-promiseresolvethenablejob\" aoid=\"PromiseResolveThenableJob\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promiseresolvethenablejob\">#sec-promiseresolvethenablejob</span> PromiseResolveThenableJob ( <var>promiseToResolve</var>, <var>thenable</var>, <var>then</var> )</h1>\n        <p>The job PromiseResolveThenableJob with parameters <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>resolvingFunctions</var> be <emu-xref aoid=\"CreateResolvingFunctions\"><a href=\"#sec-createresolvingfunctions\">CreateResolvingFunctions</a></emu-xref>(<var>promiseToResolve</var>).</li><li>Let <var>thenCallResult</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>then</var>, <var>thenable</var>, &#171; <var>resolvingFunctions</var>.[[Resolve]], <var>resolvingFunctions</var>.[[Reject]] &#187;).</li><li>If <var>thenCallResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resolvingFunctions</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>thenCallResult</var>.[[Value]] &#187;).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>thenCallResult</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> uses the supplied thenable and its <code>then</code> method to resolve the given promise. This process must take place as a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> to ensure that the evaluation of the <code>then</code> method occurs after evaluation of any surrounding code has completed.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-promise-objects": {"num": "25.6", "title": "#sec-promise-objects Promise Objects", "html": "<emu-clause id=\"sec-promise-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-objects\">#sec-promise-objects</span> Promise Objects</h1>\n    <p>A Promise is an object that is used as a placeholder for the eventual results of a deferred (and possibly asynchronous) computation.</p>\n    <p>Any Promise object is in one of three mutually exclusive states:  <em>fulfilled</em>,  <em>rejected</em>, and  <em>pending</em>:</p>\n    <ul>\n      <li>\n        A promise <code>p</code> is fulfilled if <code>p.then(f, r)</code> will immediately enqueue a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> to call the function <code>f</code>.\n      \n      </li>\n      <li>\n        A promise <code>p</code> is rejected if <code>p.then(f, r)</code> will immediately enqueue a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> to call the function <code>r</code>.\n      \n      </li>\n      <li>\n        A promise is pending if it is neither fulfilled nor rejected.\n      \n      </li>\n    </ul>\n    <p>A promise is said to be  <em>settled</em> if it is not pending, i.e. if it is either fulfilled or rejected.</p>\n    <p>A promise is  <em>resolved</em> if it is settled or if it has been &#8220;locked in&#8221; to match the state of another promise. Attempting to resolve or reject a resolved promise has no effect. A promise is  <em>unresolved</em> if it is not resolved. An unresolved promise is always in the pending state. A resolved promise may be pending, fulfilled or rejected.</p>\n\n    <div id=\"excluded-sec-promise-abstract-operations\"><h1><span class=\"secnum\">25.6.1</span>#sec-promise-abstract-operations Promise Abstract Operations</h1>...</div><div id=\"excluded-sec-promise-jobs\"><h1><span class=\"secnum\">25.6.2</span>#sec-promise-jobs Promise Jobs</h1>...</div><div id=\"excluded-sec-promise-constructor\"><h1><span class=\"secnum\">25.6.3</span>#sec-promise-constructor The Promise Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-promise-constructor\"><h1><span class=\"secnum\">25.6.4</span>#sec-properties-of-the-promise-constructor Properties of the Promise Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-promise-prototype-object\"><h1><span class=\"secnum\">25.6.5</span>#sec-properties-of-the-promise-prototype-object Properties of the Promise Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-promise-instances\"><h1><span class=\"secnum\">25.6.6</span>#sec-properties-of-promise-instances Properties of Promise Instances</h1>...</div></emu-clause>\n\n  "}}, "figData": {"table-2": "Table 3", "table-25": "Table 26", "table-26": "Table 27"}}}