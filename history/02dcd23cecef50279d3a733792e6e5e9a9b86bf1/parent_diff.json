{"from": {"secList": ["sec-get-regexp.prototype.ignorecase", "sec-get-regexp.prototype.multiline", "sec-get-regexp.prototype.unicode", "sec-get-regexp.prototype.sticky", "sec-get-regexp.prototype.global", "sec-get-regexp.prototype.dotAll"], "secData": {"sec-get-regexp.prototype.ignorecase": {"num": "22.2.5.6", "title": "#sec-get-regexp.prototype.ignorecase get RegExp.prototype.ignoreCase", "html": "<emu-clause id=\"sec-get-regexp.prototype.ignorecase\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.ignorecase\">#sec-get-regexp.prototype.ignorecase</span> get RegExp.prototype.ignoreCase</h1>\n        <p><code>RegExp.prototype.ignoreCase</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>R</var> does not have an [[OriginalFlags]] internal slot, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">%RegExp.prototype%</a></emu-xref>) is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Otherwise, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains the code unit 0x0069 (LATIN SMALL LETTER I), return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-regexp.prototype.multiline": {"num": "22.2.5.9", "title": "#sec-get-regexp.prototype.multiline get RegExp.prototype.multiline", "html": "<emu-clause id=\"sec-get-regexp.prototype.multiline\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.multiline\">#sec-get-regexp.prototype.multiline</span> get RegExp.prototype.multiline</h1>\n        <p><code>RegExp.prototype.multiline</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>R</var> does not have an [[OriginalFlags]] internal slot, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">%RegExp.prototype%</a></emu-xref>) is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Otherwise, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains the code unit 0x006D (LATIN SMALL LETTER M), return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-regexp.prototype.unicode": {"num": "22.2.5.17", "title": "#sec-get-regexp.prototype.unicode get RegExp.prototype.unicode", "html": "<emu-clause id=\"sec-get-regexp.prototype.unicode\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.unicode\">#sec-get-regexp.prototype.unicode</span> get RegExp.prototype.unicode</h1>\n        <p><code>RegExp.prototype.unicode</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>R</var> does not have an [[OriginalFlags]] internal slot, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">%RegExp.prototype%</a></emu-xref>) is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Otherwise, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains the code unit 0x0075 (LATIN SMALL LETTER U), return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-get-regexp.prototype.sticky": {"num": "22.2.5.14", "title": "#sec-get-regexp.prototype.sticky get RegExp.prototype.sticky", "html": "<emu-clause id=\"sec-get-regexp.prototype.sticky\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.sticky\">#sec-get-regexp.prototype.sticky</span> get RegExp.prototype.sticky</h1>\n        <p><code>RegExp.prototype.sticky</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>R</var> does not have an [[OriginalFlags]] internal slot, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">%RegExp.prototype%</a></emu-xref>) is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Otherwise, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains the code unit 0x0079 (LATIN SMALL LETTER Y), return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-regexp.prototype.global": {"num": "22.2.5.5", "title": "#sec-get-regexp.prototype.global get RegExp.prototype.global", "html": "<emu-clause id=\"sec-get-regexp.prototype.global\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.global\">#sec-get-regexp.prototype.global</span> get RegExp.prototype.global</h1>\n        <p><code>RegExp.prototype.global</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>R</var> does not have an [[OriginalFlags]] internal slot, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">%RegExp.prototype%</a></emu-xref>) is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Otherwise, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains the code unit 0x0067 (LATIN SMALL LETTER G), return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-regexp.prototype.dotAll": {"num": "22.2.5.3", "title": "#sec-get-regexp.prototype.dotAll get RegExp.prototype.dotAll", "html": "<emu-clause id=\"sec-get-regexp.prototype.dotAll\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.dotAll\">#sec-get-regexp.prototype.dotAll</span> get RegExp.prototype.dotAll</h1>\n        <p><code>RegExp.prototype.dotAll</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>R</var> does not have an [[OriginalFlags]] internal slot, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">%RegExp.prototype%</a></emu-xref>) is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Otherwise, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains the code unit 0x0073 (LATIN SMALL LETTER S), return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-get-regexp.prototype.ignorecase", "sec-get-regexp.prototype.multiline", "sec-get-regexp.prototype.unicode", "sec-get-regexp.prototype.sticky", "sec-get-regexp.prototype.global", "sec-regexphasflag", "sec-get-regexp.prototype.dotAll"], "secData": {"sec-get-regexp.prototype.ignorecase": {"num": "22.2.5.6", "title": "#sec-get-regexp.prototype.ignorecase get RegExp.prototype.ignoreCase", "html": "<emu-clause id=\"sec-get-regexp.prototype.ignorecase\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.ignorecase\">#sec-get-regexp.prototype.ignorecase</span> get RegExp.prototype.ignoreCase</h1>\n        <p><code>RegExp.prototype.ignoreCase</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>cu</var> be the code unit 0x0069 (LATIN SMALL LETTER I).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpHasFlag\"><a href=\"#sec-regexphasflag\">RegExpHasFlag</a></emu-xref>(<var>R</var>, <var>cu</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-regexp.prototype.multiline": {"num": "22.2.5.9", "title": "#sec-get-regexp.prototype.multiline get RegExp.prototype.multiline", "html": "<emu-clause id=\"sec-get-regexp.prototype.multiline\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.multiline\">#sec-get-regexp.prototype.multiline</span> get RegExp.prototype.multiline</h1>\n        <p><code>RegExp.prototype.multiline</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>cu</var> be the code unit 0x006D (LATIN SMALL LETTER M).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpHasFlag\"><a href=\"#sec-regexphasflag\">RegExpHasFlag</a></emu-xref>(<var>R</var>, <var>cu</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-regexp.prototype.unicode": {"num": "22.2.5.17", "title": "#sec-get-regexp.prototype.unicode get RegExp.prototype.unicode", "html": "<emu-clause id=\"sec-get-regexp.prototype.unicode\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.unicode\">#sec-get-regexp.prototype.unicode</span> get RegExp.prototype.unicode</h1>\n        <p><code>RegExp.prototype.unicode</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>cu</var> be the code unit 0x0075 (LATIN SMALL LETTER U).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpHasFlag\"><a href=\"#sec-regexphasflag\">RegExpHasFlag</a></emu-xref>(<var>R</var>, <var>cu</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-get-regexp.prototype.sticky": {"num": "22.2.5.14", "title": "#sec-get-regexp.prototype.sticky get RegExp.prototype.sticky", "html": "<emu-clause id=\"sec-get-regexp.prototype.sticky\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.sticky\">#sec-get-regexp.prototype.sticky</span> get RegExp.prototype.sticky</h1>\n        <p><code>RegExp.prototype.sticky</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>cu</var> be the code unit 0x0079 (LATIN SMALL LETTER Y).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpHasFlag\"><a href=\"#sec-regexphasflag\">RegExpHasFlag</a></emu-xref>(<var>R</var>, <var>cu</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-regexp.prototype.global": {"num": "22.2.5.5", "title": "#sec-get-regexp.prototype.global get RegExp.prototype.global", "html": "<emu-clause id=\"sec-get-regexp.prototype.global\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.global\">#sec-get-regexp.prototype.global</span> get RegExp.prototype.global</h1>\n        <p><code>RegExp.prototype.global</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>cu</var> be the code unit 0x0067 (LATIN SMALL LETTER G).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpHasFlag\"><a href=\"#sec-regexphasflag\">RegExpHasFlag</a></emu-xref>(<var>R</var>, <var>cu</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexphasflag": {"num": "22.2.5.3.1", "title": "#sec-regexphasflag RegExpHasFlag ( R, codeUnit )", "html": "<emu-clause id=\"sec-regexphasflag\" aoid=\"RegExpHasFlag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexphasflag\">#sec-regexphasflag</span> RegExpHasFlag ( <var>R</var>, <var>codeUnit</var> )</h1>\n          <p>The abstract operation RegExpHasFlag takes arguments <var>R</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>codeUnit</var> (a code unit). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>R</var> does not have an [[OriginalFlags]] internal slot, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">%RegExp.prototype%</a></emu-xref>) is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Otherwise, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains <var>codeUnit</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-get-regexp.prototype.dotAll": {"num": "22.2.5.3", "title": "#sec-get-regexp.prototype.dotAll get RegExp.prototype.dotAll", "html": "<emu-clause id=\"sec-get-regexp.prototype.dotAll\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.dotAll\">#sec-get-regexp.prototype.dotAll</span> get RegExp.prototype.dotAll</h1>\n        <p><code>RegExp.prototype.dotAll</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>cu</var> be the code unit 0x0073 (LATIN SMALL LETTER S).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpHasFlag\"><a href=\"#sec-regexphasflag\">RegExpHasFlag</a></emu-xref>(<var>R</var>, <var>cu</var>).</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-regexphasflag\"><h1><span class=\"secnum\">22.2.5.3.1</span>#sec-regexphasflag RegExpHasFlag ( R, codeUnit )</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}}