{"from": {"secList": ["sec-arrow-function-definitions-runtime-semantics-namedevaluation", "sec-asyncgenerator-definitions-namedevaluation", "sec-class-definitions", "sec-initializers-in-forin-statement-heads", "sec-async-generator-function-definitions", "sec-runtime-semantics-propertydefinitionevaluation", "sec-runtime-semantics-iteratordestructuringassignmentevaluation", "sec-async-arrow-function-definitions-runtime-semantics-namedevaluation", "sec-function-definitions", "sec-generator-function-definitions-runtime-semantics-namedevaluation", "sec-static-semantics-isidentifierref", "sec-variable-statement-runtime-semantics-evaluation", "sec-function-definitions-runtime-semantics-namedevaluation", "sec-runtime-semantics-propertydestructuringassignmentevaluation", "sec-runtime-semantics-keyeddestructuringassignmentevaluation", "sec-async-arrow-function-definitions", "sec-__proto__-property-names-in-object-initializers", "sec-let-and-const-declarations-runtime-semantics-evaluation", "sec-arrow-function-definitions", "sec-async-function-definitions-runtime-semantics-namedevaluation", "sec-generator-function-definitions", "sec-class-definitions-runtime-semantics-namedevaluation", "sec-assignment-operators-runtime-semantics-evaluation", "sec-syntax-directed-operations-function-name-inference", "sec-grouping-operator-runtime-semantics-namedevaluation", "sec-exports-runtime-semantics-evaluation", "sec-runtime-semantics-iteratorbindinginitialization", "sec-async-function-definitions", "sec-runtime-semantics-keyedbindinginitialization", "sec-grouping-operator"], "secData": {"sec-arrow-function-definitions-runtime-semantics-namedevaluation": {"num": "15.3.6", "title": "#sec-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-arrow-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions-runtime-semantics-namedevaluation\">#sec-arrow-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"88410e0f\">\n        <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateArrowFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiatearrowfunctionexpression\">InstantiateArrowFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-definitions-namedevaluation": {"num": "15.6.5", "title": "#sec-asyncgenerator-definitions-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-namedevaluation\">#sec-asyncgenerator-definitions-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c51514e0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateAsyncGeneratorFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\">InstantiateAsyncGeneratorFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-class-definitions": {"num": "15.7", "title": "#sec-class-definitions Class Definitions", "html": "<emu-clause id=\"sec-class-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions\">#sec-class-definitions</span> Class Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\" id=\"prod-ClassDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"afef225f\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"788487dc\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassExpression\" params=\"Yield, Await\" id=\"prod-ClassExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd578cac\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassTail\" params=\"Yield, Await\" id=\"prod-ClassTail\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d2d0a98e\">\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassHeritage\" params=\"Yield, Await\" id=\"prod-ClassHeritage\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7989e09f\">\n        <emu-t>extends</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassBody\" params=\"Yield, Await\" id=\"prod-ClassBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1c8eab17\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElementList\" params=\"Yield, Await\" id=\"prod-ClassElementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2fb64cb4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"180d43b5\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" params=\"Yield, Await\" id=\"prod-ClassElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b4234e8\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>A class definition is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-class-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.7.1</span>#sec-class-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-classelementkind\"><h1><span class=\"secnum\">15.7.2</span>#sec-static-semantics-classelementkind Static Semantics: ClassElementKind</h1>...</div><div id=\"excluded-sec-static-semantics-constructormethod\"><h1><span class=\"secnum\">15.7.3</span>#sec-static-semantics-constructormethod Static Semantics: ConstructorMethod</h1>...</div><div id=\"excluded-sec-static-semantics-isstatic\"><h1><span class=\"secnum\">15.7.4</span>#sec-static-semantics-isstatic Static Semantics: IsStatic</h1>...</div><div id=\"excluded-sec-static-semantics-nonconstructormethoddefinitions\"><h1><span class=\"secnum\">15.7.5</span>#sec-static-semantics-nonconstructormethoddefinitions Static Semantics: NonConstructorMethodDefinitions</h1>...</div><div id=\"excluded-sec-static-semantics-prototypepropertynamelist\"><h1><span class=\"secnum\">15.7.6</span>#sec-static-semantics-prototypepropertynamelist Static Semantics: PrototypePropertyNameList</h1>...</div><div id=\"excluded-sec-runtime-semantics-classdefinitionevaluation\"><h1><span class=\"secnum\">15.7.7</span>#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindingclassdeclarationevaluation\"><h1><span class=\"secnum\">15.7.8</span>#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation</h1>...</div><div id=\"excluded-sec-class-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">15.7.9</span>#sec-class-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-class-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.7.10</span>#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a2e02ff2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsduplicatelabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"IsDestructuring\"><a href=\"#sec-static-semantics-isdestructuring\">IsDestructuring</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-isdestructuring\"><a href=\"#sec-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-isdestructuring\">#sec-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-vardeclarednames\"><a href=\"#sec-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-varscopeddeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"LoopEvaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\">LoopEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-loopevaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-loopevaluation\">#sec-runtime-semantics-loopevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-async-generator-function-definitions": {"num": "15.6", "title": "#sec-async-generator-function-definitions Async Generator Function Definitions", "html": "<emu-clause id=\"sec-async-generator-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-generator-function-definitions\">#sec-async-generator-function-definitions</span> Async Generator Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncGeneratorMethod\" params=\"Yield, Await\" id=\"prod-AsyncGeneratorMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a713bc4f\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncGeneratorDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf1795ae\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"cdd34229\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorExpression\" id=\"prod-AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ca1d1606\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorBody\" id=\"prod-AsyncGeneratorBody\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cd09a4ad\"><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> and <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> cannot be used within the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an async generator function because any expressions that are part of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> are evaluated before the resulting async generator object is in a resumable state.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> relating to async generator objects are defined in <emu-xref href=\"#sec-asyncgenerator-abstract-operations\"><a href=\"#sec-asyncgenerator-abstract-operations\" class=\"excluded-xref\" excluded-id=\"sec-asyncgenerator-abstract-operations\">#sec-asyncgenerator-abstract-operations</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-generator-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.6.1</span>#sec-async-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluateasyncgeneratorbody\"><h1><span class=\"secnum\">15.6.2</span>#sec-runtime-semantics-evaluateasyncgeneratorbody Runtime Semantics: EvaluateAsyncGeneratorBody</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncgeneratorfunctionobject\"><h1><span class=\"secnum\">15.6.3</span>#sec-runtime-semantics-instantiateasyncgeneratorfunctionobject Runtime Semantics: InstantiateAsyncGeneratorFunctionObject</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\"><h1><span class=\"secnum\">15.6.4</span>#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression Runtime Semantics: InstantiateAsyncGeneratorFunctionExpression</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-namedevaluation\"><h1><span class=\"secnum\">15.6.5</span>#sec-asyncgenerator-definitions-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-evaluation\"><h1><span class=\"secnum\">15.6.6</span>#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-propertydefinitionevaluation": {"num": "13.2.6.5", "title": "#sec-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydefinitionevaluation\" oldids=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" type=\"sdo\" aoid=\"PropertyDefinitionEvaluation\"><span id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n        <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3152d601\">\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li><li>Return the result of performing <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5bb8853e\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>excludedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"CopyDataProperties\"><a href=\"#sec-copydataproperties\">CopyDataProperties</a></emu-xref>(<var>object</var>, <var>fromValue</var>, <var>excludedNames</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propName</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propName</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative semantics for this production is given in <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cb8e53e9\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"f1487956\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"4402354c\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5c757ac\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be384400\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"759e5682\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-iteratordestructuringassignmentevaluation": {"num": "13.15.5.5", "title": "#sec-runtime-semantics-iteratordestructuringassignmentevaluation Runtime Semantics: IteratorDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\" type=\"sdo\" aoid=\"IteratorDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\">#sec-runtime-semantics-iteratordestructuringassignmentevaluation</span> Runtime Semantics: IteratorDestructuringAssignmentEvaluation</h1>\n        <p>With parameter <var>iteratorRecord</var>.</p>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e2bbd46c\"><emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bdc5c277\">\n        <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"816d4abc\"><emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"696f42ef\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"806d0124\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a73ccacf\">\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>value</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>value</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>value</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>v</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Else, let <var>v</var> be <var>value</var>.</li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>v</var> as the argument.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Left to right evaluation order is maintained by evaluating a <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> that is not a destructuring pattern prior to accessing the iterator or evaluating the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"AssignmentRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cf470c76\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat, while <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>,<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>A</var>).</li></ol></li><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>A</var> as the argument.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-async-arrow-function-definitions-runtime-semantics-namedevaluation": {"num": "15.9.6", "title": "#sec-async-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\">#sec-async-arrow-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7505c63a\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"694c2ff0\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateAsyncArrowFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiateasyncarrowfunctionexpression\">InstantiateAsyncArrowFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-function-definitions": {"num": "15.2", "title": "#sec-function-definitions Function Definitions", "html": "<emu-clause id=\"sec-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</span> Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-FunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7c02f6b3\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\" id=\"prod-FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1faafdcc\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionBody\" params=\"Yield, Await\" id=\"prod-FunctionBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionStatementList\" params=\"Yield, Await\" id=\"prod-FunctionStatementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.2.1</span>#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-functionbodycontainsusestrict\"><h1><span class=\"secnum\">15.2.2</span>#sec-static-semantics-functionbodycontainsusestrict Static Semantics: FunctionBodyContainsUseStrict</h1>...</div><div id=\"excluded-sec-static-semantics-hasname\"><h1><span class=\"secnum\">15.2.3</span>#sec-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">15.2.4</span>#sec-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-isanonymousfunctiondefinition\"><h1><span class=\"secnum\">15.2.5</span>#sec-isanonymousfunctiondefinition Static Semantics: IsAnonymousFunctionDefinition ( expr )</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluatefunctionbody\"><h1><span class=\"secnum\">15.2.6</span>#sec-runtime-semantics-evaluatefunctionbody Runtime Semantics: EvaluateFunctionBody</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateordinaryfunctionobject\"><h1><span class=\"secnum\">15.2.7</span>#sec-runtime-semantics-instantiateordinaryfunctionobject Runtime Semantics: InstantiateOrdinaryFunctionObject</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateordinaryfunctionexpression\"><h1><span class=\"secnum\">15.2.8</span>#sec-runtime-semantics-instantiateordinaryfunctionexpression Runtime Semantics: InstantiateOrdinaryFunctionExpression</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">15.2.9</span>#sec-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.2.10</span>#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-generator-function-definitions-runtime-semantics-namedevaluation": {"num": "15.5.5", "title": "#sec-generator-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-namedevaluation\">#sec-generator-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d271960\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateGeneratorFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiategeneratorfunctionexpression\">InstantiateGeneratorFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-isidentifierref": {"num": "8.3.1", "title": "#sec-static-semantics-isidentifierref Static Semantics: IsIdentifierRef", "html": "<emu-clause id=\"sec-static-semantics-isidentifierref\" oldids=\"sec-semantics-static-semantics-isidentifierref,sec-static-semantics-static-semantics-isidentifierref\" type=\"sdo\" aoid=\"IsIdentifierRef\"><span id=\"sec-static-semantics-static-semantics-isidentifierref\"></span><span id=\"sec-semantics-static-semantics-isidentifierref\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-isidentifierref\">#sec-static-semantics-isidentifierref</span> Static Semantics: IsIdentifierRef</h1>\n      <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"PrimaryExpression\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8cee0c59\"><emu-t>this</emu-t></emu-rhs>\n    <emu-rhs a=\"92e97e03\"><emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1bf32393\"><emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd178913\"><emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"242eeccd\"><emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8ce6db1\"><emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb7f7f4\"><emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad589bb4\"><emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3403ed46\"><emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d9922ce8\"><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6bbe1777\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"149e7618\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e753fad7\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"25b793e9\"><emu-nt><a href=\"#prod-OptionalExpression\">OptionalExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-variable-statement-runtime-semantics-evaluation": {"num": "14.3.2.1", "title": "#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-variable-statement-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement-runtime-semantics-evaluation\">#sec-variable-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3347a1bd\">\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a0057011\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"89becb83\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li id=\"step-vardecllist-evaluation-putvalue\">Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is nested within a with statement and the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is the same as a <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> of the binding object of the with statement's <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then step <emu-xref href=\"#step-vardecllist-evaluation-putvalue\"><a href=\"#step-vardecllist-evaluation-putvalue\" class=\"excluded-xref\" excluded-id=\"step-vardecllist-evaluation-putvalue\">#step-vardecllist-evaluation-putvalue</a></emu-xref> will assign <var>value</var> to the property instead of assigning to the VariableEnvironment binding of the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0ddd53e5\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> passing <var>rval</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-function-definitions-runtime-semantics-namedevaluation": {"num": "15.2.9", "title": "#sec-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-namedevaluation\">#sec-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b26bacea\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateOrdinaryFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiateordinaryfunctionexpression\">InstantiateOrdinaryFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-propertydestructuringassignmentevaluation": {"num": "13.15.5.3", "title": "#sec-runtime-semantics-propertydestructuringassignmentevaluation Runtime Semantics: PropertyDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\" type=\"sdo\" aoid=\"PropertyDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\">#sec-runtime-semantics-propertydestructuringassignmentevaluation</span> Runtime Semantics: PropertyDestructuringAssignmentEvaluation</h1>\n        <p>With parameter <var>value</var>.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The following operations collect a list of all destructured property names.</div></emu-note>\n\n        <emu-grammar><emu-production name=\"AssignmentPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c3680459\">\n        <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propertyNames</var> be ? <emu-xref aoid=\"PropertyDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-propertydestructuringassignmentevaluation\">PropertyDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt> with argument <var>value</var>.</li><li>Let <var>nextNames</var> be ? <emu-xref aoid=\"PropertyDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-propertydestructuringassignmentevaluation\">PropertyDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> with argument <var>value</var>.</li><li>Append each item in <var>nextNames</var> to the end of <var>propertyNames</var>.</li><li>Return <var>propertyNames</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c55f7708\">\n        <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>P</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>lref</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>P</var>).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>P</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing NamedEvaluation for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>P</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>P</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c9ac8882\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>name</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>name</var>).</li><li>Perform ? <emu-xref aoid=\"KeyedDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-keyeddestructuringassignmentevaluation\">KeyedDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>value</var> and <var>name</var> as the arguments.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>name</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-keyeddestructuringassignmentevaluation": {"num": "13.15.5.6", "title": "#sec-runtime-semantics-keyeddestructuringassignmentevaluation Runtime Semantics: KeyedDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-keyeddestructuringassignmentevaluation\" type=\"sdo\" aoid=\"KeyedDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-keyeddestructuringassignmentevaluation\">#sec-runtime-semantics-keyeddestructuringassignmentevaluation</span> Runtime Semantics: KeyedDestructuringAssignmentEvaluation</h1>\n        <p>With parameters <var>value</var> and <var>propertyName</var>.</p>\n        <emu-grammar><emu-production name=\"AssignmentElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a73ccacf\">\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>propertyName</var>).</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rhsValue</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rhsValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Else, let <var>rhsValue</var> be <var>v</var>.</li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> with <var>rhsValue</var> as the argument.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rhsValue</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-arrow-function-definitions": {"num": "15.9", "title": "#sec-async-arrow-function-definitions Async Arrow Function Definitions", "html": "<emu-clause id=\"sec-async-arrow-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions\">#sec-async-arrow-function-definitions</span> Async Arrow Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\" id=\"prod-AsyncArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bb50dce4\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"callcover\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncConciseBody\" params=\"In\" id=\"prod-AsyncConciseBody\">\n    <emu-nt params=\"In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6cf537fe\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, +Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6ccf9be6\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncArrowBindingIdentifier\" params=\"Yield\" id=\"prod-AsyncArrowBindingIdentifier\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"614a19b0\"><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" params=\"Yield, Await\" id=\"prod-CoverCallExpressionAndAsyncArrowHead\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f747be5d\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When processing an instance of the production\n      <br>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"694c2ff0\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncArrowHead\" id=\"prod-AsyncArrowHead\">\n    <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c9d14bfe\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.9.1</span>#sec-async-arrow-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-CoveredAsyncArrowHead\"><h1><span class=\"secnum\">15.9.2</span>#sec-async-arrow-function-definitions-static-semantics-CoveredAsyncArrowHead Static Semantics: CoveredAsyncArrowHead</h1>...</div><div id=\"excluded-sec-static-semantics-asyncconcisebodycontainsusestrict\"><h1><span class=\"secnum\">15.9.3</span>#sec-static-semantics-asyncconcisebodycontainsusestrict Static Semantics: AsyncConciseBodyContainsUseStrict</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluateasyncconcisebody\"><h1><span class=\"secnum\">15.9.4</span>#sec-runtime-semantics-evaluateasyncconcisebody Runtime Semantics: EvaluateAsyncConciseBody</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncarrowfunctionexpression\"><h1><span class=\"secnum\">15.9.5</span>#sec-runtime-semantics-instantiateasyncarrowfunctionexpression Runtime Semantics: InstantiateAsyncArrowFunctionExpression</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">15.9.6</span>#sec-async-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.9.7</span>#sec-async-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-__proto__-property-names-in-object-initializers": {"num": "B.3.1", "title": "#sec-__proto__-property-names-in-object-initializers __proto__ Property Names in Object Initializers", "html": "<emu-annex id=\"sec-__proto__-property-names-in-object-initializers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</span> __proto__ Property Names in Object Initializers</h1>\n      <p>The following Early Error rule is added to those in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>. This rule is <b>not</b> applied under any of the following circumstances:</p>\n      <ul>\n        <li>when <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required,</li>\n        <li>when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or a <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>, or</li>\n        <li>when parsing text for <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"ObjectLiteral\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1bef8ed3\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"8703527f\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> does not include string literal property names defined as using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n      </div></emu-note>\n      <p>In <emu-xref href=\"#sec-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</a></emu-xref> the <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> algorithm for the production\n        <br>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <br>\n        is replaced with the following definition:</p>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val> and if <emu-xref aoid=\"IsComputedPropertyKey\"><a href=\"#sec-static-semantics-iscomputedpropertykey\">IsComputedPropertyKey</a></emu-xref>(<emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-let-and-const-declarations-runtime-semantics-evaluation": {"num": "14.3.1.2", "title": "#sec-let-and-const-declarations-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-let-and-const-declarations-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-let-and-const-declarations-runtime-semantics-evaluation\">#sec-let-and-const-declarations-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"LexicalDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0dea8409\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"BindingList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0ede34cd\">\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <emu-val>undefined</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> rule ensures that this form of <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> never occurs in a <code>const</code> declaration.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"89becb83\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0ddd53e5\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> using <var>value</var> and <var>env</var> as the arguments.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-arrow-function-definitions": {"num": "15.3", "title": "#sec-arrow-function-definitions Arrow Function Definitions", "html": "<emu-clause id=\"sec-arrow-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</span> Arrow Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\" id=\"prod-ArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0be22025\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ArrowParameters\" params=\"Yield, Await\" id=\"prod-ArrowParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ConciseBody\" params=\"In\" id=\"prod-ConciseBody\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7a8157ec\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, ~Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, ~Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6f7b95b3\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ExpressionBody\" params=\"In, Await\" id=\"prod-ExpressionBody\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"21c2a074\"><emu-nt params=\"?In, ~Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When processing an instance of the production\n      <br>\n      <emu-grammar><emu-production name=\"ArrowParameters\" params=\"Yield, Await\" collapsed=\"\" class=\" inline\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"29cadaef\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> is refined using the following grammar:</p>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\" id=\"prod-ArrowFormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b7561ab3\">\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-arrow-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.3.1</span>#sec-arrow-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-concisebodycontainsusestrict\"><h1><span class=\"secnum\">15.3.2</span>#sec-static-semantics-concisebodycontainsusestrict Static Semantics: ConciseBodyContainsUseStrict</h1>...</div><div id=\"excluded-sec-static-semantics-coveredformalslist\"><h1><span class=\"secnum\">15.3.3</span>#sec-static-semantics-coveredformalslist Static Semantics: CoveredFormalsList</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluateconcisebody\"><h1><span class=\"secnum\">15.3.4</span>#sec-runtime-semantics-evaluateconcisebody Runtime Semantics: EvaluateConciseBody</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiatearrowfunctionexpression\"><h1><span class=\"secnum\">15.3.5</span>#sec-runtime-semantics-instantiatearrowfunctionexpression Runtime Semantics: InstantiateArrowFunctionExpression</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">15.3.6</span>#sec-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.3.7</span>#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-async-function-definitions-runtime-semantics-namedevaluation": {"num": "15.8.5", "title": "#sec-async-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-namedevaluation\">#sec-async-function-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6a076671\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateAsyncFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiateasyncfunctionexpression\">InstantiateAsyncFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions": {"num": "15.5", "title": "#sec-generator-function-definitions Generator Function Definitions", "html": "<emu-clause id=\"sec-generator-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions\">#sec-generator-function-definitions</span> Generator Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"GeneratorMethod\" params=\"Yield, Await\" id=\"prod-GeneratorMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"54505152\">\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorDeclaration\" params=\"Yield, Await, Default\" id=\"prod-GeneratorDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e7a001a0\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"19cc4b38\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorExpression\" id=\"prod-GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"65253812\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorBody\" id=\"prod-GeneratorBody\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"42e56a37\"><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"YieldExpression\" params=\"In, Await\" id=\"prod-YieldExpression\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"68b64d66\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>The syntactic context immediately following <code>yield</code> requires use of the <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> lexical goal.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> cannot be used within the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a generator function because any expressions that are part of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> are evaluated before the resulting generator object is in a resumable state.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> relating to generator objects are defined in <emu-xref href=\"#sec-generator-abstract-operations\"><a href=\"#sec-generator-abstract-operations\" class=\"excluded-xref\" excluded-id=\"sec-generator-abstract-operations\">#sec-generator-abstract-operations</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-generator-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.5.1</span>#sec-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluategeneratorbody\"><h1><span class=\"secnum\">15.5.2</span>#sec-runtime-semantics-evaluategeneratorbody Runtime Semantics: EvaluateGeneratorBody</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiategeneratorfunctionobject\"><h1><span class=\"secnum\">15.5.3</span>#sec-runtime-semantics-instantiategeneratorfunctionobject Runtime Semantics: InstantiateGeneratorFunctionObject</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiategeneratorfunctionexpression\"><h1><span class=\"secnum\">15.5.4</span>#sec-runtime-semantics-instantiategeneratorfunctionexpression Runtime Semantics: InstantiateGeneratorFunctionExpression</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">15.5.5</span>#sec-generator-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.5.6</span>#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-class-definitions-runtime-semantics-namedevaluation": {"num": "15.7.9", "title": "#sec-class-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-namedevaluation\">#sec-class-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d461f28b\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be the result of <emu-xref aoid=\"ClassDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classdefinitionevaluation\">ClassDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <var>name</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "13.15.2", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8a33cee0\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-simple-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5f3a8747\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-compound-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>assignmentOpText</var> be the source text matched by <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>.</li><li>Let <var>opText</var> be the sequence of Unicode code points associated with <var>assignmentOpText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>assignmentOpText</var> </th><th> <var>opText</var>       </th></tr>\n                <tr><td> <code>**=</code>              </td><td> <code>**</code>           </td></tr>\n                <tr><td> <code>*=</code>               </td><td> <code>*</code>            </td></tr>\n                <tr><td> <code>/=</code>               </td><td> <code>/</code>            </td></tr>\n                <tr><td> <code>%=</code>               </td><td> <code>%</code>            </td></tr>\n                <tr><td> <code>+=</code>               </td><td> <code>+</code>            </td></tr>\n                <tr><td> <code>-=</code>               </td><td> <code>-</code>            </td></tr>\n                <tr><td> <code>&lt;&lt;=</code>        </td><td> <code>&lt;&lt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;=</code>        </td><td> <code>&gt;&gt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;=</code>    </td><td> <code>&gt;&gt;&gt;</code> </td></tr>\n                <tr><td> <code>&amp;=</code>           </td><td> <code>&amp;</code>        </td></tr>\n                <tr><td> <code>^=</code>               </td><td> <code>^</code>            </td></tr>\n                <tr><td> <code>|=</code>               </td><td> <code>|</code>            </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Let <var>r</var> be <emu-xref aoid=\"ApplyStringOrNumericBinaryOperator\"><a href=\"#sec-applystringornumericbinaryoperator\">ApplyStringOrNumericBinaryOperator</a></emu-xref>(<var>lval</var>, <var>opText</var>, <var>rval</var>).</li><li id=\"step-assignmentexpression-evaluation-compound-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0de56464\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>&amp;&amp;=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>false</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d3d4545\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>||=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>true</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0db89f3e\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>??=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>If <var>lval</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When this expression occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-simple-putvalue\"><a href=\"#step-assignmentexpression-evaluation-simple-putvalue\">1.e</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-compound-getvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-getvalue\">#step-assignmentexpression-evaluation-compound-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">#step-assignmentexpression-evaluation-lgcl-and-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">#step-assignmentexpression-evaluation-lgcl-or-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-getvalue</a></emu-xref> is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. Additionally, it is a runtime error if the <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-compound-putvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-putvalue\">#step-assignmentexpression-evaluation-compound-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">#step-assignmentexpression-evaluation-lgcl-and-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">#step-assignmentexpression-evaluation-lgcl-or-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-putvalue</a></emu-xref> is a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, or to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-syntax-directed-operations-function-name-inference": {"num": "8.3", "title": "#sec-syntax-directed-operations-function-name-inference Function Name Inference", "html": "<emu-clause id=\"sec-syntax-directed-operations-function-name-inference\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntax-directed-operations-function-name-inference\">#sec-syntax-directed-operations-function-name-inference</span> Function Name Inference</h1>\n\n    <div id=\"excluded-sec-static-semantics-isidentifierref\"><h1><span class=\"secnum\">8.3.1</span>#sec-static-semantics-isidentifierref Static Semantics: IsIdentifierRef</h1>...</div></emu-clause>\n\n  "}, "sec-grouping-operator-runtime-semantics-namedevaluation": {"num": "13.2.10.2", "title": "#sec-grouping-operator-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-grouping-operator-runtime-semantics-namedevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-grouping-operator-runtime-semantics-namedevaluation\">#sec-grouping-operator-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n        <p>With parameter <var>name</var>.</p>\n        <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be <emu-xref aoid=\"CoveredParenthesizedExpression\"><a href=\"#sec-static-semantics-coveredparenthesizedexpression\">CoveredParenthesizedExpression</a></emu-xref> of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return the result of performing NamedEvaluation for <var>expr</var> with argument <var>name</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ParenthesizedExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ParenthesizedExpression\">ParenthesizedExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4ba6ef9d\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>) is <emu-val>true</emu-val>.</li><li>Return the result of performing NamedEvaluation for <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-exports-runtime-semantics-evaluation": {"num": "16.2.3.7", "title": "#sec-exports-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-exports-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-runtime-semantics-evaluation\">#sec-exports-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e0a40575\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"2762c7fe\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6c6de801\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"828f5ae3\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"71d1417e\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c3c3cb8d\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>value</var> be ? <emu-xref aoid=\"BindingClassDeclarationEvaluation\"><a href=\"#sec-runtime-semantics-bindingclassdeclarationevaluation\">BindingClassDeclarationEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>className</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>If <var>className</var> is <emu-val>\"*default*\"</emu-val>, then<ol><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<emu-val>\"*default*\"</emu-val>, <var>value</var>, <var>env</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e1fe9c4f\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-val>\"default\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<emu-val>\"*default*\"</emu-val>, <var>value</var>, <var>env</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-iteratorbindinginitialization": {"num": "8.5.3", "title": "#sec-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization", "html": "<emu-clause id=\"sec-runtime-semantics-iteratorbindinginitialization\" oldids=\"sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization,sec-function-definitions-runtime-semantics-iteratorbindinginitialization,sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization,sec-async-arrow-function-definitions-IteratorBindingInitialization\" type=\"sdo\" aoid=\"IteratorBindingInitialization\"><span id=\"sec-async-arrow-function-definitions-IteratorBindingInitialization\"></span><span id=\"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\"></span><span id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"></span><span id=\"sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-iteratorbindinginitialization\">#sec-runtime-semantics-iteratorbindinginitialization</span> Runtime Semantics: IteratorBindingInitialization</h1>\n      <p>With parameters <var>iteratorRecord</var> and <var>environment</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for formal parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order to deal with the possibility of multiple parameters with the same name.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"99d85234\">\n        <emu-t>[</emu-t>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"31ffe6b2\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0c457c16\">\n        <emu-t>[</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"95b63a14\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ee591d49\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1e2c0030\">\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b07fbefe\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SingleNameBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0b9344a8\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>, <var>environment</var>).</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing NamedEvaluation for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6875fa94\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> with <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"145844de\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <var>environment</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>A</var>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>A</var>).</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1e627394\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> with <var>A</var> and <var>environment</var> as the arguments.</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b9079b6b\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameterList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"209ae310\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>.</li><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> using <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>formals</var> be <emu-xref aoid=\"CoveredFormalsList\"><a href=\"#sec-static-semantics-coveredformalslist\">CoveredFormalsList</a></emu-xref> of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> of <var>formals</var> with arguments <var>iteratorRecord</var> and <var>environment</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowBindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>.</li><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> using <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions": {"num": "15.8", "title": "#sec-async-function-definitions Async Function Definitions", "html": "<emu-clause id=\"sec-async-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</span> Async Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncFunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f512250e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"fef042b8\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\" id=\"prod-AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c25b1d19\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"be6457e0\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\" params=\"Yield, Await\" id=\"prod-AsyncMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a922691e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionBody\" id=\"prod-AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AwaitExpression\" params=\"Yield\" id=\"prod-AwaitExpression\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c19c56e7\">\n        <emu-t>await</emu-t>\n        <emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><code>await</code> is parsed as an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> when the <sub>[Await]</sub> parameter is present. The <sub>[Await]</sub> parameter is present in the following contexts:</p>\n      <ul>\n        <li>In an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>. <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> in this position is a Syntax error via <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref>.</li>\n      </ul>\n      <p>When <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and the <sub>[Await]</sub> parameter is absent, <code>await</code> is parsed as a <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> and will be a Syntax error. When <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, <code>await</code> may be parsed as an identifier when the <sub>[Await]</sub> parameter is absent. This includes the following contexts:</p>\n      <ul>\n        <li>Anywhere outside of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> or <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n      </ul>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Unlike <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>, it is a Syntax Error to omit the operand of an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt>. You must await something.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.8.1</span>#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncfunctionobject\"><h1><span class=\"secnum\">15.8.2</span>#sec-runtime-semantics-instantiateasyncfunctionobject Runtime Semantics: InstantiateAsyncFunctionObject</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncfunctionexpression\"><h1><span class=\"secnum\">15.8.3</span>#sec-runtime-semantics-instantiateasyncfunctionexpression Runtime Semantics: InstantiateAsyncFunctionExpression</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluateasyncfunctionbody\"><h1><span class=\"secnum\">15.8.4</span>#sec-runtime-semantics-evaluateasyncfunctionbody Runtime Semantics: EvaluateAsyncFunctionBody</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">15.8.5</span>#sec-async-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.8.6</span>#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-keyedbindinginitialization": {"num": "14.3.3.3", "title": "#sec-runtime-semantics-keyedbindinginitialization Runtime Semantics: KeyedBindingInitialization", "html": "<emu-clause id=\"sec-runtime-semantics-keyedbindinginitialization\" type=\"sdo\" aoid=\"KeyedBindingInitialization\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-keyedbindinginitialization\">#sec-runtime-semantics-keyedbindinginitialization</span> Runtime Semantics: KeyedBindingInitialization</h1>\n        <p>With parameters <var>value</var>, <var>environment</var>, and <var>propertyName</var>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for formal parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order to deal with the possibility of multiple parameters with the same name.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"BindingElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6875fa94\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>propertyName</var>).</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> passing <var>v</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SingleNameBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0b9344a8\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>, <var>environment</var>).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>propertyName</var>).</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing NamedEvaluation for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-grouping-operator": {"num": "13.2.10", "title": "#sec-grouping-operator The Grouping Operator", "html": "<emu-clause id=\"sec-grouping-operator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-grouping-operator\">#sec-grouping-operator</span> The Grouping Operator</h1>\n\n      <div id=\"excluded-sec-grouping-operator-static-semantics-early-errors\"><h1><span class=\"secnum\">13.2.10.1</span>#sec-grouping-operator-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-grouping-operator-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">13.2.10.2</span>#sec-grouping-operator-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-grouping-operator-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.2.10.3</span>#sec-grouping-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-class-definitions", "sec-initializers-in-forin-statement-heads", "sec-async-generator-function-definitions", "sec-runtime-semantics-propertydefinitionevaluation", "sec-runtime-semantics-iteratordestructuringassignmentevaluation", "sec-function-definitions", "sec-static-semantics-isidentifierref", "sec-variable-statement-runtime-semantics-evaluation", "sec-runtime-semantics-propertydestructuringassignmentevaluation", "sec-runtime-semantics-keyeddestructuringassignmentevaluation", "sec-async-arrow-function-definitions", "sec-__proto__-property-names-in-object-initializers", "sec-let-and-const-declarations-runtime-semantics-evaluation", "sec-arrow-function-definitions", "sec-generator-function-definitions", "sec-assignment-operators-runtime-semantics-evaluation", "sec-runtime-semantics-namedevaluation", "sec-syntax-directed-operations-function-name-inference", "sec-exports-runtime-semantics-evaluation", "sec-runtime-semantics-iteratorbindinginitialization", "sec-async-function-definitions", "sec-runtime-semantics-keyedbindinginitialization", "sec-grouping-operator"], "secData": {"sec-class-definitions": {"num": "15.7", "title": "#sec-class-definitions Class Definitions", "html": "<emu-clause id=\"sec-class-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions\">#sec-class-definitions</span> Class Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\" id=\"prod-ClassDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"afef225f\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"788487dc\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassExpression\" params=\"Yield, Await\" id=\"prod-ClassExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd578cac\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassTail\" params=\"Yield, Await\" id=\"prod-ClassTail\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d2d0a98e\">\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassHeritage\" params=\"Yield, Await\" id=\"prod-ClassHeritage\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7989e09f\">\n        <emu-t>extends</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassBody\" params=\"Yield, Await\" id=\"prod-ClassBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1c8eab17\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElementList\" params=\"Yield, Await\" id=\"prod-ClassElementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2fb64cb4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"180d43b5\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" params=\"Yield, Await\" id=\"prod-ClassElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b4234e8\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>A class definition is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-class-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.7.1</span>#sec-class-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-classelementkind\"><h1><span class=\"secnum\">15.7.2</span>#sec-static-semantics-classelementkind Static Semantics: ClassElementKind</h1>...</div><div id=\"excluded-sec-static-semantics-constructormethod\"><h1><span class=\"secnum\">15.7.3</span>#sec-static-semantics-constructormethod Static Semantics: ConstructorMethod</h1>...</div><div id=\"excluded-sec-static-semantics-isstatic\"><h1><span class=\"secnum\">15.7.4</span>#sec-static-semantics-isstatic Static Semantics: IsStatic</h1>...</div><div id=\"excluded-sec-static-semantics-nonconstructormethoddefinitions\"><h1><span class=\"secnum\">15.7.5</span>#sec-static-semantics-nonconstructormethoddefinitions Static Semantics: NonConstructorMethodDefinitions</h1>...</div><div id=\"excluded-sec-static-semantics-prototypepropertynamelist\"><h1><span class=\"secnum\">15.7.6</span>#sec-static-semantics-prototypepropertynamelist Static Semantics: PrototypePropertyNameList</h1>...</div><div id=\"excluded-sec-runtime-semantics-classdefinitionevaluation\"><h1><span class=\"secnum\">15.7.7</span>#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindingclassdeclarationevaluation\"><h1><span class=\"secnum\">15.7.8</span>#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation</h1>...</div><div id=\"excluded-sec-class-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.7.9</span>#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a2e02ff2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsduplicatelabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"IsDestructuring\"><a href=\"#sec-static-semantics-isdestructuring\">IsDestructuring</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-isdestructuring\"><a href=\"#sec-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-isdestructuring\">#sec-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-vardeclarednames\"><a href=\"#sec-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-varscopeddeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"LoopEvaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\">LoopEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-loopevaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-loopevaluation\">#sec-runtime-semantics-loopevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-async-generator-function-definitions": {"num": "15.6", "title": "#sec-async-generator-function-definitions Async Generator Function Definitions", "html": "<emu-clause id=\"sec-async-generator-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-generator-function-definitions\">#sec-async-generator-function-definitions</span> Async Generator Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncGeneratorMethod\" params=\"Yield, Await\" id=\"prod-AsyncGeneratorMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a713bc4f\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncGeneratorDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf1795ae\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"cdd34229\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorExpression\" id=\"prod-AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ca1d1606\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorBody\" id=\"prod-AsyncGeneratorBody\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cd09a4ad\"><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> and <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> cannot be used within the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an async generator function because any expressions that are part of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> are evaluated before the resulting async generator object is in a resumable state.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> relating to async generator objects are defined in <emu-xref href=\"#sec-asyncgenerator-abstract-operations\"><a href=\"#sec-asyncgenerator-abstract-operations\" class=\"excluded-xref\" excluded-id=\"sec-asyncgenerator-abstract-operations\">#sec-asyncgenerator-abstract-operations</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-generator-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.6.1</span>#sec-async-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluateasyncgeneratorbody\"><h1><span class=\"secnum\">15.6.2</span>#sec-runtime-semantics-evaluateasyncgeneratorbody Runtime Semantics: EvaluateAsyncGeneratorBody</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncgeneratorfunctionobject\"><h1><span class=\"secnum\">15.6.3</span>#sec-runtime-semantics-instantiateasyncgeneratorfunctionobject Runtime Semantics: InstantiateAsyncGeneratorFunctionObject</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\"><h1><span class=\"secnum\">15.6.4</span>#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression Runtime Semantics: InstantiateAsyncGeneratorFunctionExpression</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-evaluation\"><h1><span class=\"secnum\">15.6.5</span>#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-propertydefinitionevaluation": {"num": "13.2.6.5", "title": "#sec-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydefinitionevaluation\" oldids=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" type=\"sdo\" aoid=\"PropertyDefinitionEvaluation\"><span id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n        <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3152d601\">\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li><li>Return the result of performing <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5bb8853e\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>excludedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"CopyDataProperties\"><a href=\"#sec-copydataproperties\">CopyDataProperties</a></emu-xref>(<var>object</var>, <var>fromValue</var>, <var>excludedNames</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propName</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propName</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative semantics for this production is given in <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cb8e53e9\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"f1487956\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"4402354c\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5c757ac\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be384400\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"759e5682\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-iteratordestructuringassignmentevaluation": {"num": "13.15.5.5", "title": "#sec-runtime-semantics-iteratordestructuringassignmentevaluation Runtime Semantics: IteratorDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\" type=\"sdo\" aoid=\"IteratorDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\">#sec-runtime-semantics-iteratordestructuringassignmentevaluation</span> Runtime Semantics: IteratorDestructuringAssignmentEvaluation</h1>\n        <p>With parameter <var>iteratorRecord</var>.</p>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e2bbd46c\"><emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bdc5c277\">\n        <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"816d4abc\"><emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"696f42ef\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"806d0124\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a73ccacf\">\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>value</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>value</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>value</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>v</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Else, let <var>v</var> be <var>value</var>.</li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>v</var> as the argument.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Left to right evaluation order is maintained by evaluating a <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> that is not a destructuring pattern prior to accessing the iterator or evaluating the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"AssignmentRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cf470c76\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat, while <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>,<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>A</var>).</li></ol></li><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>A</var> as the argument.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-function-definitions": {"num": "15.2", "title": "#sec-function-definitions Function Definitions", "html": "<emu-clause id=\"sec-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</span> Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-FunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7c02f6b3\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\" id=\"prod-FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1faafdcc\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionBody\" params=\"Yield, Await\" id=\"prod-FunctionBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionStatementList\" params=\"Yield, Await\" id=\"prod-FunctionStatementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.2.1</span>#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-functionbodycontainsusestrict\"><h1><span class=\"secnum\">15.2.2</span>#sec-static-semantics-functionbodycontainsusestrict Static Semantics: FunctionBodyContainsUseStrict</h1>...</div><div id=\"excluded-sec-static-semantics-hasname\"><h1><span class=\"secnum\">15.2.3</span>#sec-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">15.2.4</span>#sec-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-isanonymousfunctiondefinition\"><h1><span class=\"secnum\">15.2.5</span>#sec-isanonymousfunctiondefinition Static Semantics: IsAnonymousFunctionDefinition ( expr )</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluatefunctionbody\"><h1><span class=\"secnum\">15.2.6</span>#sec-runtime-semantics-evaluatefunctionbody Runtime Semantics: EvaluateFunctionBody</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateordinaryfunctionobject\"><h1><span class=\"secnum\">15.2.7</span>#sec-runtime-semantics-instantiateordinaryfunctionobject Runtime Semantics: InstantiateOrdinaryFunctionObject</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateordinaryfunctionexpression\"><h1><span class=\"secnum\">15.2.8</span>#sec-runtime-semantics-instantiateordinaryfunctionexpression Runtime Semantics: InstantiateOrdinaryFunctionExpression</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.2.9</span>#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-static-semantics-isidentifierref": {"num": "8.3.1", "title": "#sec-static-semantics-isidentifierref Static Semantics: IsIdentifierRef", "html": "<emu-clause id=\"sec-static-semantics-isidentifierref\" oldids=\"sec-semantics-static-semantics-isidentifierref,sec-static-semantics-static-semantics-isidentifierref\" type=\"sdo\" aoid=\"IsIdentifierRef\"><span id=\"sec-static-semantics-static-semantics-isidentifierref\"></span><span id=\"sec-semantics-static-semantics-isidentifierref\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-isidentifierref\">#sec-static-semantics-isidentifierref</span> Static Semantics: IsIdentifierRef</h1>\n      <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"PrimaryExpression\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8cee0c59\"><emu-t>this</emu-t></emu-rhs>\n    <emu-rhs a=\"92e97e03\"><emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1bf32393\"><emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd178913\"><emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"242eeccd\"><emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8ce6db1\"><emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb7f7f4\"><emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad589bb4\"><emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3403ed46\"><emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d9922ce8\"><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6bbe1777\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"149e7618\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e753fad7\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"25b793e9\"><emu-nt><a href=\"#prod-OptionalExpression\">OptionalExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-variable-statement-runtime-semantics-evaluation": {"num": "14.3.2.1", "title": "#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-variable-statement-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement-runtime-semantics-evaluation\">#sec-variable-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3347a1bd\">\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a0057011\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"89becb83\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li id=\"step-vardecllist-evaluation-putvalue\">Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is nested within a with statement and the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is the same as a <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> of the binding object of the with statement's <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then step <emu-xref href=\"#step-vardecllist-evaluation-putvalue\"><a href=\"#step-vardecllist-evaluation-putvalue\" class=\"excluded-xref\" excluded-id=\"step-vardecllist-evaluation-putvalue\">#step-vardecllist-evaluation-putvalue</a></emu-xref> will assign <var>value</var> to the property instead of assigning to the VariableEnvironment binding of the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0ddd53e5\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> passing <var>rval</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-propertydestructuringassignmentevaluation": {"num": "13.15.5.3", "title": "#sec-runtime-semantics-propertydestructuringassignmentevaluation Runtime Semantics: PropertyDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\" type=\"sdo\" aoid=\"PropertyDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\">#sec-runtime-semantics-propertydestructuringassignmentevaluation</span> Runtime Semantics: PropertyDestructuringAssignmentEvaluation</h1>\n        <p>With parameter <var>value</var>.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The following operations collect a list of all destructured property names.</div></emu-note>\n\n        <emu-grammar><emu-production name=\"AssignmentPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c3680459\">\n        <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propertyNames</var> be ? <emu-xref aoid=\"PropertyDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-propertydestructuringassignmentevaluation\">PropertyDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt> with argument <var>value</var>.</li><li>Let <var>nextNames</var> be ? <emu-xref aoid=\"PropertyDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-propertydestructuringassignmentevaluation\">PropertyDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> with argument <var>value</var>.</li><li>Append each item in <var>nextNames</var> to the end of <var>propertyNames</var>.</li><li>Return <var>propertyNames</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c55f7708\">\n        <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>P</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>lref</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>P</var>).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>P</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>P</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>P</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c9ac8882\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>name</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>name</var>).</li><li>Perform ? <emu-xref aoid=\"KeyedDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-keyeddestructuringassignmentevaluation\">KeyedDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>value</var> and <var>name</var> as the arguments.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>name</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-keyeddestructuringassignmentevaluation": {"num": "13.15.5.6", "title": "#sec-runtime-semantics-keyeddestructuringassignmentevaluation Runtime Semantics: KeyedDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-keyeddestructuringassignmentevaluation\" type=\"sdo\" aoid=\"KeyedDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-keyeddestructuringassignmentevaluation\">#sec-runtime-semantics-keyeddestructuringassignmentevaluation</span> Runtime Semantics: KeyedDestructuringAssignmentEvaluation</h1>\n        <p>With parameters <var>value</var> and <var>propertyName</var>.</p>\n        <emu-grammar><emu-production name=\"AssignmentElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a73ccacf\">\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>propertyName</var>).</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rhsValue</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rhsValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Else, let <var>rhsValue</var> be <var>v</var>.</li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> with <var>rhsValue</var> as the argument.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rhsValue</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-arrow-function-definitions": {"num": "15.9", "title": "#sec-async-arrow-function-definitions Async Arrow Function Definitions", "html": "<emu-clause id=\"sec-async-arrow-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions\">#sec-async-arrow-function-definitions</span> Async Arrow Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\" id=\"prod-AsyncArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bb50dce4\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"callcover\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncConciseBody\" params=\"In\" id=\"prod-AsyncConciseBody\">\n    <emu-nt params=\"In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6cf537fe\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, +Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6ccf9be6\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncArrowBindingIdentifier\" params=\"Yield\" id=\"prod-AsyncArrowBindingIdentifier\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"614a19b0\"><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" params=\"Yield, Await\" id=\"prod-CoverCallExpressionAndAsyncArrowHead\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f747be5d\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When processing an instance of the production\n      <br>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"694c2ff0\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncArrowHead\" id=\"prod-AsyncArrowHead\">\n    <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c9d14bfe\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.9.1</span>#sec-async-arrow-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-CoveredAsyncArrowHead\"><h1><span class=\"secnum\">15.9.2</span>#sec-async-arrow-function-definitions-static-semantics-CoveredAsyncArrowHead Static Semantics: CoveredAsyncArrowHead</h1>...</div><div id=\"excluded-sec-static-semantics-asyncconcisebodycontainsusestrict\"><h1><span class=\"secnum\">15.9.3</span>#sec-static-semantics-asyncconcisebodycontainsusestrict Static Semantics: AsyncConciseBodyContainsUseStrict</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluateasyncconcisebody\"><h1><span class=\"secnum\">15.9.4</span>#sec-runtime-semantics-evaluateasyncconcisebody Runtime Semantics: EvaluateAsyncConciseBody</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncarrowfunctionexpression\"><h1><span class=\"secnum\">15.9.5</span>#sec-runtime-semantics-instantiateasyncarrowfunctionexpression Runtime Semantics: InstantiateAsyncArrowFunctionExpression</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.9.6</span>#sec-async-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-__proto__-property-names-in-object-initializers": {"num": "B.3.1", "title": "#sec-__proto__-property-names-in-object-initializers __proto__ Property Names in Object Initializers", "html": "<emu-annex id=\"sec-__proto__-property-names-in-object-initializers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</span> __proto__ Property Names in Object Initializers</h1>\n      <p>The following Early Error rule is added to those in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>. This rule is <b>not</b> applied under any of the following circumstances:</p>\n      <ul>\n        <li>when <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required,</li>\n        <li>when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or a <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>, or</li>\n        <li>when parsing text for <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"ObjectLiteral\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1bef8ed3\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"8703527f\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> does not include string literal property names defined as using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n      </div></emu-note>\n      <p>In <emu-xref href=\"#sec-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</a></emu-xref> the <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> algorithm for the production\n        <br>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <br>\n        is replaced with the following definition:</p>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val> and if <emu-xref aoid=\"IsComputedPropertyKey\"><a href=\"#sec-static-semantics-iscomputedpropertykey\">IsComputedPropertyKey</a></emu-xref>(<emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-let-and-const-declarations-runtime-semantics-evaluation": {"num": "14.3.1.2", "title": "#sec-let-and-const-declarations-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-let-and-const-declarations-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-let-and-const-declarations-runtime-semantics-evaluation\">#sec-let-and-const-declarations-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"LexicalDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0dea8409\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"BindingList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0ede34cd\">\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <emu-val>undefined</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> rule ensures that this form of <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> never occurs in a <code>const</code> declaration.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"89becb83\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0ddd53e5\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> using <var>value</var> and <var>env</var> as the arguments.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-arrow-function-definitions": {"num": "15.3", "title": "#sec-arrow-function-definitions Arrow Function Definitions", "html": "<emu-clause id=\"sec-arrow-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</span> Arrow Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\" id=\"prod-ArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0be22025\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ArrowParameters\" params=\"Yield, Await\" id=\"prod-ArrowParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ConciseBody\" params=\"In\" id=\"prod-ConciseBody\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7a8157ec\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, ~Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, ~Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6f7b95b3\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ExpressionBody\" params=\"In, Await\" id=\"prod-ExpressionBody\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"21c2a074\"><emu-nt params=\"?In, ~Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When processing an instance of the production\n      <br>\n      <emu-grammar><emu-production name=\"ArrowParameters\" params=\"Yield, Await\" collapsed=\"\" class=\" inline\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"29cadaef\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> is refined using the following grammar:</p>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\" id=\"prod-ArrowFormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b7561ab3\">\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-arrow-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.3.1</span>#sec-arrow-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-concisebodycontainsusestrict\"><h1><span class=\"secnum\">15.3.2</span>#sec-static-semantics-concisebodycontainsusestrict Static Semantics: ConciseBodyContainsUseStrict</h1>...</div><div id=\"excluded-sec-static-semantics-coveredformalslist\"><h1><span class=\"secnum\">15.3.3</span>#sec-static-semantics-coveredformalslist Static Semantics: CoveredFormalsList</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluateconcisebody\"><h1><span class=\"secnum\">15.3.4</span>#sec-runtime-semantics-evaluateconcisebody Runtime Semantics: EvaluateConciseBody</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiatearrowfunctionexpression\"><h1><span class=\"secnum\">15.3.5</span>#sec-runtime-semantics-instantiatearrowfunctionexpression Runtime Semantics: InstantiateArrowFunctionExpression</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.3.6</span>#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-generator-function-definitions": {"num": "15.5", "title": "#sec-generator-function-definitions Generator Function Definitions", "html": "<emu-clause id=\"sec-generator-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions\">#sec-generator-function-definitions</span> Generator Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"GeneratorMethod\" params=\"Yield, Await\" id=\"prod-GeneratorMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"54505152\">\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorDeclaration\" params=\"Yield, Await, Default\" id=\"prod-GeneratorDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e7a001a0\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"19cc4b38\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorExpression\" id=\"prod-GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"65253812\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorBody\" id=\"prod-GeneratorBody\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"42e56a37\"><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"YieldExpression\" params=\"In, Await\" id=\"prod-YieldExpression\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"68b64d66\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>The syntactic context immediately following <code>yield</code> requires use of the <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> lexical goal.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> cannot be used within the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a generator function because any expressions that are part of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> are evaluated before the resulting generator object is in a resumable state.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> relating to generator objects are defined in <emu-xref href=\"#sec-generator-abstract-operations\"><a href=\"#sec-generator-abstract-operations\" class=\"excluded-xref\" excluded-id=\"sec-generator-abstract-operations\">#sec-generator-abstract-operations</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-generator-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.5.1</span>#sec-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluategeneratorbody\"><h1><span class=\"secnum\">15.5.2</span>#sec-runtime-semantics-evaluategeneratorbody Runtime Semantics: EvaluateGeneratorBody</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiategeneratorfunctionobject\"><h1><span class=\"secnum\">15.5.3</span>#sec-runtime-semantics-instantiategeneratorfunctionobject Runtime Semantics: InstantiateGeneratorFunctionObject</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiategeneratorfunctionexpression\"><h1><span class=\"secnum\">15.5.4</span>#sec-runtime-semantics-instantiategeneratorfunctionexpression Runtime Semantics: InstantiateGeneratorFunctionExpression</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.5.5</span>#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "13.15.2", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8a33cee0\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-simple-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5f3a8747\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-compound-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>assignmentOpText</var> be the source text matched by <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>.</li><li>Let <var>opText</var> be the sequence of Unicode code points associated with <var>assignmentOpText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>assignmentOpText</var> </th><th> <var>opText</var>       </th></tr>\n                <tr><td> <code>**=</code>              </td><td> <code>**</code>           </td></tr>\n                <tr><td> <code>*=</code>               </td><td> <code>*</code>            </td></tr>\n                <tr><td> <code>/=</code>               </td><td> <code>/</code>            </td></tr>\n                <tr><td> <code>%=</code>               </td><td> <code>%</code>            </td></tr>\n                <tr><td> <code>+=</code>               </td><td> <code>+</code>            </td></tr>\n                <tr><td> <code>-=</code>               </td><td> <code>-</code>            </td></tr>\n                <tr><td> <code>&lt;&lt;=</code>        </td><td> <code>&lt;&lt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;=</code>        </td><td> <code>&gt;&gt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;=</code>    </td><td> <code>&gt;&gt;&gt;</code> </td></tr>\n                <tr><td> <code>&amp;=</code>           </td><td> <code>&amp;</code>        </td></tr>\n                <tr><td> <code>^=</code>               </td><td> <code>^</code>            </td></tr>\n                <tr><td> <code>|=</code>               </td><td> <code>|</code>            </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Let <var>r</var> be <emu-xref aoid=\"ApplyStringOrNumericBinaryOperator\"><a href=\"#sec-applystringornumericbinaryoperator\">ApplyStringOrNumericBinaryOperator</a></emu-xref>(<var>lval</var>, <var>opText</var>, <var>rval</var>).</li><li id=\"step-assignmentexpression-evaluation-compound-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0de56464\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>&amp;&amp;=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>false</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d3d4545\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>||=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>true</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0db89f3e\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>??=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>If <var>lval</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When this expression occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-simple-putvalue\"><a href=\"#step-assignmentexpression-evaluation-simple-putvalue\">1.e</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-compound-getvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-getvalue\">#step-assignmentexpression-evaluation-compound-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">#step-assignmentexpression-evaluation-lgcl-and-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">#step-assignmentexpression-evaluation-lgcl-or-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-getvalue</a></emu-xref> is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. Additionally, it is a runtime error if the <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-compound-putvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-putvalue\">#step-assignmentexpression-evaluation-compound-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">#step-assignmentexpression-evaluation-lgcl-and-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">#step-assignmentexpression-evaluation-lgcl-or-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-putvalue</a></emu-xref> is a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, or to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-namedevaluation": {"num": "8.3.2", "title": "#sec-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-namedevaluation\" oldids=\"sec-grouping-operator-runtime-semantics-namedevaluation,sec-function-definitions-runtime-semantics-namedevaluation,sec-arrow-function-definitions-runtime-semantics-namedevaluation,sec-generator-function-definitions-runtime-semantics-namedevaluation,sec-asyncgenerator-definitions-namedevaluation,sec-class-definitions-runtime-semantics-namedevaluation,sec-async-function-definitions-runtime-semantics-namedevaluation,sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\" type=\"sdo\" aoid=\"NamedEvaluation\"><span id=\"sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\"></span><span id=\"sec-async-function-definitions-runtime-semantics-namedevaluation\"></span><span id=\"sec-class-definitions-runtime-semantics-namedevaluation\"></span><span id=\"sec-asyncgenerator-definitions-namedevaluation\"></span><span id=\"sec-generator-function-definitions-runtime-semantics-namedevaluation\"></span><span id=\"sec-arrow-function-definitions-runtime-semantics-namedevaluation\"></span><span id=\"sec-function-definitions-runtime-semantics-namedevaluation\"></span><span id=\"sec-grouping-operator-runtime-semantics-namedevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-namedevaluation\">#sec-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>expr</var> be <emu-xref aoid=\"CoveredParenthesizedExpression\"><a href=\"#sec-static-semantics-coveredparenthesizedexpression\">CoveredParenthesizedExpression</a></emu-xref> of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> for <var>expr</var> with argument <var>name</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ParenthesizedExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ParenthesizedExpression\">ParenthesizedExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4ba6ef9d\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>) is <emu-val>true</emu-val>.</li><li>Return the result of performing <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> for <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b26bacea\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateOrdinaryFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiateordinaryfunctionexpression\">InstantiateOrdinaryFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d271960\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateGeneratorFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiategeneratorfunctionexpression\">InstantiateGeneratorFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c51514e0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateAsyncGeneratorFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\">InstantiateAsyncGeneratorFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6a076671\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateAsyncFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiateasyncfunctionexpression\">InstantiateAsyncFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"88410e0f\">\n        <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateArrowFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiatearrowfunctionexpression\">InstantiateArrowFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7505c63a\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"694c2ff0\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateAsyncArrowFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiateasyncarrowfunctionexpression\">InstantiateAsyncArrowFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> with argument <var>name</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d461f28b\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be the result of <emu-xref aoid=\"ClassDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classdefinitionevaluation\">ClassDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <var>name</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-syntax-directed-operations-function-name-inference": {"num": "8.3", "title": "#sec-syntax-directed-operations-function-name-inference Function Name Inference", "html": "<emu-clause id=\"sec-syntax-directed-operations-function-name-inference\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntax-directed-operations-function-name-inference\">#sec-syntax-directed-operations-function-name-inference</span> Function Name Inference</h1>\n\n    <div id=\"excluded-sec-static-semantics-isidentifierref\"><h1><span class=\"secnum\">8.3.1</span>#sec-static-semantics-isidentifierref Static Semantics: IsIdentifierRef</h1>...</div><div id=\"excluded-sec-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">8.3.2</span>#sec-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div></emu-clause>\n\n  "}, "sec-exports-runtime-semantics-evaluation": {"num": "16.2.3.7", "title": "#sec-exports-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-exports-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-runtime-semantics-evaluation\">#sec-exports-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e0a40575\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"2762c7fe\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6c6de801\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"828f5ae3\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"71d1417e\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c3c3cb8d\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>value</var> be ? <emu-xref aoid=\"BindingClassDeclarationEvaluation\"><a href=\"#sec-runtime-semantics-bindingclassdeclarationevaluation\">BindingClassDeclarationEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>className</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>If <var>className</var> is <emu-val>\"*default*\"</emu-val>, then<ol><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<emu-val>\"*default*\"</emu-val>, <var>value</var>, <var>env</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e1fe9c4f\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-val>\"default\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<emu-val>\"*default*\"</emu-val>, <var>value</var>, <var>env</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-iteratorbindinginitialization": {"num": "8.5.3", "title": "#sec-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization", "html": "<emu-clause id=\"sec-runtime-semantics-iteratorbindinginitialization\" oldids=\"sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization,sec-function-definitions-runtime-semantics-iteratorbindinginitialization,sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization,sec-async-arrow-function-definitions-IteratorBindingInitialization\" type=\"sdo\" aoid=\"IteratorBindingInitialization\"><span id=\"sec-async-arrow-function-definitions-IteratorBindingInitialization\"></span><span id=\"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\"></span><span id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"></span><span id=\"sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-iteratorbindinginitialization\">#sec-runtime-semantics-iteratorbindinginitialization</span> Runtime Semantics: IteratorBindingInitialization</h1>\n      <p>With parameters <var>iteratorRecord</var> and <var>environment</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for formal parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order to deal with the possibility of multiple parameters with the same name.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"99d85234\">\n        <emu-t>[</emu-t>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"31ffe6b2\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0c457c16\">\n        <emu-t>[</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"95b63a14\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ee591d49\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1e2c0030\">\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b07fbefe\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SingleNameBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0b9344a8\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>, <var>environment</var>).</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6875fa94\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> with <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"145844de\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <var>environment</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>A</var>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>A</var>).</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1e627394\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> with <var>A</var> and <var>environment</var> as the arguments.</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b9079b6b\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameterList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"209ae310\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>.</li><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> using <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>formals</var> be <emu-xref aoid=\"CoveredFormalsList\"><a href=\"#sec-static-semantics-coveredformalslist\">CoveredFormalsList</a></emu-xref> of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> of <var>formals</var> with arguments <var>iteratorRecord</var> and <var>environment</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowBindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>.</li><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> using <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions": {"num": "15.8", "title": "#sec-async-function-definitions Async Function Definitions", "html": "<emu-clause id=\"sec-async-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</span> Async Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncFunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f512250e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"fef042b8\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\" id=\"prod-AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c25b1d19\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"be6457e0\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\" params=\"Yield, Await\" id=\"prod-AsyncMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a922691e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionBody\" id=\"prod-AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AwaitExpression\" params=\"Yield\" id=\"prod-AwaitExpression\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c19c56e7\">\n        <emu-t>await</emu-t>\n        <emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><code>await</code> is parsed as an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> when the <sub>[Await]</sub> parameter is present. The <sub>[Await]</sub> parameter is present in the following contexts:</p>\n      <ul>\n        <li>In an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>. <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> in this position is a Syntax error via <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref>.</li>\n      </ul>\n      <p>When <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and the <sub>[Await]</sub> parameter is absent, <code>await</code> is parsed as a <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> and will be a Syntax error. When <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, <code>await</code> may be parsed as an identifier when the <sub>[Await]</sub> parameter is absent. This includes the following contexts:</p>\n      <ul>\n        <li>Anywhere outside of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> or <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n      </ul>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Unlike <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>, it is a Syntax Error to omit the operand of an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt>. You must await something.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.8.1</span>#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncfunctionobject\"><h1><span class=\"secnum\">15.8.2</span>#sec-runtime-semantics-instantiateasyncfunctionobject Runtime Semantics: InstantiateAsyncFunctionObject</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncfunctionexpression\"><h1><span class=\"secnum\">15.8.3</span>#sec-runtime-semantics-instantiateasyncfunctionexpression Runtime Semantics: InstantiateAsyncFunctionExpression</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluateasyncfunctionbody\"><h1><span class=\"secnum\">15.8.4</span>#sec-runtime-semantics-evaluateasyncfunctionbody Runtime Semantics: EvaluateAsyncFunctionBody</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.8.5</span>#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-keyedbindinginitialization": {"num": "14.3.3.3", "title": "#sec-runtime-semantics-keyedbindinginitialization Runtime Semantics: KeyedBindingInitialization", "html": "<emu-clause id=\"sec-runtime-semantics-keyedbindinginitialization\" type=\"sdo\" aoid=\"KeyedBindingInitialization\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-keyedbindinginitialization\">#sec-runtime-semantics-keyedbindinginitialization</span> Runtime Semantics: KeyedBindingInitialization</h1>\n        <p>With parameters <var>value</var>, <var>environment</var>, and <var>propertyName</var>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for formal parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order to deal with the possibility of multiple parameters with the same name.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"BindingElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6875fa94\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>propertyName</var>).</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> passing <var>v</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SingleNameBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0b9344a8\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>, <var>environment</var>).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>propertyName</var>).</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-grouping-operator": {"num": "13.2.10", "title": "#sec-grouping-operator The Grouping Operator", "html": "<emu-clause id=\"sec-grouping-operator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-grouping-operator\">#sec-grouping-operator</span> The Grouping Operator</h1>\n\n      <div id=\"excluded-sec-grouping-operator-static-semantics-early-errors\"><h1><span class=\"secnum\">13.2.10.1</span>#sec-grouping-operator-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-grouping-operator-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.2.10.2</span>#sec-grouping-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n  "}}, "figData": {}}}