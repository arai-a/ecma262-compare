{"from": {"secList": ["sec-binary-bitwise-operators-runtime-semantics-evaluation"], "secData": {"sec-binary-bitwise-operators-runtime-semantics-evaluation": {"num": "12.12.3", "title": "#sec-binary-bitwise-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">#sec-binary-bitwise-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <p>The production  <emu-grammar type=\"example\"><emu-production name=\"A\" collapsed=\"\" id=\"prod-A\" class=\" inline\">\n    <emu-nt><a href=\"#prod-A\">A</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"262863af\"><emu-nt><a href=\"#prod-A\">A</a></emu-nt><emu-t placeholder=\"\">@</emu-t><emu-nt>B</emu-nt></emu-rhs>\n</emu-production></emu-grammar>, where @ is one of the bitwise operators in the productions above, is evaluated as follows:</p>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <var>A</var>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <var>B</var>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>If @ is <code>&amp;</code>, return <var>T</var>::bitwiseAND(<var>lnum</var>, <var>rnum</var>).</li><li>If @ is <code>|</code>, return <var>T</var>::bitwiseOR(<var>lnum</var>, <var>rnum</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: @ is <code>^</code>.</li><li>Return <var>T</var>::bitwiseXOR(<var>lnum</var>, <var>rnum</var>).\n      </li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-binary-bitwise-operators-runtime-semantics-evaluation"], "secData": {"sec-binary-bitwise-operators-runtime-semantics-evaluation": {"num": "12.12.3", "title": "#sec-binary-bitwise-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">#sec-binary-bitwise-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <p>The production  <emu-grammar><emu-production name=\"A\" collapsed=\"\" id=\"prod-A\" class=\" inline\">\n    <emu-nt><a href=\"#prod-A\">A</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"262863af\"><emu-nt><a href=\"#prod-A\">A</a></emu-nt><emu-t placeholder=\"\">@</emu-t><emu-nt>B</emu-nt></emu-rhs>\n</emu-production></emu-grammar>, where @ is one of the bitwise operators in the productions above, is evaluated as follows:</p>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <var>A</var>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <var>B</var>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>If @ is <code>&amp;</code>, return <var>T</var>::bitwiseAND(<var>lnum</var>, <var>rnum</var>).</li><li>If @ is <code>|</code>, return <var>T</var>::bitwiseOR(<var>lnum</var>, <var>rnum</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: @ is <code>^</code>.</li><li>Return <var>T</var>::bitwiseXOR(<var>lnum</var>, <var>rnum</var>).\n      </li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}}, "figData": {}}}