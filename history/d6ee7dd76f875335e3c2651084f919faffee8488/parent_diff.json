{"from": {"secList": ["sec-hostfinalizeimportmeta"], "secData": {"sec-hostfinalizeimportmeta": {"num": "12.3.12.1.2", "title": "#sec-hostfinalizeimportmeta Runtime Semantics: HostFinalizeImportMeta ( importMeta, moduleRecord )", "html": "<emu-clause id=\"sec-hostfinalizeimportmeta\" aoid=\"HostFinalizeImportMeta\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostfinalizeimportmeta\">#sec-hostfinalizeimportmeta</span> Runtime Semantics: HostFinalizeImportMeta ( <var>importMeta</var>, <var>moduleRecord</var> )</h1>\n          <p>HostFinalizeImportMeta is an implementation-defined abstract operation that allows hosts to perform any extraordinary operations to prepare the object returned from <code>import.meta</code>.</p>\n\n          <p>Most hosts will be able to simply define <emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>, and leave HostFinalizeImportMeta with its default behavior. However, HostFinalizeImportMeta provides an \"escape hatch\" for hosts which need to directly manipulate the object before it is exposed to ECMAScript code.</p>\n\n          <p>The implementation of HostFinalizeImportMeta must conform to the following requirements:</p>\n          <ul>\n            <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostFinalizeImportMeta is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n        </emu-clause>\n      "}}, "figData": {}}, "to": {"secList": ["sec-hostfinalizeimportmeta"], "secData": {"sec-hostfinalizeimportmeta": {"num": "12.3.12.1.2", "title": "#sec-hostfinalizeimportmeta Runtime Semantics: HostFinalizeImportMeta ( importMeta, moduleRecord )", "html": "<emu-clause id=\"sec-hostfinalizeimportmeta\" aoid=\"HostFinalizeImportMeta\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostfinalizeimportmeta\">#sec-hostfinalizeimportmeta</span> Runtime Semantics: HostFinalizeImportMeta ( <var>importMeta</var>, <var>moduleRecord</var> )</h1>\n          <p>HostFinalizeImportMeta is an implementation-defined abstract operation that allows hosts to perform any extraordinary operations to prepare the object returned from <code>import.meta</code>.</p>\n\n          <p>Most hosts will be able to simply define <emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>, and leave HostFinalizeImportMeta with its default behaviour. However, HostFinalizeImportMeta provides an \"escape hatch\" for hosts which need to directly manipulate the object before it is exposed to ECMAScript code.</p>\n\n          <p>The implementation of HostFinalizeImportMeta must conform to the following requirements:</p>\n          <ul>\n            <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostFinalizeImportMeta is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n        </emu-clause>\n      "}}, "figData": {}}}