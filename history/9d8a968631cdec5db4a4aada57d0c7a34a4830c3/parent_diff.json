{"from": {"secList": ["sec-%regexpstringiteratorprototype%.next", "sec-stringpad", "sec-internalizejsonproperty", "sec-object.entries", "sec-regexp-prototype-matchall", "sec-%regexpstringiteratorprototype%-@@tostringtag", "sec-object.values", "sec-datestring", "sec-object.keys", "sec-string.prototype.padend", "sec-serializejsonobject", "sec-string.prototype.padstart", "sec-date.prototype.toutcstring", "sec-enumerableownpropertynames"], "secData": {"sec-%regexpstringiteratorprototype%.next": {"num": "21.2.7.1.1", "title": "#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%.next\">#sec-%regexpstringiteratorprototype%.next</span> %RegExpStringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a RegExp String Iterator Object Instance (see <emu-xref href=\"#sec-properties-of-regexp-string-iterator-instances\"><a href=\"#sec-properties-of-regexp-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-regexp-string-iterator-instances\">#sec-properties-of-regexp-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>R</var> be <var>O</var>.[[IteratingRegExp]].</li><li>Let <var>S</var> be <var>O</var>.[[IteratedString]].</li><li>Let <var>global</var> be <var>O</var>.[[Global]].</li><li>Let <var>fullUnicode</var> be <var>O</var>.[[Unicode]].</li><li>Let <var>match</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li><li>If <var>match</var> is <emu-val>null</emu-val>, then<ol><li>Set <var>O</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>If <var>global</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>match</var>, <emu-val>\"0\"</emu-val>)).</li><li>If <var>matchStr</var> is the empty string, then<ol><li>Let <var>thisIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>)).</li><li>Let <var>nextIndex</var> be !&#160;<emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <var>nextIndex</var>, <emu-val>true</emu-val>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>match</var>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Set <var>O</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>match</var>, <emu-val>false</emu-val>).\n          </li></ol></li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-stringpad": {"num": "21.1.3.15.1", "title": "#sec-stringpad Runtime Semantics: StringPad ( O, maxLength, fillString, placement )", "html": "<emu-clause id=\"sec-stringpad\" aoid=\"StringPad\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringpad\">#sec-stringpad</span> Runtime Semantics: StringPad ( <var>O</var>, <var>maxLength</var>, <var>fillString</var>, <var>placement</var> )</h1>\n          <p>When the abstract operation StringPad is called with arguments <var>O</var>, <var>maxLength</var>, <var>fillString</var>, and <var>placement</var>, the following steps are taken:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>placement</var> is <emu-val>\"start\"</emu-val> or <emu-val>\"end\"</emu-val>.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>intMaxLength</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<var>maxLength</var>).</li><li>Let <var>stringLength</var> be the length of <var>S</var>.</li><li>If <var>intMaxLength</var> is not greater than <var>stringLength</var>, return <var>S</var>.</li><li>If <var>fillString</var> is <emu-val>undefined</emu-val>, let <var>filler</var> be the String value consisting solely of the code unit 0x0020 (SPACE).</li><li>Else, let <var>filler</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>fillString</var>).</li><li>If <var>filler</var> is the empty String, return <var>S</var>.</li><li>Let <var>fillLen</var> be <var>intMaxLength</var> - <var>stringLength</var>.</li><li>Let <var>truncatedStringFiller</var> be the String value consisting of repeated concatenations of <var>filler</var> truncated to length <var>fillLen</var>.</li><li>If <var>placement</var> is <emu-val>\"start\"</emu-val>, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>truncatedStringFiller</var> and <var>S</var>.</li><li>Else, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>S</var> and <var>truncatedStringFiller</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The argument <var>maxLength</var> will be clamped such that it can be no smaller than the length of <var>S</var>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The argument <var>fillString</var> defaults to <emu-val>\" \"</emu-val> (the String value consisting of the code unit 0x0020 SPACE).</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-internalizejsonproperty": {"num": "24.5.1.1", "title": "#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name )", "html": "<emu-clause id=\"sec-internalizejsonproperty\" aoid=\"InternalizeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-internalizejsonproperty\">#sec-internalizejsonproperty</span> Runtime Semantics: InternalizeJSONProperty ( <var>holder</var>, <var>name</var> )</h1>\n        <p>The abstract operation InternalizeJSONProperty is a recursive abstract operation that takes two parameters: a <var>holder</var> object and the String <var>name</var> of a property in that object. InternalizeJSONProperty uses the value of <var>reviver</var> that was originally passed to the above parse function.</p>\n        <emu-alg><ol><li>Let <var>val</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is Object, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>val</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>I</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>val</var>, <code>\"length\"</code>)).</li><li>Repeat, while <var>I</var> &lt; <var>len</var>,<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>newElement</var>).</li><li>NOTE: This algorithm intentionally does not throw an exception if <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> returns <emu-val>false</emu-val>.</li></ol></li><li>Add 1 to <var>I</var>.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>keys</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>val</var>, <emu-val>\"key\"</emu-val>).</li><li>For each String <var>P</var> in <var>keys</var>, do<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, <var>P</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>newElement</var>).</li><li>NOTE: This algorithm intentionally does not throw an exception if <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> returns <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>reviver</var>, <var>holder</var>, &#171; <var>name</var>, <var>val</var> &#187;).\n        </li></ol></emu-alg>\n        <p>It is not permitted for a conforming implementation of <code>JSON.parse</code> to extend the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by defining a different parse function.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-object.entries": {"num": "19.1.2.5", "title": "#sec-object.entries Object.entries ( O )", "html": "<emu-clause id=\"sec-object.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.entries\">#sec-object.entries</span> Object.entries ( <var>O</var> )</h1>\n        <p>When the <code>entries</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <emu-val>\"key+value\"</emu-val>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexp-prototype-matchall": {"num": "21.2.5.8", "title": "#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )", "html": "<emu-clause id=\"sec-regexp-prototype-matchall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-prototype-matchall\">#sec-regexp-prototype-matchall</span> RegExp.prototype [ @@matchAll ] ( <var>string</var> )</h1>\n\n        <p>When the <code>@@matchAll</code> method is called with argument <var>string</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <code>\"flags\"</code>)).</li><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>R</var>, <var>flags</var> &#187;).</li><li>Let <var>lastIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>matcher</var>, <code>\"lastIndex\"</code>, <var>lastIndex</var>, <emu-val>true</emu-val>).</li><li>If <var>flags</var> contains <code>\"g\"</code>, let <var>global</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <code>\"u\"</code>, let <var>fullUnicode</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateRegExpStringIterator\"><a href=\"#sec-createregexpstringiterator\">CreateRegExpStringIterator</a></emu-xref>(<var>matcher</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var>).\n        </li></ol></emu-alg>\n        <p>The value of the <emu-val>name</emu-val> property of this function is <emu-val>\"[Symbol.matchAll]\"</emu-val>.</p>\n\n        <div id=\"excluded-sec-createregexpstringiterator\"><h1><span class=\"secnum\">21.2.5.8.1</span>#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )</h1>...</div></emu-clause>\n\n      "}, "sec-%regexpstringiteratorprototype%-@@tostringtag": {"num": "21.2.7.1.2", "title": "#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-@@tostringtag\">#sec-%regexpstringiteratorprototype%-@@tostringtag</span> %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the <var>@@toStringTag</var> property is the String value <emu-val>\"RegExp String Iterator\"</emu-val>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-object.values": {"num": "19.1.2.22", "title": "#sec-object.values Object.values ( O )", "html": "<emu-clause id=\"sec-object.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.values\">#sec-object.values</span> Object.values ( <var>O</var> )</h1>\n        <p>When the <code>values</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <emu-val>\"value\"</emu-val>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-datestring": {"num": "20.3.4.41.2", "title": "#sec-datestring Runtime Semantics: DateString ( tv )", "html": "<emu-clause id=\"sec-datestring\" aoid=\"DateString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-datestring\">#sec-datestring</span> Runtime Semantics: DateString ( <var>tv</var> )</h1>\n          <p>The following steps are performed:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>tv</var> is not <emu-val>NaN</emu-val>.</li><li>Let <var>weekday</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"><a href=\"#sec-todatestring-day-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</a></emu-xref> with the Number <emu-xref aoid=\"WeekDay\"><a href=\"#sec-week-day\">WeekDay</a></emu-xref>(<var>tv</var>).</li><li>Let <var>month</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"><a href=\"#sec-todatestring-month-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</a></emu-xref> with the Number <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>tv</var>).</li><li>Let <var>day</var> be the String representation of <emu-xref aoid=\"DateFromTime\"><a href=\"#sec-date-number\">DateFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>yv</var> be <emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>tv</var>).</li><li>If <var>yv</var> &#8805; 0, let <var>yearSign</var> be the empty string; otherwise, let <var>yearSign</var> be <code>\"-\"</code>.</li><li>Let <var>year</var> be the String representation of <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>yv</var>), formatted as a decimal number.</li><li>Let <var>paddedYear</var> be !&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>year</var>, 4, <emu-val>\"0\"</emu-val>, <emu-val>\"start\"</emu-val>).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>weekday</var>, the code unit 0x0020 (SPACE), <var>month</var>, the code unit 0x0020 (SPACE), <var>day</var>, the code unit 0x0020 (SPACE), <var>yearSign</var>, and <var>paddedYear</var>.\n          </li></ol></emu-alg>\n          <emu-table id=\"sec-todatestring-day-names\" caption=\"Names of days of the week\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</span>: Names of days of the week</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                \n                </th>\n                <th>\n                  Name\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0\n                \n                </td>\n                <td>\n                  <code>\"Sun\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  1\n                \n                </td>\n                <td>\n                  <code>\"Mon\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  2\n                \n                </td>\n                <td>\n                  <code>\"Tue\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  3\n                \n                </td>\n                <td>\n                  <code>\"Wed\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  4\n                \n                </td>\n                <td>\n                  <code>\"Thu\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  5\n                \n                </td>\n                <td>\n                  <code>\"Fri\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  6\n                \n                </td>\n                <td>\n                  <code>\"Sat\"</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n          <emu-table id=\"sec-todatestring-month-names\" caption=\"Names of months of the year\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</span>: Names of months of the year</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                \n                </th>\n                <th>\n                  Name\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0\n                \n                </td>\n                <td>\n                  <code>\"Jan\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  1\n                \n                </td>\n                <td>\n                  <code>\"Feb\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  2\n                \n                </td>\n                <td>\n                  <code>\"Mar\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  3\n                \n                </td>\n                <td>\n                  <code>\"Apr\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  4\n                \n                </td>\n                <td>\n                  <code>\"May\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  5\n                \n                </td>\n                <td>\n                  <code>\"Jun\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  6\n                \n                </td>\n                <td>\n                  <code>\"Jul\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  7\n                \n                </td>\n                <td>\n                  <code>\"Aug\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  8\n                \n                </td>\n                <td>\n                  <code>\"Sep\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  9\n                \n                </td>\n                <td>\n                  <code>\"Oct\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  10\n                \n                </td>\n                <td>\n                  <code>\"Nov\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  11\n                \n                </td>\n                <td>\n                  <code>\"Dec\"</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n\n        "}, "sec-object.keys": {"num": "19.1.2.17", "title": "#sec-object.keys Object.keys ( O )", "html": "<emu-clause id=\"sec-object.keys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.keys\">#sec-object.keys</span> Object.keys ( <var>O</var> )</h1>\n        <p>When the <code>keys</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <emu-val>\"key\"</emu-val>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string.prototype.padend": {"num": "21.1.3.14", "title": "#sec-string.prototype.padend String.prototype.padEnd ( maxLength [ , fillString ] )", "html": "<emu-clause id=\"sec-string.prototype.padend\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.padend\">#sec-string.prototype.padend</span> String.prototype.padEnd ( <var>maxLength</var> [ , <var>fillString</var> ] )</h1>\n        <p>When the <code>padEnd</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ?&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>O</var>, <var>maxLength</var>, <var>fillString</var>, <emu-val>\"end\"</emu-val>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-serializejsonobject": {"num": "24.5.2.4", "title": "#sec-serializejsonobject Runtime Semantics: SerializeJSONObject ( value )", "html": "<emu-clause id=\"sec-serializejsonobject\" aoid=\"SerializeJSONObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonobject\">#sec-serializejsonobject</span> Runtime Semantics: SerializeJSONObject ( <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONObject with argument <var>value</var> serializes an object. It has access to the <var>stack</var>, <var>indent</var>, <var>gap</var>, and <var>PropertyList</var> values of the current invocation of the <code>stringify</code> method.</p>\n        <emu-alg><ol><li>If <var>stack</var> contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>stack</var>.</li><li>Let <var>stepback</var> be <var>indent</var>.</li><li>Set <var>indent</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>indent</var> and <var>gap</var>.</li><li>If <var>PropertyList</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>K</var> be <var>PropertyList</var>.</li></ol></li><li>Else,<ol><li>Let <var>K</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>value</var>, <emu-val>\"key\"</emu-val>).</li></ol></li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>P</var> of <var>K</var>, do<ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>P</var>, <var>value</var>).</li><li>If <var>strP</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>member</var> be <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>P</var>).</li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <code>\":\"</code>.</li><li>If <var>gap</var> is not the empty String, then<ol><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and the code unit 0x0020 (SPACE).</li></ol></li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <var>strP</var>.</li><li>Append <var>member</var> to <var>partial</var>.</li></ol></li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <code>\"{}\"</code>.</li></ol></li><li>Else,<ol><li>If <var>gap</var> is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <code>\"{\"</code>, <var>properties</var>, and <code>\"}\"</code>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>indent</var>.</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <code>\"{\"</code>, the code unit 0x000A (LINE FEED), <var>indent</var>, <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <code>\"}\"</code>.</li></ol></li></ol></li><li>Remove the last element of <var>stack</var>.</li><li>Set <var>indent</var> to <var>stepback</var>.</li><li>Return <var>final</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string.prototype.padstart": {"num": "21.1.3.15", "title": "#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )", "html": "<emu-clause id=\"sec-string.prototype.padstart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.padstart\">#sec-string.prototype.padstart</span> String.prototype.padStart ( <var>maxLength</var> [ , <var>fillString</var> ] )</h1>\n        <p>When the <code>padStart</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ?&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>O</var>, <var>maxLength</var>, <var>fillString</var>, <emu-val>\"start\"</emu-val>).\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-stringpad\"><h1><span class=\"secnum\">21.1.3.15.1</span>#sec-stringpad Runtime Semantics: StringPad ( O, maxLength, fillString, placement )</h1>...</div></emu-clause>\n\n      "}, "sec-date.prototype.toutcstring": {"num": "20.3.4.43", "title": "#sec-date.prototype.toutcstring Date.prototype.toUTCString ( )", "html": "<emu-clause id=\"sec-date.prototype.toutcstring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.toutcstring\">#sec-date.prototype.toutcstring</span> Date.prototype.toUTCString ( )</h1>\n        <p>The <code>toUTCString</code> method returns a String value representing the instance in time corresponding to <emu-xref href=\"#this-time-value\"><a href=\"#this-time-value\">this time value</a></emu-xref>. The format of the String is based upon \"HTTP-date\" from RFC 7231, generalized to support the full range of times supported by ECMAScript Date objects. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be <emu-xref href=\"#this-Date-object\"><a href=\"#this-Date-object\">this Date object</a></emu-xref>.</li><li>Let <var>tv</var> be ?&#160;<emu-xref href=\"#sec-thistimevalue\"><a href=\"#sec-thistimevalue\">thisTimeValue</a></emu-xref>(<var>O</var>).</li><li>If <var>tv</var> is <emu-val>NaN</emu-val>, return <code>\"Invalid Date\"</code>.</li><li>Let <var>weekday</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"><a href=\"#sec-todatestring-day-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</a></emu-xref> with the Number <emu-xref aoid=\"WeekDay\"><a href=\"#sec-week-day\">WeekDay</a></emu-xref>(<var>tv</var>).</li><li>Let <var>month</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"><a href=\"#sec-todatestring-month-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</a></emu-xref> with the Number <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>tv</var>).</li><li>Let <var>day</var> be the String representation of <emu-xref aoid=\"DateFromTime\"><a href=\"#sec-date-number\">DateFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>yv</var> be <emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>tv</var>).</li><li>If <var>yv</var> &#8805; 0, let <var>yearSign</var> be the empty string; otherwise, let <var>yearSign</var> be <code>\"-\"</code>.</li><li>Let <var>year</var> be the String representation of <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>yv</var>), formatted as a decimal number.</li><li>Let <var>paddedYear</var> be !&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>year</var>, 4, <emu-val>\"0\"</emu-val>, <emu-val>\"start\"</emu-val>).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>weekday</var>, <code>\",\"</code>, the code unit 0x0020 (SPACE), <var>day</var>, the code unit 0x0020 (SPACE), <var>month</var>, the code unit 0x0020 (SPACE), <var>yearSign</var>, <var>paddedYear</var>, the code unit 0x0020 (SPACE), and <emu-xref aoid=\"TimeString\"><a href=\"#sec-timestring\">TimeString</a></emu-xref>(<var>tv</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-enumerableownpropertynames": {"num": "7.3.21", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" aoid=\"EnumerableOwnPropertyNames\" oldids=\"sec-enumerableownproperties\">\n      <span id=\"sec-enumerableownproperties\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>When the abstract operation EnumerableOwnPropertyNames is called with Object <var>O</var> and String <var>kind</var> the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <emu-val>\"key\"</emu-val>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <emu-val>\"value\"</emu-val>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-val>\"key+value\"</emu-val>.</li><li>Let <var>entry</var> be <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Order the elements of <var>properties</var> so they are in the same relative order as would be produced by the Iterator that would be returned if the <emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref> internal method were invoked with <var>O</var>.</li><li>Return <var>properties</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"sec-todatestring-day-names": "Table 49", "sec-todatestring-month-names": "Table 50"}}, "to": {"secList": ["sec-%regexpstringiteratorprototype%.next", "sec-stringpad", "sec-internalizejsonproperty", "sec-object.entries", "sec-regexp-prototype-matchall", "sec-%regexpstringiteratorprototype%-@@tostringtag", "sec-object.values", "sec-datestring", "sec-object.keys", "sec-string.prototype.padend", "sec-serializejsonobject", "sec-string.prototype.padstart", "sec-date.prototype.toutcstring", "sec-enumerableownpropertynames"], "secData": {"sec-%regexpstringiteratorprototype%.next": {"num": "21.2.7.1.1", "title": "#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%.next\">#sec-%regexpstringiteratorprototype%.next</span> %RegExpStringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a RegExp String Iterator Object Instance (see <emu-xref href=\"#sec-properties-of-regexp-string-iterator-instances\"><a href=\"#sec-properties-of-regexp-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-regexp-string-iterator-instances\">#sec-properties-of-regexp-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>R</var> be <var>O</var>.[[IteratingRegExp]].</li><li>Let <var>S</var> be <var>O</var>.[[IteratedString]].</li><li>Let <var>global</var> be <var>O</var>.[[Global]].</li><li>Let <var>fullUnicode</var> be <var>O</var>.[[Unicode]].</li><li>Let <var>match</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li><li>If <var>match</var> is <emu-val>null</emu-val>, then<ol><li>Set <var>O</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>If <var>global</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>match</var>, <code>\"0\"</code>)).</li><li>If <var>matchStr</var> is the empty string, then<ol><li>Let <var>thisIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>)).</li><li>Let <var>nextIndex</var> be !&#160;<emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>, <var>nextIndex</var>, <emu-val>true</emu-val>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>match</var>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Set <var>O</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>match</var>, <emu-val>false</emu-val>).\n          </li></ol></li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-stringpad": {"num": "21.1.3.15.1", "title": "#sec-stringpad Runtime Semantics: StringPad ( O, maxLength, fillString, placement )", "html": "<emu-clause id=\"sec-stringpad\" aoid=\"StringPad\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringpad\">#sec-stringpad</span> Runtime Semantics: StringPad ( <var>O</var>, <var>maxLength</var>, <var>fillString</var>, <var>placement</var> )</h1>\n          <p>When the abstract operation StringPad is called with arguments <var>O</var>, <var>maxLength</var>, <var>fillString</var>, and <var>placement</var>, the following steps are taken:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>placement</var> is <code>\"start\"</code> or <code>\"end\"</code>.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>intMaxLength</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<var>maxLength</var>).</li><li>Let <var>stringLength</var> be the length of <var>S</var>.</li><li>If <var>intMaxLength</var> is not greater than <var>stringLength</var>, return <var>S</var>.</li><li>If <var>fillString</var> is <emu-val>undefined</emu-val>, let <var>filler</var> be the String value consisting solely of the code unit 0x0020 (SPACE).</li><li>Else, let <var>filler</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>fillString</var>).</li><li>If <var>filler</var> is the empty String, return <var>S</var>.</li><li>Let <var>fillLen</var> be <var>intMaxLength</var> - <var>stringLength</var>.</li><li>Let <var>truncatedStringFiller</var> be the String value consisting of repeated concatenations of <var>filler</var> truncated to length <var>fillLen</var>.</li><li>If <var>placement</var> is <code>\"start\"</code>, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>truncatedStringFiller</var> and <var>S</var>.</li><li>Else, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>S</var> and <var>truncatedStringFiller</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The argument <var>maxLength</var> will be clamped such that it can be no smaller than the length of <var>S</var>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The argument <var>fillString</var> defaults to <code>\" \"</code> (the String value consisting of the code unit 0x0020 SPACE).</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-internalizejsonproperty": {"num": "24.5.1.1", "title": "#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name )", "html": "<emu-clause id=\"sec-internalizejsonproperty\" aoid=\"InternalizeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-internalizejsonproperty\">#sec-internalizejsonproperty</span> Runtime Semantics: InternalizeJSONProperty ( <var>holder</var>, <var>name</var> )</h1>\n        <p>The abstract operation InternalizeJSONProperty is a recursive abstract operation that takes two parameters: a <var>holder</var> object and the String <var>name</var> of a property in that object. InternalizeJSONProperty uses the value of <var>reviver</var> that was originally passed to the above parse function.</p>\n        <emu-alg><ol><li>Let <var>val</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is Object, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>val</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>I</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>val</var>, <code>\"length\"</code>)).</li><li>Repeat, while <var>I</var> &lt; <var>len</var>,<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>newElement</var>).</li><li>NOTE: This algorithm intentionally does not throw an exception if <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> returns <emu-val>false</emu-val>.</li></ol></li><li>Add 1 to <var>I</var>.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>keys</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>val</var>, <code>\"key\"</code>).</li><li>For each String <var>P</var> in <var>keys</var>, do<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, <var>P</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>newElement</var>).</li><li>NOTE: This algorithm intentionally does not throw an exception if <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> returns <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>reviver</var>, <var>holder</var>, &#171; <var>name</var>, <var>val</var> &#187;).\n        </li></ol></emu-alg>\n        <p>It is not permitted for a conforming implementation of <code>JSON.parse</code> to extend the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by defining a different parse function.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-object.entries": {"num": "19.1.2.5", "title": "#sec-object.entries Object.entries ( O )", "html": "<emu-clause id=\"sec-object.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.entries\">#sec-object.entries</span> Object.entries ( <var>O</var> )</h1>\n        <p>When the <code>entries</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <code>\"key+value\"</code>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexp-prototype-matchall": {"num": "21.2.5.8", "title": "#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )", "html": "<emu-clause id=\"sec-regexp-prototype-matchall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-prototype-matchall\">#sec-regexp-prototype-matchall</span> RegExp.prototype [ @@matchAll ] ( <var>string</var> )</h1>\n\n        <p>When the <code>@@matchAll</code> method is called with argument <var>string</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <code>\"flags\"</code>)).</li><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>R</var>, <var>flags</var> &#187;).</li><li>Let <var>lastIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>matcher</var>, <code>\"lastIndex\"</code>, <var>lastIndex</var>, <emu-val>true</emu-val>).</li><li>If <var>flags</var> contains <code>\"g\"</code>, let <var>global</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <code>\"u\"</code>, let <var>fullUnicode</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateRegExpStringIterator\"><a href=\"#sec-createregexpstringiterator\">CreateRegExpStringIterator</a></emu-xref>(<var>matcher</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var>).\n        </li></ol></emu-alg>\n        <p>The value of the <emu-val>name</emu-val> property of this function is <code>\"[Symbol.matchAll]\"</code>.</p>\n\n        <div id=\"excluded-sec-createregexpstringiterator\"><h1><span class=\"secnum\">21.2.5.8.1</span>#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )</h1>...</div></emu-clause>\n\n      "}, "sec-%regexpstringiteratorprototype%-@@tostringtag": {"num": "21.2.7.1.2", "title": "#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-@@tostringtag\">#sec-%regexpstringiteratorprototype%-@@tostringtag</span> %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the <var>@@toStringTag</var> property is the String value <code>\"RegExp String Iterator\"</code>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-object.values": {"num": "19.1.2.22", "title": "#sec-object.values Object.values ( O )", "html": "<emu-clause id=\"sec-object.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.values\">#sec-object.values</span> Object.values ( <var>O</var> )</h1>\n        <p>When the <code>values</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <code>\"value\"</code>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-datestring": {"num": "20.3.4.41.2", "title": "#sec-datestring Runtime Semantics: DateString ( tv )", "html": "<emu-clause id=\"sec-datestring\" aoid=\"DateString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-datestring\">#sec-datestring</span> Runtime Semantics: DateString ( <var>tv</var> )</h1>\n          <p>The following steps are performed:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>tv</var> is not <emu-val>NaN</emu-val>.</li><li>Let <var>weekday</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"><a href=\"#sec-todatestring-day-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</a></emu-xref> with the Number <emu-xref aoid=\"WeekDay\"><a href=\"#sec-week-day\">WeekDay</a></emu-xref>(<var>tv</var>).</li><li>Let <var>month</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"><a href=\"#sec-todatestring-month-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</a></emu-xref> with the Number <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>tv</var>).</li><li>Let <var>day</var> be the String representation of <emu-xref aoid=\"DateFromTime\"><a href=\"#sec-date-number\">DateFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>yv</var> be <emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>tv</var>).</li><li>If <var>yv</var> &#8805; 0, let <var>yearSign</var> be the empty string; otherwise, let <var>yearSign</var> be <code>\"-\"</code>.</li><li>Let <var>year</var> be the String representation of <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>yv</var>), formatted as a decimal number.</li><li>Let <var>paddedYear</var> be !&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>year</var>, 4, <code>\"0\"</code>, <code>\"start\"</code>).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>weekday</var>, the code unit 0x0020 (SPACE), <var>month</var>, the code unit 0x0020 (SPACE), <var>day</var>, the code unit 0x0020 (SPACE), <var>yearSign</var>, and <var>paddedYear</var>.\n          </li></ol></emu-alg>\n          <emu-table id=\"sec-todatestring-day-names\" caption=\"Names of days of the week\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</span>: Names of days of the week</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                \n                </th>\n                <th>\n                  Name\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0\n                \n                </td>\n                <td>\n                  <code>\"Sun\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  1\n                \n                </td>\n                <td>\n                  <code>\"Mon\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  2\n                \n                </td>\n                <td>\n                  <code>\"Tue\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  3\n                \n                </td>\n                <td>\n                  <code>\"Wed\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  4\n                \n                </td>\n                <td>\n                  <code>\"Thu\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  5\n                \n                </td>\n                <td>\n                  <code>\"Fri\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  6\n                \n                </td>\n                <td>\n                  <code>\"Sat\"</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n          <emu-table id=\"sec-todatestring-month-names\" caption=\"Names of months of the year\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</span>: Names of months of the year</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                \n                </th>\n                <th>\n                  Name\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0\n                \n                </td>\n                <td>\n                  <code>\"Jan\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  1\n                \n                </td>\n                <td>\n                  <code>\"Feb\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  2\n                \n                </td>\n                <td>\n                  <code>\"Mar\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  3\n                \n                </td>\n                <td>\n                  <code>\"Apr\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  4\n                \n                </td>\n                <td>\n                  <code>\"May\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  5\n                \n                </td>\n                <td>\n                  <code>\"Jun\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  6\n                \n                </td>\n                <td>\n                  <code>\"Jul\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  7\n                \n                </td>\n                <td>\n                  <code>\"Aug\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  8\n                \n                </td>\n                <td>\n                  <code>\"Sep\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  9\n                \n                </td>\n                <td>\n                  <code>\"Oct\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  10\n                \n                </td>\n                <td>\n                  <code>\"Nov\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  11\n                \n                </td>\n                <td>\n                  <code>\"Dec\"</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n\n        "}, "sec-object.keys": {"num": "19.1.2.17", "title": "#sec-object.keys Object.keys ( O )", "html": "<emu-clause id=\"sec-object.keys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.keys\">#sec-object.keys</span> Object.keys ( <var>O</var> )</h1>\n        <p>When the <code>keys</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <code>\"key\"</code>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string.prototype.padend": {"num": "21.1.3.14", "title": "#sec-string.prototype.padend String.prototype.padEnd ( maxLength [ , fillString ] )", "html": "<emu-clause id=\"sec-string.prototype.padend\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.padend\">#sec-string.prototype.padend</span> String.prototype.padEnd ( <var>maxLength</var> [ , <var>fillString</var> ] )</h1>\n        <p>When the <code>padEnd</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ?&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>O</var>, <var>maxLength</var>, <var>fillString</var>, <code>\"end\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-serializejsonobject": {"num": "24.5.2.4", "title": "#sec-serializejsonobject Runtime Semantics: SerializeJSONObject ( value )", "html": "<emu-clause id=\"sec-serializejsonobject\" aoid=\"SerializeJSONObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonobject\">#sec-serializejsonobject</span> Runtime Semantics: SerializeJSONObject ( <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONObject with argument <var>value</var> serializes an object. It has access to the <var>stack</var>, <var>indent</var>, <var>gap</var>, and <var>PropertyList</var> values of the current invocation of the <code>stringify</code> method.</p>\n        <emu-alg><ol><li>If <var>stack</var> contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>stack</var>.</li><li>Let <var>stepback</var> be <var>indent</var>.</li><li>Set <var>indent</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>indent</var> and <var>gap</var>.</li><li>If <var>PropertyList</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>K</var> be <var>PropertyList</var>.</li></ol></li><li>Else,<ol><li>Let <var>K</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>value</var>, <code>\"key\"</code>).</li></ol></li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>P</var> of <var>K</var>, do<ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>P</var>, <var>value</var>).</li><li>If <var>strP</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>member</var> be <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>P</var>).</li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <code>\":\"</code>.</li><li>If <var>gap</var> is not the empty String, then<ol><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and the code unit 0x0020 (SPACE).</li></ol></li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <var>strP</var>.</li><li>Append <var>member</var> to <var>partial</var>.</li></ol></li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <code>\"{}\"</code>.</li></ol></li><li>Else,<ol><li>If <var>gap</var> is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <code>\"{\"</code>, <var>properties</var>, and <code>\"}\"</code>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>indent</var>.</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <code>\"{\"</code>, the code unit 0x000A (LINE FEED), <var>indent</var>, <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <code>\"}\"</code>.</li></ol></li></ol></li><li>Remove the last element of <var>stack</var>.</li><li>Set <var>indent</var> to <var>stepback</var>.</li><li>Return <var>final</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string.prototype.padstart": {"num": "21.1.3.15", "title": "#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )", "html": "<emu-clause id=\"sec-string.prototype.padstart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.padstart\">#sec-string.prototype.padstart</span> String.prototype.padStart ( <var>maxLength</var> [ , <var>fillString</var> ] )</h1>\n        <p>When the <code>padStart</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ?&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>O</var>, <var>maxLength</var>, <var>fillString</var>, <code>\"start\"</code>).\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-stringpad\"><h1><span class=\"secnum\">21.1.3.15.1</span>#sec-stringpad Runtime Semantics: StringPad ( O, maxLength, fillString, placement )</h1>...</div></emu-clause>\n\n      "}, "sec-date.prototype.toutcstring": {"num": "20.3.4.43", "title": "#sec-date.prototype.toutcstring Date.prototype.toUTCString ( )", "html": "<emu-clause id=\"sec-date.prototype.toutcstring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.toutcstring\">#sec-date.prototype.toutcstring</span> Date.prototype.toUTCString ( )</h1>\n        <p>The <code>toUTCString</code> method returns a String value representing the instance in time corresponding to <emu-xref href=\"#this-time-value\"><a href=\"#this-time-value\">this time value</a></emu-xref>. The format of the String is based upon \"HTTP-date\" from RFC 7231, generalized to support the full range of times supported by ECMAScript Date objects. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be <emu-xref href=\"#this-Date-object\"><a href=\"#this-Date-object\">this Date object</a></emu-xref>.</li><li>Let <var>tv</var> be ?&#160;<emu-xref href=\"#sec-thistimevalue\"><a href=\"#sec-thistimevalue\">thisTimeValue</a></emu-xref>(<var>O</var>).</li><li>If <var>tv</var> is <emu-val>NaN</emu-val>, return <code>\"Invalid Date\"</code>.</li><li>Let <var>weekday</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"><a href=\"#sec-todatestring-day-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</a></emu-xref> with the Number <emu-xref aoid=\"WeekDay\"><a href=\"#sec-week-day\">WeekDay</a></emu-xref>(<var>tv</var>).</li><li>Let <var>month</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"><a href=\"#sec-todatestring-month-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</a></emu-xref> with the Number <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>tv</var>).</li><li>Let <var>day</var> be the String representation of <emu-xref aoid=\"DateFromTime\"><a href=\"#sec-date-number\">DateFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>yv</var> be <emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>tv</var>).</li><li>If <var>yv</var> &#8805; 0, let <var>yearSign</var> be the empty string; otherwise, let <var>yearSign</var> be <code>\"-\"</code>.</li><li>Let <var>year</var> be the String representation of <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>yv</var>), formatted as a decimal number.</li><li>Let <var>paddedYear</var> be !&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>year</var>, 4, <code>\"0\"</code>, <code>\"start\"</code>).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>weekday</var>, <code>\",\"</code>, the code unit 0x0020 (SPACE), <var>day</var>, the code unit 0x0020 (SPACE), <var>month</var>, the code unit 0x0020 (SPACE), <var>yearSign</var>, <var>paddedYear</var>, the code unit 0x0020 (SPACE), and <emu-xref aoid=\"TimeString\"><a href=\"#sec-timestring\">TimeString</a></emu-xref>(<var>tv</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-enumerableownpropertynames": {"num": "7.3.21", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" aoid=\"EnumerableOwnPropertyNames\" oldids=\"sec-enumerableownproperties\">\n      <span id=\"sec-enumerableownproperties\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>When the abstract operation EnumerableOwnPropertyNames is called with Object <var>O</var> and String <var>kind</var> the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <code>\"key\"</code>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <code>\"value\"</code>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <code>\"key+value\"</code>.</li><li>Let <var>entry</var> be <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Order the elements of <var>properties</var> so they are in the same relative order as would be produced by the Iterator that would be returned if the <emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref> internal method were invoked with <var>O</var>.</li><li>Return <var>properties</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"sec-todatestring-day-names": "Table 49", "sec-todatestring-month-names": "Table 50"}}}