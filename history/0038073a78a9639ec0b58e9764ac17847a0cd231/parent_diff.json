{"from": {"secList": ["sec-parsemodule", "sec-tear-free-aligned-reads", "sec-exports-static-semantics-exportentries", "sec-string.prototype.concat", "sec-weakmap.prototype.set", "sec-set.prototype.foreach", "sec-array.prototype.splice", "sec-InnerModuleLinking", "sec-functiondeclarationinstantiation", "sec-map.prototype.set", "sec-map.prototype.get", "sec-list-and-record-specification-type", "sec-map.prototype.delete", "sec-enumerableownpropertynames", "sec-array.prototype.unshift", "sec-finalization-registry.prototype.unregister", "sec-importedlocalnames", "sec-weakset.prototype.add", "sec-regexp.prototype-@@replace", "sec-valid-chosen-reads", "sec-blockdeclarationinstantiation", "sec-%foriniteratorprototype%.next", "sec-get-map.prototype.size", "sec-set.prototype.add", "sec-object.assign", "sec-sharedatablockeventset", "sec-map.prototype.foreach", "sec-string.fromcodepoint", "sec-getmodulenamespace", "sec-meta-properties-runtime-semantics-evaluation", "sec-string.prototype.replaceall", "sec-array.prototype.concat", "sec-ordinarytoprimitive", "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "sec-resolveexport", "sec-weakref-execution", "sec-set.prototype.clear", "sec-weakset.prototype.delete", "sec-source-text-module-record-initialize-environment", "sec-runtime-semantics-forinofheadevaluation", "sec-event-set", "sec-getownpropertykeys", "sec-encode", "sec-composewriteeventbytes", "sec-getexportednames", "sec-objectdefineproperties", "sec-moduledeclarationlinking", "sec-set.prototype.has", "sec-innermoduleevaluation", "sec-globaldeclarationinstantiation", "sec-get-set.prototype.size", "sec-weakset.prototype.has", "sec-map.prototype.has", "sec-weakmap.prototype.has", "sec-map.prototype.clear", "sec-weakmap.prototype.get", "sec-codepointstostring", "sec-moduleevaluation", "sec-runtime-semantics-caseblockevaluation", "sec-internalizejsonproperty", "sec-runtime-semantics-classdefinitionevaluation", "sec-string.fromcharcode", "sec-evaldeclarationinstantiation", "sec-copydataproperties", "sec-coherent-reads", "sec-triggerpromisereactions", "sec-weakmap.prototype.delete", "sec-set.prototype.delete", "sec-quotejsonstring", "sec-array.prototype.push", "sec-hosteventset", "sec-object.getownpropertydescriptors"], "secData": {"sec-parsemodule": {"num": "15.2.1.17.1", "title": "#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parsemodule\" aoid=\"ParseModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsemodule\">#sec-parsemodule</span> ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n          <p>The abstract operation ParseModule takes arguments <var>sourceText</var> (ECMAScript source text), <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Parse <var>sourceText</var> using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and analyse the parse result for any Early Error conditions. If the parse was successful and no early errors were found, let <var>body</var> be the resulting parse tree. Otherwise, let <var>body</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of one or more <emu-val>SyntaxError</emu-val> objects representing the parsing errors and/or early errors. Parsing and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> detection may be interweaved in an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> manner. If more than one parsing error or <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> is present, the number and ordering of error objects in the list is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>, but at least one must be present.</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Let <var>requestedModules</var> be the ModuleRequests of <var>body</var>.</li><li>Let <var>importEntries</var> be ImportEntries of <var>body</var>.</li><li>Let <var>importedBoundNames</var> be <emu-xref aoid=\"ImportedLocalNames\"><a href=\"#sec-importedlocalnames\">ImportedLocalNames</a></emu-xref>(<var>importEntries</var>).</li><li>Let <var>indirectExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>localExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>starExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>exportEntries</var> be ExportEntries of <var>body</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>ee</var> in <var>exportEntries</var>, do<ol><li>If <var>ee</var>.[[ModuleRequest]] is <emu-val>null</emu-val>, then<ol><li>If <var>ee</var>.[[LocalName]] is not an element of <var>importedBoundNames</var>, then<ol><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>Let <var>ie</var> be the element of <var>importEntries</var> whose [[LocalName]] is the same as <var>ee</var>.[[LocalName]].</li><li>If <var>ie</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>NOTE: This is a re-export of an imported module namespace object.</li><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>NOTE: This is a re-export of a single name.</li><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>ie</var>.[[ModuleRequest]], [[ImportName]]: <var>ie</var>.[[ImportName]], [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>ee</var>.[[ExportName]] } to <var>indirectExportEntries</var>.</li></ol></li></ol></li></ol></li><li>Else if <var>ee</var>.[[ImportName]] is <emu-val>\"*\"</emu-val> and <var>ee</var>.[[ExportName]] is <emu-val>null</emu-val>, then<ol><li>Append <var>ee</var> to <var>starExportEntries</var>.</li></ol></li><li>Else,<ol><li>Append <var>ee</var> to <var>indirectExportEntries</var>.</li></ol></li></ol></li><li>Return <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[Namespace]]: <emu-val>undefined</emu-val>, [[Status]]: <emu-const>unlinked</emu-const>, [[EvaluationError]]: <emu-val>undefined</emu-val>, [[HostDefined]]: <var>hostDefined</var>, [[ECMAScriptCode]]: <var>body</var>, [[Context]]: <emu-const>empty</emu-const>, [[ImportMeta]]: <emu-const>empty</emu-const>, [[RequestedModules]]: <var>requestedModules</var>, [[ImportEntries]]: <var>importEntries</var>, [[LocalExportEntries]]: <var>localExportEntries</var>, [[IndirectExportEntries]]: <var>indirectExportEntries</var>, [[StarExportEntries]]: <var>starExportEntries</var>, [[DFSIndex]]: <emu-val>undefined</emu-val>, [[DFSAncestorIndex]]: <emu-val>undefined</emu-val> }.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An implementation may parse module source text and analyse it for Early Error conditions prior to the evaluation of ParseModule for that module source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseModule upon that source text.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-tear-free-aligned-reads": {"num": "28.7.3", "title": "#sec-tear-free-aligned-reads Tear Free Reads", "html": "<emu-clause id=\"sec-tear-free-aligned-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tear-free-aligned-reads\">#sec-tear-free-aligned-reads</span> Tear Free Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has tear free reads if the following abstract operation returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>If <var>R</var>.[[NoTear]] is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The remainder of dividing <var>R</var>.[[ByteIndex]] by <var>R</var>.[[ElementSize]] is 0.</li><li>For each event <var>W</var> such that (<var>R</var>, <var>W</var>) is in <var>execution</var>.[[ReadsFrom]] and <var>W</var>.[[NoTear]] is <emu-val>true</emu-val>, do<ol><li>If <var>R</var> and <var>W</var> have equal ranges, and there is an event <var>V</var> such that <var>V</var> and <var>W</var> have equal ranges, <var>V</var>.[[NoTear]] is <emu-val>true</emu-val>, <var>W</var> is not <var>V</var>, and (<var>R</var>, <var>V</var>) is in <var>execution</var>.[[ReadsFrom]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An event's [[NoTear]] field is <emu-val>true</emu-val> when that event was introduced via accessing an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> TypedArray, and <emu-val>false</emu-val> when introduced via accessing a floating point TypedArray or DataView.</p>\n        <p>Intuitively, this requirement says when a memory range is accessed in an aligned fashion via an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> TypedArray, a single write event on that range must \"win\" when in a data race with other write events with equal ranges. More precisely, this requirement says an aligned read event cannot read a value composed of bytes from multiple, different write events all with equal ranges. It is possible, however, for an aligned read event to read from multiple write events with overlapping ranges.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-exports-static-semantics-exportentries": {"num": "15.2.3.5", "title": "#sec-exports-static-semantics-exportentries Static Semantics: ExportEntries", "html": "<emu-clause id=\"sec-exports-static-semantics-exportentries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-static-semantics-exportentries\">#sec-exports-static-semantics-exportentries</span> Static Semantics: ExportEntries</h1>\n        <emu-see-also-para op=\"ExportEntries\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0a40575\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be the sole element of ModuleRequests of <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>.</li><li>Return ExportEntriesForModule of <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> with argument <var>module</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2762c7fe\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return ExportEntriesForModule of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> with argument <emu-val>null</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6c6de801\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>For each <var>name</var> in <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"828f5ae3\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li><li>For each <var>name</var> in <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71d1417e\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3c3cb8d\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e1fe9c4f\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <emu-val>\"*default*\"</emu-val>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>entry</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-val>\"*default*\"</emu-val> is used within this specification as a synthetic name for anonymous default export values.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.concat": {"num": "21.1.3.4", "title": "#sec-string.prototype.concat String.prototype.concat ( ...args )", "html": "<emu-clause id=\"sec-string.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.concat\">#sec-string.prototype.concat</span> String.prototype.concat ( ...<var>args</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>concat</code> method is called it returns the String value consisting of the code units of the <emu-val>this</emu-val> value (converted to a String) followed by the code units of each of the arguments converted to a String. The result is a String value, not a String object.</p>\n        </div></emu-note>\n        <p>When the <code>concat</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>R</var> be <var>S</var>.</li><li>Repeat, while <var>args</var> is not empty,<ol><li>Remove the first element from <var>args</var> and let <var>next</var> be the value of that element.</li><li>Let <var>nextString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>next</var>).</li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>nextString</var>.</li></ol></li><li>Return <var>R</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.set": {"num": "23.3.3.5", "title": "#sec-weakmap.prototype.set WeakMap.prototype.set ( key, value )", "html": "<emu-clause id=\"sec-weakmap.prototype.set\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.set\">#sec-weakmap.prototype.set</span> WeakMap.prototype.set ( <var>key</var>, <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Value]] to <var>value</var>.</li><li>Return <var>M</var>.</li></ol></li></ol></li><li>Let <var>p</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>key</var>, [[Value]]: <var>value</var> }.</li><li>Append <var>p</var> as the last element of <var>entries</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.foreach": {"num": "23.2.3.6", "title": "#sec-set.prototype.foreach Set.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-set.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.foreach\">#sec-set.prototype.foreach</span> Set.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, in original insertion order, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>, <var>e</var>, <var>S</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each value present in the set object, in value insertion order. <var>callbackfn</var> is called only for values of the Set which actually exist; it is not called for keys that have been deleted from the set.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the first two arguments are a value contained in the Set. The same value is passed for both arguments. The Set object being traversed is passed as the third argument.</p>\n          <p>The <var>callbackfn</var> is called with three arguments to be consistent with the call back functions used by <code>forEach</code> methods for Map and Array. For Sets, each item value is considered to be both the key and the value.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>Each value is normally visited only once. However, a value will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Values that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the value is added again before the <code>forEach</code> call completes. New values added after the call to <code>forEach</code> begins are visited.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.splice": {"num": "22.1.3.28", "title": "#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )", "html": "<emu-clause id=\"sec-array.prototype.splice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.splice\">#sec-array.prototype.splice</span> Array.prototype.splice ( <var>start</var>, <var>deleteCount</var>, ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>splice</code> method is called with two or more arguments <var>start</var>, <var>deleteCount</var> and zero or more <var>items</var>, the <var>deleteCount</var> elements of the array starting at <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> <var>start</var> are replaced by the elements of <var>items</var>. An Array object containing the deleted elements (if any) is returned.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>actualStart</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>actualStart</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>start</var> is not present, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be 0.</li></ol></li><li>Else if <var>deleteCount</var> is not present, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be <var>len</var> - <var>actualStart</var>.</li></ol></li><li>Else,<ol><li>Let <var>insertCount</var> be the number of elements in <var>items</var>.</li><li>Let <var>dc</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>deleteCount</var>).</li><li>Let <var>actualDeleteCount</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>dc</var>, 0), <var>len</var> - <var>actualStart</var>).</li></ol></li><li>If <var>len</var> + <var>insertCount</var> - <var>actualDeleteCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>actualDeleteCount</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>actualDeleteCount</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>actualStart</var> + <var>k</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>fromValue</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>actualDeleteCount</var>, <emu-val>true</emu-val>).</li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li>If <var>itemCount</var> &lt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>k</var> &lt; (<var>len</var> - <var>actualDeleteCount</var>),<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var>).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Set <var>k</var> to <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; (<var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>),<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1)).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Else if <var>itemCount</var> &gt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to (<var>len</var> - <var>actualDeleteCount</var>).</li><li>Repeat, while <var>k</var> &gt; <var>actualStart</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of that element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li id=\"step-array-proto-splice-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property of the result Array in step <emu-xref href=\"#step-array-proto-splice-set-length\"><a href=\"#step-array-proto-splice-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-splice-set-length\">#step-array-proto-splice-set-length</a></emu-xref> was necessary in previous editions of ECMAScript to ensure that its length was correct in situations where the trailing elements of the result Array were not present. Setting <emu-val>\"length\"</emu-val> became unnecessary starting in ES2015 when the result Array was initialized to its proper length rather than an empty Array but is carried forward to preserve backward compatibility.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>splice</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-InnerModuleLinking": {"num": "15.2.1.16.1.1", "title": "#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )", "html": "<emu-clause id=\"sec-InnerModuleLinking\" oldids=\"sec-innermoduleinstantiation\" aoid=\"InnerModuleLinking\"><span id=\"sec-innermoduleinstantiation\"></span>\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-InnerModuleLinking\">#sec-InnerModuleLinking</span> InnerModuleLinking ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleLinking takes arguments <var>module</var> (a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var>. It is used by Link to perform the actual linking process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to <emu-const>linked</emu-const> together. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Link().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>, then<ol><li>Return <var>index</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>linking</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>linked</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-functiondeclarationinstantiation": {"num": "9.2.10", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>The abstract operation FunctionDeclarationInstantiation takes arguments <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be IsSimpleParameterList of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be ContainsExpression of <var>formals</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the LexicallyDeclaredNames of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <emu-val>\"arguments\"</emu-val> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <emu-val>\"arguments\"</emu-val> is an element of <var>functionNames</var> or if <emu-val>\"arguments\"</emu-val> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that bindings created by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls in the formal parameter list are outside the environment where parameters are declared.</li><li>Let <var>calleeEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>calleeEnv</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The VariableEnvironment of <var>calleeContext</var> is <var>calleeEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>env</var>.</li></ol></li><li>For each String <var>paramName</var> in <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>env</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>env</var>.InitializeBinding(<emu-val>\"arguments\"</emu-val>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>parameterNames</var> with <emu-val>\"arguments\"</emu-val> appended.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>env</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>env</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnv</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li id=\"step-functiondeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in <emu-xref href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\">#sec-function-definitions-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-map.prototype.set": {"num": "23.1.3.9", "title": "#sec-map.prototype.set Map.prototype.set ( key, value )", "html": "<emu-clause id=\"sec-map.prototype.set\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.set\">#sec-map.prototype.set</span> Map.prototype.set ( <var>key</var>, <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Value]] to <var>value</var>.</li><li>Return <var>M</var>.</li></ol></li></ol></li><li>If <var>key</var> is <emu-val>-0</emu-val>, set <var>key</var> to <emu-val>+0</emu-val>.</li><li>Let <var>p</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>key</var>, [[Value]]: <var>value</var> }.</li><li>Append <var>p</var> as the last element of <var>entries</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.get": {"num": "23.1.3.6", "title": "#sec-map.prototype.get Map.prototype.get ( key )", "html": "<emu-clause id=\"sec-map.prototype.get\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.get\">#sec-map.prototype.get</span> Map.prototype.get ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <var>p</var>.[[Value]].</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-list-and-record-specification-type": {"num": "6.2.1", "title": "#sec-list-and-record-specification-type The List and Record Specification Types", "html": "<emu-clause id=\"sec-list-and-record-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-list-and-record-specification-type\">#sec-list-and-record-specification-type</span> The List and Record Specification Types</h1>\n      <p>The <dfn>List</dfn> type is used to explain the evaluation of argument lists (see <emu-xref href=\"#sec-argument-lists\"><a href=\"#sec-argument-lists\" class=\"excluded-xref\" excluded-id=\"sec-argument-lists\">#sec-argument-lists</a></emu-xref>) in <code>new</code> expressions, in function calls, and in other algorithms where a simple ordered list of values is needed. Values of the List type are simply ordered sequences of list elements containing the individual values. These sequences may be of any length. The elements of a list may be randomly accessed using 0-origin indices. For notational convenience an array-like syntax can be used to access List elements. For example, <var>arguments</var>[2] is shorthand for saying the 3<sup>rd</sup> element of the List <var>arguments</var>.</p>\n      <p>For notational convenience within this specification, a literal syntax can be used to express a new List value. For example, &#171; 1, 2 &#187; defines a List value that has two elements each of which is initialized to a specific value. A new empty List can be expressed as &#171; &#187;.</p>\n      <p>The <dfn>Record</dfn> type is used to describe data aggregations within the algorithms of this specification. A Record type value consists of one or more named fields. The value of each field is either an ECMAScript value or an abstract value represented by a name associated with the Record type. Field names are always enclosed in double brackets, for example [[Value]].</p>\n      <p>For notational convenience within this specification, an object literal-like syntax can be used to express a Record value. For example, { [[Field1]]: 42, [[Field2]]: <emu-val>false</emu-val>, [[Field3]]: <emu-const>empty</emu-const> } defines a Record value that has three fields, each of which is initialized to a specific value. Field name order is not significant. Any fields that are not explicitly listed are considered to be absent.</p>\n      <p>In specification text and algorithms, dot notation may be used to refer to a specific field of a Record value. For example, if R is the record shown in the previous paragraph then R.[[Field2]] is shorthand for &#8220;the field of R named [[Field2]]&#8221;.</p>\n      <p>Schema for commonly used Record field combinations may be named, and that name may be used as a prefix to a literal Record value to identify the specific kind of aggregations that is being described. For example: PropertyDescriptor { [[Value]]: 42, [[Writable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n\n    "}, "sec-map.prototype.delete": {"num": "23.1.3.3", "title": "#sec-map.prototype.delete Map.prototype.delete ( key )", "html": "<emu-clause id=\"sec-map.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.delete\">#sec-map.prototype.delete</span> Map.prototype.delete ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-enumerableownpropertynames": {"num": "7.3.23", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" aoid=\"EnumerableOwnPropertyNames\" oldids=\"sec-enumerableownproperties\"><span id=\"sec-enumerableownproperties\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>The abstract operation EnumerableOwnPropertyNames takes arguments <var>O</var> (an Object) and <var>kind</var> (one of <emu-const>key</emu-const>, <emu-const>value</emu-const>, or <emu-const>key+value</emu-const>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Return <var>properties</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-array.prototype.unshift": {"num": "22.1.3.31", "title": "#sec-array.prototype.unshift Array.prototype.unshift ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.unshift\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.unshift\">#sec-array.prototype.unshift</span> Array.prototype.unshift ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are prepended to the start of the array, such that their order within the array is the same as the order in which they appear in the argument list.</p>\n        </div></emu-note>\n        <p>When the <code>unshift</code> method is called with zero or more arguments <var>item1</var>, <var>item2</var>, etc., the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>argCount</var> be the number of elements in <var>items</var>.</li><li>If <var>argCount</var> &gt; 0, then<ol><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; 0,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>argCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Let <var>j</var> be 0.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of that element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>j</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> + <var>argCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var> + <var>argCount</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>unshift</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>unshift</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-finalization-registry.prototype.unregister": {"num": "25.2.3.3", "title": "#sec-finalization-registry.prototype.unregister FinalizationRegistry.prototype.unregister ( unregisterToken )", "html": "<emu-clause id=\"sec-finalization-registry.prototype.unregister\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finalization-registry.prototype.unregister\">#sec-finalization-registry.prototype.unregister</span> FinalizationRegistry.prototype.unregister ( <var>unregisterToken</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>finalizationRegistry</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>finalizationRegistry</var>, [[Cells]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unregisterToken</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>removed</var> be <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[WeakRefTarget]], [[HeldValue]], [[UnregisterToken]] } <var>cell</var> that is an element of <var>finalizationRegistry</var>.[[Cells]], do<ol><li>If <var>cell</var>.[[UnregisterToken]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>cell</var>.[[UnregisterToken]], <var>unregisterToken</var>) is <emu-val>true</emu-val>, then<ol><li>Remove <var>cell</var> from <var>finalizationRegistry</var>.[[Cells]].</li><li>Set <var>removed</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>removed</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-importedlocalnames": {"num": "15.2.1.9", "title": "#sec-importedlocalnames Static Semantics: ImportedLocalNames ( importEntries )", "html": "<emu-clause id=\"sec-importedlocalnames\" aoid=\"ImportedLocalNames\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-importedlocalnames\">#sec-importedlocalnames</span> Static Semantics: ImportedLocalNames ( <var>importEntries</var> )</h1>\n        <p>The abstract operation ImportedLocalNames takes argument <var>importEntries</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry Records (see <emu-xref href=\"#table-39\"><a href=\"#table-39\" class=\"excluded-xref\" excluded-id=\"table-39\">#table-39</a></emu-xref>)). It creates a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all of the local name bindings defined by <var>importEntries</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>localNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> <var>i</var> in <var>importEntries</var>, do<ol><li>Append <var>i</var>.[[LocalName]] to <var>localNames</var>.</li></ol></li><li>Return <var>localNames</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.add": {"num": "23.4.3.1", "title": "#sec-weakset.prototype.add WeakSet.prototype.add ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.add\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.add\">#sec-weakset.prototype.add</span> WeakSet.prototype.add ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>S</var>.</li></ol></li></ol></li><li>Append <var>value</var> as the last element of <var>entries</var>.</li><li>Return <var>S</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexp.prototype-@@replace": {"num": "21.2.5.10", "title": "#sec-regexp.prototype-@@replace RegExp.prototype [ @@replace ] ( string, replaceValue )", "html": "<emu-clause id=\"sec-regexp.prototype-@@replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@replace\">#sec-regexp.prototype-@@replace</span> RegExp.prototype [ @@replace ] ( <var>string</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>@@replace</code> method is called with arguments <var>string</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>lengthS</var> be the number of code unit elements in <var>S</var>.</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fullUnicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, 0, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>results</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li><li>If <var>result</var> is <emu-val>null</emu-val>, set <var>done</var> to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Append <var>result</var> to the end of <var>results</var>.</li><li>If <var>global</var> is <emu-val>false</emu-val>, set <var>done</var> to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>)).</li><li>Let <var>nextIndex</var> be <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, <var>nextIndex</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li></ol></li></ol></li><li>Let <var>accumulatedResult</var> be the empty String.</li><li>Let <var>nextSourcePosition</var> be 0.</li><li>For each <var>result</var> in <var>results</var>, do<ol><li>Let <var>resultLength</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>result</var>).</li><li>Let <var>nCaptures</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>resultLength</var> - 1, 0).</li><li>Let <var>matched</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>Let <var>matchLength</var> be the number of code units in <var>matched</var>.</li><li>Let <var>position</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"index\"</emu-val>)).</li><li>Set <var>position</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>position</var>, <var>lengthS</var>), 0).</li><li>Let <var>n</var> be 1.</li><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Repeat, while <var>n</var> &#8804; <var>nCaptures</var>,<ol><li>Let <var>capN</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>)).</li><li>If <var>capN</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>capN</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>capN</var>).</li></ol></li><li>Append <var>capN</var> as the last element of <var>captures</var>.</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Let <var>namedCaptures</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"groups\"</emu-val>).</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replacerArgs</var> be &#171; <var>matched</var> &#187;.</li><li>Append in list order the elements of <var>captures</var> to the end of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>replacerArgs</var>.</li><li>Append <var>position</var> and <var>S</var> to <var>replacerArgs</var>.</li><li>If <var>namedCaptures</var> is not <emu-val>undefined</emu-val>, then<ol><li>Append <var>namedCaptures</var> as the last element of <var>replacerArgs</var>.</li></ol></li><li>Let <var>replValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, <var>replacerArgs</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replValue</var>).</li></ol></li><li>Else,<ol><li>If <var>namedCaptures</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>namedCaptures</var> to ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>namedCaptures</var>).</li></ol></li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>matched</var>, <var>S</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, <var>replaceValue</var>).</li></ol></li><li>If <var>position</var> &#8805; <var>nextSourcePosition</var>, then<ol><li>NOTE: <var>position</var> should not normally move backwards. If it does, it is an indication of an ill-behaving RegExp subclass or use of an access triggered side-effect to change the global flag or other characteristics of <var>rx</var>. In such cases, the corresponding substitution is ignored.</li><li>Set <var>accumulatedResult</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>accumulatedResult</var>, the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>nextSourcePosition</var> to <var>position</var>, and <var>replacement</var>.</li><li>Set <var>nextSourcePosition</var> to <var>position</var> + <var>matchLength</var>.</li></ol></li></ol></li><li>If <var>nextSourcePosition</var> &#8805; <var>lengthS</var>, return <var>accumulatedResult</var>.</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>accumulatedResult</var> and the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>nextSourcePosition</var>.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.replace]\"</emu-val>.</p>\n      </emu-clause>\n\n      "}, "sec-valid-chosen-reads": {"num": "28.7.1", "title": "#sec-valid-chosen-reads Valid Chosen Reads", "html": "<emu-clause id=\"sec-valid-chosen-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-valid-chosen-reads\">#sec-valid-chosen-reads</span> Valid Chosen Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has valid chosen reads if the following abstract operation returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>Let <var>chosenValueRecord</var> be the element of <var>execution</var>.[[ChosenValues]] whose [[Event]] field is <var>R</var>.</li><li>Let <var>chosenValue</var> be <var>chosenValueRecord</var>.[[ChosenValue]].</li><li>Let <var>readValue</var> be <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref>(<var>execution</var>, <var>R</var>).</li><li>Let <var>chosenLen</var> be the number of elements of <var>chosenValue</var>.</li><li>Let <var>readLen</var> be the number of elements of <var>readValue</var>.</li><li>If <var>chosenLen</var> is not equal to <var>readLen</var>, then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>If <var>chosenValue</var>[<var>i</var>] is not equal to <var>readValue</var>[<var>i</var>] for any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value <var>i</var> in the range 0 through <var>chosenLen</var>, exclusive, then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-blockdeclarationinstantiation": {"num": "13.2.14", "title": "#sec-blockdeclarationinstantiation Runtime Semantics: BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> Runtime Semantics: BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>The abstract operation BlockDeclarationInstantiation takes arguments <var>code</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li id=\"step-blockdeclarationinstantiation-createmutablebinding\">Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li id=\"step-blockdeclarationinstantiation-initializebinding\">Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-%foriniteratorprototype%.next": {"num": "13.7.5.16.2.1", "title": "#sec-%foriniteratorprototype%.next %ForInIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%foriniteratorprototype%.next\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</span> %ForInIteratorPrototype%.next ( )</h1>\n            <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has all of the internal slots of a For-In Iterator Instance (<emu-xref href=\"#sec-properties-of-for-in-iterator-instances\"><a href=\"#sec-properties-of-for-in-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-for-in-iterator-instances\">#sec-properties-of-for-in-iterator-instances</a></emu-xref>).</li><li>Let <var>object</var> be <var>O</var>.[[Object]].</li><li>Let <var>visited</var> be <var>O</var>.[[VisitedKeys]].</li><li>Let <var>remaining</var> be <var>O</var>.[[RemainingKeys]].</li><li>Repeat,<ol><li>If <var>O</var>.[[ObjectWasVisited]] is <emu-val>false</emu-val>, then<ol><li>Let <var>keys</var> be ? <var>object</var>.[[OwnPropertyKeys]]().</li><li>For each <var>key</var> of <var>keys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Append <var>key</var> to <var>remaining</var>.</li></ol></li></ol></li><li>Set <var>O</var>.[[ObjectWasVisited]] to <emu-val>true</emu-val>.</li></ol></li><li>Repeat, while <var>remaining</var> is not empty,<ol><li>Remove the first element from <var>remaining</var> and let <var>r</var> be the value of the element.</li><li>If there does not exist an element <var>v</var> of <var>visited</var> such that <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>r</var>, <var>v</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>object</var>.[[GetOwnProperty]](<var>r</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val>, then<ol><li>Append <var>r</var> to <var>visited</var>.</li><li>If <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>r</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>Set <var>object</var> to ? <var>object</var>.[[GetPrototypeOf]]().</li><li>Set <var>O</var>.[[Object]] to <var>object</var>.</li><li>Set <var>O</var>.[[ObjectWasVisited]] to <emu-val>false</emu-val>.</li><li>If <var>object</var> is <emu-val>null</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-get-map.prototype.size": {"num": "23.1.3.10", "title": "#sec-get-map.prototype.size get Map.prototype.size", "html": "<emu-clause id=\"sec-get-map.prototype.size\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-map.prototype.size\">#sec-get-map.prototype.size</span> get Map.prototype.size</h1>\n        <p><code>Map.prototype.size</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>Let <var>count</var> be 0.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const>, set <var>count</var> to <var>count</var> + 1.</li></ol></li><li>Return <var>count</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.add": {"num": "23.2.3.1", "title": "#sec-set.prototype.add Set.prototype.add ( value )", "html": "<emu-clause id=\"sec-set.prototype.add\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.add\">#sec-set.prototype.add</span> Set.prototype.add ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>S</var>.</li></ol></li></ol></li><li>If <var>value</var> is <emu-val>-0</emu-val>, set <var>value</var> to <emu-val>+0</emu-val>.</li><li>Append <var>value</var> as the last element of <var>entries</var>.</li><li>Return <var>S</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.assign": {"num": "19.1.2.1", "title": "#sec-object.assign Object.assign ( target, ...sources )", "html": "<emu-clause id=\"sec-object.assign\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.assign\">#sec-object.assign</span> Object.assign ( <var>target</var>, ...<var>sources</var> )</h1>\n        <p>The <code>assign</code> function is used to copy the values of all of the enumerable own properties from one or more source objects to a <var>target</var> object. When the <code>assign</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>to</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>target</var>).</li><li>If only one argument was passed, return <var>to</var>.</li><li>For each element <var>nextSource</var> of <var>sources</var>, in ascending index order, do<ol><li>If <var>nextSource</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>nextSource</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>to</var>, <var>nextKey</var>, <var>propValue</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li></ol></li></ol></li><li>Return <var>to</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>assign</code> function is 2.</p>\n      </emu-clause>\n\n      "}, "sec-sharedatablockeventset": {"num": "28.5.2", "title": "#sec-sharedatablockeventset SharedDataBlockEventSet ( execution )", "html": "<emu-clause id=\"sec-sharedatablockeventset\" aoid=\"SharedDataBlockEventSet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sharedatablockeventset\">#sec-sharedatablockeventset</span> SharedDataBlockEventSet ( <var>execution</var> )</h1>\n      <p>The abstract operation SharedDataBlockEventSet takes argument <var>execution</var> (a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>events</var> be an empty Set.</li><li>For each event <var>E</var> in <emu-xref aoid=\"EventSet\"><a href=\"#sec-event-set\">EventSet</a></emu-xref>(<var>execution</var>), do<ol><li>If <var>E</var> is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref>, <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref>, or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event, add <var>E</var> to <var>events</var>.</li></ol></li><li>Return <var>events</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-map.prototype.foreach": {"num": "23.1.3.5", "title": "#sec-map.prototype.foreach Map.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-map.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.foreach\">#sec-map.prototype.foreach</span> Map.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>e</var> that is an element of <var>entries</var>, in original key insertion order, do<ol><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>.[[Value]], <var>e</var>.[[Key]], <var>M</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each key/value pair present in the map object, in key insertion order. <var>callbackfn</var> is called only for keys of the map which actually exist; it is not called for keys that have been deleted from the map.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the item, the key of the item, and the Map object being traversed.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>. Each entry of a map's [[MapData]] is only visited once. New keys added after the call to <code>forEach</code> begins are visited. A key will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Keys that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the key is added again before the <code>forEach</code> call completes.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.fromcodepoint": {"num": "21.1.2.2", "title": "#sec-string.fromcodepoint String.fromCodePoint ( ...codePoints )", "html": "<emu-clause id=\"sec-string.fromcodepoint\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcodepoint\">#sec-string.fromcodepoint</span> String.fromCodePoint ( ...<var>codePoints</var> )</h1>\n        <p>The <code>String.fromCodePoint</code> function may be called with any number of arguments which form the rest parameter <var>codePoints</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>length</var> be the number of elements in <var>codePoints</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var>,<ol><li>Let <var>next</var> be <var>codePoints</var>[<var>nextIndex</var>].</li><li>Let <var>nextCP</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>next</var>).</li><li>If !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>nextCP</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>nextCP</var> &lt; 0 or <var>nextCP</var> &gt; 0x10FFFF, throw a <emu-val>RangeError</emu-val> exception.</li><li>Append the elements of !&#160;<emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>nextCP</var>) to the end of <var>elements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is 0, the empty String is returned.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCodePoint</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-getmodulenamespace": {"num": "15.2.1.21", "title": "#sec-getmodulenamespace Runtime Semantics: GetModuleNamespace ( module )", "html": "<emu-clause id=\"sec-getmodulenamespace\" aoid=\"GetModuleNamespace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodulenamespace\">#sec-getmodulenamespace</span> Runtime Semantics: GetModuleNamespace ( <var>module</var> )</h1>\n        <p>The abstract operation GetModuleNamespace takes argument <var>module</var>. It retrieves the Module Namespace Object representing <var>module</var>'s exports, lazily creating it the first time it was requested, and storing it in <var>module</var>.[[Namespace]] for future retrieval. It performs the following steps when called:</p>\n\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>module</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then <var>module</var>.[[Status]] is not <emu-const>unlinked</emu-const>.</li><li>Let <var>namespace</var> be <var>module</var>.[[Namespace]].</li><li>If <var>namespace</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>exportedNames</var> be ? <var>module</var>.GetExportedNames().</li><li>Let <var>unambiguousNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>name</var> that is an element of <var>exportedNames</var>, do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>name</var>).</li><li>If <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>, append <var>name</var> to <var>unambiguousNames</var>.</li></ol></li><li>Set <var>namespace</var> to <emu-xref aoid=\"ModuleNamespaceCreate\"><a href=\"#sec-modulenamespacecreate\">ModuleNamespaceCreate</a></emu-xref>(<var>module</var>, <var>unambiguousNames</var>).</li></ol></li><li>Return <var>namespace</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The only way GetModuleNamespace can throw is via one of the triggered <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> calls. Unresolvable names are simply excluded from the namespace at this point. They will lead to a real linking error later unless they are all ambiguous star exports that are not explicitly requested anywhere.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-meta-properties-runtime-semantics-evaluation": {"num": "12.3.12.1", "title": "#sec-meta-properties-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-meta-properties-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-meta-properties-runtime-semantics-evaluation\">#sec-meta-properties-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"NewTarget\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"ImportMeta\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f0c60de9\"><emu-t>import</emu-t><emu-t>.</emu-t><emu-t>meta</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be !&#160;<emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>Let <var>importMeta</var> be <var>module</var>.[[ImportMeta]].</li><li>If <var>importMeta</var> is <emu-const>empty</emu-const>, then<ol><li>Set <var>importMeta</var> to !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Let <var>importMetaValues</var> be !&#160;<emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>(<var>module</var>).</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>importMetaValues</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>importMeta</var>, <var>p</var>.[[Key]], <var>p</var>.[[Value]]).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"HostFinalizeImportMeta\"><a href=\"#sec-hostfinalizeimportmeta\">HostFinalizeImportMeta</a></emu-xref>(<var>importMeta</var>, <var>module</var>).</li><li>Set <var>module</var>.[[ImportMeta]] to <var>importMeta</var>.</li><li>Return <var>importMeta</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>importMeta</var>) is Object.</li><li>Return <var>importMeta</var>.</li></ol></li></ol></emu-alg>\n\n        <div id=\"excluded-sec-hostgetimportmetaproperties\"><h1><span class=\"secnum\">12.3.12.1.1</span>#sec-hostgetimportmetaproperties Runtime Semantics: HostGetImportMetaProperties ( moduleRecord )</h1>...</div><div id=\"excluded-sec-hostfinalizeimportmeta\"><h1><span class=\"secnum\">12.3.12.1.2</span>#sec-hostfinalizeimportmeta Runtime Semantics: HostFinalizeImportMeta ( importMeta, moduleRecord )</h1>...</div></emu-clause>\n    "}, "sec-string.prototype.replaceall": {"num": "21.1.3.18", "title": "#sec-string.prototype.replaceall String.prototype.replaceAll ( searchValue, replaceValue )", "html": "<emu-clause id=\"sec-string.prototype.replaceall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.replaceall\">#sec-string.prototype.replaceall</span> String.prototype.replaceAll ( <var>searchValue</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>replaceAll</code> method is called with arguments <var>searchValue</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>searchValue</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>isRegExp</var> be ?&#160;<emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>(<var>searchValue</var>).</li><li>If <var>isRegExp</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>searchValue</var>, <emu-val>\"flags\"</emu-val>).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>flags</var>).</li><li>If ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>flags</var>) does not contain <emu-val>\"g\"</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>replacer</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>searchValue</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@replace</a></emu-xref>).</li><li>If <var>replacer</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replacer</var>, <var>searchValue</var>, &#171; <var>O</var>, <var>replaceValue</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchValue</var>).</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Let <var>searchLength</var> be the length of <var>searchString</var>.</li><li>Let <var>advanceBy</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(1, <var>searchLength</var>).</li><li>Let <var>matchPositions</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>position</var> be !&#160;<emu-xref aoid=\"StringIndexOf\"><a href=\"#sec-stringindexof\">StringIndexOf</a></emu-xref>(<var>string</var>, <var>searchString</var>, 0).</li><li>Repeat, while <var>position</var> is not -1,<ol><li>Append <var>position</var> to the end of <var>matchPositions</var>.</li><li>Set <var>position</var> to !&#160;<emu-xref aoid=\"StringIndexOf\"><a href=\"#sec-stringindexof\">StringIndexOf</a></emu-xref>(<var>string</var>, <var>searchString</var>, <var>position</var> + <var>advanceBy</var>).</li></ol></li><li>Let <var>endOfLastMatch</var> be 0.</li><li>Let <var>result</var> be the empty String.</li><li>For each <var>position</var> in <var>matchPositions</var>, do<ol><li>Let <var>preserved</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>endOfLastMatch</var> to <var>position</var>.</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, &#171; <var>searchString</var>, <var>position</var>, <var>string</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replaceValue</var>) is String.</li><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>replacement</var> be !&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>searchString</var>, <var>string</var>, <var>position</var>, <var>captures</var>, <emu-val>undefined</emu-val>, <var>replaceValue</var>).</li></ol></li><li>Set <var>result</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>result</var>, <var>preserved</var>, and <var>replacement</var>.</li><li>Set <var>endOfLastMatch</var> to <var>position</var> + <var>searchLength</var>.</li></ol></li><li>If <var>endOfLastMatch</var> &lt; the length of <var>string</var>, then<ol><li>Set <var>result</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>result</var> and the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>endOfLastMatch</var>.</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.concat": {"num": "22.1.3.1", "title": "#sec-array.prototype.concat Array.prototype.concat ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.concat\">#sec-array.prototype.concat</span> Array.prototype.concat ( ...<var>items</var> )</h1>\n        <p>When the <code>concat</code> method is called with zero or more arguments, it returns an array containing the array elements of the object followed by the array elements of each argument in order.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Let <var>n</var> be 0.</li><li>Prepend <var>O</var> to <var>items</var>.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of the element.</li><li>Let <var>spreadable</var> be ?&#160;<emu-xref aoid=\"IsConcatSpreadable\"><a href=\"#sec-isconcatspreadable\">IsConcatSpreadable</a></emu-xref>(<var>E</var>).</li><li>If <var>spreadable</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>k</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>E</var>).</li><li>If <var>n</var> + <var>len</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>P</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>exists</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>subElement</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>subElement</var>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>NOTE: <var>E</var> is added as a single item rather than spread.</li><li>If <var>n</var> &#8805; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>E</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li id=\"step-array-proto-concat-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>n</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property in step <emu-xref href=\"#step-array-proto-concat-set-length\"><a href=\"#step-array-proto-concat-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-concat-set-length\">#step-array-proto-concat-set-length</a></emu-xref> is necessary to ensure that its value is correct in situations where the trailing elements of the result Array are not present.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-isconcatspreadable\"><h1><span class=\"secnum\">22.1.3.1.1</span>#sec-isconcatspreadable Runtime Semantics: IsConcatSpreadable ( O )</h1>...</div></emu-clause>\n\n      "}, "sec-ordinarytoprimitive": {"num": "7.1.1.1", "title": "#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )", "html": "<emu-clause id=\"sec-ordinarytoprimitive\" aoid=\"OrdinaryToPrimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarytoprimitive\">#sec-ordinarytoprimitive</span> OrdinaryToPrimitive ( <var>O</var>, <var>hint</var> )</h1>\n        <p>The abstract operation OrdinaryToPrimitive takes arguments <var>O</var> and <var>hint</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>hint</var>) is String and its value is either <emu-val>\"string\"</emu-val> or <emu-val>\"number\"</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"string\"</emu-val>, then<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"toString\"</emu-val>, <emu-val>\"valueOf\"</emu-val> &#187;.</li></ol></li><li>Else,<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"valueOf\"</emu-val>, <emu-val>\"toString\"</emu-val> &#187;.</li></ol></li><li>For each <var>name</var> in <var>methodNames</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Let <var>method</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>method</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>O</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li></ol></li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys": {"num": "9.5.11", "title": "#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n      <p>When the [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"ownKeys\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[OwnPropertyKeys]]().</li></ol></li><li>Let <var>trapResultArray</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var> &#187;).</li><li>Let <var>trapResult</var> be ?&#160;<emu-xref aoid=\"CreateListFromArrayLike\"><a href=\"#sec-createlistfromarraylike\">CreateListFromArrayLike</a></emu-xref>(<var>trapResultArray</var>, &#171; String, Symbol &#187;).</li><li>If <var>trapResult</var> contains any duplicate entries, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>targetKeys</var> be ? <var>target</var>.[[OwnPropertyKeys]]().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing only String and Symbol values.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> contains no duplicate entries.</li><li>Let <var>targetConfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>targetNonconfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>targetKeys</var>, do<ol><li>Let <var>desc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>Append <var>key</var> as an element of <var>targetNonconfigurableKeys</var>.</li></ol></li><li>Else,<ol><li>Append <var>key</var> as an element of <var>targetConfigurableKeys</var>.</li></ol></li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val> and <var>targetNonconfigurableKeys</var> is empty, then<ol><li>Return <var>trapResult</var>.</li></ol></li><li>Let <var>uncheckedResultKeys</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> which is a copy of <var>trapResult</var>.</li><li>For each <var>key</var> that is an element of <var>targetNonconfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val>, return <var>trapResult</var>.</li><li>For each <var>key</var> that is an element of <var>targetConfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>uncheckedResultKeys</var> is not empty, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>trapResult</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[OwnPropertyKeys]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[OwnPropertyKeys]] is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> contains no duplicate entries.\n          </li>\n          <li>\n            The Type of each result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> element is either String or Symbol.\n          </li>\n          <li>\n            The result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain the keys of all non-configurable own properties of the target object.\n          </li>\n          <li>\n            If the target object is not extensible, then the result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain all the keys of the own properties of the target object and no other values.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-resolveexport": {"num": "15.2.1.17.3", "title": "#sec-resolveexport ResolveExport ( exportName [ , resolveSet ] ) Concrete Method", "html": "<emu-clause id=\"sec-resolveexport\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolveexport\">#sec-resolveexport</span> ResolveExport ( <var>exportName</var> [ , <var>resolveSet</var> ] ) Concrete Method</h1>\n          <p>The ResolveExport concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>ResolveExport attempts to resolve an imported binding to the actual defining module and local binding name. The defining module may be the module represented by the <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> this method was invoked on or some other module that is imported by that module. The parameter <var>resolveSet</var> is used to detect unresolved circular import/export paths. If a pair consisting of specific <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> and <var>exportName</var> is reached that is already in <var>resolveSet</var>, an import circularity has been encountered. Before recursively calling ResolveExport, a pair consisting of <var>module</var> and <var>exportName</var> is added to <var>resolveSet</var>.</p>\n          <p>If a defining module is found, a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]], [[BindingName]] } is returned. This record identifies the resolved binding of the originally requested export, unless this is the export of a namespace with no local binding. In this case, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. If no definition was found or the request is found to be circular, <emu-val>null</emu-val> is returned. If the request is found to be ambiguous, the string <emu-val>\"ambiguous\"</emu-val> is returned.</p>\n          <p>This abstract method performs the following steps:</p>\n\n          <emu-alg><ol><li>If <var>resolveSet</var> is not present, set <var>resolveSet</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolveSet</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Module]], [[ExportName]] }.</li><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Module]], [[ExportName]] } <var>r</var> in <var>resolveSet</var>, do<ol><li>If <var>module</var> and <var>r</var>.[[Module]] are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>r</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is a circular import request.</li><li>Return <emu-val>null</emu-val>.</li></ol></li></ol></li><li>Append the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Module]]: <var>module</var>, [[ExportName]]: <var>exportName</var> } to <var>resolveSet</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> in <var>module</var>.[[LocalExportEntries]], do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>e</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> provides the direct binding for this export.</li><li>Return <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]]: <var>module</var>, [[BindingName]]: <var>e</var>.[[LocalName]] }.</li></ol></li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> in <var>module</var>.[[IndirectExportEntries]], do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>e</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li>Let <var>importedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>If <var>e</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> does not provide the direct binding for this export.</li><li>Return <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]]: <var>importedModule</var>, [[BindingName]]: <emu-val>\"*namespace*\"</emu-val> }.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> imports a specific binding for this export.</li><li>Return <var>importedModule</var>.ResolveExport(<var>e</var>.[[ImportName]], <var>resolveSet</var>).</li></ol></li></ol></li></ol></li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <emu-val>\"default\"</emu-val>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: A <code>default</code> export was not explicitly defined by this module.</li><li>Return <emu-val>null</emu-val>.</li><li>NOTE: A <code>default</code> export cannot be provided by an <code>export *</code> or <code>export * from \"mod\"</code> declaration.</li></ol></li><li>Let <var>starResolution</var> be <emu-val>null</emu-val>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> in <var>module</var>.[[StarExportEntries]], do<ol><li>Let <var>importedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>exportName</var>, <var>resolveSet</var>).</li><li>If <var>resolution</var> is <emu-val>\"ambiguous\"</emu-val>, return <emu-val>\"ambiguous\"</emu-val>.</li><li>If <var>resolution</var> is not <emu-val>null</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>If <var>starResolution</var> is <emu-val>null</emu-val>, set <var>starResolution</var> to <var>resolution</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There is more than one <code>*</code> import that includes the requested name.</li><li>If <var>resolution</var>.[[Module]] and <var>starResolution</var>.[[Module]] are not the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>resolution</var>.[[BindingName]], <var>starResolution</var>.[[BindingName]]) is <emu-val>false</emu-val>, return <emu-val>\"ambiguous\"</emu-val>.</li></ol></li></ol></li></ol></li><li>Return <var>starResolution</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-weakref-execution": {"num": "8.9.3", "title": "#sec-weakref-execution Execution", "html": "<emu-clause id=\"sec-weakref-execution\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakref-execution\">#sec-weakref-execution</span> Execution</h1>\n\n      <p>At any time, if a set of objects <var>S</var> is not <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>, an ECMAScript implementation may perform the following steps atomically:</p>\n\n      <emu-alg><ol><li>For each <var>obj</var> of <var>S</var>, do<ol><li>For each <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> <var>ref</var> such that <var>ref</var>.[[WeakRefTarget]] is <var>obj</var>, do<ol><li>Set <var>ref</var>.[[WeakRefTarget]] to <emu-const>empty</emu-const>.</li></ol></li><li>For each <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> <var>fg</var> such that <var>fg</var>.[[Cells]] contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>cell</var> such that <var>cell</var>.[[WeakRefTarget]] is <var>obj</var>, do<ol><li>Set <var>cell</var>.[[WeakRefTarget]] to <emu-const>empty</emu-const>.</li><li>Optionally, perform !&#160;<emu-xref aoid=\"HostEnqueueFinalizationRegistryCleanupJob\"><a href=\"#sec-host-cleanup-finalization-registry\">HostEnqueueFinalizationRegistryCleanupJob</a></emu-xref>(<var>fg</var>).</li></ol></li><li>For each WeakMap <var>map</var> such that <var>map</var>.[[WeakMapData]] contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>r</var> such that <var>r</var>.[[Key]] is <var>obj</var>, do<ol><li>Set <var>r</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>r</var>.[[Value]] to <emu-const>empty</emu-const>.</li></ol></li><li>For each WeakSet <var>set</var> such that <var>set</var>.[[WeakSetData]] contains <var>obj</var>, do<ol><li>Replace the element of <var>set</var>.[[WeakSetData]] whose value is <var>obj</var> with an element whose value is <emu-const>empty</emu-const>.</li></ol></li></ol></li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Together with the definition of liveness, this clause prescribes legal optimizations that an implementation may apply regarding WeakRefs.</p>\n\n        <p>It is possible to access an object without observing its identity. Optimizations such as dead variable elimination and scalar replacement on properties of non-escaping objects whose identity is not observed are allowed. These optimizations are thus allowed to observably empty WeakRefs that point to such objects.</p>\n\n        <p>On the other hand, if an object's identity is observable, and that object is in the [[WeakRefTarget]] internal slot of a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref>, optimizations such as rematerialization that observably empty the <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> are prohibited.</p>\n\n        <p>Because calling <emu-xref aoid=\"HostEnqueueFinalizationRegistryCleanupJob\"><a href=\"#sec-host-cleanup-finalization-registry\">HostEnqueueFinalizationRegistryCleanupJob</a></emu-xref> is optional, registered objects in a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> do not necessarily hold that <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>. Implementations may omit <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> callbacks for any reason, e.g., if the <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> itself becomes dead, or if the application is shutting down.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Implementations are not obligated to empty WeakRefs for maximal sets of non-<emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> objects.</p>\n        <p>If an implementation chooses a non-<emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> set <var>S</var> in which to empty WeakRefs, it must empty WeakRefs for all objects in <var>S</var> simultaneously. In other words, an implementation must not empty a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> pointing to an object <var>obj</var> without emptying out other WeakRefs that, if not emptied, could result in an execution that observes the Object value of <var>obj</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-set.prototype.clear": {"num": "23.2.3.2", "title": "#sec-set.prototype.clear Set.prototype.clear ( )", "html": "<emu-clause id=\"sec-set.prototype.clear\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.clear\">#sec-set.prototype.clear</span> Set.prototype.clear ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The existing [[SetData]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is preserved because there may be existing Set Iterator objects that are suspended midway through iterating over that <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.delete": {"num": "23.4.3.3", "title": "#sec-weakset.prototype.delete WeakSet.prototype.delete ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.delete\">#sec-weakset.prototype.delete</span> WeakSet.prototype.delete ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-source-text-module-record-initialize-environment": {"num": "15.2.1.17.4", "title": "#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-initialize-environment\" aoid=\"InitializeEnvironment\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-initialize-environment\">#sec-source-text-module-record-initialize-environment</span> InitializeEnvironment ( ) Concrete Method</h1>\n          <p>The InitializeEnvironment concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> abstract method.</p>\n          <p>This abstract method performs the following steps:</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> in <var>module</var>.[[IndirectExportEntries]], do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>e</var>.[[ExportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: All named exports from <var>module</var> are resolvable.</li><li>Let <var>realm</var> be <var>module</var>.[[Realm]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is not <emu-val>undefined</emu-val>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewModuleEnvironment\"><a href=\"#sec-newmoduleenvironment\">NewModuleEnvironment</a></emu-xref>(<var>realm</var>.[[GlobalEnv]]).</li><li>Set <var>module</var>.[[Environment]] to <var>env</var>.</li><li>For each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> <var>in</var> in <var>module</var>.[[ImportEntries]], do<ol><li>Let <var>importedModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>in</var>.[[ModuleRequest]]).</li><li>NOTE: The above call cannot fail because imported module requests are a subset of <var>module</var>.[[RequestedModules]], and these have been resolved earlier in this algorithm.</li><li>If <var>in</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>importedModule</var>).</li><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>in</var>.[[ImportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>resolution</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>resolution</var>.[[Module]]).</li><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Call <var>env</var>.CreateImportBinding(<var>in</var>.[[LocalName]], <var>resolution</var>.[[Module]], <var>resolution</var>.[[BindingName]]).</li></ol></li></ol></li></ol></li><li>Let <var>moduleContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>moduleContext</var> to <emu-val>null</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Realm]] is not <emu-val>undefined</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>moduleContext</var> to <var>module</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>moduleContext</var> to <var>module</var>.</li><li>Set the VariableEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Set the LexicalEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Set <var>module</var>.[[Context]] to <var>moduleContext</var>.</li><li>Push <var>moduleContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>moduleContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>module</var>.[[ECMAScriptCode]].</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> in <var>varDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If <var>dn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>dn</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>dn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li>Call <var>env</var>.InitializeBinding(<var>dn</var>, <var>fo</var>).</li></ol></li></ol></li></ol></li><li>Remove <var>moduleContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-forinofheadevaluation": {"num": "13.7.5.12", "title": "#sec-runtime-semantics-forinofheadevaluation Runtime Semantics: ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )", "html": "<emu-clause id=\"sec-runtime-semantics-forinofheadevaluation\" oldids=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\" aoid=\"ForIn/OfHeadEvaluation\"><span id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forinofheadevaluation\">#sec-runtime-semantics-forinofheadevaluation</span> Runtime Semantics: ForIn/OfHeadEvaluation ( <var>uninitializedBoundNames</var>, <var>expr</var>, <var>iterationKind</var> )</h1>\n        <p>The abstract operation ForIn/OfHeadEvaluation takes arguments <var>uninitializedBoundNames</var>, <var>expr</var>, and <var>iterationKind</var> (either <emu-const>enumerate</emu-const>, <emu-const>iterate</emu-const>, or <emu-const>async-iterate</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>uninitializedBoundNames</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>uninitializedBoundNames</var> has no duplicate entries.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>For each string <var>name</var> in <var>uninitializedBoundNames</var>, do<ol><li>Perform ! <var>newEnv</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li></ol></li><li>Let <var>exprRef</var> be the result of evaluating <var>expr</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>If <var>exprValue</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>(<var>obj</var>).</li><li>Let <var>nextMethod</var> be !&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <emu-val>\"next\"</emu-val>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const> or <emu-const>async-iterate</emu-const>.</li><li>If <var>iterationKind</var> is <emu-const>async-iterate</emu-const>, let <var>iteratorHint</var> be <emu-const>async</emu-const>.</li><li>Else, let <var>iteratorHint</var> be <emu-const>sync</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>exprValue</var>, <var>iteratorHint</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-event-set": {"num": "28.5.1", "title": "#sec-event-set EventSet ( execution )", "html": "<emu-clause id=\"sec-event-set\" aoid=\"EventSet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-event-set\">#sec-event-set</span> EventSet ( <var>execution</var> )</h1>\n      <p>The abstract operation EventSet takes argument <var>execution</var> (a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>events</var> be an empty Set.</li><li>For each <emu-xref href=\"#sec-agent-event-records\"><a href=\"#sec-agent-event-records\">Agent Events Record</a></emu-xref> <var>aer</var> in <var>execution</var>.[[EventsRecords]], do<ol><li>For each event <var>E</var> in <var>aer</var>.[[EventList]], do<ol><li>Add <var>E</var> to <var>events</var>.</li></ol></li></ol></li><li>Return <var>events</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getownpropertykeys": {"num": "19.1.2.11.1", "title": "#sec-getownpropertykeys Runtime Semantics: GetOwnPropertyKeys ( O, type )", "html": "<emu-clause id=\"sec-getownpropertykeys\" aoid=\"GetOwnPropertyKeys\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getownpropertykeys\">#sec-getownpropertykeys</span> Runtime Semantics: GetOwnPropertyKeys ( <var>O</var>, <var>type</var> )</h1>\n          <p>The abstract operation GetOwnPropertyKeys takes arguments <var>O</var> and <var>type</var> (either <emu-const>string</emu-const> or <emu-const>symbol</emu-const>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>keys</var> be ? <var>obj</var>.[[OwnPropertyKeys]]().</li><li>Let <var>nameList</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>nextKey</var> of <var>keys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextKey</var>) is Symbol and <var>type</var> is <emu-const>symbol</emu-const> or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextKey</var>) is String and <var>type</var> is <emu-const>string</emu-const>, then<ol><li>Append <var>nextKey</var> as the last element of <var>nameList</var>.</li></ol></li></ol></li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-encode": {"num": "18.2.6.1.1", "title": "#sec-encode Runtime Semantics: Encode ( string, unescapedSet )", "html": "<emu-clause id=\"sec-encode\" aoid=\"Encode\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-encode\">#sec-encode</span> Runtime Semantics: Encode ( <var>string</var>, <var>unescapedSet</var> )</h1>\n          <p>The abstract operation Encode takes arguments <var>string</var> (a String) and <var>unescapedSet</var> (a String). It performs URI encoding and escaping. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>strLen</var> be the number of code units in <var>string</var>.</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> equals <var>strLen</var>, return <var>R</var>.</li><li>Let <var>C</var> be the code unit at index <var>k</var> within <var>string</var>.</li><li>If <var>C</var> is in <var>unescapedSet</var>, then<ol><li>Set <var>k</var> to <var>k</var> + 1.</li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>string</var>, <var>k</var>).</li><li>If <var>cp</var>.[[IsUnpairedSurrogate]] is <emu-val>true</emu-val>, throw a <emu-val>URIError</emu-val> exception.</li><li>Set <var>k</var> to <var>k</var> + <var>cp</var>.[[CodeUnitCount]].</li><li>Let <var>Octets</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of octets resulting by applying the UTF-8 transformation to <var>cp</var>.[[CodePoint]].</li><li>For each element <var>octet</var> of <var>Octets</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li><var>R</var></li><li><emu-val>\"%\"</emu-val></li><li>the String representation of <var>octet</var>, formatted as a two-digit uppercase hexadecimal number, padded to the left with a zero if necessary</li></ul></li></ol></li></ol></li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-composewriteeventbytes": {"num": "28.5.4", "title": "#sec-composewriteeventbytes ComposeWriteEventBytes ( execution, byteIndex, Ws )", "html": "<emu-clause id=\"sec-composewriteeventbytes\" aoid=\"ComposeWriteEventBytes\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-composewriteeventbytes\">#sec-composewriteeventbytes</span> ComposeWriteEventBytes ( <var>execution</var>, <var>byteIndex</var>, <var>Ws</var> )</h1>\n      <p>The abstract operation ComposeWriteEventBytes takes arguments <var>execution</var> (a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>), <var>byteIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>Ws</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>byteLocation</var> be <var>byteIndex</var>.</li><li>Let <var>bytesRead</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>W</var> of <var>Ws</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> has <var>byteLocation</var> in its range.</li><li>Let <var>payloadIndex</var> be <var>byteLocation</var> - <var>W</var>.[[ByteIndex]].</li><li>If <var>W</var> is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> event, then<ol><li>Let <var>byte</var> be <var>W</var>.[[Payload]][<var>payloadIndex</var>].</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event.</li><li>Let <var>bytes</var> be <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref>(<var>execution</var>, <var>W</var>).</li><li>Let <var>bytesModified</var> be <var>W</var>.[[ModifyOp]](<var>bytes</var>, <var>W</var>.[[Payload]]).</li><li>Let <var>byte</var> be <var>bytesModified</var>[<var>payloadIndex</var>].</li></ol></li><li>Append <var>byte</var> to <var>bytesRead</var>.</li><li>Set <var>byteLocation</var> to <var>byteLocation</var> + 1.</li></ol></li><li>Return <var>bytesRead</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>The read-modify-write modification [[ModifyOp]] is given by the function properties on the Atomics object that introduce <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>This abstract operation composes a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of write events into a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. It is used in the event semantics of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getexportednames": {"num": "15.2.1.17.2", "title": "#sec-getexportednames GetExportedNames ( [ exportStarSet ] ) Concrete Method", "html": "<emu-clause id=\"sec-getexportednames\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getexportednames\">#sec-getexportednames</span> GetExportedNames ( [ <var>exportStarSet</var> ] ) Concrete Method</h1>\n          <p>The GetExportedNames concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>exportStarSet</var> is not present, set <var>exportStarSet</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>exportStarSet</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Source Text Module Records.</li><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>If <var>exportStarSet</var> contains <var>module</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: We've reached the starting point of an <code>export *</code> circularity.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></li><li>Append <var>module</var> to <var>exportStarSet</var>.</li><li>Let <var>exportedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> in <var>module</var>.[[LocalExportEntries]], do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> provides the direct binding for this export.</li><li>Append <var>e</var>.[[ExportName]] to <var>exportedNames</var>.</li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> in <var>module</var>.[[IndirectExportEntries]], do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> imports a specific binding for this export.</li><li>Append <var>e</var>.[[ExportName]] to <var>exportedNames</var>.</li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> in <var>module</var>.[[StarExportEntries]], do<ol><li>Let <var>requestedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>Let <var>starNames</var> be ? <var>requestedModule</var>.GetExportedNames(<var>exportStarSet</var>).</li><li>For each element <var>n</var> of <var>starNames</var>, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>n</var>, <emu-val>\"default\"</emu-val>) is <emu-val>false</emu-val>, then<ol><li>If <var>n</var> is not an element of <var>exportedNames</var>, then<ol><li>Append <var>n</var> to <var>exportedNames</var>.</li></ol></li></ol></li></ol></li></ol></li><li>Return <var>exportedNames</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>GetExportedNames does not filter out or throw an exception for names that have ambiguous star export bindings.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-objectdefineproperties": {"num": "19.1.2.3.1", "title": "#sec-objectdefineproperties Runtime Semantics: ObjectDefineProperties ( O, Properties )", "html": "<emu-clause id=\"sec-objectdefineproperties\" aoid=\"ObjectDefineProperties\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-objectdefineproperties\">#sec-objectdefineproperties</span> Runtime Semantics: ObjectDefineProperties ( <var>O</var>, <var>Properties</var> )</h1>\n          <p>The abstract operation ObjectDefineProperties takes arguments <var>O</var> and <var>Properties</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>props</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>Properties</var>).</li><li>Let <var>keys</var> be ? <var>props</var>.[[OwnPropertyKeys]]().</li><li>Let <var>descriptors</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>nextKey</var> of <var>keys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Let <var>propDesc</var> be ? <var>props</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>propDesc</var> is not <emu-val>undefined</emu-val> and <var>propDesc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>descObj</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>props</var>, <var>nextKey</var>).</li><li>Let <var>desc</var> be ?&#160;<emu-xref aoid=\"ToPropertyDescriptor\"><a href=\"#sec-topropertydescriptor\">ToPropertyDescriptor</a></emu-xref>(<var>descObj</var>).</li><li>Append the pair (a two element <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>) consisting of <var>nextKey</var> and <var>desc</var> to the end of <var>descriptors</var>.</li></ol></li></ol></li><li>For each <var>pair</var> from <var>descriptors</var> in list order, do<ol><li>Let <var>P</var> be the first element of <var>pair</var>.</li><li>Let <var>desc</var> be the second element of <var>pair</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>P</var>, <var>desc</var>).</li></ol></li><li>Return <var>O</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-moduledeclarationlinking": {"num": "15.2.1.16.1", "title": "#sec-moduledeclarationlinking Link ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduledeclarationlinking\" oldids=\"sec-moduledeclarationinstantiation\"><span id=\"sec-moduledeclarationinstantiation\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduledeclarationlinking\">#sec-moduledeclarationlinking</span> Link ( ) Concrete Method</h1>\n          <p>The Link concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>On success, Link transitions this module's [[Status]] from <emu-const>unlinked</emu-const> to <emu-const>linked</emu-const>. On failure, an exception is thrown and this module's [[Status]] remains <emu-const>unlinked</emu-const>.</p>\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>):</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is not <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>linking</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>unlinked</emu-const>.</li><li>Set <var>m</var>.[[Environment]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSIndex]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSAncestorIndex]] to <emu-val>undefined</emu-val>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-InnerModuleLinking\"><h1><span class=\"secnum\">15.2.1.16.1.1</span>#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-set.prototype.has": {"num": "23.2.3.7", "title": "#sec-set.prototype.has Set.prototype.has ( value )", "html": "<emu-clause id=\"sec-set.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.has\">#sec-set.prototype.has</span> Set.prototype.has ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-innermoduleevaluation": {"num": "15.2.1.16.2.1", "title": "#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )", "html": "<emu-clause id=\"sec-innermoduleevaluation\" aoid=\"InnerModuleEvaluation\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-innermoduleevaluation\">#sec-innermoduleevaluation</span> InnerModuleEvaluation ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleEvaluation takes arguments <var>module</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var>. It is used by Evaluate to perform the actual evaluation process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as <var>module</var>'s [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the same way as in <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Evaluate().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const>, then<ol><li>If <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>, return <var>index</var>.</li><li>Otherwise, return <var>module</var>.[[EvaluationError]].</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluating</emu-const>, return <var>index</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>evaluating</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>NOTE: Link must be completed successfully prior to invoking this method, so every requested module is guaranteed to resolve successfully.</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>evaluating</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-globaldeclarationinstantiation": {"num": "15.1.11", "title": "#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> Runtime Semantics: GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>The abstract operation GlobalDeclarationInstantiation takes arguments <var>script</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the LexicallyDeclaredNames of <var>script</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>script</var>.</li><li>For each <var>name</var> in <var>lexNames</var>, do<ol><li>If <var>env</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>env</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>script</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>env</var>.</li><li>Perform ? <var>env</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-get-set.prototype.size": {"num": "23.2.3.9", "title": "#sec-get-set.prototype.size get Set.prototype.size", "html": "<emu-clause id=\"sec-get-set.prototype.size\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-set.prototype.size\">#sec-get-set.prototype.size</span> get Set.prototype.size</h1>\n        <p><code>Set.prototype.size</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>Let <var>count</var> be 0.</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, set <var>count</var> to <var>count</var> + 1.</li></ol></li><li>Return <var>count</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.has": {"num": "23.4.3.4", "title": "#sec-weakset.prototype.has WeakSet.prototype.has ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.has\">#sec-weakset.prototype.has</span> WeakSet.prototype.has ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.has": {"num": "23.1.3.7", "title": "#sec-map.prototype.has Map.prototype.has ( key )", "html": "<emu-clause id=\"sec-map.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.has\">#sec-map.prototype.has</span> Map.prototype.has ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.has": {"num": "23.3.3.4", "title": "#sec-weakmap.prototype.has WeakMap.prototype.has ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.has\">#sec-weakmap.prototype.has</span> WeakMap.prototype.has ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.clear": {"num": "23.1.3.1", "title": "#sec-map.prototype.clear Map.prototype.clear ( )", "html": "<emu-clause id=\"sec-map.prototype.clear\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.clear\">#sec-map.prototype.clear</span> Map.prototype.clear ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The existing [[MapData]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is preserved because there may be existing Map Iterator objects that are suspended midway through iterating over that <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.get": {"num": "23.3.3.3", "title": "#sec-weakmap.prototype.get WeakMap.prototype.get ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.get\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.get\">#sec-weakmap.prototype.get</span> WeakMap.prototype.get ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>undefined</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <var>p</var>.[[Value]].</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-codepointstostring": {"num": "10.1.2", "title": "#sec-codepointstostring Static Semantics: CodePointsToString ( text )", "html": "<emu-clause id=\"sec-codepointstostring\" aoid=\"CodePointsToString\" oldids=\"sec-utf16encode\"><span id=\"sec-utf16encode\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-codepointstostring\">#sec-codepointstostring</span> Static Semantics: CodePointsToString ( <var>text</var> )</h1>\n      <p>The abstract operation CodePointsToString takes argument <var>text</var> (a sequence of Unicode code points). It converts <var>text</var> into a String value, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>result</var> be the empty String.</li><li>For each code point <var>cp</var> in <var>text</var>, do<ol><li>Set <var>result</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>result</var> and !&#160;<emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>cp</var>).</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-moduleevaluation": {"num": "15.2.1.16.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>Evaluate transitions this module's [[Status]] from <emu-const>linked</emu-const> to <emu-const>evaluated</emu-const>.</p>\n          <p>If execution results in an exception, that exception is recorded in the [[EvaluationError]] field and rethrown by future invocations of Evaluate.</p>\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>):</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This call to Evaluate is not happening at the same time as another call to Evaluate within the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</li><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>evaluating</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-runtime-semantics-caseblockevaluation": {"num": "13.12.9", "title": "#sec-runtime-semantics-caseblockevaluation Runtime Semantics: CaseBlockEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-caseblockevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-caseblockevaluation\">#sec-runtime-semantics-caseblockevaluation</span> Runtime Semantics: CaseBlockEvaluation</h1>\n      <p>With parameter <var>input</var>.</p>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"11eac196\"><emu-t>{</emu-t><emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>A</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> items in <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>, in source text order.</li><li>Let <var>found</var> be <emu-val>false</emu-val>.</li><li>For each <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var> in <var>A</var>, do<ol><li>If <var>found</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>found</var> to ?&#160;<emu-xref aoid=\"CaseClauseIsSelected\"><a href=\"#sec-runtime-semantics-caseclauseisselected\">CaseClauseIsSelected</a></emu-xref>(<var>C</var>, <var>input</var>).</li></ol></li><li>If <var>found</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>R</var> be the result of evaluating <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"503b8396\"><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>A</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> items in the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>, in source text order.</li></ol></li><li>Else,<ol><li>Let <var>A</var> be &#171; &#187;.</li></ol></li><li>Let <var>found</var> be <emu-val>false</emu-val>.</li><li>For each <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var> in <var>A</var>, do<ol><li>If <var>found</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>found</var> to ?&#160;<emu-xref aoid=\"CaseClauseIsSelected\"><a href=\"#sec-runtime-semantics-caseclauseisselected\">CaseClauseIsSelected</a></emu-xref>(<var>C</var>, <var>input</var>).</li></ol></li><li>If <var>found</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>R</var> be the result of evaluating <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li></ol></li><li>Let <var>foundInB</var> be <emu-val>false</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>B</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> items in the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>, in source text order.</li></ol></li><li>Else,<ol><li>Let <var>B</var> be &#171; &#187;.</li></ol></li><li>If <var>found</var> is <emu-val>false</emu-val>, then<ol><li>For each <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var> in <var>B</var>, do<ol><li>If <var>foundInB</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>foundInB</var> to ?&#160;<emu-xref aoid=\"CaseClauseIsSelected\"><a href=\"#sec-runtime-semantics-caseclauseisselected\">CaseClauseIsSelected</a></emu-xref>(<var>C</var>, <var>input</var>).</li></ol></li><li>If <var>foundInB</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>R</var> be the result of evaluating <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li></ol></li></ol></li><li>If <var>foundInB</var> is <emu-val>true</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>R</var> be the result of evaluating <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li><li>NOTE: The following is another complete iteration of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var> in <var>B</var>, do<ol><li>Let <var>R</var> be the result of evaluating <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-internalizejsonproperty": {"num": "24.5.1.1", "title": "#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name, reviver )", "html": "<emu-clause id=\"sec-internalizejsonproperty\" aoid=\"InternalizeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-internalizejsonproperty\">#sec-internalizejsonproperty</span> Runtime Semantics: InternalizeJSONProperty ( <var>holder</var>, <var>name</var>, <var>reviver</var> )</h1>\n        <p>The abstract operation InternalizeJSONProperty takes arguments <var>holder</var> (an Object), <var>name</var> (a String), and <var>reviver</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This algorithm intentionally does not throw an exception if either [[Delete]] or <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> return <emu-val>false</emu-val>.</p>\n        </div></emu-note>\n        <emu-alg><ol><li>Let <var>val</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is Object, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>val</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>I</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>val</var>).</li><li>Repeat, while <var>I</var> &lt; <var>len</var>,<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>reviver</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>newElement</var>).</li></ol></li><li>Set <var>I</var> to <var>I</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>keys</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>val</var>, <emu-const>key</emu-const>).</li><li>For each String <var>P</var> in <var>keys</var>, do<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>reviver</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>newElement</var>).</li></ol></li></ol></li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>reviver</var>, <var>holder</var>, &#171; <var>name</var>, <var>val</var> &#187;).</li></ol></emu-alg>\n        <p>It is not permitted for a conforming implementation of <code>JSON.parse</code> to extend the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by defining a different parse function.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.14", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b8ea6aa5\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be %Object.prototype%.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(...args) { <span class=\"hljs-keyword\">super</span>(...args); }</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>() {}</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be ! DefineMethod of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>m</var> in order from <var>methods</var>, do<ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-string.fromcharcode": {"num": "21.1.2.1", "title": "#sec-string.fromcharcode String.fromCharCode ( ...codeUnits )", "html": "<emu-clause id=\"sec-string.fromcharcode\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcharcode\">#sec-string.fromcharcode</span> String.fromCharCode ( ...<var>codeUnits</var> )</h1>\n        <p>The <code>String.fromCharCode</code> function may be called with any number of arguments which form the rest parameter <var>codeUnits</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>length</var> be the number of elements in <var>codeUnits</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var>,<ol><li>Let <var>next</var> be <var>codeUnits</var>[<var>nextIndex</var>].</li><li>Let <var>nextCU</var> be ?&#160;<emu-xref aoid=\"ToUint16\"><a href=\"#sec-touint16\">ToUint16</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextCU</var> to the end of <var>elements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is 0, the empty String is returned.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCharCode</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-evaldeclarationinstantiation": {"num": "18.2.1.3", "title": "#sec-evaldeclarationinstantiation Runtime Semantics: EvalDeclarationInstantiation ( body, varEnv, lexEnv, strict )", "html": "<emu-clause id=\"sec-evaldeclarationinstantiation\" aoid=\"EvalDeclarationInstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</span> Runtime Semantics: EvalDeclarationInstantiation ( <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strict</var> )</h1>\n        <p>The abstract operation EvalDeclarationInstantiation takes arguments <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, and <var>strict</var>. It performs the following steps when called:</p>\n        <!--\n          WARNING: If you add, remove, rename, or repurpose any variable names\n                   within this algorithm, you may need to update\n                   #sec-web-compat-evaldeclarationinstantiation and\n                   #sec-variablestatements-in-catch-blocks accordingly.\n        -->\n        <emu-alg><ol><li>Let <var>varNames</var> be the VarDeclaredNames of <var>body</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>body</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: <code>eval</code> will not create a global var declaration that would be shadowed by a global lexical declaration.</li></ol></li></ol></li><li>Let <var>thisEnv</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisEnv</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisEnv</var> is not an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then<ol><li>NOTE: The environment of with statements cannot contain any lexical declaration so it doesn't need to be checked for var/let hoisting conflicts.</li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>thisEnv</var>.HasBinding(<var>name</var>) is <emu-val>true</emu-val>, then<ol><li id=\"step-evaldeclarationinstantiation-throw-duplicate-binding\">Throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: Annex <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref> defines alternate semantics for the above step.</li></ol></li><li>NOTE: A <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> will not hoist var declaration over a like-named lexical declaration.</li></ol></li></ol></li><li>Set <var>thisEnv</var> to <var>thisEnv</var>.[[OuterEnv]].</li></ol></li></ol></li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li id=\"step-evaldeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-evaldeclarationinstantiation\"><a href=\"#sec-web-compat-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Let <var>vnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li id=\"step-evaldeclarationinstantiation-post-validation\">NOTE: No abnormal terminations occur after this algorithm step unless <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> and the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>body</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>fn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnv</var>.CreateMutableBinding(<var>fn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step <emu-xref href=\"#step-evaldeclarationinstantiation-post-validation\"><a href=\"#step-evaldeclarationinstantiation-post-validation\" class=\"excluded-xref\" excluded-id=\"step-evaldeclarationinstantiation-post-validation\">#step-evaldeclarationinstantiation-post-validation</a></emu-xref>.</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>vn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnv</var>.CreateMutableBinding(<var>vn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step <emu-xref href=\"#step-evaldeclarationinstantiation-post-validation\"><a href=\"#step-evaldeclarationinstantiation-post-validation\" class=\"excluded-xref\" excluded-id=\"step-evaldeclarationinstantiation-post-validation\">#step-evaldeclarationinstantiation-post-validation</a></emu-xref>.</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>vn</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative version of this algorithm is described in <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-copydataproperties": {"num": "7.3.25", "title": "#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )", "html": "<emu-clause id=\"sec-copydataproperties\" aoid=\"CopyDataProperties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-copydataproperties\">#sec-copydataproperties</span> CopyDataProperties ( <var>target</var>, <var>source</var>, <var>excludedItems</var> )</h1>\n      <p>The abstract operation CopyDataProperties takes arguments <var>target</var>, <var>source</var>, and <var>excludedItems</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>excludedItems</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of property keys.</li><li>If <var>source</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>target</var>.</li><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Let <var>excluded</var> be <emu-val>false</emu-val>.</li><li>For each element <var>e</var> of <var>excludedItems</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>nextKey</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>excluded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>excluded</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>target</var>, <var>nextKey</var>, <var>propValue</var>).</li></ol></li></ol></li></ol></li><li>Return <var>target</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The target passed in here is always a newly created object which is not directly accessible in case of an error being thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-coherent-reads": {"num": "28.7.2", "title": "#sec-coherent-reads Coherent Reads", "html": "<emu-clause id=\"sec-coherent-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-coherent-reads\">#sec-coherent-reads</span> Coherent Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has coherent reads if the following abstract operation returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>Let <var>Ws</var> be <var>execution</var>.[[ReadsBytesFrom]](<var>R</var>).</li><li>Let <var>byteLocation</var> be <var>R</var>.[[ByteIndex]].</li><li>For each element <var>W</var> of <var>Ws</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If (<var>R</var>, <var>W</var>) is in <var>execution</var>.[[HappensBefore]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>If there is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>V</var> that has <var>byteLocation</var> in its range such that the pairs (<var>W</var>, <var>V</var>) and (<var>V</var>, <var>R</var>) are in <var>execution</var>.[[HappensBefore]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>Set <var>byteLocation</var> to <var>byteLocation</var> + 1.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-triggerpromisereactions": {"num": "26.6.1.8", "title": "#sec-triggerpromisereactions TriggerPromiseReactions ( reactions, argument )", "html": "<emu-clause id=\"sec-triggerpromisereactions\" aoid=\"TriggerPromiseReactions\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-triggerpromisereactions\">#sec-triggerpromisereactions</span> TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )</h1>\n        <p>The abstract operation TriggerPromiseReactions takes arguments <var>reactions</var> (a collection of PromiseReaction Records) and <var>argument</var>. It enqueues a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> for each record in <var>reactions</var>. Each such <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> processes the [[Type]] and [[Handler]] of the PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, and if the [[Handler]] is not <emu-const>empty</emu-const>, calls it passing the given argument. If the [[Handler]] is <emu-const>empty</emu-const>, the behaviour is determined by the [[Type]]. It performs the following steps when called:</p>\n        <emu-alg><ol><li>For each <var>reaction</var> in <var>reactions</var>, in original insertion order, do<ol><li>Let <var>job</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>reaction</var>, <var>argument</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>job</var>.[[Job]], <var>job</var>.[[Realm]]).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.delete": {"num": "23.3.3.2", "title": "#sec-weakmap.prototype.delete WeakMap.prototype.delete ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.delete\">#sec-weakmap.prototype.delete</span> WeakMap.prototype.delete ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-set.prototype.delete": {"num": "23.2.3.4", "title": "#sec-set.prototype.delete Set.prototype.delete ( value )", "html": "<emu-clause id=\"sec-set.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.delete\">#sec-set.prototype.delete</span> Set.prototype.delete ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-quotejsonstring": {"num": "24.5.2.2", "title": "#sec-quotejsonstring Runtime Semantics: QuoteJSONString ( value )", "html": "<emu-clause id=\"sec-quotejsonstring\" aoid=\"QuoteJSONString\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-quotejsonstring\">#sec-quotejsonstring</span> Runtime Semantics: QuoteJSONString ( <var>value</var> )</h1>\n        <p>The abstract operation QuoteJSONString takes argument <var>value</var>. It wraps <var>value</var> in 0x0022 (QUOTATION MARK) code units and escapes certain other code units within it. This operation interprets <var>value</var> as a sequence of UTF-16 encoded code points, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>product</var> be the String value consisting solely of the code unit 0x0022 (QUOTATION MARK).</li><li>For each code point <var>C</var> in !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>value</var>), do<ol><li>If <var>C</var> is listed in the &#8220;Code Point&#8221; column of <emu-xref href=\"#table-json-single-character-escapes\"><a href=\"#table-json-single-character-escapes\" class=\"excluded-xref\" excluded-id=\"table-json-single-character-escapes\">#table-json-single-character-escapes</a></emu-xref>, then<ol><li>Set <var>product</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>product</var> and the escape sequence for <var>C</var> as specified in the &#8220;Escape Sequence&#8221; column of the corresponding row.</li></ol></li><li>Else if <var>C</var> has a numeric value less than 0x0020 (SPACE), or if <var>C</var> has the same numeric value as a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> or <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, then<ol><li>Let <var>unit</var> be the code unit whose numeric value is that of <var>C</var>.</li><li>Set <var>product</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>product</var> and <emu-xref aoid=\"UnicodeEscape\"><a href=\"#sec-unicodeescape\">UnicodeEscape</a></emu-xref>(<var>unit</var>).</li></ol></li><li>Else,<ol><li>Set <var>product</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>product</var> and !&#160;<emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>C</var>).</li></ol></li></ol></li><li>Set <var>product</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>product</var> and the code unit 0x0022 (QUOTATION MARK).</li><li>Return <var>product</var>.</li></ol></emu-alg>\n        <emu-table id=\"table-json-single-character-escapes\" caption=\"JSON Single Character Escape Sequences\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-json-single-character-escapes\">#table-json-single-character-escapes</span>: JSON Single Character Escape Sequences</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Code Point\n              </th>\n              <th>\n                Unicode Character Name\n              </th>\n              <th>\n                Escape Sequence\n              </th>\n            </tr>\n            <tr>\n              <td>\n                U+0008\n              </td>\n              <td>\n                BACKSPACE\n              </td>\n              <td>\n                <code>\\b</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+0009\n              </td>\n              <td>\n                CHARACTER TABULATION\n              </td>\n              <td>\n                <code>\\t</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+000A\n              </td>\n              <td>\n                LINE FEED (LF)\n              </td>\n              <td>\n                <code>\\n</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+000C\n              </td>\n              <td>\n                FORM FEED (FF)\n              </td>\n              <td>\n                <code>\\f</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+000D\n              </td>\n              <td>\n                CARRIAGE RETURN (CR)\n              </td>\n              <td>\n                <code>\\r</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+0022\n              </td>\n              <td>\n                QUOTATION MARK\n              </td>\n              <td>\n                <code>\\\"</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+005C\n              </td>\n              <td>\n                REVERSE SOLIDUS\n              </td>\n              <td>\n                <code>\\\\</code>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-array.prototype.push": {"num": "22.1.3.20", "title": "#sec-array.prototype.push Array.prototype.push ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.push\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.push\">#sec-array.prototype.push</span> Array.prototype.push ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are appended to the end of the array, in the order in which they appear. The new length of the array is returned as the result of the call.</p>\n        </div></emu-note>\n        <p>When the <code>push</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>argCount</var> be the number of elements in <var>items</var>.</li><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of the element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>len</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>len</var> to <var>len</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>push</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>push</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-hosteventset": {"num": "28.5.3", "title": "#sec-hosteventset HostEventSet ( execution )", "html": "<emu-clause id=\"sec-hosteventset\" aoid=\"HostEventSet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosteventset\">#sec-hosteventset</span> HostEventSet ( <var>execution</var> )</h1>\n      <p>The abstract operation HostEventSet takes argument <var>execution</var> (a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>events</var> be an empty Set.</li><li>For each event <var>E</var> in <emu-xref aoid=\"EventSet\"><a href=\"#sec-event-set\">EventSet</a></emu-xref>(<var>execution</var>), do<ol><li>If <var>E</var> is not in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), add <var>E</var> to <var>events</var>.</li></ol></li><li>Return <var>events</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-object.getownpropertydescriptors": {"num": "19.1.2.9", "title": "#sec-object.getownpropertydescriptors Object.getOwnPropertyDescriptors ( O )", "html": "<emu-clause id=\"sec-object.getownpropertydescriptors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.getownpropertydescriptors\">#sec-object.getownpropertydescriptors</span> Object.getOwnPropertyDescriptors ( <var>O</var> )</h1>\n        <p>When the <code>getOwnPropertyDescriptors</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>ownKeys</var> be ? <var>obj</var>.[[OwnPropertyKeys]]().</li><li>Let <var>descriptors</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Object.prototype%).</li><li>For each element <var>key</var> of <var>ownKeys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Let <var>desc</var> be ? <var>obj</var>.[[GetOwnProperty]](<var>key</var>).</li><li>Let <var>descriptor</var> be !&#160;<emu-xref aoid=\"FromPropertyDescriptor\"><a href=\"#sec-frompropertydescriptor\">FromPropertyDescriptor</a></emu-xref>(<var>desc</var>).</li><li>If <var>descriptor</var> is not <emu-val>undefined</emu-val>, perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>descriptors</var>, <var>key</var>, <var>descriptor</var>).</li></ol></li><li>Return <var>descriptors</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {"table-3": "Table 4", "table-39": "Table 44", "table-json-single-character-escapes": "Table 65"}}, "to": {"secList": ["sec-parsemodule", "sec-tear-free-aligned-reads", "sec-exports-static-semantics-exportentries", "sec-string.prototype.concat", "sec-weakmap.prototype.set", "sec-set.prototype.foreach", "sec-array.prototype.splice", "sec-InnerModuleLinking", "sec-functiondeclarationinstantiation", "sec-map.prototype.set", "sec-map.prototype.get", "sec-list-and-record-specification-type", "sec-map.prototype.delete", "sec-enumerableownpropertynames", "sec-array.prototype.unshift", "sec-finalization-registry.prototype.unregister", "sec-importedlocalnames", "sec-weakset.prototype.add", "sec-regexp.prototype-@@replace", "sec-valid-chosen-reads", "sec-blockdeclarationinstantiation", "sec-%foriniteratorprototype%.next", "sec-get-map.prototype.size", "sec-set.prototype.add", "sec-object.assign", "sec-sharedatablockeventset", "sec-map.prototype.foreach", "sec-string.fromcodepoint", "sec-getmodulenamespace", "sec-meta-properties-runtime-semantics-evaluation", "sec-string.prototype.replaceall", "sec-array.prototype.concat", "sec-ordinarytoprimitive", "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "sec-resolveexport", "sec-weakref-execution", "sec-set.prototype.clear", "sec-weakset.prototype.delete", "sec-source-text-module-record-initialize-environment", "sec-runtime-semantics-forinofheadevaluation", "sec-event-set", "sec-getownpropertykeys", "sec-encode", "sec-composewriteeventbytes", "sec-getexportednames", "sec-objectdefineproperties", "sec-moduledeclarationlinking", "sec-set.prototype.has", "sec-innermoduleevaluation", "sec-globaldeclarationinstantiation", "sec-get-set.prototype.size", "sec-weakset.prototype.has", "sec-map.prototype.has", "sec-weakmap.prototype.has", "sec-map.prototype.clear", "sec-weakmap.prototype.get", "sec-codepointstostring", "sec-moduleevaluation", "sec-runtime-semantics-caseblockevaluation", "sec-internalizejsonproperty", "sec-runtime-semantics-classdefinitionevaluation", "sec-string.fromcharcode", "sec-evaldeclarationinstantiation", "sec-copydataproperties", "sec-coherent-reads", "sec-triggerpromisereactions", "sec-weakmap.prototype.delete", "sec-set.prototype.delete", "sec-quotejsonstring", "sec-array.prototype.push", "sec-hosteventset", "sec-object.getownpropertydescriptors"], "secData": {"sec-parsemodule": {"num": "15.2.1.17.1", "title": "#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parsemodule\" aoid=\"ParseModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsemodule\">#sec-parsemodule</span> ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n          <p>The abstract operation ParseModule takes arguments <var>sourceText</var> (ECMAScript source text), <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Parse <var>sourceText</var> using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and analyse the parse result for any Early Error conditions. If the parse was successful and no early errors were found, let <var>body</var> be the resulting parse tree. Otherwise, let <var>body</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of one or more <emu-val>SyntaxError</emu-val> objects representing the parsing errors and/or early errors. Parsing and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> detection may be interweaved in an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> manner. If more than one parsing error or <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> is present, the number and ordering of error objects in the list is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>, but at least one must be present.</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Let <var>requestedModules</var> be the ModuleRequests of <var>body</var>.</li><li>Let <var>importEntries</var> be ImportEntries of <var>body</var>.</li><li>Let <var>importedBoundNames</var> be <emu-xref aoid=\"ImportedLocalNames\"><a href=\"#sec-importedlocalnames\">ImportedLocalNames</a></emu-xref>(<var>importEntries</var>).</li><li>Let <var>indirectExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>localExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>starExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>exportEntries</var> be ExportEntries of <var>body</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>ee</var> of <var>exportEntries</var>, do<ol><li>If <var>ee</var>.[[ModuleRequest]] is <emu-val>null</emu-val>, then<ol><li>If <var>ee</var>.[[LocalName]] is not an element of <var>importedBoundNames</var>, then<ol><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>Let <var>ie</var> be the element of <var>importEntries</var> whose [[LocalName]] is the same as <var>ee</var>.[[LocalName]].</li><li>If <var>ie</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>NOTE: This is a re-export of an imported module namespace object.</li><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>NOTE: This is a re-export of a single name.</li><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>ie</var>.[[ModuleRequest]], [[ImportName]]: <var>ie</var>.[[ImportName]], [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>ee</var>.[[ExportName]] } to <var>indirectExportEntries</var>.</li></ol></li></ol></li></ol></li><li>Else if <var>ee</var>.[[ImportName]] is <emu-val>\"*\"</emu-val> and <var>ee</var>.[[ExportName]] is <emu-val>null</emu-val>, then<ol><li>Append <var>ee</var> to <var>starExportEntries</var>.</li></ol></li><li>Else,<ol><li>Append <var>ee</var> to <var>indirectExportEntries</var>.</li></ol></li></ol></li><li>Return <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[Namespace]]: <emu-val>undefined</emu-val>, [[Status]]: <emu-const>unlinked</emu-const>, [[EvaluationError]]: <emu-val>undefined</emu-val>, [[HostDefined]]: <var>hostDefined</var>, [[ECMAScriptCode]]: <var>body</var>, [[Context]]: <emu-const>empty</emu-const>, [[ImportMeta]]: <emu-const>empty</emu-const>, [[RequestedModules]]: <var>requestedModules</var>, [[ImportEntries]]: <var>importEntries</var>, [[LocalExportEntries]]: <var>localExportEntries</var>, [[IndirectExportEntries]]: <var>indirectExportEntries</var>, [[StarExportEntries]]: <var>starExportEntries</var>, [[DFSIndex]]: <emu-val>undefined</emu-val>, [[DFSAncestorIndex]]: <emu-val>undefined</emu-val> }.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An implementation may parse module source text and analyse it for Early Error conditions prior to the evaluation of ParseModule for that module source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseModule upon that source text.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-tear-free-aligned-reads": {"num": "28.7.3", "title": "#sec-tear-free-aligned-reads Tear Free Reads", "html": "<emu-clause id=\"sec-tear-free-aligned-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tear-free-aligned-reads\">#sec-tear-free-aligned-reads</span> Tear Free Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has tear free reads if the following abstract operation returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> of <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>If <var>R</var>.[[NoTear]] is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The remainder of dividing <var>R</var>.[[ByteIndex]] by <var>R</var>.[[ElementSize]] is 0.</li><li>For each event <var>W</var> such that (<var>R</var>, <var>W</var>) is in <var>execution</var>.[[ReadsFrom]] and <var>W</var>.[[NoTear]] is <emu-val>true</emu-val>, do<ol><li>If <var>R</var> and <var>W</var> have equal ranges, and there is an event <var>V</var> such that <var>V</var> and <var>W</var> have equal ranges, <var>V</var>.[[NoTear]] is <emu-val>true</emu-val>, <var>W</var> is not <var>V</var>, and (<var>R</var>, <var>V</var>) is in <var>execution</var>.[[ReadsFrom]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An event's [[NoTear]] field is <emu-val>true</emu-val> when that event was introduced via accessing an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> TypedArray, and <emu-val>false</emu-val> when introduced via accessing a floating point TypedArray or DataView.</p>\n        <p>Intuitively, this requirement says when a memory range is accessed in an aligned fashion via an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> TypedArray, a single write event on that range must \"win\" when in a data race with other write events with equal ranges. More precisely, this requirement says an aligned read event cannot read a value composed of bytes from multiple, different write events all with equal ranges. It is possible, however, for an aligned read event to read from multiple write events with overlapping ranges.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-exports-static-semantics-exportentries": {"num": "15.2.3.5", "title": "#sec-exports-static-semantics-exportentries Static Semantics: ExportEntries", "html": "<emu-clause id=\"sec-exports-static-semantics-exportentries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-static-semantics-exportentries\">#sec-exports-static-semantics-exportentries</span> Static Semantics: ExportEntries</h1>\n        <emu-see-also-para op=\"ExportEntries\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0a40575\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be the sole element of ModuleRequests of <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>.</li><li>Return ExportEntriesForModule of <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> with argument <var>module</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2762c7fe\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return ExportEntriesForModule of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> with argument <emu-val>null</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6c6de801\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>For each element <var>name</var> of <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"828f5ae3\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li><li>For each element <var>name</var> of <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71d1417e\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3c3cb8d\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e1fe9c4f\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <emu-val>\"*default*\"</emu-val>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>entry</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-val>\"*default*\"</emu-val> is used within this specification as a synthetic name for anonymous default export values.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.concat": {"num": "21.1.3.4", "title": "#sec-string.prototype.concat String.prototype.concat ( ...args )", "html": "<emu-clause id=\"sec-string.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.concat\">#sec-string.prototype.concat</span> String.prototype.concat ( ...<var>args</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>concat</code> method is called it returns the String value consisting of the code units of the <emu-val>this</emu-val> value (converted to a String) followed by the code units of each of the arguments converted to a String. The result is a String value, not a String object.</p>\n        </div></emu-note>\n        <p>When the <code>concat</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>R</var> be <var>S</var>.</li><li>For each element <var>next</var> of <var>args</var>, do<ol><li>Let <var>nextString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>next</var>).</li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>nextString</var>.</li></ol></li><li>Return <var>R</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.set": {"num": "23.3.3.5", "title": "#sec-weakmap.prototype.set WeakMap.prototype.set ( key, value )", "html": "<emu-clause id=\"sec-weakmap.prototype.set\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.set\">#sec-weakmap.prototype.set</span> WeakMap.prototype.set ( <var>key</var>, <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Value]] to <var>value</var>.</li><li>Return <var>M</var>.</li></ol></li></ol></li><li>Let <var>p</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>key</var>, [[Value]]: <var>value</var> }.</li><li>Append <var>p</var> as the last element of <var>entries</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.foreach": {"num": "23.2.3.6", "title": "#sec-set.prototype.foreach Set.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-set.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.foreach\">#sec-set.prototype.foreach</span> Set.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, in original insertion order, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>, <var>e</var>, <var>S</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each value present in the set object, in value insertion order. <var>callbackfn</var> is called only for values of the Set which actually exist; it is not called for keys that have been deleted from the set.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the first two arguments are a value contained in the Set. The same value is passed for both arguments. The Set object being traversed is passed as the third argument.</p>\n          <p>The <var>callbackfn</var> is called with three arguments to be consistent with the call back functions used by <code>forEach</code> methods for Map and Array. For Sets, each item value is considered to be both the key and the value.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>Each value is normally visited only once. However, a value will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Values that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the value is added again before the <code>forEach</code> call completes. New values added after the call to <code>forEach</code> begins are visited.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.splice": {"num": "22.1.3.28", "title": "#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )", "html": "<emu-clause id=\"sec-array.prototype.splice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.splice\">#sec-array.prototype.splice</span> Array.prototype.splice ( <var>start</var>, <var>deleteCount</var>, ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>splice</code> method is called with two or more arguments <var>start</var>, <var>deleteCount</var> and zero or more <var>items</var>, the <var>deleteCount</var> elements of the array starting at <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> <var>start</var> are replaced by the elements of <var>items</var>. An Array object containing the deleted elements (if any) is returned.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>actualStart</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>actualStart</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>start</var> is not present, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be 0.</li></ol></li><li>Else if <var>deleteCount</var> is not present, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be <var>len</var> - <var>actualStart</var>.</li></ol></li><li>Else,<ol><li>Let <var>insertCount</var> be the number of elements in <var>items</var>.</li><li>Let <var>dc</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>deleteCount</var>).</li><li>Let <var>actualDeleteCount</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>dc</var>, 0), <var>len</var> - <var>actualStart</var>).</li></ol></li><li>If <var>len</var> + <var>insertCount</var> - <var>actualDeleteCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>actualDeleteCount</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>actualDeleteCount</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>actualStart</var> + <var>k</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>fromValue</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>actualDeleteCount</var>, <emu-val>true</emu-val>).</li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li>If <var>itemCount</var> &lt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>k</var> &lt; (<var>len</var> - <var>actualDeleteCount</var>),<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var>).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Set <var>k</var> to <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; (<var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>),<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1)).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Else if <var>itemCount</var> &gt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to (<var>len</var> - <var>actualDeleteCount</var>).</li><li>Repeat, while <var>k</var> &gt; <var>actualStart</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Set <var>k</var> to <var>actualStart</var>.</li><li>For each element <var>E</var> of <var>items</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li id=\"step-array-proto-splice-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property of the result Array in step <emu-xref href=\"#step-array-proto-splice-set-length\"><a href=\"#step-array-proto-splice-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-splice-set-length\">#step-array-proto-splice-set-length</a></emu-xref> was necessary in previous editions of ECMAScript to ensure that its length was correct in situations where the trailing elements of the result Array were not present. Setting <emu-val>\"length\"</emu-val> became unnecessary starting in ES2015 when the result Array was initialized to its proper length rather than an empty Array but is carried forward to preserve backward compatibility.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>splice</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-InnerModuleLinking": {"num": "15.2.1.16.1.1", "title": "#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )", "html": "<emu-clause id=\"sec-InnerModuleLinking\" oldids=\"sec-innermoduleinstantiation\" aoid=\"InnerModuleLinking\"><span id=\"sec-innermoduleinstantiation\"></span>\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-InnerModuleLinking\">#sec-InnerModuleLinking</span> InnerModuleLinking ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleLinking takes arguments <var>module</var> (a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var>. It is used by Link to perform the actual linking process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to <emu-const>linked</emu-const> together. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Link().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>, then<ol><li>Return <var>index</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>linking</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>linked</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-functiondeclarationinstantiation": {"num": "9.2.10", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>The abstract operation FunctionDeclarationInstantiation takes arguments <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be IsSimpleParameterList of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be ContainsExpression of <var>formals</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the LexicallyDeclaredNames of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <emu-val>\"arguments\"</emu-val> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <emu-val>\"arguments\"</emu-val> is an element of <var>functionNames</var> or if <emu-val>\"arguments\"</emu-val> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that bindings created by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls in the formal parameter list are outside the environment where parameters are declared.</li><li>Let <var>calleeEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>calleeEnv</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The VariableEnvironment of <var>calleeContext</var> is <var>calleeEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>env</var>.</li></ol></li><li>For each String <var>paramName</var> of <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>env</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>env</var>.InitializeBinding(<emu-val>\"arguments\"</emu-val>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>parameterNames</var> with <emu-val>\"arguments\"</emu-val> appended.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>env</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>env</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnv</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li id=\"step-functiondeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in <emu-xref href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\">#sec-function-definitions-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-map.prototype.set": {"num": "23.1.3.9", "title": "#sec-map.prototype.set Map.prototype.set ( key, value )", "html": "<emu-clause id=\"sec-map.prototype.set\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.set\">#sec-map.prototype.set</span> Map.prototype.set ( <var>key</var>, <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Value]] to <var>value</var>.</li><li>Return <var>M</var>.</li></ol></li></ol></li><li>If <var>key</var> is <emu-val>-0</emu-val>, set <var>key</var> to <emu-val>+0</emu-val>.</li><li>Let <var>p</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>key</var>, [[Value]]: <var>value</var> }.</li><li>Append <var>p</var> as the last element of <var>entries</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.get": {"num": "23.1.3.6", "title": "#sec-map.prototype.get Map.prototype.get ( key )", "html": "<emu-clause id=\"sec-map.prototype.get\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.get\">#sec-map.prototype.get</span> Map.prototype.get ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <var>p</var>.[[Value]].</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-list-and-record-specification-type": {"num": "6.2.1", "title": "#sec-list-and-record-specification-type The List and Record Specification Types", "html": "<emu-clause id=\"sec-list-and-record-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-list-and-record-specification-type\">#sec-list-and-record-specification-type</span> The List and Record Specification Types</h1>\n      <p>The <dfn>List</dfn> type is used to explain the evaluation of argument lists (see <emu-xref href=\"#sec-argument-lists\"><a href=\"#sec-argument-lists\" class=\"excluded-xref\" excluded-id=\"sec-argument-lists\">#sec-argument-lists</a></emu-xref>) in <code>new</code> expressions, in function calls, and in other algorithms where a simple ordered list of values is needed. Values of the List type are simply ordered sequences of list elements containing the individual values. These sequences may be of any length. The elements of a list may be randomly accessed using 0-origin indices. For notational convenience an array-like syntax can be used to access List elements. For example, <var>arguments</var>[2] is shorthand for saying the 3<sup>rd</sup> element of the List <var>arguments</var>.</p>\n      <p>When an algorithm iterates over the elements of a List without specifying an order, the order used is the order of the elements in the List.</p>\n      <p>For notational convenience within this specification, a literal syntax can be used to express a new List value. For example, &#171; 1, 2 &#187; defines a List value that has two elements each of which is initialized to a specific value. A new empty List can be expressed as &#171; &#187;.</p>\n      <p>The <dfn>Record</dfn> type is used to describe data aggregations within the algorithms of this specification. A Record type value consists of one or more named fields. The value of each field is either an ECMAScript value or an abstract value represented by a name associated with the Record type. Field names are always enclosed in double brackets, for example [[Value]].</p>\n      <p>For notational convenience within this specification, an object literal-like syntax can be used to express a Record value. For example, { [[Field1]]: 42, [[Field2]]: <emu-val>false</emu-val>, [[Field3]]: <emu-const>empty</emu-const> } defines a Record value that has three fields, each of which is initialized to a specific value. Field name order is not significant. Any fields that are not explicitly listed are considered to be absent.</p>\n      <p>In specification text and algorithms, dot notation may be used to refer to a specific field of a Record value. For example, if R is the record shown in the previous paragraph then R.[[Field2]] is shorthand for &#8220;the field of R named [[Field2]]&#8221;.</p>\n      <p>Schema for commonly used Record field combinations may be named, and that name may be used as a prefix to a literal Record value to identify the specific kind of aggregations that is being described. For example: PropertyDescriptor { [[Value]]: 42, [[Writable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n\n    "}, "sec-map.prototype.delete": {"num": "23.1.3.3", "title": "#sec-map.prototype.delete Map.prototype.delete ( key )", "html": "<emu-clause id=\"sec-map.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.delete\">#sec-map.prototype.delete</span> Map.prototype.delete ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-enumerableownpropertynames": {"num": "7.3.23", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" aoid=\"EnumerableOwnPropertyNames\" oldids=\"sec-enumerableownproperties\"><span id=\"sec-enumerableownproperties\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>The abstract operation EnumerableOwnPropertyNames takes arguments <var>O</var> (an Object) and <var>kind</var> (one of <emu-const>key</emu-const>, <emu-const>value</emu-const>, or <emu-const>key+value</emu-const>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var>, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Return <var>properties</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-array.prototype.unshift": {"num": "22.1.3.31", "title": "#sec-array.prototype.unshift Array.prototype.unshift ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.unshift\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.unshift\">#sec-array.prototype.unshift</span> Array.prototype.unshift ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are prepended to the start of the array, such that their order within the array is the same as the order in which they appear in the argument list.</p>\n        </div></emu-note>\n        <p>When the <code>unshift</code> method is called with zero or more arguments <var>item1</var>, <var>item2</var>, etc., the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>argCount</var> be the number of elements in <var>items</var>.</li><li>If <var>argCount</var> &gt; 0, then<ol><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; 0,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>argCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Let <var>j</var> be 0.</li><li>For each element <var>E</var> of <var>items</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>j</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> + <var>argCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var> + <var>argCount</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>unshift</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>unshift</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-finalization-registry.prototype.unregister": {"num": "25.2.3.3", "title": "#sec-finalization-registry.prototype.unregister FinalizationRegistry.prototype.unregister ( unregisterToken )", "html": "<emu-clause id=\"sec-finalization-registry.prototype.unregister\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finalization-registry.prototype.unregister\">#sec-finalization-registry.prototype.unregister</span> FinalizationRegistry.prototype.unregister ( <var>unregisterToken</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>finalizationRegistry</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>finalizationRegistry</var>, [[Cells]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unregisterToken</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>removed</var> be <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[WeakRefTarget]], [[HeldValue]], [[UnregisterToken]] } <var>cell</var> of <var>finalizationRegistry</var>.[[Cells]], do<ol><li>If <var>cell</var>.[[UnregisterToken]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>cell</var>.[[UnregisterToken]], <var>unregisterToken</var>) is <emu-val>true</emu-val>, then<ol><li>Remove <var>cell</var> from <var>finalizationRegistry</var>.[[Cells]].</li><li>Set <var>removed</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>removed</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-importedlocalnames": {"num": "15.2.1.9", "title": "#sec-importedlocalnames Static Semantics: ImportedLocalNames ( importEntries )", "html": "<emu-clause id=\"sec-importedlocalnames\" aoid=\"ImportedLocalNames\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-importedlocalnames\">#sec-importedlocalnames</span> Static Semantics: ImportedLocalNames ( <var>importEntries</var> )</h1>\n        <p>The abstract operation ImportedLocalNames takes argument <var>importEntries</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry Records (see <emu-xref href=\"#table-39\"><a href=\"#table-39\" class=\"excluded-xref\" excluded-id=\"table-39\">#table-39</a></emu-xref>)). It creates a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all of the local name bindings defined by <var>importEntries</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>localNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> <var>i</var> of <var>importEntries</var>, do<ol><li>Append <var>i</var>.[[LocalName]] to <var>localNames</var>.</li></ol></li><li>Return <var>localNames</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.add": {"num": "23.4.3.1", "title": "#sec-weakset.prototype.add WeakSet.prototype.add ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.add\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.add\">#sec-weakset.prototype.add</span> WeakSet.prototype.add ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>S</var>.</li></ol></li></ol></li><li>Append <var>value</var> as the last element of <var>entries</var>.</li><li>Return <var>S</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexp.prototype-@@replace": {"num": "21.2.5.10", "title": "#sec-regexp.prototype-@@replace RegExp.prototype [ @@replace ] ( string, replaceValue )", "html": "<emu-clause id=\"sec-regexp.prototype-@@replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@replace\">#sec-regexp.prototype-@@replace</span> RegExp.prototype [ @@replace ] ( <var>string</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>@@replace</code> method is called with arguments <var>string</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>lengthS</var> be the number of code unit elements in <var>S</var>.</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fullUnicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, 0, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>results</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li><li>If <var>result</var> is <emu-val>null</emu-val>, set <var>done</var> to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Append <var>result</var> to the end of <var>results</var>.</li><li>If <var>global</var> is <emu-val>false</emu-val>, set <var>done</var> to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>)).</li><li>Let <var>nextIndex</var> be <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, <var>nextIndex</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li></ol></li></ol></li><li>Let <var>accumulatedResult</var> be the empty String.</li><li>Let <var>nextSourcePosition</var> be 0.</li><li>For each element <var>result</var> of <var>results</var>, do<ol><li>Let <var>resultLength</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>result</var>).</li><li>Let <var>nCaptures</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>resultLength</var> - 1, 0).</li><li>Let <var>matched</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>Let <var>matchLength</var> be the number of code units in <var>matched</var>.</li><li>Let <var>position</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"index\"</emu-val>)).</li><li>Set <var>position</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>position</var>, <var>lengthS</var>), 0).</li><li>Let <var>n</var> be 1.</li><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Repeat, while <var>n</var> &#8804; <var>nCaptures</var>,<ol><li>Let <var>capN</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>)).</li><li>If <var>capN</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>capN</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>capN</var>).</li></ol></li><li>Append <var>capN</var> as the last element of <var>captures</var>.</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Let <var>namedCaptures</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"groups\"</emu-val>).</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replacerArgs</var> be &#171; <var>matched</var> &#187;.</li><li>Append in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order the elements of <var>captures</var> to the end of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>replacerArgs</var>.</li><li>Append <var>position</var> and <var>S</var> to <var>replacerArgs</var>.</li><li>If <var>namedCaptures</var> is not <emu-val>undefined</emu-val>, then<ol><li>Append <var>namedCaptures</var> as the last element of <var>replacerArgs</var>.</li></ol></li><li>Let <var>replValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, <var>replacerArgs</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replValue</var>).</li></ol></li><li>Else,<ol><li>If <var>namedCaptures</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>namedCaptures</var> to ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>namedCaptures</var>).</li></ol></li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>matched</var>, <var>S</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, <var>replaceValue</var>).</li></ol></li><li>If <var>position</var> &#8805; <var>nextSourcePosition</var>, then<ol><li>NOTE: <var>position</var> should not normally move backwards. If it does, it is an indication of an ill-behaving RegExp subclass or use of an access triggered side-effect to change the global flag or other characteristics of <var>rx</var>. In such cases, the corresponding substitution is ignored.</li><li>Set <var>accumulatedResult</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>accumulatedResult</var>, the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>nextSourcePosition</var> to <var>position</var>, and <var>replacement</var>.</li><li>Set <var>nextSourcePosition</var> to <var>position</var> + <var>matchLength</var>.</li></ol></li></ol></li><li>If <var>nextSourcePosition</var> &#8805; <var>lengthS</var>, return <var>accumulatedResult</var>.</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>accumulatedResult</var> and the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>nextSourcePosition</var>.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.replace]\"</emu-val>.</p>\n      </emu-clause>\n\n      "}, "sec-valid-chosen-reads": {"num": "28.7.1", "title": "#sec-valid-chosen-reads Valid Chosen Reads", "html": "<emu-clause id=\"sec-valid-chosen-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-valid-chosen-reads\">#sec-valid-chosen-reads</span> Valid Chosen Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has valid chosen reads if the following abstract operation returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> of <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>Let <var>chosenValueRecord</var> be the element of <var>execution</var>.[[ChosenValues]] whose [[Event]] field is <var>R</var>.</li><li>Let <var>chosenValue</var> be <var>chosenValueRecord</var>.[[ChosenValue]].</li><li>Let <var>readValue</var> be <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref>(<var>execution</var>, <var>R</var>).</li><li>Let <var>chosenLen</var> be the number of elements of <var>chosenValue</var>.</li><li>Let <var>readLen</var> be the number of elements of <var>readValue</var>.</li><li>If <var>chosenLen</var> is not equal to <var>readLen</var>, then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>If <var>chosenValue</var>[<var>i</var>] is not equal to <var>readValue</var>[<var>i</var>] for any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value <var>i</var> in the range 0 through <var>chosenLen</var>, exclusive, then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-blockdeclarationinstantiation": {"num": "13.2.14", "title": "#sec-blockdeclarationinstantiation Runtime Semantics: BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> Runtime Semantics: BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>The abstract operation BlockDeclarationInstantiation takes arguments <var>code</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> of <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li id=\"step-blockdeclarationinstantiation-createmutablebinding\">Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li id=\"step-blockdeclarationinstantiation-initializebinding\">Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-%foriniteratorprototype%.next": {"num": "13.7.5.16.2.1", "title": "#sec-%foriniteratorprototype%.next %ForInIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%foriniteratorprototype%.next\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</span> %ForInIteratorPrototype%.next ( )</h1>\n            <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has all of the internal slots of a For-In Iterator Instance (<emu-xref href=\"#sec-properties-of-for-in-iterator-instances\"><a href=\"#sec-properties-of-for-in-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-for-in-iterator-instances\">#sec-properties-of-for-in-iterator-instances</a></emu-xref>).</li><li>Let <var>object</var> be <var>O</var>.[[Object]].</li><li>Let <var>visited</var> be <var>O</var>.[[VisitedKeys]].</li><li>Let <var>remaining</var> be <var>O</var>.[[RemainingKeys]].</li><li>Repeat,<ol><li>If <var>O</var>.[[ObjectWasVisited]] is <emu-val>false</emu-val>, then<ol><li>Let <var>keys</var> be ? <var>object</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>key</var> of <var>keys</var>, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Append <var>key</var> to <var>remaining</var>.</li></ol></li></ol></li><li>Set <var>O</var>.[[ObjectWasVisited]] to <emu-val>true</emu-val>.</li></ol></li><li>Repeat, while <var>remaining</var> is not empty,<ol><li>Remove the first element from <var>remaining</var> and let <var>r</var> be the value of the element.</li><li>If there does not exist an element <var>v</var> of <var>visited</var> such that <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>r</var>, <var>v</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>object</var>.[[GetOwnProperty]](<var>r</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val>, then<ol><li>Append <var>r</var> to <var>visited</var>.</li><li>If <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>r</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>Set <var>object</var> to ? <var>object</var>.[[GetPrototypeOf]]().</li><li>Set <var>O</var>.[[Object]] to <var>object</var>.</li><li>Set <var>O</var>.[[ObjectWasVisited]] to <emu-val>false</emu-val>.</li><li>If <var>object</var> is <emu-val>null</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-get-map.prototype.size": {"num": "23.1.3.10", "title": "#sec-get-map.prototype.size get Map.prototype.size", "html": "<emu-clause id=\"sec-get-map.prototype.size\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-map.prototype.size\">#sec-get-map.prototype.size</span> get Map.prototype.size</h1>\n        <p><code>Map.prototype.size</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>Let <var>count</var> be 0.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const>, set <var>count</var> to <var>count</var> + 1.</li></ol></li><li>Return <var>count</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.add": {"num": "23.2.3.1", "title": "#sec-set.prototype.add Set.prototype.add ( value )", "html": "<emu-clause id=\"sec-set.prototype.add\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.add\">#sec-set.prototype.add</span> Set.prototype.add ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>S</var>.</li></ol></li></ol></li><li>If <var>value</var> is <emu-val>-0</emu-val>, set <var>value</var> to <emu-val>+0</emu-val>.</li><li>Append <var>value</var> as the last element of <var>entries</var>.</li><li>Return <var>S</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.assign": {"num": "19.1.2.1", "title": "#sec-object.assign Object.assign ( target, ...sources )", "html": "<emu-clause id=\"sec-object.assign\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.assign\">#sec-object.assign</span> Object.assign ( <var>target</var>, ...<var>sources</var> )</h1>\n        <p>The <code>assign</code> function is used to copy the values of all of the enumerable own properties from one or more source objects to a <var>target</var> object. When the <code>assign</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>to</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>target</var>).</li><li>If only one argument was passed, return <var>to</var>.</li><li>For each element <var>nextSource</var> of <var>sources</var>, do<ol><li>If <var>nextSource</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>nextSource</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var>, do<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>to</var>, <var>nextKey</var>, <var>propValue</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li></ol></li></ol></li><li>Return <var>to</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>assign</code> function is 2.</p>\n      </emu-clause>\n\n      "}, "sec-sharedatablockeventset": {"num": "28.5.2", "title": "#sec-sharedatablockeventset SharedDataBlockEventSet ( execution )", "html": "<emu-clause id=\"sec-sharedatablockeventset\" aoid=\"SharedDataBlockEventSet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sharedatablockeventset\">#sec-sharedatablockeventset</span> SharedDataBlockEventSet ( <var>execution</var> )</h1>\n      <p>The abstract operation SharedDataBlockEventSet takes argument <var>execution</var> (a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>events</var> be an empty Set.</li><li>For each event <var>E</var> of <emu-xref aoid=\"EventSet\"><a href=\"#sec-event-set\">EventSet</a></emu-xref>(<var>execution</var>), do<ol><li>If <var>E</var> is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref>, <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref>, or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event, add <var>E</var> to <var>events</var>.</li></ol></li><li>Return <var>events</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-map.prototype.foreach": {"num": "23.1.3.5", "title": "#sec-map.prototype.foreach Map.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-map.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.foreach\">#sec-map.prototype.foreach</span> Map.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>e</var> of <var>entries</var>, in original key insertion order, do<ol><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>.[[Value]], <var>e</var>.[[Key]], <var>M</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each key/value pair present in the map object, in key insertion order. <var>callbackfn</var> is called only for keys of the map which actually exist; it is not called for keys that have been deleted from the map.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the item, the key of the item, and the Map object being traversed.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>. Each entry of a map's [[MapData]] is only visited once. New keys added after the call to <code>forEach</code> begins are visited. A key will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Keys that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the key is added again before the <code>forEach</code> call completes.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.fromcodepoint": {"num": "21.1.2.2", "title": "#sec-string.fromcodepoint String.fromCodePoint ( ...codePoints )", "html": "<emu-clause id=\"sec-string.fromcodepoint\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcodepoint\">#sec-string.fromcodepoint</span> String.fromCodePoint ( ...<var>codePoints</var> )</h1>\n        <p>The <code>String.fromCodePoint</code> function may be called with any number of arguments which form the rest parameter <var>codePoints</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>next</var> of <var>codePoints</var>, do<ol><li>Let <var>nextCP</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>next</var>).</li><li>If !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>nextCP</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>nextCP</var> &lt; 0 or <var>nextCP</var> &gt; 0x10FFFF, throw a <emu-val>RangeError</emu-val> exception.</li><li>Append the elements of !&#160;<emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>nextCP</var>) to the end of <var>elements</var>.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>codePoints</var> is empty, the empty String is returned.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCodePoint</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-getmodulenamespace": {"num": "15.2.1.21", "title": "#sec-getmodulenamespace Runtime Semantics: GetModuleNamespace ( module )", "html": "<emu-clause id=\"sec-getmodulenamespace\" aoid=\"GetModuleNamespace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodulenamespace\">#sec-getmodulenamespace</span> Runtime Semantics: GetModuleNamespace ( <var>module</var> )</h1>\n        <p>The abstract operation GetModuleNamespace takes argument <var>module</var>. It retrieves the Module Namespace Object representing <var>module</var>'s exports, lazily creating it the first time it was requested, and storing it in <var>module</var>.[[Namespace]] for future retrieval. It performs the following steps when called:</p>\n\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>module</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then <var>module</var>.[[Status]] is not <emu-const>unlinked</emu-const>.</li><li>Let <var>namespace</var> be <var>module</var>.[[Namespace]].</li><li>If <var>namespace</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>exportedNames</var> be ? <var>module</var>.GetExportedNames().</li><li>Let <var>unambiguousNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>name</var> of <var>exportedNames</var>, do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>name</var>).</li><li>If <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>, append <var>name</var> to <var>unambiguousNames</var>.</li></ol></li><li>Set <var>namespace</var> to <emu-xref aoid=\"ModuleNamespaceCreate\"><a href=\"#sec-modulenamespacecreate\">ModuleNamespaceCreate</a></emu-xref>(<var>module</var>, <var>unambiguousNames</var>).</li></ol></li><li>Return <var>namespace</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The only way GetModuleNamespace can throw is via one of the triggered <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> calls. Unresolvable names are simply excluded from the namespace at this point. They will lead to a real linking error later unless they are all ambiguous star exports that are not explicitly requested anywhere.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-meta-properties-runtime-semantics-evaluation": {"num": "12.3.12.1", "title": "#sec-meta-properties-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-meta-properties-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-meta-properties-runtime-semantics-evaluation\">#sec-meta-properties-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"NewTarget\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"ImportMeta\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f0c60de9\"><emu-t>import</emu-t><emu-t>.</emu-t><emu-t>meta</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be !&#160;<emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>Let <var>importMeta</var> be <var>module</var>.[[ImportMeta]].</li><li>If <var>importMeta</var> is <emu-const>empty</emu-const>, then<ol><li>Set <var>importMeta</var> to !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Let <var>importMetaValues</var> be !&#160;<emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>(<var>module</var>).</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>importMetaValues</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>importMeta</var>, <var>p</var>.[[Key]], <var>p</var>.[[Value]]).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"HostFinalizeImportMeta\"><a href=\"#sec-hostfinalizeimportmeta\">HostFinalizeImportMeta</a></emu-xref>(<var>importMeta</var>, <var>module</var>).</li><li>Set <var>module</var>.[[ImportMeta]] to <var>importMeta</var>.</li><li>Return <var>importMeta</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>importMeta</var>) is Object.</li><li>Return <var>importMeta</var>.</li></ol></li></ol></emu-alg>\n\n        <div id=\"excluded-sec-hostgetimportmetaproperties\"><h1><span class=\"secnum\">12.3.12.1.1</span>#sec-hostgetimportmetaproperties Runtime Semantics: HostGetImportMetaProperties ( moduleRecord )</h1>...</div><div id=\"excluded-sec-hostfinalizeimportmeta\"><h1><span class=\"secnum\">12.3.12.1.2</span>#sec-hostfinalizeimportmeta Runtime Semantics: HostFinalizeImportMeta ( importMeta, moduleRecord )</h1>...</div></emu-clause>\n    "}, "sec-string.prototype.replaceall": {"num": "21.1.3.18", "title": "#sec-string.prototype.replaceall String.prototype.replaceAll ( searchValue, replaceValue )", "html": "<emu-clause id=\"sec-string.prototype.replaceall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.replaceall\">#sec-string.prototype.replaceall</span> String.prototype.replaceAll ( <var>searchValue</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>replaceAll</code> method is called with arguments <var>searchValue</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>searchValue</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>isRegExp</var> be ?&#160;<emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>(<var>searchValue</var>).</li><li>If <var>isRegExp</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>searchValue</var>, <emu-val>\"flags\"</emu-val>).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>flags</var>).</li><li>If ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>flags</var>) does not contain <emu-val>\"g\"</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>replacer</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>searchValue</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@replace</a></emu-xref>).</li><li>If <var>replacer</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replacer</var>, <var>searchValue</var>, &#171; <var>O</var>, <var>replaceValue</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchValue</var>).</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Let <var>searchLength</var> be the length of <var>searchString</var>.</li><li>Let <var>advanceBy</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(1, <var>searchLength</var>).</li><li>Let <var>matchPositions</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>position</var> be !&#160;<emu-xref aoid=\"StringIndexOf\"><a href=\"#sec-stringindexof\">StringIndexOf</a></emu-xref>(<var>string</var>, <var>searchString</var>, 0).</li><li>Repeat, while <var>position</var> is not -1,<ol><li>Append <var>position</var> to the end of <var>matchPositions</var>.</li><li>Set <var>position</var> to !&#160;<emu-xref aoid=\"StringIndexOf\"><a href=\"#sec-stringindexof\">StringIndexOf</a></emu-xref>(<var>string</var>, <var>searchString</var>, <var>position</var> + <var>advanceBy</var>).</li></ol></li><li>Let <var>endOfLastMatch</var> be 0.</li><li>Let <var>result</var> be the empty String.</li><li>For each element <var>position</var> of <var>matchPositions</var>, do<ol><li>Let <var>preserved</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>endOfLastMatch</var> to <var>position</var>.</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, &#171; <var>searchString</var>, <var>position</var>, <var>string</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replaceValue</var>) is String.</li><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>replacement</var> be !&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>searchString</var>, <var>string</var>, <var>position</var>, <var>captures</var>, <emu-val>undefined</emu-val>, <var>replaceValue</var>).</li></ol></li><li>Set <var>result</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>result</var>, <var>preserved</var>, and <var>replacement</var>.</li><li>Set <var>endOfLastMatch</var> to <var>position</var> + <var>searchLength</var>.</li></ol></li><li>If <var>endOfLastMatch</var> &lt; the length of <var>string</var>, then<ol><li>Set <var>result</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>result</var> and the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>endOfLastMatch</var>.</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.concat": {"num": "22.1.3.1", "title": "#sec-array.prototype.concat Array.prototype.concat ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.concat\">#sec-array.prototype.concat</span> Array.prototype.concat ( ...<var>items</var> )</h1>\n        <p>When the <code>concat</code> method is called with zero or more arguments, it returns an array containing the array elements of the object followed by the array elements of each argument in order.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Let <var>n</var> be 0.</li><li>Prepend <var>O</var> to <var>items</var>.</li><li>For each element <var>E</var> of <var>items</var>, do<ol><li>Let <var>spreadable</var> be ?&#160;<emu-xref aoid=\"IsConcatSpreadable\"><a href=\"#sec-isconcatspreadable\">IsConcatSpreadable</a></emu-xref>(<var>E</var>).</li><li>If <var>spreadable</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>k</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>E</var>).</li><li>If <var>n</var> + <var>len</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>P</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>exists</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>subElement</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>subElement</var>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>NOTE: <var>E</var> is added as a single item rather than spread.</li><li>If <var>n</var> &#8805; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>E</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li id=\"step-array-proto-concat-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>n</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property in step <emu-xref href=\"#step-array-proto-concat-set-length\"><a href=\"#step-array-proto-concat-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-concat-set-length\">#step-array-proto-concat-set-length</a></emu-xref> is necessary to ensure that its value is correct in situations where the trailing elements of the result Array are not present.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-isconcatspreadable\"><h1><span class=\"secnum\">22.1.3.1.1</span>#sec-isconcatspreadable Runtime Semantics: IsConcatSpreadable ( O )</h1>...</div></emu-clause>\n\n      "}, "sec-ordinarytoprimitive": {"num": "7.1.1.1", "title": "#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )", "html": "<emu-clause id=\"sec-ordinarytoprimitive\" aoid=\"OrdinaryToPrimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarytoprimitive\">#sec-ordinarytoprimitive</span> OrdinaryToPrimitive ( <var>O</var>, <var>hint</var> )</h1>\n        <p>The abstract operation OrdinaryToPrimitive takes arguments <var>O</var> and <var>hint</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>hint</var>) is String and its value is either <emu-val>\"string\"</emu-val> or <emu-val>\"number\"</emu-val>.</li><li>If <var>hint</var> is <emu-val>\"string\"</emu-val>, then<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"toString\"</emu-val>, <emu-val>\"valueOf\"</emu-val> &#187;.</li></ol></li><li>Else,<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"valueOf\"</emu-val>, <emu-val>\"toString\"</emu-val> &#187;.</li></ol></li><li>For each element <var>name</var> of <var>methodNames</var>, do<ol><li>Let <var>method</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>method</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>O</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li></ol></li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys": {"num": "9.5.11", "title": "#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n      <p>When the [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"ownKeys\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[OwnPropertyKeys]]().</li></ol></li><li>Let <var>trapResultArray</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var> &#187;).</li><li>Let <var>trapResult</var> be ?&#160;<emu-xref aoid=\"CreateListFromArrayLike\"><a href=\"#sec-createlistfromarraylike\">CreateListFromArrayLike</a></emu-xref>(<var>trapResultArray</var>, &#171; String, Symbol &#187;).</li><li>If <var>trapResult</var> contains any duplicate entries, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>targetKeys</var> be ? <var>target</var>.[[OwnPropertyKeys]]().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing only String and Symbol values.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> contains no duplicate entries.</li><li>Let <var>targetConfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>targetNonconfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>targetKeys</var>, do<ol><li>Let <var>desc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>Append <var>key</var> as an element of <var>targetNonconfigurableKeys</var>.</li></ol></li><li>Else,<ol><li>Append <var>key</var> as an element of <var>targetConfigurableKeys</var>.</li></ol></li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val> and <var>targetNonconfigurableKeys</var> is empty, then<ol><li>Return <var>trapResult</var>.</li></ol></li><li>Let <var>uncheckedResultKeys</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> which is a copy of <var>trapResult</var>.</li><li>For each element <var>key</var> of <var>targetNonconfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val>, return <var>trapResult</var>.</li><li>For each element <var>key</var> of <var>targetConfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>uncheckedResultKeys</var> is not empty, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>trapResult</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[OwnPropertyKeys]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[OwnPropertyKeys]] is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> contains no duplicate entries.\n          </li>\n          <li>\n            The Type of each result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> element is either String or Symbol.\n          </li>\n          <li>\n            The result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain the keys of all non-configurable own properties of the target object.\n          </li>\n          <li>\n            If the target object is not extensible, then the result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain all the keys of the own properties of the target object and no other values.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-resolveexport": {"num": "15.2.1.17.3", "title": "#sec-resolveexport ResolveExport ( exportName [ , resolveSet ] ) Concrete Method", "html": "<emu-clause id=\"sec-resolveexport\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolveexport\">#sec-resolveexport</span> ResolveExport ( <var>exportName</var> [ , <var>resolveSet</var> ] ) Concrete Method</h1>\n          <p>The ResolveExport concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>ResolveExport attempts to resolve an imported binding to the actual defining module and local binding name. The defining module may be the module represented by the <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> this method was invoked on or some other module that is imported by that module. The parameter <var>resolveSet</var> is used to detect unresolved circular import/export paths. If a pair consisting of specific <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> and <var>exportName</var> is reached that is already in <var>resolveSet</var>, an import circularity has been encountered. Before recursively calling ResolveExport, a pair consisting of <var>module</var> and <var>exportName</var> is added to <var>resolveSet</var>.</p>\n          <p>If a defining module is found, a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]], [[BindingName]] } is returned. This record identifies the resolved binding of the originally requested export, unless this is the export of a namespace with no local binding. In this case, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. If no definition was found or the request is found to be circular, <emu-val>null</emu-val> is returned. If the request is found to be ambiguous, the string <emu-val>\"ambiguous\"</emu-val> is returned.</p>\n          <p>This abstract method performs the following steps:</p>\n\n          <emu-alg><ol><li>If <var>resolveSet</var> is not present, set <var>resolveSet</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolveSet</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Module]], [[ExportName]] }.</li><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Module]], [[ExportName]] } <var>r</var> of <var>resolveSet</var>, do<ol><li>If <var>module</var> and <var>r</var>.[[Module]] are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>r</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is a circular import request.</li><li>Return <emu-val>null</emu-val>.</li></ol></li></ol></li><li>Append the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Module]]: <var>module</var>, [[ExportName]]: <var>exportName</var> } to <var>resolveSet</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[LocalExportEntries]], do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>e</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> provides the direct binding for this export.</li><li>Return <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]]: <var>module</var>, [[BindingName]]: <var>e</var>.[[LocalName]] }.</li></ol></li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[IndirectExportEntries]], do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>e</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li>Let <var>importedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>If <var>e</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> does not provide the direct binding for this export.</li><li>Return <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]]: <var>importedModule</var>, [[BindingName]]: <emu-val>\"*namespace*\"</emu-val> }.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> imports a specific binding for this export.</li><li>Return <var>importedModule</var>.ResolveExport(<var>e</var>.[[ImportName]], <var>resolveSet</var>).</li></ol></li></ol></li></ol></li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <emu-val>\"default\"</emu-val>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: A <code>default</code> export was not explicitly defined by this module.</li><li>Return <emu-val>null</emu-val>.</li><li>NOTE: A <code>default</code> export cannot be provided by an <code>export *</code> or <code>export * from \"mod\"</code> declaration.</li></ol></li><li>Let <var>starResolution</var> be <emu-val>null</emu-val>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[StarExportEntries]], do<ol><li>Let <var>importedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>exportName</var>, <var>resolveSet</var>).</li><li>If <var>resolution</var> is <emu-val>\"ambiguous\"</emu-val>, return <emu-val>\"ambiguous\"</emu-val>.</li><li>If <var>resolution</var> is not <emu-val>null</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>If <var>starResolution</var> is <emu-val>null</emu-val>, set <var>starResolution</var> to <var>resolution</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There is more than one <code>*</code> import that includes the requested name.</li><li>If <var>resolution</var>.[[Module]] and <var>starResolution</var>.[[Module]] are not the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>resolution</var>.[[BindingName]], <var>starResolution</var>.[[BindingName]]) is <emu-val>false</emu-val>, return <emu-val>\"ambiguous\"</emu-val>.</li></ol></li></ol></li></ol></li><li>Return <var>starResolution</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-weakref-execution": {"num": "8.9.3", "title": "#sec-weakref-execution Execution", "html": "<emu-clause id=\"sec-weakref-execution\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakref-execution\">#sec-weakref-execution</span> Execution</h1>\n\n      <p>At any time, if a set of objects <var>S</var> is not <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>, an ECMAScript implementation may perform the following steps atomically:</p>\n\n      <emu-alg><ol><li>For each element <var>obj</var> of <var>S</var>, do<ol><li>For each <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> <var>ref</var> such that <var>ref</var>.[[WeakRefTarget]] is <var>obj</var>, do<ol><li>Set <var>ref</var>.[[WeakRefTarget]] to <emu-const>empty</emu-const>.</li></ol></li><li>For each <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> <var>fg</var> such that <var>fg</var>.[[Cells]] contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>cell</var> such that <var>cell</var>.[[WeakRefTarget]] is <var>obj</var>, do<ol><li>Set <var>cell</var>.[[WeakRefTarget]] to <emu-const>empty</emu-const>.</li><li>Optionally, perform !&#160;<emu-xref aoid=\"HostEnqueueFinalizationRegistryCleanupJob\"><a href=\"#sec-host-cleanup-finalization-registry\">HostEnqueueFinalizationRegistryCleanupJob</a></emu-xref>(<var>fg</var>).</li></ol></li><li>For each WeakMap <var>map</var> such that <var>map</var>.[[WeakMapData]] contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>r</var> such that <var>r</var>.[[Key]] is <var>obj</var>, do<ol><li>Set <var>r</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>r</var>.[[Value]] to <emu-const>empty</emu-const>.</li></ol></li><li>For each WeakSet <var>set</var> such that <var>set</var>.[[WeakSetData]] contains <var>obj</var>, do<ol><li>Replace the element of <var>set</var>.[[WeakSetData]] whose value is <var>obj</var> with an element whose value is <emu-const>empty</emu-const>.</li></ol></li></ol></li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Together with the definition of liveness, this clause prescribes legal optimizations that an implementation may apply regarding WeakRefs.</p>\n\n        <p>It is possible to access an object without observing its identity. Optimizations such as dead variable elimination and scalar replacement on properties of non-escaping objects whose identity is not observed are allowed. These optimizations are thus allowed to observably empty WeakRefs that point to such objects.</p>\n\n        <p>On the other hand, if an object's identity is observable, and that object is in the [[WeakRefTarget]] internal slot of a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref>, optimizations such as rematerialization that observably empty the <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> are prohibited.</p>\n\n        <p>Because calling <emu-xref aoid=\"HostEnqueueFinalizationRegistryCleanupJob\"><a href=\"#sec-host-cleanup-finalization-registry\">HostEnqueueFinalizationRegistryCleanupJob</a></emu-xref> is optional, registered objects in a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> do not necessarily hold that <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>. Implementations may omit <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> callbacks for any reason, e.g., if the <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> itself becomes dead, or if the application is shutting down.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Implementations are not obligated to empty WeakRefs for maximal sets of non-<emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> objects.</p>\n        <p>If an implementation chooses a non-<emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> set <var>S</var> in which to empty WeakRefs, it must empty WeakRefs for all objects in <var>S</var> simultaneously. In other words, an implementation must not empty a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> pointing to an object <var>obj</var> without emptying out other WeakRefs that, if not emptied, could result in an execution that observes the Object value of <var>obj</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-set.prototype.clear": {"num": "23.2.3.2", "title": "#sec-set.prototype.clear Set.prototype.clear ( )", "html": "<emu-clause id=\"sec-set.prototype.clear\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.clear\">#sec-set.prototype.clear</span> Set.prototype.clear ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The existing [[SetData]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is preserved because there may be existing Set Iterator objects that are suspended midway through iterating over that <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.delete": {"num": "23.4.3.3", "title": "#sec-weakset.prototype.delete WeakSet.prototype.delete ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.delete\">#sec-weakset.prototype.delete</span> WeakSet.prototype.delete ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-source-text-module-record-initialize-environment": {"num": "15.2.1.17.4", "title": "#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-initialize-environment\" aoid=\"InitializeEnvironment\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-initialize-environment\">#sec-source-text-module-record-initialize-environment</span> InitializeEnvironment ( ) Concrete Method</h1>\n          <p>The InitializeEnvironment concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> abstract method.</p>\n          <p>This abstract method performs the following steps:</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[IndirectExportEntries]], do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>e</var>.[[ExportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: All named exports from <var>module</var> are resolvable.</li><li>Let <var>realm</var> be <var>module</var>.[[Realm]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is not <emu-val>undefined</emu-val>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewModuleEnvironment\"><a href=\"#sec-newmoduleenvironment\">NewModuleEnvironment</a></emu-xref>(<var>realm</var>.[[GlobalEnv]]).</li><li>Set <var>module</var>.[[Environment]] to <var>env</var>.</li><li>For each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> <var>in</var> of <var>module</var>.[[ImportEntries]], do<ol><li>Let <var>importedModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>in</var>.[[ModuleRequest]]).</li><li>NOTE: The above call cannot fail because imported module requests are a subset of <var>module</var>.[[RequestedModules]], and these have been resolved earlier in this algorithm.</li><li>If <var>in</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>importedModule</var>).</li><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>in</var>.[[ImportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>resolution</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>resolution</var>.[[Module]]).</li><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Call <var>env</var>.CreateImportBinding(<var>in</var>.[[LocalName]], <var>resolution</var>.[[Module]], <var>resolution</var>.[[BindingName]]).</li></ol></li></ol></li></ol></li><li>Let <var>moduleContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>moduleContext</var> to <emu-val>null</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Realm]] is not <emu-val>undefined</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>moduleContext</var> to <var>module</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>moduleContext</var> to <var>module</var>.</li><li>Set the VariableEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Set the LexicalEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Set <var>module</var>.[[Context]] to <var>moduleContext</var>.</li><li>Push <var>moduleContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>moduleContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>module</var>.[[ECMAScriptCode]].</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If <var>dn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>dn</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>dn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li>Call <var>env</var>.InitializeBinding(<var>dn</var>, <var>fo</var>).</li></ol></li></ol></li></ol></li><li>Remove <var>moduleContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-forinofheadevaluation": {"num": "13.7.5.12", "title": "#sec-runtime-semantics-forinofheadevaluation Runtime Semantics: ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )", "html": "<emu-clause id=\"sec-runtime-semantics-forinofheadevaluation\" oldids=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\" aoid=\"ForIn/OfHeadEvaluation\"><span id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forinofheadevaluation\">#sec-runtime-semantics-forinofheadevaluation</span> Runtime Semantics: ForIn/OfHeadEvaluation ( <var>uninitializedBoundNames</var>, <var>expr</var>, <var>iterationKind</var> )</h1>\n        <p>The abstract operation ForIn/OfHeadEvaluation takes arguments <var>uninitializedBoundNames</var>, <var>expr</var>, and <var>iterationKind</var> (either <emu-const>enumerate</emu-const>, <emu-const>iterate</emu-const>, or <emu-const>async-iterate</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>uninitializedBoundNames</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>uninitializedBoundNames</var> has no duplicate entries.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>For each String <var>name</var> of <var>uninitializedBoundNames</var>, do<ol><li>Perform ! <var>newEnv</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li></ol></li><li>Let <var>exprRef</var> be the result of evaluating <var>expr</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>If <var>exprValue</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>(<var>obj</var>).</li><li>Let <var>nextMethod</var> be !&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <emu-val>\"next\"</emu-val>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const> or <emu-const>async-iterate</emu-const>.</li><li>If <var>iterationKind</var> is <emu-const>async-iterate</emu-const>, let <var>iteratorHint</var> be <emu-const>async</emu-const>.</li><li>Else, let <var>iteratorHint</var> be <emu-const>sync</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>exprValue</var>, <var>iteratorHint</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-event-set": {"num": "28.5.1", "title": "#sec-event-set EventSet ( execution )", "html": "<emu-clause id=\"sec-event-set\" aoid=\"EventSet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-event-set\">#sec-event-set</span> EventSet ( <var>execution</var> )</h1>\n      <p>The abstract operation EventSet takes argument <var>execution</var> (a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>events</var> be an empty Set.</li><li>For each <emu-xref href=\"#sec-agent-event-records\"><a href=\"#sec-agent-event-records\">Agent Events Record</a></emu-xref> <var>aer</var> of <var>execution</var>.[[EventsRecords]], do<ol><li>For each event <var>E</var> of <var>aer</var>.[[EventList]], do<ol><li>Add <var>E</var> to <var>events</var>.</li></ol></li></ol></li><li>Return <var>events</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getownpropertykeys": {"num": "19.1.2.11.1", "title": "#sec-getownpropertykeys Runtime Semantics: GetOwnPropertyKeys ( O, type )", "html": "<emu-clause id=\"sec-getownpropertykeys\" aoid=\"GetOwnPropertyKeys\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getownpropertykeys\">#sec-getownpropertykeys</span> Runtime Semantics: GetOwnPropertyKeys ( <var>O</var>, <var>type</var> )</h1>\n          <p>The abstract operation GetOwnPropertyKeys takes arguments <var>O</var> and <var>type</var> (either <emu-const>string</emu-const> or <emu-const>symbol</emu-const>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>keys</var> be ? <var>obj</var>.[[OwnPropertyKeys]]().</li><li>Let <var>nameList</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>nextKey</var> of <var>keys</var>, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextKey</var>) is Symbol and <var>type</var> is <emu-const>symbol</emu-const> or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextKey</var>) is String and <var>type</var> is <emu-const>string</emu-const>, then<ol><li>Append <var>nextKey</var> as the last element of <var>nameList</var>.</li></ol></li></ol></li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-encode": {"num": "18.2.6.1.1", "title": "#sec-encode Runtime Semantics: Encode ( string, unescapedSet )", "html": "<emu-clause id=\"sec-encode\" aoid=\"Encode\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-encode\">#sec-encode</span> Runtime Semantics: Encode ( <var>string</var>, <var>unescapedSet</var> )</h1>\n          <p>The abstract operation Encode takes arguments <var>string</var> (a String) and <var>unescapedSet</var> (a String). It performs URI encoding and escaping. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>strLen</var> be the number of code units in <var>string</var>.</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> equals <var>strLen</var>, return <var>R</var>.</li><li>Let <var>C</var> be the code unit at index <var>k</var> within <var>string</var>.</li><li>If <var>C</var> is in <var>unescapedSet</var>, then<ol><li>Set <var>k</var> to <var>k</var> + 1.</li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>string</var>, <var>k</var>).</li><li>If <var>cp</var>.[[IsUnpairedSurrogate]] is <emu-val>true</emu-val>, throw a <emu-val>URIError</emu-val> exception.</li><li>Set <var>k</var> to <var>k</var> + <var>cp</var>.[[CodeUnitCount]].</li><li>Let <var>Octets</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of octets resulting by applying the UTF-8 transformation to <var>cp</var>.[[CodePoint]].</li><li>For each element <var>octet</var> of <var>Octets</var>, do<ol><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li><var>R</var></li><li><emu-val>\"%\"</emu-val></li><li>the String representation of <var>octet</var>, formatted as a two-digit uppercase hexadecimal number, padded to the left with a zero if necessary</li></ul></li></ol></li></ol></li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-composewriteeventbytes": {"num": "28.5.4", "title": "#sec-composewriteeventbytes ComposeWriteEventBytes ( execution, byteIndex, Ws )", "html": "<emu-clause id=\"sec-composewriteeventbytes\" aoid=\"ComposeWriteEventBytes\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-composewriteeventbytes\">#sec-composewriteeventbytes</span> ComposeWriteEventBytes ( <var>execution</var>, <var>byteIndex</var>, <var>Ws</var> )</h1>\n      <p>The abstract operation ComposeWriteEventBytes takes arguments <var>execution</var> (a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>), <var>byteIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>Ws</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>byteLocation</var> be <var>byteIndex</var>.</li><li>Let <var>bytesRead</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>W</var> of <var>Ws</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> has <var>byteLocation</var> in its range.</li><li>Let <var>payloadIndex</var> be <var>byteLocation</var> - <var>W</var>.[[ByteIndex]].</li><li>If <var>W</var> is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> event, then<ol><li>Let <var>byte</var> be <var>W</var>.[[Payload]][<var>payloadIndex</var>].</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event.</li><li>Let <var>bytes</var> be <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref>(<var>execution</var>, <var>W</var>).</li><li>Let <var>bytesModified</var> be <var>W</var>.[[ModifyOp]](<var>bytes</var>, <var>W</var>.[[Payload]]).</li><li>Let <var>byte</var> be <var>bytesModified</var>[<var>payloadIndex</var>].</li></ol></li><li>Append <var>byte</var> to <var>bytesRead</var>.</li><li>Set <var>byteLocation</var> to <var>byteLocation</var> + 1.</li></ol></li><li>Return <var>bytesRead</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>The read-modify-write modification [[ModifyOp]] is given by the function properties on the Atomics object that introduce <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>This abstract operation composes a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of write events into a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. It is used in the event semantics of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getexportednames": {"num": "15.2.1.17.2", "title": "#sec-getexportednames GetExportedNames ( [ exportStarSet ] ) Concrete Method", "html": "<emu-clause id=\"sec-getexportednames\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getexportednames\">#sec-getexportednames</span> GetExportedNames ( [ <var>exportStarSet</var> ] ) Concrete Method</h1>\n          <p>The GetExportedNames concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>exportStarSet</var> is not present, set <var>exportStarSet</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>exportStarSet</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Source Text Module Records.</li><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>If <var>exportStarSet</var> contains <var>module</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: We've reached the starting point of an <code>export *</code> circularity.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></li><li>Append <var>module</var> to <var>exportStarSet</var>.</li><li>Let <var>exportedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[LocalExportEntries]], do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> provides the direct binding for this export.</li><li>Append <var>e</var>.[[ExportName]] to <var>exportedNames</var>.</li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[IndirectExportEntries]], do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> imports a specific binding for this export.</li><li>Append <var>e</var>.[[ExportName]] to <var>exportedNames</var>.</li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[StarExportEntries]], do<ol><li>Let <var>requestedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>Let <var>starNames</var> be ? <var>requestedModule</var>.GetExportedNames(<var>exportStarSet</var>).</li><li>For each element <var>n</var> of <var>starNames</var>, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>n</var>, <emu-val>\"default\"</emu-val>) is <emu-val>false</emu-val>, then<ol><li>If <var>n</var> is not an element of <var>exportedNames</var>, then<ol><li>Append <var>n</var> to <var>exportedNames</var>.</li></ol></li></ol></li></ol></li></ol></li><li>Return <var>exportedNames</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>GetExportedNames does not filter out or throw an exception for names that have ambiguous star export bindings.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-objectdefineproperties": {"num": "19.1.2.3.1", "title": "#sec-objectdefineproperties Runtime Semantics: ObjectDefineProperties ( O, Properties )", "html": "<emu-clause id=\"sec-objectdefineproperties\" aoid=\"ObjectDefineProperties\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-objectdefineproperties\">#sec-objectdefineproperties</span> Runtime Semantics: ObjectDefineProperties ( <var>O</var>, <var>Properties</var> )</h1>\n          <p>The abstract operation ObjectDefineProperties takes arguments <var>O</var> and <var>Properties</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>props</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>Properties</var>).</li><li>Let <var>keys</var> be ? <var>props</var>.[[OwnPropertyKeys]]().</li><li>Let <var>descriptors</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>nextKey</var> of <var>keys</var>, do<ol><li>Let <var>propDesc</var> be ? <var>props</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>propDesc</var> is not <emu-val>undefined</emu-val> and <var>propDesc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>descObj</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>props</var>, <var>nextKey</var>).</li><li>Let <var>desc</var> be ?&#160;<emu-xref aoid=\"ToPropertyDescriptor\"><a href=\"#sec-topropertydescriptor\">ToPropertyDescriptor</a></emu-xref>(<var>descObj</var>).</li><li>Append the pair (a two element <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>) consisting of <var>nextKey</var> and <var>desc</var> to the end of <var>descriptors</var>.</li></ol></li></ol></li><li>For each element <var>pair</var> of <var>descriptors</var>, do<ol><li>Let <var>P</var> be the first element of <var>pair</var>.</li><li>Let <var>desc</var> be the second element of <var>pair</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>P</var>, <var>desc</var>).</li></ol></li><li>Return <var>O</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-moduledeclarationlinking": {"num": "15.2.1.16.1", "title": "#sec-moduledeclarationlinking Link ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduledeclarationlinking\" oldids=\"sec-moduledeclarationinstantiation\"><span id=\"sec-moduledeclarationinstantiation\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduledeclarationlinking\">#sec-moduledeclarationlinking</span> Link ( ) Concrete Method</h1>\n          <p>The Link concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>On success, Link transitions this module's [[Status]] from <emu-const>unlinked</emu-const> to <emu-const>linked</emu-const>. On failure, an exception is thrown and this module's [[Status]] remains <emu-const>unlinked</emu-const>.</p>\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>):</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is not <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>linking</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>unlinked</emu-const>.</li><li>Set <var>m</var>.[[Environment]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSIndex]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSAncestorIndex]] to <emu-val>undefined</emu-val>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-InnerModuleLinking\"><h1><span class=\"secnum\">15.2.1.16.1.1</span>#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-set.prototype.has": {"num": "23.2.3.7", "title": "#sec-set.prototype.has Set.prototype.has ( value )", "html": "<emu-clause id=\"sec-set.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.has\">#sec-set.prototype.has</span> Set.prototype.has ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-innermoduleevaluation": {"num": "15.2.1.16.2.1", "title": "#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )", "html": "<emu-clause id=\"sec-innermoduleevaluation\" aoid=\"InnerModuleEvaluation\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-innermoduleevaluation\">#sec-innermoduleevaluation</span> InnerModuleEvaluation ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleEvaluation takes arguments <var>module</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var>. It is used by Evaluate to perform the actual evaluation process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as <var>module</var>'s [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the same way as in <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Evaluate().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const>, then<ol><li>If <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>, return <var>index</var>.</li><li>Otherwise, return <var>module</var>.[[EvaluationError]].</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluating</emu-const>, return <var>index</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>evaluating</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>NOTE: Link must be completed successfully prior to invoking this method, so every requested module is guaranteed to resolve successfully.</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>evaluating</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-globaldeclarationinstantiation": {"num": "15.1.11", "title": "#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> Runtime Semantics: GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>The abstract operation GlobalDeclarationInstantiation takes arguments <var>script</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the LexicallyDeclaredNames of <var>script</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>script</var>.</li><li>For each element <var>name</var> of <var>lexNames</var>, do<ol><li>If <var>env</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>env</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each element <var>name</var> of <var>varNames</var>, do<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> of the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>script</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>env</var>.</li><li>Perform ? <var>env</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> of <var>declaredVarNames</var>, do<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-get-set.prototype.size": {"num": "23.2.3.9", "title": "#sec-get-set.prototype.size get Set.prototype.size", "html": "<emu-clause id=\"sec-get-set.prototype.size\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-set.prototype.size\">#sec-get-set.prototype.size</span> get Set.prototype.size</h1>\n        <p><code>Set.prototype.size</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>Let <var>count</var> be 0.</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, set <var>count</var> to <var>count</var> + 1.</li></ol></li><li>Return <var>count</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.has": {"num": "23.4.3.4", "title": "#sec-weakset.prototype.has WeakSet.prototype.has ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.has\">#sec-weakset.prototype.has</span> WeakSet.prototype.has ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.has": {"num": "23.1.3.7", "title": "#sec-map.prototype.has Map.prototype.has ( key )", "html": "<emu-clause id=\"sec-map.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.has\">#sec-map.prototype.has</span> Map.prototype.has ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.has": {"num": "23.3.3.4", "title": "#sec-weakmap.prototype.has WeakMap.prototype.has ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.has\">#sec-weakmap.prototype.has</span> WeakMap.prototype.has ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.clear": {"num": "23.1.3.1", "title": "#sec-map.prototype.clear Map.prototype.clear ( )", "html": "<emu-clause id=\"sec-map.prototype.clear\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.clear\">#sec-map.prototype.clear</span> Map.prototype.clear ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The existing [[MapData]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is preserved because there may be existing Map Iterator objects that are suspended midway through iterating over that <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.get": {"num": "23.3.3.3", "title": "#sec-weakmap.prototype.get WeakMap.prototype.get ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.get\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.get\">#sec-weakmap.prototype.get</span> WeakMap.prototype.get ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>undefined</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <var>p</var>.[[Value]].</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-codepointstostring": {"num": "10.1.2", "title": "#sec-codepointstostring Static Semantics: CodePointsToString ( text )", "html": "<emu-clause id=\"sec-codepointstostring\" aoid=\"CodePointsToString\" oldids=\"sec-utf16encode\"><span id=\"sec-utf16encode\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-codepointstostring\">#sec-codepointstostring</span> Static Semantics: CodePointsToString ( <var>text</var> )</h1>\n      <p>The abstract operation CodePointsToString takes argument <var>text</var> (a sequence of Unicode code points). It converts <var>text</var> into a String value, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>result</var> be the empty String.</li><li>For each code point <var>cp</var> of <var>text</var>, do<ol><li>Set <var>result</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>result</var> and !&#160;<emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>cp</var>).</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-moduleevaluation": {"num": "15.2.1.16.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>Evaluate transitions this module's [[Status]] from <emu-const>linked</emu-const> to <emu-const>evaluated</emu-const>.</p>\n          <p>If execution results in an exception, that exception is recorded in the [[EvaluationError]] field and rethrown by future invocations of Evaluate.</p>\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>):</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This call to Evaluate is not happening at the same time as another call to Evaluate within the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</li><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>evaluating</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-runtime-semantics-caseblockevaluation": {"num": "13.12.9", "title": "#sec-runtime-semantics-caseblockevaluation Runtime Semantics: CaseBlockEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-caseblockevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-caseblockevaluation\">#sec-runtime-semantics-caseblockevaluation</span> Runtime Semantics: CaseBlockEvaluation</h1>\n      <p>With parameter <var>input</var>.</p>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"11eac196\"><emu-t>{</emu-t><emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>A</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> items in <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>, in source text order.</li><li>Let <var>found</var> be <emu-val>false</emu-val>.</li><li>For each <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var> of <var>A</var>, do<ol><li>If <var>found</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>found</var> to ?&#160;<emu-xref aoid=\"CaseClauseIsSelected\"><a href=\"#sec-runtime-semantics-caseclauseisselected\">CaseClauseIsSelected</a></emu-xref>(<var>C</var>, <var>input</var>).</li></ol></li><li>If <var>found</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>R</var> be the result of evaluating <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"503b8396\"><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>A</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> items in the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>, in source text order.</li></ol></li><li>Else,<ol><li>Let <var>A</var> be &#171; &#187;.</li></ol></li><li>Let <var>found</var> be <emu-val>false</emu-val>.</li><li>For each <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var> of <var>A</var>, do<ol><li>If <var>found</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>found</var> to ?&#160;<emu-xref aoid=\"CaseClauseIsSelected\"><a href=\"#sec-runtime-semantics-caseclauseisselected\">CaseClauseIsSelected</a></emu-xref>(<var>C</var>, <var>input</var>).</li></ol></li><li>If <var>found</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>R</var> be the result of evaluating <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li></ol></li><li>Let <var>foundInB</var> be <emu-val>false</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>B</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> items in the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>, in source text order.</li></ol></li><li>Else,<ol><li>Let <var>B</var> be &#171; &#187;.</li></ol></li><li>If <var>found</var> is <emu-val>false</emu-val>, then<ol><li>For each <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var> of <var>B</var>, do<ol><li>If <var>foundInB</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>foundInB</var> to ?&#160;<emu-xref aoid=\"CaseClauseIsSelected\"><a href=\"#sec-runtime-semantics-caseclauseisselected\">CaseClauseIsSelected</a></emu-xref>(<var>C</var>, <var>input</var>).</li></ol></li><li>If <var>foundInB</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>R</var> be the result of evaluating <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li></ol></li></ol></li><li>If <var>foundInB</var> is <emu-val>true</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>R</var> be the result of evaluating <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li><li>NOTE: The following is another complete iteration of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var> of <var>B</var>, do<ol><li>Let <var>R</var> be the result of evaluating <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-internalizejsonproperty": {"num": "24.5.1.1", "title": "#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name, reviver )", "html": "<emu-clause id=\"sec-internalizejsonproperty\" aoid=\"InternalizeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-internalizejsonproperty\">#sec-internalizejsonproperty</span> Runtime Semantics: InternalizeJSONProperty ( <var>holder</var>, <var>name</var>, <var>reviver</var> )</h1>\n        <p>The abstract operation InternalizeJSONProperty takes arguments <var>holder</var> (an Object), <var>name</var> (a String), and <var>reviver</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This algorithm intentionally does not throw an exception if either [[Delete]] or <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> return <emu-val>false</emu-val>.</p>\n        </div></emu-note>\n        <emu-alg><ol><li>Let <var>val</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is Object, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>val</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>I</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>val</var>).</li><li>Repeat, while <var>I</var> &lt; <var>len</var>,<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>reviver</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>newElement</var>).</li></ol></li><li>Set <var>I</var> to <var>I</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>keys</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>val</var>, <emu-const>key</emu-const>).</li><li>For each String <var>P</var> of <var>keys</var>, do<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>reviver</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>newElement</var>).</li></ol></li></ol></li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>reviver</var>, <var>holder</var>, &#171; <var>name</var>, <var>val</var> &#187;).</li></ol></emu-alg>\n        <p>It is not permitted for a conforming implementation of <code>JSON.parse</code> to extend the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by defining a different parse function.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.14", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b8ea6aa5\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be %Object.prototype%.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(...args) { <span class=\"hljs-keyword\">super</span>(...args); }</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>() {}</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be ! DefineMethod of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>m</var> of <var>methods</var>, do<ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-string.fromcharcode": {"num": "21.1.2.1", "title": "#sec-string.fromcharcode String.fromCharCode ( ...codeUnits )", "html": "<emu-clause id=\"sec-string.fromcharcode\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcharcode\">#sec-string.fromcharcode</span> String.fromCharCode ( ...<var>codeUnits</var> )</h1>\n        <p>The <code>String.fromCharCode</code> function may be called with any number of arguments which form the rest parameter <var>codeUnits</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>length</var> be the number of elements in <var>codeUnits</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>next</var> of <var>codeUnits</var>, do<ol><li>Let <var>nextCU</var> be ?&#160;<emu-xref aoid=\"ToUint16\"><a href=\"#sec-touint16\">ToUint16</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextCU</var> to the end of <var>elements</var>.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>codeUnits</var> is empty, the empty String is returned.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCharCode</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-evaldeclarationinstantiation": {"num": "18.2.1.3", "title": "#sec-evaldeclarationinstantiation Runtime Semantics: EvalDeclarationInstantiation ( body, varEnv, lexEnv, strict )", "html": "<emu-clause id=\"sec-evaldeclarationinstantiation\" aoid=\"EvalDeclarationInstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</span> Runtime Semantics: EvalDeclarationInstantiation ( <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strict</var> )</h1>\n        <p>The abstract operation EvalDeclarationInstantiation takes arguments <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, and <var>strict</var>. It performs the following steps when called:</p>\n        <!--\n          WARNING: If you add, remove, rename, or repurpose any variable names\n                   within this algorithm, you may need to update\n                   #sec-web-compat-evaldeclarationinstantiation and\n                   #sec-variablestatements-in-catch-blocks accordingly.\n        -->\n        <emu-alg><ol><li>Let <var>varNames</var> be the VarDeclaredNames of <var>body</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>body</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>For each element <var>name</var> of <var>varNames</var>, do<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: <code>eval</code> will not create a global var declaration that would be shadowed by a global lexical declaration.</li></ol></li></ol></li><li>Let <var>thisEnv</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisEnv</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisEnv</var> is not an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then<ol><li>NOTE: The environment of with statements cannot contain any lexical declaration so it doesn't need to be checked for var/let hoisting conflicts.</li><li>For each element <var>name</var> of <var>varNames</var>, do<ol><li>If <var>thisEnv</var>.HasBinding(<var>name</var>) is <emu-val>true</emu-val>, then<ol><li id=\"step-evaldeclarationinstantiation-throw-duplicate-binding\">Throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: Annex <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref> defines alternate semantics for the above step.</li></ol></li><li>NOTE: A <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> will not hoist var declaration over a like-named lexical declaration.</li></ol></li></ol></li><li>Set <var>thisEnv</var> to <var>thisEnv</var>.[[OuterEnv]].</li></ol></li></ol></li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li id=\"step-evaldeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-evaldeclarationinstantiation\"><a href=\"#sec-web-compat-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> of the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Let <var>vnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li id=\"step-evaldeclarationinstantiation-post-validation\">NOTE: No abnormal terminations occur after this algorithm step unless <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> and the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>body</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>fn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnv</var>.CreateMutableBinding(<var>fn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step <emu-xref href=\"#step-evaldeclarationinstantiation-post-validation\"><a href=\"#step-evaldeclarationinstantiation-post-validation\" class=\"excluded-xref\" excluded-id=\"step-evaldeclarationinstantiation-post-validation\">#step-evaldeclarationinstantiation-post-validation</a></emu-xref>.</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each String <var>vn</var> of <var>declaredVarNames</var>, do<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>vn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnv</var>.CreateMutableBinding(<var>vn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step <emu-xref href=\"#step-evaldeclarationinstantiation-post-validation\"><a href=\"#step-evaldeclarationinstantiation-post-validation\" class=\"excluded-xref\" excluded-id=\"step-evaldeclarationinstantiation-post-validation\">#step-evaldeclarationinstantiation-post-validation</a></emu-xref>.</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>vn</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative version of this algorithm is described in <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-copydataproperties": {"num": "7.3.25", "title": "#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )", "html": "<emu-clause id=\"sec-copydataproperties\" aoid=\"CopyDataProperties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-copydataproperties\">#sec-copydataproperties</span> CopyDataProperties ( <var>target</var>, <var>source</var>, <var>excludedItems</var> )</h1>\n      <p>The abstract operation CopyDataProperties takes arguments <var>target</var>, <var>source</var>, and <var>excludedItems</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>excludedItems</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of property keys.</li><li>If <var>source</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>target</var>.</li><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var>, do<ol><li>Let <var>excluded</var> be <emu-val>false</emu-val>.</li><li>For each element <var>e</var> of <var>excludedItems</var>, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>nextKey</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>excluded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>excluded</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>target</var>, <var>nextKey</var>, <var>propValue</var>).</li></ol></li></ol></li></ol></li><li>Return <var>target</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The target passed in here is always a newly created object which is not directly accessible in case of an error being thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-coherent-reads": {"num": "28.7.2", "title": "#sec-coherent-reads Coherent Reads", "html": "<emu-clause id=\"sec-coherent-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-coherent-reads\">#sec-coherent-reads</span> Coherent Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has coherent reads if the following abstract operation returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> of <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>Let <var>Ws</var> be <var>execution</var>.[[ReadsBytesFrom]](<var>R</var>).</li><li>Let <var>byteLocation</var> be <var>R</var>.[[ByteIndex]].</li><li>For each element <var>W</var> of <var>Ws</var>, do<ol><li>If (<var>R</var>, <var>W</var>) is in <var>execution</var>.[[HappensBefore]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>If there is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>V</var> that has <var>byteLocation</var> in its range such that the pairs (<var>W</var>, <var>V</var>) and (<var>V</var>, <var>R</var>) are in <var>execution</var>.[[HappensBefore]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>Set <var>byteLocation</var> to <var>byteLocation</var> + 1.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-triggerpromisereactions": {"num": "26.6.1.8", "title": "#sec-triggerpromisereactions TriggerPromiseReactions ( reactions, argument )", "html": "<emu-clause id=\"sec-triggerpromisereactions\" aoid=\"TriggerPromiseReactions\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-triggerpromisereactions\">#sec-triggerpromisereactions</span> TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )</h1>\n        <p>The abstract operation TriggerPromiseReactions takes arguments <var>reactions</var> (a collection of PromiseReaction Records) and <var>argument</var>. It enqueues a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> for each record in <var>reactions</var>. Each such <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> processes the [[Type]] and [[Handler]] of the PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, and if the [[Handler]] is not <emu-const>empty</emu-const>, calls it passing the given argument. If the [[Handler]] is <emu-const>empty</emu-const>, the behaviour is determined by the [[Type]]. It performs the following steps when called:</p>\n        <emu-alg><ol><li>For each element <var>reaction</var> of <var>reactions</var>, in original insertion order, do<ol><li>Let <var>job</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>reaction</var>, <var>argument</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>job</var>.[[Job]], <var>job</var>.[[Realm]]).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.delete": {"num": "23.3.3.2", "title": "#sec-weakmap.prototype.delete WeakMap.prototype.delete ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.delete\">#sec-weakmap.prototype.delete</span> WeakMap.prototype.delete ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-set.prototype.delete": {"num": "23.2.3.4", "title": "#sec-set.prototype.delete Set.prototype.delete ( value )", "html": "<emu-clause id=\"sec-set.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.delete\">#sec-set.prototype.delete</span> Set.prototype.delete ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-quotejsonstring": {"num": "24.5.2.2", "title": "#sec-quotejsonstring Runtime Semantics: QuoteJSONString ( value )", "html": "<emu-clause id=\"sec-quotejsonstring\" aoid=\"QuoteJSONString\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-quotejsonstring\">#sec-quotejsonstring</span> Runtime Semantics: QuoteJSONString ( <var>value</var> )</h1>\n        <p>The abstract operation QuoteJSONString takes argument <var>value</var>. It wraps <var>value</var> in 0x0022 (QUOTATION MARK) code units and escapes certain other code units within it. This operation interprets <var>value</var> as a sequence of UTF-16 encoded code points, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>product</var> be the String value consisting solely of the code unit 0x0022 (QUOTATION MARK).</li><li>For each code point <var>C</var> of !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>value</var>), do<ol><li>If <var>C</var> is listed in the &#8220;Code Point&#8221; column of <emu-xref href=\"#table-json-single-character-escapes\"><a href=\"#table-json-single-character-escapes\" class=\"excluded-xref\" excluded-id=\"table-json-single-character-escapes\">#table-json-single-character-escapes</a></emu-xref>, then<ol><li>Set <var>product</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>product</var> and the escape sequence for <var>C</var> as specified in the &#8220;Escape Sequence&#8221; column of the corresponding row.</li></ol></li><li>Else if <var>C</var> has a numeric value less than 0x0020 (SPACE), or if <var>C</var> has the same numeric value as a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> or <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, then<ol><li>Let <var>unit</var> be the code unit whose numeric value is that of <var>C</var>.</li><li>Set <var>product</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>product</var> and <emu-xref aoid=\"UnicodeEscape\"><a href=\"#sec-unicodeescape\">UnicodeEscape</a></emu-xref>(<var>unit</var>).</li></ol></li><li>Else,<ol><li>Set <var>product</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>product</var> and !&#160;<emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>C</var>).</li></ol></li></ol></li><li>Set <var>product</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>product</var> and the code unit 0x0022 (QUOTATION MARK).</li><li>Return <var>product</var>.</li></ol></emu-alg>\n        <emu-table id=\"table-json-single-character-escapes\" caption=\"JSON Single Character Escape Sequences\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-json-single-character-escapes\">#table-json-single-character-escapes</span>: JSON Single Character Escape Sequences</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Code Point\n              </th>\n              <th>\n                Unicode Character Name\n              </th>\n              <th>\n                Escape Sequence\n              </th>\n            </tr>\n            <tr>\n              <td>\n                U+0008\n              </td>\n              <td>\n                BACKSPACE\n              </td>\n              <td>\n                <code>\\b</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+0009\n              </td>\n              <td>\n                CHARACTER TABULATION\n              </td>\n              <td>\n                <code>\\t</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+000A\n              </td>\n              <td>\n                LINE FEED (LF)\n              </td>\n              <td>\n                <code>\\n</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+000C\n              </td>\n              <td>\n                FORM FEED (FF)\n              </td>\n              <td>\n                <code>\\f</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+000D\n              </td>\n              <td>\n                CARRIAGE RETURN (CR)\n              </td>\n              <td>\n                <code>\\r</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+0022\n              </td>\n              <td>\n                QUOTATION MARK\n              </td>\n              <td>\n                <code>\\\"</code>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                U+005C\n              </td>\n              <td>\n                REVERSE SOLIDUS\n              </td>\n              <td>\n                <code>\\\\</code>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-array.prototype.push": {"num": "22.1.3.20", "title": "#sec-array.prototype.push Array.prototype.push ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.push\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.push\">#sec-array.prototype.push</span> Array.prototype.push ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are appended to the end of the array, in the order in which they appear. The new length of the array is returned as the result of the call.</p>\n        </div></emu-note>\n        <p>When the <code>push</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>argCount</var> be the number of elements in <var>items</var>.</li><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>For each element <var>E</var> of <var>items</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>len</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>len</var> to <var>len</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>push</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>push</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-hosteventset": {"num": "28.5.3", "title": "#sec-hosteventset HostEventSet ( execution )", "html": "<emu-clause id=\"sec-hosteventset\" aoid=\"HostEventSet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosteventset\">#sec-hosteventset</span> HostEventSet ( <var>execution</var> )</h1>\n      <p>The abstract operation HostEventSet takes argument <var>execution</var> (a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>events</var> be an empty Set.</li><li>For each event <var>E</var> of <emu-xref aoid=\"EventSet\"><a href=\"#sec-event-set\">EventSet</a></emu-xref>(<var>execution</var>), do<ol><li>If <var>E</var> is not in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), add <var>E</var> to <var>events</var>.</li></ol></li><li>Return <var>events</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-object.getownpropertydescriptors": {"num": "19.1.2.9", "title": "#sec-object.getownpropertydescriptors Object.getOwnPropertyDescriptors ( O )", "html": "<emu-clause id=\"sec-object.getownpropertydescriptors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.getownpropertydescriptors\">#sec-object.getownpropertydescriptors</span> Object.getOwnPropertyDescriptors ( <var>O</var> )</h1>\n        <p>When the <code>getOwnPropertyDescriptors</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>ownKeys</var> be ? <var>obj</var>.[[OwnPropertyKeys]]().</li><li>Let <var>descriptors</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Object.prototype%).</li><li>For each element <var>key</var> of <var>ownKeys</var>, do<ol><li>Let <var>desc</var> be ? <var>obj</var>.[[GetOwnProperty]](<var>key</var>).</li><li>Let <var>descriptor</var> be !&#160;<emu-xref aoid=\"FromPropertyDescriptor\"><a href=\"#sec-frompropertydescriptor\">FromPropertyDescriptor</a></emu-xref>(<var>desc</var>).</li><li>If <var>descriptor</var> is not <emu-val>undefined</emu-val>, perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>descriptors</var>, <var>key</var>, <var>descriptor</var>).</li></ol></li><li>Return <var>descriptors</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {"table-3": "Table 4", "table-39": "Table 44", "table-json-single-character-escapes": "Table 65"}}}