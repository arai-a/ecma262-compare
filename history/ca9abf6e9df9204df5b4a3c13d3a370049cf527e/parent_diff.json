{"from": {"secList": ["sec-newglobalenvironment", "sec-runtime-semantics-bindinginstantiation", "sec-createglobalfunctionbinding", "sec-declarative-environment-records-createmutablebinding-n-d", "sec-module-environment-records-deletebinding-n", "sec-object-environment-records-setmutablebinding-n-v-s", "sec-variable-statement-runtime-semantics-evaluation", "sec-global-environment-records-getthisbinding", "sec-function-environment-records", "sec-module-environment-records", "sec-candeclareglobalvar", "sec-ordinarycallbindthis", "sec-module-environment-records-getbindingvalue-n-s", "sec-hasrestrictedglobalproperty", "sec-global-environment-records-createmutablebinding-n-d", "sec-declarative-environment-records-getbindingvalue-n-s", "sec-hasvardeclaration", "sec-declarative-environment-records-createimmutablebinding-n-s", "sec-with-statement", "sec-object-environment-records-getbindingvalue-n-s", "sec-global-environment-records-setmutablebinding-n-v-s", "sec-createglobalvarbinding", "sec-declarative-environment-records", "sec-global-environment-records-createimmutablebinding-n-s", "sec-web-compat-evaldeclarationinstantiation", "sec-newdeclarativeenvironment", "sec-declarative-environment-records-deletebinding-n", "sec-haslexicaldeclaration", "sec-createimportbinding", "sec-object-environment-records", "sec-object-environment-records-hasbinding-n", "sec-evaldeclarationinstantiation", "sec-declarative-environment-records-initializebinding-n-v", "sec-declarative-environment-records-setmutablebinding-n-v-s", "sec-global-environment-records-deletebinding-n", "sec-global-environment-records-initializebinding-n-v", "sec-object-environment-records-deletebinding-n", "sec-global-environment-records-getbindingvalue-n-s", "sec-object-environment-records-createmutablebinding-n-d", "sec-object-environment-records-initializebinding-n-v", "sec-candeclareglobalfunction", "sec-object-environment-records-withbaseobject", "sec-globaldeclarationinstantiation", "sec-global-environment-records", "sec-newobjectenvironment", "sec-the-environment-record-type-hierarchy", "sec-global-environment-records-hasbinding-n", "sec-abstract-module-records", "sec-declarative-environment-records-hasbinding-n", "sec-blockdeclarationinstantiation", "sec-newmoduleenvironment"], "secData": {"sec-newglobalenvironment": {"num": "8.1.2.5", "title": "#sec-newglobalenvironment NewGlobalEnvironment ( G, thisValue )", "html": "<emu-clause id=\"sec-newglobalenvironment\" aoid=\"NewGlobalEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newglobalenvironment\">#sec-newglobalenvironment</span> NewGlobalEnvironment ( <var>G</var>, <var>thisValue</var> )</h1>\n        <p>The abstract operation NewGlobalEnvironment takes arguments <var>G</var> and <var>thisValue</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>objRec</var> be a new object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing <var>G</var> as the binding object.</li><li>Let <var>dclRec</var> be a new declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing no bindings.</li><li>Let <var>env</var> be a new global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Set <var>env</var>.[[ObjectRecord]] to <var>objRec</var>.</li><li>Set <var>env</var>.[[GlobalThisValue]] to <var>thisValue</var>.</li><li>Set <var>env</var>.[[DeclarativeRecord]] to <var>dclRec</var>.</li><li>Set <var>env</var>.[[VarNames]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>env</var>.[[OuterEnv]] to <emu-val>null</emu-val>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-bindinginstantiation": {"num": "13.7.5.10", "title": "#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation", "html": "<emu-clause id=\"sec-runtime-semantics-bindinginstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-bindinginstantiation\">#sec-runtime-semantics-bindinginstantiation</span> Runtime Semantics: BindingInstantiation</h1>\n        <p>With parameter <var>environment</var>.</p>\n        <emu-grammar><emu-production name=\"ForDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d32d6fbc\"><emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt><emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>environment</var> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>For each element <var>name</var> of the BoundNames of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, do<ol><li>If IsConstantDeclaration of <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>environment</var>.CreateImmutableBinding(<var>name</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>environment</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).\n        </li></ol></li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createglobalfunctionbinding": {"num": "8.1.1.4.18", "title": "#sec-createglobalfunctionbinding CreateGlobalFunctionBinding ( N, V, D )", "html": "<emu-clause id=\"sec-createglobalfunctionbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createglobalfunctionbinding\">#sec-createglobalfunctionbinding</span> CreateGlobalFunctionBinding ( <var>N</var>, <var>V</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateGlobalFunctionBinding for global Environment Records creates and initializes a mutable binding in the associated object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> and records the bound name in the associated [[VarNames]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. If a binding already exists, it is replaced.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val> or <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>V</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>D</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>V</var> }.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>globalObject</var>, <var>N</var>, <var>desc</var>).</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>ObjRec</var> has been initialized.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>globalObject</var>, <var>N</var>, <var>V</var>, <emu-val>false</emu-val>).</li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> does not contain <var>N</var>, then<ol><li>Append <var>N</var> to <var>varDeclaredNames</var>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Global function declarations are always represented as own properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. If possible, an existing own property is reconfigured to have a standard set of attribute values. Steps 8-9 are equivalent to what calling the InitializeBinding concrete method would do and if <var>globalObject</var> is a Proxy will produce the same sequence of Proxy trap calls.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-declarative-environment-records-createmutablebinding-n-d": {"num": "8.1.1.1.2", "title": "#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-declarative-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createmutablebinding-n-d\">#sec-declarative-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for declarative Environment Records creates a new mutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new binding is marked as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create a mutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>D</var> is <emu-val>true</emu-val>, record that the newly created binding may be deleted by a subsequent DeleteBinding call.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-module-environment-records-deletebinding-n": {"num": "8.1.1.5.2", "title": "#sec-module-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-module-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-deletebinding-n\">#sec-module-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for module Environment Records refuses to delete bindings.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This method is never invoked. See <emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Module Environment Records are only used within strict code and an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule prevents the delete operator, in strict code, from being applied to a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> that would resolve to a module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> binding. See  <emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.2.5", "title": "#sec-object-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-object-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-setmutablebinding-n-v-s\">#sec-object-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for object Environment Records attempts to set the value of the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s associated binding object's property whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>bindings</var>, <var>N</var>, <var>V</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-variable-statement-runtime-semantics-evaluation": {"num": "13.3.2.4", "title": "#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-variable-statement-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement-runtime-semantics-evaluation\">#sec-variable-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3347a1bd\"><emu-t>var</emu-t><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a0057011\"><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"89becb83\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is nested within a with statement and the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is the same as a <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> of the binding object of the with statement's object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then step 5 will assign <var>value</var> to the property instead of assigning to the VariableEnvironment binding of the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ddd53e5\"><emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Return the result of performing BindingInitialization for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> passing <var>rval</var> and <emu-val>undefined</emu-val> as arguments.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-global-environment-records-getthisbinding": {"num": "8.1.1.4.11", "title": "#sec-global-environment-records-getthisbinding GetThisBinding ( )", "html": "<emu-clause id=\"sec-global-environment-records-getthisbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-getthisbinding\">#sec-global-environment-records-getthisbinding</span> GetThisBinding ( )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Return <var>envRec</var>.[[GlobalThisValue]].\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-function-environment-records": {"num": "8.1.1.3", "title": "#sec-function-environment-records Function Environment Records", "html": "<emu-clause id=\"sec-function-environment-records\" oldids=\"function-environment\">\n        <span id=\"function-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records\">#sec-function-environment-records</span> Function Environment Records</h1>\n        <p>A  <dfn>function Environment Record</dfn> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is used to represent the top-level scope of a function and, if the function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, provides a <code>this</code> binding. If a function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> function and references <code>super</code>, its function Environment Record also contains the state that is used to perform <code>super</code> method invocations from within the function.</p>\n        <p>Function Environment Records have the additional state fields listed in  <emu-xref href=\"#table-16\"><a href=\"#table-16\" class=\"excluded-xref\" excluded-id=\"table-16\">#table-16</a></emu-xref>.</p>\n        <emu-table id=\"table-16\" caption=\"Additional Fields of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-16\">#table-16</span>: Additional Fields of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ThisValue]]\n              \n              </td>\n              <td>\n                Any\n              \n              </td>\n              <td>\n                This is the <emu-val>this</emu-val> value used for this invocation of the function.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ThisBindingStatus]]\n              \n              </td>\n              <td>\n                <emu-const>lexical</emu-const> | <emu-const>initialized</emu-const> | <emu-const>uninitialized</emu-const>\n              \n              </td>\n              <td>\n                If the value is <emu-const>lexical</emu-const>, this is an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and does not have a local <emu-val>this</emu-val> value.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[FunctionObject]]\n              \n              </td>\n              <td>\n                Object\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose invocation caused this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> to be created.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HomeObject]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If the associated function has <code>super</code> property accesses and is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, [[HomeObject]] is the object that the function is bound to as a method. The default value for [[HomeObject]] is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[NewTarget]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] <var>newTarget</var> parameter. Otherwise, its value is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>Function Environment Records support all of the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for HasThisBinding and HasSuperBinding. In addition, function Environment Records support the methods listed in  <emu-xref href=\"#table-17\"><a href=\"#table-17\" class=\"excluded-xref\" excluded-id=\"table-17\">#table-17</a></emu-xref>:</p>\n        <emu-table id=\"table-17\" caption=\"Additional Methods of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-17\">#table-17</span>: Additional Methods of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                BindThisValue(V)\n              \n              </td>\n              <td>\n                Set the [[ThisValue]] and record that it has been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding. Throws a <emu-val>ReferenceError</emu-val> if the <code>this</code> binding has not been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetSuperBase()\n              \n              </td>\n              <td>\n                Return the object that is the base for <code>super</code> property accesses bound in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The object is derived from this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s [[HomeObject]] field. The value <emu-val>undefined</emu-val> indicates that <code>super</code> property accesses will produce runtime errors.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for function Environment Records is defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-bindthisvalue\"><h1><span class=\"secnum\">8.1.1.3.1</span>#sec-bindthisvalue BindThisValue ( V )</h1>...</div><div id=\"excluded-sec-function-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.3.2</span>#sec-function-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.3.3</span>#sec-function-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.3.4</span>#sec-function-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-getsuperbase\"><h1><span class=\"secnum\">8.1.1.3.5</span>#sec-getsuperbase GetSuperBase ( )</h1>...</div></emu-clause>\n\n      "}, "sec-module-environment-records": {"num": "8.1.1.5", "title": "#sec-module-environment-records Module Environment Records", "html": "<emu-clause id=\"sec-module-environment-records\" oldids=\"module-environment\">\n        <span id=\"module-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records\">#sec-module-environment-records</span> Module Environment Records</h1>\n        <p>A module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is used to represent the outer scope of an ECMAScript <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. In additional to normal mutable and immutable bindings, module Environment Records also provide immutable import bindings which are bindings that provide indirect access to a target binding that exists in another <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Module Environment Records support all of the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In addition, module Environment Records support the methods listed in  <emu-xref href=\"#table-20\"><a href=\"#table-20\" class=\"excluded-xref\" excluded-id=\"table-20\">#table-20</a></emu-xref>:</p>\n        <emu-table id=\"table-20\" caption=\"Additional Methods of Module Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-20\">#table-20</span>: Additional Methods of Module Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                CreateImportBinding(N, M, N2)\n              \n              </td>\n              <td>\n                Create an immutable indirect binding in a module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is a binding that exists in <var>M</var>'s module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for module Environment Records are defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-module-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.5.1</span>#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-module-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.5.2</span>#sec-module-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-module-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.5.3</span>#sec-module-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-module-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.5.4</span>#sec-module-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-createimportbinding\"><h1><span class=\"secnum\">8.1.1.5.5</span>#sec-createimportbinding CreateImportBinding ( N, M, N2 )</h1>...</div></emu-clause>\n    "}, "sec-candeclareglobalvar": {"num": "8.1.1.4.15", "title": "#sec-candeclareglobalvar CanDeclareGlobalVar ( N )", "html": "<emu-clause id=\"sec-candeclareglobalvar\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candeclareglobalvar\">#sec-candeclareglobalvar</span> CanDeclareGlobalVar ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CanDeclareGlobalVar for global Environment Records determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument <var>N</var>. Redundant var declarations and var declarations for pre-existing <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> properties are allowed.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>hasProperty</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>If <var>hasProperty</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ordinarycallbindthis": {"num": "9.2.1.2", "title": "#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )", "html": "<emu-clause id=\"sec-ordinarycallbindthis\" aoid=\"OrdinaryCallBindThis\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</span> OrdinaryCallBindThis ( <var>F</var>, <var>calleeContext</var>, <var>thisArgument</var> )</h1>\n        <p>The abstract operation OrdinaryCallBindThis takes arguments <var>F</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>), <var>calleeContext</var> (an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>), and <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>thisMode</var> be <var>F</var>.[[ThisMode]].</li><li>If <var>thisMode</var> is <emu-const>lexical</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Let <var>localEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>If <var>thisMode</var> is <emu-const>strict</emu-const>, let <var>thisValue</var> be <var>thisArgument</var>.</li><li>Else,<ol><li>If <var>thisArgument</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Let <var>globalEnv</var> be <var>calleeRealm</var>.[[GlobalEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>globalEnv</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>globalEnv</var>.[[GlobalThisValue]].</li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>thisArgument</var>).</li><li>NOTE: <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> produces wrapper objects using <var>calleeRealm</var>.</li></ol></li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>localEnv</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The next step never returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because <var>localEnv</var>.[[ThisBindingStatus]] is not <emu-const>initialized</emu-const>.</li><li>Return <var>localEnv</var>.BindThisValue(<var>thisValue</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-module-environment-records-getbindingvalue-n-s": {"num": "8.1.1.5.1", "title": "#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-module-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-getbindingvalue-n-s\">#sec-module-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for module Environment Records returns the value of its bound identifier whose name is the value of the argument <var>N</var>. However, if the binding is an indirect binding the value of the target binding is returned. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is <emu-val>true</emu-val>.</li><li>Let <var>envRec</var> be the module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> is an indirect binding, then<ol><li>Let <var>M</var> and <var>N2</var> be the indirection values provided when this binding for <var>N</var> was created.</li><li>Let <var>targetEnv</var> be <var>M</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>N2</var>, <emu-val>true</emu-val>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p><var>S</var> will always be <emu-val>true</emu-val> because a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-hasrestrictedglobalproperty": {"num": "8.1.1.4.14", "title": "#sec-hasrestrictedglobalproperty HasRestrictedGlobalProperty ( N )", "html": "<emu-clause id=\"sec-hasrestrictedglobalproperty\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasrestrictedglobalproperty\">#sec-hasrestrictedglobalproperty</span> HasRestrictedGlobalProperty ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasRestrictedGlobalProperty for global Environment Records determines if the argument identifier is the name of a property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> that must not be shadowed by a global lexical binding:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Properties may exist upon a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> that were directly created rather than being declared using a var or function declaration. A global lexical binding may not be created that has the same name as a non-configurable property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. The global property <emu-val>\"undefined\"</emu-val> is an example of such a property.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-createmutablebinding-n-d": {"num": "8.1.1.4.2", "title": "#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-global-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createmutablebinding-n-d\">#sec-global-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for global Environment Records creates a new mutable binding for the name <var>N</var> that is uninitialized. The binding is created in the associated DeclarativeRecord. A binding for <var>N</var> must not already exist in the DeclarativeRecord. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new binding is marked as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-getbindingvalue-n-s": {"num": "8.1.1.1.6", "title": "#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-getbindingvalue-n-s\">#sec-declarative-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for declarative Environment Records simply returns the value of its bound identifier whose name is the value of the argument <var>N</var>. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-hasvardeclaration": {"num": "8.1.1.4.12", "title": "#sec-hasvardeclaration HasVarDeclaration ( N )", "html": "<emu-clause id=\"sec-hasvardeclaration\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasvardeclaration\">#sec-hasvardeclaration</span> HasVarDeclaration ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasVarDeclaration for global Environment Records determines if the argument identifier has a binding in this record that was created using a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> or a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> contains <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-createimmutablebinding-n-s": {"num": "8.1.1.1.3", "title": "#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">#sec-declarative-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImmutableBinding for declarative Environment Records creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If the Boolean argument <var>S</var> has the value <emu-val>true</emu-val> the new binding is marked as a strict binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create an immutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>S</var> is <emu-val>true</emu-val>, record that the newly created binding is a strict binding.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-with-statement": {"num": "13.11", "title": "#sec-with-statement The with Statement", "html": "<emu-clause id=\"sec-with-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement\">#sec-with-statement</span> The <code>with</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"WithStatement\" params=\"Yield, Await, Return\" id=\"prod-WithStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-WithStatement\">WithStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2ceedb70\"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The <code>with</code> statement adds an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a computed object to the lexical environment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It then executes a statement using this augmented lexical environment. Finally, it restores the original lexical environment.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-with-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">13.11.1</span>#sec-with-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">13.11.2</span>#sec-with-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">13.11.3</span>#sec-with-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">13.11.4</span>#sec-with-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">13.11.5</span>#sec-with-statement-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">13.11.6</span>#sec-with-statement-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-with-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.11.7</span>#sec-with-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-object-environment-records-getbindingvalue-n-s": {"num": "8.1.1.2.6", "title": "#sec-object-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-object-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-getbindingvalue-n-s\">#sec-object-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for object Environment Records returns the value of its associated binding object's property whose name is the String value of the argument identifier <var>N</var>. The property should already exist but if it does not the result depends upon the value of the <var>S</var> argument:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>value</var> is <emu-val>false</emu-val>, then<ol><li>If <var>S</var> is <emu-val>false</emu-val>, return the value <emu-val>undefined</emu-val>; otherwise throw a <emu-val>ReferenceError</emu-val> exception.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>bindings</var>, <var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.4.5", "title": "#sec-global-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-global-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-setmutablebinding-n-v-s\">#sec-global-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for global Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <var>S</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createglobalvarbinding": {"num": "8.1.1.4.17", "title": "#sec-createglobalvarbinding CreateGlobalVarBinding ( N, D )", "html": "<emu-clause id=\"sec-createglobalvarbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createglobalvarbinding\">#sec-createglobalvarbinding</span> CreateGlobalVarBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateGlobalVarBinding for global Environment Records creates and initializes a mutable binding in the associated object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> and records the bound name in the associated [[VarNames]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. If a binding already exists, it is reused and assumed to be initialized.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>hasProperty</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>Let <var>extensible</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).</li><li>If <var>hasProperty</var> is <emu-val>false</emu-val> and <var>extensible</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>ObjRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).</li><li>Perform ? <var>ObjRec</var>.InitializeBinding(<var>N</var>, <emu-val>undefined</emu-val>).</li></ol></li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> does not contain <var>N</var>, then<ol><li>Append <var>N</var> to <var>varDeclaredNames</var>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records": {"num": "8.1.1.1", "title": "#sec-declarative-environment-records Declarative Environment Records", "html": "<emu-clause id=\"sec-declarative-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records\">#sec-declarative-environment-records</span> Declarative Environment Records</h1>\n        <p>Each declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is associated with an ECMAScript program scope containing variable, constant, let, class, module, import, and/or function declarations. A declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> binds the set of identifiers defined by the declarations contained within its scope.</p>\n        <p>The behaviour of the concrete specification methods for declarative Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-declarative-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.1.1</span>#sec-declarative-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.1.2</span>#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.1.3</span>#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.1.4</span>#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.1.5</span>#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.1.6</span>#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.1.7</span>#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.1.8</span>#sec-declarative-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.1.9</span>#sec-declarative-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.1.10</span>#sec-declarative-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-global-environment-records-createimmutablebinding-n-s": {"num": "8.1.1.4.3", "title": "#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-global-environment-records-createimmutablebinding-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createimmutablebinding-n-s\">#sec-global-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImmutableBinding for global Environment Records creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If the Boolean argument <var>S</var> has the value <emu-val>true</emu-val> the new binding is marked as a strict binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateImmutableBinding(<var>N</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-web-compat-evaldeclarationinstantiation": {"num": "B.3.3.3", "title": "#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-evaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</span> Changes to EvalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 7:</p>\n        <emu-alg><ol><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>body</var>, do<ol><li>Let <var>F</var> be StringValue of the <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>body</var>, then<ol><li>Let <var>bindingExists</var> be <emu-val>false</emu-val>.</li><li>Let <var>thisLex</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisLex</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisLex</var> is not an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>If <var>thisLex</var>.HasBinding(<var>F</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Set <var>thisLex</var> to <var>thisLex</var>.[[OuterEnv]].</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>varEnv</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>F</var>).</li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>true</emu-val>.</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>If <var>varEnv</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>F</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>F</var>, <emu-val>true</emu-val>).</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-newdeclarativeenvironment": {"num": "8.1.2.2", "title": "#sec-newdeclarativeenvironment NewDeclarativeEnvironment ( E )", "html": "<emu-clause id=\"sec-newdeclarativeenvironment\" aoid=\"NewDeclarativeEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newdeclarativeenvironment\">#sec-newdeclarativeenvironment</span> NewDeclarativeEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewDeclarativeEnvironment takes argument <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-deletebinding-n": {"num": "8.1.1.1.7", "title": "#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-deletebinding-n\">#sec-declarative-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for declarative Environment Records can only delete bindings that have been explicitly designated as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for the name that is the value of <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> cannot be deleted, return <emu-val>false</emu-val>.</li><li>Remove the binding for <var>N</var> from <var>envRec</var>.</li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-haslexicaldeclaration": {"num": "8.1.1.4.13", "title": "#sec-haslexicaldeclaration HasLexicalDeclaration ( N )", "html": "<emu-clause id=\"sec-haslexicaldeclaration\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-haslexicaldeclaration\">#sec-haslexicaldeclaration</span> HasLexicalDeclaration ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasLexicalDeclaration for global Environment Records determines if the argument identifier has a binding in this record that was created using a lexical declaration such as a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>Return <var>DclRec</var>.HasBinding(<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createimportbinding": {"num": "8.1.1.5.5", "title": "#sec-createimportbinding CreateImportBinding ( N, M, N2 )", "html": "<emu-clause id=\"sec-createimportbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createimportbinding\">#sec-createimportbinding</span> CreateImportBinding ( <var>N</var>, <var>M</var>, <var>N2</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImportBinding for module Environment Records creates a new initialized immutable indirect binding for the name <var>N</var>. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is the name of a binding that exists in <var>M</var>'s module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Accesses to the value of the new binding will indirectly access the bound value of the target binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When <var>M</var>.[[Environment]] is instantiated it will have a direct binding for <var>N2</var>.</li><li>Create an immutable indirect binding in <var>envRec</var> for <var>N</var> that references <var>M</var> and <var>N2</var> as its target binding and record that the binding is initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-object-environment-records": {"num": "8.1.1.2", "title": "#sec-object-environment-records Object Environment Records", "html": "<emu-clause id=\"sec-object-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records\">#sec-object-environment-records</span> Object Environment Records</h1>\n        <p>Each object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is associated with an object called its  <em>binding object</em>. An object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> binds the set of string identifier names that directly correspond to the property names of its binding object. Property keys that are not strings in the form of an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are not included in the set of bound identifiers. Both own and inherited properties are included in the set regardless of the setting of their [[Enumerable]] attribute. Because properties can be dynamically added and deleted from objects, the set of identifiers bound by an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> may potentially change as a side-effect of any operation that adds or deletes properties. Any bindings that are created as a result of such a side-effect are considered to be a mutable binding even if the Writable attribute of the corresponding property has the value <emu-val>false</emu-val>. Immutable bindings do not exist for object Environment Records.</p>\n        <p>Object Environment Records created for <code>with</code> statements (<emu-xref href=\"#sec-with-statement\"><a href=\"#sec-with-statement\" class=\"excluded-xref\" excluded-id=\"sec-with-statement\">#sec-with-statement</a></emu-xref>) can provide their binding object as an implicit <emu-val>this</emu-val> value for use in function calls. The capability is controlled by a <var>withEnvironment</var> Boolean value that is associated with each object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. By default, the value of <var>withEnvironment</var> is <emu-val>false</emu-val> for any object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>The behaviour of the concrete specification methods for object Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-object-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.2.1</span>#sec-object-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.2.2</span>#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-object-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.2.3</span>#sec-object-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.2.4</span>#sec-object-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-object-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.2.5</span>#sec-object-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.2.6</span>#sec-object-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.2.7</span>#sec-object-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.2.8</span>#sec-object-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.2.9</span>#sec-object-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.2.10</span>#sec-object-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-object-environment-records-hasbinding-n": {"num": "8.1.1.2.1", "title": "#sec-object-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-object-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-hasbinding-n\">#sec-object-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for object Environment Records determines if its associated binding object has a property whose name is the value of the argument <var>N</var>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>foundBinding</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>foundBinding</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>false</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>unscopables</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>bindings</var>, @@unscopables).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unscopables</var>) is Object, then<ol><li>Let <var>blocked</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>unscopables</var>, <var>N</var>)).</li><li>If <var>blocked</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-evaldeclarationinstantiation": {"num": "18.2.1.3", "title": "#sec-evaldeclarationinstantiation Runtime Semantics: EvalDeclarationInstantiation ( body, varEnv, lexEnv, strict )", "html": "<emu-clause id=\"sec-evaldeclarationinstantiation\" aoid=\"EvalDeclarationInstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</span> Runtime Semantics: EvalDeclarationInstantiation ( <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strict</var> )</h1>\n        <p>The abstract operation EvalDeclarationInstantiation takes arguments <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, and <var>strict</var>. It performs the following steps when called:</p>\n        <!--\n          WARNING: If you add, remove, rename, or repurpose any variable names\n                   within this algorithm, you may need to update\n                   #sec-web-compat-evaldeclarationinstantiation and\n                   #sec-variablestatements-in-catch-blocks accordingly.\n        -->\n        <emu-alg><ol><li>Let <var>varNames</var> be the VarDeclaredNames of <var>body</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>body</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>If <var>varEnv</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: <code>eval</code> will not create a global var declaration that would be shadowed by a global lexical declaration.</li></ol></li></ol></li><li>Let <var>thisLex</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisLex</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisLex</var> is not an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>NOTE: The environment of with statements cannot contain any lexical declaration so it doesn't need to be checked for var/let hoisting conflicts.</li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>thisLex</var>.HasBinding(<var>name</var>) is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: Annex <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref> defines alternate semantics for the above step.</li></ol></li><li>NOTE: A <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> will not hoist var declaration over a like-named lexical declaration.</li></ol></li></ol></li><li>Set <var>thisLex</var> to <var>thisLex</var>.[[OuterEnv]].</li></ol></li></ol></li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnv</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-evaldeclarationinstantiation\"><a href=\"#sec-web-compat-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnv</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Let <var>vnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step unless <var>varEnv</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> and the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>body</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>If <var>varEnv</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>fn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnv</var>.CreateMutableBinding(<var>fn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 10.</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>If <var>varEnv</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>vn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnv</var>.CreateMutableBinding(<var>vn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 10.</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>vn</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative version of this algorithm is described in  <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-declarative-environment-records-initializebinding-n-v": {"num": "8.1.1.1.4", "title": "#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-declarative-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-initializebinding-n-v\">#sec-declarative-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for declarative Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> must have an uninitialized binding for <var>N</var>.</li><li>Set the bound value for <var>N</var> in <var>envRec</var> to <var>V</var>.</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>envRec</var> has been initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.1.5", "title": "#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">#sec-declarative-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for declarative Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A binding for <var>N</var> normally already exists, but in rare cases it may not. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> does not have a binding for <var>N</var>, then<ol><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Perform <var>envRec</var>.CreateMutableBinding(<var>N</var>, <emu-val>true</emu-val>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is a strict binding, set <var>S</var> to <emu-val>true</emu-val>.</li><li>If the binding for <var>N</var> in <var>envRec</var> has not yet been initialized, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Else if the binding for <var>N</var> in <var>envRec</var> is a mutable binding, change its bound value to <var>V</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is an attempt to change the value of an immutable binding.</li><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An example of ECMAScript code that results in a missing binding at step 2 is:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"var x; x = (delete x, 0);\"</span>); }</code></pre>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-deletebinding-n": {"num": "8.1.1.4.7", "title": "#sec-global-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-global-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-deletebinding-n\">#sec-global-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for global Environment Records can only delete bindings that have been explicitly designated as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.DeleteBinding(<var>N</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>status</var> be ? <var>ObjRec</var>.DeleteBinding(<var>N</var>).</li><li>If <var>status</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>varNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>N</var> is an element of <var>varNames</var>, remove that element from the <var>varNames</var>.</li></ol></li><li>Return <var>status</var>.</li></ol></li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-initializebinding-n-v": {"num": "8.1.1.4.4", "title": "#sec-global-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-global-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-initializebinding-n-v\">#sec-global-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for global Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If the binding exists, it must be in the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-deletebinding-n": {"num": "8.1.1.2.7", "title": "#sec-object-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-object-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-deletebinding-n\">#sec-object-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for object Environment Records can only delete bindings that correspond to properties of the environment object whose [[Configurable]] attribute have the value <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ? <var>bindings</var>.[[Delete]](<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-getbindingvalue-n-s": {"num": "8.1.1.4.6", "title": "#sec-global-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-global-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-getbindingvalue-n-s\">#sec-global-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for global Environment Records returns the value of its bound identifier whose name is the value of the argument <var>N</var>. If the binding is an uninitialized binding throw a <emu-val>ReferenceError</emu-val> exception. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.GetBindingValue(<var>N</var>, <var>S</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.GetBindingValue(<var>N</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-createmutablebinding-n-d": {"num": "8.1.1.2.2", "title": "#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-object-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-createmutablebinding-n-d\">#sec-object-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for object Environment Records creates in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s associated binding object a property whose name is the String value and initializes it to the value <emu-val>undefined</emu-val>. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new property's [[Configurable]] attribute is set to <emu-val>true</emu-val>; otherwise it is set to <emu-val>false</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>bindings</var>, <var>N</var>, PropertyDescriptor { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>D</var> }).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Normally <var>envRec</var> will not have a binding for <var>N</var> but if it does, the semantics of <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref> may result in an existing binding being replaced or shadowed or cause an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> to be returned.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-initializebinding-n-v": {"num": "8.1.1.2.4", "title": "#sec-object-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-object-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-initializebinding-n-v\">#sec-object-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for object Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> must have an uninitialized binding for <var>N</var>.</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>envRec</var> has been initialized.</li><li>Return ? <var>envRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>In this specification, all uses of CreateMutableBinding for object Environment Records are immediately followed by a call to InitializeBinding for the same name. Hence, implementations do not need to explicitly track the initialization state of individual object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> bindings.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-candeclareglobalfunction": {"num": "8.1.1.4.16", "title": "#sec-candeclareglobalfunction CanDeclareGlobalFunction ( N )", "html": "<emu-clause id=\"sec-candeclareglobalfunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candeclareglobalfunction\">#sec-candeclareglobalfunction</span> CanDeclareGlobalFunction ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CanDeclareGlobalFunction for global Environment Records determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument <var>N</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).</li><li>If <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>existingProp</var>) is <emu-val>true</emu-val> and <var>existingProp</var> has attribute values { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val> }, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-withbaseobject": {"num": "8.1.1.2.10", "title": "#sec-object-environment-records-withbaseobject WithBaseObject ( )", "html": "<emu-clause id=\"sec-object-environment-records-withbaseobject\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-withbaseobject\">#sec-object-environment-records-withbaseobject</span> WithBaseObject ( )</h1>\n          <p>Object Environment Records return <emu-val>undefined</emu-val> as their WithBaseObject unless their <var>withEnvironment</var> flag is <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>true</emu-val>, return the binding object for <var>envRec</var>.</li><li>Otherwise, return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-globaldeclarationinstantiation": {"num": "15.1.11", "title": "#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> Runtime Semantics: GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>The abstract operation GlobalDeclarationInstantiation takes arguments <var>script</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the LexicallyDeclaredNames of <var>script</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>script</var>.</li><li>For each <var>name</var> in <var>lexNames</var>, do<ol><li>If <var>env</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>env</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>script</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>env</var>.</li><li>Perform ? <var>env</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in  <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-global-environment-records": {"num": "8.1.1.4", "title": "#sec-global-environment-records Global Environment Records", "html": "<emu-clause id=\"sec-global-environment-records\" oldids=\"global-environment\">\n        <span id=\"global-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records\">#sec-global-environment-records</span> Global Environment Records</h1>\n        <p>A global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is used to represent the outer most scope that is shared by all of the ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> elements that are processed in a common <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>. A global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> provides the bindings for built-in globals (clause  <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>), properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and for all top-level declarations (<emu-xref href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\">#sec-block-static-semantics-toplevellexicallyscopeddeclarations</a></emu-xref>,  <emu-xref href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevelvarscopeddeclarations\">#sec-block-static-semantics-toplevelvarscopeddeclarations</a></emu-xref>) that occur within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.</p>\n        <p>A global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is logically a single record but it is specified as a composite encapsulating an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> and a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> has as its base object the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> of the associated <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>. This <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is the value returned by the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s GetThisBinding concrete method. The object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> component of a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> contains the bindings for all built-in globals (clause  <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>) and all bindings introduced by a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> contained in global code. The bindings for all other ECMAScript declarations in global code are contained in the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> component of the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Properties may be created directly on a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. Hence, the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> component of a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> may contain both bindings created explicitly by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations and bindings created implicitly as properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. In order to identify which bindings were explicitly created using declarations, a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> maintains a list of the names bound using its CreateGlobalVarBinding and CreateGlobalFunctionBinding concrete methods.</p>\n        <p>Global Environment Records have the additional fields listed in  <emu-xref href=\"#table-18\"><a href=\"#table-18\" class=\"excluded-xref\" excluded-id=\"table-18\">#table-18</a></emu-xref> and the additional methods listed in  <emu-xref href=\"#table-19\"><a href=\"#table-19\" class=\"excluded-xref\" excluded-id=\"table-19\">#table-19</a></emu-xref>.</p>\n        <emu-table id=\"table-18\" caption=\"Additional Fields of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-18\">#table-18</span>: Additional Fields of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ObjectRecord]]\n              \n              </td>\n              <td>\n                Object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n              \n              </td>\n              <td>\n                Binding object is the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. It contains global built-in bindings as well as <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> bindings in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GlobalThisValue]]\n              \n              </td>\n              <td>\n                Object\n              \n              </td>\n              <td>\n                The value returned by <code>this</code> in global scope. Hosts may provide any ECMAScript Object value.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DeclarativeRecord]]\n              \n              </td>\n              <td>\n                Declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n              \n              </td>\n              <td>\n                Contains bindings for all declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> code except for <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <var>bindings</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[VarNames]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n              \n              </td>\n              <td>\n                The string names bound by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-19\" caption=\"Additional Methods of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-19\">#table-19</span>: Additional Methods of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasVarDeclaration (N)\n              \n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasLexicalDeclaration (N)\n              \n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a lexical declaration such as a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasRestrictedGlobalProperty (N)\n              \n              </td>\n              <td>\n                Determines if the argument is the name of a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property that may not be shadowed by a global lexical binding.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalVar (N)\n              \n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument <var>N</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalFunction (N)\n              \n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument <var>N</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalVarBinding(N, D)\n              \n              </td>\n              <td>\n                Used to create and initialize to <emu-val>undefined</emu-val> a global <code>var</code> binding in the [[ObjectRecord]] component of a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>var</code>. The String value <var>N</var> is the bound name. If <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows var declarations to receive special treatment.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalFunctionBinding(N, V, D)\n              \n              </td>\n              <td>\n                Create and initialize a global <code>function</code> binding in the [[ObjectRecord]] component of a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>function</code>. The String value <var>N</var> is the bound name. <var>V</var> is the initialization value. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows function declarations to receive special treatment.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the concrete specification methods for global Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-global-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.4.1</span>#sec-global-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.4.2</span>#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-global-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.4.3</span>#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.4.4</span>#sec-global-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-global-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.4.5</span>#sec-global-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.4.6</span>#sec-global-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.4.7</span>#sec-global-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.4.8</span>#sec-global-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.4.9</span>#sec-global-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.4.10</span>#sec-global-environment-records-withbaseobject WithBaseObject ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.4.11</span>#sec-global-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-hasvardeclaration\"><h1><span class=\"secnum\">8.1.1.4.12</span>#sec-hasvardeclaration HasVarDeclaration ( N )</h1>...</div><div id=\"excluded-sec-haslexicaldeclaration\"><h1><span class=\"secnum\">8.1.1.4.13</span>#sec-haslexicaldeclaration HasLexicalDeclaration ( N )</h1>...</div><div id=\"excluded-sec-hasrestrictedglobalproperty\"><h1><span class=\"secnum\">8.1.1.4.14</span>#sec-hasrestrictedglobalproperty HasRestrictedGlobalProperty ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalvar\"><h1><span class=\"secnum\">8.1.1.4.15</span>#sec-candeclareglobalvar CanDeclareGlobalVar ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalfunction\"><h1><span class=\"secnum\">8.1.1.4.16</span>#sec-candeclareglobalfunction CanDeclareGlobalFunction ( N )</h1>...</div><div id=\"excluded-sec-createglobalvarbinding\"><h1><span class=\"secnum\">8.1.1.4.17</span>#sec-createglobalvarbinding CreateGlobalVarBinding ( N, D )</h1>...</div><div id=\"excluded-sec-createglobalfunctionbinding\"><h1><span class=\"secnum\">8.1.1.4.18</span>#sec-createglobalfunctionbinding CreateGlobalFunctionBinding ( N, V, D )</h1>...</div></emu-clause>\n\n      "}, "sec-newobjectenvironment": {"num": "8.1.2.3", "title": "#sec-newobjectenvironment NewObjectEnvironment ( O, E )", "html": "<emu-clause id=\"sec-newobjectenvironment\" aoid=\"NewObjectEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newobjectenvironment\">#sec-newobjectenvironment</span> NewObjectEnvironment ( <var>O</var>, <var>E</var> )</h1>\n        <p>The abstract operation NewObjectEnvironment takes arguments <var>O</var> (an Object) and <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing <var>O</var> as the binding object.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-the-environment-record-type-hierarchy": {"num": "8.1.1", "title": "#sec-the-environment-record-type-hierarchy The Environment Record Type Hierarchy", "html": "<emu-clause id=\"sec-the-environment-record-type-hierarchy\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-the-environment-record-type-hierarchy\">#sec-the-environment-record-type-hierarchy</span> The Environment Record Type Hierarchy</h1>\n      <p>Environment Records can be thought of as existing in a simple object-oriented hierarchy where <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is an abstract class with three concrete subclasses: declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, and global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Function Environment Records and module Environment Records are subclasses of declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      <ul>\n        <li>\n          <p><emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> (abstract)</p>\n          <ul>\n            <li>\n              <p>A  <em>declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref></em> is used to define the effect of ECMAScript language syntactic elements such as <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s, <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>s, and <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clauses that directly associate identifier bindings with ECMAScript language values.</p>\n              <ul>\n                <li>\n                  <p>A  <em><emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref></em> corresponds to the invocation of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, and contains bindings for the top-level declarations within that function. It may establish a new <code>this</code> binding. It also captures the state necessary to support <code>super</code> method invocations.</p>\n                </li>\n                <li>\n                  <p>A  <em>module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref></em> contains the bindings for the top-level declarations of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It also contains the bindings that are explicitly imported by the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Its [[OuterEnv]] is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n                </li>\n              </ul>\n            </li>\n            <li>\n              <p>An  <em>object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref></em> is used to define the effect of ECMAScript elements such as <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> that associate identifier bindings with the properties of some object.</p>\n            </li>\n            <li>\n              <p>A  <em>global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref></em> is used for <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> global declarations. It does not have an outer environment; its [[OuterEnv]] is <emu-val>null</emu-val>. It may be prepopulated with identifier bindings and it includes an associated <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> whose properties provide some of the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>'s identifier bindings. As ECMAScript code is executed, additional properties may be added to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and the initial properties may be modified.</p>\n            </li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> abstract class includes the abstract specification methods defined in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref>. These abstract methods have distinct concrete algorithms for each of the concrete subclasses.</p>\n      <emu-table id=\"table-15\" caption=\"Abstract Methods of Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-15\">#table-15</span>: Abstract Methods of Environment Records</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Method\n            \n            </th>\n            <th>\n              Purpose\n            \n            </th>\n          </tr>\n          <tr>\n            <td>\n              HasBinding(N)\n            \n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> has a binding for the String value <var>N</var>. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              CreateMutableBinding(N, D)\n            \n            </td>\n            <td>\n              Create a new but uninitialized mutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be subsequently deleted.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              CreateImmutableBinding(N, S)\n            \n            </td>\n            <td>\n              Create a new but uninitialized immutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If <var>S</var> is <emu-val>true</emu-val> then attempts to set it after it has been initialized will always throw an exception, regardless of the strict mode setting of operations that reference that binding.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              InitializeBinding(N, V)\n            \n            </td>\n            <td>\n              Set the value of an already existing but uninitialized binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and is a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              SetMutableBinding(N, V, S)\n            \n            </td>\n            <td>\n              Set the value of an already existing mutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and may be a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>. <var>S</var> is a Boolean flag. If <var>S</var> is <emu-val>true</emu-val> and the binding cannot be set throw a <emu-val>TypeError</emu-val> exception.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              GetBindingValue(N, S)\n            \n            </td>\n            <td>\n              Returns the value of an already existing binding from an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>S</var> is used to identify references originating in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> or that otherwise require strict mode reference semantics. If <var>S</var> is <emu-val>true</emu-val> and the binding does not exist throw a <emu-val>ReferenceError</emu-val> exception. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              DeleteBinding(N)\n            \n            </td>\n            <td>\n              Delete a binding from an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If a binding for <var>N</var> exists, remove the binding and return <emu-val>true</emu-val>. If the binding exists but cannot be removed return <emu-val>false</emu-val>. If the binding does not exist return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              HasThisBinding()\n            \n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> establishes a <code>this</code> binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              HasSuperBinding()\n            \n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> establishes a <code>super</code> method binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              WithBaseObject()\n            \n            </td>\n            <td>\n              If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is associated with a <code>with</code> statement, return the with object. Otherwise, return <emu-val>undefined</emu-val>.\n            \n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n\n      <div id=\"excluded-sec-declarative-environment-records\"><h1><span class=\"secnum\">8.1.1.1</span>#sec-declarative-environment-records Declarative Environment Records</h1>...</div><div id=\"excluded-sec-object-environment-records\"><h1><span class=\"secnum\">8.1.1.2</span>#sec-object-environment-records Object Environment Records</h1>...</div><div id=\"excluded-sec-function-environment-records\"><h1><span class=\"secnum\">8.1.1.3</span>#sec-function-environment-records Function Environment Records</h1>...</div><div id=\"excluded-sec-global-environment-records\"><h1><span class=\"secnum\">8.1.1.4</span>#sec-global-environment-records Global Environment Records</h1>...</div><div id=\"excluded-sec-module-environment-records\"><h1><span class=\"secnum\">8.1.1.5</span>#sec-module-environment-records Module Environment Records</h1>...</div></emu-clause>\n\n    "}, "sec-global-environment-records-hasbinding-n": {"num": "8.1.1.4.1", "title": "#sec-global-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-global-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-hasbinding-n\">#sec-global-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for global Environment Records simply determines if the argument identifier is one of the identifiers bound by the record:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.HasBinding(<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-abstract-module-records": {"num": "15.2.1.15", "title": "#sec-abstract-module-records Abstract Module Records", "html": "<emu-clause id=\"sec-abstract-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-module-records\">#sec-abstract-module-records</span> Abstract Module Records</h1>\n        <p>A  <dfn>Module Record</dfn> encapsulates structural information about the imports and exports of a single module. This information is used to link the imports and exports of sets of connected modules. A Module Record includes four fields that are only used when evaluating a module.</p>\n        <p>For specification purposes Module Record values are values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> specification type and can be thought of as existing in a simple object-oriented hierarchy where Module Record is an abstract class with both abstract and concrete subclasses. This specification defines the abstract subclass named <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> and its concrete subclass named <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>. Other specifications and implementations may define additional Module Record subclasses corresponding to alternative module definition facilities that they defined.</p>\n        <p>Module Record defines the fields listed in  <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref>. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in  <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref>. All Module definition subclasses must provide concrete implementations of these abstract methods.</p>\n        <emu-table id=\"table-36\" caption=\"Module Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-36\">#table-36</span>: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[Realm]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> within which this module was created. <emu-val>undefined</emu-val> if not yet assigned.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Environment]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing the top level bindings for this module. This field is set when the module is linked.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Namespace]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The Module Namespace Object (<emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>) if one has been created for this module. Otherwise <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HostDefined]]\n              \n              </td>\n              <td>\n                Any, default value is <emu-val>undefined</emu-val>.\n              \n              </td>\n              <td>\n                Field reserved for use by host environments that need to associate additional information with a module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-37\" caption=\"Abstract Methods of Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-37\">#table-37</span>: Abstract Methods of Module Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetExportedNames([<var>exportStarSet</var>])\n              \n              </td>\n              <td>\n                Return a list of all names that are either directly or indirectly exported from this module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                ResolveExport(<var>exportName</var> [, <var>resolveSet</var>])\n              \n              </td>\n              <td>\n                <p>Return the binding of a name exported by this module. Bindings are represented by a  <dfn id=\"resolvedbinding-record\">ResolvedBinding Record</dfn>, of the form { [[Module]]: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. Return <emu-val>null</emu-val> if the name cannot be resolved, or <emu-val>\"ambiguous\"</emu-val> if multiple bindings were found.</p>\n                <p>Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result if it completes normally.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Link()\n              \n              </td>\n              <td>\n                <p>Prepare the module for evaluation by transitively resolving all module dependencies and creating a module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Evaluate()\n              \n              </td>\n              <td>\n                <p>If this module has already been evaluated successfully, return <emu-val>undefined</emu-val>; if it has already been evaluated unsuccessfully, throw the exception that was produced. Otherwise, transitively evaluate all module dependencies of this module and then evaluate this module.</p>\n                <p>Link must have completed successfully prior to invoking this method.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-hasbinding-n": {"num": "8.1.1.1.1", "title": "#sec-declarative-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-hasbinding-n\">#sec-declarative-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for declarative Environment Records simply determines if the argument identifier is one of the identifiers bound by the record:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> has a binding for the name that is the value of <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-blockdeclarationinstantiation": {"num": "13.2.14", "title": "#sec-blockdeclarationinstantiation Runtime Semantics: BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> Runtime Semantics: BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>The abstract operation BlockDeclarationInstantiation takes arguments <var>code</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li>Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-newmoduleenvironment": {"num": "8.1.2.6", "title": "#sec-newmoduleenvironment NewModuleEnvironment ( E )", "html": "<emu-clause id=\"sec-newmoduleenvironment\" aoid=\"NewModuleEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newmoduleenvironment\">#sec-newmoduleenvironment</span> NewModuleEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewModuleEnvironment takes argument <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {"table-1": "Table 1", "table-2": "Table 3", "table-3": "Table 4", "table-15": "Table 16", "table-16": "Table 17", "table-17": "Table 18", "table-18": "Table 19", "table-19": "Table 20", "table-20": "Table 21", "table-36": "Table 38", "table-37": "Table 39"}}, "to": {"secList": ["sec-newglobalenvironment", "sec-runtime-semantics-bindinginstantiation", "sec-createglobalfunctionbinding", "sec-declarative-environment-records-createmutablebinding-n-d", "sec-module-environment-records-deletebinding-n", "sec-object-environment-records-setmutablebinding-n-v-s", "sec-variable-statement-runtime-semantics-evaluation", "sec-global-environment-records-getthisbinding", "sec-function-environment-records", "sec-module-environment-records", "sec-candeclareglobalvar", "sec-ordinarycallbindthis", "sec-module-environment-records-getbindingvalue-n-s", "sec-hasrestrictedglobalproperty", "sec-global-environment-records-createmutablebinding-n-d", "sec-declarative-environment-records-getbindingvalue-n-s", "sec-hasvardeclaration", "sec-declarative-environment-records-createimmutablebinding-n-s", "sec-with-statement", "sec-object-environment-records-getbindingvalue-n-s", "sec-global-environment-records-setmutablebinding-n-v-s", "sec-createglobalvarbinding", "sec-declarative-environment-records", "sec-global-environment-records-createimmutablebinding-n-s", "sec-web-compat-evaldeclarationinstantiation", "sec-newdeclarativeenvironment", "sec-declarative-environment-records-deletebinding-n", "sec-haslexicaldeclaration", "sec-createimportbinding", "sec-object-environment-records", "sec-object-environment-records-hasbinding-n", "sec-evaldeclarationinstantiation", "sec-declarative-environment-records-initializebinding-n-v", "sec-declarative-environment-records-setmutablebinding-n-v-s", "sec-global-environment-records-deletebinding-n", "sec-global-environment-records-initializebinding-n-v", "sec-object-environment-records-deletebinding-n", "sec-global-environment-records-getbindingvalue-n-s", "sec-object-environment-records-createmutablebinding-n-d", "sec-object-environment-records-initializebinding-n-v", "sec-candeclareglobalfunction", "sec-object-environment-records-withbaseobject", "sec-globaldeclarationinstantiation", "sec-global-environment-records", "sec-newobjectenvironment", "sec-the-environment-record-type-hierarchy", "sec-global-environment-records-hasbinding-n", "sec-abstract-module-records", "sec-declarative-environment-records-hasbinding-n", "sec-blockdeclarationinstantiation", "sec-newmoduleenvironment"], "secData": {"sec-newglobalenvironment": {"num": "8.1.2.5", "title": "#sec-newglobalenvironment NewGlobalEnvironment ( G, thisValue )", "html": "<emu-clause id=\"sec-newglobalenvironment\" aoid=\"NewGlobalEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newglobalenvironment\">#sec-newglobalenvironment</span> NewGlobalEnvironment ( <var>G</var>, <var>thisValue</var> )</h1>\n        <p>The abstract operation NewGlobalEnvironment takes arguments <var>G</var> and <var>thisValue</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>objRec</var> be a new <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> containing <var>G</var> as the binding object.</li><li>Let <var>dclRec</var> be a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> containing no bindings.</li><li>Let <var>env</var> be a new <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Set <var>env</var>.[[ObjectRecord]] to <var>objRec</var>.</li><li>Set <var>env</var>.[[GlobalThisValue]] to <var>thisValue</var>.</li><li>Set <var>env</var>.[[DeclarativeRecord]] to <var>dclRec</var>.</li><li>Set <var>env</var>.[[VarNames]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>env</var>.[[OuterEnv]] to <emu-val>null</emu-val>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-bindinginstantiation": {"num": "13.7.5.10", "title": "#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation", "html": "<emu-clause id=\"sec-runtime-semantics-bindinginstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-bindinginstantiation\">#sec-runtime-semantics-bindinginstantiation</span> Runtime Semantics: BindingInstantiation</h1>\n        <p>With parameter <var>environment</var>.</p>\n        <emu-grammar><emu-production name=\"ForDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d32d6fbc\"><emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt><emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>environment</var> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</li><li>For each element <var>name</var> of the BoundNames of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, do<ol><li>If IsConstantDeclaration of <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>environment</var>.CreateImmutableBinding(<var>name</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>environment</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).\n        </li></ol></li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createglobalfunctionbinding": {"num": "8.1.1.4.18", "title": "#sec-createglobalfunctionbinding CreateGlobalFunctionBinding ( N, V, D )", "html": "<emu-clause id=\"sec-createglobalfunctionbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createglobalfunctionbinding\">#sec-createglobalfunctionbinding</span> CreateGlobalFunctionBinding ( <var>N</var>, <var>V</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateGlobalFunctionBinding for global Environment Records creates and initializes a mutable binding in the associated <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> and records the bound name in the associated [[VarNames]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. If a binding already exists, it is replaced.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val> or <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>V</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>D</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>V</var> }.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>globalObject</var>, <var>N</var>, <var>desc</var>).</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>ObjRec</var> has been initialized.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>globalObject</var>, <var>N</var>, <var>V</var>, <emu-val>false</emu-val>).</li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> does not contain <var>N</var>, then<ol><li>Append <var>N</var> to <var>varDeclaredNames</var>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Global function declarations are always represented as own properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. If possible, an existing own property is reconfigured to have a standard set of attribute values. Steps 8-9 are equivalent to what calling the InitializeBinding concrete method would do and if <var>globalObject</var> is a Proxy will produce the same sequence of Proxy trap calls.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-declarative-environment-records-createmutablebinding-n-d": {"num": "8.1.1.1.2", "title": "#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-declarative-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createmutablebinding-n-d\">#sec-declarative-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for declarative Environment Records creates a new mutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new binding is marked as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create a mutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>D</var> is <emu-val>true</emu-val>, record that the newly created binding may be deleted by a subsequent DeleteBinding call.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-module-environment-records-deletebinding-n": {"num": "8.1.1.5.2", "title": "#sec-module-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-module-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-deletebinding-n\">#sec-module-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for module Environment Records refuses to delete bindings.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This method is never invoked. See <emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Module Environment Records are only used within strict code and an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule prevents the delete operator, in strict code, from being applied to a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> that would resolve to a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> binding. See  <emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.2.5", "title": "#sec-object-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-object-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-setmutablebinding-n-v-s\">#sec-object-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for object Environment Records attempts to set the value of the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s associated binding object's property whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>bindings</var>, <var>N</var>, <var>V</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-variable-statement-runtime-semantics-evaluation": {"num": "13.3.2.4", "title": "#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-variable-statement-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement-runtime-semantics-evaluation\">#sec-variable-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3347a1bd\"><emu-t>var</emu-t><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a0057011\"><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"89becb83\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is nested within a with statement and the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is the same as a <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> of the binding object of the with statement's <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then step 5 will assign <var>value</var> to the property instead of assigning to the VariableEnvironment binding of the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ddd53e5\"><emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Return the result of performing BindingInitialization for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> passing <var>rval</var> and <emu-val>undefined</emu-val> as arguments.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-global-environment-records-getthisbinding": {"num": "8.1.1.4.11", "title": "#sec-global-environment-records-getthisbinding GetThisBinding ( )", "html": "<emu-clause id=\"sec-global-environment-records-getthisbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-getthisbinding\">#sec-global-environment-records-getthisbinding</span> GetThisBinding ( )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Return <var>envRec</var>.[[GlobalThisValue]].\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-function-environment-records": {"num": "8.1.1.3", "title": "#sec-function-environment-records Function Environment Records", "html": "<emu-clause id=\"sec-function-environment-records\" oldids=\"function-environment\">\n        <span id=\"function-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records\">#sec-function-environment-records</span> Function Environment Records</h1>\n        <p>A  <dfn>function Environment Record</dfn> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> that is used to represent the top-level scope of a function and, if the function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, provides a <code>this</code> binding. If a function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> function and references <code>super</code>, its function Environment Record also contains the state that is used to perform <code>super</code> method invocations from within the function.</p>\n        <p>Function Environment Records have the additional state fields listed in  <emu-xref href=\"#table-16\"><a href=\"#table-16\" class=\"excluded-xref\" excluded-id=\"table-16\">#table-16</a></emu-xref>.</p>\n        <emu-table id=\"table-16\" caption=\"Additional Fields of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-16\">#table-16</span>: Additional Fields of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ThisValue]]\n              \n              </td>\n              <td>\n                Any\n              \n              </td>\n              <td>\n                This is the <emu-val>this</emu-val> value used for this invocation of the function.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ThisBindingStatus]]\n              \n              </td>\n              <td>\n                <emu-const>lexical</emu-const> | <emu-const>initialized</emu-const> | <emu-const>uninitialized</emu-const>\n              \n              </td>\n              <td>\n                If the value is <emu-const>lexical</emu-const>, this is an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and does not have a local <emu-val>this</emu-val> value.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[FunctionObject]]\n              \n              </td>\n              <td>\n                Object\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose invocation caused this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> to be created.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HomeObject]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If the associated function has <code>super</code> property accesses and is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, [[HomeObject]] is the object that the function is bound to as a method. The default value for [[HomeObject]] is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[NewTarget]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] <var>newTarget</var> parameter. Otherwise, its value is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>Function Environment Records support all of the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for HasThisBinding and HasSuperBinding. In addition, function Environment Records support the methods listed in  <emu-xref href=\"#table-17\"><a href=\"#table-17\" class=\"excluded-xref\" excluded-id=\"table-17\">#table-17</a></emu-xref>:</p>\n        <emu-table id=\"table-17\" caption=\"Additional Methods of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-17\">#table-17</span>: Additional Methods of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                BindThisValue(V)\n              \n              </td>\n              <td>\n                Set the [[ThisValue]] and record that it has been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding. Throws a <emu-val>ReferenceError</emu-val> if the <code>this</code> binding has not been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetSuperBase()\n              \n              </td>\n              <td>\n                Return the object that is the base for <code>super</code> property accesses bound in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The object is derived from this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s [[HomeObject]] field. The value <emu-val>undefined</emu-val> indicates that <code>super</code> property accesses will produce runtime errors.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for function Environment Records is defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-bindthisvalue\"><h1><span class=\"secnum\">8.1.1.3.1</span>#sec-bindthisvalue BindThisValue ( V )</h1>...</div><div id=\"excluded-sec-function-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.3.2</span>#sec-function-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.3.3</span>#sec-function-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.3.4</span>#sec-function-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-getsuperbase\"><h1><span class=\"secnum\">8.1.1.3.5</span>#sec-getsuperbase GetSuperBase ( )</h1>...</div></emu-clause>\n\n      "}, "sec-module-environment-records": {"num": "8.1.1.5", "title": "#sec-module-environment-records Module Environment Records", "html": "<emu-clause id=\"sec-module-environment-records\" oldids=\"module-environment\">\n        <span id=\"module-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records\">#sec-module-environment-records</span> Module Environment Records</h1>\n        <p>A  <dfn>module Environment Record</dfn> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> that is used to represent the outer scope of an ECMAScript <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. In additional to normal mutable and immutable bindings, module Environment Records also provide immutable import bindings which are bindings that provide indirect access to a target binding that exists in another <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Module Environment Records support all of the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In addition, module Environment Records support the methods listed in  <emu-xref href=\"#table-20\"><a href=\"#table-20\" class=\"excluded-xref\" excluded-id=\"table-20\">#table-20</a></emu-xref>:</p>\n        <emu-table id=\"table-20\" caption=\"Additional Methods of Module Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-20\">#table-20</span>: Additional Methods of Module Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                CreateImportBinding(N, M, N2)\n              \n              </td>\n              <td>\n                Create an immutable indirect binding in a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for module Environment Records are defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-module-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.5.1</span>#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-module-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.5.2</span>#sec-module-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-module-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.5.3</span>#sec-module-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-module-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.5.4</span>#sec-module-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-createimportbinding\"><h1><span class=\"secnum\">8.1.1.5.5</span>#sec-createimportbinding CreateImportBinding ( N, M, N2 )</h1>...</div></emu-clause>\n    "}, "sec-candeclareglobalvar": {"num": "8.1.1.4.15", "title": "#sec-candeclareglobalvar CanDeclareGlobalVar ( N )", "html": "<emu-clause id=\"sec-candeclareglobalvar\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candeclareglobalvar\">#sec-candeclareglobalvar</span> CanDeclareGlobalVar ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CanDeclareGlobalVar for global Environment Records determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument <var>N</var>. Redundant var declarations and var declarations for pre-existing <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> properties are allowed.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>hasProperty</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>If <var>hasProperty</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ordinarycallbindthis": {"num": "9.2.1.2", "title": "#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )", "html": "<emu-clause id=\"sec-ordinarycallbindthis\" aoid=\"OrdinaryCallBindThis\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</span> OrdinaryCallBindThis ( <var>F</var>, <var>calleeContext</var>, <var>thisArgument</var> )</h1>\n        <p>The abstract operation OrdinaryCallBindThis takes arguments <var>F</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>), <var>calleeContext</var> (an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>), and <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>thisMode</var> be <var>F</var>.[[ThisMode]].</li><li>If <var>thisMode</var> is <emu-const>lexical</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Let <var>localEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>If <var>thisMode</var> is <emu-const>strict</emu-const>, let <var>thisValue</var> be <var>thisArgument</var>.</li><li>Else,<ol><li>If <var>thisArgument</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Let <var>globalEnv</var> be <var>calleeRealm</var>.[[GlobalEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>globalEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>globalEnv</var>.[[GlobalThisValue]].</li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>thisArgument</var>).</li><li>NOTE: <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> produces wrapper objects using <var>calleeRealm</var>.</li></ol></li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>localEnv</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The next step never returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because <var>localEnv</var>.[[ThisBindingStatus]] is not <emu-const>initialized</emu-const>.</li><li>Return <var>localEnv</var>.BindThisValue(<var>thisValue</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-module-environment-records-getbindingvalue-n-s": {"num": "8.1.1.5.1", "title": "#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-module-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-getbindingvalue-n-s\">#sec-module-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for module Environment Records returns the value of its bound identifier whose name is the value of the argument <var>N</var>. However, if the binding is an indirect binding the value of the target binding is returned. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is <emu-val>true</emu-val>.</li><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> is an indirect binding, then<ol><li>Let <var>M</var> and <var>N2</var> be the indirection values provided when this binding for <var>N</var> was created.</li><li>Let <var>targetEnv</var> be <var>M</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>N2</var>, <emu-val>true</emu-val>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p><var>S</var> will always be <emu-val>true</emu-val> because a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-hasrestrictedglobalproperty": {"num": "8.1.1.4.14", "title": "#sec-hasrestrictedglobalproperty HasRestrictedGlobalProperty ( N )", "html": "<emu-clause id=\"sec-hasrestrictedglobalproperty\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasrestrictedglobalproperty\">#sec-hasrestrictedglobalproperty</span> HasRestrictedGlobalProperty ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasRestrictedGlobalProperty for global Environment Records determines if the argument identifier is the name of a property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> that must not be shadowed by a global lexical binding:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Properties may exist upon a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> that were directly created rather than being declared using a var or function declaration. A global lexical binding may not be created that has the same name as a non-configurable property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. The global property <emu-val>\"undefined\"</emu-val> is an example of such a property.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-createmutablebinding-n-d": {"num": "8.1.1.4.2", "title": "#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-global-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createmutablebinding-n-d\">#sec-global-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for global Environment Records creates a new mutable binding for the name <var>N</var> that is uninitialized. The binding is created in the associated DeclarativeRecord. A binding for <var>N</var> must not already exist in the DeclarativeRecord. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new binding is marked as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-getbindingvalue-n-s": {"num": "8.1.1.1.6", "title": "#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-getbindingvalue-n-s\">#sec-declarative-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for declarative Environment Records simply returns the value of its bound identifier whose name is the value of the argument <var>N</var>. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-hasvardeclaration": {"num": "8.1.1.4.12", "title": "#sec-hasvardeclaration HasVarDeclaration ( N )", "html": "<emu-clause id=\"sec-hasvardeclaration\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasvardeclaration\">#sec-hasvardeclaration</span> HasVarDeclaration ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasVarDeclaration for global Environment Records determines if the argument identifier has a binding in this record that was created using a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> or a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> contains <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-createimmutablebinding-n-s": {"num": "8.1.1.1.3", "title": "#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">#sec-declarative-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImmutableBinding for declarative Environment Records creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If the Boolean argument <var>S</var> has the value <emu-val>true</emu-val> the new binding is marked as a strict binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create an immutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>S</var> is <emu-val>true</emu-val>, record that the newly created binding is a strict binding.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-with-statement": {"num": "13.11", "title": "#sec-with-statement The with Statement", "html": "<emu-clause id=\"sec-with-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement\">#sec-with-statement</span> The <code>with</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"WithStatement\" params=\"Yield, Await, Return\" id=\"prod-WithStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-WithStatement\">WithStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2ceedb70\"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The <code>with</code> statement adds an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for a computed object to the lexical environment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It then executes a statement using this augmented lexical environment. Finally, it restores the original lexical environment.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-with-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">13.11.1</span>#sec-with-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">13.11.2</span>#sec-with-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">13.11.3</span>#sec-with-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">13.11.4</span>#sec-with-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">13.11.5</span>#sec-with-statement-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">13.11.6</span>#sec-with-statement-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-with-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.11.7</span>#sec-with-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-object-environment-records-getbindingvalue-n-s": {"num": "8.1.1.2.6", "title": "#sec-object-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-object-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-getbindingvalue-n-s\">#sec-object-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for object Environment Records returns the value of its associated binding object's property whose name is the String value of the argument identifier <var>N</var>. The property should already exist but if it does not the result depends upon the value of the <var>S</var> argument:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>value</var> is <emu-val>false</emu-val>, then<ol><li>If <var>S</var> is <emu-val>false</emu-val>, return the value <emu-val>undefined</emu-val>; otherwise throw a <emu-val>ReferenceError</emu-val> exception.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>bindings</var>, <var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.4.5", "title": "#sec-global-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-global-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-setmutablebinding-n-v-s\">#sec-global-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for global Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <var>S</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createglobalvarbinding": {"num": "8.1.1.4.17", "title": "#sec-createglobalvarbinding CreateGlobalVarBinding ( N, D )", "html": "<emu-clause id=\"sec-createglobalvarbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createglobalvarbinding\">#sec-createglobalvarbinding</span> CreateGlobalVarBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateGlobalVarBinding for global Environment Records creates and initializes a mutable binding in the associated <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> and records the bound name in the associated [[VarNames]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. If a binding already exists, it is reused and assumed to be initialized.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>hasProperty</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>Let <var>extensible</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).</li><li>If <var>hasProperty</var> is <emu-val>false</emu-val> and <var>extensible</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>ObjRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).</li><li>Perform ? <var>ObjRec</var>.InitializeBinding(<var>N</var>, <emu-val>undefined</emu-val>).</li></ol></li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> does not contain <var>N</var>, then<ol><li>Append <var>N</var> to <var>varDeclaredNames</var>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records": {"num": "8.1.1.1", "title": "#sec-declarative-environment-records Declarative Environment Records", "html": "<emu-clause id=\"sec-declarative-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records\">#sec-declarative-environment-records</span> Declarative Environment Records</h1>\n        <p>Each  <dfn>declarative Environment Record</dfn> is associated with an ECMAScript program scope containing variable, constant, let, class, module, import, and/or function declarations. A declarative Environment Record binds the set of identifiers defined by the declarations contained within its scope.</p>\n        <p>The behaviour of the concrete specification methods for declarative Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-declarative-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.1.1</span>#sec-declarative-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.1.2</span>#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.1.3</span>#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.1.4</span>#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.1.5</span>#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.1.6</span>#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.1.7</span>#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.1.8</span>#sec-declarative-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.1.9</span>#sec-declarative-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.1.10</span>#sec-declarative-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-global-environment-records-createimmutablebinding-n-s": {"num": "8.1.1.4.3", "title": "#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-global-environment-records-createimmutablebinding-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createimmutablebinding-n-s\">#sec-global-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImmutableBinding for global Environment Records creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If the Boolean argument <var>S</var> has the value <emu-val>true</emu-val> the new binding is marked as a strict binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateImmutableBinding(<var>N</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-web-compat-evaldeclarationinstantiation": {"num": "B.3.3.3", "title": "#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-evaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</span> Changes to EvalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 7:</p>\n        <emu-alg><ol><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>body</var>, do<ol><li>Let <var>F</var> be StringValue of the <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>body</var>, then<ol><li>Let <var>bindingExists</var> be <emu-val>false</emu-val>.</li><li>Let <var>thisLex</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisLex</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisLex</var> is not an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then<ol><li>If <var>thisLex</var>.HasBinding(<var>F</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Set <var>thisLex</var> to <var>thisLex</var>.[[OuterEnv]].</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>F</var>).</li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>true</emu-val>.</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>F</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>F</var>, <emu-val>true</emu-val>).</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-newdeclarativeenvironment": {"num": "8.1.2.2", "title": "#sec-newdeclarativeenvironment NewDeclarativeEnvironment ( E )", "html": "<emu-clause id=\"sec-newdeclarativeenvironment\" aoid=\"NewDeclarativeEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newdeclarativeenvironment\">#sec-newdeclarativeenvironment</span> NewDeclarativeEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewDeclarativeEnvironment takes argument <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-deletebinding-n": {"num": "8.1.1.1.7", "title": "#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-deletebinding-n\">#sec-declarative-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for declarative Environment Records can only delete bindings that have been explicitly designated as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for the name that is the value of <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> cannot be deleted, return <emu-val>false</emu-val>.</li><li>Remove the binding for <var>N</var> from <var>envRec</var>.</li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-haslexicaldeclaration": {"num": "8.1.1.4.13", "title": "#sec-haslexicaldeclaration HasLexicalDeclaration ( N )", "html": "<emu-clause id=\"sec-haslexicaldeclaration\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-haslexicaldeclaration\">#sec-haslexicaldeclaration</span> HasLexicalDeclaration ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasLexicalDeclaration for global Environment Records determines if the argument identifier has a binding in this record that was created using a lexical declaration such as a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>Return <var>DclRec</var>.HasBinding(<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createimportbinding": {"num": "8.1.1.5.5", "title": "#sec-createimportbinding CreateImportBinding ( N, M, N2 )", "html": "<emu-clause id=\"sec-createimportbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createimportbinding\">#sec-createimportbinding</span> CreateImportBinding ( <var>N</var>, <var>M</var>, <var>N2</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImportBinding for module Environment Records creates a new initialized immutable indirect binding for the name <var>N</var>. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is the name of a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. Accesses to the value of the new binding will indirectly access the bound value of the target binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When <var>M</var>.[[Environment]] is instantiated it will have a direct binding for <var>N2</var>.</li><li>Create an immutable indirect binding in <var>envRec</var> for <var>N</var> that references <var>M</var> and <var>N2</var> as its target binding and record that the binding is initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-object-environment-records": {"num": "8.1.1.2", "title": "#sec-object-environment-records Object Environment Records", "html": "<emu-clause id=\"sec-object-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records\">#sec-object-environment-records</span> Object Environment Records</h1>\n        <p>Each  <dfn>object Environment Record</dfn> is associated with an object called its  <em>binding object</em>. An object Environment Record binds the set of string identifier names that directly correspond to the property names of its binding object. Property keys that are not strings in the form of an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are not included in the set of bound identifiers. Both own and inherited properties are included in the set regardless of the setting of their [[Enumerable]] attribute. Because properties can be dynamically added and deleted from objects, the set of identifiers bound by an object Environment Record may potentially change as a side-effect of any operation that adds or deletes properties. Any bindings that are created as a result of such a side-effect are considered to be a mutable binding even if the Writable attribute of the corresponding property has the value <emu-val>false</emu-val>. Immutable bindings do not exist for object Environment Records.</p>\n        <p>Object Environment Records created for <code>with</code> statements (<emu-xref href=\"#sec-with-statement\"><a href=\"#sec-with-statement\" class=\"excluded-xref\" excluded-id=\"sec-with-statement\">#sec-with-statement</a></emu-xref>) can provide their binding object as an implicit <emu-val>this</emu-val> value for use in function calls. The capability is controlled by a <var>withEnvironment</var> Boolean value that is associated with each object Environment Record. By default, the value of <var>withEnvironment</var> is <emu-val>false</emu-val> for any object Environment Record.</p>\n        <p>The behaviour of the concrete specification methods for object Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-object-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.2.1</span>#sec-object-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.2.2</span>#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-object-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.2.3</span>#sec-object-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.2.4</span>#sec-object-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-object-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.2.5</span>#sec-object-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.2.6</span>#sec-object-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.2.7</span>#sec-object-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.2.8</span>#sec-object-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.2.9</span>#sec-object-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.2.10</span>#sec-object-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-object-environment-records-hasbinding-n": {"num": "8.1.1.2.1", "title": "#sec-object-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-object-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-hasbinding-n\">#sec-object-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for object Environment Records determines if its associated binding object has a property whose name is the value of the argument <var>N</var>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>foundBinding</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>foundBinding</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>false</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>unscopables</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>bindings</var>, @@unscopables).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unscopables</var>) is Object, then<ol><li>Let <var>blocked</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>unscopables</var>, <var>N</var>)).</li><li>If <var>blocked</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-evaldeclarationinstantiation": {"num": "18.2.1.3", "title": "#sec-evaldeclarationinstantiation Runtime Semantics: EvalDeclarationInstantiation ( body, varEnv, lexEnv, strict )", "html": "<emu-clause id=\"sec-evaldeclarationinstantiation\" aoid=\"EvalDeclarationInstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</span> Runtime Semantics: EvalDeclarationInstantiation ( <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strict</var> )</h1>\n        <p>The abstract operation EvalDeclarationInstantiation takes arguments <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, and <var>strict</var>. It performs the following steps when called:</p>\n        <!--\n          WARNING: If you add, remove, rename, or repurpose any variable names\n                   within this algorithm, you may need to update\n                   #sec-web-compat-evaldeclarationinstantiation and\n                   #sec-variablestatements-in-catch-blocks accordingly.\n        -->\n        <emu-alg><ol><li>Let <var>varNames</var> be the VarDeclaredNames of <var>body</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>body</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: <code>eval</code> will not create a global var declaration that would be shadowed by a global lexical declaration.</li></ol></li></ol></li><li>Let <var>thisLex</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisLex</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisLex</var> is not an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then<ol><li>NOTE: The environment of with statements cannot contain any lexical declaration so it doesn't need to be checked for var/let hoisting conflicts.</li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>thisLex</var>.HasBinding(<var>name</var>) is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: Annex <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref> defines alternate semantics for the above step.</li></ol></li><li>NOTE: A <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> will not hoist var declaration over a like-named lexical declaration.</li></ol></li></ol></li><li>Set <var>thisLex</var> to <var>thisLex</var>.[[OuterEnv]].</li></ol></li></ol></li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-evaldeclarationinstantiation\"><a href=\"#sec-web-compat-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Let <var>vnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step unless <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> and the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>body</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>fn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnv</var>.CreateMutableBinding(<var>fn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 10.</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>vn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnv</var>.CreateMutableBinding(<var>vn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 10.</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>vn</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative version of this algorithm is described in  <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-declarative-environment-records-initializebinding-n-v": {"num": "8.1.1.1.4", "title": "#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-declarative-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-initializebinding-n-v\">#sec-declarative-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for declarative Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> must have an uninitialized binding for <var>N</var>.</li><li>Set the bound value for <var>N</var> in <var>envRec</var> to <var>V</var>.</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>envRec</var> has been initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.1.5", "title": "#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">#sec-declarative-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for declarative Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A binding for <var>N</var> normally already exists, but in rare cases it may not. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> does not have a binding for <var>N</var>, then<ol><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Perform <var>envRec</var>.CreateMutableBinding(<var>N</var>, <emu-val>true</emu-val>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is a strict binding, set <var>S</var> to <emu-val>true</emu-val>.</li><li>If the binding for <var>N</var> in <var>envRec</var> has not yet been initialized, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Else if the binding for <var>N</var> in <var>envRec</var> is a mutable binding, change its bound value to <var>V</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is an attempt to change the value of an immutable binding.</li><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An example of ECMAScript code that results in a missing binding at step 2 is:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"var x; x = (delete x, 0);\"</span>); }</code></pre>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-deletebinding-n": {"num": "8.1.1.4.7", "title": "#sec-global-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-global-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-deletebinding-n\">#sec-global-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for global Environment Records can only delete bindings that have been explicitly designated as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.DeleteBinding(<var>N</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>status</var> be ? <var>ObjRec</var>.DeleteBinding(<var>N</var>).</li><li>If <var>status</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>varNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>N</var> is an element of <var>varNames</var>, remove that element from the <var>varNames</var>.</li></ol></li><li>Return <var>status</var>.</li></ol></li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-initializebinding-n-v": {"num": "8.1.1.4.4", "title": "#sec-global-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-global-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-initializebinding-n-v\">#sec-global-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for global Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If the binding exists, it must be in the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-deletebinding-n": {"num": "8.1.1.2.7", "title": "#sec-object-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-object-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-deletebinding-n\">#sec-object-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for object Environment Records can only delete bindings that correspond to properties of the environment object whose [[Configurable]] attribute have the value <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ? <var>bindings</var>.[[Delete]](<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-getbindingvalue-n-s": {"num": "8.1.1.4.6", "title": "#sec-global-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-global-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-getbindingvalue-n-s\">#sec-global-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for global Environment Records returns the value of its bound identifier whose name is the value of the argument <var>N</var>. If the binding is an uninitialized binding throw a <emu-val>ReferenceError</emu-val> exception. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.GetBindingValue(<var>N</var>, <var>S</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.GetBindingValue(<var>N</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-createmutablebinding-n-d": {"num": "8.1.1.2.2", "title": "#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-object-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-createmutablebinding-n-d\">#sec-object-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for object Environment Records creates in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s associated binding object a property whose name is the String value and initializes it to the value <emu-val>undefined</emu-val>. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new property's [[Configurable]] attribute is set to <emu-val>true</emu-val>; otherwise it is set to <emu-val>false</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>bindings</var>, <var>N</var>, PropertyDescriptor { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>D</var> }).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Normally <var>envRec</var> will not have a binding for <var>N</var> but if it does, the semantics of <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref> may result in an existing binding being replaced or shadowed or cause an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> to be returned.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-initializebinding-n-v": {"num": "8.1.1.2.4", "title": "#sec-object-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-object-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-initializebinding-n-v\">#sec-object-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for object Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> must have an uninitialized binding for <var>N</var>.</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>envRec</var> has been initialized.</li><li>Return ? <var>envRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>In this specification, all uses of CreateMutableBinding for object Environment Records are immediately followed by a call to InitializeBinding for the same name. Hence, implementations do not need to explicitly track the initialization state of individual <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> bindings.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-candeclareglobalfunction": {"num": "8.1.1.4.16", "title": "#sec-candeclareglobalfunction CanDeclareGlobalFunction ( N )", "html": "<emu-clause id=\"sec-candeclareglobalfunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candeclareglobalfunction\">#sec-candeclareglobalfunction</span> CanDeclareGlobalFunction ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CanDeclareGlobalFunction for global Environment Records determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument <var>N</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).</li><li>If <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>existingProp</var>) is <emu-val>true</emu-val> and <var>existingProp</var> has attribute values { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val> }, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-withbaseobject": {"num": "8.1.1.2.10", "title": "#sec-object-environment-records-withbaseobject WithBaseObject ( )", "html": "<emu-clause id=\"sec-object-environment-records-withbaseobject\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-withbaseobject\">#sec-object-environment-records-withbaseobject</span> WithBaseObject ( )</h1>\n          <p>Object Environment Records return <emu-val>undefined</emu-val> as their WithBaseObject unless their <var>withEnvironment</var> flag is <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>true</emu-val>, return the binding object for <var>envRec</var>.</li><li>Otherwise, return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-globaldeclarationinstantiation": {"num": "15.1.11", "title": "#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> Runtime Semantics: GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>The abstract operation GlobalDeclarationInstantiation takes arguments <var>script</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the LexicallyDeclaredNames of <var>script</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>script</var>.</li><li>For each <var>name</var> in <var>lexNames</var>, do<ol><li>If <var>env</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>env</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>script</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>env</var>.</li><li>Perform ? <var>env</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in  <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-global-environment-records": {"num": "8.1.1.4", "title": "#sec-global-environment-records Global Environment Records", "html": "<emu-clause id=\"sec-global-environment-records\" oldids=\"global-environment\">\n        <span id=\"global-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records\">#sec-global-environment-records</span> Global Environment Records</h1>\n        <p>A  <dfn>global Environment Record</dfn> is used to represent the outer most scope that is shared by all of the ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> elements that are processed in a common <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>. A global Environment Record provides the bindings for built-in globals (clause  <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>), properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and for all top-level declarations (<emu-xref href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\">#sec-block-static-semantics-toplevellexicallyscopeddeclarations</a></emu-xref>,  <emu-xref href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevelvarscopeddeclarations\">#sec-block-static-semantics-toplevelvarscopeddeclarations</a></emu-xref>) that occur within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.</p>\n        <p>A global Environment Record is logically a single record but it is specified as a composite encapsulating an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> and a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>. The <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> has as its base object the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> of the associated <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>. This <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is the value returned by the global Environment Record's GetThisBinding concrete method. The <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> component of a global Environment Record contains the bindings for all built-in globals (clause  <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>) and all bindings introduced by a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> contained in global code. The bindings for all other ECMAScript declarations in global code are contained in the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> component of the global Environment Record.</p>\n        <p>Properties may be created directly on a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. Hence, the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> component of a global Environment Record may contain both bindings created explicitly by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations and bindings created implicitly as properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. In order to identify which bindings were explicitly created using declarations, a global Environment Record maintains a list of the names bound using its CreateGlobalVarBinding and CreateGlobalFunctionBinding concrete methods.</p>\n        <p>Global Environment Records have the additional fields listed in  <emu-xref href=\"#table-18\"><a href=\"#table-18\" class=\"excluded-xref\" excluded-id=\"table-18\">#table-18</a></emu-xref> and the additional methods listed in  <emu-xref href=\"#table-19\"><a href=\"#table-19\" class=\"excluded-xref\" excluded-id=\"table-19\">#table-19</a></emu-xref>.</p>\n        <emu-table id=\"table-18\" caption=\"Additional Fields of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-18\">#table-18</span>: Additional Fields of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ObjectRecord]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">Object Environment Record</a></emu-xref>\n              \n              </td>\n              <td>\n                Binding object is the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. It contains global built-in bindings as well as <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> bindings in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GlobalThisValue]]\n              \n              </td>\n              <td>\n                Object\n              \n              </td>\n              <td>\n                The value returned by <code>this</code> in global scope. Hosts may provide any ECMAScript Object value.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DeclarativeRecord]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">Declarative Environment Record</a></emu-xref>\n              \n              </td>\n              <td>\n                Contains bindings for all declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> code except for <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <var>bindings</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[VarNames]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n              \n              </td>\n              <td>\n                The string names bound by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-19\" caption=\"Additional Methods of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-19\">#table-19</span>: Additional Methods of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasVarDeclaration (N)\n              \n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasLexicalDeclaration (N)\n              \n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a lexical declaration such as a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasRestrictedGlobalProperty (N)\n              \n              </td>\n              <td>\n                Determines if the argument is the name of a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property that may not be shadowed by a global lexical binding.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalVar (N)\n              \n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument <var>N</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalFunction (N)\n              \n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument <var>N</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalVarBinding(N, D)\n              \n              </td>\n              <td>\n                Used to create and initialize to <emu-val>undefined</emu-val> a global <code>var</code> binding in the [[ObjectRecord]] component of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>var</code>. The String value <var>N</var> is the bound name. If <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows var declarations to receive special treatment.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalFunctionBinding(N, V, D)\n              \n              </td>\n              <td>\n                Create and initialize a global <code>function</code> binding in the [[ObjectRecord]] component of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>function</code>. The String value <var>N</var> is the bound name. <var>V</var> is the initialization value. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows function declarations to receive special treatment.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the concrete specification methods for global Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-global-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.4.1</span>#sec-global-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.4.2</span>#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-global-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.4.3</span>#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.4.4</span>#sec-global-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-global-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.4.5</span>#sec-global-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.4.6</span>#sec-global-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.4.7</span>#sec-global-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.4.8</span>#sec-global-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.4.9</span>#sec-global-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.4.10</span>#sec-global-environment-records-withbaseobject WithBaseObject ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.4.11</span>#sec-global-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-hasvardeclaration\"><h1><span class=\"secnum\">8.1.1.4.12</span>#sec-hasvardeclaration HasVarDeclaration ( N )</h1>...</div><div id=\"excluded-sec-haslexicaldeclaration\"><h1><span class=\"secnum\">8.1.1.4.13</span>#sec-haslexicaldeclaration HasLexicalDeclaration ( N )</h1>...</div><div id=\"excluded-sec-hasrestrictedglobalproperty\"><h1><span class=\"secnum\">8.1.1.4.14</span>#sec-hasrestrictedglobalproperty HasRestrictedGlobalProperty ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalvar\"><h1><span class=\"secnum\">8.1.1.4.15</span>#sec-candeclareglobalvar CanDeclareGlobalVar ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalfunction\"><h1><span class=\"secnum\">8.1.1.4.16</span>#sec-candeclareglobalfunction CanDeclareGlobalFunction ( N )</h1>...</div><div id=\"excluded-sec-createglobalvarbinding\"><h1><span class=\"secnum\">8.1.1.4.17</span>#sec-createglobalvarbinding CreateGlobalVarBinding ( N, D )</h1>...</div><div id=\"excluded-sec-createglobalfunctionbinding\"><h1><span class=\"secnum\">8.1.1.4.18</span>#sec-createglobalfunctionbinding CreateGlobalFunctionBinding ( N, V, D )</h1>...</div></emu-clause>\n\n      "}, "sec-newobjectenvironment": {"num": "8.1.2.3", "title": "#sec-newobjectenvironment NewObjectEnvironment ( O, E )", "html": "<emu-clause id=\"sec-newobjectenvironment\" aoid=\"NewObjectEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newobjectenvironment\">#sec-newobjectenvironment</span> NewObjectEnvironment ( <var>O</var>, <var>E</var> )</h1>\n        <p>The abstract operation NewObjectEnvironment takes arguments <var>O</var> (an Object) and <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> containing <var>O</var> as the binding object.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-the-environment-record-type-hierarchy": {"num": "8.1.1", "title": "#sec-the-environment-record-type-hierarchy The Environment Record Type Hierarchy", "html": "<emu-clause id=\"sec-the-environment-record-type-hierarchy\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-the-environment-record-type-hierarchy\">#sec-the-environment-record-type-hierarchy</span> The Environment Record Type Hierarchy</h1>\n      <p>Environment Records can be thought of as existing in a simple object-oriented hierarchy where <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is an abstract class with three concrete subclasses: <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>, <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, and <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>. Function Environment Records and module Environment Records are subclasses of <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</p>\n      <ul>\n        <li>\n          <p><emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> (abstract)</p>\n          <ul>\n            <li>\n              <p>A  <em><emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref></em> is used to define the effect of ECMAScript language syntactic elements such as <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s, <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>s, and <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clauses that directly associate identifier bindings with ECMAScript language values.</p>\n              <ul>\n                <li>\n                  <p>A  <em><emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref></em> corresponds to the invocation of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, and contains bindings for the top-level declarations within that function. It may establish a new <code>this</code> binding. It also captures the state necessary to support <code>super</code> method invocations.</p>\n                </li>\n                <li>\n                  <p>A  <em><emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref></em> contains the bindings for the top-level declarations of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It also contains the bindings that are explicitly imported by the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Its [[OuterEnv]] is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</p>\n                </li>\n              </ul>\n            </li>\n            <li>\n              <p>An  <em><emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref></em> is used to define the effect of ECMAScript elements such as <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> that associate identifier bindings with the properties of some object.</p>\n            </li>\n            <li>\n              <p>A  <em><emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref></em> is used for <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> global declarations. It does not have an outer environment; its [[OuterEnv]] is <emu-val>null</emu-val>. It may be prepopulated with identifier bindings and it includes an associated <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> whose properties provide some of the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>'s identifier bindings. As ECMAScript code is executed, additional properties may be added to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and the initial properties may be modified.</p>\n            </li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> abstract class includes the abstract specification methods defined in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref>. These abstract methods have distinct concrete algorithms for each of the concrete subclasses.</p>\n      <emu-table id=\"table-15\" caption=\"Abstract Methods of Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-15\">#table-15</span>: Abstract Methods of Environment Records</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Method\n            \n            </th>\n            <th>\n              Purpose\n            \n            </th>\n          </tr>\n          <tr>\n            <td>\n              HasBinding(N)\n            \n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> has a binding for the String value <var>N</var>. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              CreateMutableBinding(N, D)\n            \n            </td>\n            <td>\n              Create a new but uninitialized mutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be subsequently deleted.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              CreateImmutableBinding(N, S)\n            \n            </td>\n            <td>\n              Create a new but uninitialized immutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If <var>S</var> is <emu-val>true</emu-val> then attempts to set it after it has been initialized will always throw an exception, regardless of the strict mode setting of operations that reference that binding.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              InitializeBinding(N, V)\n            \n            </td>\n            <td>\n              Set the value of an already existing but uninitialized binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and is a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              SetMutableBinding(N, V, S)\n            \n            </td>\n            <td>\n              Set the value of an already existing mutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and may be a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>. <var>S</var> is a Boolean flag. If <var>S</var> is <emu-val>true</emu-val> and the binding cannot be set throw a <emu-val>TypeError</emu-val> exception.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              GetBindingValue(N, S)\n            \n            </td>\n            <td>\n              Returns the value of an already existing binding from an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>S</var> is used to identify references originating in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> or that otherwise require strict mode reference semantics. If <var>S</var> is <emu-val>true</emu-val> and the binding does not exist throw a <emu-val>ReferenceError</emu-val> exception. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              DeleteBinding(N)\n            \n            </td>\n            <td>\n              Delete a binding from an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If a binding for <var>N</var> exists, remove the binding and return <emu-val>true</emu-val>. If the binding exists but cannot be removed return <emu-val>false</emu-val>. If the binding does not exist return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              HasThisBinding()\n            \n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> establishes a <code>this</code> binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              HasSuperBinding()\n            \n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> establishes a <code>super</code> method binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              WithBaseObject()\n            \n            </td>\n            <td>\n              If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is associated with a <code>with</code> statement, return the with object. Otherwise, return <emu-val>undefined</emu-val>.\n            \n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n\n      <div id=\"excluded-sec-declarative-environment-records\"><h1><span class=\"secnum\">8.1.1.1</span>#sec-declarative-environment-records Declarative Environment Records</h1>...</div><div id=\"excluded-sec-object-environment-records\"><h1><span class=\"secnum\">8.1.1.2</span>#sec-object-environment-records Object Environment Records</h1>...</div><div id=\"excluded-sec-function-environment-records\"><h1><span class=\"secnum\">8.1.1.3</span>#sec-function-environment-records Function Environment Records</h1>...</div><div id=\"excluded-sec-global-environment-records\"><h1><span class=\"secnum\">8.1.1.4</span>#sec-global-environment-records Global Environment Records</h1>...</div><div id=\"excluded-sec-module-environment-records\"><h1><span class=\"secnum\">8.1.1.5</span>#sec-module-environment-records Module Environment Records</h1>...</div></emu-clause>\n\n    "}, "sec-global-environment-records-hasbinding-n": {"num": "8.1.1.4.1", "title": "#sec-global-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-global-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-hasbinding-n\">#sec-global-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for global Environment Records simply determines if the argument identifier is one of the identifiers bound by the record:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.HasBinding(<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-abstract-module-records": {"num": "15.2.1.15", "title": "#sec-abstract-module-records Abstract Module Records", "html": "<emu-clause id=\"sec-abstract-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-module-records\">#sec-abstract-module-records</span> Abstract Module Records</h1>\n        <p>A  <dfn>Module Record</dfn> encapsulates structural information about the imports and exports of a single module. This information is used to link the imports and exports of sets of connected modules. A Module Record includes four fields that are only used when evaluating a module.</p>\n        <p>For specification purposes Module Record values are values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> specification type and can be thought of as existing in a simple object-oriented hierarchy where Module Record is an abstract class with both abstract and concrete subclasses. This specification defines the abstract subclass named <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> and its concrete subclass named <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>. Other specifications and implementations may define additional Module Record subclasses corresponding to alternative module definition facilities that they defined.</p>\n        <p>Module Record defines the fields listed in  <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref>. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in  <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref>. All Module definition subclasses must provide concrete implementations of these abstract methods.</p>\n        <emu-table id=\"table-36\" caption=\"Module Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-36\">#table-36</span>: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[Realm]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> within which this module was created. <emu-val>undefined</emu-val> if not yet assigned.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Environment]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing the top level bindings for this module. This field is set when the module is linked.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Namespace]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The Module Namespace Object (<emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>) if one has been created for this module. Otherwise <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HostDefined]]\n              \n              </td>\n              <td>\n                Any, default value is <emu-val>undefined</emu-val>.\n              \n              </td>\n              <td>\n                Field reserved for use by host environments that need to associate additional information with a module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-37\" caption=\"Abstract Methods of Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-37\">#table-37</span>: Abstract Methods of Module Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetExportedNames([<var>exportStarSet</var>])\n              \n              </td>\n              <td>\n                Return a list of all names that are either directly or indirectly exported from this module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                ResolveExport(<var>exportName</var> [, <var>resolveSet</var>])\n              \n              </td>\n              <td>\n                <p>Return the binding of a name exported by this module. Bindings are represented by a  <dfn id=\"resolvedbinding-record\">ResolvedBinding Record</dfn>, of the form { [[Module]]: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. Return <emu-val>null</emu-val> if the name cannot be resolved, or <emu-val>\"ambiguous\"</emu-val> if multiple bindings were found.</p>\n                <p>Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result if it completes normally.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Link()\n              \n              </td>\n              <td>\n                <p>Prepare the module for evaluation by transitively resolving all module dependencies and creating a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Evaluate()\n              \n              </td>\n              <td>\n                <p>If this module has already been evaluated successfully, return <emu-val>undefined</emu-val>; if it has already been evaluated unsuccessfully, throw the exception that was produced. Otherwise, transitively evaluate all module dependencies of this module and then evaluate this module.</p>\n                <p>Link must have completed successfully prior to invoking this method.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-hasbinding-n": {"num": "8.1.1.1.1", "title": "#sec-declarative-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-hasbinding-n\">#sec-declarative-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for declarative Environment Records simply determines if the argument identifier is one of the identifiers bound by the record:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> has a binding for the name that is the value of <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-blockdeclarationinstantiation": {"num": "13.2.14", "title": "#sec-blockdeclarationinstantiation Runtime Semantics: BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> Runtime Semantics: BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>The abstract operation BlockDeclarationInstantiation takes arguments <var>code</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li>Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-newmoduleenvironment": {"num": "8.1.2.6", "title": "#sec-newmoduleenvironment NewModuleEnvironment ( E )", "html": "<emu-clause id=\"sec-newmoduleenvironment\" aoid=\"NewModuleEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newmoduleenvironment\">#sec-newmoduleenvironment</span> NewModuleEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewModuleEnvironment takes argument <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {"table-1": "Table 1", "table-2": "Table 3", "table-3": "Table 4", "table-15": "Table 16", "table-16": "Table 17", "table-17": "Table 18", "table-18": "Table 19", "table-19": "Table 20", "table-20": "Table 21", "table-36": "Table 38", "table-37": "Table 39"}}}