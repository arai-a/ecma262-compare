{"from": {"secList": ["sec-relational-operators-runtime-semantics-evaluation"], "secData": {"sec-relational-operators-runtime-semantics-evaluation": {"num": "12.10.3", "title": "#sec-relational-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-runtime-semantics-evaluation\">#sec-relational-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d216c92a\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>lval</var> &lt; <var>rval</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1998981b\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>rval</var> &lt; <var>lval</var> with <var>LeftFirst</var> equal to <emu-val>false</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"29c91375\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>rval</var> &lt; <var>lval</var> with <var>LeftFirst</var> equal to <emu-val>false</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ddc529a7\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>lval</var> &lt; <var>rval</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d440bdac\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>instanceof</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InstanceofOperator\"><a href=\"#sec-instanceofoperator\">InstanceofOperator</a></emu-xref>(<var>lval</var>, <var>rval</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f66b493e\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>rval</var>, <emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>lval</var>)).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-relational-operators-runtime-semantics-evaluation"], "secData": {"sec-relational-operators-runtime-semantics-evaluation": {"num": "12.10.3", "title": "#sec-relational-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-runtime-semantics-evaluation\">#sec-relational-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d216c92a\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>lval</var> &lt; <var>rval</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1998981b\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>rval</var> &lt; <var>lval</var> with <var>LeftFirst</var> equal to <emu-val>false</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"29c91375\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>rval</var> &lt; <var>lval</var> with <var>LeftFirst</var> equal to <emu-val>false</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ddc529a7\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>lval</var> &lt; <var>rval</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d440bdac\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>instanceof</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InstanceofOperator\"><a href=\"#sec-instanceofoperator\">InstanceofOperator</a></emu-xref>(<var>lval</var>, <var>rval</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f66b493e\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>rval</var>, ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>lval</var>)).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}}