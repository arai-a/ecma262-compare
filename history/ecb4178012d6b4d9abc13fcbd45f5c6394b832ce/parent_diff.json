{"from": {"secList": ["sec-enumerableownpropertynames"], "secData": {"sec-enumerableownpropertynames": {"num": "7.3.22", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" aoid=\"EnumerableOwnPropertyNames\" oldids=\"sec-enumerableownproperties\">\n      <span id=\"sec-enumerableownproperties\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>When the abstract operation EnumerableOwnPropertyNames is called with an Object <var>O</var> and <var>kind</var> which is one of (<emu-const>key</emu-const>, <emu-const>value</emu-const>, <emu-const>key+value</emu-const>), the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Order the elements of <var>properties</var> so they are in the same relative order as would be produced by the Iterator that would be returned if the <emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref> internal method were invoked with <var>O</var>.</li><li>Return <var>properties</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-enumerableownpropertynames"], "secData": {"sec-enumerableownpropertynames": {"num": "7.3.22", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" aoid=\"EnumerableOwnPropertyNames\" oldids=\"sec-enumerableownproperties\">\n      <span id=\"sec-enumerableownproperties\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>When the abstract operation EnumerableOwnPropertyNames is called with an Object <var>O</var> and <var>kind</var> which is one of (<emu-const>key</emu-const>, <emu-const>value</emu-const>, <emu-const>key+value</emu-const>), the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Return <var>properties</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}}