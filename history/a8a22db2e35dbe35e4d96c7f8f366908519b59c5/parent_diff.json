{"from": {"secList": ["sec-leavecriticalsection", "sec-notifywaiter", "sec-getwaiterlist", "sec-entercriticalsection"], "secData": {"sec-leavecriticalsection": {"num": "24.4.1.5", "title": "#sec-leavecriticalsection LeaveCriticalSection ( WL )", "html": "<emu-clause id=\"sec-leavecriticalsection\" aoid=\"LeaveCriticalSection\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-leavecriticalsection\">#sec-leavecriticalsection</span> LeaveCriticalSection ( <var>WL</var> )</h1>\n        <p>The abstract operation LeaveCriticalSection takes one argument, a <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> <var>WL</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is in the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var>.</li><li>Leave the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-notifywaiter": {"num": "24.4.1.10", "title": "#sec-notifywaiter NotifyWaiter ( WL, W )", "html": "<emu-clause id=\"sec-notifywaiter\" aoid=\"NotifyWaiter\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-notifywaiter\">#sec-notifywaiter</span> NotifyWaiter ( <var>WL</var>, <var>W</var> )</h1>\n        <p>The abstract operation NotifyWaiter takes two arguments, a <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> <var>WL</var> and an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> signifier <var>W</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is in the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var>.</li><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventsRecord</var> be the <emu-xref href=\"#sec-agent-event-records\"><a href=\"#sec-agent-event-records\">Agent Events Record</a></emu-xref> in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>agentSynchronizesWith</var> be <var>eventsRecord</var>.[[AgentSynchronizesWith]].</li><li>Let <var>notifierEventList</var> be <var>eventsRecord</var>.[[EventList]].</li><li>Let <var>waiterEventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <var>W</var>.</li><li>Let <var>notifyEvent</var> and <var>waitEvent</var> be new <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize</a></emu-xref> events.</li><li>Append <var>notifyEvent</var> to <var>notifierEventList</var>.</li><li>Append <var>waitEvent</var> to <var>waiterEventList</var>.</li><li>Append (<var>notifyEvent</var>, <var>waitEvent</var>) to <var>agentSynchronizesWith</var>.</li><li>Notify the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> <var>W</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The embedding may delay notifying <var>W</var>, e.g. for resource management reasons, but <var>W</var> must eventually be notified in order to guarantee forward progress.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-getwaiterlist": {"num": "24.4.1.3", "title": "#sec-getwaiterlist GetWaiterList ( block, i )", "html": "<emu-clause id=\"sec-getwaiterlist\" aoid=\"GetWaiterList\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getwaiterlist\">#sec-getwaiterlist</span> GetWaiterList ( <var>block</var>, <var>i</var> )</h1>\n        <p>A  <dfn>WaiterList</dfn> is a semantic object that contains an ordered list of those agents that are waiting on a location (<var>block</var>, <var>i</var>) in shared memory; <var>block</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and <var>i</var> a byte offset into the memory of <var>block</var>.</p>\n        <p>The <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> has a store of WaiterList objects; the store is indexed by (<var>block</var>, <var>i</var>). WaiterLists are <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>-independent: a lookup in the store of WaiterLists by (<var>block</var>, <var>i</var>) will result in the same WaiterList object in any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</p>\n        <p>Each WaiterList has a  <dfn>critical section</dfn> that controls exclusive access to that WaiterList during evaluation. Only a single <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> may enter a WaiterList's critical section at one time. Entering and leaving a WaiterList's critical section is controlled by the <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref> and <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>. Operations on a WaiterList&#8212;adding and removing waiting agents, traversing the list of agents, suspending and notifying agents on the list&#8212;may only be performed by agents that have entered the WaiterList's critical section.</p>\n        <p>The abstract operation GetWaiterList takes two arguments, a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> <var>block</var> and a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>block</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>i</var> and <var>i</var> + 3 are valid byte offsets within the memory of <var>block</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>i</var> is divisible by 4.</li><li>Return the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> that is referenced by the pair (<var>block</var>, <var>i</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-entercriticalsection": {"num": "24.4.1.4", "title": "#sec-entercriticalsection EnterCriticalSection ( WL )", "html": "<emu-clause id=\"sec-entercriticalsection\" aoid=\"EnterCriticalSection\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-entercriticalsection\">#sec-entercriticalsection</span> EnterCriticalSection ( <var>WL</var> )</h1>\n        <p>The abstract operation EnterCriticalSection takes one argument, a <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> <var>WL</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is not in the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for any <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref>.</li><li>Wait until no <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is in the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var>, then enter the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var> (without allowing any other <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to enter).\n        </li></ol></emu-alg>\n        <p>EnterCriticalSection has  <dfn>contention</dfn> when an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> attempting to enter the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> must wait for another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to leave it. When there is no contention, FIFO order of EnterCriticalSection calls is observable. When there is contention, an implementation may choose an arbitrary order but may not cause an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to wait indefinitely.</p>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-leavecriticalsection", "sec-notifywaiter", "sec-getwaiterlist", "sec-entercriticalsection"], "secData": {"sec-leavecriticalsection": {"num": "24.4.1.5", "title": "#sec-leavecriticalsection LeaveCriticalSection ( WL )", "html": "<emu-clause id=\"sec-leavecriticalsection\" aoid=\"LeaveCriticalSection\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-leavecriticalsection\">#sec-leavecriticalsection</span> LeaveCriticalSection ( <var>WL</var> )</h1>\n        <p>The abstract operation LeaveCriticalSection takes one argument, a <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> <var>WL</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is in the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var>.</li><li>Let <var>execution</var> be the [[CandidateExecution]] field of the calling surrounding's <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventsRecord</var> be the <emu-xref href=\"#sec-agent-event-records\"><a href=\"#sec-agent-event-records\">Agent Events Record</a></emu-xref> in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>leaverEventList</var> be <var>eventsRecord</var>.[[EventList]].</li><li>Let <var>leaveEvent</var> be a new <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize event</a></emu-xref>.</li><li>Append <var>leaveEvent</var> to <var>leaverEventList</var>.</li><li>Set the <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize event</a></emu-xref> in <var>WL</var> to <var>leaveEvent</var>.</li><li>Leave the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-notifywaiter": {"num": "24.4.1.10", "title": "#sec-notifywaiter NotifyWaiter ( WL, W )", "html": "<emu-clause id=\"sec-notifywaiter\" aoid=\"NotifyWaiter\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-notifywaiter\">#sec-notifywaiter</span> NotifyWaiter ( <var>WL</var>, <var>W</var> )</h1>\n        <p>The abstract operation NotifyWaiter takes two arguments, a <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> <var>WL</var> and an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> signifier <var>W</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is in the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var>.</li><li>Notify the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> <var>W</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The embedding may delay notifying <var>W</var>, e.g. for resource management reasons, but <var>W</var> must eventually be notified in order to guarantee forward progress.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-getwaiterlist": {"num": "24.4.1.3", "title": "#sec-getwaiterlist GetWaiterList ( block, i )", "html": "<emu-clause id=\"sec-getwaiterlist\" aoid=\"GetWaiterList\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getwaiterlist\">#sec-getwaiterlist</span> GetWaiterList ( <var>block</var>, <var>i</var> )</h1>\n        <p>A  <dfn>WaiterList</dfn> is a semantic object that contains an ordered list of those agents that are waiting on a location (<var>block</var>, <var>i</var>) in shared memory; <var>block</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and <var>i</var> a byte offset into the memory of <var>block</var>. A WaiterList object also optionally contains a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize event</a></emu-xref> denoting the previous leaving of its critical section.</p>\n        <p>Initially a WaiterList object has an empty list and no <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize event</a></emu-xref>.</p>\n        <p>The <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> has a store of WaiterList objects; the store is indexed by (<var>block</var>, <var>i</var>). WaiterLists are <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>-independent: a lookup in the store of WaiterLists by (<var>block</var>, <var>i</var>) will result in the same WaiterList object in any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</p>\n        <p>Each WaiterList has a  <dfn>critical section</dfn> that controls exclusive access to that WaiterList during evaluation. Only a single <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> may enter a WaiterList's critical section at one time. Entering and leaving a WaiterList's critical section is controlled by the <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref> and <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>. Operations on a WaiterList&#8212;adding and removing waiting agents, traversing the list of agents, suspending and notifying agents on the list, setting and retrieving the <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize event</a></emu-xref>&#8212;may only be performed by agents that have entered the WaiterList's critical section.</p>\n        <p>The abstract operation GetWaiterList takes two arguments, a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> <var>block</var> and a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>block</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>i</var> and <var>i</var> + 3 are valid byte offsets within the memory of <var>block</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>i</var> is divisible by 4.</li><li>Return the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> that is referenced by the pair (<var>block</var>, <var>i</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-entercriticalsection": {"num": "24.4.1.4", "title": "#sec-entercriticalsection EnterCriticalSection ( WL )", "html": "<emu-clause id=\"sec-entercriticalsection\" aoid=\"EnterCriticalSection\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-entercriticalsection\">#sec-entercriticalsection</span> EnterCriticalSection ( <var>WL</var> )</h1>\n        <p>The abstract operation EnterCriticalSection takes one argument, a <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> <var>WL</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is not in the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for any <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref>.</li><li>Wait until no <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is in the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var>, then enter the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var> (without allowing any other <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to enter).</li><li>If <var>WL</var> has a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize event</a></emu-xref>, then<ol><li>NOTE: A <var>WL</var> whose <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> has been entered at least once has a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize event</a></emu-xref> set by <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>.</li><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventsRecord</var> be the <emu-xref href=\"#sec-agent-event-records\"><a href=\"#sec-agent-event-records\">Agent Events Record</a></emu-xref> in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>entererEventList</var> be <var>eventsRecord</var>.[[EventList]].</li><li>Let <var>enterEvent</var> be a new <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize event</a></emu-xref>.</li><li>Append <var>enterEvent</var> to <var>entererEventList</var>.</li><li>Let <var>leaveEvent</var> be the <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize event</a></emu-xref> in <var>WL</var>.</li><li>Append (<var>leaveEvent</var>, <var>enterEvent</var>) to <var>eventRecords</var>.[[AgentSynchronizesWith]].\n        </li></ol></li></ol></emu-alg>\n        <p>EnterCriticalSection has  <dfn>contention</dfn> when an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> attempting to enter the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> must wait for another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to leave it. When there is no contention, FIFO order of EnterCriticalSection calls is observable. When there is contention, an implementation may choose an arbitrary order but may not cause an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to wait indefinitely.</p>\n      </emu-clause>\n\n      "}}, "figData": {}}}