{"from": {"secList": ["sec-moduleevaluation"], "secData": {"sec-moduleevaluation": {"num": "15.2.1.16.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>Evaluate transitions this module's [[Status]] from <emu-const>linked</emu-const> to <emu-const>evaluated</emu-const>.</p>\n\n          <p>If execution results in an exception, that exception is recorded in the [[EvaluationError]] field and rethrown by future invocations of Evaluate.</p>\n\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>):</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>evaluating</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}}, "figData": {}}, "to": {"secList": ["sec-moduleevaluation"], "secData": {"sec-moduleevaluation": {"num": "15.2.1.16.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>Evaluate transitions this module's [[Status]] from <emu-const>linked</emu-const> to <emu-const>evaluated</emu-const>.</p>\n\n          <p>If execution results in an exception, that exception is recorded in the [[EvaluationError]] field and rethrown by future invocations of Evaluate.</p>\n\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>):</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This call to Evaluate is not happening at the same time as another call to Evaluate within the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</li><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>evaluating</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}}, "figData": {}}}