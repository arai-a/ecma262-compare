{"from": {"secList": ["sec-getcapabilitiesexecutor-functions", "sec-newpromisecapability"], "secData": {"sec-getcapabilitiesexecutor-functions": {"num": "27.2.1.5.1", "title": "#sec-getcapabilitiesexecutor-functions GetCapabilitiesExecutor Functions", "html": "<emu-clause id=\"sec-getcapabilitiesexecutor-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getcapabilitiesexecutor-functions\">#sec-getcapabilitiesexecutor-functions</span> GetCapabilitiesExecutor Functions</h1>\n          <p>A GetCapabilitiesExecutor function is an anonymous built-in function that has a [[Capability]] internal slot.</p>\n          <p>When a GetCapabilitiesExecutor function is called with arguments <var>resolve</var> and <var>reject</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> has a [[Capability]] internal slot whose value is a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>F</var>.[[Capability]].</li><li>If <var>promiseCapability</var>.[[Resolve]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>promiseCapability</var>.[[Reject]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>promiseCapability</var>.[[Resolve]] to <var>resolve</var>.</li><li>Set <var>promiseCapability</var>.[[Reject]] to <var>reject</var>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a GetCapabilitiesExecutor function is <emu-val>2</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n      "}, "sec-newpromisecapability": {"num": "27.2.1.5", "title": "#sec-newpromisecapability NewPromiseCapability ( C )", "html": "<emu-clause id=\"sec-newpromisecapability\" aoid=\"NewPromiseCapability\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromisecapability\">#sec-newpromisecapability</span> NewPromiseCapability ( <var>C</var> )</h1>\n        <p>The abstract operation NewPromiseCapability takes argument <var>C</var>. It attempts to use <var>C</var> as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> in the fashion of the built-in Promise <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a Promise object and extract its <code>resolve</code> and <code>reject</code> functions. The Promise object plus the <code>resolve</code> and <code>reject</code> functions are used to initialize a new <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>NOTE: <var>C</var> is assumed to be a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that supports the parameter conventions of the Promise <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (see <emu-xref href=\"#sec-promise-executor\"><a href=\"#sec-promise-executor\" class=\"excluded-xref\" excluded-id=\"sec-promise-executor\">#sec-promise-executor</a></emu-xref>).</li><li>Let <var>promiseCapability</var> be the <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> { [[Promise]]: <emu-val>undefined</emu-val>, [[Resolve]]: <emu-val>undefined</emu-val>, [[Reject]]: <emu-val>undefined</emu-val> }.</li><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-getcapabilitiesexecutor-functions\" title=\"\"><a href=\"#sec-getcapabilitiesexecutor-functions\">GetCapabilitiesExecutor Functions</a></emu-xref>.</li><li>Let <var>length</var> be the number of non-optional parameters of the function definition in <emu-xref href=\"#sec-getcapabilitiesexecutor-functions\" title=\"\"><a href=\"#sec-getcapabilitiesexecutor-functions\">GetCapabilitiesExecutor Functions</a></emu-xref>.</li><li>Let <var>executor</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, <var>length</var>, <emu-val>\"\"</emu-val>, &#171; [[Capability]] &#187;).</li><li>Set <var>executor</var>.[[Capability]] to <var>promiseCapability</var>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>executor</var> &#187;).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]]) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>promiseCapability</var>.[[Reject]]) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>promiseCapability</var>.[[Promise]] to <var>promise</var>.</li><li>Return <var>promiseCapability</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This abstract operation supports Promise subclassing, as it is generic on any <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that calls a passed executor function argument in the same way as the Promise <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. It is used to generalize static methods of the Promise <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to any subclass.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-getcapabilitiesexecutor-functions\"><h1><span class=\"secnum\">27.2.1.5.1</span>#sec-getcapabilitiesexecutor-functions GetCapabilitiesExecutor Functions</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-newpromisecapability"], "secData": {"sec-newpromisecapability": {"num": "27.2.1.5", "title": "#sec-newpromisecapability NewPromiseCapability ( C )", "html": "<emu-clause id=\"sec-newpromisecapability\" oldids=\"sec-getcapabilitiesexecutor-functions\" aoid=\"NewPromiseCapability\"><span id=\"sec-getcapabilitiesexecutor-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromisecapability\">#sec-newpromisecapability</span> NewPromiseCapability ( <var>C</var> )</h1>\n        <p>The abstract operation NewPromiseCapability takes argument <var>C</var>. It attempts to use <var>C</var> as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> in the fashion of the built-in Promise <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a Promise object and extract its <code>resolve</code> and <code>reject</code> functions. The Promise object plus the <code>resolve</code> and <code>reject</code> functions are used to initialize a new <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>NOTE: <var>C</var> is assumed to be a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that supports the parameter conventions of the Promise <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (see <emu-xref href=\"#sec-promise-executor\"><a href=\"#sec-promise-executor\" class=\"excluded-xref\" excluded-id=\"sec-promise-executor\">#sec-promise-executor</a></emu-xref>).</li><li>Let <var>promiseCapability</var> be the <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> { [[Promise]]: <emu-val>undefined</emu-val>, [[Resolve]]: <emu-val>undefined</emu-val>, [[Reject]]: <emu-val>undefined</emu-val> }.</li><li>Let <var>executorClosure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>resolve</var>, <var>reject</var>) that captures <var>promiseCapability</var> and performs the following steps when called:<ol><li>If <var>promiseCapability</var>.[[Resolve]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>promiseCapability</var>.[[Reject]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>promiseCapability</var>.[[Resolve]] to <var>resolve</var>.</li><li>Set <var>promiseCapability</var>.[[Reject]] to <var>reject</var>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>executor</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>executorClosure</var>, 2, <emu-val>\"\"</emu-val>, &#171; &#187;).</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>executor</var> &#187;).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]]) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>promiseCapability</var>.[[Reject]]) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>promiseCapability</var>.[[Promise]] to <var>promise</var>.</li><li>Return <var>promiseCapability</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This abstract operation supports Promise subclassing, as it is generic on any <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that calls a passed executor function argument in the same way as the Promise <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. It is used to generalize static methods of the Promise <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to any subclass.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}