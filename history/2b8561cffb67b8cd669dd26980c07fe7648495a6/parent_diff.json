{"from": {"secList": ["sec-serializejsonarray", "sec-json.stringify", "sec-serializejsonobject", "sec-serializejsonproperty"], "secData": {"sec-serializejsonarray": {"num": "24.5.2.5", "title": "#sec-serializejsonarray Runtime Semantics: SerializeJSONArray ( value )", "html": "<emu-clause id=\"sec-serializejsonarray\" aoid=\"SerializeJSONArray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonarray\">#sec-serializejsonarray</span> Runtime Semantics: SerializeJSONArray ( <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONArray with argument <var>value</var> serializes an array. It has access to the <var>stack</var>, <var>indent</var>, and <var>gap</var> values of the current invocation of the <code>stringify</code> method.</p>\n        <emu-alg><ol><li>If <var>stack</var> contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>stack</var>.</li><li>Let <var>stepback</var> be <var>indent</var>.</li><li>Set <var>indent</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>indent</var> and <var>gap</var>.</li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>value</var>).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var><ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>), <var>value</var>).</li><li>If <var>strP</var> is <emu-val>undefined</emu-val>, then<ol><li>Append <emu-val>\"null\"</emu-val> to <var>partial</var>.</li></ol></li><li>Else,<ol><li>Append <var>strP</var> to <var>partial</var>.</li></ol></li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <emu-val>\"[]\"</emu-val>.</li></ol></li><li>Else,<ol><li>If <var>gap</var> is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"[\"</emu-val>, <var>properties</var>, and <emu-val>\"]\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>indent</var>.</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"[\"</emu-val>, the code unit 0x000A (LINE FEED), <var>indent</var>, <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <emu-val>\"]\"</emu-val>.</li></ol></li></ol></li><li>Remove the last element of <var>stack</var>.</li><li>Set <var>indent</var> to <var>stepback</var>.</li><li>Return <var>final</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The representation of arrays includes only the elements between zero and  <emu-eqn class=\"inline\"><code>array.length</code> - 1</emu-eqn> inclusive. Properties whose keys are not  <emu-xref href=\"#array-index\"><a href=\"#array-index\">array indexes</a></emu-xref> are excluded from the stringification. An array is stringified as an opening LEFT SQUARE BRACKET, elements separated by COMMA, and a closing RIGHT SQUARE BRACKET.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-json.stringify": {"num": "24.5.2", "title": "#sec-json.stringify JSON.stringify ( value [ , replacer [ , space ] ] )", "html": "<emu-clause id=\"sec-json.stringify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.stringify\">#sec-json.stringify</span> JSON.stringify ( <var>value</var> [ , <var>replacer</var> [ , <var>space</var> ] ] )</h1>\n      <p>The <code>stringify</code> function returns a String in UTF-16 encoded JSON format representing an ECMAScript value, or <emu-val>undefined</emu-val>. It can take three parameters. The <var>value</var> parameter is an ECMAScript value, which is usually an object or array, although it can also be a String, Boolean, Number or <emu-val>null</emu-val>. The optional <var>replacer</var> parameter is either a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that acts as an inclusion list for selecting the object properties that will be stringified. The optional <var>space</var> parameter is a String or Number that allows the result to have white space injected into it to improve human readability.</p>\n      <p>These are the steps in stringifying an object:</p>\n      <emu-alg><ol><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>indent</var> be the empty String.</li><li>Let <var>PropertyList</var> and <var>ReplacerFunction</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replacer</var>) is Object, then<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replacer</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>ReplacerFunction</var> to <var>replacer</var>.</li></ol></li><li>Else,<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>replacer</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>PropertyList</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>replacer</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>replacer</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>Let <var>item</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is String, set <var>item</var> to <var>v</var>.</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, set <var>item</var> to !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Object, then<ol><li>If <var>v</var> has a [[StringData]] or [[NumberData]] internal slot, set <var>item</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>item</var> is not <emu-val>undefined</emu-val> and <var>item</var> is not currently an element of <var>PropertyList</var>, then<ol><li>Append <var>item</var> to the end of <var>PropertyList</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Object, then<ol><li>If <var>space</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>space</var>).</li></ol></li><li>Else if <var>space</var> has a [[StringData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>space</var>).</li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Number, then<ol><li>Set <var>space</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(10, !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>space</var>)).</li><li>If <var>space</var> &lt; 1, let <var>gap</var> be the empty String; otherwise let <var>gap</var> be the String value containing <var>space</var> occurrences of the code unit 0x0020 (SPACE).</li></ol></li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is String, then<ol><li>If the length of <var>space</var> is 10 or less, let <var>gap</var> be <var>space</var>; otherwise let <var>gap</var> be the String value consisting of the first 10 code units of <var>space</var>.</li></ol></li><li>Else,<ol><li>Let <var>gap</var> be the empty String.</li></ol></li><li>Let <var>wrapper</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Object.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>wrapper</var>, the empty String, <var>value</var>).</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(the empty String, <var>wrapper</var>).\n      </li></ol></emu-alg>\n      <p>This function is the  <dfn>%JSONStringify%</dfn> intrinsic object.</p>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>stringify</code> function is 3.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>JSON structures are allowed to be nested to any depth, but they must be acyclic. If <var>value</var> is or contains a cyclic structure, then the stringify function must throw a <emu-val>TypeError</emu-val> exception. This is an example of a value that cannot be stringified:</p>\n        <pre><code class=\"javascript hljs\">a = [];\na[<span class=\"hljs-number\">0</span>] = a;\nmy_text = <span class=\"hljs-built_in\">JSON</span>.stringify(a); <span class=\"hljs-comment\">// This must throw a TypeError.</span></code></pre>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Symbolic primitive values are rendered as follows:</p>\n        <ul>\n          <li>\n            The <emu-val>null</emu-val> value is rendered in JSON text as the String <emu-val>\"null\"</emu-val>.\n          \n          </li>\n          <li>\n            The <emu-val>undefined</emu-val> value is not rendered.\n          \n          </li>\n          <li>\n            The <emu-val>true</emu-val> value is rendered in JSON text as the String <emu-val>\"true\"</emu-val>.\n          \n          </li>\n          <li>\n            The <emu-val>false</emu-val> value is rendered in JSON text as the String <emu-val>\"false\"</emu-val>.\n          \n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>String values are wrapped in QUOTATION MARK (<code>\"</code>) code units. The code units <code>\"</code> and <code>\\</code> are escaped with <code>\\</code> prefixes. Control characters code units are replaced with escape sequences <code>\\u</code>HHHH, or with the shorter forms, <code>\\b</code> (BACKSPACE), <code>\\f</code> (FORM FEED), <code>\\n</code> (LINE FEED), <code>\\r</code> (CARRIAGE RETURN), <code>\\t</code> (CHARACTER TABULATION).</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Finite numbers are stringified as if by calling <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>number</var>). <emu-val>NaN</emu-val> and <emu-val>Infinity</emu-val> regardless of sign are represented as the String <emu-val>\"null\"</emu-val>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n        <p>Values that do not have a JSON representation (such as <emu-val>undefined</emu-val> and functions) do not produce a String. Instead they produce the <emu-val>undefined</emu-val> value. In arrays these values are represented as the String <emu-val>\"null\"</emu-val>. In objects an unrepresentable value causes the property to be excluded from stringification.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 6</span><div class=\"note-contents\">\n        <p>An object is rendered as U+007B (LEFT CURLY BRACKET) followed by zero or more properties, separated with a U+002C (COMMA), closed with a U+007D (RIGHT CURLY BRACKET). A property is a quoted String representing the key or <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>, a U+003A (COLON), and then the stringified property value. An array is rendered as an opening U+005B (LEFT SQUARE BRACKET followed by zero or more values, separated with a U+002C (COMMA), closed with a U+005D (RIGHT SQUARE BRACKET).</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-serializejsonproperty\"><h1><span class=\"secnum\">24.5.2.1</span>#sec-serializejsonproperty Runtime Semantics: SerializeJSONProperty ( key, holder )</h1>...</div><div id=\"excluded-sec-quotejsonstring\"><h1><span class=\"secnum\">24.5.2.2</span>#sec-quotejsonstring Runtime Semantics: QuoteJSONString ( value )</h1>...</div><div id=\"excluded-sec-unicodeescape\"><h1><span class=\"secnum\">24.5.2.3</span>#sec-unicodeescape Runtime Semantics: UnicodeEscape ( C )</h1>...</div><div id=\"excluded-sec-serializejsonobject\"><h1><span class=\"secnum\">24.5.2.4</span>#sec-serializejsonobject Runtime Semantics: SerializeJSONObject ( value )</h1>...</div><div id=\"excluded-sec-serializejsonarray\"><h1><span class=\"secnum\">24.5.2.5</span>#sec-serializejsonarray Runtime Semantics: SerializeJSONArray ( value )</h1>...</div></emu-clause>\n\n    "}, "sec-serializejsonobject": {"num": "24.5.2.4", "title": "#sec-serializejsonobject Runtime Semantics: SerializeJSONObject ( value )", "html": "<emu-clause id=\"sec-serializejsonobject\" aoid=\"SerializeJSONObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonobject\">#sec-serializejsonobject</span> Runtime Semantics: SerializeJSONObject ( <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONObject with argument <var>value</var> serializes an object. It has access to the <var>stack</var>, <var>indent</var>, <var>gap</var>, and <var>PropertyList</var> values of the current invocation of the <code>stringify</code> method.</p>\n        <emu-alg><ol><li>If <var>stack</var> contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>stack</var>.</li><li>Let <var>stepback</var> be <var>indent</var>.</li><li>Set <var>indent</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>indent</var> and <var>gap</var>.</li><li>If <var>PropertyList</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>K</var> be <var>PropertyList</var>.</li></ol></li><li>Else,<ol><li>Let <var>K</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>value</var>, <emu-const>key</emu-const>).</li></ol></li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>P</var> of <var>K</var>, do<ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>P</var>, <var>value</var>).</li><li>If <var>strP</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>member</var> be <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>P</var>).</li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <emu-val>\":\"</emu-val>.</li><li>If <var>gap</var> is not the empty String, then<ol><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and the code unit 0x0020 (SPACE).</li></ol></li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <var>strP</var>.</li><li>Append <var>member</var> to <var>partial</var>.</li></ol></li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <emu-val>\"{}\"</emu-val>.</li></ol></li><li>Else,<ol><li>If <var>gap</var> is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"{\"</emu-val>, <var>properties</var>, and <emu-val>\"}\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>indent</var>.</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"{\"</emu-val>, the code unit 0x000A (LINE FEED), <var>indent</var>, <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <emu-val>\"}\"</emu-val>.</li></ol></li></ol></li><li>Remove the last element of <var>stack</var>.</li><li>Set <var>indent</var> to <var>stepback</var>.</li><li>Return <var>final</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-serializejsonproperty": {"num": "24.5.2.1", "title": "#sec-serializejsonproperty Runtime Semantics: SerializeJSONProperty ( key, holder )", "html": "<emu-clause id=\"sec-serializejsonproperty\" aoid=\"SerializeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonproperty\">#sec-serializejsonproperty</span> Runtime Semantics: SerializeJSONProperty ( <var>key</var>, <var>holder</var> )</h1>\n        <p>The abstract operation SerializeJSONProperty with arguments <var>key</var>, and <var>holder</var> has access to <var>ReplacerFunction</var> from the invocation of the <code>stringify</code> method. Its algorithm is as follows:</p>\n        <emu-alg><ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>key</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object or BigInt, then<ol><li>Let <var>toJSON</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <emu-val>\"toJSON\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>toJSON</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>toJSON</var>, <var>value</var>, &#171; <var>key</var> &#187;).</li></ol></li></ol></li><li>If <var>ReplacerFunction</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>ReplacerFunction</var>, <var>holder</var>, &#171; <var>key</var>, <var>value</var> &#187;).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object, then<ol><li>If <var>value</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[StringData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[BooleanData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BooleanData]].</li></ol></li><li>Else if <var>value</var> has a [[BigIntData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BigIntData]].</li></ol></li></ol></li><li>If <var>value</var> is <emu-val>null</emu-val>, return <emu-val>\"null\"</emu-val>.</li><li>If <var>value</var> is <emu-val>true</emu-val>, return <emu-val>\"true\"</emu-val>.</li><li>If <var>value</var> is <emu-val>false</emu-val>, return <emu-val>\"false\"</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number, then<ol><li>If <var>value</var> is finite, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li><li>Return <emu-val>\"null\"</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>value</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>value</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, return ?&#160;<emu-xref aoid=\"SerializeJSONArray\"><a href=\"#sec-serializejsonarray\">SerializeJSONArray</a></emu-xref>(<var>value</var>).</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONObject\"><a href=\"#sec-serializejsonobject\">SerializeJSONObject</a></emu-xref>(<var>value</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-serializejsonarray", "sec-json.stringify", "sec-serializejsonobject", "sec-serializejsonproperty"], "secData": {"sec-serializejsonarray": {"num": "24.5.2.5", "title": "#sec-serializejsonarray Runtime Semantics: SerializeJSONArray ( state, value )", "html": "<emu-clause id=\"sec-serializejsonarray\" aoid=\"SerializeJSONArray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonarray\">#sec-serializejsonarray</span> Runtime Semantics: SerializeJSONArray ( <var>state</var>, <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONArray with arguments <var>state</var> and <var>value</var> serializes an array. It performs the following steps:</p>\n        <emu-alg><ol><li>If <var>state</var>.[[Stack]] contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>state</var>.[[Stack]].</li><li>Let <var>stepback</var> be <var>state</var>.[[Indent]].</li><li>Set <var>state</var>.[[Indent]] to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>state</var>.[[Indent]] and <var>state</var>.[[Gap]].</li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>value</var>).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var><ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>state</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>), <var>value</var>).</li><li>If <var>strP</var> is <emu-val>undefined</emu-val>, then<ol><li>Append <emu-val>\"null\"</emu-val> to <var>partial</var>.</li></ol></li><li>Else,<ol><li>Append <var>strP</var> to <var>partial</var>.</li></ol></li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <emu-val>\"[]\"</emu-val>.</li></ol></li><li>Else,<ol><li>If <var>state</var>.[[Gap]] is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"[\"</emu-val>, <var>properties</var>, and <emu-val>\"]\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>state</var>.[[Indent]].</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"[\"</emu-val>, the code unit 0x000A (LINE FEED), <var>state</var>.[[Indent]], <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <emu-val>\"]\"</emu-val>.</li></ol></li></ol></li><li>Remove the last element of <var>state</var>.[[Stack]].</li><li>Set <var>state</var>.[[Indent]] to <var>stepback</var>.</li><li>Return <var>final</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The representation of arrays includes only the elements between zero and  <emu-eqn class=\"inline\"><code>array.length</code> - 1</emu-eqn> inclusive. Properties whose keys are not  <emu-xref href=\"#array-index\"><a href=\"#array-index\">array indexes</a></emu-xref> are excluded from the stringification. An array is stringified as an opening LEFT SQUARE BRACKET, elements separated by COMMA, and a closing RIGHT SQUARE BRACKET.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-json.stringify": {"num": "24.5.2", "title": "#sec-json.stringify JSON.stringify ( value [ , replacer [ , space ] ] )", "html": "<emu-clause id=\"sec-json.stringify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.stringify\">#sec-json.stringify</span> JSON.stringify ( <var>value</var> [ , <var>replacer</var> [ , <var>space</var> ] ] )</h1>\n      <p>The <code>stringify</code> function returns a String in UTF-16 encoded JSON format representing an ECMAScript value, or <emu-val>undefined</emu-val>. It can take three parameters. The <var>value</var> parameter is an ECMAScript value, which is usually an object or array, although it can also be a String, Boolean, Number or <emu-val>null</emu-val>. The optional <var>replacer</var> parameter is either a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that acts as an inclusion list for selecting the object properties that will be stringified. The optional <var>space</var> parameter is a String or Number that allows the result to have white space injected into it to improve human readability.</p>\n      <p>These are the steps in stringifying an object:</p>\n      <emu-alg><ol><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>indent</var> be the empty String.</li><li>Let <var>PropertyList</var> and <var>ReplacerFunction</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replacer</var>) is Object, then<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replacer</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>ReplacerFunction</var> to <var>replacer</var>.</li></ol></li><li>Else,<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>replacer</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>PropertyList</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>replacer</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>replacer</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>Let <var>item</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is String, set <var>item</var> to <var>v</var>.</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, set <var>item</var> to !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Object, then<ol><li>If <var>v</var> has a [[StringData]] or [[NumberData]] internal slot, set <var>item</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>item</var> is not <emu-val>undefined</emu-val> and <var>item</var> is not currently an element of <var>PropertyList</var>, then<ol><li>Append <var>item</var> to the end of <var>PropertyList</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Object, then<ol><li>If <var>space</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>space</var>).</li></ol></li><li>Else if <var>space</var> has a [[StringData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>space</var>).</li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Number, then<ol><li>Set <var>space</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(10, !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>space</var>)).</li><li>If <var>space</var> &lt; 1, let <var>gap</var> be the empty String; otherwise let <var>gap</var> be the String value containing <var>space</var> occurrences of the code unit 0x0020 (SPACE).</li></ol></li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is String, then<ol><li>If the length of <var>space</var> is 10 or less, let <var>gap</var> be <var>space</var>; otherwise let <var>gap</var> be the String value consisting of the first 10 code units of <var>space</var>.</li></ol></li><li>Else,<ol><li>Let <var>gap</var> be the empty String.</li></ol></li><li>Let <var>wrapper</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Object.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>wrapper</var>, the empty String, <var>value</var>).</li><li>Let <var>state</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[ReplacerFunction]]: <var>ReplacerFunction</var>, [[Stack]]: <var>stack</var>, [[Indent]]: <var>indent</var>, [[Gap]]: <var>gap</var>, [[PropertyList]]: <var>PropertyList</var> }.</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>state</var>, the empty String, <var>wrapper</var>).\n      </li></ol></emu-alg>\n      <p>This function is the  <dfn>%JSONStringify%</dfn> intrinsic object.</p>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>stringify</code> function is 3.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>JSON structures are allowed to be nested to any depth, but they must be acyclic. If <var>value</var> is or contains a cyclic structure, then the stringify function must throw a <emu-val>TypeError</emu-val> exception. This is an example of a value that cannot be stringified:</p>\n        <pre><code class=\"javascript hljs\">a = [];\na[<span class=\"hljs-number\">0</span>] = a;\nmy_text = <span class=\"hljs-built_in\">JSON</span>.stringify(a); <span class=\"hljs-comment\">// This must throw a TypeError.</span></code></pre>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Symbolic primitive values are rendered as follows:</p>\n        <ul>\n          <li>\n            The <emu-val>null</emu-val> value is rendered in JSON text as the String <emu-val>\"null\"</emu-val>.\n          \n          </li>\n          <li>\n            The <emu-val>undefined</emu-val> value is not rendered.\n          \n          </li>\n          <li>\n            The <emu-val>true</emu-val> value is rendered in JSON text as the String <emu-val>\"true\"</emu-val>.\n          \n          </li>\n          <li>\n            The <emu-val>false</emu-val> value is rendered in JSON text as the String <emu-val>\"false\"</emu-val>.\n          \n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>String values are wrapped in QUOTATION MARK (<code>\"</code>) code units. The code units <code>\"</code> and <code>\\</code> are escaped with <code>\\</code> prefixes. Control characters code units are replaced with escape sequences <code>\\u</code>HHHH, or with the shorter forms, <code>\\b</code> (BACKSPACE), <code>\\f</code> (FORM FEED), <code>\\n</code> (LINE FEED), <code>\\r</code> (CARRIAGE RETURN), <code>\\t</code> (CHARACTER TABULATION).</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Finite numbers are stringified as if by calling <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>number</var>). <emu-val>NaN</emu-val> and <emu-val>Infinity</emu-val> regardless of sign are represented as the String <emu-val>\"null\"</emu-val>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n        <p>Values that do not have a JSON representation (such as <emu-val>undefined</emu-val> and functions) do not produce a String. Instead they produce the <emu-val>undefined</emu-val> value. In arrays these values are represented as the String <emu-val>\"null\"</emu-val>. In objects an unrepresentable value causes the property to be excluded from stringification.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 6</span><div class=\"note-contents\">\n        <p>An object is rendered as U+007B (LEFT CURLY BRACKET) followed by zero or more properties, separated with a U+002C (COMMA), closed with a U+007D (RIGHT CURLY BRACKET). A property is a quoted String representing the key or <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>, a U+003A (COLON), and then the stringified property value. An array is rendered as an opening U+005B (LEFT SQUARE BRACKET followed by zero or more values, separated with a U+002C (COMMA), closed with a U+005D (RIGHT SQUARE BRACKET).</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-serializejsonproperty\"><h1><span class=\"secnum\">24.5.2.1</span>#sec-serializejsonproperty Runtime Semantics: SerializeJSONProperty ( state, key, holder )</h1>...</div><div id=\"excluded-sec-quotejsonstring\"><h1><span class=\"secnum\">24.5.2.2</span>#sec-quotejsonstring Runtime Semantics: QuoteJSONString ( value )</h1>...</div><div id=\"excluded-sec-unicodeescape\"><h1><span class=\"secnum\">24.5.2.3</span>#sec-unicodeescape Runtime Semantics: UnicodeEscape ( C )</h1>...</div><div id=\"excluded-sec-serializejsonobject\"><h1><span class=\"secnum\">24.5.2.4</span>#sec-serializejsonobject Runtime Semantics: SerializeJSONObject ( state, value )</h1>...</div><div id=\"excluded-sec-serializejsonarray\"><h1><span class=\"secnum\">24.5.2.5</span>#sec-serializejsonarray Runtime Semantics: SerializeJSONArray ( state, value )</h1>...</div></emu-clause>\n\n    "}, "sec-serializejsonobject": {"num": "24.5.2.4", "title": "#sec-serializejsonobject Runtime Semantics: SerializeJSONObject ( state, value )", "html": "<emu-clause id=\"sec-serializejsonobject\" aoid=\"SerializeJSONObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonobject\">#sec-serializejsonobject</span> Runtime Semantics: SerializeJSONObject ( <var>state</var>, <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONObject with arguments <var>state</var> and <var>value</var> serializes an object. It performs the following steps:</p>\n        <emu-alg><ol><li>If <var>state</var>.[[Stack]] contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>state</var>.[[Stack]].</li><li>Let <var>stepback</var> be <var>state</var>.[[Indent]].</li><li>Set <var>state</var>.[[Indent]] to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>state</var>.[[Indent]] and <var>state</var>.[[Gap]].</li><li>If <var>state</var>.[[PropertyList]] is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>K</var> be <var>state</var>.[[PropertyList]].</li></ol></li><li>Else,<ol><li>Let <var>K</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>value</var>, <emu-const>key</emu-const>).</li></ol></li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>P</var> of <var>K</var>, do<ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>state</var>, <var>P</var>, <var>value</var>).</li><li>If <var>strP</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>member</var> be <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>P</var>).</li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <emu-val>\":\"</emu-val>.</li><li>If state_.[[Gap]] is not the empty String, then<ol><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and the code unit 0x0020 (SPACE).</li></ol></li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <var>strP</var>.</li><li>Append <var>member</var> to <var>partial</var>.</li></ol></li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <emu-val>\"{}\"</emu-val>.</li></ol></li><li>Else,<ol><li>If state_.[[Gap]] is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"{\"</emu-val>, <var>properties</var>, and <emu-val>\"}\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>state</var>.[[Indent]].</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"{\"</emu-val>, the code unit 0x000A (LINE FEED), <var>state</var>.[[Indent]], <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <emu-val>\"}\"</emu-val>.</li></ol></li></ol></li><li>Remove the last element of <var>state</var>.[[Stack]].</li><li>Set <var>state</var>.[[Indent]] to <var>stepback</var>.</li><li>Return <var>final</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-serializejsonproperty": {"num": "24.5.2.1", "title": "#sec-serializejsonproperty Runtime Semantics: SerializeJSONProperty ( state, key, holder )", "html": "<emu-clause id=\"sec-serializejsonproperty\" aoid=\"SerializeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonproperty\">#sec-serializejsonproperty</span> Runtime Semantics: SerializeJSONProperty ( <var>state</var>, <var>key</var>, <var>holder</var> )</h1>\n        <p>The abstract operation SerializeJSONProperty with arguments <var>state</var>, <var>key</var>, and <var>holder</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>key</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object or BigInt, then<ol><li>Let <var>toJSON</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <emu-val>\"toJSON\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>toJSON</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>toJSON</var>, <var>value</var>, &#171; <var>key</var> &#187;).</li></ol></li></ol></li><li>If <var>state</var>.[[ReplacerFunction]] is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(state.[[ReplacerFunction]], <var>holder</var>, &#171; <var>key</var>, <var>value</var> &#187;).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object, then<ol><li>If <var>value</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[StringData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[BooleanData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BooleanData]].</li></ol></li><li>Else if <var>value</var> has a [[BigIntData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BigIntData]].</li></ol></li></ol></li><li>If <var>value</var> is <emu-val>null</emu-val>, return <emu-val>\"null\"</emu-val>.</li><li>If <var>value</var> is <emu-val>true</emu-val>, return <emu-val>\"true\"</emu-val>.</li><li>If <var>value</var> is <emu-val>false</emu-val>, return <emu-val>\"false\"</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number, then<ol><li>If <var>value</var> is finite, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li><li>Return <emu-val>\"null\"</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>value</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>value</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, return ?&#160;<emu-xref aoid=\"SerializeJSONArray\"><a href=\"#sec-serializejsonarray\">SerializeJSONArray</a></emu-xref>(<var>state</var>, <var>value</var>).</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONObject\"><a href=\"#sec-serializejsonobject\">SerializeJSONObject</a></emu-xref>(<var>state</var>, <var>value</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}