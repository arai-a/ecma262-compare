{"from": {"secList": ["sec-isvalidregularexpressionliteral"], "secData": {"sec-isvalidregularexpressionliteral": {"num": "12.2.8.2", "title": "#sec-isvalidregularexpressionliteral Static Semantics: IsValidRegularExpressionLiteral ( literal )", "html": "<emu-clause id=\"sec-isvalidregularexpressionliteral\" aoid=\"IsValidRegularExpressionLiteral\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isvalidregularexpressionliteral\">#sec-isvalidregularexpressionliteral</span> Static Semantics: IsValidRegularExpressionLiteral ( <var>literal</var> )</h1>\n        <p>The abstract operation IsValidRegularExpressionLiteral determines if its argument is a valid regular expression literal. The following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>literal</var> is a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>.</li><li>If FlagText of <var>literal</var> contains any code points other than <code>g</code>, <code>i</code>, <code>m</code>, <code>s</code>, <code>u</code>, or <code>y</code>, or if it contains the same code point more than once, return <emu-val>false</emu-val>.</li><li>Let <var>P</var> be BodyText of <var>literal</var>.</li><li>If FlagText of <var>literal</var> contains <code>u</code>, then<ol><li>Parse <var>P</var> using the grammars in <emu-xref href=\"#sec-patterns\"><a href=\"#sec-patterns\" class=\"excluded-xref\" excluded-id=\"sec-patterns\">#sec-patterns</a></emu-xref>. The <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> for the parse is <emu-nt params=\"+U, +N\"><a href=\"#prod-Pattern\">Pattern</a><emu-mods><emu-params>[+U, +N]</emu-params></emu-mods></emu-nt>. If <var>P</var> did not conform to the grammar, if any elements of <var>P</var> were not matched by the parse, or if any Early Error conditions exist, return <emu-val>false</emu-val>.</li><li>Otherwise, return <emu-val>true</emu-val>.</li></ol></li><li>Parse <var>P</var> using the grammars in <emu-xref href=\"#sec-patterns\"><a href=\"#sec-patterns\" class=\"excluded-xref\" excluded-id=\"sec-patterns\">#sec-patterns</a></emu-xref>. The <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> for the parse is <emu-nt params=\"~U, ~N\"><a href=\"#prod-Pattern\">Pattern</a><emu-mods><emu-params>[~U, ~N]</emu-params></emu-mods></emu-nt>. If the result of parsing contains a <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, reparse with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~U, +N\"><a href=\"#prod-Pattern\">Pattern</a><emu-mods><emu-params>[~U, +N]</emu-params></emu-mods></emu-nt>. If <var>P</var> did not conform to the grammar, if any elements of <var>P</var> were not matched by the parse, or if any Early Error conditions exist, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-isvalidregularexpressionliteral"], "secData": {"sec-isvalidregularexpressionliteral": {"num": "12.2.8.2", "title": "#sec-isvalidregularexpressionliteral Static Semantics: IsValidRegularExpressionLiteral ( literal )", "html": "<emu-clause id=\"sec-isvalidregularexpressionliteral\" aoid=\"IsValidRegularExpressionLiteral\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isvalidregularexpressionliteral\">#sec-isvalidregularexpressionliteral</span> Static Semantics: IsValidRegularExpressionLiteral ( <var>literal</var> )</h1>\n        <p>The abstract operation IsValidRegularExpressionLiteral determines if its argument is a valid regular expression literal. The following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>literal</var> is a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>.</li><li>If FlagText of <var>literal</var> contains any code points other than <code>g</code>, <code>i</code>, <code>m</code>, <code>s</code>, <code>u</code>, or <code>y</code>, or if it contains the same code point more than once, return <emu-val>false</emu-val>.</li><li>Let <var>P</var> be BodyText of <var>literal</var>.</li><li>If FlagText of <var>literal</var> contains <code>u</code>, then<ol><li>Parse <var>P</var> using the grammars in <emu-xref href=\"#sec-patterns\"><a href=\"#sec-patterns\" class=\"excluded-xref\" excluded-id=\"sec-patterns\">#sec-patterns</a></emu-xref>. The <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> for the parse is <emu-nt params=\"+U, +N\"><a href=\"#prod-Pattern\">Pattern</a><emu-mods><emu-params>[+U, +N]</emu-params></emu-mods></emu-nt>. If <var>P</var> did not conform to the grammar, if any elements of <var>P</var> were not matched by the parse, or if any Early Error conditions exist, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></li><li>Parse <var>P</var> using the grammars in <emu-xref href=\"#sec-patterns\"><a href=\"#sec-patterns\" class=\"excluded-xref\" excluded-id=\"sec-patterns\">#sec-patterns</a></emu-xref>. The <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> for the parse is <emu-nt params=\"~U, ~N\"><a href=\"#prod-Pattern\">Pattern</a><emu-mods><emu-params>[~U, ~N]</emu-params></emu-mods></emu-nt>. If the result of parsing contains a <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, reparse with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~U, +N\"><a href=\"#prod-Pattern\">Pattern</a><emu-mods><emu-params>[~U, +N]</emu-params></emu-mods></emu-nt>. If <var>P</var> did not conform to the grammar, if any elements of <var>P</var> were not matched by the parse, or if any Early Error conditions exist, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}