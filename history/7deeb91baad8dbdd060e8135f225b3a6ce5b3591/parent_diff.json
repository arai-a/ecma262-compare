{"from": {"secList": ["sec-advancestringindex", "sec-string.prototype.codepointat", "sec-%stringiteratorprototype%.next"], "secData": {"sec-advancestringindex": {"num": "21.2.5.2.3", "title": "#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )", "html": "<emu-clause id=\"sec-advancestringindex\" aoid=\"AdvanceStringIndex\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-advancestringindex\">#sec-advancestringindex</span> AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )</h1>\n          <p>The abstract operation AdvanceStringIndex with arguments <var>S</var>, <var>index</var>, and <var>unicode</var> performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> is an integer such that 0 &#8804; <var>index</var> &#8804; 2<sup>53</sup> - 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unicode</var>) is Boolean.</li><li>If <var>unicode</var> is <emu-val>false</emu-val>, return <var>index</var> + 1.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>If <var>index</var> + 1 &#8805; <var>length</var>, return <var>index</var> + 1.</li><li>Let <var>first</var> be the numeric value of the code unit at index <var>index</var> within <var>S</var>.</li><li>If <var>first</var> &lt; 0xD800 or <var>first</var> &gt; 0xDBFF, return <var>index</var> + 1.</li><li>Let <var>second</var> be the numeric value of the code unit at index <var>index</var> + 1 within <var>S</var>.</li><li>If <var>second</var> &lt; 0xDC00 or <var>second</var> &gt; 0xDFFF, return <var>index</var> + 1.</li><li>Return <var>index</var> + 2.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-string.prototype.codepointat": {"num": "21.1.3.3", "title": "#sec-string.prototype.codepointat String.prototype.codePointAt ( pos )", "html": "<emu-clause id=\"sec-string.prototype.codepointat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.codepointat\">#sec-string.prototype.codepointat</span> String.prototype.codePointAt ( <var>pos</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns a nonnegative integer Number less than 0x110000 that is the code point value of the UTF-16 encoded code point (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>) starting at the string element at index <var>pos</var> within the String resulting from converting this object to a String. If there is no element at that index, the result is <emu-val>undefined</emu-val>. If a valid UTF-16  <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> does not begin at <var>pos</var>, the result is the code unit at <var>pos</var>.</p>\n        </div></emu-note>\n        <p>When the <code>codePointAt</code> method is called with one argument <var>pos</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>position</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>pos</var>).</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>position</var> &lt; 0 or <var>position</var> &#8805; <var>size</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>first</var> be the numeric value of the code unit at index <var>position</var> within the String <var>S</var>.</li><li>If <var>first</var> &lt; 0xD800 or <var>first</var> &gt; 0xDBFF or <var>position</var> + 1 = <var>size</var>, return <var>first</var>.</li><li>Let <var>second</var> be the numeric value of the code unit at index <var>position</var> + 1 within the String <var>S</var>.</li><li>If <var>second</var> &lt; 0xDC00 or <var>second</var> &gt; 0xDFFF, return <var>first</var>.</li><li>Return <emu-xref aoid=\"UTF16Decode\"><a href=\"#sec-utf16decode\">UTF16Decode</a></emu-xref>(<var>first</var>, <var>second</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>codePointAt</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%stringiteratorprototype%.next": {"num": "21.1.5.2.1", "title": "#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%stringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%.next\">#sec-%stringiteratorprototype%.next</span> %StringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a String Iterator Instance (<emu-xref href=\"#sec-properties-of-string-iterator-instances\"><a href=\"#sec-properties-of-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-string-iterator-instances\">#sec-properties-of-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>s</var> be <var>O</var>.[[IteratedString]].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>position</var> be <var>O</var>.[[StringIteratorNextIndex]].</li><li>Let <var>len</var> be the length of <var>s</var>.</li><li>If <var>position</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedString]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>first</var> be the numeric value of the code unit at index <var>position</var> within <var>s</var>.</li><li>If <var>first</var> &lt; 0xD800 or <var>first</var> &gt; 0xDBFF or <var>position</var> + 1 = <var>len</var>, let <var>resultString</var> be the String value consisting of the single code unit <var>first</var>.</li><li>Else,<ol><li>Let <var>second</var> be the numeric value of the code unit at index <var>position</var> + 1 within the String <var>s</var>.</li><li>If <var>second</var> &lt; 0xDC00 or <var>second</var> &gt; 0xDFFF, let <var>resultString</var> be the String value consisting of the single code unit <var>first</var>.</li><li>Else, let <var>resultString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit <var>first</var> and the code unit <var>second</var>.</li></ol></li><li>Let <var>resultSize</var> be the number of code units in <var>resultString</var>.</li><li>Set <var>O</var>.[[StringIteratorNextIndex]] to <var>position</var> + <var>resultSize</var>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultString</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}, "to": {"secList": ["sec-advancestringindex", "sec-string.prototype.codepointat", "sec-%stringiteratorprototype%.next"], "secData": {"sec-advancestringindex": {"num": "21.2.5.2.3", "title": "#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )", "html": "<emu-clause id=\"sec-advancestringindex\" aoid=\"AdvanceStringIndex\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-advancestringindex\">#sec-advancestringindex</span> AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )</h1>\n          <p>The abstract operation AdvanceStringIndex with arguments <var>S</var>, <var>index</var>, and <var>unicode</var> performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> is an integer such that 0 &#8804; <var>index</var> &#8804; 2<sup>53</sup> - 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unicode</var>) is Boolean.</li><li>If <var>unicode</var> is <emu-val>false</emu-val>, return <var>index</var> + 1.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>If <var>index</var> + 1 &#8805; <var>length</var>, return <var>index</var> + 1.</li><li>Let <var>first</var> be the code unit at index <var>index</var> within <var>S</var>.</li><li>If <var>first</var> is not a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref>, return <var>index</var> + 1.</li><li>Let <var>second</var> be the code unit at index <var>index</var> + 1 within <var>S</var>.</li><li>If <var>second</var> is not a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, return <var>index</var> + 1.</li><li>Return <var>index</var> + 2.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-string.prototype.codepointat": {"num": "21.1.3.3", "title": "#sec-string.prototype.codepointat String.prototype.codePointAt ( pos )", "html": "<emu-clause id=\"sec-string.prototype.codepointat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.codepointat\">#sec-string.prototype.codepointat</span> String.prototype.codePointAt ( <var>pos</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns a nonnegative integer Number less than or equal to 0x10FFFF that is the code point value of the UTF-16 encoded code point (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>) starting at the string element at index <var>pos</var> within the String resulting from converting this object to a String. If there is no element at that index, the result is <emu-val>undefined</emu-val>. If a valid UTF-16  <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> does not begin at <var>pos</var>, the result is the code unit at <var>pos</var>.</p>\n        </div></emu-note>\n        <p>When the <code>codePointAt</code> method is called with one argument <var>pos</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>position</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>pos</var>).</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>position</var> &lt; 0 or <var>position</var> &#8805; <var>size</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>first</var> be the code unit at index <var>position</var> within the String <var>S</var>.</li><li>If <var>first</var> is not a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> or if <var>position</var> + 1 = <var>size</var>, return the numeric value of <var>first</var>.</li><li>Let <var>second</var> be the code unit at index <var>position</var> + 1 within the String <var>S</var>.</li><li>If <var>second</var> is not a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, return the numeric value of <var>first</var>.</li><li>Let <var>cp</var> be <emu-xref aoid=\"UTF16Decode\"><a href=\"#sec-utf16decode\">UTF16Decode</a></emu-xref>(<var>first</var>, <var>second</var>).</li><li>Return the code point value of <var>cp</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>codePointAt</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%stringiteratorprototype%.next": {"num": "21.1.5.2.1", "title": "#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%stringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%.next\">#sec-%stringiteratorprototype%.next</span> %StringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a String Iterator Instance (<emu-xref href=\"#sec-properties-of-string-iterator-instances\"><a href=\"#sec-properties-of-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-string-iterator-instances\">#sec-properties-of-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>s</var> be <var>O</var>.[[IteratedString]].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>position</var> be <var>O</var>.[[StringIteratorNextIndex]].</li><li>Let <var>len</var> be the length of <var>s</var>.</li><li>If <var>position</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedString]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>first</var> be the code unit at index <var>position</var> within <var>s</var>.</li><li>If <var>first</var> is not a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> or if <var>position</var> + 1 = <var>len</var>, let <var>resultString</var> be the String value consisting of the single code unit <var>first</var>.</li><li>Else,<ol><li>Let <var>second</var> be the code unit at index <var>position</var> + 1 within the String <var>s</var>.</li><li>If <var>second</var> is not a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, let <var>resultString</var> be the String value consisting of the single code unit <var>first</var>.</li><li>Else, let <var>resultString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit <var>first</var> and the code unit <var>second</var>.</li></ol></li><li>Let <var>resultSize</var> be the number of code units in <var>resultString</var>.</li><li>Set <var>O</var>.[[StringIteratorNextIndex]] to <var>position</var> + <var>resultSize</var>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultString</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}}