{"from": {"secList": ["sec-evaluatecall", "sec-preparefortailcall"], "secData": {"sec-evaluatecall": {"num": "13.3.6.2", "title": "#sec-evaluatecall EvaluateCall ( func, ref, arguments, tailPosition )", "html": "<emu-clause id=\"sec-evaluatecall\" oldids=\"sec-evaluatedirectcall\" aoid=\"EvaluateCall\"><span id=\"sec-evaluatedirectcall\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatecall\">#sec-evaluatecall</span> EvaluateCall ( <var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailPosition</var> )</h1>\n        <p>The abstract operation EvaluateCall takes arguments <var>func</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>ref</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>), <var>arguments</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>tailPosition</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>thisValue</var> be <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>ref</var>).</li></ol></li><li>Else,<ol><li>Let <var>refEnv</var> be <var>ref</var>.[[Base]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>refEnv</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>refEnv</var>.WithBaseObject().</li></ol></li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <var>arguments</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>tailPosition</var> is <emu-val>true</emu-val>, perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisValue</var>, <var>argList</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>tailPosition</var> is <emu-val>true</emu-val>, the above call will not return here, but instead evaluation will continue as if the following return has already occurred.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>result</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-preparefortailcall": {"num": "15.10.3", "title": "#sec-preparefortailcall PrepareForTailCall ( )", "html": "<emu-clause id=\"sec-preparefortailcall\" aoid=\"PrepareForTailCall\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-preparefortailcall\">#sec-preparefortailcall</span> PrepareForTailCall ( )</h1>\n      <p>The abstract operation PrepareForTailCall takes no arguments. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>leafContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>leafContext</var>.</li><li>Pop <var>leafContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> now on the top of the stack becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>leafContext</var> has no further use. It will never be activated as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li></ol></emu-alg>\n      <p>A tail position call must either release any transient internal resources associated with the currently executing function <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> before invoking the target function or reuse those resources in support of the target function.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For example, a tail position call should only grow an implementation's activation record stack by the amount that the size of the target function's activation record exceeds the size of the calling function's activation record. If the target function's activation record is smaller, then the total size of the stack should decrease.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-evaluatecall", "sec-preparefortailcall"], "secData": {"sec-evaluatecall": {"num": "13.3.6.2", "title": "#sec-evaluatecall EvaluateCall ( func, ref, arguments, tailPosition )", "html": "<emu-clause id=\"sec-evaluatecall\" oldids=\"sec-evaluatedirectcall\" aoid=\"EvaluateCall\"><span id=\"sec-evaluatedirectcall\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatecall\">#sec-evaluatecall</span> EvaluateCall ( <var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailPosition</var> )</h1>\n        <p>The abstract operation EvaluateCall takes arguments <var>func</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>ref</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>), <var>arguments</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>tailPosition</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>thisValue</var> be <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>ref</var>).</li></ol></li><li>Else,<ol><li>Let <var>refEnv</var> be <var>ref</var>.[[Base]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>refEnv</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>refEnv</var>.WithBaseObject().</li></ol></li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <var>arguments</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>tailPosition</var> is <emu-val>true</emu-val>, perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisValue</var>, <var>argList</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>result</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-preparefortailcall": {"num": "15.10.3", "title": "#sec-preparefortailcall PrepareForTailCall ( )", "html": "<emu-clause id=\"sec-preparefortailcall\" aoid=\"PrepareForTailCall\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-preparefortailcall\">#sec-preparefortailcall</span> PrepareForTailCall ( )</h1>\n      <p>The abstract operation PrepareForTailCall takes no arguments. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The current <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> will not subsequently be used for the evaluation of any ECMAScript code or built-in functions. The invocation of Call subsequent to the invocation of this abstract operation will create and push a new <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> before performing any such evaluation.</li><li>Discard all resources associated with the current <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li></ol></emu-alg>\n      <p>A tail position call must either release any transient internal resources associated with the currently executing function <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> before invoking the target function or reuse those resources in support of the target function.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For example, a tail position call should only grow an implementation's activation record stack by the amount that the size of the target function's activation record exceeds the size of the calling function's activation record. If the target function's activation record is smaller, then the total size of the stack should decrease.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}}, "figData": {}}}