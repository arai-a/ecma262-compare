{"from": {"secList": ["sec-host-promise-rejection-tracker", "sec-valid-executions", "sec-performeval", "sec-pattern", "sec-math.exp", "sec-host-synchronizes-with", "sec-string.prototype.localecompare", "sec-code-realms", "sec-agents", "sec-math.sin", "sec-finishdynamicimport", "sec-parseint-string-radix", "sec-ecmascript-overview", "sec-math.atanh", "sec-numeric-types-number-exponentiate", "sec-script-records", "sec-string.prototype.tolocalelowercase", "sec-function.prototype.tostring", "sec-math.log2", "sec-enumerate-object-properties", "sec-number.prototype.tostring", "sec-math.cosh", "sec-debugger-statement-runtime-semantics-evaluation", "sec-memory-model-fundamentals", "sec-timezoneestring", "sec-conformance", "sec-%typedarray%.prototype.sort", "sec-math.atan", "sec-hostimportmoduledynamically", "sec-abstract-module-records", "sec-math.sqrt", "sec-non-ecmascript-functions", "sec-array.prototype.tolocalestring", "sec-math.expm1", "sec-terms-and-definitions", "sec-math.cbrt", "sec-math.acosh", "sec-array.prototype.sort", "sec-math.acos", "sec-error-handling-and-language-extensions", "sec-math.random", "sec-detacharraybuffer", "sec-parse-script", "sec-additional-ecmascript-features-for-web-browsers", "sec-math.cos", "sec-web-scripting", "sec-math.log", "sec-math.asinh", "sec-global-object", "sec-local-time-zone-adjustment", "sec-initializehostdefinedrealm", "sec-math.tan", "sec-math.asin", "sec-hostenqueuepromisejob", "sec-nativeerror-object-structure", "sec-hostfinalizeimportmeta", "sec-createdynamicfunction", "sec-date.prototype.tolocaledatestring", "sec-overview", "sec-math.hypot", "sec-math.atan2", "sec-IsHTMLDDA-internal-slot", "sec-parsemodule", "sec-date.prototype.tolocalestring", "sec-additional-built-in-properties", "sec-math.log10", "sec-ecmascript-language-types-number-type", "sec-math.log1p", "sec-bigint.prototype.tostring", "sec-built-in-function-objects-call-thisargument-argumentslist", "sec-date.parse", "sec-number.prototype.tolocalestring", "sec-math.tanh", "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact", "sec-immutable-prototype-exotic-objects", "sec-math.sinh", "sec-hostensurecancompilestrings", "sec-built-in-method", "sec-bigint.prototype.tolocalestring", "sec-hosthassourcetextavailable", "sec-hostresolveimportedmodule", "sec-date.prototype.tolocaletimestring", "sec-example-cyclic-module-record-graphs", "sec-jobs", "sec-string.prototype.tolocaleuppercase", "sec-hostgetimportmetaproperties", "sec-built-in-function"], "secData": {"sec-host-promise-rejection-tracker": {"num": "25.6.1.9", "title": "#sec-host-promise-rejection-tracker HostPromiseRejectionTracker ( promise, operation )", "html": "<emu-clause id=\"sec-host-promise-rejection-tracker\" aoid=\"HostPromiseRejectionTracker\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-promise-rejection-tracker\">#sec-host-promise-rejection-tracker</span> HostPromiseRejectionTracker ( <var>promise</var>, <var>operation</var> )</h1>\n        <p>HostPromiseRejectionTracker is an implementation-defined abstract operation that allows host environments to track promise rejections.</p>\n\n        <p>An implementation of HostPromiseRejectionTracker must complete normally in all cases. The default implementation of HostPromiseRejectionTracker is to unconditionally return an empty normal completion.</p>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>HostPromiseRejectionTracker is called in two scenarios:</p>\n\n          <ul>\n            <li>When a promise is rejected without any handlers, it is called with its <var>operation</var> argument set to <emu-val>\"reject\"</emu-val>.</li>\n            <li>When a handler is added to a rejected promise for the first time, it is called with its <var>operation</var> argument set to <emu-val>\"handle\"</emu-val>.</li>\n          </ul>\n\n          <p>A typical implementation of HostPromiseRejectionTracker might try to notify developers of unhandled rejections, while also being careful to notify them if such previous notifications are later invalidated by new handlers being attached.</p>\n        </div></emu-note>\n\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>operation</var> is <emu-val>\"handle\"</emu-val>, an implementation should not hold a reference to <var>promise</var> in a way that would interfere with garbage collection. An implementation may hold a reference to <var>promise</var> if <var>operation</var> is <emu-val>\"reject\"</emu-val>, since it is expected that rejections will be rare and not on hot code paths.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-valid-executions": {"num": "27.7.5", "title": "#sec-valid-executions Valid Executions", "html": "<emu-clause id=\"sec-valid-executions\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-valid-executions\">#sec-valid-executions</span> Valid Executions</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> is a valid execution (or simply an execution) if all of the following are true.</p>\n      <ul>\n        <li>The host provides a <emu-xref aoid=\"host-synchronizes-with\"><a href=\"#sec-host-synchronizes-with\">host-synchronizes-with</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref> for <var>execution</var>.[[HostSynchronizesWith]].</li>\n        <li><var>execution</var>.[[HappensBefore]] is a <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">strict partial order</a></emu-xref>.</li>\n        <li><var>execution</var> has valid chosen reads.</li>\n        <li><var>execution</var> has coherent reads.</li>\n        <li><var>execution</var> has tear free reads.</li>\n        <li><var>execution</var> has sequentially consistent atomics.</li>\n      </ul>\n      <p>All programs have at least one valid execution.</p>\n    </emu-clause>\n  "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\">\n        <span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval takes arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Set <var>inFunction</var> to <emu-val>true</emu-val>.</li><li>Set <var>inMethod</var> to <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, set <var>inDerivedConstructor</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>x</var>), for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>runningContext</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>runningContext</var>'s VariableEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>runningContext</var> is not already suspended, suspend <var>runningContext</var>.</li><li>Let <var>evalContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>evalContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>evalContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set <var>evalContext</var>'s ScriptOrModule to <var>runningContext</var>'s ScriptOrModule.</li><li>Set <var>evalContext</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set <var>evalContext</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Push <var>evalContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>evalContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-pattern": {"num": "21.2.2.2", "title": "#sec-pattern Pattern", "html": "<emu-clause id=\"sec-pattern\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern\">#sec-pattern</span> Pattern</h1>\n        <p>The production <emu-grammar><emu-production name=\"Pattern\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"79a5bbd0\"><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with +1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>str</var>, <var>index</var>) that captures <var>m</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>index</var>) is <emu-val>true</emu-val> and <var>index</var> &#8804; the length of <var>str</var>.</li><li>If <var>Unicode</var> is <emu-val>true</emu-val>, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the sequence of code points of !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>str</var>). Otherwise, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the sequence of code units that are the elements of <var>str</var>. <var>Input</var> will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>. Each element of <var>Input</var> is considered to be a character.</li><li>Let <var>InputLength</var> be the number of characters contained in <var>Input</var>. This alias will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>.</li><li>Let <var>listIndex</var> be the index into <var>Input</var> of the character that was obtained from element <var>index</var> of <var>str</var>.</li><li>Let <var>c</var> be a new Continuation with parameters (<var>y</var>) that captures nothing and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li>Return <var>y</var>.</li></ol></li><li>Let <var>cap</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> <emu-val>undefined</emu-val> values, indexed 1 through <var>NcapturingParens</var>.</li><li>Let <var>x</var> be the State (<var>listIndex</var>, <var>cap</var>).</li><li>Call <var>m</var>(<var>x</var>, <var>c</var>) and return its result.</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A Pattern evaluates (&#8220;compiles&#8221;) to an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> value. <emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref> can then apply this procedure to a String and an offset within the String to determine whether the pattern would match starting at exactly that offset within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> are designed so that compiling a pattern may throw a <emu-val>SyntaxError</emu-val> exception; on the other hand, once the pattern is successfully compiled, applying the resulting <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> to find a match in a String cannot throw an exception (except for any host-defined exceptions that can occur anywhere such as out-of-memory).</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.exp": {"num": "20.3.2.14", "title": "#sec-math.exp Math.exp ( x )", "html": "<emu-clause id=\"sec-math.exp\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.exp\">#sec-math.exp</span> Math.exp ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the exponential function of <var>x</var> (<var>e</var> raised to the power of <var>x</var>, where <var>e</var> is the base of the natural logarithms).</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-host-synchronizes-with": {"num": "27.6.4", "title": "#sec-host-synchronizes-with host-synchronizes-with", "html": "<emu-clause id=\"sec-host-synchronizes-with\" aoid=\"host-synchronizes-with\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-synchronizes-with\">#sec-host-synchronizes-with</span> host-synchronizes-with</h1>\n      <p>For a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, <var>execution</var>.[[HostSynchronizesWith]] is a host-provided <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">strict partial order</a></emu-xref> on host-specific events that satisfies at least the following.</p>\n      <ul>\n        <li>If (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[HostSynchronizesWith]], <var>E</var> and <var>D</var> are in <emu-xref aoid=\"HostEventSet\"><a href=\"#sec-hosteventset\">HostEventSet</a></emu-xref>(<var>execution</var>).</li>\n        <li>There is no cycle in the union of <var>execution</var>.[[HostSynchronizesWith]] and <var>execution</var>.[[AgentOrder]].</li>\n      </ul>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>For two host-specific events <var>E</var> and <var>D</var>, <var>E</var> host-synchronizes-with <var>D</var> implies <var>E</var> <emu-xref aoid=\"happens-before\"><a href=\"#sec-happens-before\">happens-before</a></emu-xref> <var>D</var>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The host-synchronizes-with relation allows the host to provide additional synchronization mechanisms, such as <code>postMessage</code> between HTML workers.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-string.prototype.localecompare": {"num": "21.1.3.10", "title": "#sec-string.prototype.localecompare String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-string.prototype.localecompare\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</span> String.prototype.localeCompare ( <var>that</var> [ , <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>localeCompare</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>localeCompare</code> method is used.</p>\n        <p>When the <code>localeCompare</code> method is called with argument <var>that</var>, it returns a Number other than <emu-val>NaN</emu-val> that represents the result of a locale-sensitive String comparison of the <emu-val>this</emu-val> value (converted to a String) with <var>that</var> (converted to a String). The two Strings are <var>S</var> and <var>That</var>. The two Strings are compared in an implementation-defined fashion. The result is intended to order String values in the sort order specified by a host default locale, and will be negative, zero, or positive, depending on whether <var>S</var> comes before <var>That</var> in the sort order, the Strings are equal, or <var>S</var> comes after <var>That</var> in the sort order, respectively.</p>\n        <p>Before performing the comparisons, the following steps are performed to prepare the Strings:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>That</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>that</var>).</li></ol></emu-alg>\n        <p>The meaning of the optional second and third parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not assign any other interpretation to those parameter positions.</p>\n        <p>The <code>localeCompare</code> method, if considered as a function of two arguments <emu-val>this</emu-val> and <var>that</var>, is a consistent comparison function (as defined in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>) on the set of all Strings.</p>\n        <p>The actual return values are implementation-defined to permit implementers to encode additional information in the value, but the function is required to define a total ordering on all Strings. This function must treat Strings that are canonically equivalent according to the Unicode standard as identical and must return <code>0</code> when comparing Strings that are considered canonically equivalent.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <code>localeCompare</code> method itself is not directly suitable as an argument to <code>Array.prototype.sort</code> because the latter requires a function of two arguments.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>This function is intended to rely on whatever language-sensitive comparison functionality is available to the ECMAScript environment from the host environment, and to compare according to the rules of the host environment's current locale. However, regardless of the host provided comparison capabilities, this function must treat Strings that are canonically equivalent according to the Unicode standard as identical. It is recommended that this function should not honour Unicode compatibility equivalences or decompositions. For a definition and discussion of canonical equivalence see the Unicode Standard, chapters 2 and 3, as well as Unicode Standard Annex #15, Unicode Normalization Forms (<a href=\"https://unicode.org/reports/tr15/\">https://unicode.org/reports/tr15/</a>) and Unicode Technical Note #5, Canonical Equivalence in Applications (<a href=\"https://unicode.org/notes/tn5/\">https://www.unicode.org/notes/tn5/</a>). Also see Unicode Technical Standard #10, Unicode Collation Algorithm (<a href=\"https://unicode.org/reports/tr10/\">https://unicode.org/reports/tr10/</a>).</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>localeCompare</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-code-realms": {"num": "8.2", "title": "#sec-code-realms Realms", "html": "<emu-clause id=\"sec-code-realms\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-code-realms\">#sec-code-realms</span> Realms</h1>\n    <p>Before it is evaluated, all ECMAScript code must be associated with a <dfn id=\"realm\">realm</dfn>. Conceptually, a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> consists of a set of intrinsic objects, an ECMAScript <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>, all of the ECMAScript code that is loaded within the scope of that <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>, and other associated state and resources.</p>\n    <p>A <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is represented in this specification as a <dfn id=\"realm-record\">Realm Record</dfn> with the fields specified in <emu-xref href=\"#table-21\"><a href=\"#table-21\" class=\"excluded-xref\" excluded-id=\"table-21\">#table-21</a></emu-xref>:</p>\n    <emu-table id=\"table-21\" caption=\"Realm Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-21\">#table-21</span>: <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          </th>\n          <th>\n            Value\n          </th>\n          <th>\n            Meaning\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Intrinsics]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose field names are intrinsic keys and whose values are objects\n          </td>\n          <td>\n            The intrinsic values used by code associated with this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalObject]]\n          </td>\n          <td>\n            Object\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalEnv]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[TemplateMap]]\n          </td>\n          <td>\n            A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, [[Array]]: Object }.\n          </td>\n          <td>\n            <p>Template objects are canonicalized separately for each <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> using its <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>'s [[TemplateMap]]. Each [[Site]] value is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> that is a <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>. The associated [[Array]] value is the corresponding template object that is passed to a tag function.</p>\n            <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Once a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> becomes unreachable, the corresponding [[Array]] is also unreachable, and it would be unobservable if an implementation removed the pair from the [[TemplateMap]] list.</div></emu-note>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HostDefined]]\n          </td>\n          <td>\n            Any, default value is <emu-val>undefined</emu-val>.\n          </td>\n          <td>\n            Field reserved for use by host environments that need to associate additional information with a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <div id=\"excluded-sec-createrealm\"><h1><span class=\"secnum\">8.2.1</span>#sec-createrealm CreateRealm ( )</h1>...</div><div id=\"excluded-sec-createintrinsics\"><h1><span class=\"secnum\">8.2.2</span>#sec-createintrinsics CreateIntrinsics ( realmRec )</h1>...</div><div id=\"excluded-sec-setrealmglobalobject\"><h1><span class=\"secnum\">8.2.3</span>#sec-setrealmglobalobject SetRealmGlobalObject ( realmRec, globalObj, thisValue )</h1>...</div><div id=\"excluded-sec-setdefaultglobalbindings\"><h1><span class=\"secnum\">8.2.4</span>#sec-setdefaultglobalbindings SetDefaultGlobalBindings ( realmRec )</h1>...</div></emu-clause>\n\n  "}, "sec-agents": {"num": "8.6", "title": "#sec-agents Agents", "html": "<emu-clause id=\"sec-agents\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agents\">#sec-agents</span> Agents</h1>\n\n    <p>An <dfn id=\"agent\">agent</dfn> comprises a set of ECMAScript execution contexts, an <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, a <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, an <dfn id=\"agent-record\">Agent Record</dfn>, and an <dfn id=\"executing-thread\">executing thread</dfn>. Except for the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, the constituents of an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> belong exclusively to that <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes a job on the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s execution contexts independently of other agents, except that an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> may be used as the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> by multiple agents, provided none of the agents sharing the thread have an <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> whose [[CanBlock]] property is <emu-val>true</emu-val>.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Some web browsers share a single <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> across multiple unrelated tabs of a browser window, for example.</p>\n    </div></emu-note>\n    <p>While an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes jobs, the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is the <dfn id=\"surrounding-agent\">surrounding agent</dfn> for the code in those jobs. The code uses the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref> to access the specification level execution objects held within the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>: the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, and the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s fields.</p>\n    <emu-table id=\"table-agent-record\" caption=\"Agent Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-agent-record\">#table-agent-record</span>: <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[LittleEndian]]</td>\n            <td>Boolean</td>\n            <td>The default value computed for the <em>isLittleEndian</em> parameter when it is needed by the algorithms <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref> and <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>. The choice is implementation-dependent and should be the alternative that is most efficient for the implementation.  Once the value has been observed it cannot change.</td>\n          </tr>\n          <tr>\n            <td>[[CanBlock]]</td>\n            <td>Boolean</td>\n            <td>Determines whether the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> can block or not.</td>\n          </tr>\n          <tr>\n            <td>[[Signifier]]</td>\n            <td>Any globally-unique value</td>\n            <td>Uniquely identifies the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> within its <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree1]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on one-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree2]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on two-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree8]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on eight-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[CandidateExecution]]</td>\n            <td>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref></td>\n            <td>See the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>Once the values of [[Signifier]], [[IsLockFree1]], and [[IsLockFree2]] have been observed by any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> they cannot change.</p>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The values of [[IsLockFree1]] and [[IsLockFree2]] are not necessarily determined by the hardware, but may also reflect implementation choices that can vary over time and between ECMAScript implementations.</p>\n\n      <p>There is no [[IsLockFree4]] property: 4-byte atomic operations are always lock-free.</p>\n\n      <p>In practice, if an atomic operation is implemented with any type of lock the operation is not lock-free.  Lock-free does not imply wait-free: there is no upper bound on how many machine steps may be required to complete a lock-free atomic operation.</p>\n\n      <p>That an atomic access of size <em>n</em> is lock-free does not imply anything about the (perceived) atomicity of non-atomic accesses of size <em>n</em>, specifically, non-atomic accesses may still be performed as a sequence of several separate memory accesses.  See <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> for details.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-agentsignifier\"><h1><span class=\"secnum\">8.6.1</span>#sec-agentsignifier AgentSignifier ( )</h1>...</div><div id=\"excluded-sec-agentcansuspend\"><h1><span class=\"secnum\">8.6.2</span>#sec-agentcansuspend AgentCanSuspend ( )</h1>...</div></emu-clause>\n\n  "}, "sec-math.sin": {"num": "20.3.2.30", "title": "#sec-math.sin Math.sin ( x )", "html": "<emu-clause id=\"sec-math.sin\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.sin\">#sec-math.sin</span> Math.sin ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the sine of <var>x</var>. The argument is expressed in radians.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val> or <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-finishdynamicimport": {"num": "15.2.1.20", "title": "#sec-finishdynamicimport Runtime Semantics: FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )", "html": "<emu-clause id=\"sec-finishdynamicimport\" aoid=\"FinishDynamicImport\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finishdynamicimport\">#sec-finishdynamicimport</span> Runtime Semantics: FinishDynamicImport ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <var>completion</var> )</h1>\n        <p>The abstract operation FinishDynamicImport takes arguments <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, and <var>completion</var>. FinishDynamicImport completes the process of a dynamic import originally started by an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> call, resolving or rejecting the promise returned by that call as appropriate according to <var>completion</var>. It is performed by host environments as part of <emu-xref aoid=\"HostImportModuleDynamically\"><a href=\"#sec-hostimportmoduledynamically\">HostImportModuleDynamically</a></emu-xref>. It performs the following steps when called:</p>\n\n        <emu-alg><ol><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>completion</var>.[[Value]] &#187;).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a normal completion and <var>completion</var>.[[Value]] is <emu-val>undefined</emu-val>.</li><li>Let <var>moduleRecord</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Evaluate has already been invoked on <var>moduleRecord</var> and successfully completed.</li><li>Let <var>namespace</var> be <emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>moduleRecord</var>).</li><li>If <var>namespace</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li><li>Else, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-parseint-string-radix": {"num": "18.2.5", "title": "#sec-parseint-string-radix parseInt ( string, radix )", "html": "<emu-clause id=\"sec-parseint-string-radix\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parseint-string-radix\">#sec-parseint-string-radix</span> parseInt ( <var>string</var>, <var>radix</var> )</h1>\n      <p>The <code>parseInt</code> function produces an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value dictated by interpretation of the contents of the <var>string</var> argument according to the specified <var>radix</var>. Leading white space in <var>string</var> is ignored. If <var>radix</var> is <emu-val>undefined</emu-val> or 0, it is assumed to be 10 except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of 16 is assumed. If <var>radix</var> is 16, the number may also optionally begin with the code unit pairs <code>0x</code> or <code>0X</code>.</p>\n      <p>The <code>parseInt</code> function is the <dfn>%parseInt%</dfn> intrinsic object. When the <code>parseInt</code> function is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <emu-const>start</emu-const>).</li><li>Let <var>sign</var> be 1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002D (HYPHEN-MINUS), set <var>sign</var> to -1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from <var>S</var>.</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>radix</var>).</li><li>Let <var>stripPrefix</var> be <emu-val>true</emu-val>.</li><li>If <var>R</var> &#8800; 0, then<ol><li>If <var>R</var> &lt; 2 or <var>R</var> &gt; 36, return <emu-val>NaN</emu-val>.</li><li>If <var>R</var> &#8800; 16, set <var>stripPrefix</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Set <var>R</var> to 10.</li></ol></li><li>If <var>stripPrefix</var> is <emu-val>true</emu-val>, then<ol><li>If the length of <var>S</var> is at least 2 and the first two code units of <var>S</var> are either <emu-val>\"0x\"</emu-val> or <emu-val>\"0X\"</emu-val>, then<ol><li>Remove the first two code units from <var>S</var>.</li><li>Set <var>R</var> to 16.</li></ol></li></ol></li><li>If <var>S</var> contains a code unit that is not a radix-<var>R</var> digit, let <var>Z</var> be the substring of <var>S</var> consisting of all code units before the first such code unit; otherwise, let <var>Z</var> be <var>S</var>.</li><li>If <var>Z</var> is empty, return <emu-val>NaN</emu-val>.</li><li>Let <var>mathInt</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation, using the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if <var>R</var> is 10 and <var>Z</var> contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if <var>R</var> is not 2, 4, 8, 10, 16, or 32, then <var>mathInt</var> may be an implementation-dependent approximation to the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation.)</li><li>If <var>mathInt</var> = 0<sub>&#8477;</sub>, then<ol><li>If <var>sign</var> = -1, return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Let <var>number</var> be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathInt</var>.</li><li>Return <var>sign</var> &#215; <var>number</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseInt</code> may interpret only a leading portion of <var>string</var> as an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value; it ignores any code units that cannot be interpreted as part of the notation of an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ecmascript-overview": {"num": "4.2", "title": "#sec-ecmascript-overview ECMAScript Overview", "html": "<emu-clause id=\"sec-ecmascript-overview\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-overview\">#sec-ecmascript-overview</span> ECMAScript Overview</h1>\n    <p>The following is an informal overview of ECMAScript&#8212;not all parts of the language are described. This overview is not part of the standard proper.</p>\n    <p>ECMAScript is object-based: basic language and host facilities are provided by objects, and an ECMAScript program is a cluster of communicating objects. In ECMAScript, an <em>object</em> is a collection of zero or more <em>properties</em> each with <em>attributes</em> that determine how each property can be used&#8212;for example, when the Writable attribute for a property is set to <emu-val>false</emu-val>, any attempt by executed ECMAScript code to assign a different value to the property fails. Properties are containers that hold other objects, <em>primitive values</em>, or <em>functions</em>. A primitive value is a member of one of the following built-in types: <b>Undefined</b>, <b>Null</b>, <b>Boolean</b>, <b>Number</b>, <b>BigInt</b>, <b>String</b>, and <b>Symbol;</b> an object is a member of the built-in type <b>Object</b>; and a function is a callable object. A function that is associated with an object via a property is called a <em>method</em>.</p>\n    <p>ECMAScript defines a collection of <em>built-in objects</em> that round out the definition of ECMAScript entities. These built-in objects include the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>; objects that are fundamental to the <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of the language including <code>Object</code>, <code>Function</code>, <code>Boolean</code>, <code>Symbol</code>, and various <code>Error</code> objects; objects that represent and manipulate numeric values including <code>Math</code>, <code>Number</code>, and <code>Date</code>; the text processing objects <code>String</code> and <code>RegExp</code>; objects that are indexed collections of values including <code>Array</code> and nine different kinds of Typed Arrays whose elements all have a specific numeric data representation; keyed collections including <code>Map</code> and <code>Set</code> objects; objects supporting structured data including the <code>JSON</code> object, <code>ArrayBuffer</code>, <code>SharedArrayBuffer</code>, and <code>DataView</code>; objects supporting control abstractions including generator functions and <code>Promise</code> objects; and reflection objects including <code>Proxy</code> and <code>Reflect</code>.</p>\n    <p>ECMAScript also defines a set of built-in <em>operators</em>. ECMAScript operators include various unary operations, multiplicative operators, additive operators, bitwise shift operators, relational operators, equality operators, binary bitwise operators, binary logical operators, assignment operators, and the comma operator.</p>\n    <p>Large ECMAScript programs are supported by <em>modules</em> which allow a program to be divided into multiple sequences of statements and declarations. Each module explicitly identifies declarations it uses that need to be provided by other modules and which of its declarations are available for use by other modules.</p>\n    <p>ECMAScript syntax intentionally resembles Java syntax. ECMAScript syntax is relaxed to enable it to serve as an easy-to-use scripting language. For example, a variable is not required to have its type declared nor are types associated with properties, and defined functions are not required to have their declarations appear textually before calls to them.</p>\n\n    <div id=\"excluded-sec-objects\"><h1><span class=\"secnum\">4.2.1</span>#sec-objects Objects</h1>...</div><div id=\"excluded-sec-strict-variant-of-ecmascript\"><h1><span class=\"secnum\">4.2.2</span>#sec-strict-variant-of-ecmascript The Strict Variant of ECMAScript</h1>...</div></emu-clause>\n\n  "}, "sec-math.atanh": {"num": "20.3.2.7", "title": "#sec-math.atanh Math.atanh ( x )", "html": "<emu-clause id=\"sec-math.atanh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.atanh\">#sec-math.atanh</span> Math.atanh ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the inverse hyperbolic tangent of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than -1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is greater than 1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is -1, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is +1, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-numeric-types-number-exponentiate": {"num": "6.1.6.1.3", "title": "#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )", "html": "<emu-clause id=\"sec-numeric-types-number-exponentiate\" oldids=\"sec-applying-the-exp-operator\">\n          <span id=\"sec-applying-the-exp-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-exponentiate\">#sec-numeric-types-number-exponentiate</span> Number::exponentiate ( <var>base</var>, <var>exponent</var> )</h1>\n          <p>The abstract operation Number::exponentiate takes arguments <var>base</var> (a Number) and <var>exponent</var> (a Number). It returns an implementation-dependent approximation of the result of raising <var>base</var> to the power <var>exponent</var>, subject to the following requirements:</p>\n          <ul>\n            <li>If <var>exponent</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>+0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>-0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>NaN</emu-val> and <var>exponent</var> is nonzero, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> &lt; 0 and <var>base</var> is finite and <var>exponent</var> is finite and <var>exponent</var> is not an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>NaN</emu-val>.</li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>The result of <var>base</var> <code>**</code> <var>exponent</var> when <var>base</var> is <emu-val>1</emu-val> or <emu-val>-1</emu-val> and <var>exponent</var> is <emu-val>+Infinity</emu-val> or <emu-val>-Infinity</emu-val> differs from <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The first edition of ECMAScript specified a result of <emu-val>NaN</emu-val> for this operation, whereas later versions of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> specified <emu-val>1</emu-val>. The historical ECMAScript behaviour is preserved for compatibility reasons.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-script-records": {"num": "15.1.8", "title": "#sec-script-records Script Records", "html": "<emu-clause id=\"sec-script-records\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-script-records\">#sec-script-records</span> Script Records</h1>\n\n      <p>A <dfn id=\"script-record\">Script Record</dfn> encapsulates information about a script being evaluated. Each script record contains the fields listed in <emu-xref href=\"#table-script-records\"><a href=\"#table-script-records\" class=\"excluded-xref\" excluded-id=\"table-script-records\">#table-script-records</a></emu-xref>.</p>\n\n      <emu-table id=\"table-script-records\" caption=\"Script Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-script-records\">#table-script-records</span>: <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> Fields</figcaption>\n        <table>\n          <thead>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value Type\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td>\n              [[Realm]]\n            </td>\n            <td>\n              <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n            </td>\n            <td>\n              The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> within which this script was created. <emu-val>undefined</emu-val> if not yet assigned.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Environment]]\n            </td>\n            <td>\n              <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> | <emu-val>undefined</emu-val>\n            </td>\n            <td>\n              The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing the top level bindings for this script. This field is set when the script is instantiated.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[ECMAScriptCode]]\n            </td>\n            <td>\n              a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n            </td>\n            <td>\n              The result of parsing the source text of this script using <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[HostDefined]]\n            </td>\n            <td>\n              Any, default value is <emu-val>undefined</emu-val>.\n            </td>\n            <td>\n              Field reserved for use by host environments that need to associate additional information with a script.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-string.prototype.tolocalelowercase": {"num": "21.1.3.23", "title": "#sec-string.prototype.tolocalelowercase String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-string.prototype.tolocalelowercase\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.tolocalelowercase\">#sec-string.prototype.tolocalelowercase</span> String.prototype.toLocaleLowerCase ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>toLocaleLowerCase</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleLowerCase</code> method is used.</p>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>This function works exactly the same as <code>toLowerCase</code> except that its result is intended to yield the correct result for the host environment's current locale, rather than a locale-independent result. There will only be a difference in the few cases (such as Turkish) where the rules for that language conflict with the regular Unicode case mappings.</p>\n        <p>The meaning of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>toLocaleLowerCase</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-function.prototype.tostring": {"num": "19.2.3.5", "title": "#sec-function.prototype.tostring Function.prototype.toString ( )", "html": "<emu-clause id=\"sec-function.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.tostring\">#sec-function.prototype.tostring</span> Function.prototype.toString ( )</h1>\n        <p>When the <code>toString</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>func</var> be the <emu-val>this</emu-val> value.</li><li>If <var>func</var> is a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function exotic object</a></emu-xref> or a <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\">built-in function object</a></emu-xref>, then return an implementation-dependent String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>. Additionally, if <var>func</var> is a <emu-xref href=\"#sec-well-known-intrinsic-objects\"><a href=\"#sec-well-known-intrinsic-objects\">Well-known Intrinsic Object</a></emu-xref> and is not identified as an anonymous function, the portion of the returned String that would be matched by <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> must be the initial value of the <emu-val>\"name\"</emu-val> property of <var>func</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <var>func</var> has a [[SourceText]] internal slot and <var>func</var>.[[SourceText]] is a sequence of Unicode code points and !&#160;HostHasSourceTextAvailable(<var>func</var>) is <emu-val>true</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"UTF16Encode\"><a href=\"#sec-utf16encode\">UTF16Encode</a></emu-xref>(<var>func</var>.[[SourceText]]).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>true</emu-val>, then return an implementation-dependent String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n        <emu-grammar type=\"definition\"><emu-production name=\"NativeFunction\" id=\"prod-NativeFunction\">\n    <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1fcbc9e6\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-t>[</emu-t><emu-t>native</emu-t><emu-t>code</emu-t><emu-t>]</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      </emu-clause>\n\n      "}, "sec-math.log2": {"num": "20.3.2.23", "title": "#sec-math.log2 Math.log2 ( x )", "html": "<emu-clause id=\"sec-math.log2\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log2\">#sec-math.log2</span> Math.log2 ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the base 2 logarithm of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than 0, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is 1, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-enumerate-object-properties": {"num": "13.7.5.15", "title": "#sec-enumerate-object-properties EnumerateObjectProperties ( O )", "html": "<emu-clause id=\"sec-enumerate-object-properties\" aoid=\"EnumerateObjectProperties\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerate-object-properties\">#sec-enumerate-object-properties</span> EnumerateObjectProperties ( <var>O</var> )</h1>\n        <p>The abstract operation EnumerateObjectProperties takes argument <var>O</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Return an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) whose <code>next</code> method iterates over all the String-valued keys of enumerable properties of <var>O</var>. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.</li></ol></emu-alg>\n        <p>The iterator's <code>throw</code> and <code>return</code> methods are <emu-val>null</emu-val> and are never invoked. The iterator's <code>next</code> method processes object properties to determine whether the property key should be returned as an iterator value. Returned property keys do not include keys that are Symbols. Properties of the target object may be deleted during enumeration. A property that is deleted before it is processed by the iterator's <code>next</code> method is ignored. If new properties are added to the target object during enumeration, the newly added properties are not guaranteed to be processed in the active enumeration. A <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> will be returned by the iterator's <code>next</code> method at most once in any enumeration.</p>\n        <p>Enumerating the properties of the target object includes enumerating properties of its prototype, and the prototype of the prototype, and so on, recursively; but a property of a prototype is not processed if it has the same name as a property that has already been processed by the iterator's <code>next</code> method. The values of [[Enumerable]] attributes are not considered when determining if a property of a prototype object has already been processed. The enumerable property names of prototype objects must be obtained by invoking EnumerateObjectProperties passing the prototype object as the argument. EnumerateObjectProperties must obtain the own property keys of the target object by calling its [[OwnPropertyKeys]] internal method. Property attributes of the target object must be obtained by calling its [[GetOwnProperty]] internal method.</p>\n        <p>In addition, if neither <var>O</var> nor any object in its prototype chain is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>, <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>, <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>, or implementation provided <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, then the iterator must behave as would the iterator given by <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref>(<var>O</var>) until one of the following occurs:</p>\n        <ul>\n          <li>the value of the [[Prototype]] internal slot of <var>O</var> or an object in its prototype chain changes,</li>\n          <li>a property is removed from <var>O</var> or an object in its prototype chain,</li>\n          <li>a property is added to an object in <var>O</var>'s prototype chain, or</li>\n          <li>the value of the [[Enumerable]] attribute of a property of <var>O</var> or an object in its prototype chain changes.</li>\n        </ul>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Hosts are not required to implement the algorithm in <emu-xref href=\"#sec-%foriniteratorprototype%.next\"><a href=\"#sec-%foriniteratorprototype%.next\" class=\"excluded-xref\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</a></emu-xref> directly. They may choose any implementation whose behaviour will not deviate from that algorithm unless one of the constraints in the previous paragraph is violated.</p>\n          <p>The following is an informative definition of an ECMAScript generator function that conforms to these rules:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">EnumerateObjectProperties</span>(<span class=\"hljs-params\">obj</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">Reflect</span>.ownKeys(obj)) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">\"symbol\"</span>) <span class=\"hljs-keyword\">continue</span>;\n    <span class=\"hljs-keyword\">const</span> desc = <span class=\"hljs-built_in\">Reflect</span>.getOwnPropertyDescriptor(obj, key);\n    <span class=\"hljs-keyword\">if</span> (desc) {\n      visited.add(key);\n      <span class=\"hljs-keyword\">if</span> (desc.enumerable) <span class=\"hljs-keyword\">yield</span> key;\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> proto = <span class=\"hljs-built_in\">Reflect</span>.getPrototypeOf(obj);\n  <span class=\"hljs-keyword\">if</span> (proto === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> protoKey <span class=\"hljs-keyword\">of</span> EnumerateObjectProperties(proto)) {\n    <span class=\"hljs-keyword\">if</span> (!visited.has(protoKey)) <span class=\"hljs-keyword\">yield</span> protoKey;\n  }\n}</code></pre>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          The list of exotic objects for which implementations are not required to match <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref> was chosen because implementations historically differed in behaviour for those cases, and agreed in all others.\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.tostring": {"num": "20.1.3.6", "title": "#sec-number.prototype.tostring Number.prototype.toString ( [ radix ] )", "html": "<emu-clause id=\"sec-number.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.tostring\">#sec-number.prototype.tostring</span> Number.prototype.toString ( [ <var>radix</var> ] )</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The optional <var>radix</var> should be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the inclusive range 2 to 36. If <var>radix</var> is <emu-val>undefined</emu-val> the Number 10 is used as the value of <var>radix</var>.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisnumbervalue\"><a href=\"#sec-thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>radix</var> is <emu-val>undefined</emu-val>, let <var>radixNumber</var> be 10.</li><li>Else, let <var>radixNumber</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>radix</var>).</li><li>If <var>radixNumber</var> &lt; 2 or <var>radixNumber</var> &gt; 36, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>radixNumber</var> = 10, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Return the String representation of this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> using the radix specified by <var>radixNumber</var>. Letters <code>a</code>-<code>z</code> are used for digits with values 10 through 35. The precise algorithm is implementation-dependent, however the algorithm should be a generalization of that specified in <emu-xref href=\"#sec-numeric-types-number-tostring\"><a href=\"#sec-numeric-types-number-tostring\" class=\"excluded-xref\" excluded-id=\"sec-numeric-types-number-tostring\">#sec-numeric-types-number-tostring</a></emu-xref>.</li></ol></emu-alg>\n        <p>The <code>toString</code> function is not generic; it throws a <emu-val>TypeError</emu-val> exception if its <emu-val>this</emu-val> value is not a Number or a Number object. Therefore, it cannot be transferred to other kinds of objects for use as a method.</p>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>toString</code> method is 1.</p>\n      </emu-clause>\n\n      "}, "sec-math.cosh": {"num": "20.3.2.13", "title": "#sec-math.cosh Math.cosh ( x )", "html": "<emu-clause id=\"sec-math.cosh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.cosh\">#sec-math.cosh</span> Math.cosh ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the hyperbolic cosine of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.cosh(x)</code> is the same as the value of <code>(Math.exp(x) + Math.exp(-x)) / 2</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-debugger-statement-runtime-semantics-evaluation": {"num": "13.16.1", "title": "#sec-debugger-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-debugger-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-debugger-statement-runtime-semantics-evaluation\">#sec-debugger-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Evaluating a <emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt> may allow an implementation to cause a breakpoint when run under a debugger. If a debugger is not present or active this statement has no observable effect.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"DebuggerStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"352e6172\"><emu-t>debugger</emu-t><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If an implementation-defined debugging facility is available and enabled, then<ol><li>Perform an implementation-defined debugging action.</li><li>Let <var>result</var> be an implementation-defined <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> value.</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-memory-model-fundamentals": {"num": "27.1", "title": "#sec-memory-model-fundamentals Memory Model Fundamentals", "html": "<emu-clause id=\"sec-memory-model-fundamentals\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-memory-model-fundamentals\">#sec-memory-model-fundamentals</span> Memory Model Fundamentals</h1>\n    <p>Shared memory accesses (reads and writes) are divided into two groups, atomic accesses and data accesses, defined below. Atomic accesses are sequentially consistent, i.e., there is a strict total ordering of events agreed upon by all agents in an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>. Non-atomic accesses do not have a strict total ordering agreed upon by all agents, i.e., unordered.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>No orderings weaker than sequentially consistent and stronger than unordered, such as release-acquire, are supported.</p>\n    </div></emu-note>\n    <p>A <dfn>Shared Data Block event</dfn> is either a <dfn>ReadSharedMemory</dfn>, <dfn>WriteSharedMemory</dfn>, or <dfn>ReadModifyWriteSharedMemory</dfn> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</p>\n\n    <emu-table id=\"table-readsharedmemory-fields\" caption=\"ReadSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-readsharedmemory-fields\">#table-readsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to read from multiple write events on equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-writesharedmemory-fields\" caption=\"WriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-writesharedmemory-fields\">#table-writesharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const> | <emu-const>Init</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to be read from multiple read events with equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be read by other events.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-rmwsharedmemory-fields\" caption=\"ReadModifyWriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-rmwsharedmemory-fields\">#table-rmwsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const></td>\n            <td>Read-modify-write events are always sequentially consistent.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td><emu-val>true</emu-val></td>\n            <td>Read-modify-write events cannot tear.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read-modify-write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read-modify-write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be passed to [[ModifyOp]].</td>\n          </tr>\n          <tr>\n            <td>[[ModifyOp]]</td>\n            <td>A <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref></td>\n            <td>An abstract closure that returns a modified <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values from a read <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values and [[Payload]].</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>These events are introduced by <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> or by methods on the Atomics object.</p>\n    <p>Some operations may also introduce <dfn>Synchronize</dfn> events. A <dfn>Synchronize event</dfn> has no fields, and exists purely to directly constrain the permitted orderings of other events.</p>\n    <p>In addition to <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and Synchronize events, there are host-specific events.</p>\n    <p>Let the range of a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event be the Set of contiguous integers from its [[ByteIndex]] to [[ByteIndex]] + [[ElementSize]] - 1. Two events' ranges are equal when the events have the same [[Block]], and the ranges are element-wise equal. Two events' ranges are overlapping when the events have the same [[Block]], the ranges are not equal and their intersection is non-empty. Two events' ranges are disjoint when the events do not have the same [[Block]] or their ranges are neither equal nor overlapping.</p>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Examples of host-specific synchronizing events that should be accounted for are: sending a SharedArrayBuffer from one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to another (e.g., by <code>postMessage</code> in a browser), starting and stopping agents, and communicating within the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> via channels other than shared memory. It is assumed those events are appended to <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> during evaluation like the other SharedArrayBuffer events.</p>\n    </div></emu-note>\n    <p>Events are ordered within candidate executions by the relations defined below.</p>\n  </emu-clause>\n\n  "}, "sec-timezoneestring": {"num": "20.4.4.41.3", "title": "#sec-timezoneestring Runtime Semantics: TimeZoneString ( tv )", "html": "<emu-clause id=\"sec-timezoneestring\" aoid=\"TimeZoneString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-timezoneestring\">#sec-timezoneestring</span> Runtime Semantics: TimeZoneString ( <var>tv</var> )</h1>\n          <p>The abstract operation TimeZoneString takes argument <var>tv</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>tv</var> is not <emu-val>NaN</emu-val>.</li><li>Let <var>offset</var> be <emu-xref aoid=\"LocalTZA\"><a href=\"#sec-local-time-zone-adjustment\">LocalTZA</a></emu-xref>(<var>tv</var>, <emu-val>true</emu-val>).</li><li>If <var>offset</var> &#8805; 0, let <var>offsetSign</var> be <emu-val>\"+\"</emu-val>; otherwise, let <var>offsetSign</var> be <emu-val>\"-\"</emu-val>.</li><li>Let <var>offsetMin</var> be the String representation of <emu-xref aoid=\"MinFromTime\"><a href=\"#eqn-MinFromTime\">MinFromTime</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>offset</var>)), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>offsetHour</var> be the String representation of <emu-xref aoid=\"HourFromTime\"><a href=\"#eqn-HourFromTime\">HourFromTime</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>offset</var>)), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>tzName</var> be an implementation-defined string that is either the empty String or the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x0020 (SPACE), the code unit 0x0028 (LEFT PARENTHESIS), an implementation-dependent timezone name, and the code unit 0x0029 (RIGHT PARENTHESIS).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>offsetSign</var>, <var>offsetHour</var>, <var>offsetMin</var>, and <var>tzName</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-conformance": {"num": "2", "title": "#sec-conformance Conformance", "html": "<emu-clause id=\"sec-conformance\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance\">#sec-conformance</span> Conformance</h1>\n  <p>A conforming implementation of ECMAScript must provide and support all the types, values, objects, properties, functions, and program syntax and semantics described in this specification.</p>\n  <p>A conforming implementation of ECMAScript must interpret source text input in conformance with the latest version of the Unicode Standard and ISO/IEC 10646.</p>\n  <p>A conforming implementation of ECMAScript that provides an application programming interface (API) that supports programs that need to adapt to the linguistic and cultural conventions used by different human languages and countries must implement the interface defined by the most recent edition of ECMA-402 that is compatible with this specification.</p>\n  <p>A conforming implementation of ECMAScript may provide additional types, values, objects, properties, and functions beyond those described in this specification. In particular, a conforming implementation of ECMAScript may provide properties not described in this specification, and values for those properties, for objects that are described in this specification.</p>\n  <p>A conforming implementation of ECMAScript may support program and regular expression syntax not described in this specification. In particular, a conforming implementation of ECMAScript may support program syntax that makes use of any &#8220;future reserved words&#8221; noted in subclause <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref> of this specification.</p>\n  <p>A conforming implementation of ECMAScript must not implement any extension that is listed as a Forbidden Extension in subclause <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>.</p>\n</emu-clause>\n\n"}, "sec-%typedarray%.prototype.sort": {"num": "22.2.3.26", "title": "#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.sort\">#sec-%typedarray%.prototype.sort</span> %TypedArray%.prototype.sort ( <var>comparefn</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> is a distinct function that, except as described below, implements the same requirements as those of <code>Array.prototype.sort</code> as defined in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>. The implementation of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> specification may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. The only internal methods of the <emu-val>this</emu-val> value that the algorithm may call are [[Get]] and [[Set]].</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function. These steps are used instead of the entry steps in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>obj</var>).</li><li>Let <var>len</var> be <var>obj</var>.[[ArrayLength]].</li></ol></emu-alg>\n        <p>The implementation-defined sort order condition for exotic objects is not applied by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>.</p>\n        <p>The following version of <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> is used by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>. It performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>.</p>\n        <p>The abstract operation TypedArraySortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> and <var>buffer</var> values of the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Both <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) are Number or both are BigInt.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>Return <var>v</var>.</li></ol></li><li>If <var>x</var> and <var>y</var> are both <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return 1.</li><li>If <var>y</var> is <emu-val>NaN</emu-val>, return -1.</li><li>If <var>x</var> &lt; <var>y</var>, return -1.</li><li>If <var>x</var> &gt; <var>y</var>, return 1.</li><li>If <var>x</var> is <emu-val>-0</emu-val> and <var>y</var> is <emu-val>+0</emu-val>, return -1.</li><li>If <var>x</var> is <emu-val>+0</emu-val> and <var>y</var> is <emu-val>-0</emu-val>, return 1.</li><li>Return <emu-val>+0</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Because <emu-val>NaN</emu-val> always compares greater than any other value, <emu-val>NaN</emu-val> property values always sort to the end of the result when <var>comparefn</var> is not provided.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.atan": {"num": "20.3.2.6", "title": "#sec-math.atan Math.atan ( x )", "html": "<emu-clause id=\"sec-math.atan\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.atan\">#sec-math.atan</span> Math.atan ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the arc tangent of <var>x</var>. The result is expressed in radians and ranges from -&#960; / 2 to +&#960; / 2.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is an implementation-dependent approximation to +&#960; / 2.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is an implementation-dependent approximation to -&#960; / 2.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-hostimportmoduledynamically": {"num": "15.2.1.19", "title": "#sec-hostimportmoduledynamically Runtime Semantics: HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )", "html": "<emu-clause id=\"sec-hostimportmoduledynamically\" aoid=\"HostImportModuleDynamically\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostimportmoduledynamically\">#sec-hostimportmoduledynamically</span> Runtime Semantics: HostImportModuleDynamically ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> )</h1>\n        <p>HostImportModuleDynamically is an implementation-defined abstract operation that performs any necessary setup work in order to make available the module corresponding to the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String, <var>specifier</var>, occurring within the context of the script or module represented by the <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> <var>referencingScriptOrModule</var>. (<var>referencingScriptOrModule</var> may also be <emu-val>null</emu-val>, if there is no active script or module when the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression occurs.) It then performs <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> to finish the dynamic import process.</p>\n\n        <p>The implementation of HostImportModuleDynamically must conform to the following requirements:</p>\n\n        <ul>\n          <li>\n            The abstract operation must always complete normally with <emu-val>undefined</emu-val>. Success or failure must instead be signaled as discussed below.\n          </li>\n          <li>\n            The host environment must conform to one of the two following sets of requirements:\n            <dl>\n              <dt>Success path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the host environment must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>)).</li>\n\n                  <li>Any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must complete normally.</li>\n\n                  <li>The completion value of any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must be a module which has already been evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion.</li>\n                </ul>\n              </dd>\n\n              <dt>Failure path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the host environment must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>), with the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> representing the cause of failure.</li>\n                </ul>\n              </dd>\n            </dl>\n          </li>\n          <li>\n            If the host environment takes the success path once for a given <var>referencingScriptOrModule</var>, <var>specifier</var> pair, it must always do so for subsequent calls.\n          </li>\n          <li>\n            The operation must not call <var>promiseCapability</var>.[[Resolve]] or <var>promiseCapability</var>.[[Reject]], but instead must treat <var>promiseCapability</var> as an opaque identifying value to be passed through to <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>.\n          </li>\n        </ul>\n\n        <p>The actual process performed is implementation-defined, but typically consists of performing whatever I/O operations are necessary to allow <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> to synchronously retrieve the appropriate <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and then calling its Evaluate concrete method. This might require performing similar normalization as <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> does.</p>\n      </emu-clause>\n\n      "}, "sec-abstract-module-records": {"num": "15.2.1.15", "title": "#sec-abstract-module-records Abstract Module Records", "html": "<emu-clause id=\"sec-abstract-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-module-records\">#sec-abstract-module-records</span> Abstract Module Records</h1>\n        <p>A <dfn>Module Record</dfn> encapsulates structural information about the imports and exports of a single module. This information is used to link the imports and exports of sets of connected modules. A Module Record includes four fields that are only used when evaluating a module.</p>\n        <p>For specification purposes Module Record values are values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> specification type and can be thought of as existing in a simple object-oriented hierarchy where Module Record is an abstract class with both abstract and concrete subclasses. This specification defines the abstract subclass named <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> and its concrete subclass named <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>. Other specifications and implementations may define additional Module Record subclasses corresponding to alternative module definition facilities that they defined.</p>\n        <p>Module Record defines the fields listed in <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref>. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref>. All Module definition subclasses must provide concrete implementations of these abstract methods.</p>\n        <emu-table id=\"table-36\" caption=\"Module Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-36\">#table-36</span>: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[Realm]]\n              </td>\n              <td>\n                <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> within which this module was created. <emu-val>undefined</emu-val> if not yet assigned.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Environment]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing the top level bindings for this module. This field is set when the module is linked.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Namespace]]\n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The Module Namespace Object (<emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>) if one has been created for this module. Otherwise <emu-val>undefined</emu-val>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HostDefined]]\n              </td>\n              <td>\n                Any, default value is <emu-val>undefined</emu-val>.\n              </td>\n              <td>\n                Field reserved for use by host environments that need to associate additional information with a module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-37\" caption=\"Abstract Methods of Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-37\">#table-37</span>: Abstract Methods of Module Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetExportedNames([<var>exportStarSet</var>])\n              </td>\n              <td>\n                Return a list of all names that are either directly or indirectly exported from this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                ResolveExport(<var>exportName</var> [, <var>resolveSet</var>])\n              </td>\n              <td>\n                <p>Return the binding of a name exported by this module. Bindings are represented by a <dfn id=\"resolvedbinding-record\">ResolvedBinding Record</dfn>, of the form { [[Module]]: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. Return <emu-val>null</emu-val> if the name cannot be resolved, or <emu-val>\"ambiguous\"</emu-val> if multiple bindings were found.</p>\n                <p>Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result if it completes normally.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Link()\n              </td>\n              <td>\n                <p>Prepare the module for evaluation by transitively resolving all module dependencies and creating a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Evaluate()\n              </td>\n              <td>\n                <p>If this module has already been evaluated successfully, return <emu-val>undefined</emu-val>; if it has already been evaluated unsuccessfully, throw the exception that was produced. Otherwise, transitively evaluate all module dependencies of this module and then evaluate this module.</p>\n                <p>Link must have completed successfully prior to invoking this method.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-math.sqrt": {"num": "20.3.2.32", "title": "#sec-math.sqrt Math.sqrt ( x )", "html": "<emu-clause id=\"sec-math.sqrt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.sqrt\">#sec-math.sqrt</span> Math.sqrt ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the square root of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than 0, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-non-ecmascript-functions": {"num": "10.2.2", "title": "#sec-non-ecmascript-functions Non-ECMAScript Functions", "html": "<emu-clause id=\"sec-non-ecmascript-functions\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-non-ecmascript-functions\">#sec-non-ecmascript-functions</span> Non-ECMAScript Functions</h1>\n      <p>An ECMAScript implementation may support the evaluation of function exotic objects whose evaluative behaviour is expressed in some implementation-defined form of executable code other than via ECMAScript code. Whether a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an ECMAScript code function or a non-ECMAScript function is not semantically observable from the perspective of an ECMAScript code function that calls or is called by such a non-ECMAScript function.</p>\n    </emu-clause>\n  "}, "sec-array.prototype.tolocalestring": {"num": "22.1.3.29", "title": "#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-array.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.tolocalestring\">#sec-array.prototype.tolocalestring</span> Array.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>Array.prototype.toLocaleString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleString</code> method is used.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The first edition of ECMA-402 did not include a replacement specification for the <code>Array.prototype.toLocaleString</code> method.</p>\n        </div></emu-note>\n        <p>The meanings of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>array</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>array</var>).</li><li>Let <var>separator</var> be the String value for the list-separator String appropriate for the host environment's current locale (this is derived in an implementation-defined way).</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>If <var>k</var> &gt; 0, then<ol><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>R</var> and <var>separator</var>.</li></ol></li><li>Let <var>nextElement</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>If <var>nextElement</var> is not <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>nextElement</var>, <emu-val>\"toLocaleString\"</emu-val>)).</li><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>R</var> and <var>S</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>R</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The elements of the array are converted to Strings using their <code>toLocaleString</code> methods, and these Strings are then concatenated, separated by occurrences of a separator String that has been derived in an implementation-defined locale-specific way. The result of calling this function is intended to be analogous to the result of <code>toString</code>, except that the result of this function is intended to be locale-specific.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>toLocaleString</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.expm1": {"num": "20.3.2.15", "title": "#sec-math.expm1 Math.expm1 ( x )", "html": "<emu-clause id=\"sec-math.expm1\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.expm1\">#sec-math.expm1</span> Math.expm1 ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to subtracting 1 from the exponential function of <var>x</var> (<var>e</var> raised to the power of <var>x</var>, where <var>e</var> is the base of the natural logarithms). The result is computed in a way that is accurate even when the value of x is close 0.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is -1.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-terms-and-definitions": {"num": "4.3", "title": "#sec-terms-and-definitions Terms and Definitions", "html": "<emu-clause id=\"sec-terms-and-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-terms-and-definitions\">#sec-terms-and-definitions</span> Terms and Definitions</h1>\n    <p>For the purposes of this document, the following terms and definitions apply.</p>\n\n    <div id=\"excluded-sec-type\"><h1><span class=\"secnum\">4.3.1</span>#sec-type type</h1>...</div><div id=\"excluded-sec-primitive-value\"><h1><span class=\"secnum\">4.3.2</span>#sec-primitive-value primitive value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-object\"><h1><span class=\"secnum\">4.3.3</span>#sec-terms-and-definitions-object object</h1>...</div><div id=\"excluded-sec-constructor\"><h1><span class=\"secnum\">4.3.4</span>#sec-constructor constructor</h1>...</div><div id=\"excluded-sec-terms-and-definitions-prototype\"><h1><span class=\"secnum\">4.3.5</span>#sec-terms-and-definitions-prototype prototype</h1>...</div><div id=\"excluded-sec-ordinary-object\"><h1><span class=\"secnum\">4.3.6</span>#sec-ordinary-object ordinary object</h1>...</div><div id=\"excluded-sec-exotic-object\"><h1><span class=\"secnum\">4.3.7</span>#sec-exotic-object exotic object</h1>...</div><div id=\"excluded-sec-standard-object\"><h1><span class=\"secnum\">4.3.8</span>#sec-standard-object standard object</h1>...</div><div id=\"excluded-sec-built-in-object\"><h1><span class=\"secnum\">4.3.9</span>#sec-built-in-object built-in object</h1>...</div><div id=\"excluded-sec-undefined-value\"><h1><span class=\"secnum\">4.3.10</span>#sec-undefined-value undefined value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-undefined-type\"><h1><span class=\"secnum\">4.3.11</span>#sec-terms-and-definitions-undefined-type Undefined type</h1>...</div><div id=\"excluded-sec-null-value\"><h1><span class=\"secnum\">4.3.12</span>#sec-null-value null value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-null-type\"><h1><span class=\"secnum\">4.3.13</span>#sec-terms-and-definitions-null-type Null type</h1>...</div><div id=\"excluded-sec-terms-and-definitions-boolean-value\"><h1><span class=\"secnum\">4.3.14</span>#sec-terms-and-definitions-boolean-value Boolean value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-boolean-type\"><h1><span class=\"secnum\">4.3.15</span>#sec-terms-and-definitions-boolean-type Boolean type</h1>...</div><div id=\"excluded-sec-boolean-object\"><h1><span class=\"secnum\">4.3.16</span>#sec-boolean-object Boolean object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-string-value\"><h1><span class=\"secnum\">4.3.17</span>#sec-terms-and-definitions-string-value String value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-string-type\"><h1><span class=\"secnum\">4.3.18</span>#sec-terms-and-definitions-string-type String type</h1>...</div><div id=\"excluded-sec-string-object\"><h1><span class=\"secnum\">4.3.19</span>#sec-string-object String object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-number-value\"><h1><span class=\"secnum\">4.3.20</span>#sec-terms-and-definitions-number-value Number value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-number-type\"><h1><span class=\"secnum\">4.3.21</span>#sec-terms-and-definitions-number-type Number type</h1>...</div><div id=\"excluded-sec-number-object\"><h1><span class=\"secnum\">4.3.22</span>#sec-number-object Number object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-infinity\"><h1><span class=\"secnum\">4.3.23</span>#sec-terms-and-definitions-infinity Infinity</h1>...</div><div id=\"excluded-sec-terms-and-definitions-nan\"><h1><span class=\"secnum\">4.3.24</span>#sec-terms-and-definitions-nan NaN</h1>...</div><div id=\"excluded-sec-terms-and-definitions-bigint-value\"><h1><span class=\"secnum\">4.3.25</span>#sec-terms-and-definitions-bigint-value BigInt value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-bigint-type\"><h1><span class=\"secnum\">4.3.26</span>#sec-terms-and-definitions-bigint-type BigInt type</h1>...</div><div id=\"excluded-sec-bigint-object\"><h1><span class=\"secnum\">4.3.27</span>#sec-bigint-object BigInt object</h1>...</div><div id=\"excluded-sec-symbol-value\"><h1><span class=\"secnum\">4.3.28</span>#sec-symbol-value Symbol value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-symbol-type\"><h1><span class=\"secnum\">4.3.29</span>#sec-terms-and-definitions-symbol-type Symbol type</h1>...</div><div id=\"excluded-sec-symbol-object\"><h1><span class=\"secnum\">4.3.30</span>#sec-symbol-object Symbol object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-function\"><h1><span class=\"secnum\">4.3.31</span>#sec-terms-and-definitions-function function</h1>...</div><div id=\"excluded-sec-built-in-function\"><h1><span class=\"secnum\">4.3.32</span>#sec-built-in-function built-in function</h1>...</div><div id=\"excluded-sec-property\"><h1><span class=\"secnum\">4.3.33</span>#sec-property property</h1>...</div><div id=\"excluded-sec-method\"><h1><span class=\"secnum\">4.3.34</span>#sec-method method</h1>...</div><div id=\"excluded-sec-built-in-method\"><h1><span class=\"secnum\">4.3.35</span>#sec-built-in-method built-in method</h1>...</div><div id=\"excluded-sec-attribute\"><h1><span class=\"secnum\">4.3.36</span>#sec-attribute attribute</h1>...</div><div id=\"excluded-sec-own-property\"><h1><span class=\"secnum\">4.3.37</span>#sec-own-property own property</h1>...</div><div id=\"excluded-sec-inherited-property\"><h1><span class=\"secnum\">4.3.38</span>#sec-inherited-property inherited property</h1>...</div></emu-clause>\n\n  "}, "sec-math.cbrt": {"num": "20.3.2.9", "title": "#sec-math.cbrt Math.cbrt ( x )", "html": "<emu-clause id=\"sec-math.cbrt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.cbrt\">#sec-math.cbrt</span> Math.cbrt ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the cube root of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-math.acosh": {"num": "20.3.2.3", "title": "#sec-math.acosh Math.acosh ( x )", "html": "<emu-clause id=\"sec-math.acosh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.acosh\">#sec-math.acosh</span> Math.acosh ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the inverse hyperbolic cosine of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If x is less than 1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If x is 1, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-array.prototype.sort": {"num": "22.1.3.27", "title": "#sec-array.prototype.sort Array.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-array.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</span> Array.prototype.sort ( <var>comparefn</var> )</h1>\n        <p>The elements of this array are sorted. The sort must be stable (that is, elements that compare equal must remain in their original order). If <var>comparefn</var> is not <emu-val>undefined</emu-val>, it should be a function that accepts two arguments <var>x</var> and <var>y</var> and returns a negative value if <var>x</var> &lt; <var>y</var>, zero if <var>x</var> = <var>y</var>, or a positive value if <var>x</var> &gt; <var>y</var>.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>obj</var>).</li></ol></emu-alg>\n        <p>Within this specification of the <code>sort</code> method, an object, <var>obj</var>, is said to be <em>sparse</em> if the following algorithm returns <emu-val>true</emu-val>:</p>\n        <emu-alg><ol><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> in the range 0 &#8804; <var>i</var> &lt; <var>len</var>, do<ol><li>Let <var>elem</var> be <var>obj</var>.[[GetOwnProperty]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>i</var>)).</li><li>If <var>elem</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <p>The <em>sort order</em> is the ordering, after completion of this function, of the <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> property values of <var>obj</var> whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> indexes are less than <var>len</var>. The result of the <code>sort</code> function is then determined as follows:</p>\n        <p>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and is not a consistent comparison function for the elements of this array (see below), the sort order is implementation-defined. The sort order is also implementation-defined if <var>comparefn</var> is <emu-val>undefined</emu-val> and <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> does not act as a consistent comparison function.</p>\n        <p>Let <var>proto</var> be <var>obj</var>.[[GetPrototypeOf]](). If <var>proto</var> is not <emu-val>null</emu-val> and there exists an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> such that all of the conditions below are satisfied then the sort order is implementation-defined:</p>\n        <ul>\n          <li>\n            <var>obj</var> is sparse\n          </li>\n          <li>\n            0 &#8804; <var>j</var> &lt; <var>len</var>\n          </li>\n          <li>\n            <emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>proto</var>, <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>j</var>)) is <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>The sort order is also implementation-defined if <var>obj</var> is sparse and any of the following conditions are true:</p>\n        <ul>\n          <li>\n            <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>obj</var>) is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            Any <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> property of <var>obj</var> whose name is a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var> is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> whose [[Configurable]] attribute is <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <p>The sort order is also implementation-defined if any of the following conditions are true:</p>\n        <ul>\n          <li>\n            If <var>obj</var> is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> (including Proxy exotic objects) whose behaviour for [[Get]], [[Set]], [[Delete]], and [[GetOwnProperty]] is not the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> implementation of these internal methods.\n          </li>\n          <li>\n            If any index property of <var>obj</var> whose name is a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> or is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> whose [[Writable]] attribute is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and the application of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> to any value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> modifies <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and all applications of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, to any specific value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>, do not produce the same result.\n          </li>\n        </ul>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Perform an implementation-dependent sequence of calls to the <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>, <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>, <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>, and <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref> abstract operation with <var>obj</var> as the first argument, and to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> (described below), such that:<ul><li>The property key argument for each call to <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>, <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>, <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>, or <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref> is the string representation of a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var>.</li><li>The <code>Throw</code> argument for every call to <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref> is <emu-val>true</emu-val>.</li><li>The arguments for calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> are values returned by a previous call to the <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref> abstract operation, unless the properties accessed by those previous calls did not exist according to <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>. If both prospective arguments to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> correspond to non-existent properties, use <emu-val>+0</emu-val> instead of calling <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>. If only the first prospective argument is non-existent use +1. If only the second prospective argument is non-existent use -1.</li><li>If <var>obj</var> is not sparse then <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref> must not be called.</li><li>If an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> is returned from any of these operations, it is immediately returned as the value of this function.</li></ul></li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        <p>Unless the sort order is specified above to be implementation-defined, the returned object must have the following two characteristics:</p>\n        <ul>\n          <li>\n            There must be some mathematical permutation &#960; of the nonnegative integers less than <var>len</var>, such that for every nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> less than <var>len</var>, if property <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> existed, then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn> is exactly the same value as <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn>. But if property <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> did not exist, then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn> does not exist.\n          </li>\n          <li>\n            Then for all nonnegative integers <var>j</var> and <var>k</var>, each less than <var>len</var>, if <emu-eqn class=\"inline\"><emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>(old[<var>j</var>], old[<var>k</var>]) &lt; 0</emu-eqn> (see <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> below), then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)] &lt; new[&#960;(<var>k</var>)]</emu-eqn>.\n          </li>\n        </ul>\n        <p>Here the notation <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is used to refer to the hypothetical result of calling <emu-eqn class=\"inline\"><emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>j</var>)</emu-eqn> before this function is executed, and the notation <emu-eqn class=\"inline\">new[<var>j</var>]</emu-eqn> to refer to the hypothetical result of calling <emu-eqn class=\"inline\"><emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>j</var>)</emu-eqn> after this function has been executed.</p>\n        <p>A function <var>comparefn</var> is a consistent comparison function for a set of values <var>S</var> if all of the requirements below are met for all values <var>a</var>, <var>b</var>, and <var>c</var> (possibly the same value) in the set <var>S</var>: The notation <emu-eqn class=\"inline\"><var>a</var> &lt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &lt; 0</emu-eqn>; <emu-eqn class=\"inline\"><var>a</var> =<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) = 0</emu-eqn> (of either sign); and <emu-eqn class=\"inline\"><var>a</var> &gt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &gt; 0</emu-eqn>.</p>\n        <ul>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) always returns the same value <var>v</var> when given a specific pair of values <var>a</var> and <var>b</var> as its two arguments. Furthermore, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, and <var>v</var> is not <emu-val>NaN</emu-val>. Note that this implies that exactly one of <var>a</var> &lt;<sub>CF</sub> <var>b</var>, <var>a</var> =<sub>CF</sub> <var>b</var>, and <var>a</var> &gt;<sub>CF</sub> <var>b</var> will be true for a given pair of <var>a</var> and <var>b</var>.\n          </li>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) does not modify <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            <var>a</var> =<sub>CF</sub> <var>a</var> (reflexivity)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var>, then <var>b</var> =<sub>CF</sub> <var>a</var> (symmetry)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var> and <var>b</var> =<sub>CF</sub> <var>c</var>, then <var>a</var> =<sub>CF</sub> <var>c</var> (transitivity of =<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &lt;<sub>CF</sub> <var>b</var> and <var>b</var> &lt;<sub>CF</sub> <var>c</var>, then <var>a</var> &lt;<sub>CF</sub> <var>c</var> (transitivity of &lt;<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &gt;<sub>CF</sub> <var>b</var> and <var>b</var> &gt;<sub>CF</sub> <var>c</var>, then <var>a</var> &gt;<sub>CF</sub> <var>c</var> (transitivity of &gt;<sub>CF</sub>)\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The above conditions are necessary and sufficient to ensure that <var>comparefn</var> divides the set <var>S</var> into equivalence classes and that these equivalence classes are totally ordered.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>sort</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-sortcompare\"><h1><span class=\"secnum\">22.1.3.27.1</span>#sec-sortcompare Runtime Semantics: SortCompare ( x, y )</h1>...</div></emu-clause>\n\n      "}, "sec-math.acos": {"num": "20.3.2.2", "title": "#sec-math.acos Math.acos ( x )", "html": "<emu-clause id=\"sec-math.acos\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.acos\">#sec-math.acos</span> Math.acos ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the arc cosine of <var>x</var>. The result is expressed in radians and ranges from <emu-val>+0</emu-val> to +&#960;.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is greater than 1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than -1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is exactly 1, the result is <emu-val>+0</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-error-handling-and-language-extensions": {"num": "16", "title": "#sec-error-handling-and-language-extensions Error Handling and Language Extensions", "html": "<emu-clause id=\"sec-error-handling-and-language-extensions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</span> Error Handling and Language Extensions</h1>\n  <p>An implementation must report most errors at the time the relevant ECMAScript language construct is evaluated. An <dfn id=\"early-error\">early error</dfn> is an error that can be detected and reported prior to the evaluation of any construct in the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> containing the error. The presence of an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> prevents the evaluation of the construct. An implementation must report early errors in a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> as part of parsing that <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> in <emu-xref aoid=\"ParseScript\"><a href=\"#sec-parse-script\">ParseScript</a></emu-xref>. Early errors in a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> are reported at the point when the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> would be evaluated and the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is never initialized. Early errors in <b>eval</b> code are reported at the time <code>eval</code> is called and prevent evaluation of the <b>eval</b> code. All errors that are not early errors are runtime errors.</p>\n  <p>An implementation must report as an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> any occurrence of a condition that is listed in a &#8220;Static Semantics: Early Errors&#8221; subclause of this specification.</p>\n  <p>An implementation shall not treat other kinds of errors as early errors even if the compiler can prove that a construct cannot execute without error under any circumstances. An implementation may issue an early warning in such a case, but it should not report the error until the relevant construct is actually executed.</p>\n  <p>An implementation shall report all errors as specified, except for the following:</p>\n  <ul>\n    <li>\n      Except as restricted in <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>, an implementation may extend <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> syntax, <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> syntax, and regular expression pattern or flag syntax. To permit this, all operations (such as calling <code>eval</code>, using a regular expression literal, or using the Function or RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>) that are allowed to throw <emu-val>SyntaxError</emu-val> are permitted to exhibit implementation-defined behaviour instead of throwing <emu-val>SyntaxError</emu-val> when they encounter an implementation-defined extension to the script syntax or regular expression pattern or flag syntax.\n    </li>\n    <li>\n      Except as restricted in <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>, an implementation may provide additional types, values, objects, properties, and functions beyond those described in this specification. This may cause constructs (such as looking up a variable in the global scope) to have implementation-defined behaviour instead of throwing an error (such as <emu-val>ReferenceError</emu-val>).\n    </li>\n  </ul>\n\n  <div id=\"excluded-sec-forbidden-extensions\"><h1><span class=\"secnum\">16.1</span>#sec-forbidden-extensions Forbidden Extensions</h1>...</div></emu-clause>\n\n"}, "sec-math.random": {"num": "20.3.2.27", "title": "#sec-math.random Math.random ( )", "html": "<emu-clause id=\"sec-math.random\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.random\">#sec-math.random</span> Math.random ( )</h1>\n        <p>Returns a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> with positive sign, greater than or equal to 0 but less than 1, chosen randomly or pseudo randomly with approximately uniform distribution over that range, using an implementation-dependent algorithm or strategy. This function takes no arguments.</p>\n        <p>Each <code>Math.random</code> function created for distinct realms must produce a distinct sequence of values from successive calls.</p>\n      </emu-clause>\n\n      "}, "sec-detacharraybuffer": {"num": "24.1.2.3", "title": "#sec-detacharraybuffer DetachArrayBuffer ( arrayBuffer [ , key ] )", "html": "<emu-clause id=\"sec-detacharraybuffer\" aoid=\"DetachArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-detacharraybuffer\">#sec-detacharraybuffer</span> DetachArrayBuffer ( <var>arrayBuffer</var> [ , <var>key</var> ] )</h1>\n        <p>The abstract operation DetachArrayBuffer takes argument <var>arrayBuffer</var> and optional argument <var>key</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>arrayBuffer</var>) is Object and it has [[ArrayBufferData]], [[ArrayBufferByteLength]], and [[ArrayBufferDetachKey]] internal slots.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li>If <var>key</var> is not present, set <var>key</var> to <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>arrayBuffer</var>.[[ArrayBufferDetachKey]], <var>key</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferData]] to <emu-val>null</emu-val>.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferByteLength]] to 0.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Detaching an ArrayBuffer instance disassociates the <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref> used as its backing store from the instance and sets the byte length of the buffer to 0. No operations defined by this specification use the DetachArrayBuffer abstract operation. However, an ECMAScript implementation or host environment may define such operations.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-parse-script": {"num": "15.1.9", "title": "#sec-parse-script ParseScript ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parse-script\" aoid=\"ParseScript\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parse-script\">#sec-parse-script</span> ParseScript ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n      <p>The abstract operation ParseScript takes arguments <var>sourceText</var>, <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Parse <var>sourceText</var> using <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and analyse the parse result for any Early Error conditions. If the parse was successful and no early errors were found, let <var>body</var> be the resulting parse tree. Otherwise, let <var>body</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of one or more <emu-val>SyntaxError</emu-val> objects representing the parsing errors and/or early errors. Parsing and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> detection may be interweaved in an implementation-dependent manner. If more than one parsing error or <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> is present, the number and ordering of error objects in the list is implementation-dependent, but at least one must be present.</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Return <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[ECMAScriptCode]]: <var>body</var>, [[HostDefined]]: <var>hostDefined</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An implementation may parse script source text and analyse it for Early Error conditions prior to evaluation of ParseScript for that script source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseScript upon that source text.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-additional-ecmascript-features-for-web-browsers": {"num": "B", "title": "#sec-additional-ecmascript-features-for-web-browsers Additional ECMAScript Features for Web rowsers", "html": "<emu-annex id=\"sec-additional-ecmascript-features-for-web-browsers\" namespace=\"annexB\" normative=\"\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-ecmascript-features-for-web-browsers\">#sec-additional-ecmascript-features-for-web-browsers</span> Additional ECMAScript Features for Web Browsers</h1>\n  <p>The ECMAScript language syntax and semantics defined in this annex are required when the ECMAScript host is a web browser. The content of this annex is normative but optional if the ECMAScript host is not a web browser.</p>\n  <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n    <p>This annex describes various legacy features and other characteristics of web browser based ECMAScript implementations. All of the language features and behaviours specified in this annex have one or more undesirable characteristics and in the absence of legacy usage would be removed from this specification. However, the usage of these features by large numbers of existing web pages means that web browsers must continue to support them. The specifications in this annex define the requirements for interoperable implementations of these legacy features.</p>\n    <p>These features are not considered part of the core ECMAScript language. Programmers should not use or assume the existence of these features and behaviours when writing new ECMAScript code. ECMAScript implementations are discouraged from implementing these features unless the implementation is part of a web browser or is required to run the same legacy ECMAScript code that web browsers encounter.</p>\n  </div></emu-note>\n\n  <div id=\"excluded-sec-additional-syntax\"><h1><span class=\"secnum\">B.1</span>#sec-additional-syntax Additional Syntax</h1>...</div><div id=\"excluded-sec-additional-built-in-properties\"><h1><span class=\"secnum\">B.2</span>#sec-additional-built-in-properties Additional Built-in Properties</h1>...</div><div id=\"excluded-sec-other-additional-features\"><h1><span class=\"secnum\">B.3</span>#sec-other-additional-features Other Additional Features</h1>...</div></emu-annex>\n\n"}, "sec-math.cos": {"num": "20.3.2.12", "title": "#sec-math.cos Math.cos ( x )", "html": "<emu-clause id=\"sec-math.cos\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.cos\">#sec-math.cos</span> Math.cos ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the cosine of <var>x</var>. The argument is expressed in radians.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-web-scripting": {"num": "4.1", "title": "#sec-web-scripting Web Scripting", "html": "<emu-clause id=\"sec-web-scripting\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-scripting\">#sec-web-scripting</span> Web Scripting</h1>\n    <p>A web browser provides an ECMAScript host environment for client-side computation including, for instance, objects that represent windows, menus, pop-ups, dialog boxes, text areas, anchors, frames, history, cookies, and input/output. Further, the host environment provides a means to attach scripting code to events such as change of focus, page and image loading, unloading, error and abort, selection, form submission, and mouse actions. Scripting code appears within the HTML and the displayed page is a combination of user interface elements and fixed and computed text and images. The scripting code is reactive to user interaction, and there is no need for a main program.</p>\n    <p>A web server provides a different host environment for server-side computation including objects representing requests, clients, and files; and mechanisms to lock and share data. By using browser-side and server-side scripting together, it is possible to distribute computation between the client and server while providing a customized user interface for a Web-based application.</p>\n    <p>Each Web browser and server that supports ECMAScript supplies its own host environment, completing the ECMAScript execution environment.</p>\n  </emu-clause>\n\n  "}, "sec-math.log": {"num": "20.3.2.20", "title": "#sec-math.log Math.log ( x )", "html": "<emu-clause id=\"sec-math.log\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log\">#sec-math.log</span> Math.log ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the natural logarithm of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than 0, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val> or <emu-val>-0</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is 1, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-math.asinh": {"num": "20.3.2.5", "title": "#sec-math.asinh Math.asinh ( x )", "html": "<emu-clause id=\"sec-math.asinh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.asinh\">#sec-math.asinh</span> Math.asinh ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the inverse hyperbolic sine of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If x is <emu-val>-&#8734;</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-global-object": {"num": "18", "title": "#sec-global-object The Global Object", "html": "<emu-clause id=\"sec-global-object\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-object\">#sec-global-object</span> The Global Object</h1>\n  <p>The <dfn>global object</dfn>:</p>\n  <ul>\n    <li>is created before control enters any <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li>\n    <li>does not have a [[Construct]] internal method; it cannot be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> with the <code>new</code> operator.</li>\n    <li>does not have a [[Call]] internal method; it cannot be invoked as a function.</li>\n    <li>has a [[Prototype]] internal slot whose value is implementation-dependent.</li>\n    <li>may have host defined properties in addition to the properties defined in this specification. This may include a property whose value is the global object itself.</li>\n  </ul>\n\n  <div id=\"excluded-sec-value-properties-of-the-global-object\"><h1><span class=\"secnum\">18.1</span>#sec-value-properties-of-the-global-object Value Properties of the Global Object</h1>...</div><div id=\"excluded-sec-function-properties-of-the-global-object\"><h1><span class=\"secnum\">18.2</span>#sec-function-properties-of-the-global-object Function Properties of the Global Object</h1>...</div><div id=\"excluded-sec-constructor-properties-of-the-global-object\"><h1><span class=\"secnum\">18.3</span>#sec-constructor-properties-of-the-global-object Constructor Properties of the Global Object</h1>...</div><div id=\"excluded-sec-other-properties-of-the-global-object\"><h1><span class=\"secnum\">18.4</span>#sec-other-properties-of-the-global-object Other Properties of the Global Object</h1>...</div></emu-clause>\n\n"}, "sec-local-time-zone-adjustment": {"num": "20.4.1.7", "title": "#sec-local-time-zone-adjustment LocalTZA ( t, isUTC )", "html": "<emu-clause id=\"sec-local-time-zone-adjustment\" aoid=\"LocalTZA\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-local-time-zone-adjustment\">#sec-local-time-zone-adjustment</span> LocalTZA ( <var>t</var>, <var>isUTC</var> )</h1>\n        <p>LocalTZA( <var>t</var>, <var>isUTC</var> ) is an implementation-defined algorithm that returns the local time zone adjustment, or offset, in milliseconds. The local political rules for standard time and daylight saving time in effect at <var>t</var> should be used to determine the result in the way specified in this section.</p>\n        <p>When <var>isUTC</var> is true, <emu-eqn class=\"inline\">LocalTZA( <var>t</var><sub>UTC</sub>, true )</emu-eqn> should return the offset of the local time zone from UTC measured in milliseconds at time represented by <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn>. When the result is added to <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn>, it should yield the corresponding Number <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn>.</p>\n        <p>When <var>isUTC</var> is false, <emu-eqn class=\"inline\">LocalTZA( <var>t</var><sub>local</sub>, false )</emu-eqn> should return the offset of the local time zone from UTC measured in milliseconds at local time represented by Number <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn>. When the result is subtracted from <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn>, it should yield the corresponding <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn>.</p>\n        <p>Input <var>t</var> is nominally a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> but may be any <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>. This can occur when <var>isUTC</var> is false and <var>t</var><sub>local</sub> represents a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> that is already offset outside of the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range at the range boundaries. The algorithm must not limit <var>t</var><sub>local</sub> to the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range, so that such inputs are supported.</p>\n        <p>When <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn> represents local time repeating multiple times at a negative time zone transition (e.g. when the daylight saving time ends or the time zone offset is decreased due to a time zone rule change) or skipped local time at a positive time zone transitions (e.g. when the daylight saving time starts or the time zone offset is increased due to a time zone rule change), <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn> must be interpreted using the time zone offset before the transition.</p>\n        <p>If an implementation does not support a conversion described above or if political rules for time <var>t</var> are not available within the implementation, the result must be 0.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>It is recommended that implementations use the time zone information of the IANA Time Zone Database <a href=\"https://www.iana.org/time-zones/\">https://www.iana.org/time-zones/</a>.</p>\n          <p>1:30 AM on November 5, 2017 in America/New_York is repeated twice (fall backward), but it must be interpreted as 1:30 AM UTC-04 instead of 1:30 AM UTC-05. LocalTZA(<emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref>(<emu-xref aoid=\"MakeDate\"><a href=\"#sec-makedate\">MakeDate</a></emu-xref>(<emu-xref aoid=\"MakeDay\"><a href=\"#sec-makeday\">MakeDay</a></emu-xref>(2017, 10, 5), <emu-xref aoid=\"MakeTime\"><a href=\"#sec-maketime\">MakeTime</a></emu-xref>(1, 30, 0, 0))), false) is <emu-eqn class=\"inline\">-4 &#215; <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref></emu-eqn>.</p>\n          <p>2:30 AM on March 12, 2017 in America/New_York does not exist, but it must be interpreted as 2:30 AM UTC-05 (equivalent to 3:30 AM UTC-04). LocalTZA(<emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref>(<emu-xref aoid=\"MakeDate\"><a href=\"#sec-makedate\">MakeDate</a></emu-xref>(<emu-xref aoid=\"MakeDay\"><a href=\"#sec-makeday\">MakeDay</a></emu-xref>(2017, 2, 12), <emu-xref aoid=\"MakeTime\"><a href=\"#sec-maketime\">MakeTime</a></emu-xref>(2, 30, 0, 0))), false) is <emu-eqn class=\"inline\">-5 &#215; <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref></emu-eqn>.</p>\n          <p>Local time zone offset values may be positive <i>or</i> negative.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-initializehostdefinedrealm": {"num": "8.5", "title": "#sec-initializehostdefinedrealm InitializeHostDefinedRealm ( )", "html": "<emu-clause id=\"sec-initializehostdefinedrealm\" aoid=\"InitializeHostDefinedRealm\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializehostdefinedrealm\">#sec-initializehostdefinedrealm</span> InitializeHostDefinedRealm ( )</h1>\n    <p>The abstract operation InitializeHostDefinedRealm takes no arguments. It performs the following steps when called:</p>\n\n    <emu-alg><ol><li>Let <var>realm</var> be <emu-xref aoid=\"CreateRealm\"><a href=\"#sec-createrealm\">CreateRealm</a></emu-xref>().</li><li>Let <var>newContext</var> be a new <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>newContext</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>newContext</var> to <var>realm</var>.</li><li>Set the ScriptOrModule of <var>newContext</var> to <emu-val>null</emu-val>.</li><li>Push <var>newContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>newContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If the host requires use of an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> to serve as <var>realm</var>'s <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, let <var>global</var> be such an object created in an implementation-defined manner. Otherwise, let <var>global</var> be <emu-val>undefined</emu-val>, indicating that an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> should be created as the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li><li>If the host requires that the <code>this</code> binding in <var>realm</var>'s global scope return an object other than the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, let <var>thisValue</var> be such an object created in an implementation-defined manner. Otherwise, let <var>thisValue</var> be <emu-val>undefined</emu-val>, indicating that <var>realm</var>'s global <code>this</code> binding should be the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li><li>Perform <emu-xref aoid=\"SetRealmGlobalObject\"><a href=\"#sec-setrealmglobalobject\">SetRealmGlobalObject</a></emu-xref>(<var>realm</var>, <var>global</var>, <var>thisValue</var>).</li><li>Let <var>globalObj</var> be ?&#160;<emu-xref aoid=\"SetDefaultGlobalBindings\"><a href=\"#sec-setdefaultglobalbindings\">SetDefaultGlobalBindings</a></emu-xref>(<var>realm</var>).</li><li>Create any implementation-defined <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> properties on <var>globalObj</var>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-math.tan": {"num": "20.3.2.33", "title": "#sec-math.tan Math.tan ( x )", "html": "<emu-clause id=\"sec-math.tan\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.tan\">#sec-math.tan</span> Math.tan ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the tangent of <var>x</var>. The argument is expressed in radians.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val> or <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-math.asin": {"num": "20.3.2.4", "title": "#sec-math.asin Math.asin ( x )", "html": "<emu-clause id=\"sec-math.asin\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.asin\">#sec-math.asin</span> Math.asin ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the arc sine of <var>x</var>. The result is expressed in radians and ranges from -&#960; / 2 to +&#960; / 2.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is greater than 1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than -1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-hostenqueuepromisejob": {"num": "8.4.1", "title": "#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )", "html": "<emu-clause id=\"sec-hostenqueuepromisejob\" aoid=\"HostEnqueuePromiseJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostenqueuepromisejob\">#sec-hostenqueuepromisejob</span> HostEnqueuePromiseJob ( <var>job</var>, <var>realm</var> )</h1>\n      <p>HostEnqueuePromiseJob is a host-defined abstract operation that schedules the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> <var>job</var> to be performed, at some future time. The Abstract Closures used with this algorithm are intended to be related to the handling of Promises, or otherwise, to be scheduled with equal priority to Promise handling operations.</p>\n      <p>The <var>realm</var> parameter is passed through to hosts with no normative requirements; it is either <emu-val>null</emu-val> or a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</p>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        The <var>realm</var> for PromiseResolveThenableJobs is the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the <var>then</var> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The <var>realm</var> for PromiseReactionJobs is the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the handler if the handler is not <emu-val>undefined</emu-val>. Otherwise the <var>realm</var> is <emu-val>null</emu-val>. The WHATWG HTML specification, for example, uses <var>realm</var> to check for ability to run script and to prepare to run script.\n      </div></emu-note>\n\n      <p>The implementation of HostEnqueuePromiseJob must conform to the requirements in <emu-xref href=\"#sec-jobs\"><a href=\"#sec-jobs\" class=\"excluded-xref\" excluded-id=\"sec-jobs\">#sec-jobs</a></emu-xref>. Additionally, Jobs must be scheduled in FIFO order, with Jobs running in the same order as the HostEnqueuePromiseJob invocations which scheduled them.</p>\n    </emu-clause>\n  "}, "sec-nativeerror-object-structure": {"num": "19.5.6", "title": "#sec-nativeerror-object-structure NativeError Object Structure", "html": "<emu-clause id=\"sec-nativeerror-object-structure\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-nativeerror-object-structure\">#sec-nativeerror-object-structure</span> <var>NativeError</var> Object Structure</h1>\n      <p>When an ECMAScript implementation detects a runtime error, it throws a new instance of one of the <var>NativeError</var> objects defined in <emu-xref href=\"#sec-native-error-types-used-in-this-standard\"><a href=\"#sec-native-error-types-used-in-this-standard\" class=\"excluded-xref\" excluded-id=\"sec-native-error-types-used-in-this-standard\">#sec-native-error-types-used-in-this-standard</a></emu-xref>. Each of these objects has the structure described below, differing only in the name used as the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> name instead of <var>NativeError</var>, in the <emu-val>\"name\"</emu-val> property of the prototype object, and in the implementation-defined <emu-val>\"message\"</emu-val> property of the prototype object.</p>\n      <p>For each error object, references to <var>NativeError</var> in the definition should be replaced with the appropriate error object name from <emu-xref href=\"#sec-native-error-types-used-in-this-standard\"><a href=\"#sec-native-error-types-used-in-this-standard\" class=\"excluded-xref\" excluded-id=\"sec-native-error-types-used-in-this-standard\">#sec-native-error-types-used-in-this-standard</a></emu-xref>.</p>\n\n      <div id=\"excluded-sec-nativeerror-constructors\"><h1><span class=\"secnum\">19.5.6.1</span>#sec-nativeerror-constructors The NativeError Constructors</h1>...</div><div id=\"excluded-sec-properties-of-the-nativeerror-constructors\"><h1><span class=\"secnum\">19.5.6.2</span>#sec-properties-of-the-nativeerror-constructors Properties of the NativeError Constructors</h1>...</div><div id=\"excluded-sec-properties-of-the-nativeerror-prototype-objects\"><h1><span class=\"secnum\">19.5.6.3</span>#sec-properties-of-the-nativeerror-prototype-objects Properties of the NativeError Prototype Objects</h1>...</div><div id=\"excluded-sec-properties-of-nativeerror-instances\"><h1><span class=\"secnum\">19.5.6.4</span>#sec-properties-of-nativeerror-instances Properties of NativeError Instances</h1>...</div></emu-clause>\n  "}, "sec-hostfinalizeimportmeta": {"num": "12.3.12.1.2", "title": "#sec-hostfinalizeimportmeta Runtime Semantics: HostFinalizeImportMeta ( importMeta, moduleRecord )", "html": "<emu-clause id=\"sec-hostfinalizeimportmeta\" aoid=\"HostFinalizeImportMeta\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostfinalizeimportmeta\">#sec-hostfinalizeimportmeta</span> Runtime Semantics: HostFinalizeImportMeta ( <var>importMeta</var>, <var>moduleRecord</var> )</h1>\n          <p>HostFinalizeImportMeta is an implementation-defined abstract operation that allows hosts to perform any extraordinary operations to prepare the object returned from <code>import.meta</code>.</p>\n\n          <p>Most hosts will be able to simply define <emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>, and leave HostFinalizeImportMeta with its default behaviour. However, HostFinalizeImportMeta provides an \"escape hatch\" for hosts which need to directly manipulate the object before it is exposed to ECMAScript code.</p>\n\n          <p>The implementation of HostFinalizeImportMeta must conform to the following requirements:</p>\n          <ul>\n            <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostFinalizeImportMeta is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n        </emu-clause>\n      "}, "sec-createdynamicfunction": {"num": "19.2.1.1.1", "title": "#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> Runtime Semantics: CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (either <emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Generator%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGenerator%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1,<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Let <var>sourceText</var> be !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>sourceString</var>).</li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>parameters</var> be the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>P</var>), using <var>parameterGoal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>body</var> be the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>bodyString</var>), using <var>goal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>strict</var> be ContainsUseStrict of <var>body</var>.</li><li>If any <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> errors are detected for <var>parameters</var> or <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception. If <var>strict</var> is <emu-val>true</emu-val>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> are applied.</li><li>If <var>strict</var> is <emu-val>true</emu-val> and IsSimpleParameterList of <var>parameters</var> is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If any element of the BoundNames of <var>parameters</var> also occurs in the LexicallyDeclaredNames of <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>kind</var> is <emu-const>generator</emu-const> or <emu-const>asyncGenerator</emu-const>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>kind</var> is <emu-const>async</emu-const> or <emu-const>asyncGenerator</emu-const>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>If BoundNames of <var>parameters</var> contains any duplicate elements, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li></ol></li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>sourceText</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Functions whose <var>kind</var> is <emu-const>async</emu-const> are not constructible and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>CreateDynamicFunction defines a <emu-val>\"prototype\"</emu-val> property on any function it creates whose <var>kind</var> is not <emu-const>async</emu-const> to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function SourceText Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function SourceText Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><emu-const>normal</emu-const></td><td><emu-val>\"function\"</emu-val></td></tr>\n                <tr><td><emu-const>generator</emu-const></td><td><emu-val>\"function*\"</emu-val></td></tr>\n                <tr><td><emu-const>async</emu-const></td><td><emu-val>\"async function\"</emu-val></td></tr>\n                <tr><td><emu-const>asyncGenerator</emu-const></td><td><emu-val>\"async function*\"</emu-val></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-date.prototype.tolocaledatestring": {"num": "20.4.4.38", "title": "#sec-date.prototype.tolocaledatestring Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-date.prototype.tolocaledatestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.tolocaledatestring\">#sec-date.prototype.tolocaledatestring</span> Date.prototype.toLocaleDateString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>Date.prototype.toLocaleDateString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleDateString</code> method is used.</p>\n        <p>This function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the &#8220;date&#8221; portion of the Date in the current time zone in a convenient, human-readable form that corresponds to the conventions of the host environment's current locale.</p>\n        <p>The meaning of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n      </emu-clause>\n\n      "}, "sec-overview": {"num": "4", "title": "#sec-overview Overview", "html": "<emu-clause id=\"sec-overview\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-overview\">#sec-overview</span> Overview</h1>\n  <p>This section contains a non-normative overview of the ECMAScript language.</p>\n  <p>ECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a host environment. ECMAScript as defined here is not intended to be computationally self-sufficient; indeed, there are no provisions in this specification for input of external data or output of computed results. Instead, it is expected that the computational environment of an ECMAScript program will provide not only the objects and other facilities described in this specification but also certain environment-specific objects, whose description and behaviour are beyond the scope of this specification except to indicate that they may provide certain properties that can be accessed and certain functions that can be called from an ECMAScript program.</p>\n  <p>ECMAScript was originally designed to be used as a scripting language, but has become widely used as a general-purpose programming language. A <em>scripting language</em> is a programming language that is used to manipulate, customize, and automate the facilities of an existing system. In such systems, useful functionality is already available through a user interface, and the scripting language is a mechanism for exposing that functionality to program control. In this way, the existing system is said to provide a host environment of objects and facilities, which completes the capabilities of the scripting language. A scripting language is intended for use by both professional and non-professional programmers.</p>\n  <p>ECMAScript was originally designed to be a <em>Web scripting language</em>, providing a mechanism to enliven Web pages in browsers and to perform server computation as part of a Web-based client-server architecture. ECMAScript is now used to provide core scripting capabilities for a variety of host environments. Therefore the core language is specified in this document apart from any particular host environment.</p>\n  <p>ECMAScript usage has moved beyond simple scripting and it is now used for the full spectrum of programming tasks in many different environments and scales. As the usage of ECMAScript has expanded, so have the features and facilities it provides. ECMAScript is now a fully featured general-purpose programming language.</p>\n  <p>Some of the facilities of ECMAScript are similar to those used in other programming languages; in particular C, Java&#8482;, Self, and Scheme as described in:</p>\n  <p>ISO/IEC 9899:1996, <i>Programming Languages &#8212; C</i>.</p>\n  <p>Gosling, James, Bill Joy and Guy Steele. <i>The Java<sup>&#8482;</sup> Language Specification</i>. Addison Wesley Publishing Co., 1996.</p>\n  <p>Ungar, David, and Smith, Randall B. Self: The Power of Simplicity. <i>OOPSLA '87 Conference Proceedings</i>, pp. 227-241, Orlando, FL, October 1987.</p>\n  <p><i>IEEE Standard for the Scheme Programming Language</i>. IEEE Std 1178-1990.</p>\n\n  <div id=\"excluded-sec-web-scripting\"><h1><span class=\"secnum\">4.1</span>#sec-web-scripting Web Scripting</h1>...</div><div id=\"excluded-sec-ecmascript-overview\"><h1><span class=\"secnum\">4.2</span>#sec-ecmascript-overview ECMAScript Overview</h1>...</div><div id=\"excluded-sec-terms-and-definitions\"><h1><span class=\"secnum\">4.3</span>#sec-terms-and-definitions Terms and Definitions</h1>...</div><div id=\"excluded-sec-organization-of-this-specification\"><h1><span class=\"secnum\">4.4</span>#sec-organization-of-this-specification Organization of This Specification</h1>...</div></emu-clause>\n\n"}, "sec-math.hypot": {"num": "20.3.2.18", "title": "#sec-math.hypot Math.hypot ( value1, value2, ...values )", "html": "<emu-clause id=\"sec-math.hypot\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.hypot\">#sec-math.hypot</span> Math.hypot ( <var>value1</var>, <var>value2</var>, ...<var>values</var> )</h1>\n        <p><code>Math.hypot</code> returns an implementation-dependent approximation of the square root of the sum of squares of its arguments.</p>\n        <ul>\n          <li>\n            If no arguments are passed, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If any argument is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If any argument is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If no argument is <emu-val>+&#8734;</emu-val> or <emu-val>-&#8734;</emu-val>, and any argument is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If all arguments are either <emu-val>+0</emu-val> or <emu-val>-0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Implementations should take care to avoid the loss of precision from overflows and underflows that are prone to occur in naive implementations when this function is called with two or more arguments.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.atan2": {"num": "20.3.2.8", "title": "#sec-math.atan2 Math.atan2 ( y, x )", "html": "<emu-clause id=\"sec-math.atan2\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.atan2\">#sec-math.atan2</span> Math.atan2 ( <var>y</var>, <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the arc tangent of the quotient <emu-eqn class=\"inline\"><var>y</var> / <var>x</var></emu-eqn> of the arguments <var>y</var> and <var>x</var>, where the signs of <var>y</var> and <var>x</var> are used to determine the quadrant of the result. Note that it is intentional and traditional for the two-argument arc tangent function that the argument named <var>y</var> be first and the argument named <var>x</var> be second. The result is expressed in radians and ranges from -&#960; to +&#960;.</p>\n        <ul>\n          <li>\n            If either <var>x</var> or <var>y</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> &gt; 0 and <var>x</var> is <emu-val>+0</emu-val>, the result is an implementation-dependent approximation to +&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> &gt; 0 and <var>x</var> is <emu-val>-0</emu-val>, the result is an implementation-dependent approximation to +&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+0</emu-val> and <var>x</var> &gt; 0, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+0</emu-val> and <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+0</emu-val> and <var>x</var> is <emu-val>-0</emu-val>, the result is an implementation-dependent approximation to +&#960;.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+0</emu-val> and <var>x</var> &lt; 0, the result is an implementation-dependent approximation to +&#960;.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-0</emu-val> and <var>x</var> &gt; 0, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-0</emu-val> and <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-0</emu-val> and <var>x</var> is <emu-val>-0</emu-val>, the result is an implementation-dependent approximation to -&#960;.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-0</emu-val> and <var>x</var> &lt; 0, the result is an implementation-dependent approximation to -&#960;.\n          </li>\n          <li>\n            If <var>y</var> &lt; 0 and <var>x</var> is <emu-val>+0</emu-val>, the result is an implementation-dependent approximation to -&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> &lt; 0 and <var>x</var> is <emu-val>-0</emu-val>, the result is an implementation-dependent approximation to -&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> &gt; 0 and <var>y</var> is finite and <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> &gt; 0 and <var>y</var> is finite and <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is an implementation-dependent approximation to +&#960;.\n          </li>\n          <li>\n            If <var>y</var> &lt; 0 and <var>y</var> is finite and <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> &lt; 0 and <var>y</var> is finite and <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is an implementation-dependent approximation to -&#960;.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+&#8734;</emu-val> and <var>x</var> is finite, the result is an implementation-dependent approximation to +&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-&#8734;</emu-val> and <var>x</var> is finite, the result is an implementation-dependent approximation to -&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+&#8734;</emu-val> and <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is an implementation-dependent approximation to +&#960; / 4.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+&#8734;</emu-val> and <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is an implementation-dependent approximation to +3&#960; / 4.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-&#8734;</emu-val> and <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is an implementation-dependent approximation to -&#960; / 4.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-&#8734;</emu-val> and <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is an implementation-dependent approximation to -3&#960; / 4.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-IsHTMLDDA-internal-slot": {"num": "B.3.7", "title": "#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot\">#sec-IsHTMLDDA-internal-slot</span> The [[IsHTMLDDA]] Internal Slot</h1>\n      <p>An <dfn>[[IsHTMLDDA]] internal slot</dfn> may exist on implementation-defined objects. Objects with an [[IsHTMLDDA]] internal slot behave like <emu-val>undefined</emu-val> in the <emu-xref href=\"#sec-toboolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref> and <emu-xref href=\"#sec-abstract-equality-comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and when used as an operand for the <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code> operator</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Objects with an [[IsHTMLDDA]] internal slot are never created by this specification. However, the <a href=\"https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all\"><code>document.all</code> object</a> in web browsers is a host-created <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> with this slot that exists for web compatibility purposes. There are no other known examples of this type of object and implementations should not create any with the exception of <code>document.all</code>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-IsHTMLDDA-internal-slot-to-boolean\"><h1><span class=\"secnum\">B.3.7.1</span>#sec-IsHTMLDDA-internal-slot-to-boolean Changes to ToBoolean</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-aec\"><h1><span class=\"secnum\">B.3.7.2</span>#sec-IsHTMLDDA-internal-slot-aec Changes to Abstract Equality Comparison</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-typeof\"><h1><span class=\"secnum\">B.3.7.3</span>#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator</h1>...</div></emu-annex>\n  "}, "sec-parsemodule": {"num": "15.2.1.17.1", "title": "#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parsemodule\" aoid=\"ParseModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsemodule\">#sec-parsemodule</span> ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n          <p>The abstract operation ParseModule takes arguments <var>sourceText</var> (ECMAScript source text), <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Parse <var>sourceText</var> using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and analyse the parse result for any Early Error conditions. If the parse was successful and no early errors were found, let <var>body</var> be the resulting parse tree. Otherwise, let <var>body</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of one or more <emu-val>SyntaxError</emu-val> objects representing the parsing errors and/or early errors. Parsing and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> detection may be interweaved in an implementation-dependent manner. If more than one parsing error or <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> is present, the number and ordering of error objects in the list is implementation-dependent, but at least one must be present.</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Let <var>requestedModules</var> be the ModuleRequests of <var>body</var>.</li><li>Let <var>importEntries</var> be ImportEntries of <var>body</var>.</li><li>Let <var>importedBoundNames</var> be <emu-xref aoid=\"ImportedLocalNames\"><a href=\"#sec-importedlocalnames\">ImportedLocalNames</a></emu-xref>(<var>importEntries</var>).</li><li>Let <var>indirectExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>localExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>starExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>exportEntries</var> be ExportEntries of <var>body</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>ee</var> in <var>exportEntries</var>, do<ol><li>If <var>ee</var>.[[ModuleRequest]] is <emu-val>null</emu-val>, then<ol><li>If <var>ee</var>.[[LocalName]] is not an element of <var>importedBoundNames</var>, then<ol><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>Let <var>ie</var> be the element of <var>importEntries</var> whose [[LocalName]] is the same as <var>ee</var>.[[LocalName]].</li><li>If <var>ie</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>NOTE: This is a re-export of an imported module namespace object.</li><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>NOTE: This is a re-export of a single name.</li><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>ie</var>.[[ModuleRequest]], [[ImportName]]: <var>ie</var>.[[ImportName]], [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>ee</var>.[[ExportName]] } to <var>indirectExportEntries</var>.</li></ol></li></ol></li></ol></li><li>Else if <var>ee</var>.[[ImportName]] is <emu-val>\"*\"</emu-val> and <var>ee</var>.[[ExportName]] is <emu-val>null</emu-val>, then<ol><li>Append <var>ee</var> to <var>starExportEntries</var>.</li></ol></li><li>Else,<ol><li>Append <var>ee</var> to <var>indirectExportEntries</var>.</li></ol></li></ol></li><li>Return <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[Namespace]]: <emu-val>undefined</emu-val>, [[Status]]: <emu-const>unlinked</emu-const>, [[EvaluationError]]: <emu-val>undefined</emu-val>, [[HostDefined]]: <var>hostDefined</var>, [[ECMAScriptCode]]: <var>body</var>, [[Context]]: <emu-const>empty</emu-const>, [[ImportMeta]]: <emu-const>empty</emu-const>, [[RequestedModules]]: <var>requestedModules</var>, [[ImportEntries]]: <var>importEntries</var>, [[LocalExportEntries]]: <var>localExportEntries</var>, [[IndirectExportEntries]]: <var>indirectExportEntries</var>, [[StarExportEntries]]: <var>starExportEntries</var>, [[DFSIndex]]: <emu-val>undefined</emu-val>, [[DFSAncestorIndex]]: <emu-val>undefined</emu-val> }.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An implementation may parse module source text and analyse it for Early Error conditions prior to the evaluation of ParseModule for that module source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseModule upon that source text.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-date.prototype.tolocalestring": {"num": "20.4.4.39", "title": "#sec-date.prototype.tolocalestring Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-date.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.tolocalestring\">#sec-date.prototype.tolocalestring</span> Date.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>Date.prototype.toLocaleString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleString</code> method is used.</p>\n        <p>This function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the Date in the current time zone in a convenient, human-readable form that corresponds to the conventions of the host environment's current locale.</p>\n        <p>The meaning of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n      </emu-clause>\n\n      "}, "sec-additional-built-in-properties": {"num": "B.2", "title": "#sec-additional-built-in-properties Additional Built-in Properties", "html": "<emu-annex id=\"sec-additional-built-in-properties\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</span> Additional Built-in Properties</h1>\n    <p>When the ECMAScript host is a web browser the following additional properties of the standard built-in objects are defined.</p>\n\n    <div id=\"excluded-sec-additional-properties-of-the-global-object\"><h1><span class=\"secnum\">B.2.1</span>#sec-additional-properties-of-the-global-object Additional Properties of the Global Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-object.prototype-object\"><h1><span class=\"secnum\">B.2.2</span>#sec-additional-properties-of-the-object.prototype-object Additional Properties of the Object.prototype Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-string.prototype-object\"><h1><span class=\"secnum\">B.2.3</span>#sec-additional-properties-of-the-string.prototype-object Additional Properties of the String.prototype Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-date.prototype-object\"><h1><span class=\"secnum\">B.2.4</span>#sec-additional-properties-of-the-date.prototype-object Additional Properties of the Date.prototype Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-regexp.prototype-object\"><h1><span class=\"secnum\">B.2.5</span>#sec-additional-properties-of-the-regexp.prototype-object Additional Properties of the RegExp.prototype Object</h1>...</div></emu-annex>\n\n  "}, "sec-math.log10": {"num": "20.3.2.22", "title": "#sec-math.log10 Math.log10 ( x )", "html": "<emu-clause id=\"sec-math.log10\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log10\">#sec-math.log10</span> Math.log10 ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the base 10 logarithm of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than 0, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is 1, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-ecmascript-language-types-number-type": {"num": "6.1.6.1", "title": "#sec-ecmascript-language-types-number-type The Number Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-number-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</span> The Number Type</h1>\n        <p>The Number type has exactly 18437736874454810627<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> + 3<sub>&#8477;</sub></emu-eqn>) values, representing the double-precision 64-bit format <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9007199254740990<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) distinct &#8220;Not-a-Number&#8221; values of the IEEE Standard are represented in ECMAScript as a single special <emu-val>NaN</emu-val> value. (Note that the <emu-val>NaN</emu-val> value is produced by the program expression <code>NaN</code>.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is implementation-dependent; to ECMAScript code, all <emu-val>NaN</emu-val> values are indistinguishable from each other.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The bit pattern that might be observed in an ArrayBuffer (see <emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>) or a SharedArrayBuffer (see <emu-xref href=\"#sec-sharedarraybuffer-objects\"><a href=\"#sec-sharedarraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-sharedarraybuffer-objects\">#sec-sharedarraybuffer-objects</a></emu-xref>) after a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> has been stored into it is not necessarily the same as the internal representation of that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> used by the ECMAScript implementation.</p>\n        </div></emu-note>\n        <p>There are two other special values, called <emu-val>positive Infinity</emu-val> and <emu-val>negative Infinity</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>, respectively. (Note that these two infinite Number values are produced by the program expressions <code>+Infinity</code> (or simply <code>Infinity</code>) and <code>-Infinity</code>.)</p>\n        <p>The other 18437736874454810624<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup></emu-eqn>) values are called the finite numbers. Half of these are positive numbers and half are negative numbers; for every finite positive <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> there is a corresponding negative value having the same magnitude.</p>\n        <p>Note that there is both a <emu-val>positive zero</emu-val> and a <emu-val>negative zero</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+0</emu-val> and <emu-val>-0</emu-val>, respectively. (Note that these two different zero Number values are produced by the program expressions <code>+0</code> (or simply <code>0</code>) and <code>-0</code>.)</p>\n        <p>The 18437736874454810622<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) finite nonzero values are of two kinds:</p>\n        <p>18428729675200069632<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>54<sub>&#8477;</sub></sup></emu-eqn>) of them are normalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub>&#8477;</sub> or -1<sub>&#8477;</sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> but not less than 2<sub>&#8477;</sub><sup>52<sub>&#8477;</sub></sup>, and <var>e</var> is a <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> ranging from -1074<sub>&#8477;</sub> to 971<sub>&#8477;</sub>, inclusive.</p>\n        <p>The remaining 9007199254740990<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) values are denormalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub>&#8477;</sub> or -1<sub>&#8477;</sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub>&#8477;</sub><sup>52<sub>&#8477;</sub></sup>, and <var>e</var> is -1074<sub>&#8477;</sub>.</p>\n        <p>Note that all the positive and negative mathematical integers whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type (indeed, the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> 0 has two representations, <emu-val>+0</emu-val> and <emu-val>-0</emu-val>).</p>\n        <p>A finite number has an <em>odd significand</em> if it is nonzero and the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> <var>m</var> used to express it (in one of the two forms shown above) is odd. Otherwise, it has an <em>even significand</em>.</p>\n        <p>In this specification, the phrase &#8220;the <dfn id=\"number-value\">Number value</dfn> for <var>x</var>&#8221; where <var>x</var> represents an exact real mathematical quantity (which might even be an irrational number such as &#960;) means a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> chosen in the following manner. Consider the set of all finite values of the Number type, with <emu-val>-0</emu-val> removed and with two additional values added to it that are not representable in the Number type, namely 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> (which is <emu-eqn class=\"inline\">+1<sub>&#8477;</sub> &#215; 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> &#215; 2<sub>&#8477;</sub><sup>971<sub>&#8477;</sub></sup></emu-eqn>) and <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> (which is <emu-eqn class=\"inline\">-1<sub>&#8477;</sub> &#215; 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> &#215; 2<sub>&#8477;</sub><sup>971<sub>&#8477;</sub></sup></emu-eqn>). Choose the member of this set that is closest in value to <var>x</var>. If two values of the set are equally close, then the one with an even significand is chosen; for this purpose, the two extra values 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> and <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> are considered to have even significands. Finally, if 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> was chosen, replace it with <emu-val>+&#8734;</emu-val>; if <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> was chosen, replace it with <emu-val>-&#8734;</emu-val>; if <emu-val>+0</emu-val> was chosen, replace it with <emu-val>-0</emu-val> if and only if <var>x</var> is less than zero; any other chosen value is used unchanged. The result is the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>. (This procedure corresponds exactly to the behaviour of the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode.)</p>\n        <p>Some ECMAScript operators deal only with integers in specific ranges such as <emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn> through <emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>, inclusive, or in the range 0 through <emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>, inclusive. These operators accept any value of the Number type but first convert each such value to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the expected range. See the descriptions of the numeric conversion operations in <emu-xref href=\"#sec-type-conversion\"><a href=\"#sec-type-conversion\" class=\"excluded-xref\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</a></emu-xref>.</p>\n\n        <p>The Number::unit value is <emu-val>1</emu-val>.</p>\n\n        <div id=\"excluded-sec-numeric-types-number-unaryMinus\"><h1><span class=\"secnum\">6.1.6.1.1</span>#sec-numeric-types-number-unaryMinus Number::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.1.2</span>#sec-numeric-types-number-bitwiseNOT Number::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-exponentiate\"><h1><span class=\"secnum\">6.1.6.1.3</span>#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-number-multiply\"><h1><span class=\"secnum\">6.1.6.1.4</span>#sec-numeric-types-number-multiply Number::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-divide\"><h1><span class=\"secnum\">6.1.6.1.5</span>#sec-numeric-types-number-divide Number::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-remainder\"><h1><span class=\"secnum\">6.1.6.1.6</span>#sec-numeric-types-number-remainder Number::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-number-add\"><h1><span class=\"secnum\">6.1.6.1.7</span>#sec-numeric-types-number-add Number::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-subtract\"><h1><span class=\"secnum\">6.1.6.1.8</span>#sec-numeric-types-number-subtract Number::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-leftShift\"><h1><span class=\"secnum\">6.1.6.1.9</span>#sec-numeric-types-number-leftShift Number::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-signedRightShift\"><h1><span class=\"secnum\">6.1.6.1.10</span>#sec-numeric-types-number-signedRightShift Number::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.1.11</span>#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-lessThan\"><h1><span class=\"secnum\">6.1.6.1.12</span>#sec-numeric-types-number-lessThan Number::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-equal\"><h1><span class=\"secnum\">6.1.6.1.13</span>#sec-numeric-types-number-equal Number::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValue\"><h1><span class=\"secnum\">6.1.6.1.14</span>#sec-numeric-types-number-sameValue Number::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValueZero\"><h1><span class=\"secnum\">6.1.6.1.15</span>#sec-numeric-types-number-sameValueZero Number::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-numberbitwiseop\"><h1><span class=\"secnum\">6.1.6.1.16</span>#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.1.17</span>#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.1.18</span>#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.1.19</span>#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-tostring\"><h1><span class=\"secnum\">6.1.6.1.20</span>#sec-numeric-types-number-tostring Number::toString ( x )</h1>...</div></emu-clause>\n\n      "}, "sec-math.log1p": {"num": "20.3.2.21", "title": "#sec-math.log1p Math.log1p ( x )", "html": "<emu-clause id=\"sec-math.log1p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log1p\">#sec-math.log1p</span> Math.log1p ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the natural logarithm of 1 + <var>x</var>. The result is computed in a way that is accurate even when the value of x is close to zero.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than -1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If x is -1, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-bigint.prototype.tostring": {"num": "20.2.3.3", "title": "#sec-bigint.prototype.tostring BigInt.prototype.toString ( [ radix ] )", "html": "<emu-clause id=\"sec-bigint.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.prototype.tostring\">#sec-bigint.prototype.tostring</span> BigInt.prototype.toString ( [ <var>radix</var> ] )</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The optional <var>radix</var> should be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the inclusive range 2 to 36. If <var>radix</var> is <emu-val>undefined</emu-val> the Number 10 is used as the value of <var>radix</var>.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisbigintvalue\"><a href=\"#sec-thisbigintvalue\">thisBigIntValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>radix</var> is <emu-val>undefined</emu-val>, let <var>radixNumber</var> be 10.</li><li>Else, let <var>radixNumber</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>radix</var>).</li><li>If <var>radixNumber</var> &lt; 2 or <var>radixNumber</var> &gt; 36, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>radixNumber</var> = 10, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Return the String representation of this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> using the radix specified by <var>radixNumber</var>. Letters <code>a</code>-<code>z</code> are used for digits with values 10 through 35. The precise algorithm is implementation-dependent, however the algorithm should be a generalization of that specified in <emu-xref href=\"#sec-numeric-types-bigint-tostring\"><a href=\"#sec-numeric-types-bigint-tostring\" class=\"excluded-xref\" excluded-id=\"sec-numeric-types-bigint-tostring\">#sec-numeric-types-bigint-tostring</a></emu-xref>.</li></ol></emu-alg>\n        <p>The <code>toString</code> function is not generic; it throws a <emu-val>TypeError</emu-val> exception if its <emu-val>this</emu-val> value is not a BigInt or a BigInt object. Therefore, it cannot be transferred to other kinds of objects for use as a method.</p>\n      </emu-clause>\n\n      "}, "sec-built-in-function-objects-call-thisargument-argumentslist": {"num": "9.3.1", "title": "#sec-built-in-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-built-in-function-objects-call-thisargument-argumentslist\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function-objects-call-thisargument-argumentslist\">#sec-built-in-function-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n      <p>The [[Call]] internal method for a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>thisArgument</var> and <var>argumentsList</var>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Let <var>calleeContext</var> be a new <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>calleeContext</var> to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>calleeContext</var> to <var>calleeRealm</var>.</li><li>Set the ScriptOrModule of <var>calleeContext</var> to <var>F</var>.[[ScriptOrModule]].</li><li>Perform any necessary implementation-defined initialization of <var>calleeContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li id=\"step-call-builtin-function-result\">Let <var>result</var> be the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> that is the result of evaluating <var>F</var> in a manner that conforms to the specification of <var>F</var>. <var>thisArgument</var> is the <emu-val>this</emu-val> value, <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>.</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <var>calleeContext</var> is removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> it must not be destroyed if it has been suspended and retained by an accessible generator object for later resumption.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-date.parse": {"num": "20.4.3.2", "title": "#sec-date.parse Date.parse ( string )", "html": "<emu-clause id=\"sec-date.parse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.parse\">#sec-date.parse</span> Date.parse ( <var>string</var> )</h1>\n        <p>The <code>parse</code> function applies the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> operator to its argument. If <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> results in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> is immediately returned. Otherwise, <code>parse</code> interprets the resulting String as a date and time; it returns a Number, the UTC <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> corresponding to the date and time. The String may be interpreted as a local time, a UTC time, or a time in some other time zone, depending on the contents of the String. The function first attempts to parse the String according to the format described in Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>), including expanded years. If the String does not conform to that format the function may fall back to any implementation-specific heuristics or implementation-specific date formats. Strings that are unrecognizable or contain out-of-bounds format element values shall cause <code>Date.parse</code> to return <emu-val>NaN</emu-val>.</p>\n        <p>If the String conforms to the <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref>, substitute values take the place of absent format elements. When the <code>MM</code> or <code>DD</code> elements are absent, <emu-val>\"01\"</emu-val> is used. When the <code>HH</code>, <code>mm</code>, or <code>ss</code> elements are absent, <emu-val>\"00\"</emu-val> is used. When the <code>sss</code> element is absent, <emu-val>\"000\"</emu-val> is used. When the UTC offset representation is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as a local time.</p>\n        <p>If <code>x</code> is any Date object whose milliseconds amount is zero within a particular implementation of ECMAScript, then all of the following expressions should produce the same numeric value in that implementation, if all the properties referenced have their initial values:</p>\n        <pre><code class=\"javascript hljs\">x.valueOf()\n<span class=\"hljs-built_in\">Date</span>.parse(x.toString())\n<span class=\"hljs-built_in\">Date</span>.parse(x.toUTCString())\n<span class=\"hljs-built_in\">Date</span>.parse(x.toISOString())</code></pre>\n        <p>However, the expression</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-built_in\">Date</span>.parse(x.toLocaleString())</code></pre>\n        <p>is not required to produce the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as the preceding three expressions and, in general, the value produced by <code>Date.parse</code> is implementation-dependent when given any String value that does not conform to the Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>) and that could not be produced in that implementation by the <code>toString</code> or <code>toUTCString</code> method.</p>\n      </emu-clause>\n\n      "}, "sec-number.prototype.tolocalestring": {"num": "20.1.3.4", "title": "#sec-number.prototype.tolocalestring Number.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-number.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.tolocalestring\">#sec-number.prototype.tolocalestring</span> Number.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>Number.prototype.toLocaleString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleString</code> method is used.</p>\n        <p>Produces a String value that represents this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> formatted according to the conventions of the host environment's current locale. This function is implementation-dependent, and it is permissible, but not encouraged, for it to return the same thing as <code>toString</code>.</p>\n        <p>The meanings of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n      </emu-clause>\n\n      "}, "sec-math.tanh": {"num": "20.3.2.34", "title": "#sec-math.tanh Math.tanh ( x )", "html": "<emu-clause id=\"sec-math.tanh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.tanh\">#sec-math.tanh</span> Math.tanh ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the hyperbolic tangent of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is +1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is -1.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.tanh(x)</code> is the same as the value of <code>(Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x))</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact": {"num": "D", "title": "#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact", "html": "<emu-annex id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact</span> Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact</h1>\n  <p><emu-xref href=\"#sec-candeclareglobalvar\"><a href=\"#sec-candeclareglobalvar\" class=\"excluded-xref\" excluded-id=\"sec-candeclareglobalvar\">#sec-candeclareglobalvar</a></emu-xref>-<emu-xref href=\"#sec-createglobalfunctionbinding\"><a href=\"#sec-createglobalfunctionbinding\" class=\"excluded-xref\" excluded-id=\"sec-createglobalfunctionbinding\">#sec-createglobalfunctionbinding</a></emu-xref> Edition 5 and 5.1 used a property existence test to determine whether a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property corresponding to a new global declaration already existed. ECMAScript 2015 uses an own property existence test. This corresponds to what has been most commonly implemented by web browsers.</p>\n  <p><emu-xref href=\"#sec-array-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-array-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</a></emu-xref>: The 5<sup>th</sup> Edition moved the capture of the current array length prior to the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> conversion of the <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> or new length value. However, the captured length value could become invalid if the conversion process has the side-effect of changing the array length. ECMAScript 2015 specifies that the current array length must be captured after the possible occurrence of such side-effects.</p>\n  <p><emu-xref href=\"#sec-timeclip\"><a href=\"#sec-timeclip\" class=\"excluded-xref\" excluded-id=\"sec-timeclip\">#sec-timeclip</a></emu-xref>: Previous editions permitted the <emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref> abstract operation to return either <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as the representation of a 0 <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref>. ECMAScript 2015 specifies that <emu-val>+0</emu-val> always returned. This means that for ECMAScript 2015 the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> of a Date object is never observably <emu-val>-0</emu-val> and methods that return time values never return <emu-val>-0</emu-val>.</p>\n  <p><emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>: If a UTC offset representation is not present, the local time zone is used. Edition 5.1 incorrectly stated that a missing time zone should be interpreted as <emu-val>\"z\"</emu-val>.</p>\n  <p><emu-xref href=\"#sec-date.prototype.toisostring\"><a href=\"#sec-date.prototype.toisostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.toisostring\">#sec-date.prototype.toisostring</a></emu-xref>: If the year cannot be represented using the Date Time String Format specified in <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref> a RangeError exception is thrown. Previous editions did not specify the behaviour for that case.</p>\n  <p><emu-xref href=\"#sec-date.prototype.tostring\"><a href=\"#sec-date.prototype.tostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.tostring\">#sec-date.prototype.tostring</a></emu-xref>: Previous editions did not specify the value returned by <code>Date.prototype.toString</code> when <emu-xref href=\"#this-time-value\"><a href=\"#this-time-value\">this time value</a></emu-xref> is <emu-val>NaN</emu-val>. ECMAScript 2015 specifies the result to be the String value <emu-val>\"Invalid Date\"</emu-val>.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref>, <emu-xref href=\"#sec-escaperegexppattern\"><a href=\"#sec-escaperegexppattern\" class=\"excluded-xref\" excluded-id=\"sec-escaperegexppattern\">#sec-escaperegexppattern</a></emu-xref>: Any LineTerminator code points in the value of the <emu-val>\"source\"</emu-val> property of a RegExp instance must be expressed using an escape sequence. Edition 5.1 only required the escaping of <code>/</code>.</p>\n  <p><emu-xref href=\"#sec-regexp.prototype-@@match\"><a href=\"#sec-regexp.prototype-@@match\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@match\">#sec-regexp.prototype-@@match</a></emu-xref>, <emu-xref href=\"#sec-regexp.prototype-@@replace\"><a href=\"#sec-regexp.prototype-@@replace\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@replace\">#sec-regexp.prototype-@@replace</a></emu-xref>: In previous editions, the specifications for <code>String.prototype.match</code> and <code>String.prototype.replace</code> was incorrect for cases where the pattern argument was a RegExp value whose <code>global</code> flag is set. The previous specifications stated that for each attempt to match the pattern, if <code>lastIndex</code> did not change it should be incremented by 1. The correct behaviour is that <code>lastIndex</code> should be incremented by one only if the pattern matched the empty String.</p>\n  <p><emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>, <emu-xref href=\"#sec-sortcompare\"><a href=\"#sec-sortcompare\" class=\"excluded-xref\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</a></emu-xref>: Previous editions did not specify how a <emu-val>NaN</emu-val> value returned by a <var>comparefn</var> was interpreted by <code>Array.prototype.sort</code>. ECMAScript 2015 specifies that such as value is treated as if <emu-val>+0</emu-val> was returned from the <var>comparefn</var>. ECMAScript 2015 also specifies that <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> is applied to the result returned by a <var>comparefn</var>. In previous editions, the effect of a <var>comparefn</var> result that is not a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> was implementation-dependent. In practice, implementations call <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>.</p>\n</emu-annex>\n\n"}, "sec-immutable-prototype-exotic-objects": {"num": "9.4.7", "title": "#sec-immutable-prototype-exotic-objects Immutable Prototype Exotic Objects", "html": "<emu-clause id=\"sec-immutable-prototype-exotic-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-immutable-prototype-exotic-objects\">#sec-immutable-prototype-exotic-objects</span> Immutable Prototype Exotic Objects</h1>\n      <p>An <emu-xref href=\"#immutable-prototype-exotic-object\"><a href=\"#immutable-prototype-exotic-object\">immutable prototype exotic object</a></emu-xref> is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> that has a [[Prototype]] internal slot that will not change once it is initialized.</p>\n\n      <p>An object is an <dfn id=\"immutable-prototype-exotic-object\">immutable prototype exotic object</dfn> if its [[SetPrototypeOf]] internal method uses the following implementation. (Its other essential internal methods may use any implementation, depending on the specific <emu-xref href=\"#immutable-prototype-exotic-object\"><a href=\"#immutable-prototype-exotic-object\">immutable prototype exotic object</a></emu-xref> in question.)</p>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Unlike other exotic objects, there is not a dedicated creation abstract operation provided for immutable prototype exotic objects. This is because they are only used by <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%ObjectPrototype%</a></emu-xref> and by host environments, and in host environments, the relevant objects are potentially exotic in other ways and thus need their own dedicated creation operation.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-immutable-prototype-exotic-objects-setprototypeof-v\"><h1><span class=\"secnum\">9.4.7.1</span>#sec-immutable-prototype-exotic-objects-setprototypeof-v [[SetPrototypeOf]] ( V )</h1>...</div><div id=\"excluded-sec-set-immutable-prototype\"><h1><span class=\"secnum\">9.4.7.2</span>#sec-set-immutable-prototype SetImmutablePrototype ( O, V )</h1>...</div></emu-clause>\n  "}, "sec-math.sinh": {"num": "20.3.2.31", "title": "#sec-math.sinh Math.sinh ( x )", "html": "<emu-clause id=\"sec-math.sinh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.sinh\">#sec-math.sinh</span> Math.sinh ( <var>x</var> )</h1>\n        <p>Returns an implementation-dependent approximation to the hyperbolic sine of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.sinh(x)</code> is the same as the value of <code>(Math.exp(x) - Math.exp(-x)) / 2</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-hostensurecancompilestrings": {"num": "18.2.1.2", "title": "#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm )", "html": "<emu-clause id=\"sec-hostensurecancompilestrings\" aoid=\"HostEnsureCanCompileStrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostensurecancompilestrings\">#sec-hostensurecancompilestrings</span> HostEnsureCanCompileStrings ( <var>callerRealm</var>, <var>calleeRealm</var> )</h1>\n        <p>HostEnsureCanCompileStrings is an implementation-defined abstract operation that allows host environments to block certain ECMAScript functions which allow developers to compile strings into ECMAScript code.</p>\n\n        <p>An implementation of HostEnsureCanCompileStrings may complete normally or abruptly. Any abrupt completions will be propagated to its callers. The default implementation of HostEnsureCanCompileStrings is to unconditionally return an empty normal completion.</p>\n      </emu-clause>\n\n      "}, "sec-built-in-method": {"num": "4.3.35", "title": "#sec-built-in-method built-in method", "html": "<emu-clause id=\"sec-built-in-method\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-method\">#sec-built-in-method</span> built-in method</h1>\n      <p>method that is a built-in function</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Standard built-in methods are defined in this specification, and an ECMAScript implementation may specify and provide other additional built-in methods.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-bigint.prototype.tolocalestring": {"num": "20.2.3.2", "title": "#sec-bigint.prototype.tolocalestring BigInt.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-bigint.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.prototype.tolocalestring\">#sec-bigint.prototype.tolocalestring</span> BigInt.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>BigInt.prototype.toLocaleString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleString</code> method is used.</p>\n        <p>Produces a String value that represents this BigInt value formatted according to the conventions of the host environment's current locale. This function is implementation-dependent, and it is permissible, but not encouraged, for it to return the same thing as <code>toString</code>.</p>\n        <p>The meanings of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n      </emu-clause>\n\n      "}, "sec-hosthassourcetextavailable": {"num": "19.2.5", "title": "#sec-hosthassourcetextavailable HostHasSourceTextAvailable ( func )", "html": "<emu-clause id=\"sec-hosthassourcetextavailable\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosthassourcetextavailable\">#sec-hosthassourcetextavailable</span> HostHasSourceTextAvailable ( <var>func</var> )</h1>\n      <p>HostHasSourceTextAvailable is an implementation-defined abstract operation that allows host environments to prevent the source text from being provided for a given function.</p>\n      <p>An implementation of HostHasSourceTextAvailable must complete normally in all cases. This operation must be deterministic with respect to its parameters. Each time it is called with a specific <var>func</var> as its argument, it must return the same completion record. The default implementation of HostHasSourceTextAvailable is to unconditionally return a normal completion with a value of <emu-val>true</emu-val>.</p>\n    </emu-clause>\n  "}, "sec-hostresolveimportedmodule": {"num": "15.2.1.18", "title": "#sec-hostresolveimportedmodule Runtime Semantics: HostResolveImportedModule ( referencingScriptOrModule, specifier )", "html": "<emu-clause id=\"sec-hostresolveimportedmodule\" aoid=\"HostResolveImportedModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostresolveimportedmodule\">#sec-hostresolveimportedmodule</span> Runtime Semantics: HostResolveImportedModule ( <var>referencingScriptOrModule</var>, <var>specifier</var> )</h1>\n        <p>HostResolveImportedModule is an implementation-defined abstract operation that provides the concrete <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> subclass instance that corresponds to the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String, <var>specifier</var>, occurring within the context of the script or module represented by the <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may also be <emu-val>null</emu-val>, if the resolution is being performed in the context of an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression, and there is no active script or module at that time.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An example of when <var>referencingScriptOrModule</var> can be <emu-val>null</emu-val> is in a web browser host. There, if a user clicks on a control given by</p>\n\n          <pre><code class=\"html hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"import('./foo.mjs')\"</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n\n          <p>there will be no active script or module at the time the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression runs. More generally, this can happen in any situation where the host pushes execution contexts with <emu-val>null</emu-val> ScriptOrModule components onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</p>\n        </div></emu-note>\n\n        <p>The implementation of HostResolveImportedModule must conform to the following requirements:</p>\n        <ul>\n          <li>\n            The normal return value must be an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.\n          </li>\n          <li>\n            If a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> corresponding to the pair <var>referencingScriptOrModule</var>, <var>specifier</var> does not exist or cannot be created, an exception must be thrown.\n          </li>\n          <li>\n            Each time this operation is called with a specific <var>referencingScriptOrModule</var>, <var>specifier</var> pair as arguments it must return the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance if it completes normally.\n          </li>\n        </ul>\n        <p>Multiple different <var>referencingScriptOrModule</var>, <var>specifier</var> pairs may map to the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance. The actual mapping semantic is implementation-defined but typically a normalization process is applied to <var>specifier</var> as part of the mapping process. A typical normalization process would include actions such as alphabetic case folding and expansion of relative and abbreviated path specifiers.</p>\n      </emu-clause>\n\n      "}, "sec-date.prototype.tolocaletimestring": {"num": "20.4.4.40", "title": "#sec-date.prototype.tolocaletimestring Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-date.prototype.tolocaletimestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.tolocaletimestring\">#sec-date.prototype.tolocaletimestring</span> Date.prototype.toLocaleTimeString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>Date.prototype.toLocaleTimeString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleTimeString</code> method is used.</p>\n        <p>This function returns a String value. The contents of the String are implementation-dependent, but are intended to represent the &#8220;time&#8221; portion of the Date in the current time zone in a convenient, human-readable form that corresponds to the conventions of the host environment's current locale.</p>\n        <p>The meaning of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n      </emu-clause>\n\n      "}, "sec-example-cyclic-module-record-graphs": {"num": "15.2.1.16.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a host first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <emu-const>linked</emu-const>. This preparatory step can be performed at any time. Later, when the host is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <emu-const>evaluated</emu-const>.</p>\n\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <emu-const>unlinked</emu-const>. <var>C</var>'s [[Status]] has become <emu-const>linked</emu-const>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <emu-const>evaluated</emu-const>. <var>C</var> will also become <emu-const>evaluated</emu-const> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a host tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these  methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <emu-const>unlinked</emu-const>.</p>\n\n          <p>Lastly, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the host proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <emu-const>linking</emu-const>. <var>B</var>.[[Status]] itself remains <emu-const>linking</emu-const> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <emu-const>linked</emu-const> , both <var>A</var> and <var>B</var> transition from <emu-const>linking</emu-const> to <emu-const>linked</emu-const> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <emu-const>linking</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>unlinked</emu-const>. Note that <var>C</var> is left as <emu-const>linked</emu-const>.</p>\n\n          <p>Finally, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <emu-const>evaluating</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>evaluated</emu-const> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <emu-const>evaluated</emu-const> with no [[EvaluationError]].</p>\n        </emu-clause>\n      "}, "sec-jobs": {"num": "8.4", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\">\n    <span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript host environments. This specification describes the host hook <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; host environments may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must:\n        <ol>\n          <li>Push an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li>\n          <li>Perform any implementation-defined preparation steps.</li>\n          <li>Call the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any implementation-defined cleanup steps.</li>\n          <li>Pop the previously-pushed <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a normal completion, implementing its own handling of errors.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>Host environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">8.4.1</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}, "sec-string.prototype.tolocaleuppercase": {"num": "21.1.3.24", "title": "#sec-string.prototype.tolocaleuppercase String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-string.prototype.tolocaleuppercase\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.tolocaleuppercase\">#sec-string.prototype.tolocaleuppercase</span> String.prototype.toLocaleUpperCase ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>toLocaleUpperCase</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleUpperCase</code> method is used.</p>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>This function works exactly the same as <code>toUpperCase</code> except that its result is intended to yield the correct result for the host environment's current locale, rather than a locale-independent result. There will only be a difference in the few cases (such as Turkish) where the rules for that language conflict with the regular Unicode case mappings.</p>\n        <p>The meaning of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>toLocaleUpperCase</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-hostgetimportmetaproperties": {"num": "12.3.12.1.1", "title": "#sec-hostgetimportmetaproperties Runtime Semantics: HostGetImportMetaProperties ( moduleRecord )", "html": "<emu-clause id=\"sec-hostgetimportmetaproperties\" aoid=\"HostGetImportMetaProperties\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostgetimportmetaproperties\">#sec-hostgetimportmetaproperties</span> Runtime Semantics: HostGetImportMetaProperties ( <var>moduleRecord</var> )</h1>\n          <p>HostGetImportMetaProperties is an implementation-defined abstract operation that allows hosts to provide property keys and values for the object returned from <code>import.meta</code>.</p>\n\n          <p>The implementation of HostGetImportMetaProperties must conform to the following requirements:</p>\n          <ul>\n            <li>It must return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, whose values are all Records with two fields, [[Key]] and [[Value]].</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Key]] field must be a property key, i.e., <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref> must return <emu-val>true</emu-val> when applied to it.</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Value]] field must be an ECMAScript value.</li>\n            <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostGetImportMetaProperties is to return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </emu-clause>\n\n        "}, "sec-built-in-function": {"num": "4.3.32", "title": "#sec-built-in-function built-in function", "html": "<emu-clause id=\"sec-built-in-function\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function\">#sec-built-in-function</span> built-in function</h1>\n      <p>built-in object that is a function</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Examples of built-in functions include <code>parseInt</code> and <code>Math.exp</code>. An implementation may provide implementation-dependent built-in functions that are not described in this specification.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {"figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "table-2": "Table 3", "table-3": "Table 4", "table-21": "Table 22", "table-agent-record": "Table 26", "table-script-records": "Table 37", "table-36": "Table 38", "table-37": "Table 39", "table-dynamic-function-sourcetext-prefixes": "Table 48", "table-readsharedmemory-fields": "Table 79", "table-writesharedmemory-fields": "Table 80", "table-rmwsharedmemory-fields": "Table 81"}}, "to": {"secList": ["sec-host-promise-rejection-tracker", "sec-valid-executions", "sec-performeval", "sec-pattern", "sec-math.exp", "sec-host-synchronizes-with", "sec-string.prototype.localecompare", "sec-code-realms", "sec-agents", "sec-math.sin", "sec-finishdynamicimport", "sec-parseint-string-radix", "sec-ecmascript-overview", "sec-math.atanh", "sec-numeric-types-number-exponentiate", "sec-script-records", "sec-string.prototype.tolocalelowercase", "sec-function.prototype.tostring", "sec-math.log2", "sec-enumerate-object-properties", "sec-number.prototype.tostring", "sec-math.cosh", "sec-debugger-statement-runtime-semantics-evaluation", "sec-memory-model-fundamentals", "sec-timezoneestring", "sec-conformance", "sec-%typedarray%.prototype.sort", "sec-math.atan", "sec-hostimportmoduledynamically", "sec-abstract-module-records", "sec-math.sqrt", "sec-non-ecmascript-functions", "sec-array.prototype.tolocalestring", "sec-math.expm1", "sec-terms-and-definitions", "sec-math.cbrt", "sec-math.acosh", "sec-array.prototype.sort", "sec-math.acos", "sec-error-handling-and-language-extensions", "sec-math.random", "sec-detacharraybuffer", "sec-parse-script", "sec-additional-ecmascript-features-for-web-browsers", "sec-math.cos", "sec-web-scripting", "sec-math.log", "sec-math.asinh", "sec-global-object", "sec-local-time-zone-adjustment", "sec-initializehostdefinedrealm", "sec-math.tan", "sec-math.asin", "sec-hostenqueuepromisejob", "sec-nativeerror-object-structure", "sec-hostfinalizeimportmeta", "sec-createdynamicfunction", "sec-date.prototype.tolocaledatestring", "sec-overview", "sec-math.hypot", "sec-math.atan2", "sec-IsHTMLDDA-internal-slot", "sec-parsemodule", "sec-date.prototype.tolocalestring", "sec-additional-built-in-properties", "sec-math.log10", "sec-ecmascript-language-types-number-type", "sec-math.log1p", "sec-bigint.prototype.tostring", "sec-built-in-function-objects-call-thisargument-argumentslist", "sec-date.parse", "sec-number.prototype.tolocalestring", "sec-math.tanh", "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact", "sec-immutable-prototype-exotic-objects", "sec-math.sinh", "sec-hostensurecancompilestrings", "sec-built-in-method", "sec-bigint.prototype.tolocalestring", "sec-hosthassourcetextavailable", "sec-hostresolveimportedmodule", "sec-date.prototype.tolocaletimestring", "sec-example-cyclic-module-record-graphs", "sec-jobs", "sec-string.prototype.tolocaleuppercase", "sec-hostgetimportmetaproperties", "sec-built-in-function"], "secData": {"sec-host-promise-rejection-tracker": {"num": "25.6.1.9", "title": "#sec-host-promise-rejection-tracker HostPromiseRejectionTracker ( promise, operation )", "html": "<emu-clause id=\"sec-host-promise-rejection-tracker\" aoid=\"HostPromiseRejectionTracker\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-promise-rejection-tracker\">#sec-host-promise-rejection-tracker</span> HostPromiseRejectionTracker ( <var>promise</var>, <var>operation</var> )</h1>\n        <p>HostPromiseRejectionTracker is a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> abstract operation that allows <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> environments to track promise rejections.</p>\n\n        <p>An implementation of HostPromiseRejectionTracker must complete normally in all cases. The default implementation of HostPromiseRejectionTracker is to unconditionally return an empty normal completion.</p>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>HostPromiseRejectionTracker is called in two scenarios:</p>\n\n          <ul>\n            <li>When a promise is rejected without any handlers, it is called with its <var>operation</var> argument set to <emu-val>\"reject\"</emu-val>.</li>\n            <li>When a handler is added to a rejected promise for the first time, it is called with its <var>operation</var> argument set to <emu-val>\"handle\"</emu-val>.</li>\n          </ul>\n\n          <p>A typical implementation of HostPromiseRejectionTracker might try to notify developers of unhandled rejections, while also being careful to notify them if such previous notifications are later invalidated by new handlers being attached.</p>\n        </div></emu-note>\n\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>operation</var> is <emu-val>\"handle\"</emu-val>, an implementation should not hold a reference to <var>promise</var> in a way that would interfere with garbage collection. An implementation may hold a reference to <var>promise</var> if <var>operation</var> is <emu-val>\"reject\"</emu-val>, since it is expected that rejections will be rare and not on hot code paths.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-valid-executions": {"num": "27.7.5", "title": "#sec-valid-executions Valid Executions", "html": "<emu-clause id=\"sec-valid-executions\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-valid-executions\">#sec-valid-executions</span> Valid Executions</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> is a valid execution (or simply an execution) if all of the following are true.</p>\n      <ul>\n        <li>The <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> provides a <emu-xref aoid=\"host-synchronizes-with\"><a href=\"#sec-host-synchronizes-with\">host-synchronizes-with</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref> for <var>execution</var>.[[HostSynchronizesWith]].</li>\n        <li><var>execution</var>.[[HappensBefore]] is a <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">strict partial order</a></emu-xref>.</li>\n        <li><var>execution</var> has valid chosen reads.</li>\n        <li><var>execution</var> has coherent reads.</li>\n        <li><var>execution</var> has tear free reads.</li>\n        <li><var>execution</var> has sequentially consistent atomics.</li>\n      </ul>\n      <p>All programs have at least one valid execution.</p>\n    </emu-clause>\n  "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\">\n        <span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval takes arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Set <var>inFunction</var> to <emu-val>true</emu-val>.</li><li>Set <var>inMethod</var> to <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, set <var>inDerivedConstructor</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Perform the following substeps in an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>x</var>), for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>runningContext</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>runningContext</var>'s VariableEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>runningContext</var> is not already suspended, suspend <var>runningContext</var>.</li><li>Let <var>evalContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>evalContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>evalContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set <var>evalContext</var>'s ScriptOrModule to <var>runningContext</var>'s ScriptOrModule.</li><li>Set <var>evalContext</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set <var>evalContext</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Push <var>evalContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>evalContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-pattern": {"num": "21.2.2.2", "title": "#sec-pattern Pattern", "html": "<emu-clause id=\"sec-pattern\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern\">#sec-pattern</span> Pattern</h1>\n        <p>The production <emu-grammar><emu-production name=\"Pattern\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"79a5bbd0\"><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with +1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>str</var>, <var>index</var>) that captures <var>m</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>index</var>) is <emu-val>true</emu-val> and <var>index</var> &#8804; the length of <var>str</var>.</li><li>If <var>Unicode</var> is <emu-val>true</emu-val>, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the sequence of code points of !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>str</var>). Otherwise, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the sequence of code units that are the elements of <var>str</var>. <var>Input</var> will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>. Each element of <var>Input</var> is considered to be a character.</li><li>Let <var>InputLength</var> be the number of characters contained in <var>Input</var>. This alias will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>.</li><li>Let <var>listIndex</var> be the index into <var>Input</var> of the character that was obtained from element <var>index</var> of <var>str</var>.</li><li>Let <var>c</var> be a new Continuation with parameters (<var>y</var>) that captures nothing and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li>Return <var>y</var>.</li></ol></li><li>Let <var>cap</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> <emu-val>undefined</emu-val> values, indexed 1 through <var>NcapturingParens</var>.</li><li>Let <var>x</var> be the State (<var>listIndex</var>, <var>cap</var>).</li><li>Call <var>m</var>(<var>x</var>, <var>c</var>) and return its result.</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A Pattern evaluates (&#8220;compiles&#8221;) to an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> value. <emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref> can then apply this procedure to a String and an offset within the String to determine whether the pattern would match starting at exactly that offset within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> are designed so that compiling a pattern may throw a <emu-val>SyntaxError</emu-val> exception; on the other hand, once the pattern is successfully compiled, applying the resulting <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> to find a match in a String cannot throw an exception (except for any <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> exceptions that can occur anywhere such as out-of-memory).</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.exp": {"num": "20.3.2.14", "title": "#sec-math.exp Math.exp ( x )", "html": "<emu-clause id=\"sec-math.exp\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.exp\">#sec-math.exp</span> Math.exp ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the exponential function of <var>x</var> (<var>e</var> raised to the power of <var>x</var>, where <var>e</var> is the base of the natural logarithms).</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-host-synchronizes-with": {"num": "27.6.4", "title": "#sec-host-synchronizes-with host-synchronizes-with", "html": "<emu-clause id=\"sec-host-synchronizes-with\" aoid=\"host-synchronizes-with\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-synchronizes-with\">#sec-host-synchronizes-with</span> host-synchronizes-with</h1>\n      <p>For a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, <var>execution</var>.[[HostSynchronizesWith]] is a <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref>-provided <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">strict partial order</a></emu-xref> on <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref>-specific events that satisfies at least the following.</p>\n      <ul>\n        <li>If (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[HostSynchronizesWith]], <var>E</var> and <var>D</var> are in <emu-xref aoid=\"HostEventSet\"><a href=\"#sec-hosteventset\">HostEventSet</a></emu-xref>(<var>execution</var>).</li>\n        <li>There is no cycle in the union of <var>execution</var>.[[HostSynchronizesWith]] and <var>execution</var>.[[AgentOrder]].</li>\n      </ul>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>For two <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref>-specific events <var>E</var> and <var>D</var>, <var>E</var> host-synchronizes-with <var>D</var> implies <var>E</var> <emu-xref aoid=\"happens-before\"><a href=\"#sec-happens-before\">happens-before</a></emu-xref> <var>D</var>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The host-synchronizes-with relation allows the <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> to provide additional synchronization mechanisms, such as <code>postMessage</code> between HTML workers.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-string.prototype.localecompare": {"num": "21.1.3.10", "title": "#sec-string.prototype.localecompare String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-string.prototype.localecompare\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</span> String.prototype.localeCompare ( <var>that</var> [ , <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>localeCompare</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>localeCompare</code> method is used.</p>\n        <p>When the <code>localeCompare</code> method is called with argument <var>that</var>, it returns a Number other than <emu-val>NaN</emu-val> that represents the result of a locale-sensitive String comparison of the <emu-val>this</emu-val> value (converted to a String) with <var>that</var> (converted to a String). The two Strings are <var>S</var> and <var>That</var>. The two Strings are compared in an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> fashion. The result is intended to order String values in the sort order specified by a <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> default locale, and will be negative, zero, or positive, depending on whether <var>S</var> comes before <var>That</var> in the sort order, the Strings are equal, or <var>S</var> comes after <var>That</var> in the sort order, respectively.</p>\n        <p>Before performing the comparisons, the following steps are performed to prepare the Strings:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>That</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>that</var>).</li></ol></emu-alg>\n        <p>The meaning of the optional second and third parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not assign any other interpretation to those parameter positions.</p>\n        <p>The <code>localeCompare</code> method, if considered as a function of two arguments <emu-val>this</emu-val> and <var>that</var>, is a consistent comparison function (as defined in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>) on the set of all Strings.</p>\n        <p>The actual return values are <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> to permit implementers to encode additional information in the value, but the function is required to define a total ordering on all Strings. This function must treat Strings that are canonically equivalent according to the Unicode standard as identical and must return <code>0</code> when comparing Strings that are considered canonically equivalent.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <code>localeCompare</code> method itself is not directly suitable as an argument to <code>Array.prototype.sort</code> because the latter requires a function of two arguments.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>This function is intended to rely on whatever language-sensitive comparison functionality is available to the ECMAScript environment from the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>, and to compare according to the rules of the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>'s current locale. However, regardless of the <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> provided comparison capabilities, this function must treat Strings that are canonically equivalent according to the Unicode standard as identical. It is recommended that this function should not honour Unicode compatibility equivalences or decompositions. For a definition and discussion of canonical equivalence see the Unicode Standard, chapters 2 and 3, as well as Unicode Standard Annex #15, Unicode Normalization Forms (<a href=\"https://unicode.org/reports/tr15/\">https://unicode.org/reports/tr15/</a>) and Unicode Technical Note #5, Canonical Equivalence in Applications (<a href=\"https://unicode.org/notes/tn5/\">https://www.unicode.org/notes/tn5/</a>). Also see Unicode Technical Standard #10, Unicode Collation Algorithm (<a href=\"https://unicode.org/reports/tr10/\">https://unicode.org/reports/tr10/</a>).</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>localeCompare</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-code-realms": {"num": "8.2", "title": "#sec-code-realms Realms", "html": "<emu-clause id=\"sec-code-realms\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-code-realms\">#sec-code-realms</span> Realms</h1>\n    <p>Before it is evaluated, all ECMAScript code must be associated with a <dfn id=\"realm\">realm</dfn>. Conceptually, a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> consists of a set of intrinsic objects, an ECMAScript <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>, all of the ECMAScript code that is loaded within the scope of that <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>, and other associated state and resources.</p>\n    <p>A <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is represented in this specification as a <dfn id=\"realm-record\">Realm Record</dfn> with the fields specified in <emu-xref href=\"#table-21\"><a href=\"#table-21\" class=\"excluded-xref\" excluded-id=\"table-21\">#table-21</a></emu-xref>:</p>\n    <emu-table id=\"table-21\" caption=\"Realm Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-21\">#table-21</span>: <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          </th>\n          <th>\n            Value\n          </th>\n          <th>\n            Meaning\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Intrinsics]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose field names are intrinsic keys and whose values are objects\n          </td>\n          <td>\n            The intrinsic values used by code associated with this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalObject]]\n          </td>\n          <td>\n            Object\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalEnv]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[TemplateMap]]\n          </td>\n          <td>\n            A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, [[Array]]: Object }.\n          </td>\n          <td>\n            <p>Template objects are canonicalized separately for each <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> using its <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>'s [[TemplateMap]]. Each [[Site]] value is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> that is a <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>. The associated [[Array]] value is the corresponding template object that is passed to a tag function.</p>\n            <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Once a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> becomes unreachable, the corresponding [[Array]] is also unreachable, and it would be unobservable if an implementation removed the pair from the [[TemplateMap]] list.</div></emu-note>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HostDefined]]\n          </td>\n          <td>\n            Any, default value is <emu-val>undefined</emu-val>.\n          </td>\n          <td>\n            Field reserved for use by hosts that need to associate additional information with a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <div id=\"excluded-sec-createrealm\"><h1><span class=\"secnum\">8.2.1</span>#sec-createrealm CreateRealm ( )</h1>...</div><div id=\"excluded-sec-createintrinsics\"><h1><span class=\"secnum\">8.2.2</span>#sec-createintrinsics CreateIntrinsics ( realmRec )</h1>...</div><div id=\"excluded-sec-setrealmglobalobject\"><h1><span class=\"secnum\">8.2.3</span>#sec-setrealmglobalobject SetRealmGlobalObject ( realmRec, globalObj, thisValue )</h1>...</div><div id=\"excluded-sec-setdefaultglobalbindings\"><h1><span class=\"secnum\">8.2.4</span>#sec-setdefaultglobalbindings SetDefaultGlobalBindings ( realmRec )</h1>...</div></emu-clause>\n\n  "}, "sec-agents": {"num": "8.6", "title": "#sec-agents Agents", "html": "<emu-clause id=\"sec-agents\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agents\">#sec-agents</span> Agents</h1>\n\n    <p>An <dfn id=\"agent\">agent</dfn> comprises a set of ECMAScript execution contexts, an <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, a <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, an <dfn id=\"agent-record\">Agent Record</dfn>, and an <dfn id=\"executing-thread\">executing thread</dfn>. Except for the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, the constituents of an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> belong exclusively to that <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes a job on the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s execution contexts independently of other agents, except that an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> may be used as the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> by multiple agents, provided none of the agents sharing the thread have an <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> whose [[CanBlock]] property is <emu-val>true</emu-val>.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Some web browsers share a single <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> across multiple unrelated tabs of a browser window, for example.</p>\n    </div></emu-note>\n    <p>While an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes jobs, the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is the <dfn id=\"surrounding-agent\">surrounding agent</dfn> for the code in those jobs. The code uses the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref> to access the specification level execution objects held within the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>: the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, and the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s fields.</p>\n    <emu-table id=\"table-agent-record\" caption=\"Agent Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-agent-record\">#table-agent-record</span>: <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[LittleEndian]]</td>\n            <td>Boolean</td>\n            <td>The default value computed for the <em>isLittleEndian</em> parameter when it is needed by the algorithms <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref> and <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>. The choice is <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> and should be the alternative that is most efficient for the implementation.  Once the value has been observed it cannot change.</td>\n          </tr>\n          <tr>\n            <td>[[CanBlock]]</td>\n            <td>Boolean</td>\n            <td>Determines whether the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> can block or not.</td>\n          </tr>\n          <tr>\n            <td>[[Signifier]]</td>\n            <td>Any globally-unique value</td>\n            <td>Uniquely identifies the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> within its <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree1]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on one-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree2]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on two-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree8]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on eight-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[CandidateExecution]]</td>\n            <td>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref></td>\n            <td>See the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>Once the values of [[Signifier]], [[IsLockFree1]], and [[IsLockFree2]] have been observed by any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> they cannot change.</p>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The values of [[IsLockFree1]] and [[IsLockFree2]] are not necessarily determined by the hardware, but may also reflect implementation choices that can vary over time and between ECMAScript implementations.</p>\n\n      <p>There is no [[IsLockFree4]] property: 4-byte atomic operations are always lock-free.</p>\n\n      <p>In practice, if an atomic operation is implemented with any type of lock the operation is not lock-free.  Lock-free does not imply wait-free: there is no upper bound on how many machine steps may be required to complete a lock-free atomic operation.</p>\n\n      <p>That an atomic access of size <em>n</em> is lock-free does not imply anything about the (perceived) atomicity of non-atomic accesses of size <em>n</em>, specifically, non-atomic accesses may still be performed as a sequence of several separate memory accesses.  See <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> for details.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-agentsignifier\"><h1><span class=\"secnum\">8.6.1</span>#sec-agentsignifier AgentSignifier ( )</h1>...</div><div id=\"excluded-sec-agentcansuspend\"><h1><span class=\"secnum\">8.6.2</span>#sec-agentcansuspend AgentCanSuspend ( )</h1>...</div></emu-clause>\n\n  "}, "sec-math.sin": {"num": "20.3.2.30", "title": "#sec-math.sin Math.sin ( x )", "html": "<emu-clause id=\"sec-math.sin\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.sin\">#sec-math.sin</span> Math.sin ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the sine of <var>x</var>. The argument is expressed in radians.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val> or <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-finishdynamicimport": {"num": "15.2.1.20", "title": "#sec-finishdynamicimport Runtime Semantics: FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )", "html": "<emu-clause id=\"sec-finishdynamicimport\" aoid=\"FinishDynamicImport\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finishdynamicimport\">#sec-finishdynamicimport</span> Runtime Semantics: FinishDynamicImport ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <var>completion</var> )</h1>\n        <p>The abstract operation FinishDynamicImport takes arguments <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, and <var>completion</var>. FinishDynamicImport completes the process of a dynamic import originally started by an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> call, resolving or rejecting the promise returned by that call as appropriate according to <var>completion</var>. It is performed by <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> environments as part of <emu-xref aoid=\"HostImportModuleDynamically\"><a href=\"#sec-hostimportmoduledynamically\">HostImportModuleDynamically</a></emu-xref>. It performs the following steps when called:</p>\n\n        <emu-alg><ol><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>completion</var>.[[Value]] &#187;).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a normal completion and <var>completion</var>.[[Value]] is <emu-val>undefined</emu-val>.</li><li>Let <var>moduleRecord</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Evaluate has already been invoked on <var>moduleRecord</var> and successfully completed.</li><li>Let <var>namespace</var> be <emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>moduleRecord</var>).</li><li>If <var>namespace</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li><li>Else, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-parseint-string-radix": {"num": "18.2.5", "title": "#sec-parseint-string-radix parseInt ( string, radix )", "html": "<emu-clause id=\"sec-parseint-string-radix\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parseint-string-radix\">#sec-parseint-string-radix</span> parseInt ( <var>string</var>, <var>radix</var> )</h1>\n      <p>The <code>parseInt</code> function produces an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value dictated by interpretation of the contents of the <var>string</var> argument according to the specified <var>radix</var>. Leading white space in <var>string</var> is ignored. If <var>radix</var> is <emu-val>undefined</emu-val> or 0, it is assumed to be 10 except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of 16 is assumed. If <var>radix</var> is 16, the number may also optionally begin with the code unit pairs <code>0x</code> or <code>0X</code>.</p>\n      <p>The <code>parseInt</code> function is the <dfn>%parseInt%</dfn> intrinsic object. When the <code>parseInt</code> function is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <emu-const>start</emu-const>).</li><li>Let <var>sign</var> be 1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002D (HYPHEN-MINUS), set <var>sign</var> to -1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from <var>S</var>.</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>radix</var>).</li><li>Let <var>stripPrefix</var> be <emu-val>true</emu-val>.</li><li>If <var>R</var> &#8800; 0, then<ol><li>If <var>R</var> &lt; 2 or <var>R</var> &gt; 36, return <emu-val>NaN</emu-val>.</li><li>If <var>R</var> &#8800; 16, set <var>stripPrefix</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Set <var>R</var> to 10.</li></ol></li><li>If <var>stripPrefix</var> is <emu-val>true</emu-val>, then<ol><li>If the length of <var>S</var> is at least 2 and the first two code units of <var>S</var> are either <emu-val>\"0x\"</emu-val> or <emu-val>\"0X\"</emu-val>, then<ol><li>Remove the first two code units from <var>S</var>.</li><li>Set <var>R</var> to 16.</li></ol></li></ol></li><li>If <var>S</var> contains a code unit that is not a radix-<var>R</var> digit, let <var>Z</var> be the substring of <var>S</var> consisting of all code units before the first such code unit; otherwise, let <var>Z</var> be <var>S</var>.</li><li>If <var>Z</var> is empty, return <emu-val>NaN</emu-val>.</li><li>Let <var>mathInt</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation, using the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if <var>R</var> is 10 and <var>Z</var> contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if <var>R</var> is not 2, 4, 8, 10, 16, or 32, then <var>mathInt</var> may be an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation.)</li><li>If <var>mathInt</var> = 0<sub>&#8477;</sub>, then<ol><li>If <var>sign</var> = -1, return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Let <var>number</var> be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathInt</var>.</li><li>Return <var>sign</var> &#215; <var>number</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseInt</code> may interpret only a leading portion of <var>string</var> as an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value; it ignores any code units that cannot be interpreted as part of the notation of an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ecmascript-overview": {"num": "4.3", "title": "#sec-ecmascript-overview ECMAScript Overview", "html": "<emu-clause id=\"sec-ecmascript-overview\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-overview\">#sec-ecmascript-overview</span> ECMAScript Overview</h1>\n    <p>The following is an informal overview of ECMAScript&#8212;not all parts of the language are described. This overview is not part of the standard proper.</p>\n    <p>ECMAScript is object-based: basic language and <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> facilities are provided by objects, and an ECMAScript program is a cluster of communicating objects. In ECMAScript, an <em>object</em> is a collection of zero or more <em>properties</em> each with <em>attributes</em> that determine how each property can be used&#8212;for example, when the Writable attribute for a property is set to <emu-val>false</emu-val>, any attempt by executed ECMAScript code to assign a different value to the property fails. Properties are containers that hold other objects, <em>primitive values</em>, or <em>functions</em>. A primitive value is a member of one of the following built-in types: <b>Undefined</b>, <b>Null</b>, <b>Boolean</b>, <b>Number</b>, <b>BigInt</b>, <b>String</b>, and <b>Symbol;</b> an object is a member of the built-in type <b>Object</b>; and a function is a callable object. A function that is associated with an object via a property is called a <em>method</em>.</p>\n    <p>ECMAScript defines a collection of <em>built-in objects</em> that round out the definition of ECMAScript entities. These built-in objects include the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>; objects that are fundamental to the <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of the language including <code>Object</code>, <code>Function</code>, <code>Boolean</code>, <code>Symbol</code>, and various <code>Error</code> objects; objects that represent and manipulate numeric values including <code>Math</code>, <code>Number</code>, and <code>Date</code>; the text processing objects <code>String</code> and <code>RegExp</code>; objects that are indexed collections of values including <code>Array</code> and nine different kinds of Typed Arrays whose elements all have a specific numeric data representation; keyed collections including <code>Map</code> and <code>Set</code> objects; objects supporting structured data including the <code>JSON</code> object, <code>ArrayBuffer</code>, <code>SharedArrayBuffer</code>, and <code>DataView</code>; objects supporting control abstractions including generator functions and <code>Promise</code> objects; and reflection objects including <code>Proxy</code> and <code>Reflect</code>.</p>\n    <p>ECMAScript also defines a set of built-in <em>operators</em>. ECMAScript operators include various unary operations, multiplicative operators, additive operators, bitwise shift operators, relational operators, equality operators, binary bitwise operators, binary logical operators, assignment operators, and the comma operator.</p>\n    <p>Large ECMAScript programs are supported by <em>modules</em> which allow a program to be divided into multiple sequences of statements and declarations. Each module explicitly identifies declarations it uses that need to be provided by other modules and which of its declarations are available for use by other modules.</p>\n    <p>ECMAScript syntax intentionally resembles Java syntax. ECMAScript syntax is relaxed to enable it to serve as an easy-to-use scripting language. For example, a variable is not required to have its type declared nor are types associated with properties, and defined functions are not required to have their declarations appear textually before calls to them.</p>\n\n    <div id=\"excluded-sec-objects\"><h1><span class=\"secnum\">4.3.1</span>#sec-objects Objects</h1>...</div><div id=\"excluded-sec-strict-variant-of-ecmascript\"><h1><span class=\"secnum\">4.3.2</span>#sec-strict-variant-of-ecmascript The Strict Variant of ECMAScript</h1>...</div></emu-clause>\n\n  "}, "sec-math.atanh": {"num": "20.3.2.7", "title": "#sec-math.atanh Math.atanh ( x )", "html": "<emu-clause id=\"sec-math.atanh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.atanh\">#sec-math.atanh</span> Math.atanh ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the inverse hyperbolic tangent of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than -1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is greater than 1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is -1, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is +1, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-numeric-types-number-exponentiate": {"num": "6.1.6.1.3", "title": "#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )", "html": "<emu-clause id=\"sec-numeric-types-number-exponentiate\" oldids=\"sec-applying-the-exp-operator\">\n          <span id=\"sec-applying-the-exp-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-exponentiate\">#sec-numeric-types-number-exponentiate</span> Number::exponentiate ( <var>base</var>, <var>exponent</var> )</h1>\n          <p>The abstract operation Number::exponentiate takes arguments <var>base</var> (a Number) and <var>exponent</var> (a Number). It returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of raising <var>base</var> to the power <var>exponent</var>, subject to the following requirements:</p>\n          <ul>\n            <li>If <var>exponent</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>+0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>-0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>NaN</emu-val> and <var>exponent</var> is nonzero, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> &lt; 0 and <var>base</var> is finite and <var>exponent</var> is finite and <var>exponent</var> is not an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>NaN</emu-val>.</li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>The result of <var>base</var> <code>**</code> <var>exponent</var> when <var>base</var> is <emu-val>1</emu-val> or <emu-val>-1</emu-val> and <var>exponent</var> is <emu-val>+Infinity</emu-val> or <emu-val>-Infinity</emu-val> differs from <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The first edition of ECMAScript specified a result of <emu-val>NaN</emu-val> for this operation, whereas later versions of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> specified <emu-val>1</emu-val>. The historical ECMAScript behaviour is preserved for compatibility reasons.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-script-records": {"num": "15.1.8", "title": "#sec-script-records Script Records", "html": "<emu-clause id=\"sec-script-records\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-script-records\">#sec-script-records</span> Script Records</h1>\n\n      <p>A <dfn id=\"script-record\">Script Record</dfn> encapsulates information about a script being evaluated. Each script record contains the fields listed in <emu-xref href=\"#table-script-records\"><a href=\"#table-script-records\" class=\"excluded-xref\" excluded-id=\"table-script-records\">#table-script-records</a></emu-xref>.</p>\n\n      <emu-table id=\"table-script-records\" caption=\"Script Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-script-records\">#table-script-records</span>: <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> Fields</figcaption>\n        <table>\n          <thead>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value Type\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td>\n              [[Realm]]\n            </td>\n            <td>\n              <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n            </td>\n            <td>\n              The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> within which this script was created. <emu-val>undefined</emu-val> if not yet assigned.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Environment]]\n            </td>\n            <td>\n              <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> | <emu-val>undefined</emu-val>\n            </td>\n            <td>\n              The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing the top level bindings for this script. This field is set when the script is instantiated.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[ECMAScriptCode]]\n            </td>\n            <td>\n              a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n            </td>\n            <td>\n              The result of parsing the source text of this script using <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[HostDefined]]\n            </td>\n            <td>\n              Any, default value is <emu-val>undefined</emu-val>.\n            </td>\n            <td>\n              Field reserved for use by <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> environments that need to associate additional information with a script.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-string.prototype.tolocalelowercase": {"num": "21.1.3.23", "title": "#sec-string.prototype.tolocalelowercase String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-string.prototype.tolocalelowercase\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.tolocalelowercase\">#sec-string.prototype.tolocalelowercase</span> String.prototype.toLocaleLowerCase ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>toLocaleLowerCase</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleLowerCase</code> method is used.</p>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>This function works exactly the same as <code>toLowerCase</code> except that its result is intended to yield the correct result for the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>'s current locale, rather than a locale-independent result. There will only be a difference in the few cases (such as Turkish) where the rules for that language conflict with the regular Unicode case mappings.</p>\n        <p>The meaning of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>toLocaleLowerCase</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-function.prototype.tostring": {"num": "19.2.3.5", "title": "#sec-function.prototype.tostring Function.prototype.toString ( )", "html": "<emu-clause id=\"sec-function.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.tostring\">#sec-function.prototype.tostring</span> Function.prototype.toString ( )</h1>\n        <p>When the <code>toString</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>func</var> be the <emu-val>this</emu-val> value.</li><li>If <var>func</var> is a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function exotic object</a></emu-xref> or a <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\">built-in function object</a></emu-xref>, then return an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>. Additionally, if <var>func</var> is a <emu-xref href=\"#sec-well-known-intrinsic-objects\"><a href=\"#sec-well-known-intrinsic-objects\">Well-known Intrinsic Object</a></emu-xref> and is not identified as an anonymous function, the portion of the returned String that would be matched by <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> must be the initial value of the <emu-val>\"name\"</emu-val> property of <var>func</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <var>func</var> has a [[SourceText]] internal slot and <var>func</var>.[[SourceText]] is a sequence of Unicode code points and !&#160;<emu-xref aoid=\"HostHasSourceTextAvailable\"><a href=\"#sec-hosthassourcetextavailable\">HostHasSourceTextAvailable</a></emu-xref>(<var>func</var>) is <emu-val>true</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"UTF16Encode\"><a href=\"#sec-utf16encode\">UTF16Encode</a></emu-xref>(<var>func</var>.[[SourceText]]).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>true</emu-val>, then return an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n        <emu-grammar type=\"definition\"><emu-production name=\"NativeFunction\" id=\"prod-NativeFunction\">\n    <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1fcbc9e6\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-t>[</emu-t><emu-t>native</emu-t><emu-t>code</emu-t><emu-t>]</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      </emu-clause>\n\n      "}, "sec-math.log2": {"num": "20.3.2.23", "title": "#sec-math.log2 Math.log2 ( x )", "html": "<emu-clause id=\"sec-math.log2\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log2\">#sec-math.log2</span> Math.log2 ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the base 2 logarithm of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than 0, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is 1, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-enumerate-object-properties": {"num": "13.7.5.15", "title": "#sec-enumerate-object-properties EnumerateObjectProperties ( O )", "html": "<emu-clause id=\"sec-enumerate-object-properties\" aoid=\"EnumerateObjectProperties\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerate-object-properties\">#sec-enumerate-object-properties</span> EnumerateObjectProperties ( <var>O</var> )</h1>\n        <p>The abstract operation EnumerateObjectProperties takes argument <var>O</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Return an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) whose <code>next</code> method iterates over all the String-valued keys of enumerable properties of <var>O</var>. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.</li></ol></emu-alg>\n        <p>The iterator's <code>throw</code> and <code>return</code> methods are <emu-val>null</emu-val> and are never invoked. The iterator's <code>next</code> method processes object properties to determine whether the property key should be returned as an iterator value. Returned property keys do not include keys that are Symbols. Properties of the target object may be deleted during enumeration. A property that is deleted before it is processed by the iterator's <code>next</code> method is ignored. If new properties are added to the target object during enumeration, the newly added properties are not guaranteed to be processed in the active enumeration. A <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> will be returned by the iterator's <code>next</code> method at most once in any enumeration.</p>\n        <p>Enumerating the properties of the target object includes enumerating properties of its prototype, and the prototype of the prototype, and so on, recursively; but a property of a prototype is not processed if it has the same name as a property that has already been processed by the iterator's <code>next</code> method. The values of [[Enumerable]] attributes are not considered when determining if a property of a prototype object has already been processed. The enumerable property names of prototype objects must be obtained by invoking EnumerateObjectProperties passing the prototype object as the argument. EnumerateObjectProperties must obtain the own property keys of the target object by calling its [[OwnPropertyKeys]] internal method. Property attributes of the target object must be obtained by calling its [[GetOwnProperty]] internal method.</p>\n        <p>In addition, if neither <var>O</var> nor any object in its prototype chain is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>, <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>, <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>, or implementation provided <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, then the iterator must behave as would the iterator given by <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref>(<var>O</var>) until one of the following occurs:</p>\n        <ul>\n          <li>the value of the [[Prototype]] internal slot of <var>O</var> or an object in its prototype chain changes,</li>\n          <li>a property is removed from <var>O</var> or an object in its prototype chain,</li>\n          <li>a property is added to an object in <var>O</var>'s prototype chain, or</li>\n          <li>the value of the [[Enumerable]] attribute of a property of <var>O</var> or an object in its prototype chain changes.</li>\n        </ul>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>ECMAScript implementations are not required to implement the algorithm in <emu-xref href=\"#sec-%foriniteratorprototype%.next\"><a href=\"#sec-%foriniteratorprototype%.next\" class=\"excluded-xref\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</a></emu-xref> directly. They may choose any implementation whose behaviour will not deviate from that algorithm unless one of the constraints in the previous paragraph is violated.</p>\n          <p>The following is an informative definition of an ECMAScript generator function that conforms to these rules:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">EnumerateObjectProperties</span>(<span class=\"hljs-params\">obj</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">Reflect</span>.ownKeys(obj)) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">\"symbol\"</span>) <span class=\"hljs-keyword\">continue</span>;\n    <span class=\"hljs-keyword\">const</span> desc = <span class=\"hljs-built_in\">Reflect</span>.getOwnPropertyDescriptor(obj, key);\n    <span class=\"hljs-keyword\">if</span> (desc) {\n      visited.add(key);\n      <span class=\"hljs-keyword\">if</span> (desc.enumerable) <span class=\"hljs-keyword\">yield</span> key;\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> proto = <span class=\"hljs-built_in\">Reflect</span>.getPrototypeOf(obj);\n  <span class=\"hljs-keyword\">if</span> (proto === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> protoKey <span class=\"hljs-keyword\">of</span> EnumerateObjectProperties(proto)) {\n    <span class=\"hljs-keyword\">if</span> (!visited.has(protoKey)) <span class=\"hljs-keyword\">yield</span> protoKey;\n  }\n}</code></pre>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          The list of exotic objects for which implementations are not required to match <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref> was chosen because implementations historically differed in behaviour for those cases, and agreed in all others.\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.tostring": {"num": "20.1.3.6", "title": "#sec-number.prototype.tostring Number.prototype.toString ( [ radix ] )", "html": "<emu-clause id=\"sec-number.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.tostring\">#sec-number.prototype.tostring</span> Number.prototype.toString ( [ <var>radix</var> ] )</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The optional <var>radix</var> should be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the inclusive range 2 to 36. If <var>radix</var> is <emu-val>undefined</emu-val> the Number 10 is used as the value of <var>radix</var>.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisnumbervalue\"><a href=\"#sec-thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>radix</var> is <emu-val>undefined</emu-val>, let <var>radixNumber</var> be 10.</li><li>Else, let <var>radixNumber</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>radix</var>).</li><li>If <var>radixNumber</var> &lt; 2 or <var>radixNumber</var> &gt; 36, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>radixNumber</var> = 10, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Return the String representation of this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> using the radix specified by <var>radixNumber</var>. Letters <code>a</code>-<code>z</code> are used for digits with values 10 through 35. The precise algorithm is <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>, however the algorithm should be a generalization of that specified in <emu-xref href=\"#sec-numeric-types-number-tostring\"><a href=\"#sec-numeric-types-number-tostring\" class=\"excluded-xref\" excluded-id=\"sec-numeric-types-number-tostring\">#sec-numeric-types-number-tostring</a></emu-xref>.</li></ol></emu-alg>\n        <p>The <code>toString</code> function is not generic; it throws a <emu-val>TypeError</emu-val> exception if its <emu-val>this</emu-val> value is not a Number or a Number object. Therefore, it cannot be transferred to other kinds of objects for use as a method.</p>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>toString</code> method is 1.</p>\n      </emu-clause>\n\n      "}, "sec-math.cosh": {"num": "20.3.2.13", "title": "#sec-math.cosh Math.cosh ( x )", "html": "<emu-clause id=\"sec-math.cosh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.cosh\">#sec-math.cosh</span> Math.cosh ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the hyperbolic cosine of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.cosh(x)</code> is the same as the value of <code>(Math.exp(x) + Math.exp(-x)) / 2</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-debugger-statement-runtime-semantics-evaluation": {"num": "13.16.1", "title": "#sec-debugger-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-debugger-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-debugger-statement-runtime-semantics-evaluation\">#sec-debugger-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Evaluating a <emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt> may allow an implementation to cause a breakpoint when run under a debugger. If a debugger is not present or active this statement has no observable effect.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"DebuggerStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"352e6172\"><emu-t>debugger</emu-t><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> debugging facility is available and enabled, then<ol><li>Perform an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> debugging action.</li><li>Let <var>result</var> be an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> value.</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-memory-model-fundamentals": {"num": "27.1", "title": "#sec-memory-model-fundamentals Memory Model Fundamentals", "html": "<emu-clause id=\"sec-memory-model-fundamentals\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-memory-model-fundamentals\">#sec-memory-model-fundamentals</span> Memory Model Fundamentals</h1>\n    <p>Shared memory accesses (reads and writes) are divided into two groups, atomic accesses and data accesses, defined below. Atomic accesses are sequentially consistent, i.e., there is a strict total ordering of events agreed upon by all agents in an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>. Non-atomic accesses do not have a strict total ordering agreed upon by all agents, i.e., unordered.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>No orderings weaker than sequentially consistent and stronger than unordered, such as release-acquire, are supported.</p>\n    </div></emu-note>\n    <p>A <dfn>Shared Data Block event</dfn> is either a <dfn>ReadSharedMemory</dfn>, <dfn>WriteSharedMemory</dfn>, or <dfn>ReadModifyWriteSharedMemory</dfn> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</p>\n\n    <emu-table id=\"table-readsharedmemory-fields\" caption=\"ReadSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-readsharedmemory-fields\">#table-readsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to read from multiple write events on equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-writesharedmemory-fields\" caption=\"WriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-writesharedmemory-fields\">#table-writesharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const> | <emu-const>Init</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to be read from multiple read events with equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be read by other events.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-rmwsharedmemory-fields\" caption=\"ReadModifyWriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-rmwsharedmemory-fields\">#table-rmwsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const></td>\n            <td>Read-modify-write events are always sequentially consistent.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td><emu-val>true</emu-val></td>\n            <td>Read-modify-write events cannot tear.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read-modify-write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read-modify-write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be passed to [[ModifyOp]].</td>\n          </tr>\n          <tr>\n            <td>[[ModifyOp]]</td>\n            <td>A <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref></td>\n            <td>An abstract closure that returns a modified <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values from a read <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values and [[Payload]].</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>These events are introduced by <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> or by methods on the Atomics object.</p>\n    <p>Some operations may also introduce <dfn>Synchronize</dfn> events. A <dfn>Synchronize event</dfn> has no fields, and exists purely to directly constrain the permitted orderings of other events.</p>\n    <p>In addition to <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and Synchronize events, there are <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref>-specific events.</p>\n    <p>Let the range of a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event be the Set of contiguous integers from its [[ByteIndex]] to [[ByteIndex]] + [[ElementSize]] - 1. Two events' ranges are equal when the events have the same [[Block]], and the ranges are element-wise equal. Two events' ranges are overlapping when the events have the same [[Block]], the ranges are not equal and their intersection is non-empty. Two events' ranges are disjoint when the events do not have the same [[Block]] or their ranges are neither equal nor overlapping.</p>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Examples of <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref>-specific synchronizing events that should be accounted for are: sending a SharedArrayBuffer from one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to another (e.g., by <code>postMessage</code> in a browser), starting and stopping agents, and communicating within the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> via channels other than shared memory. It is assumed those events are appended to <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> during evaluation like the other SharedArrayBuffer events.</p>\n    </div></emu-note>\n    <p>Events are ordered within candidate executions by the relations defined below.</p>\n  </emu-clause>\n\n  "}, "sec-timezoneestring": {"num": "20.4.4.41.3", "title": "#sec-timezoneestring Runtime Semantics: TimeZoneString ( tv )", "html": "<emu-clause id=\"sec-timezoneestring\" aoid=\"TimeZoneString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-timezoneestring\">#sec-timezoneestring</span> Runtime Semantics: TimeZoneString ( <var>tv</var> )</h1>\n          <p>The abstract operation TimeZoneString takes argument <var>tv</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>tv</var> is not <emu-val>NaN</emu-val>.</li><li>Let <var>offset</var> be <emu-xref aoid=\"LocalTZA\"><a href=\"#sec-local-time-zone-adjustment\">LocalTZA</a></emu-xref>(<var>tv</var>, <emu-val>true</emu-val>).</li><li>If <var>offset</var> &#8805; 0, let <var>offsetSign</var> be <emu-val>\"+\"</emu-val>; otherwise, let <var>offsetSign</var> be <emu-val>\"-\"</emu-val>.</li><li>Let <var>offsetMin</var> be the String representation of <emu-xref aoid=\"MinFromTime\"><a href=\"#eqn-MinFromTime\">MinFromTime</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>offset</var>)), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>offsetHour</var> be the String representation of <emu-xref aoid=\"HourFromTime\"><a href=\"#eqn-HourFromTime\">HourFromTime</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>offset</var>)), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>tzName</var> be an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> string that is either the empty String or the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x0020 (SPACE), the code unit 0x0028 (LEFT PARENTHESIS), an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> timezone name, and the code unit 0x0029 (RIGHT PARENTHESIS).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>offsetSign</var>, <var>offsetHour</var>, <var>offsetMin</var>, and <var>tzName</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-conformance": {"num": "2", "title": "#sec-conformance Conformance", "html": "<emu-clause id=\"sec-conformance\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance\">#sec-conformance</span> Conformance</h1>\n  <p>A conforming implementation of ECMAScript must provide and support all the types, values, objects, properties, functions, and program syntax and semantics described in this specification.</p>\n  <p>A conforming implementation of ECMAScript must interpret source text input in conformance with the latest version of the Unicode Standard and ISO/IEC 10646.</p>\n  <p>A conforming implementation of ECMAScript that provides an application programming interface (API) that supports programs that need to adapt to the linguistic and cultural conventions used by different human languages and countries must implement the interface defined by the most recent edition of ECMA-402 that is compatible with this specification.</p>\n  <p>A conforming implementation of ECMAScript may provide additional types, values, objects, properties, and functions beyond those described in this specification. In particular, a conforming implementation of ECMAScript may provide properties not described in this specification, and values for those properties, for objects that are described in this specification.</p>\n  <p>A conforming implementation of ECMAScript may support program and regular expression syntax not described in this specification. In particular, a conforming implementation of ECMAScript may support program syntax that makes use of any &#8220;future reserved words&#8221; noted in subclause <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref> of this specification.</p>\n  <p>A conforming implementation of ECMAScript must not implement any extension that is listed as a Forbidden Extension in subclause <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>.</p>\n  <p>A conforming implementation of ECMAScript must not redefine any facilities that are not <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>, <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref>, or <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref>.</p>\n</emu-clause>\n\n"}, "sec-%typedarray%.prototype.sort": {"num": "22.2.3.26", "title": "#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.sort\">#sec-%typedarray%.prototype.sort</span> %TypedArray%.prototype.sort ( <var>comparefn</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> is a distinct function that, except as described below, implements the same requirements as those of <code>Array.prototype.sort</code> as defined in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>. The implementation of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> specification may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. The only internal methods of the <emu-val>this</emu-val> value that the algorithm may call are [[Get]] and [[Set]].</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function. These steps are used instead of the entry steps in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>obj</var>).</li><li>Let <var>len</var> be <var>obj</var>.[[ArrayLength]].</li></ol></emu-alg>\n        <p>The <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> sort order condition for exotic objects is not applied by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>.</p>\n        <p>The following version of <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> is used by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>. It performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>.</p>\n        <p>The abstract operation TypedArraySortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> and <var>buffer</var> values of the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Both <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) are Number or both are BigInt.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>Return <var>v</var>.</li></ol></li><li>If <var>x</var> and <var>y</var> are both <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return 1.</li><li>If <var>y</var> is <emu-val>NaN</emu-val>, return -1.</li><li>If <var>x</var> &lt; <var>y</var>, return -1.</li><li>If <var>x</var> &gt; <var>y</var>, return 1.</li><li>If <var>x</var> is <emu-val>-0</emu-val> and <var>y</var> is <emu-val>+0</emu-val>, return -1.</li><li>If <var>x</var> is <emu-val>+0</emu-val> and <var>y</var> is <emu-val>-0</emu-val>, return 1.</li><li>Return <emu-val>+0</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Because <emu-val>NaN</emu-val> always compares greater than any other value, <emu-val>NaN</emu-val> property values always sort to the end of the result when <var>comparefn</var> is not provided.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.atan": {"num": "20.3.2.6", "title": "#sec-math.atan Math.atan ( x )", "html": "<emu-clause id=\"sec-math.atan\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.atan\">#sec-math.atan</span> Math.atan ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the arc tangent of <var>x</var>. The result is expressed in radians and ranges from -&#960; / 2 to +&#960; / 2.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing +&#960; / 2.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing to -&#960; / 2.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-hostimportmoduledynamically": {"num": "15.2.1.19", "title": "#sec-hostimportmoduledynamically Runtime Semantics: HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )", "html": "<emu-clause id=\"sec-hostimportmoduledynamically\" aoid=\"HostImportModuleDynamically\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostimportmoduledynamically\">#sec-hostimportmoduledynamically</span> Runtime Semantics: HostImportModuleDynamically ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> )</h1>\n        <p>HostImportModuleDynamically is a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> abstract operation that performs any necessary setup work in order to make available the module corresponding to the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String, <var>specifier</var>, occurring within the context of the script or module represented by the <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> <var>referencingScriptOrModule</var>. (<var>referencingScriptOrModule</var> may also be <emu-val>null</emu-val>, if there is no active script or module when the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression occurs.) It then performs <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> to finish the dynamic import process.</p>\n\n        <p>The implementation of HostImportModuleDynamically must conform to the following requirements:</p>\n\n        <ul>\n          <li>\n            The abstract operation must always complete normally with <emu-val>undefined</emu-val>. Success or failure must instead be signaled as discussed below.\n          </li>\n          <li>\n            The <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref> must conform to one of the two following sets of requirements:\n            <dl>\n              <dt>Success path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>)).</li>\n\n                  <li>Any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must complete normally.</li>\n\n                  <li>The completion value of any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must be a module which has already been evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion.</li>\n                </ul>\n              </dd>\n\n              <dt>Failure path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>), with the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> representing the cause of failure.</li>\n                </ul>\n              </dd>\n            </dl>\n          </li>\n          <li>\n            If the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref> takes the success path once for a given <var>referencingScriptOrModule</var>, <var>specifier</var> pair, it must always do so for subsequent calls.\n          </li>\n          <li>\n            The operation must not call <var>promiseCapability</var>.[[Resolve]] or <var>promiseCapability</var>.[[Reject]], but instead must treat <var>promiseCapability</var> as an opaque identifying value to be passed through to <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>.\n          </li>\n        </ul>\n\n        <p>The actual process performed is <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref>, but typically consists of performing whatever I/O operations are necessary to allow <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> to synchronously retrieve the appropriate <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and then calling its Evaluate concrete method. This might require performing similar normalization as <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> does.</p>\n      </emu-clause>\n\n      "}, "sec-abstract-module-records": {"num": "15.2.1.15", "title": "#sec-abstract-module-records Abstract Module Records", "html": "<emu-clause id=\"sec-abstract-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-module-records\">#sec-abstract-module-records</span> Abstract Module Records</h1>\n        <p>A <dfn>Module Record</dfn> encapsulates structural information about the imports and exports of a single module. This information is used to link the imports and exports of sets of connected modules. A Module Record includes four fields that are only used when evaluating a module.</p>\n        <p>For specification purposes Module Record values are values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> specification type and can be thought of as existing in a simple object-oriented hierarchy where Module Record is an abstract class with both abstract and concrete subclasses. This specification defines the abstract subclass named <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> and its concrete subclass named <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>. Other specifications and implementations may define additional Module Record subclasses corresponding to alternative module definition facilities that they defined.</p>\n        <p>Module Record defines the fields listed in <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref>. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref>. All Module definition subclasses must provide concrete implementations of these abstract methods.</p>\n        <emu-table id=\"table-36\" caption=\"Module Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-36\">#table-36</span>: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[Realm]]\n              </td>\n              <td>\n                <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> within which this module was created. <emu-val>undefined</emu-val> if not yet assigned.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Environment]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing the top level bindings for this module. This field is set when the module is linked.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Namespace]]\n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The Module Namespace Object (<emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>) if one has been created for this module. Otherwise <emu-val>undefined</emu-val>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HostDefined]]\n              </td>\n              <td>\n                Any, default value is <emu-val>undefined</emu-val>.\n              </td>\n              <td>\n                Field reserved for use by <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> environments that need to associate additional information with a module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-37\" caption=\"Abstract Methods of Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-37\">#table-37</span>: Abstract Methods of Module Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetExportedNames([<var>exportStarSet</var>])\n              </td>\n              <td>\n                Return a list of all names that are either directly or indirectly exported from this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                ResolveExport(<var>exportName</var> [, <var>resolveSet</var>])\n              </td>\n              <td>\n                <p>Return the binding of a name exported by this module. Bindings are represented by a <dfn id=\"resolvedbinding-record\">ResolvedBinding Record</dfn>, of the form { [[Module]]: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. Return <emu-val>null</emu-val> if the name cannot be resolved, or <emu-val>\"ambiguous\"</emu-val> if multiple bindings were found.</p>\n                <p>Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result if it completes normally.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Link()\n              </td>\n              <td>\n                <p>Prepare the module for evaluation by transitively resolving all module dependencies and creating a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Evaluate()\n              </td>\n              <td>\n                <p>If this module has already been evaluated successfully, return <emu-val>undefined</emu-val>; if it has already been evaluated unsuccessfully, throw the exception that was produced. Otherwise, transitively evaluate all module dependencies of this module and then evaluate this module.</p>\n                <p>Link must have completed successfully prior to invoking this method.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-math.sqrt": {"num": "20.3.2.32", "title": "#sec-math.sqrt Math.sqrt ( x )", "html": "<emu-clause id=\"sec-math.sqrt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.sqrt\">#sec-math.sqrt</span> Math.sqrt ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the square root of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than 0, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-non-ecmascript-functions": {"num": "10.2.2", "title": "#sec-non-ecmascript-functions Non-ECMAScript Functions", "html": "<emu-clause id=\"sec-non-ecmascript-functions\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-non-ecmascript-functions\">#sec-non-ecmascript-functions</span> Non-ECMAScript Functions</h1>\n      <p>An ECMAScript implementation may support the evaluation of function exotic objects whose evaluative behaviour is expressed in some <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> form of executable code other than via ECMAScript code. Whether a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an ECMAScript code function or a non-ECMAScript function is not semantically observable from the perspective of an ECMAScript code function that calls or is called by such a non-ECMAScript function.</p>\n    </emu-clause>\n  "}, "sec-array.prototype.tolocalestring": {"num": "22.1.3.29", "title": "#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-array.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.tolocalestring\">#sec-array.prototype.tolocalestring</span> Array.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>Array.prototype.toLocaleString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleString</code> method is used.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The first edition of ECMA-402 did not include a replacement specification for the <code>Array.prototype.toLocaleString</code> method.</p>\n        </div></emu-note>\n        <p>The meanings of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>array</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>array</var>).</li><li>Let <var>separator</var> be the String value for the list-separator String appropriate for the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>'s current locale (this is derived in an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> way).</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>If <var>k</var> &gt; 0, then<ol><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>R</var> and <var>separator</var>.</li></ol></li><li>Let <var>nextElement</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>If <var>nextElement</var> is not <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>nextElement</var>, <emu-val>\"toLocaleString\"</emu-val>)).</li><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>R</var> and <var>S</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>R</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The elements of the array are converted to Strings using their <code>toLocaleString</code> methods, and these Strings are then concatenated, separated by occurrences of a separator String that has been derived in an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> locale-specific way. The result of calling this function is intended to be analogous to the result of <code>toString</code>, except that the result of this function is intended to be locale-specific.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>toLocaleString</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.expm1": {"num": "20.3.2.15", "title": "#sec-math.expm1 Math.expm1 ( x )", "html": "<emu-clause id=\"sec-math.expm1\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.expm1\">#sec-math.expm1</span> Math.expm1 ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of subtracting 1 from the exponential function of <var>x</var> (<var>e</var> raised to the power of <var>x</var>, where <var>e</var> is the base of the natural logarithms). The result is computed in a way that is accurate even when the value of x is close 0.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is -1.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-terms-and-definitions": {"num": "4.4", "title": "#sec-terms-and-definitions Terms and Definitions", "html": "<emu-clause id=\"sec-terms-and-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-terms-and-definitions\">#sec-terms-and-definitions</span> Terms and Definitions</h1>\n    <p>For the purposes of this document, the following terms and definitions apply.</p>\n\n    <div id=\"excluded-sec-terms-and-definitions-implementation-approximated\"><h1><span class=\"secnum\">4.4.1</span>#sec-terms-and-definitions-implementation-approximated implementation-approximated</h1>...</div><div id=\"excluded-sec-terms-and-definitions-implementation-defined\"><h1><span class=\"secnum\">4.4.2</span>#sec-terms-and-definitions-implementation-defined implementation-defined</h1>...</div><div id=\"excluded-sec-terms-and-definitions-host-defined\"><h1><span class=\"secnum\">4.4.3</span>#sec-terms-and-definitions-host-defined host-defined</h1>...</div><div id=\"excluded-sec-type\"><h1><span class=\"secnum\">4.4.4</span>#sec-type type</h1>...</div><div id=\"excluded-sec-primitive-value\"><h1><span class=\"secnum\">4.4.5</span>#sec-primitive-value primitive value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-object\"><h1><span class=\"secnum\">4.4.6</span>#sec-terms-and-definitions-object object</h1>...</div><div id=\"excluded-sec-constructor\"><h1><span class=\"secnum\">4.4.7</span>#sec-constructor constructor</h1>...</div><div id=\"excluded-sec-terms-and-definitions-prototype\"><h1><span class=\"secnum\">4.4.8</span>#sec-terms-and-definitions-prototype prototype</h1>...</div><div id=\"excluded-sec-ordinary-object\"><h1><span class=\"secnum\">4.4.9</span>#sec-ordinary-object ordinary object</h1>...</div><div id=\"excluded-sec-exotic-object\"><h1><span class=\"secnum\">4.4.10</span>#sec-exotic-object exotic object</h1>...</div><div id=\"excluded-sec-standard-object\"><h1><span class=\"secnum\">4.4.11</span>#sec-standard-object standard object</h1>...</div><div id=\"excluded-sec-built-in-object\"><h1><span class=\"secnum\">4.4.12</span>#sec-built-in-object built-in object</h1>...</div><div id=\"excluded-sec-undefined-value\"><h1><span class=\"secnum\">4.4.13</span>#sec-undefined-value undefined value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-undefined-type\"><h1><span class=\"secnum\">4.4.14</span>#sec-terms-and-definitions-undefined-type Undefined type</h1>...</div><div id=\"excluded-sec-null-value\"><h1><span class=\"secnum\">4.4.15</span>#sec-null-value null value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-null-type\"><h1><span class=\"secnum\">4.4.16</span>#sec-terms-and-definitions-null-type Null type</h1>...</div><div id=\"excluded-sec-terms-and-definitions-boolean-value\"><h1><span class=\"secnum\">4.4.17</span>#sec-terms-and-definitions-boolean-value Boolean value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-boolean-type\"><h1><span class=\"secnum\">4.4.18</span>#sec-terms-and-definitions-boolean-type Boolean type</h1>...</div><div id=\"excluded-sec-boolean-object\"><h1><span class=\"secnum\">4.4.19</span>#sec-boolean-object Boolean object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-string-value\"><h1><span class=\"secnum\">4.4.20</span>#sec-terms-and-definitions-string-value String value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-string-type\"><h1><span class=\"secnum\">4.4.21</span>#sec-terms-and-definitions-string-type String type</h1>...</div><div id=\"excluded-sec-string-object\"><h1><span class=\"secnum\">4.4.22</span>#sec-string-object String object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-number-value\"><h1><span class=\"secnum\">4.4.23</span>#sec-terms-and-definitions-number-value Number value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-number-type\"><h1><span class=\"secnum\">4.4.24</span>#sec-terms-and-definitions-number-type Number type</h1>...</div><div id=\"excluded-sec-number-object\"><h1><span class=\"secnum\">4.4.25</span>#sec-number-object Number object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-infinity\"><h1><span class=\"secnum\">4.4.26</span>#sec-terms-and-definitions-infinity Infinity</h1>...</div><div id=\"excluded-sec-terms-and-definitions-nan\"><h1><span class=\"secnum\">4.4.27</span>#sec-terms-and-definitions-nan NaN</h1>...</div><div id=\"excluded-sec-terms-and-definitions-bigint-value\"><h1><span class=\"secnum\">4.4.28</span>#sec-terms-and-definitions-bigint-value BigInt value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-bigint-type\"><h1><span class=\"secnum\">4.4.29</span>#sec-terms-and-definitions-bigint-type BigInt type</h1>...</div><div id=\"excluded-sec-bigint-object\"><h1><span class=\"secnum\">4.4.30</span>#sec-bigint-object BigInt object</h1>...</div><div id=\"excluded-sec-symbol-value\"><h1><span class=\"secnum\">4.4.31</span>#sec-symbol-value Symbol value</h1>...</div><div id=\"excluded-sec-terms-and-definitions-symbol-type\"><h1><span class=\"secnum\">4.4.32</span>#sec-terms-and-definitions-symbol-type Symbol type</h1>...</div><div id=\"excluded-sec-symbol-object\"><h1><span class=\"secnum\">4.4.33</span>#sec-symbol-object Symbol object</h1>...</div><div id=\"excluded-sec-terms-and-definitions-function\"><h1><span class=\"secnum\">4.4.34</span>#sec-terms-and-definitions-function function</h1>...</div><div id=\"excluded-sec-built-in-function\"><h1><span class=\"secnum\">4.4.35</span>#sec-built-in-function built-in function</h1>...</div><div id=\"excluded-sec-property\"><h1><span class=\"secnum\">4.4.36</span>#sec-property property</h1>...</div><div id=\"excluded-sec-method\"><h1><span class=\"secnum\">4.4.37</span>#sec-method method</h1>...</div><div id=\"excluded-sec-built-in-method\"><h1><span class=\"secnum\">4.4.38</span>#sec-built-in-method built-in method</h1>...</div><div id=\"excluded-sec-attribute\"><h1><span class=\"secnum\">4.4.39</span>#sec-attribute attribute</h1>...</div><div id=\"excluded-sec-own-property\"><h1><span class=\"secnum\">4.4.40</span>#sec-own-property own property</h1>...</div><div id=\"excluded-sec-inherited-property\"><h1><span class=\"secnum\">4.4.41</span>#sec-inherited-property inherited property</h1>...</div></emu-clause>\n\n  "}, "sec-math.cbrt": {"num": "20.3.2.9", "title": "#sec-math.cbrt Math.cbrt ( x )", "html": "<emu-clause id=\"sec-math.cbrt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.cbrt\">#sec-math.cbrt</span> Math.cbrt ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the cube root of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-math.acosh": {"num": "20.3.2.3", "title": "#sec-math.acosh Math.acosh ( x )", "html": "<emu-clause id=\"sec-math.acosh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.acosh\">#sec-math.acosh</span> Math.acosh ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the inverse hyperbolic cosine of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If x is less than 1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If x is 1, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-array.prototype.sort": {"num": "22.1.3.27", "title": "#sec-array.prototype.sort Array.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-array.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</span> Array.prototype.sort ( <var>comparefn</var> )</h1>\n        <p>The elements of this array are sorted. The sort must be stable (that is, elements that compare equal must remain in their original order). If <var>comparefn</var> is not <emu-val>undefined</emu-val>, it should be a function that accepts two arguments <var>x</var> and <var>y</var> and returns a negative value if <var>x</var> &lt; <var>y</var>, zero if <var>x</var> = <var>y</var>, or a positive value if <var>x</var> &gt; <var>y</var>.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>obj</var>).</li></ol></emu-alg>\n        <p>Within this specification of the <code>sort</code> method, an object, <var>obj</var>, is said to be <em>sparse</em> if the following algorithm returns <emu-val>true</emu-val>:</p>\n        <emu-alg><ol><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> in the range 0 &#8804; <var>i</var> &lt; <var>len</var>, do<ol><li>Let <var>elem</var> be <var>obj</var>.[[GetOwnProperty]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>i</var>)).</li><li>If <var>elem</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <p>The <em>sort order</em> is the ordering, after completion of this function, of the <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> property values of <var>obj</var> whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> indexes are less than <var>len</var>. The result of the <code>sort</code> function is then determined as follows:</p>\n        <p>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and is not a consistent comparison function for the elements of this array (see below), the sort order is <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>. The sort order is also <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> if <var>comparefn</var> is <emu-val>undefined</emu-val> and <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> does not act as a consistent comparison function.</p>\n        <p>Let <var>proto</var> be <var>obj</var>.[[GetPrototypeOf]](). If <var>proto</var> is not <emu-val>null</emu-val> and there exists an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> such that all of the conditions below are satisfied then the sort order is <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>:</p>\n        <ul>\n          <li>\n            <var>obj</var> is sparse\n          </li>\n          <li>\n            0 &#8804; <var>j</var> &lt; <var>len</var>\n          </li>\n          <li>\n            <emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>proto</var>, <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>j</var>)) is <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>The sort order is also <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> if <var>obj</var> is sparse and any of the following conditions are true:</p>\n        <ul>\n          <li>\n            <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>obj</var>) is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            Any <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> property of <var>obj</var> whose name is a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var> is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> whose [[Configurable]] attribute is <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <p>The sort order is also <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> if any of the following conditions are true:</p>\n        <ul>\n          <li>\n            If <var>obj</var> is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> (including Proxy exotic objects) whose behaviour for [[Get]], [[Set]], [[Delete]], and [[GetOwnProperty]] is not the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> implementation of these internal methods.\n          </li>\n          <li>\n            If any index property of <var>obj</var> whose name is a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> or is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> whose [[Writable]] attribute is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and the application of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> to any value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> modifies <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and all applications of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, to any specific value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>, do not produce the same result.\n          </li>\n        </ul>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Perform an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> sequence of calls to the <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>, <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>, <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>, and <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref> abstract operation with <var>obj</var> as the first argument, and to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> (described below), such that:<ul><li>The property key argument for each call to <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>, <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>, <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>, or <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref> is the string representation of a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var>.</li><li>The <code>Throw</code> argument for every call to <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref> is <emu-val>true</emu-val>.</li><li>The arguments for calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> are values returned by a previous call to the <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref> abstract operation, unless the properties accessed by those previous calls did not exist according to <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>. If both prospective arguments to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> correspond to non-existent properties, use <emu-val>+0</emu-val> instead of calling <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>. If only the first prospective argument is non-existent use +1. If only the second prospective argument is non-existent use -1.</li><li>If <var>obj</var> is not sparse then <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref> must not be called.</li><li>If an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> is returned from any of these operations, it is immediately returned as the value of this function.</li></ul></li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        <p>Unless the sort order is specified above to be <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>, the returned object must have the following two characteristics:</p>\n        <ul>\n          <li>\n            There must be some mathematical permutation &#960; of the nonnegative integers less than <var>len</var>, such that for every nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> less than <var>len</var>, if property <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> existed, then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn> is exactly the same value as <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn>. But if property <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> did not exist, then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn> does not exist.\n          </li>\n          <li>\n            Then for all nonnegative integers <var>j</var> and <var>k</var>, each less than <var>len</var>, if <emu-eqn class=\"inline\"><emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>(old[<var>j</var>], old[<var>k</var>]) &lt; 0</emu-eqn> (see <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> below), then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)] &lt; new[&#960;(<var>k</var>)]</emu-eqn>.\n          </li>\n        </ul>\n        <p>Here the notation <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is used to refer to the hypothetical result of calling <emu-eqn class=\"inline\"><emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>j</var>)</emu-eqn> before this function is executed, and the notation <emu-eqn class=\"inline\">new[<var>j</var>]</emu-eqn> to refer to the hypothetical result of calling <emu-eqn class=\"inline\"><emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>j</var>)</emu-eqn> after this function has been executed.</p>\n        <p>A function <var>comparefn</var> is a consistent comparison function for a set of values <var>S</var> if all of the requirements below are met for all values <var>a</var>, <var>b</var>, and <var>c</var> (possibly the same value) in the set <var>S</var>: The notation <emu-eqn class=\"inline\"><var>a</var> &lt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &lt; 0</emu-eqn>; <emu-eqn class=\"inline\"><var>a</var> =<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) = 0</emu-eqn> (of either sign); and <emu-eqn class=\"inline\"><var>a</var> &gt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &gt; 0</emu-eqn>.</p>\n        <ul>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) always returns the same value <var>v</var> when given a specific pair of values <var>a</var> and <var>b</var> as its two arguments. Furthermore, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, and <var>v</var> is not <emu-val>NaN</emu-val>. Note that this implies that exactly one of <var>a</var> &lt;<sub>CF</sub> <var>b</var>, <var>a</var> =<sub>CF</sub> <var>b</var>, and <var>a</var> &gt;<sub>CF</sub> <var>b</var> will be true for a given pair of <var>a</var> and <var>b</var>.\n          </li>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) does not modify <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            <var>a</var> =<sub>CF</sub> <var>a</var> (reflexivity)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var>, then <var>b</var> =<sub>CF</sub> <var>a</var> (symmetry)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var> and <var>b</var> =<sub>CF</sub> <var>c</var>, then <var>a</var> =<sub>CF</sub> <var>c</var> (transitivity of =<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &lt;<sub>CF</sub> <var>b</var> and <var>b</var> &lt;<sub>CF</sub> <var>c</var>, then <var>a</var> &lt;<sub>CF</sub> <var>c</var> (transitivity of &lt;<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &gt;<sub>CF</sub> <var>b</var> and <var>b</var> &gt;<sub>CF</sub> <var>c</var>, then <var>a</var> &gt;<sub>CF</sub> <var>c</var> (transitivity of &gt;<sub>CF</sub>)\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The above conditions are necessary and sufficient to ensure that <var>comparefn</var> divides the set <var>S</var> into equivalence classes and that these equivalence classes are totally ordered.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>sort</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-sortcompare\"><h1><span class=\"secnum\">22.1.3.27.1</span>#sec-sortcompare Runtime Semantics: SortCompare ( x, y )</h1>...</div></emu-clause>\n\n      "}, "sec-math.acos": {"num": "20.3.2.2", "title": "#sec-math.acos Math.acos ( x )", "html": "<emu-clause id=\"sec-math.acos\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.acos\">#sec-math.acos</span> Math.acos ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the arc cosine of <var>x</var>. The result is expressed in radians and ranges from <emu-val>+0</emu-val> to +&#960;.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is greater than 1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than -1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is exactly 1, the result is <emu-val>+0</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-error-handling-and-language-extensions": {"num": "16", "title": "#sec-error-handling-and-language-extensions Error Handling and Language Extensions", "html": "<emu-clause id=\"sec-error-handling-and-language-extensions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</span> Error Handling and Language Extensions</h1>\n  <p>An implementation must report most errors at the time the relevant ECMAScript language construct is evaluated. An <dfn id=\"early-error\">early error</dfn> is an error that can be detected and reported prior to the evaluation of any construct in the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> containing the error. The presence of an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> prevents the evaluation of the construct. An implementation must report early errors in a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> as part of parsing that <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> in <emu-xref aoid=\"ParseScript\"><a href=\"#sec-parse-script\">ParseScript</a></emu-xref>. Early errors in a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> are reported at the point when the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> would be evaluated and the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is never initialized. Early errors in <b>eval</b> code are reported at the time <code>eval</code> is called and prevent evaluation of the <b>eval</b> code. All errors that are not early errors are runtime errors.</p>\n  <p>An implementation must report as an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> any occurrence of a condition that is listed in a &#8220;Static Semantics: Early Errors&#8221; subclause of this specification.</p>\n  <p>An implementation shall not treat other kinds of errors as early errors even if the compiler can prove that a construct cannot execute without error under any circumstances. An implementation may issue an early warning in such a case, but it should not report the error until the relevant construct is actually executed.</p>\n  <p>An implementation shall report all errors as specified, except for the following:</p>\n  <ul>\n    <li>\n      Except as restricted in <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>, a <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> or implementation may extend <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> syntax, <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> syntax, and regular expression pattern or flag syntax. To permit this, all operations (such as calling <code>eval</code>, using a regular expression literal, or using the Function or RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>) that are allowed to throw <emu-val>SyntaxError</emu-val> are permitted to exhibit <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> behaviour instead of throwing <emu-val>SyntaxError</emu-val> when they encounter a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> extension to the script syntax or regular expression pattern or flag syntax.\n    </li>\n    <li>\n      Except as restricted in <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>, a <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> or implementation may provide additional types, values, objects, properties, and functions beyond those described in this specification. This may cause constructs (such as looking up a variable in the global scope) to have <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> behaviour instead of throwing an error (such as <emu-val>ReferenceError</emu-val>).\n    </li>\n  </ul>\n\n  <div id=\"excluded-sec-forbidden-extensions\"><h1><span class=\"secnum\">16.1</span>#sec-forbidden-extensions Forbidden Extensions</h1>...</div></emu-clause>\n\n"}, "sec-math.random": {"num": "20.3.2.27", "title": "#sec-math.random Math.random ( )", "html": "<emu-clause id=\"sec-math.random\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.random\">#sec-math.random</span> Math.random ( )</h1>\n        <p>Returns a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> with positive sign, greater than or equal to 0 but less than 1, chosen randomly or pseudo randomly with approximately uniform distribution over that range, using an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> algorithm or strategy. This function takes no arguments.</p>\n        <p>Each <code>Math.random</code> function created for distinct realms must produce a distinct sequence of values from successive calls.</p>\n      </emu-clause>\n\n      "}, "sec-detacharraybuffer": {"num": "24.1.2.3", "title": "#sec-detacharraybuffer DetachArrayBuffer ( arrayBuffer [ , key ] )", "html": "<emu-clause id=\"sec-detacharraybuffer\" aoid=\"DetachArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-detacharraybuffer\">#sec-detacharraybuffer</span> DetachArrayBuffer ( <var>arrayBuffer</var> [ , <var>key</var> ] )</h1>\n        <p>The abstract operation DetachArrayBuffer takes argument <var>arrayBuffer</var> and optional argument <var>key</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>arrayBuffer</var>) is Object and it has [[ArrayBufferData]], [[ArrayBufferByteLength]], and [[ArrayBufferDetachKey]] internal slots.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li>If <var>key</var> is not present, set <var>key</var> to <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>arrayBuffer</var>.[[ArrayBufferDetachKey]], <var>key</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferData]] to <emu-val>null</emu-val>.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferByteLength]] to 0.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Detaching an ArrayBuffer instance disassociates the <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref> used as its backing store from the instance and sets the byte length of the buffer to 0. No operations defined by this specification use the DetachArrayBuffer abstract operation. However, an ECMAScript <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> or implementation may define such operations.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-parse-script": {"num": "15.1.9", "title": "#sec-parse-script ParseScript ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parse-script\" aoid=\"ParseScript\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parse-script\">#sec-parse-script</span> ParseScript ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n      <p>The abstract operation ParseScript takes arguments <var>sourceText</var>, <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Parse <var>sourceText</var> using <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and analyse the parse result for any Early Error conditions. If the parse was successful and no early errors were found, let <var>body</var> be the resulting parse tree. Otherwise, let <var>body</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of one or more <emu-val>SyntaxError</emu-val> objects representing the parsing errors and/or early errors. Parsing and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> detection may be interweaved in an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> manner. If more than one parsing error or <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> is present, the number and ordering of error objects in the list is <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>, but at least one must be present.</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Return <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[ECMAScriptCode]]: <var>body</var>, [[HostDefined]]: <var>hostDefined</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An implementation may parse script source text and analyse it for Early Error conditions prior to evaluation of ParseScript for that script source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseScript upon that source text.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-additional-ecmascript-features-for-web-browsers": {"num": "B", "title": "#sec-additional-ecmascript-features-for-web-browsers Additional ECMAScript Features for Web rowsers", "html": "<emu-annex id=\"sec-additional-ecmascript-features-for-web-browsers\" namespace=\"annexB\" normative=\"\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-ecmascript-features-for-web-browsers\">#sec-additional-ecmascript-features-for-web-browsers</span> Additional ECMAScript Features for Web Browsers</h1>\n  <p>The ECMAScript language syntax and semantics defined in this annex are required when the ECMAScript <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> is a web browser. The content of this annex is normative but optional if the ECMAScript <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> is not a web browser.</p>\n  <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n    <p>This annex describes various legacy features and other characteristics of web browser ECMAScript hosts. All of the language features and behaviours specified in this annex have one or more undesirable characteristics and in the absence of legacy usage would be removed from this specification. However, the usage of these features by large numbers of existing web pages means that web browsers must continue to support them. The specifications in this annex define the requirements for interoperable implementations of these legacy features.</p>\n    <p>These features are not considered part of the core ECMAScript language. Programmers should not use or assume the existence of these features and behaviours when writing new ECMAScript code. ECMAScript implementations are discouraged from implementing these features unless the implementation is part of a web browser or is required to run the same legacy ECMAScript code that web browsers encounter.</p>\n  </div></emu-note>\n\n  <div id=\"excluded-sec-additional-syntax\"><h1><span class=\"secnum\">B.1</span>#sec-additional-syntax Additional Syntax</h1>...</div><div id=\"excluded-sec-additional-built-in-properties\"><h1><span class=\"secnum\">B.2</span>#sec-additional-built-in-properties Additional Built-in Properties</h1>...</div><div id=\"excluded-sec-other-additional-features\"><h1><span class=\"secnum\">B.3</span>#sec-other-additional-features Other Additional Features</h1>...</div></emu-annex>\n\n"}, "sec-math.cos": {"num": "20.3.2.12", "title": "#sec-math.cos Math.cos ( x )", "html": "<emu-clause id=\"sec-math.cos\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.cos\">#sec-math.cos</span> Math.cos ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the cosine of <var>x</var>. The argument is expressed in radians.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is 1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-web-scripting": {"num": "4.1", "title": "#sec-web-scripting Web Scripting", "html": "<emu-clause id=\"sec-web-scripting\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-scripting\">#sec-web-scripting</span> Web Scripting</h1>\n    <p>A web browser provides an ECMAScript <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref> for client-side computation including, for instance, objects that represent windows, menus, pop-ups, dialog boxes, text areas, anchors, frames, history, cookies, and input/output. Further, the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref> provides a means to attach scripting code to events such as change of focus, page and image loading, unloading, error and abort, selection, form submission, and mouse actions. Scripting code appears within the HTML and the displayed page is a combination of user interface elements and fixed and computed text and images. The scripting code is reactive to user interaction, and there is no need for a main program.</p>\n    <p>A web server provides a different <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref> for server-side computation including objects representing requests, clients, and files; and mechanisms to lock and share data. By using browser-side and server-side scripting together, it is possible to distribute computation between the client and server while providing a customized user interface for a Web-based application.</p>\n    <p>Each Web browser and server that supports ECMAScript supplies its own <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>, completing the ECMAScript execution environment.</p>\n  </emu-clause>\n\n  "}, "sec-math.log": {"num": "20.3.2.20", "title": "#sec-math.log Math.log ( x )", "html": "<emu-clause id=\"sec-math.log\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log\">#sec-math.log</span> Math.log ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the natural logarithm of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than 0, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val> or <emu-val>-0</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is 1, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-math.asinh": {"num": "20.3.2.5", "title": "#sec-math.asinh Math.asinh ( x )", "html": "<emu-clause id=\"sec-math.asinh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.asinh\">#sec-math.asinh</span> Math.asinh ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the inverse hyperbolic sine of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If x is <emu-val>-&#8734;</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-global-object": {"num": "18", "title": "#sec-global-object The Global Object", "html": "<emu-clause id=\"sec-global-object\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-object\">#sec-global-object</span> The Global Object</h1>\n  <p>The <dfn>global object</dfn>:</p>\n  <ul>\n    <li>is created before control enters any <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li>\n    <li>does not have a [[Construct]] internal method; it cannot be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> with the <code>new</code> operator.</li>\n    <li>does not have a [[Call]] internal method; it cannot be invoked as a function.</li>\n    <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref>.</li>\n    <li>may have <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> defined properties in addition to the properties defined in this specification. This may include a property whose value is the global object itself.</li>\n  </ul>\n\n  <div id=\"excluded-sec-value-properties-of-the-global-object\"><h1><span class=\"secnum\">18.1</span>#sec-value-properties-of-the-global-object Value Properties of the Global Object</h1>...</div><div id=\"excluded-sec-function-properties-of-the-global-object\"><h1><span class=\"secnum\">18.2</span>#sec-function-properties-of-the-global-object Function Properties of the Global Object</h1>...</div><div id=\"excluded-sec-constructor-properties-of-the-global-object\"><h1><span class=\"secnum\">18.3</span>#sec-constructor-properties-of-the-global-object Constructor Properties of the Global Object</h1>...</div><div id=\"excluded-sec-other-properties-of-the-global-object\"><h1><span class=\"secnum\">18.4</span>#sec-other-properties-of-the-global-object Other Properties of the Global Object</h1>...</div></emu-clause>\n\n"}, "sec-local-time-zone-adjustment": {"num": "20.4.1.7", "title": "#sec-local-time-zone-adjustment LocalTZA ( t, isUTC )", "html": "<emu-clause id=\"sec-local-time-zone-adjustment\" aoid=\"LocalTZA\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-local-time-zone-adjustment\">#sec-local-time-zone-adjustment</span> LocalTZA ( <var>t</var>, <var>isUTC</var> )</h1>\n        <p>LocalTZA( <var>t</var>, <var>isUTC</var> ) is an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> algorithm that returns the local time zone adjustment, or offset, in milliseconds. The local political rules for standard time and daylight saving time in effect at <var>t</var> should be used to determine the result in the way specified in this section.</p>\n        <p>When <var>isUTC</var> is true, <emu-eqn class=\"inline\">LocalTZA( <var>t</var><sub>UTC</sub>, true )</emu-eqn> should return the offset of the local time zone from UTC measured in milliseconds at time represented by <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn>. When the result is added to <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn>, it should yield the corresponding Number <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn>.</p>\n        <p>When <var>isUTC</var> is false, <emu-eqn class=\"inline\">LocalTZA( <var>t</var><sub>local</sub>, false )</emu-eqn> should return the offset of the local time zone from UTC measured in milliseconds at local time represented by Number <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn>. When the result is subtracted from <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn>, it should yield the corresponding <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn>.</p>\n        <p>Input <var>t</var> is nominally a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> but may be any <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>. This can occur when <var>isUTC</var> is false and <var>t</var><sub>local</sub> represents a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> that is already offset outside of the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range at the range boundaries. The algorithm must not limit <var>t</var><sub>local</sub> to the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range, so that such inputs are supported.</p>\n        <p>When <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn> represents local time repeating multiple times at a negative time zone transition (e.g. when the daylight saving time ends or the time zone offset is decreased due to a time zone rule change) or skipped local time at a positive time zone transitions (e.g. when the daylight saving time starts or the time zone offset is increased due to a time zone rule change), <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn> must be interpreted using the time zone offset before the transition.</p>\n        <p>If an implementation does not support a conversion described above or if political rules for time <var>t</var> are not available within the implementation, the result must be 0.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>It is recommended that implementations use the time zone information of the IANA Time Zone Database <a href=\"https://www.iana.org/time-zones/\">https://www.iana.org/time-zones/</a>.</p>\n          <p>1:30 AM on November 5, 2017 in America/New_York is repeated twice (fall backward), but it must be interpreted as 1:30 AM UTC-04 instead of 1:30 AM UTC-05. LocalTZA(<emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref>(<emu-xref aoid=\"MakeDate\"><a href=\"#sec-makedate\">MakeDate</a></emu-xref>(<emu-xref aoid=\"MakeDay\"><a href=\"#sec-makeday\">MakeDay</a></emu-xref>(2017, 10, 5), <emu-xref aoid=\"MakeTime\"><a href=\"#sec-maketime\">MakeTime</a></emu-xref>(1, 30, 0, 0))), false) is <emu-eqn class=\"inline\">-4 &#215; <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref></emu-eqn>.</p>\n          <p>2:30 AM on March 12, 2017 in America/New_York does not exist, but it must be interpreted as 2:30 AM UTC-05 (equivalent to 3:30 AM UTC-04). LocalTZA(<emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref>(<emu-xref aoid=\"MakeDate\"><a href=\"#sec-makedate\">MakeDate</a></emu-xref>(<emu-xref aoid=\"MakeDay\"><a href=\"#sec-makeday\">MakeDay</a></emu-xref>(2017, 2, 12), <emu-xref aoid=\"MakeTime\"><a href=\"#sec-maketime\">MakeTime</a></emu-xref>(2, 30, 0, 0))), false) is <emu-eqn class=\"inline\">-5 &#215; <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref></emu-eqn>.</p>\n          <p>Local time zone offset values may be positive <i>or</i> negative.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-initializehostdefinedrealm": {"num": "8.5", "title": "#sec-initializehostdefinedrealm InitializeHostDefinedRealm ( )", "html": "<emu-clause id=\"sec-initializehostdefinedrealm\" aoid=\"InitializeHostDefinedRealm\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializehostdefinedrealm\">#sec-initializehostdefinedrealm</span> InitializeHostDefinedRealm ( )</h1>\n    <p>The abstract operation InitializeHostDefinedRealm takes no arguments. It performs the following steps when called:</p>\n\n    <emu-alg><ol><li>Let <var>realm</var> be <emu-xref aoid=\"CreateRealm\"><a href=\"#sec-createrealm\">CreateRealm</a></emu-xref>().</li><li>Let <var>newContext</var> be a new <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>newContext</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>newContext</var> to <var>realm</var>.</li><li>Set the ScriptOrModule of <var>newContext</var> to <emu-val>null</emu-val>.</li><li>Push <var>newContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>newContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If the <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> requires use of an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> to serve as <var>realm</var>'s <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, let <var>global</var> be such an object created in a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> manner. Otherwise, let <var>global</var> be <emu-val>undefined</emu-val>, indicating that an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> should be created as the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li><li>If the <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> requires that the <code>this</code> binding in <var>realm</var>'s global scope return an object other than the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, let <var>thisValue</var> be such an object created in a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> manner. Otherwise, let <var>thisValue</var> be <emu-val>undefined</emu-val>, indicating that <var>realm</var>'s global <code>this</code> binding should be the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li><li>Perform <emu-xref aoid=\"SetRealmGlobalObject\"><a href=\"#sec-setrealmglobalobject\">SetRealmGlobalObject</a></emu-xref>(<var>realm</var>, <var>global</var>, <var>thisValue</var>).</li><li>Let <var>globalObj</var> be ?&#160;<emu-xref aoid=\"SetDefaultGlobalBindings\"><a href=\"#sec-setdefaultglobalbindings\">SetDefaultGlobalBindings</a></emu-xref>(<var>realm</var>).</li><li>Create any <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> properties on <var>globalObj</var>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-math.tan": {"num": "20.3.2.33", "title": "#sec-math.tan Math.tan ( x )", "html": "<emu-clause id=\"sec-math.tan\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.tan\">#sec-math.tan</span> Math.tan ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the tangent of <var>x</var>. The argument is expressed in radians.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val> or <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-math.asin": {"num": "20.3.2.4", "title": "#sec-math.asin Math.asin ( x )", "html": "<emu-clause id=\"sec-math.asin\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.asin\">#sec-math.asin</span> Math.asin ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the arc sine of <var>x</var>. The result is expressed in radians and ranges from -&#960; / 2 to +&#960; / 2.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is greater than 1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than -1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-hostenqueuepromisejob": {"num": "8.4.1", "title": "#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )", "html": "<emu-clause id=\"sec-hostenqueuepromisejob\" aoid=\"HostEnqueuePromiseJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostenqueuepromisejob\">#sec-hostenqueuepromisejob</span> HostEnqueuePromiseJob ( <var>job</var>, <var>realm</var> )</h1>\n      <p>HostEnqueuePromiseJob is a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> abstract operation that schedules the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> <var>job</var> to be performed, at some future time. The Abstract Closures used with this algorithm are intended to be related to the handling of Promises, or otherwise, to be scheduled with equal priority to Promise handling operations.</p>\n      <p>The <var>realm</var> parameter is passed through to hosts with no normative requirements; it is either <emu-val>null</emu-val> or a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</p>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        The <var>realm</var> for PromiseResolveThenableJobs is the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the <var>then</var> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The <var>realm</var> for PromiseReactionJobs is the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the handler if the handler is not <emu-val>undefined</emu-val>. Otherwise the <var>realm</var> is <emu-val>null</emu-val>. The WHATWG HTML specification (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>), for example, uses <var>realm</var> to check for ability to run script and to prepare to run script.\n      </div></emu-note>\n\n      <p>The implementation of HostEnqueuePromiseJob must conform to the requirements in <emu-xref href=\"#sec-jobs\"><a href=\"#sec-jobs\" class=\"excluded-xref\" excluded-id=\"sec-jobs\">#sec-jobs</a></emu-xref>. Additionally, Jobs must be scheduled in FIFO order, with Jobs running in the same order as the HostEnqueuePromiseJob invocations which scheduled them.</p>\n    </emu-clause>\n  "}, "sec-nativeerror-object-structure": {"num": "19.5.6", "title": "#sec-nativeerror-object-structure NativeError Object Structure", "html": "<emu-clause id=\"sec-nativeerror-object-structure\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-nativeerror-object-structure\">#sec-nativeerror-object-structure</span> <var>NativeError</var> Object Structure</h1>\n      <p>When an ECMAScript implementation detects a runtime error, it throws a new instance of one of the <var>NativeError</var> objects defined in <emu-xref href=\"#sec-native-error-types-used-in-this-standard\"><a href=\"#sec-native-error-types-used-in-this-standard\" class=\"excluded-xref\" excluded-id=\"sec-native-error-types-used-in-this-standard\">#sec-native-error-types-used-in-this-standard</a></emu-xref>. Each of these objects has the structure described below, differing only in the name used as the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> name instead of <var>NativeError</var>, in the <emu-val>\"name\"</emu-val> property of the prototype object, and in the <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> <emu-val>\"message\"</emu-val> property of the prototype object.</p>\n      <p>For each error object, references to <var>NativeError</var> in the definition should be replaced with the appropriate error object name from <emu-xref href=\"#sec-native-error-types-used-in-this-standard\"><a href=\"#sec-native-error-types-used-in-this-standard\" class=\"excluded-xref\" excluded-id=\"sec-native-error-types-used-in-this-standard\">#sec-native-error-types-used-in-this-standard</a></emu-xref>.</p>\n\n      <div id=\"excluded-sec-nativeerror-constructors\"><h1><span class=\"secnum\">19.5.6.1</span>#sec-nativeerror-constructors The NativeError Constructors</h1>...</div><div id=\"excluded-sec-properties-of-the-nativeerror-constructors\"><h1><span class=\"secnum\">19.5.6.2</span>#sec-properties-of-the-nativeerror-constructors Properties of the NativeError Constructors</h1>...</div><div id=\"excluded-sec-properties-of-the-nativeerror-prototype-objects\"><h1><span class=\"secnum\">19.5.6.3</span>#sec-properties-of-the-nativeerror-prototype-objects Properties of the NativeError Prototype Objects</h1>...</div><div id=\"excluded-sec-properties-of-nativeerror-instances\"><h1><span class=\"secnum\">19.5.6.4</span>#sec-properties-of-nativeerror-instances Properties of NativeError Instances</h1>...</div></emu-clause>\n  "}, "sec-hostfinalizeimportmeta": {"num": "12.3.12.1.2", "title": "#sec-hostfinalizeimportmeta Runtime Semantics: HostFinalizeImportMeta ( importMeta, moduleRecord )", "html": "<emu-clause id=\"sec-hostfinalizeimportmeta\" aoid=\"HostFinalizeImportMeta\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostfinalizeimportmeta\">#sec-hostfinalizeimportmeta</span> Runtime Semantics: HostFinalizeImportMeta ( <var>importMeta</var>, <var>moduleRecord</var> )</h1>\n          <p>HostFinalizeImportMeta is a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> abstract operation that allows hosts to perform any extraordinary operations to prepare the object returned from <code>import.meta</code>.</p>\n\n          <p>Most hosts will be able to simply define <emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>, and leave HostFinalizeImportMeta with its default behaviour. However, HostFinalizeImportMeta provides an \"escape hatch\" for hosts which need to directly manipulate the object before it is exposed to ECMAScript code.</p>\n\n          <p>The implementation of HostFinalizeImportMeta must conform to the following requirements:</p>\n          <ul>\n            <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostFinalizeImportMeta is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n        </emu-clause>\n      "}, "sec-createdynamicfunction": {"num": "19.2.1.1.1", "title": "#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> Runtime Semantics: CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (either <emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Generator%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGenerator%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1,<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Let <var>sourceText</var> be !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>sourceString</var>).</li><li>Perform the following substeps in an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> order, possibly interleaving parsing and error detection:<ol><li>Let <var>parameters</var> be the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>P</var>), using <var>parameterGoal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>body</var> be the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>bodyString</var>), using <var>goal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>strict</var> be ContainsUseStrict of <var>body</var>.</li><li>If any <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> errors are detected for <var>parameters</var> or <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception. If <var>strict</var> is <emu-val>true</emu-val>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> are applied.</li><li>If <var>strict</var> is <emu-val>true</emu-val> and IsSimpleParameterList of <var>parameters</var> is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If any element of the BoundNames of <var>parameters</var> also occurs in the LexicallyDeclaredNames of <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>kind</var> is <emu-const>generator</emu-const> or <emu-const>asyncGenerator</emu-const>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>kind</var> is <emu-const>async</emu-const> or <emu-const>asyncGenerator</emu-const>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>If BoundNames of <var>parameters</var> contains any duplicate elements, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li></ol></li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>sourceText</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Functions whose <var>kind</var> is <emu-const>async</emu-const> are not constructible and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>CreateDynamicFunction defines a <emu-val>\"prototype\"</emu-val> property on any function it creates whose <var>kind</var> is not <emu-const>async</emu-const> to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function SourceText Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function SourceText Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><emu-const>normal</emu-const></td><td><emu-val>\"function\"</emu-val></td></tr>\n                <tr><td><emu-const>generator</emu-const></td><td><emu-val>\"function*\"</emu-val></td></tr>\n                <tr><td><emu-const>async</emu-const></td><td><emu-val>\"async function\"</emu-val></td></tr>\n                <tr><td><emu-const>asyncGenerator</emu-const></td><td><emu-val>\"async function*\"</emu-val></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-date.prototype.tolocaledatestring": {"num": "20.4.4.38", "title": "#sec-date.prototype.tolocaledatestring Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-date.prototype.tolocaledatestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.tolocaledatestring\">#sec-date.prototype.tolocaledatestring</span> Date.prototype.toLocaleDateString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>Date.prototype.toLocaleDateString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleDateString</code> method is used.</p>\n        <p>This function returns a String value. The contents of the String are <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>, but are intended to represent the &#8220;date&#8221; portion of the Date in the current time zone in a convenient, human-readable form that corresponds to the conventions of the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>'s current locale.</p>\n        <p>The meaning of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n      </emu-clause>\n\n      "}, "sec-overview": {"num": "4", "title": "#sec-overview Overview", "html": "<emu-clause id=\"sec-overview\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-overview\">#sec-overview</span> Overview</h1>\n  <p>This section contains a non-normative overview of the ECMAScript language.</p>\n  <p>ECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>. ECMAScript as defined here is not intended to be computationally self-sufficient; indeed, there are no provisions in this specification for input of external data or output of computed results. Instead, it is expected that the computational environment of an ECMAScript program will provide not only the objects and other facilities described in this specification but also certain environment-specific objects, whose description and behaviour are beyond the scope of this specification except to indicate that they may provide certain properties that can be accessed and certain functions that can be called from an ECMAScript program.</p>\n  <p>ECMAScript was originally designed to be used as a scripting language, but has become widely used as a general-purpose programming language. A <em>scripting language</em> is a programming language that is used to manipulate, customize, and automate the facilities of an existing system. In such systems, useful functionality is already available through a user interface, and the scripting language is a mechanism for exposing that functionality to program control. In this way, the existing system is said to provide a <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref> of objects and facilities, which completes the capabilities of the scripting language. A scripting language is intended for use by both professional and non-professional programmers.</p>\n  <p>ECMAScript was originally designed to be a <em>Web scripting language</em>, providing a mechanism to enliven Web pages in browsers and to perform server computation as part of a Web-based client-server architecture. ECMAScript is now used to provide core scripting capabilities for a variety of <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> environments. Therefore the core language is specified in this document apart from any particular <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>.</p>\n  <p>ECMAScript usage has moved beyond simple scripting and it is now used for the full spectrum of programming tasks in many different environments and scales. As the usage of ECMAScript has expanded, so have the features and facilities it provides. ECMAScript is now a fully featured general-purpose programming language.</p>\n  <p>Some of the facilities of ECMAScript are similar to those used in other programming languages; in particular C, Java&#8482;, Self, and Scheme as described in:</p>\n  <p>ISO/IEC 9899:1996, <i>Programming Languages &#8212; C</i>.</p>\n  <p>Gosling, James, Bill Joy and Guy Steele. <i>The Java<sup>&#8482;</sup> Language Specification</i>. Addison Wesley Publishing Co., 1996.</p>\n  <p>Ungar, David, and Smith, Randall B. Self: The Power of Simplicity. <i>OOPSLA '87 Conference Proceedings</i>, pp. 227-241, Orlando, FL, October 1987.</p>\n  <p><i>IEEE Standard for the Scheme Programming Language</i>. IEEE Std 1178-1990.</p>\n\n  <div id=\"excluded-sec-web-scripting\"><h1><span class=\"secnum\">4.1</span>#sec-web-scripting Web Scripting</h1>...</div><div id=\"excluded-sec-hosts-and-implementations\"><h1><span class=\"secnum\">4.2</span>#sec-hosts-and-implementations Hosts and Implementations</h1>...</div><div id=\"excluded-sec-ecmascript-overview\"><h1><span class=\"secnum\">4.3</span>#sec-ecmascript-overview ECMAScript Overview</h1>...</div><div id=\"excluded-sec-terms-and-definitions\"><h1><span class=\"secnum\">4.4</span>#sec-terms-and-definitions Terms and Definitions</h1>...</div><div id=\"excluded-sec-organization-of-this-specification\"><h1><span class=\"secnum\">4.5</span>#sec-organization-of-this-specification Organization of This Specification</h1>...</div></emu-clause>\n\n"}, "sec-math.hypot": {"num": "20.3.2.18", "title": "#sec-math.hypot Math.hypot ( value1, value2, ...values )", "html": "<emu-clause id=\"sec-math.hypot\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.hypot\">#sec-math.hypot</span> Math.hypot ( <var>value1</var>, <var>value2</var>, ...<var>values</var> )</h1>\n        <p><code>Math.hypot</code> returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the square root of the sum of squares of its arguments.</p>\n        <ul>\n          <li>\n            If no arguments are passed, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If any argument is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If any argument is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If no argument is <emu-val>+&#8734;</emu-val> or <emu-val>-&#8734;</emu-val>, and any argument is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If all arguments are either <emu-val>+0</emu-val> or <emu-val>-0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Implementations should take care to avoid the loss of precision from overflows and underflows that are prone to occur in naive implementations when this function is called with two or more arguments.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.atan2": {"num": "20.3.2.8", "title": "#sec-math.atan2 Math.atan2 ( y, x )", "html": "<emu-clause id=\"sec-math.atan2\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.atan2\">#sec-math.atan2</span> Math.atan2 ( <var>y</var>, <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the arc tangent of the quotient <emu-eqn class=\"inline\"><var>y</var> / <var>x</var></emu-eqn> of the arguments <var>y</var> and <var>x</var>, where the signs of <var>y</var> and <var>x</var> are used to determine the quadrant of the result. Note that it is intentional and traditional for the two-argument arc tangent function that the argument named <var>y</var> be first and the argument named <var>x</var> be second. The result is expressed in radians and ranges from -&#960; to +&#960;.</p>\n        <ul>\n          <li>\n            If either <var>x</var> or <var>y</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> &gt; 0 and <var>x</var> is <emu-val>+0</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing +&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> &gt; 0 and <var>x</var> is <emu-val>-0</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing +&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+0</emu-val> and <var>x</var> &gt; 0, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+0</emu-val> and <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+0</emu-val> and <var>x</var> is <emu-val>-0</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing +&#960;.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+0</emu-val> and <var>x</var> &lt; 0, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing +&#960;.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-0</emu-val> and <var>x</var> &gt; 0, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-0</emu-val> and <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-0</emu-val> and <var>x</var> is <emu-val>-0</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing -&#960;.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-0</emu-val> and <var>x</var> &lt; 0, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing -&#960;.\n          </li>\n          <li>\n            If <var>y</var> &lt; 0 and <var>x</var> is <emu-val>+0</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing -&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> &lt; 0 and <var>x</var> is <emu-val>-0</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing -&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> &gt; 0 and <var>y</var> is finite and <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> &gt; 0 and <var>y</var> is finite and <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing +&#960;.\n          </li>\n          <li>\n            If <var>y</var> &lt; 0 and <var>y</var> is finite and <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>y</var> &lt; 0 and <var>y</var> is finite and <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing -&#960;.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+&#8734;</emu-val> and <var>x</var> is finite, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing +&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-&#8734;</emu-val> and <var>x</var> is finite, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing -&#960; / 2.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+&#8734;</emu-val> and <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing +&#960; / 4.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>+&#8734;</emu-val> and <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing +3&#960; / 4.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-&#8734;</emu-val> and <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing -&#960; / 4.\n          </li>\n          <li>\n            If <var>y</var> is <emu-val>-&#8734;</emu-val> and <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing -3&#960; / 4.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-IsHTMLDDA-internal-slot": {"num": "B.3.7", "title": "#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot\">#sec-IsHTMLDDA-internal-slot</span> The [[IsHTMLDDA]] Internal Slot</h1>\n      <p>An <dfn>[[IsHTMLDDA]] internal slot</dfn> may exist on <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> objects. Objects with an [[IsHTMLDDA]] internal slot behave like <emu-val>undefined</emu-val> in the <emu-xref href=\"#sec-toboolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref> and <emu-xref href=\"#sec-abstract-equality-comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and when used as an operand for the <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code> operator</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Objects with an [[IsHTMLDDA]] internal slot are never created by this specification. However, the <a href=\"https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all\"><code>document.all</code> object</a> in web browsers is a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> with this slot that exists for web compatibility purposes. There are no other known examples of this type of object and implementations should not create any with the exception of <code>document.all</code>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-IsHTMLDDA-internal-slot-to-boolean\"><h1><span class=\"secnum\">B.3.7.1</span>#sec-IsHTMLDDA-internal-slot-to-boolean Changes to ToBoolean</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-aec\"><h1><span class=\"secnum\">B.3.7.2</span>#sec-IsHTMLDDA-internal-slot-aec Changes to Abstract Equality Comparison</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-typeof\"><h1><span class=\"secnum\">B.3.7.3</span>#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator</h1>...</div></emu-annex>\n  "}, "sec-parsemodule": {"num": "15.2.1.17.1", "title": "#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parsemodule\" aoid=\"ParseModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsemodule\">#sec-parsemodule</span> ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n          <p>The abstract operation ParseModule takes arguments <var>sourceText</var> (ECMAScript source text), <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Parse <var>sourceText</var> using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and analyse the parse result for any Early Error conditions. If the parse was successful and no early errors were found, let <var>body</var> be the resulting parse tree. Otherwise, let <var>body</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of one or more <emu-val>SyntaxError</emu-val> objects representing the parsing errors and/or early errors. Parsing and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> detection may be interweaved in an <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> manner. If more than one parsing error or <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> is present, the number and ordering of error objects in the list is <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>, but at least one must be present.</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Let <var>requestedModules</var> be the ModuleRequests of <var>body</var>.</li><li>Let <var>importEntries</var> be ImportEntries of <var>body</var>.</li><li>Let <var>importedBoundNames</var> be <emu-xref aoid=\"ImportedLocalNames\"><a href=\"#sec-importedlocalnames\">ImportedLocalNames</a></emu-xref>(<var>importEntries</var>).</li><li>Let <var>indirectExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>localExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>starExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>exportEntries</var> be ExportEntries of <var>body</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>ee</var> in <var>exportEntries</var>, do<ol><li>If <var>ee</var>.[[ModuleRequest]] is <emu-val>null</emu-val>, then<ol><li>If <var>ee</var>.[[LocalName]] is not an element of <var>importedBoundNames</var>, then<ol><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>Let <var>ie</var> be the element of <var>importEntries</var> whose [[LocalName]] is the same as <var>ee</var>.[[LocalName]].</li><li>If <var>ie</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>NOTE: This is a re-export of an imported module namespace object.</li><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>NOTE: This is a re-export of a single name.</li><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>ie</var>.[[ModuleRequest]], [[ImportName]]: <var>ie</var>.[[ImportName]], [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>ee</var>.[[ExportName]] } to <var>indirectExportEntries</var>.</li></ol></li></ol></li></ol></li><li>Else if <var>ee</var>.[[ImportName]] is <emu-val>\"*\"</emu-val> and <var>ee</var>.[[ExportName]] is <emu-val>null</emu-val>, then<ol><li>Append <var>ee</var> to <var>starExportEntries</var>.</li></ol></li><li>Else,<ol><li>Append <var>ee</var> to <var>indirectExportEntries</var>.</li></ol></li></ol></li><li>Return <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[Namespace]]: <emu-val>undefined</emu-val>, [[Status]]: <emu-const>unlinked</emu-const>, [[EvaluationError]]: <emu-val>undefined</emu-val>, [[HostDefined]]: <var>hostDefined</var>, [[ECMAScriptCode]]: <var>body</var>, [[Context]]: <emu-const>empty</emu-const>, [[ImportMeta]]: <emu-const>empty</emu-const>, [[RequestedModules]]: <var>requestedModules</var>, [[ImportEntries]]: <var>importEntries</var>, [[LocalExportEntries]]: <var>localExportEntries</var>, [[IndirectExportEntries]]: <var>indirectExportEntries</var>, [[StarExportEntries]]: <var>starExportEntries</var>, [[DFSIndex]]: <emu-val>undefined</emu-val>, [[DFSAncestorIndex]]: <emu-val>undefined</emu-val> }.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An implementation may parse module source text and analyse it for Early Error conditions prior to the evaluation of ParseModule for that module source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseModule upon that source text.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-date.prototype.tolocalestring": {"num": "20.4.4.39", "title": "#sec-date.prototype.tolocalestring Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-date.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.tolocalestring\">#sec-date.prototype.tolocalestring</span> Date.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>Date.prototype.toLocaleString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleString</code> method is used.</p>\n        <p>This function returns a String value. The contents of the String are <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>, but are intended to represent the Date in the current time zone in a convenient, human-readable form that corresponds to the conventions of the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>'s current locale.</p>\n        <p>The meaning of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n      </emu-clause>\n\n      "}, "sec-additional-built-in-properties": {"num": "B.2", "title": "#sec-additional-built-in-properties Additional Built-in Properties", "html": "<emu-annex id=\"sec-additional-built-in-properties\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</span> Additional Built-in Properties</h1>\n    <p>When the ECMAScript <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> is a web browser the following additional properties of the standard built-in objects are defined.</p>\n\n    <div id=\"excluded-sec-additional-properties-of-the-global-object\"><h1><span class=\"secnum\">B.2.1</span>#sec-additional-properties-of-the-global-object Additional Properties of the Global Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-object.prototype-object\"><h1><span class=\"secnum\">B.2.2</span>#sec-additional-properties-of-the-object.prototype-object Additional Properties of the Object.prototype Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-string.prototype-object\"><h1><span class=\"secnum\">B.2.3</span>#sec-additional-properties-of-the-string.prototype-object Additional Properties of the String.prototype Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-date.prototype-object\"><h1><span class=\"secnum\">B.2.4</span>#sec-additional-properties-of-the-date.prototype-object Additional Properties of the Date.prototype Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-regexp.prototype-object\"><h1><span class=\"secnum\">B.2.5</span>#sec-additional-properties-of-the-regexp.prototype-object Additional Properties of the RegExp.prototype Object</h1>...</div></emu-annex>\n\n  "}, "sec-math.log10": {"num": "20.3.2.22", "title": "#sec-math.log10 Math.log10 ( x )", "html": "<emu-clause id=\"sec-math.log10\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log10\">#sec-math.log10</span> Math.log10 ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the base 10 logarithm of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than 0, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is 1, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-ecmascript-language-types-number-type": {"num": "6.1.6.1", "title": "#sec-ecmascript-language-types-number-type The Number Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-number-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</span> The Number Type</h1>\n        <p>The Number type has exactly 18437736874454810627<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> + 3<sub>&#8477;</sub></emu-eqn>) values, representing the double-precision 64-bit format <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9007199254740990<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) distinct &#8220;Not-a-Number&#8221; values of the IEEE Standard are represented in ECMAScript as a single special <emu-val>NaN</emu-val> value. (Note that the <emu-val>NaN</emu-val> value is produced by the program expression <code>NaN</code>.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>; to ECMAScript code, all <emu-val>NaN</emu-val> values are indistinguishable from each other.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The bit pattern that might be observed in an ArrayBuffer (see <emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>) or a SharedArrayBuffer (see <emu-xref href=\"#sec-sharedarraybuffer-objects\"><a href=\"#sec-sharedarraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-sharedarraybuffer-objects\">#sec-sharedarraybuffer-objects</a></emu-xref>) after a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> has been stored into it is not necessarily the same as the internal representation of that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> used by the ECMAScript implementation.</p>\n        </div></emu-note>\n        <p>There are two other special values, called <emu-val>positive Infinity</emu-val> and <emu-val>negative Infinity</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>, respectively. (Note that these two infinite Number values are produced by the program expressions <code>+Infinity</code> (or simply <code>Infinity</code>) and <code>-Infinity</code>.)</p>\n        <p>The other 18437736874454810624<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup></emu-eqn>) values are called the finite numbers. Half of these are positive numbers and half are negative numbers; for every finite positive <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> there is a corresponding negative value having the same magnitude.</p>\n        <p>Note that there is both a <emu-val>positive zero</emu-val> and a <emu-val>negative zero</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+0</emu-val> and <emu-val>-0</emu-val>, respectively. (Note that these two different zero Number values are produced by the program expressions <code>+0</code> (or simply <code>0</code>) and <code>-0</code>.)</p>\n        <p>The 18437736874454810622<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) finite nonzero values are of two kinds:</p>\n        <p>18428729675200069632<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>54<sub>&#8477;</sub></sup></emu-eqn>) of them are normalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub>&#8477;</sub> or -1<sub>&#8477;</sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> but not less than 2<sub>&#8477;</sub><sup>52<sub>&#8477;</sub></sup>, and <var>e</var> is a <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> ranging from -1074<sub>&#8477;</sub> to 971<sub>&#8477;</sub>, inclusive.</p>\n        <p>The remaining 9007199254740990<sub>&#8477;</sub> (that is, <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) values are denormalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub>&#8477;</sub> or -1<sub>&#8477;</sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub>&#8477;</sub><sup>52<sub>&#8477;</sub></sup>, and <var>e</var> is -1074<sub>&#8477;</sub>.</p>\n        <p>Note that all the positive and negative mathematical integers whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type (indeed, the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> 0 has two representations, <emu-val>+0</emu-val> and <emu-val>-0</emu-val>).</p>\n        <p>A finite number has an <em>odd significand</em> if it is nonzero and the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> <var>m</var> used to express it (in one of the two forms shown above) is odd. Otherwise, it has an <em>even significand</em>.</p>\n        <p>In this specification, the phrase &#8220;the <dfn id=\"number-value\">Number value</dfn> for <var>x</var>&#8221; where <var>x</var> represents an exact real mathematical quantity (which might even be an irrational number such as &#960;) means a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> chosen in the following manner. Consider the set of all finite values of the Number type, with <emu-val>-0</emu-val> removed and with two additional values added to it that are not representable in the Number type, namely 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> (which is <emu-eqn class=\"inline\">+1<sub>&#8477;</sub> &#215; 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> &#215; 2<sub>&#8477;</sub><sup>971<sub>&#8477;</sub></sup></emu-eqn>) and <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> (which is <emu-eqn class=\"inline\">-1<sub>&#8477;</sub> &#215; 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> &#215; 2<sub>&#8477;</sub><sup>971<sub>&#8477;</sub></sup></emu-eqn>). Choose the member of this set that is closest in value to <var>x</var>. If two values of the set are equally close, then the one with an even significand is chosen; for this purpose, the two extra values 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> and <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> are considered to have even significands. Finally, if 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> was chosen, replace it with <emu-val>+&#8734;</emu-val>; if <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> was chosen, replace it with <emu-val>-&#8734;</emu-val>; if <emu-val>+0</emu-val> was chosen, replace it with <emu-val>-0</emu-val> if and only if <var>x</var> is less than zero; any other chosen value is used unchanged. The result is the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>. (This procedure corresponds exactly to the behaviour of the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode.)</p>\n        <p>Some ECMAScript operators deal only with integers in specific ranges such as <emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn> through <emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>, inclusive, or in the range 0 through <emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>, inclusive. These operators accept any value of the Number type but first convert each such value to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the expected range. See the descriptions of the numeric conversion operations in <emu-xref href=\"#sec-type-conversion\"><a href=\"#sec-type-conversion\" class=\"excluded-xref\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</a></emu-xref>.</p>\n\n        <p>The Number::unit value is <emu-val>1</emu-val>.</p>\n\n        <div id=\"excluded-sec-numeric-types-number-unaryMinus\"><h1><span class=\"secnum\">6.1.6.1.1</span>#sec-numeric-types-number-unaryMinus Number::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.1.2</span>#sec-numeric-types-number-bitwiseNOT Number::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-exponentiate\"><h1><span class=\"secnum\">6.1.6.1.3</span>#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-number-multiply\"><h1><span class=\"secnum\">6.1.6.1.4</span>#sec-numeric-types-number-multiply Number::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-divide\"><h1><span class=\"secnum\">6.1.6.1.5</span>#sec-numeric-types-number-divide Number::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-remainder\"><h1><span class=\"secnum\">6.1.6.1.6</span>#sec-numeric-types-number-remainder Number::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-number-add\"><h1><span class=\"secnum\">6.1.6.1.7</span>#sec-numeric-types-number-add Number::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-subtract\"><h1><span class=\"secnum\">6.1.6.1.8</span>#sec-numeric-types-number-subtract Number::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-leftShift\"><h1><span class=\"secnum\">6.1.6.1.9</span>#sec-numeric-types-number-leftShift Number::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-signedRightShift\"><h1><span class=\"secnum\">6.1.6.1.10</span>#sec-numeric-types-number-signedRightShift Number::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.1.11</span>#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-lessThan\"><h1><span class=\"secnum\">6.1.6.1.12</span>#sec-numeric-types-number-lessThan Number::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-equal\"><h1><span class=\"secnum\">6.1.6.1.13</span>#sec-numeric-types-number-equal Number::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValue\"><h1><span class=\"secnum\">6.1.6.1.14</span>#sec-numeric-types-number-sameValue Number::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValueZero\"><h1><span class=\"secnum\">6.1.6.1.15</span>#sec-numeric-types-number-sameValueZero Number::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-numberbitwiseop\"><h1><span class=\"secnum\">6.1.6.1.16</span>#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.1.17</span>#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.1.18</span>#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.1.19</span>#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-tostring\"><h1><span class=\"secnum\">6.1.6.1.20</span>#sec-numeric-types-number-tostring Number::toString ( x )</h1>...</div></emu-clause>\n\n      "}, "sec-math.log1p": {"num": "20.3.2.21", "title": "#sec-math.log1p Math.log1p ( x )", "html": "<emu-clause id=\"sec-math.log1p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log1p\">#sec-math.log1p</span> Math.log1p ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the natural logarithm of 1 + <var>x</var>. The result is computed in a way that is accurate even when the value of x is close to zero.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is less than -1, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If x is -1, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-bigint.prototype.tostring": {"num": "20.2.3.3", "title": "#sec-bigint.prototype.tostring BigInt.prototype.toString ( [ radix ] )", "html": "<emu-clause id=\"sec-bigint.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.prototype.tostring\">#sec-bigint.prototype.tostring</span> BigInt.prototype.toString ( [ <var>radix</var> ] )</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The optional <var>radix</var> should be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the inclusive range 2 to 36. If <var>radix</var> is <emu-val>undefined</emu-val> the Number 10 is used as the value of <var>radix</var>.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisbigintvalue\"><a href=\"#sec-thisbigintvalue\">thisBigIntValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>radix</var> is <emu-val>undefined</emu-val>, let <var>radixNumber</var> be 10.</li><li>Else, let <var>radixNumber</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>radix</var>).</li><li>If <var>radixNumber</var> &lt; 2 or <var>radixNumber</var> &gt; 36, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>radixNumber</var> = 10, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Return the String representation of this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> using the radix specified by <var>radixNumber</var>. Letters <code>a</code>-<code>z</code> are used for digits with values 10 through 35. The precise algorithm is <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>, however the algorithm should be a generalization of that specified in <emu-xref href=\"#sec-numeric-types-bigint-tostring\"><a href=\"#sec-numeric-types-bigint-tostring\" class=\"excluded-xref\" excluded-id=\"sec-numeric-types-bigint-tostring\">#sec-numeric-types-bigint-tostring</a></emu-xref>.</li></ol></emu-alg>\n        <p>The <code>toString</code> function is not generic; it throws a <emu-val>TypeError</emu-val> exception if its <emu-val>this</emu-val> value is not a BigInt or a BigInt object. Therefore, it cannot be transferred to other kinds of objects for use as a method.</p>\n      </emu-clause>\n\n      "}, "sec-built-in-function-objects-call-thisargument-argumentslist": {"num": "9.3.1", "title": "#sec-built-in-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-built-in-function-objects-call-thisargument-argumentslist\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function-objects-call-thisargument-argumentslist\">#sec-built-in-function-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n      <p>The [[Call]] internal method for a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>thisArgument</var> and <var>argumentsList</var>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Let <var>calleeContext</var> be a new <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>calleeContext</var> to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>calleeContext</var> to <var>calleeRealm</var>.</li><li>Set the ScriptOrModule of <var>calleeContext</var> to <var>F</var>.[[ScriptOrModule]].</li><li>Perform any necessary <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> initialization of <var>calleeContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li id=\"step-call-builtin-function-result\">Let <var>result</var> be the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> that is the result of evaluating <var>F</var> in a manner that conforms to the specification of <var>F</var>. <var>thisArgument</var> is the <emu-val>this</emu-val> value, <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>.</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <var>calleeContext</var> is removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> it must not be destroyed if it has been suspended and retained by an accessible generator object for later resumption.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-date.parse": {"num": "20.4.3.2", "title": "#sec-date.parse Date.parse ( string )", "html": "<emu-clause id=\"sec-date.parse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.parse\">#sec-date.parse</span> Date.parse ( <var>string</var> )</h1>\n        <p>The <code>parse</code> function applies the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> operator to its argument. If <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> results in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> is immediately returned. Otherwise, <code>parse</code> interprets the resulting String as a date and time; it returns a Number, the UTC <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> corresponding to the date and time. The String may be interpreted as a local time, a UTC time, or a time in some other time zone, depending on the contents of the String. The function first attempts to parse the String according to the format described in Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>), including expanded years. If the String does not conform to that format the function may fall back to any implementation-specific heuristics or implementation-specific date formats. Strings that are unrecognizable or contain out-of-bounds format element values shall cause <code>Date.parse</code> to return <emu-val>NaN</emu-val>.</p>\n        <p>If the String conforms to the <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref>, substitute values take the place of absent format elements. When the <code>MM</code> or <code>DD</code> elements are absent, <emu-val>\"01\"</emu-val> is used. When the <code>HH</code>, <code>mm</code>, or <code>ss</code> elements are absent, <emu-val>\"00\"</emu-val> is used. When the <code>sss</code> element is absent, <emu-val>\"000\"</emu-val> is used. When the UTC offset representation is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as a local time.</p>\n        <p>If <code>x</code> is any Date object whose milliseconds amount is zero within a particular implementation of ECMAScript, then all of the following expressions should produce the same numeric value in that implementation, if all the properties referenced have their initial values:</p>\n        <pre><code class=\"javascript hljs\">x.valueOf()\n<span class=\"hljs-built_in\">Date</span>.parse(x.toString())\n<span class=\"hljs-built_in\">Date</span>.parse(x.toUTCString())\n<span class=\"hljs-built_in\">Date</span>.parse(x.toISOString())</code></pre>\n        <p>However, the expression</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-built_in\">Date</span>.parse(x.toLocaleString())</code></pre>\n        <p>is not required to produce the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as the preceding three expressions and, in general, the value produced by <code>Date.parse</code> is <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref> when given any String value that does not conform to the Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>) and that could not be produced in that implementation by the <code>toString</code> or <code>toUTCString</code> method.</p>\n      </emu-clause>\n\n      "}, "sec-number.prototype.tolocalestring": {"num": "20.1.3.4", "title": "#sec-number.prototype.tolocalestring Number.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-number.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.tolocalestring\">#sec-number.prototype.tolocalestring</span> Number.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>Number.prototype.toLocaleString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleString</code> method is used.</p>\n        <p>Produces a String value that represents this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> formatted according to the conventions of the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>'s current locale. This function is <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>, and it is permissible, but not encouraged, for it to return the same thing as <code>toString</code>.</p>\n        <p>The meanings of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n      </emu-clause>\n\n      "}, "sec-math.tanh": {"num": "20.3.2.34", "title": "#sec-math.tanh Math.tanh ( x )", "html": "<emu-clause id=\"sec-math.tanh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.tanh\">#sec-math.tanh</span> Math.tanh ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the hyperbolic tangent of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is +1.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is -1.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.tanh(x)</code> is the same as the value of <code>(Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x))</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact": {"num": "E", "title": "#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact Corrections and Clarifications in CMAScript 2015 with Possible Compatibility Impact", "html": "<emu-annex id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact</span> Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact</h1>\n  <p><emu-xref href=\"#sec-candeclareglobalvar\"><a href=\"#sec-candeclareglobalvar\" class=\"excluded-xref\" excluded-id=\"sec-candeclareglobalvar\">#sec-candeclareglobalvar</a></emu-xref>-<emu-xref href=\"#sec-createglobalfunctionbinding\"><a href=\"#sec-createglobalfunctionbinding\" class=\"excluded-xref\" excluded-id=\"sec-createglobalfunctionbinding\">#sec-createglobalfunctionbinding</a></emu-xref> Edition 5 and 5.1 used a property existence test to determine whether a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property corresponding to a new global declaration already existed. ECMAScript 2015 uses an own property existence test. This corresponds to what has been most commonly implemented by web browsers.</p>\n  <p><emu-xref href=\"#sec-array-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-array-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</a></emu-xref>: The 5<sup>th</sup> Edition moved the capture of the current array length prior to the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> conversion of the <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> or new length value. However, the captured length value could become invalid if the conversion process has the side-effect of changing the array length. ECMAScript 2015 specifies that the current array length must be captured after the possible occurrence of such side-effects.</p>\n  <p><emu-xref href=\"#sec-timeclip\"><a href=\"#sec-timeclip\" class=\"excluded-xref\" excluded-id=\"sec-timeclip\">#sec-timeclip</a></emu-xref>: Previous editions permitted the <emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref> abstract operation to return either <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as the representation of a 0 <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref>. ECMAScript 2015 specifies that <emu-val>+0</emu-val> always returned. This means that for ECMAScript 2015 the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> of a Date object is never observably <emu-val>-0</emu-val> and methods that return time values never return <emu-val>-0</emu-val>.</p>\n  <p><emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>: If a UTC offset representation is not present, the local time zone is used. Edition 5.1 incorrectly stated that a missing time zone should be interpreted as <emu-val>\"z\"</emu-val>.</p>\n  <p><emu-xref href=\"#sec-date.prototype.toisostring\"><a href=\"#sec-date.prototype.toisostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.toisostring\">#sec-date.prototype.toisostring</a></emu-xref>: If the year cannot be represented using the Date Time String Format specified in <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref> a RangeError exception is thrown. Previous editions did not specify the behaviour for that case.</p>\n  <p><emu-xref href=\"#sec-date.prototype.tostring\"><a href=\"#sec-date.prototype.tostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.tostring\">#sec-date.prototype.tostring</a></emu-xref>: Previous editions did not specify the value returned by <code>Date.prototype.toString</code> when <emu-xref href=\"#this-time-value\"><a href=\"#this-time-value\">this time value</a></emu-xref> is <emu-val>NaN</emu-val>. ECMAScript 2015 specifies the result to be the String value <emu-val>\"Invalid Date\"</emu-val>.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref>, <emu-xref href=\"#sec-escaperegexppattern\"><a href=\"#sec-escaperegexppattern\" class=\"excluded-xref\" excluded-id=\"sec-escaperegexppattern\">#sec-escaperegexppattern</a></emu-xref>: Any LineTerminator code points in the value of the <emu-val>\"source\"</emu-val> property of a RegExp instance must be expressed using an escape sequence. Edition 5.1 only required the escaping of <code>/</code>.</p>\n  <p><emu-xref href=\"#sec-regexp.prototype-@@match\"><a href=\"#sec-regexp.prototype-@@match\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@match\">#sec-regexp.prototype-@@match</a></emu-xref>, <emu-xref href=\"#sec-regexp.prototype-@@replace\"><a href=\"#sec-regexp.prototype-@@replace\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@replace\">#sec-regexp.prototype-@@replace</a></emu-xref>: In previous editions, the specifications for <code>String.prototype.match</code> and <code>String.prototype.replace</code> was incorrect for cases where the pattern argument was a RegExp value whose <code>global</code> flag is set. The previous specifications stated that for each attempt to match the pattern, if <code>lastIndex</code> did not change it should be incremented by 1. The correct behaviour is that <code>lastIndex</code> should be incremented by one only if the pattern matched the empty String.</p>\n  <p><emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>, <emu-xref href=\"#sec-sortcompare\"><a href=\"#sec-sortcompare\" class=\"excluded-xref\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</a></emu-xref>: Previous editions did not specify how a <emu-val>NaN</emu-val> value returned by a <var>comparefn</var> was interpreted by <code>Array.prototype.sort</code>. ECMAScript 2015 specifies that such as value is treated as if <emu-val>+0</emu-val> was returned from the <var>comparefn</var>. ECMAScript 2015 also specifies that <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> is applied to the result returned by a <var>comparefn</var>. In previous editions, the effect of a <var>comparefn</var> result that is not a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> was <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>. In practice, implementations call <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>.</p>\n</emu-annex>\n\n"}, "sec-immutable-prototype-exotic-objects": {"num": "9.4.7", "title": "#sec-immutable-prototype-exotic-objects Immutable Prototype Exotic Objects", "html": "<emu-clause id=\"sec-immutable-prototype-exotic-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-immutable-prototype-exotic-objects\">#sec-immutable-prototype-exotic-objects</span> Immutable Prototype Exotic Objects</h1>\n      <p>An <emu-xref href=\"#immutable-prototype-exotic-object\"><a href=\"#immutable-prototype-exotic-object\">immutable prototype exotic object</a></emu-xref> is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> that has a [[Prototype]] internal slot that will not change once it is initialized.</p>\n\n      <p>An object is an <dfn id=\"immutable-prototype-exotic-object\">immutable prototype exotic object</dfn> if its [[SetPrototypeOf]] internal method uses the following implementation. (Its other essential internal methods may use any implementation, depending on the specific <emu-xref href=\"#immutable-prototype-exotic-object\"><a href=\"#immutable-prototype-exotic-object\">immutable prototype exotic object</a></emu-xref> in question.)</p>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Unlike other exotic objects, there is not a dedicated creation abstract operation provided for immutable prototype exotic objects. This is because they are only used by <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%ObjectPrototype%</a></emu-xref> and by <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> environments, and in <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> environments, the relevant objects are potentially exotic in other ways and thus need their own dedicated creation operation.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-immutable-prototype-exotic-objects-setprototypeof-v\"><h1><span class=\"secnum\">9.4.7.1</span>#sec-immutable-prototype-exotic-objects-setprototypeof-v [[SetPrototypeOf]] ( V )</h1>...</div><div id=\"excluded-sec-set-immutable-prototype\"><h1><span class=\"secnum\">9.4.7.2</span>#sec-set-immutable-prototype SetImmutablePrototype ( O, V )</h1>...</div></emu-clause>\n  "}, "sec-math.sinh": {"num": "20.3.2.31", "title": "#sec-math.sinh Math.sinh ( x )", "html": "<emu-clause id=\"sec-math.sinh\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.sinh\">#sec-math.sinh</span> Math.sinh ( <var>x</var> )</h1>\n        <p>Returns an <emu-xref href=\"#sec-implementation-approximated\"><a href=\"#sec-implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of the hyperbolic sine of <var>x</var>.</p>\n        <ul>\n          <li>\n            If <var>x</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+0</emu-val>, the result is <emu-val>+0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-0</emu-val>, the result is <emu-val>-0</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.\n          </li>\n          <li>\n            If <var>x</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>-&#8734;</emu-val>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.sinh(x)</code> is the same as the value of <code>(Math.exp(x) - Math.exp(-x)) / 2</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-hostensurecancompilestrings": {"num": "18.2.1.2", "title": "#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm )", "html": "<emu-clause id=\"sec-hostensurecancompilestrings\" aoid=\"HostEnsureCanCompileStrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostensurecancompilestrings\">#sec-hostensurecancompilestrings</span> HostEnsureCanCompileStrings ( <var>callerRealm</var>, <var>calleeRealm</var> )</h1>\n        <p>HostEnsureCanCompileStrings is a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> abstract operation that allows <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> environments to block certain ECMAScript functions which allow developers to compile strings into ECMAScript code.</p>\n\n        <p>An implementation of HostEnsureCanCompileStrings may complete normally or abruptly. Any abrupt completions will be propagated to its callers. The default implementation of HostEnsureCanCompileStrings is to unconditionally return an empty normal completion.</p>\n      </emu-clause>\n\n      "}, "sec-built-in-method": {"num": "4.4.38", "title": "#sec-built-in-method built-in method", "html": "<emu-clause id=\"sec-built-in-method\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-method\">#sec-built-in-method</span> built-in method</h1>\n      <p>method that is a built-in function</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Standard built-in methods are defined in this specification. A <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> or implementation may provide additional built-in methods that are not described in this specification.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-bigint.prototype.tolocalestring": {"num": "20.2.3.2", "title": "#sec-bigint.prototype.tolocalestring BigInt.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-bigint.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.prototype.tolocalestring\">#sec-bigint.prototype.tolocalestring</span> BigInt.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>BigInt.prototype.toLocaleString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleString</code> method is used.</p>\n        <p>Produces a String value that represents this BigInt value formatted according to the conventions of the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>'s current locale. This function is <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>, and it is permissible, but not encouraged, for it to return the same thing as <code>toString</code>.</p>\n        <p>The meanings of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n      </emu-clause>\n\n      "}, "sec-hosthassourcetextavailable": {"num": "19.2.5", "title": "#sec-hosthassourcetextavailable HostHasSourceTextAvailable ( func )", "html": "<emu-clause id=\"sec-hosthassourcetextavailable\" aoid=\"HostHasSourceTextAvailable\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosthassourcetextavailable\">#sec-hosthassourcetextavailable</span> HostHasSourceTextAvailable ( <var>func</var> )</h1>\n      <p>HostHasSourceTextAvailable is a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> abstract operation that allows <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> environments to prevent the source text from being provided for a given function.</p>\n      <p>An implementation of HostHasSourceTextAvailable must complete normally in all cases. This operation must be deterministic with respect to its parameters. Each time it is called with a specific <var>func</var> as its argument, it must return the same completion record. The default implementation of HostHasSourceTextAvailable is to unconditionally return a normal completion with a value of <emu-val>true</emu-val>.</p>\n    </emu-clause>\n  "}, "sec-hostresolveimportedmodule": {"num": "15.2.1.18", "title": "#sec-hostresolveimportedmodule Runtime Semantics: HostResolveImportedModule ( referencingScriptOrModule, specifier )", "html": "<emu-clause id=\"sec-hostresolveimportedmodule\" aoid=\"HostResolveImportedModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostresolveimportedmodule\">#sec-hostresolveimportedmodule</span> Runtime Semantics: HostResolveImportedModule ( <var>referencingScriptOrModule</var>, <var>specifier</var> )</h1>\n        <p>HostResolveImportedModule is a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> abstract operation that provides the concrete <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> subclass instance that corresponds to the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String, <var>specifier</var>, occurring within the context of the script or module represented by the <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may also be <emu-val>null</emu-val>, if the resolution is being performed in the context of an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression, and there is no active script or module at that time.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An example of when <var>referencingScriptOrModule</var> can be <emu-val>null</emu-val> is in a web browser <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref>. There, if a user clicks on a control given by</p>\n\n          <pre><code class=\"html hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"import('./foo.mjs')\"</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n\n          <p>there will be no active script or module at the time the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression runs. More generally, this can happen in any situation where the <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> pushes execution contexts with <emu-val>null</emu-val> ScriptOrModule components onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</p>\n        </div></emu-note>\n\n        <p>The implementation of HostResolveImportedModule must conform to the following requirements:</p>\n        <ul>\n          <li>\n            The normal return value must be an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.\n          </li>\n          <li>\n            If a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> corresponding to the pair <var>referencingScriptOrModule</var>, <var>specifier</var> does not exist or cannot be created, an exception must be thrown.\n          </li>\n          <li>\n            Each time this operation is called with a specific <var>referencingScriptOrModule</var>, <var>specifier</var> pair as arguments it must return the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance if it completes normally.\n          </li>\n        </ul>\n        <p>Multiple different <var>referencingScriptOrModule</var>, <var>specifier</var> pairs may map to the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance. The actual mapping semantic is <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> but typically a normalization process is applied to <var>specifier</var> as part of the mapping process. A typical normalization process would include actions such as alphabetic case folding and expansion of relative and abbreviated path specifiers.</p>\n      </emu-clause>\n\n      "}, "sec-date.prototype.tolocaletimestring": {"num": "20.4.4.40", "title": "#sec-date.prototype.tolocaletimestring Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-date.prototype.tolocaletimestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.tolocaletimestring\">#sec-date.prototype.tolocaletimestring</span> Date.prototype.toLocaleTimeString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>Date.prototype.toLocaleTimeString</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleTimeString</code> method is used.</p>\n        <p>This function returns a String value. The contents of the String are <emu-xref href=\"#sec-implementation-defined\"><a href=\"#sec-implementation-defined\">implementation-defined</a></emu-xref>, but are intended to represent the &#8220;time&#8221; portion of the Date in the current time zone in a convenient, human-readable form that corresponds to the conventions of the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>'s current locale.</p>\n        <p>The meaning of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n      </emu-clause>\n\n      "}, "sec-example-cyclic-module-record-graphs": {"num": "15.2.1.16.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <emu-const>linked</emu-const>. This preparatory step can be performed at any time. Later, when the <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <emu-const>evaluated</emu-const>.</p>\n\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <emu-const>unlinked</emu-const>. <var>C</var>'s [[Status]] has become <emu-const>linked</emu-const>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <emu-const>evaluated</emu-const>. <var>C</var> will also become <emu-const>evaluated</emu-const> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these  methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <emu-const>unlinked</emu-const>.</p>\n\n          <p>Lastly, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <emu-const>linking</emu-const>. <var>B</var>.[[Status]] itself remains <emu-const>linking</emu-const> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <emu-const>linked</emu-const> , both <var>A</var> and <var>B</var> transition from <emu-const>linking</emu-const> to <emu-const>linked</emu-const> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <emu-const>linking</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>unlinked</emu-const>. Note that <var>C</var> is left as <emu-const>linked</emu-const>.</p>\n\n          <p>Finally, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <emu-const>evaluating</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>evaluated</emu-const> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <emu-const>evaluated</emu-const> with no [[EvaluationError]].</p>\n        </emu-clause>\n      "}, "sec-jobs": {"num": "8.4", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\">\n    <span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> environments. This specification describes the <emu-xref href=\"#sec-host-hook\"><a href=\"#sec-host-hook\">host hook</a></emu-xref> <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; hosts may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must:\n        <ol>\n          <li>Push an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li>\n          <li>Perform any <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> preparation steps.</li>\n          <li>Call the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> cleanup steps.</li>\n          <li>Pop the previously-pushed <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a normal completion, implementing its own handling of errors.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#sec-host\"><a href=\"#sec-host\">Host</a></emu-xref> environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">8.4.1</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}, "sec-string.prototype.tolocaleuppercase": {"num": "21.1.3.24", "title": "#sec-string.prototype.tolocaleuppercase String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-string.prototype.tolocaleuppercase\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.tolocaleuppercase\">#sec-string.prototype.tolocaleuppercase</span> String.prototype.toLocaleUpperCase ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the <code>toLocaleUpperCase</code> method as specified in the ECMA-402 specification. If an ECMAScript implementation does not include the ECMA-402 API the following specification of the <code>toLocaleUpperCase</code> method is used.</p>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>This function works exactly the same as <code>toUpperCase</code> except that its result is intended to yield the correct result for the <emu-xref href=\"#sec-host-environment\"><a href=\"#sec-host-environment\">host environment</a></emu-xref>'s current locale, rather than a locale-independent result. There will only be a difference in the few cases (such as Turkish) where the rules for that language conflict with the regular Unicode case mappings.</p>\n        <p>The meaning of the optional parameters to this method are defined in the ECMA-402 specification; implementations that do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>toLocaleUpperCase</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-hostgetimportmetaproperties": {"num": "12.3.12.1.1", "title": "#sec-hostgetimportmetaproperties Runtime Semantics: HostGetImportMetaProperties ( moduleRecord )", "html": "<emu-clause id=\"sec-hostgetimportmetaproperties\" aoid=\"HostGetImportMetaProperties\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostgetimportmetaproperties\">#sec-hostgetimportmetaproperties</span> Runtime Semantics: HostGetImportMetaProperties ( <var>moduleRecord</var> )</h1>\n          <p>HostGetImportMetaProperties is a <emu-xref href=\"#sec-host-defined\"><a href=\"#sec-host-defined\">host-defined</a></emu-xref> abstract operation that allows hosts to provide property keys and values for the object returned from <code>import.meta</code>.</p>\n\n          <p>The implementation of HostGetImportMetaProperties must conform to the following requirements:</p>\n          <ul>\n            <li>It must return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, whose values are all Records with two fields, [[Key]] and [[Value]].</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Key]] field must be a property key, i.e., <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref> must return <emu-val>true</emu-val> when applied to it.</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Value]] field must be an ECMAScript value.</li>\n            <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostGetImportMetaProperties is to return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </emu-clause>\n\n        "}, "sec-built-in-function": {"num": "4.4.35", "title": "#sec-built-in-function built-in function", "html": "<emu-clause id=\"sec-built-in-function\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function\">#sec-built-in-function</span> built-in function</h1>\n      <p>built-in object that is a function</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Examples of built-in functions include <code>parseInt</code> and <code>Math.exp</code>. A <emu-xref href=\"#sec-host\"><a href=\"#sec-host\">host</a></emu-xref> or implementation may provide additional built-in functions that are not described in this specification.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {"figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "table-2": "Table 3", "table-3": "Table 4", "table-21": "Table 22", "table-agent-record": "Table 26", "table-script-records": "Table 37", "table-36": "Table 38", "table-37": "Table 39", "table-dynamic-function-sourcetext-prefixes": "Table 48", "table-readsharedmemory-fields": "Table 79", "table-writesharedmemory-fields": "Table 80", "table-rmwsharedmemory-fields": "Table 81"}}}