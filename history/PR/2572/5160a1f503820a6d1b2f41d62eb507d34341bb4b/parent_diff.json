{"from": {"secList": ["sec-isintailposition", "sec-functiondeclarations-in-ifstatement-statement-clauses", "sec-labelled-function-declarations", "sec-createdynamicfunction", "sec-function-definitions-static-semantics-early-errors", "sec-block-duplicates-allowed-static-semantics", "sec-numeric-literals-early-errors", "sec-ordinaryfunctioncreate", "sec-patterns-static-semantics-early-errors-annexb", "sec-forbidden-extensions", "sec-function-calls-runtime-semantics-evaluation", "sec-string-literals-early-errors", "sec-with-statement-static-semantics-early-errors", "sec-left-hand-side-expressions-static-semantics-early-errors", "sec-labelled-statements-static-semantics-early-errors", "sec-generator-function-definitions-static-semantics-early-errors", "sec-async-generator-function-definitions-static-semantics-early-errors", "sec-object-initializer-static-semantics-early-errors", "sec-async-function-definitions-static-semantics-early-errors", "sec-resolvebinding", "sec-types-of-source-code", "sec-switch-duplicates-allowed-static-semantics"], "secData": {"sec-isintailposition": {"num": "15.10.1", "title": "#sec-isintailposition Static Semantics: IsInTailPosition ( call )", "html": "<emu-clause id=\"sec-isintailposition\" type=\"abstract operation\" aoid=\"IsInTailPosition\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isintailposition\">#sec-isintailposition</span> Static Semantics: IsInTailPosition ( <var>call</var> )</h1>\n      <p>The abstract operation IsInTailPosition takes argument <var>call</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the source code matching <var>call</var> is <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>If <var>call</var> is not contained within a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> that most closely contains <var>call</var>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is an <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Return the result of <emu-xref aoid=\"HasCallInTailPosition\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <var>body</var> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Tail Position calls are only defined in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> because of a common non-standard language extension (see <emu-xref href=\"#sec-addrestrictedfunctionproperties\"><a href=\"#sec-addrestrictedfunctionproperties\" class=\"excluded-xref\" excluded-id=\"sec-addrestrictedfunctionproperties\">#sec-addrestrictedfunctionproperties</a></emu-xref>) that enables observation of the chain of caller contexts.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-functiondeclarations-in-ifstatement-statement-clauses": {"num": "B.3.3", "title": "#sec-functiondeclarations-in-ifstatement-statement-clauses FunctionDeclarations in IfStatement Statement Clauses", "html": "<emu-annex id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">#sec-functiondeclarations-in-ifstatement-statement-clauses</span> FunctionDeclarations in IfStatement Statement Clauses</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IfStatement\">IfStatement</a></emu-nt> production in <emu-xref href=\"#sec-if-statement\"><a href=\"#sec-if-statement\" class=\"excluded-xref\" excluded-id=\"sec-if-statement\">#sec-if-statement</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IfStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IfStatement\">IfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3oae1kl0\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_rfywn3t\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ndmrr5v_\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"qlu6dc6n\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[lookahead &#8800; <emu-t>else</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. Code matching this production is processed as if each matching occurrence of <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt> was the sole <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> of a <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt> occupying that position in the source code. The semantics of such a synthetic <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt> includes the web legacy compatibility semantics specified in <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n    </emu-annex>\n\n    "}, "sec-labelled-function-declarations": {"num": "B.3.1", "title": "#sec-labelled-function-declarations Labelled Function Declarations", "html": "<emu-annex id=\"sec-labelled-function-declarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</span> Labelled Function Declarations</h1>\n      <p>Prior to ECMAScript 2015, the specification of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> did not allow for the association of a statement label with a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>. However, a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension for <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref> and most browser-hosted ECMAScript implementations supported that extension. In ECMAScript 2015 and later, the grammar production for <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> permits use of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as a <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> but <emu-xref href=\"#sec-labelled-statements-static-semantics-early-errors\"><a href=\"#sec-labelled-statements-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-labelled-statements-static-semantics-early-errors\">#sec-labelled-statements-static-semantics-early-errors</a></emu-xref> includes an Early Error rule that produces a Syntax Error if that occurs. That rule is modified with the addition of the <ins>highlighted</ins> text:</p>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if any <ins>strict mode</ins> source code matches this rule.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>, <emu-nt><a href=\"#prod-annexB-IfStatement\">IfStatement</a></emu-nt>, and <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> prevent these statements from containing a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-annex>\n\n    "}, "sec-createdynamicfunction": {"num": "20.2.1.1.1", "title": "#sec-createdynamicfunction CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" type=\"abstract operation\" oldids=\"table-dynamic-function-sourcetext-prefixes\" aoid=\"CreateDynamicFunction\"><span id=\"table-dynamic-function-sourcetext-prefixes\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (<emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language values</a></emu-xref>). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%GeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"async function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>prefix</var> be <emu-val>\"async function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1,<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Let <var>sourceText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>sourceString</var>).</li><li>Let <var>parameters</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>), <var>parameterSym</var>).</li><li>If <var>parameters</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>bodyString</var>), <var>bodySym</var>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: The parameters and body are parsed separately to ensure that each is valid alone. For example, <code>new Function(\"/*\", \"*/ ) {\")</code> is not legal.</li><li>NOTE: If this step is reached, <var>sourceText</var> must match <var>exprSym</var> (although the reverse implication does not hold). The purpose of the next two steps is to enforce any Early Error rules which apply to <var>exprSym</var> directly.</li><li>Let <var>expr</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <var>exprSym</var>).</li><li>If <var>expr</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>privateScope</var> be <emu-val>null</emu-val>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>sourceText</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Functions whose <var>kind</var> is <emu-const>async</emu-const> are not constructible and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>CreateDynamicFunction defines a <emu-val>\"prototype\"</emu-val> property on any function it creates whose <var>kind</var> is not <emu-const>async</emu-const> to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-function-definitions-static-semantics-early-errors": {"num": "15.2.1", "title": "#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"smus6qca\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g3mtfiqq\">\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          If the source code matching <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.\n        </li>\n        <li>\n          If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matching <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> does not include identifiers bound using var or function declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xn8an8nx\"><emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> contains any duplicate entries.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-block-duplicates-allowed-static-semantics": {"num": "B.3.2.4", "title": "#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-block-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-duplicates-allowed-static-semantics\">#sec-block-duplicates-allowed-static-semantics</span> Changes to Block Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-block-static-semantics-early-errors\"><a href=\"#sec-block-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-early-errors\">#sec-block-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ljp0ar\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> contains any duplicate entries<ins>, unless the source code matching this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}, "sec-numeric-literals-early-errors": {"num": "12.8.3.1", "title": "#sec-numeric-literals-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-numeric-literals-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-literals-early-errors\">#sec-numeric-literals-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"8n96hykg\"><emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xvklurnl\"><emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>It is a Syntax Error if the source code matching this production is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">In <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, this syntax is <emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Legacy</a></emu-xref>.</div></emu-note>\n      </emu-clause>\n\n      "}, "sec-ordinaryfunctioncreate": {"num": "10.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" type=\"abstract operation\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\" aoid=\"OrdinaryFunctionCreate\"><span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (<emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>), and <var>PrivateScope</var> (a <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> or <emu-val>null</emu-val>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[PrivateEnvironment]] to <var>PrivateScope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[Fields]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[PrivateMethods]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[ClassFieldInitializerName]] to <emu-const>empty</emu-const>.</li><li>Let <var>len</var> be the <emu-xref aoid=\"ExpectedArgumentCount\"><a href=\"#sec-static-semantics-expectedargumentcount\">ExpectedArgumentCount</a></emu-xref> of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-patterns-static-semantics-early-errors-annexb": {"num": "B.1.2.1", "title": "#sec-patterns-static-semantics-early-errors-annexb Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-patterns-static-semantics-early-errors-annexb\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-patterns-static-semantics-early-errors-annexb\">#sec-patterns-static-semantics-early-errors-annexb</span> Static Semantics: Early Errors</h1>\n        <p>The semantics of <emu-xref href=\"#sec-patterns-static-semantics-early-errors\"><a href=\"#sec-patterns-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-patterns-static-semantics-early-errors\">#sec-patterns-static-semantics-early-errors</a></emu-xref> is extended as follows:</p>\n        <emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"u9cvu_c3\"><emu-nt><a href=\"#prod-annexB-InvalidBracedQuantifier\">InvalidBracedQuantifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any source text matches this rule.\n          </li>\n        </ul>\n        <p>Additionally, the rules for the following productions are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"NonemptyClassRanges\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonemptyClassRanges\">NonemptyClassRanges</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"pblfo8mk\">\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> or <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[UnicodeMode]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is larger than the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n        <emu-grammar><emu-production name=\"NonemptyClassRangesNoDash\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonemptyClassRangesNoDash\">NonemptyClassRangesNoDash</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6yvgquyp\">\n        <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>true</emu-val> or <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[UnicodeMode]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is larger than the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n\n      "}, "sec-forbidden-extensions": {"num": "17.1", "title": "#sec-forbidden-extensions Forbidden Extensions", "html": "<emu-clause id=\"sec-forbidden-extensions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</span> Forbidden Extensions</h1>\n    <p>An implementation must not extend this specification in the following ways:</p>\n    <ul>\n      <li>\n        ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> defined using syntactic <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> must not be created with own properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val>. Such own properties also must not be created for <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> defined using an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> regardless of whether the definition is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Built-in functions, <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref> created using the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, generator functions created using the Generator <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, async functions created using the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, and functions created using the <code>bind</code> method also must not be created with such own properties.\n      </li>\n      <li>\n        If an implementation extends any <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with an own property named <emu-val>\"caller\"</emu-val> the value of that property, as observed using [[Get]] or [[GetOwnProperty]], must not be a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref> object. If it is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>, the function that is the value of the property's [[Get]] attribute must never return a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref> when called.\n      </li>\n      <li>\n        Neither mapped nor unmapped arguments objects may be created with an own property named <emu-val>\"caller\"</emu-val>.\n      </li>\n      <li>\n        The behaviour of built-in methods which are specified in ECMA-402, such as those named <code>toLocaleString</code>, must not be extended except as specified in ECMA-402.\n      </li>\n      <li>\n        The RegExp pattern grammars in <emu-xref href=\"#sec-patterns\"><a href=\"#sec-patterns\" class=\"excluded-xref\" excluded-id=\"sec-patterns\">#sec-patterns</a></emu-xref> and <emu-xref href=\"#sec-regular-expressions-patterns\"><a href=\"#sec-regular-expressions-patterns\" class=\"excluded-xref\" excluded-id=\"sec-regular-expressions-patterns\">#sec-regular-expressions-patterns</a></emu-xref> must not be extended to recognize any of the source characters A-Z or a-z as <emu-nt params=\"+UnicodeMode\"><a href=\"#prod-IdentityEscape\">IdentityEscape</a><emu-mods><emu-params>[+UnicodeMode]</emu-params></emu-mods></emu-nt> when the <sub>[UnicodeMode]</sub> grammar parameter is present.\n      </li>\n      <li>\n        The Syntactic Grammar must not be extended in any manner that allows the token <code>:</code> to immediately follow source text that matches the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> nonterminal symbol.\n      </li>\n      <li>\n        When processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, an implementation must not relax the <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules of <emu-xref href=\"#sec-numeric-literals-early-errors\"><a href=\"#sec-numeric-literals-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-numeric-literals-early-errors\">#sec-numeric-literals-early-errors</a></emu-xref>.\n      </li>\n      <li>\n        <emu-nt><a href=\"#prod-TemplateEscapeSequence\">TemplateEscapeSequence</a></emu-nt> must not be extended to include <emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt> as defined in <emu-xref href=\"#sec-literals-string-literals\"><a href=\"#sec-literals-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-string-literals\">#sec-literals-string-literals</a></emu-xref>.\n      </li>\n      <li>\n        When processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the extensions defined in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref>, <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>, <emu-xref href=\"#sec-functiondeclarations-in-ifstatement-statement-clauses\"><a href=\"#sec-functiondeclarations-in-ifstatement-statement-clauses\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">#sec-functiondeclarations-in-ifstatement-statement-clauses</a></emu-xref>, and <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref> must not be supported.\n      </li>\n      <li>\n        When parsing for the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, the lexical grammar extensions defined in <emu-xref href=\"#sec-html-like-comments\"><a href=\"#sec-html-like-comments\" class=\"excluded-xref\" excluded-id=\"sec-html-like-comments\">#sec-html-like-comments</a></emu-xref> must not be supported.\n      </li>\n      <!-- The following is so that in the future we can potentially add new arguments or support ArgumentList. -->\n      <li>\n        <emu-nt><a href=\"#prod-ImportCall\">ImportCall</a></emu-nt> must not be extended.\n      </li>\n    </ul>\n  </emu-clause>\n"}, "sec-function-calls-runtime-semantics-evaluation": {"num": "13.3.6.1", "title": "#sec-function-calls-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-calls-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-calls-runtime-semantics-evaluation\">#sec-function-calls-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7jj-96li\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>memberExpr</var> be the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> of <var>expr</var>.</li><li>Let <var>arguments</var> be the <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> of <var>expr</var>.</li><li>Let <var>ref</var> be the result of evaluating <var>memberExpr</var>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>, and <var>ref</var>.[[ReferencedName]] is <emu-val>\"eval\"</emu-val>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>func</var>, <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\">%eval%</a></emu-xref>) is <emu-val>true</emu-val>, then<ol><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <var>arguments</var>.</li><li>If <var>argList</var> has no elements, return <emu-val>undefined</emu-val>.</li><li>Let <var>evalArg</var> be the first element of <var>argList</var>.</li><li>If the source code matching this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strictCaller</var> be <emu-val>true</emu-val>. Otherwise let <var>strictCaller</var> be <emu-val>false</emu-val>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li id=\"step-callexpression-evaluation-direct-eval\">Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>evalArg</var>, <var>evalRealm</var>, <var>strictCaller</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailCall</var>).</li></ol></emu-alg>\n        <p>A <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> evaluation that executes step <emu-xref href=\"#step-callexpression-evaluation-direct-eval\"><a href=\"#step-callexpression-evaluation-direct-eval\">6.a.vi</a></emu-xref> is a <dfn variants=\"direct evals\">direct eval</dfn>.</p>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qugahahu\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string-literals-early-errors": {"num": "12.8.4.1", "title": "#sec-string-literals-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-string-literals-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-literals-early-errors\">#sec-string-literals-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6mwrfc1u\"><emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nv0ui3q7\"><emu-nt><a href=\"#prod-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>It is a Syntax Error if the source code matching this production is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">In <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, this syntax is <emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Legacy</a></emu-xref>.</div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>It is possible for string literals to precede a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> that places the enclosing code in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode</a></emu-xref>, and implementations must take care to enforce the above rules for such literals. For example, the following source text contains a Syntax Error:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">invalid</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-string\">\"\\7\"</span>; <span class=\"hljs-string\">\"use strict\"</span>; }</code></pre>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-with-statement-static-semantics-early-errors": {"num": "14.11.1", "title": "#sec-with-statement-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-with-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the code that matches this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"IsLabelledFunction\"><a href=\"#sec-islabelledfunction\">IsLabelledFunction</a></emu-xref>(<emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>) is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>It is only necessary to apply the second rule if the extension specified in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref> is implemented.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-left-hand-side-expressions-static-semantics-early-errors": {"num": "13.3.1.1", "title": "#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">#sec-left-hand-side-expressions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"OptionalChain\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tfcmykyj\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ocv4xe0-\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any code matches this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This production exists in order to prevent automatic semicolon insertion rules (<emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>) from being applied to the following code:</p>\n          <pre><code class=\"javascript hljs\">a?.<span class=\"hljs-property\">b</span>\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>so that it would be interpreted as two valid statements. The purpose is to maintain consistency with similar code without optional chaining:</p>\n          <pre><code class=\"javascript hljs\">a.<span class=\"hljs-property\">b</span>\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>which is a valid statement and where automatic semicolon insertion does not apply.</p>\n        </div></emu-note>\n\n        <emu-grammar><emu-production name=\"ImportMeta\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8myn6frq\">\n        <emu-t>import</emu-t>\n        <emu-t>.</emu-t>\n        <emu-t>meta</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is not <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-clause>\n    "}, "sec-labelled-statements-static-semantics-early-errors": {"num": "14.13.1", "title": "#sec-labelled-statements-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-labelled-statements-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements-static-semantics-early-errors\">#sec-labelled-statements-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if any source text matches this rule.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An alternative definition for this rule is provided in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-static-semantics-early-errors": {"num": "15.5.1", "title": "#sec-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-generator-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-static-semantics-early-errors\">#sec-generator-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"dsczygsq\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"32ghovyc\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          If the source code matching <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.\n        </li>\n        <li>\n          If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matching <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-async-generator-function-definitions-static-semantics-early-errors": {"num": "15.6.1", "title": "#sec-async-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">#sec-async-generator-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"xruu4gg0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nplor0n0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>If the source code matching <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.</li>\n        <li>If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matching <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-object-initializer-static-semantics-early-errors": {"num": "13.2.5.1", "title": "#sec-object-initializer-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-object-initializer-static-semantics-early-errors\" oldids=\"sec-__proto__-property-names-in-object-initializers\"><span id=\"sec-__proto__-property-names-in-object-initializers\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is not empty.\n          </li>\n        </ul>\n        <p>In addition to describing an actual object initializer the <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> productions are also used as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> and may be recognized as part of a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>. When <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required the following Early Error rules are <b>not</b> applied. In addition, they are not applied when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3wg6qczf\"><emu-nt><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            Always throw a Syntax Error if code matches this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This production exists so that <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> can serve as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt>. It cannot occur in an actual object initializer.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g--o073w\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hwnsf_iz\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>. This rule is not applied if this <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> is contained within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> that is being parsed for JSON.parse (see step <emu-xref href=\"#step-json-parse-parse\"><a href=\"#step-json-parse-parse\" class=\"excluded-xref\" excluded-id=\"step-json-parse-parse\">#step-json-parse-parse</a></emu-xref> of <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>).\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> does not include property names defined using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-function-definitions-static-semantics-early-errors": {"num": "15.8.1", "title": "#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-async-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-static-semantics-early-errors\">#sec-async-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"agdmcdye\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1_djgdhl\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>If the source code matching <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.</li>\n        <li>If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matching <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-resolvebinding": {"num": "9.4.2", "title": "#sec-resolvebinding ResolveBinding ( name [ , env ] )", "html": "<emu-clause id=\"sec-resolvebinding\" type=\"abstract operation\" aoid=\"ResolveBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvebinding\">#sec-resolvebinding</span> ResolveBinding ( <var>name</var> [ , <var>env</var> ] )</h1>\n      <p>The abstract operation ResolveBinding takes argument <var>name</var> (a String) and optional argument <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> or <emu-val>undefined</emu-val>). It is used to determine the binding of <var>name</var>. <var>env</var> can be used to explicitly provide the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is to be searched for the binding. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>env</var> is not present or if <var>env</var> is <emu-val>undefined</emu-val>, then<ol><li>Set <var>env</var> to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>If the code matching the syntactic production that is being evaluated is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>env</var>, <var>name</var>, <var>strict</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The result of ResolveBinding is always a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> whose [[ReferencedName]] field is <var>name</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-types-of-source-code": {"num": "11.2", "title": "#sec-types-of-source-code Types of Source Code", "html": "<emu-clause id=\"sec-types-of-source-code\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</span> Types of Source Code</h1>\n    <p>There are four types of ECMAScript code:</p>\n    <ul>\n      <li>\n        <em>Global code</em> is source text that is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The global code of a particular <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> does not include any source text that is parsed as part of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n      <li>\n        <em>Eval code</em> is the source text supplied to the built-in <code>eval</code> function. More precisely, if the parameter to the built-in <code>eval</code> function is a String, it is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The eval code for a particular invocation of <code>eval</code> is the global code portion of that <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.\n      </li>\n      <li>\n        <p><em>Function code</em> is source text that is parsed to supply the value of the [[ECMAScriptCode]] and [[FormalParameters]] internal slots (see <emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function code of a particular ECMAScript function does not include any source text that is parsed as the function code of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</p>\n        <p>In addition, if the source text referred to above is parsed as:</p>\n        <ul>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, or</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>,</li>\n        </ul>\n        <p>then the source text matching the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> (if any) of that declaration or expression is also included in the function code of the corresponding function.</p>\n      </li>\n      <li>\n        <em>Module code</em> is source text that is code that is provided as a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt>. It is the code that is directly evaluated when a module is initialized. The module code of a particular module does not include any source text that is parsed as part of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n    </ul>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Function code is generally provided as the bodies of Function Definitions (<emu-xref href=\"#sec-function-definitions\"><a href=\"#sec-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</a></emu-xref>), Arrow Function Definitions (<emu-xref href=\"#sec-arrow-function-definitions\"><a href=\"#sec-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</a></emu-xref>), Method Definitions (<emu-xref href=\"#sec-method-definitions\"><a href=\"#sec-method-definitions\" class=\"excluded-xref\" excluded-id=\"sec-method-definitions\">#sec-method-definitions</a></emu-xref>), Generator Function Definitions (<emu-xref href=\"#sec-generator-function-definitions\"><a href=\"#sec-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-generator-function-definitions\">#sec-generator-function-definitions</a></emu-xref>), Async Function Definitions (<emu-xref href=\"#sec-async-function-definitions\"><a href=\"#sec-async-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</a></emu-xref>), Async Generator Function Definitions (<emu-xref href=\"#sec-async-generator-function-definitions\"><a href=\"#sec-async-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-generator-function-definitions\">#sec-async-generator-function-definitions</a></emu-xref>), and Async Arrow Functions (<emu-xref href=\"#sec-async-arrow-function-definitions\"><a href=\"#sec-async-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-arrow-function-definitions\">#sec-async-arrow-function-definitions</a></emu-xref>). Function code is also derived from the arguments to the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>), the GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-generatorfunction\"><a href=\"#sec-generatorfunction\" class=\"excluded-xref\" excluded-id=\"sec-generatorfunction\">#sec-generatorfunction</a></emu-xref>), and the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-async-function-constructor-arguments\"><a href=\"#sec-async-function-constructor-arguments\" class=\"excluded-xref\" excluded-id=\"sec-async-function-constructor-arguments\">#sec-async-function-constructor-arguments</a></emu-xref>).</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The practical effect of including the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in function code is that the Early Errors for <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> are applied to a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> that is the name of a function whose body contains a \"use strict\" directive, even if the surrounding code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-directive-prologues-and-the-use-strict-directive\"><h1><span class=\"secnum\">11.2.1</span>#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive</h1>...</div><div id=\"excluded-sec-strict-mode-code\"><h1><span class=\"secnum\">11.2.2</span>#sec-strict-mode-code Strict Mode Code</h1>...</div><div id=\"excluded-sec-non-ecmascript-functions\"><h1><span class=\"secnum\">11.2.3</span>#sec-non-ecmascript-functions Non-ECMAScript Functions</h1>...</div></emu-clause>\n"}, "sec-switch-duplicates-allowed-static-semantics": {"num": "B.3.2.5", "title": "#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-switch-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-duplicates-allowed-static-semantics\">#sec-switch-duplicates-allowed-static-semantics</span> Changes to <code>switch</code> Statement Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-switch-statement-static-semantics-early-errors\"><a href=\"#sec-switch-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-static-semantics-early-errors\">#sec-switch-statement-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> contains any duplicate entries<ins>, unless the source code matching this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 34"}}, "to": {"secList": ["sec-isintailposition", "sec-functiondeclarations-in-ifstatement-statement-clauses", "sec-labelled-function-declarations", "sec-createdynamicfunction", "sec-function-definitions-static-semantics-early-errors", "sec-block-duplicates-allowed-static-semantics", "sec-numeric-literals-early-errors", "sec-ordinaryfunctioncreate", "sec-patterns-static-semantics-early-errors-annexb", "sec-forbidden-extensions", "sec-function-calls-runtime-semantics-evaluation", "sec-string-literals-early-errors", "sec-with-statement-static-semantics-early-errors", "sec-left-hand-side-expressions-static-semantics-early-errors", "sec-labelled-statements-static-semantics-early-errors", "sec-generator-function-definitions-static-semantics-early-errors", "sec-async-generator-function-definitions-static-semantics-early-errors", "sec-object-initializer-static-semantics-early-errors", "sec-async-function-definitions-static-semantics-early-errors", "sec-resolvebinding", "sec-types-of-source-code", "sec-switch-duplicates-allowed-static-semantics"], "secData": {"sec-isintailposition": {"num": "15.10.1", "title": "#sec-isintailposition Static Semantics: IsInTailPosition ( call )", "html": "<emu-clause id=\"sec-isintailposition\" type=\"abstract operation\" aoid=\"IsInTailPosition\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isintailposition\">#sec-isintailposition</span> Static Semantics: IsInTailPosition ( <var>call</var> )</h1>\n      <p>The abstract operation IsInTailPosition takes argument <var>call</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the source code matched by <var>call</var> is <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>If <var>call</var> is not contained within a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> that most closely contains <var>call</var>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is an <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Return the result of <emu-xref aoid=\"HasCallInTailPosition\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <var>body</var> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Tail Position calls are only defined in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> because of a common non-standard language extension (see <emu-xref href=\"#sec-addrestrictedfunctionproperties\"><a href=\"#sec-addrestrictedfunctionproperties\" class=\"excluded-xref\" excluded-id=\"sec-addrestrictedfunctionproperties\">#sec-addrestrictedfunctionproperties</a></emu-xref>) that enables observation of the chain of caller contexts.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-functiondeclarations-in-ifstatement-statement-clauses": {"num": "B.3.3", "title": "#sec-functiondeclarations-in-ifstatement-statement-clauses FunctionDeclarations in IfStatement Statement Clauses", "html": "<emu-annex id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">#sec-functiondeclarations-in-ifstatement-statement-clauses</span> FunctionDeclarations in IfStatement Statement Clauses</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IfStatement\">IfStatement</a></emu-nt> production in <emu-xref href=\"#sec-if-statement\"><a href=\"#sec-if-statement\" class=\"excluded-xref\" excluded-id=\"sec-if-statement\">#sec-if-statement</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IfStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IfStatement\">IfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3oae1kl0\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_rfywn3t\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ndmrr5v_\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"qlu6dc6n\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[lookahead &#8800; <emu-t>else</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. Code matched by this production is processed as if each matching occurrence of <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt> was the sole <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> of a <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt> occupying that position in the source code. The semantics of such a synthetic <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt> includes the web legacy compatibility semantics specified in <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n    </emu-annex>\n\n    "}, "sec-labelled-function-declarations": {"num": "B.3.1", "title": "#sec-labelled-function-declarations Labelled Function Declarations", "html": "<emu-annex id=\"sec-labelled-function-declarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</span> Labelled Function Declarations</h1>\n      <p>Prior to ECMAScript 2015, the specification of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> did not allow for the association of a statement label with a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>. However, a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension for <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref> and most browser-hosted ECMAScript implementations supported that extension. In ECMAScript 2015 and later, the grammar production for <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> permits use of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as a <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> but <emu-xref href=\"#sec-labelled-statements-static-semantics-early-errors\"><a href=\"#sec-labelled-statements-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-labelled-statements-static-semantics-early-errors\">#sec-labelled-statements-static-semantics-early-errors</a></emu-xref> includes an Early Error rule that produces a Syntax Error if that occurs. That rule is modified with the addition of the <ins>highlighted</ins> text:</p>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if any <ins>strict mode</ins> source code is matched by this rule.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>, <emu-nt><a href=\"#prod-annexB-IfStatement\">IfStatement</a></emu-nt>, and <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> prevent these statements from containing a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-annex>\n\n    "}, "sec-createdynamicfunction": {"num": "20.2.1.1.1", "title": "#sec-createdynamicfunction CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" type=\"abstract operation\" oldids=\"table-dynamic-function-sourcetext-prefixes\" aoid=\"CreateDynamicFunction\"><span id=\"table-dynamic-function-sourcetext-prefixes\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (<emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language values</a></emu-xref>). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%GeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"async function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>prefix</var> be <emu-val>\"async function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1,<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Let <var>sourceText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>sourceString</var>).</li><li>Let <var>parameters</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>), <var>parameterSym</var>).</li><li>If <var>parameters</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>bodyString</var>), <var>bodySym</var>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: The parameters and body are parsed separately to ensure that each is valid alone. For example, <code>new Function(\"/*\", \"*/ ) {\")</code> is not legal.</li><li>NOTE: If this step is reached, <var>sourceText</var> must conform to the grammar for <var>exprSym</var> (although the reverse implication does not hold). The purpose of the next two steps is to enforce any Early Error rules which apply to <var>exprSym</var> directly.</li><li>Let <var>expr</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <var>exprSym</var>).</li><li>If <var>expr</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>privateScope</var> be <emu-val>null</emu-val>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>sourceText</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Functions whose <var>kind</var> is <emu-const>async</emu-const> are not constructible and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>CreateDynamicFunction defines a <emu-val>\"prototype\"</emu-val> property on any function it creates whose <var>kind</var> is not <emu-const>async</emu-const> to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-function-definitions-static-semantics-early-errors": {"num": "15.2.1", "title": "#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"smus6qca\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g3mtfiqq\">\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          If the source code matched by <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.\n        </li>\n        <li>\n          If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matched by <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> does not include identifiers bound using var or function declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xn8an8nx\"><emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> contains any duplicate entries.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-block-duplicates-allowed-static-semantics": {"num": "B.3.2.4", "title": "#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-block-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-duplicates-allowed-static-semantics\">#sec-block-duplicates-allowed-static-semantics</span> Changes to Block Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-block-static-semantics-early-errors\"><a href=\"#sec-block-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-early-errors\">#sec-block-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ljp0ar\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> contains any duplicate entries<ins>, unless the source code matched by this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}, "sec-numeric-literals-early-errors": {"num": "12.8.3.1", "title": "#sec-numeric-literals-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-numeric-literals-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-literals-early-errors\">#sec-numeric-literals-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"8n96hykg\"><emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xvklurnl\"><emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>It is a Syntax Error if the source code matched by this production is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">In <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, this syntax is <emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Legacy</a></emu-xref>.</div></emu-note>\n      </emu-clause>\n\n      "}, "sec-ordinaryfunctioncreate": {"num": "10.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" type=\"abstract operation\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\" aoid=\"OrdinaryFunctionCreate\"><span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (<emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>), and <var>PrivateScope</var> (a <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> or <emu-val>null</emu-val>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matched by <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[PrivateEnvironment]] to <var>PrivateScope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[Fields]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[PrivateMethods]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[ClassFieldInitializerName]] to <emu-const>empty</emu-const>.</li><li>Let <var>len</var> be the <emu-xref aoid=\"ExpectedArgumentCount\"><a href=\"#sec-static-semantics-expectedargumentcount\">ExpectedArgumentCount</a></emu-xref> of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-patterns-static-semantics-early-errors-annexb": {"num": "B.1.2.1", "title": "#sec-patterns-static-semantics-early-errors-annexb Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-patterns-static-semantics-early-errors-annexb\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-patterns-static-semantics-early-errors-annexb\">#sec-patterns-static-semantics-early-errors-annexb</span> Static Semantics: Early Errors</h1>\n        <p>The semantics of <emu-xref href=\"#sec-patterns-static-semantics-early-errors\"><a href=\"#sec-patterns-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-patterns-static-semantics-early-errors\">#sec-patterns-static-semantics-early-errors</a></emu-xref> is extended as follows:</p>\n        <emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"u9cvu_c3\"><emu-nt><a href=\"#prod-annexB-InvalidBracedQuantifier\">InvalidBracedQuantifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any source text is matched by this rule.\n          </li>\n        </ul>\n        <p>Additionally, the rules for the following productions are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"NonemptyClassRanges\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonemptyClassRanges\">NonemptyClassRanges</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"pblfo8mk\">\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> or <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[UnicodeMode]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is larger than the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n        <emu-grammar><emu-production name=\"NonemptyClassRangesNoDash\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonemptyClassRangesNoDash\">NonemptyClassRangesNoDash</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6yvgquyp\">\n        <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>true</emu-val> or <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[UnicodeMode]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is larger than the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n\n      "}, "sec-forbidden-extensions": {"num": "17.1", "title": "#sec-forbidden-extensions Forbidden Extensions", "html": "<emu-clause id=\"sec-forbidden-extensions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</span> Forbidden Extensions</h1>\n    <p>An implementation must not extend this specification in the following ways:</p>\n    <ul>\n      <li>\n        ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> defined using syntactic <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> must not be created with own properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val>. Such own properties also must not be created for <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> defined using an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> regardless of whether the definition is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Built-in functions, <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref> created using the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, generator functions created using the Generator <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, async functions created using the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, and functions created using the <code>bind</code> method also must not be created with such own properties.\n      </li>\n      <li>\n        If an implementation extends any <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with an own property named <emu-val>\"caller\"</emu-val> the value of that property, as observed using [[Get]] or [[GetOwnProperty]], must not be a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref> object. If it is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>, the function that is the value of the property's [[Get]] attribute must never return a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref> when called.\n      </li>\n      <li>\n        Neither mapped nor unmapped arguments objects may be created with an own property named <emu-val>\"caller\"</emu-val>.\n      </li>\n      <li>\n        The behaviour of built-in methods which are specified in ECMA-402, such as those named <code>toLocaleString</code>, must not be extended except as specified in ECMA-402.\n      </li>\n      <li>\n        The RegExp pattern grammars in <emu-xref href=\"#sec-patterns\"><a href=\"#sec-patterns\" class=\"excluded-xref\" excluded-id=\"sec-patterns\">#sec-patterns</a></emu-xref> and <emu-xref href=\"#sec-regular-expressions-patterns\"><a href=\"#sec-regular-expressions-patterns\" class=\"excluded-xref\" excluded-id=\"sec-regular-expressions-patterns\">#sec-regular-expressions-patterns</a></emu-xref> must not be extended to recognize any of the source characters A-Z or a-z as <emu-nt params=\"+UnicodeMode\"><a href=\"#prod-IdentityEscape\">IdentityEscape</a><emu-mods><emu-params>[+UnicodeMode]</emu-params></emu-mods></emu-nt> when the <sub>[UnicodeMode]</sub> grammar parameter is present.\n      </li>\n      <li>\n        The Syntactic Grammar must not be extended in any manner that allows the token <code>:</code> to immediately follow source text that is matched by the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> nonterminal symbol.\n      </li>\n      <li>\n        When processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, an implementation must not relax the <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules of <emu-xref href=\"#sec-numeric-literals-early-errors\"><a href=\"#sec-numeric-literals-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-numeric-literals-early-errors\">#sec-numeric-literals-early-errors</a></emu-xref>.\n      </li>\n      <li>\n        <emu-nt><a href=\"#prod-TemplateEscapeSequence\">TemplateEscapeSequence</a></emu-nt> must not be extended to include <emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt> as defined in <emu-xref href=\"#sec-literals-string-literals\"><a href=\"#sec-literals-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-string-literals\">#sec-literals-string-literals</a></emu-xref>.\n      </li>\n      <li>\n        When processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the extensions defined in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref>, <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>, <emu-xref href=\"#sec-functiondeclarations-in-ifstatement-statement-clauses\"><a href=\"#sec-functiondeclarations-in-ifstatement-statement-clauses\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">#sec-functiondeclarations-in-ifstatement-statement-clauses</a></emu-xref>, and <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref> must not be supported.\n      </li>\n      <li>\n        When parsing for the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, the lexical grammar extensions defined in <emu-xref href=\"#sec-html-like-comments\"><a href=\"#sec-html-like-comments\" class=\"excluded-xref\" excluded-id=\"sec-html-like-comments\">#sec-html-like-comments</a></emu-xref> must not be supported.\n      </li>\n      <!-- The following is so that in the future we can potentially add new arguments or support ArgumentList. -->\n      <li>\n        <emu-nt><a href=\"#prod-ImportCall\">ImportCall</a></emu-nt> must not be extended.\n      </li>\n    </ul>\n  </emu-clause>\n"}, "sec-function-calls-runtime-semantics-evaluation": {"num": "13.3.6.1", "title": "#sec-function-calls-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-calls-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-calls-runtime-semantics-evaluation\">#sec-function-calls-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7jj-96li\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>memberExpr</var> be the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> of <var>expr</var>.</li><li>Let <var>arguments</var> be the <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> of <var>expr</var>.</li><li>Let <var>ref</var> be the result of evaluating <var>memberExpr</var>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>, and <var>ref</var>.[[ReferencedName]] is <emu-val>\"eval\"</emu-val>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>func</var>, <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\">%eval%</a></emu-xref>) is <emu-val>true</emu-val>, then<ol><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <var>arguments</var>.</li><li>If <var>argList</var> has no elements, return <emu-val>undefined</emu-val>.</li><li>Let <var>evalArg</var> be the first element of <var>argList</var>.</li><li>If the source code matched by this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strictCaller</var> be <emu-val>true</emu-val>. Otherwise let <var>strictCaller</var> be <emu-val>false</emu-val>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li id=\"step-callexpression-evaluation-direct-eval\">Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>evalArg</var>, <var>evalRealm</var>, <var>strictCaller</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailCall</var>).</li></ol></emu-alg>\n        <p>A <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> evaluation that executes step <emu-xref href=\"#step-callexpression-evaluation-direct-eval\"><a href=\"#step-callexpression-evaluation-direct-eval\">6.a.vi</a></emu-xref> is a <dfn variants=\"direct evals\">direct eval</dfn>.</p>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qugahahu\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string-literals-early-errors": {"num": "12.8.4.1", "title": "#sec-string-literals-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-string-literals-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-literals-early-errors\">#sec-string-literals-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6mwrfc1u\"><emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nv0ui3q7\"><emu-nt><a href=\"#prod-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>It is a Syntax Error if the source code matched by this production is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">In <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, this syntax is <emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Legacy</a></emu-xref>.</div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>It is possible for string literals to precede a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> that places the enclosing code in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode</a></emu-xref>, and implementations must take care to enforce the above rules for such literals. For example, the following source text contains a Syntax Error:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">invalid</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-string\">\"\\7\"</span>; <span class=\"hljs-string\">\"use strict\"</span>; }</code></pre>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-with-statement-static-semantics-early-errors": {"num": "14.11.1", "title": "#sec-with-statement-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-with-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the code matched by this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"IsLabelledFunction\"><a href=\"#sec-islabelledfunction\">IsLabelledFunction</a></emu-xref>(<emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>) is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>It is only necessary to apply the second rule if the extension specified in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref> is implemented.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-left-hand-side-expressions-static-semantics-early-errors": {"num": "13.3.1.1", "title": "#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">#sec-left-hand-side-expressions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"OptionalChain\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tfcmykyj\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ocv4xe0-\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any code is matched by this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This production exists in order to prevent automatic semicolon insertion rules (<emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>) from being applied to the following code:</p>\n          <pre><code class=\"javascript hljs\">a?.<span class=\"hljs-property\">b</span>\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>so that it would be interpreted as two valid statements. The purpose is to maintain consistency with similar code without optional chaining:</p>\n          <pre><code class=\"javascript hljs\">a.<span class=\"hljs-property\">b</span>\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>which is a valid statement and where automatic semicolon insertion does not apply.</p>\n        </div></emu-note>\n\n        <emu-grammar><emu-production name=\"ImportMeta\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8myn6frq\">\n        <emu-t>import</emu-t>\n        <emu-t>.</emu-t>\n        <emu-t>meta</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is not <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-clause>\n    "}, "sec-labelled-statements-static-semantics-early-errors": {"num": "14.13.1", "title": "#sec-labelled-statements-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-labelled-statements-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements-static-semantics-early-errors\">#sec-labelled-statements-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if any source text is matched by this rule.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An alternative definition for this rule is provided in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-static-semantics-early-errors": {"num": "15.5.1", "title": "#sec-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-generator-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-static-semantics-early-errors\">#sec-generator-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"dsczygsq\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"32ghovyc\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          If the source code matched by <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.\n        </li>\n        <li>\n          If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matched by <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-async-generator-function-definitions-static-semantics-early-errors": {"num": "15.6.1", "title": "#sec-async-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">#sec-async-generator-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"xruu4gg0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nplor0n0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>If the source code matched by <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.</li>\n        <li>If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matched by <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-object-initializer-static-semantics-early-errors": {"num": "13.2.5.1", "title": "#sec-object-initializer-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-object-initializer-static-semantics-early-errors\" oldids=\"sec-__proto__-property-names-in-object-initializers\"><span id=\"sec-__proto__-property-names-in-object-initializers\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is not empty.\n          </li>\n        </ul>\n        <p>In addition to describing an actual object initializer the <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> productions are also used as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> and may be recognized as part of a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>. When <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required the following Early Error rules are <b>not</b> applied. In addition, they are not applied when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3wg6qczf\"><emu-nt><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            Always throw a Syntax Error if code is matched by this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This production exists so that <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> can serve as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt>. It cannot occur in an actual object initializer.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g--o073w\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hwnsf_iz\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>. This rule is not applied if this <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> is contained within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> that is being parsed for JSON.parse (see step <emu-xref href=\"#step-json-parse-parse\"><a href=\"#step-json-parse-parse\" class=\"excluded-xref\" excluded-id=\"step-json-parse-parse\">#step-json-parse-parse</a></emu-xref> of <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>).\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> does not include property names defined using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-function-definitions-static-semantics-early-errors": {"num": "15.8.1", "title": "#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-async-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-static-semantics-early-errors\">#sec-async-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"agdmcdye\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1_djgdhl\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>If the source code matched by <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.</li>\n        <li>If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matched by <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-resolvebinding": {"num": "9.4.2", "title": "#sec-resolvebinding ResolveBinding ( name [ , env ] )", "html": "<emu-clause id=\"sec-resolvebinding\" type=\"abstract operation\" aoid=\"ResolveBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvebinding\">#sec-resolvebinding</span> ResolveBinding ( <var>name</var> [ , <var>env</var> ] )</h1>\n      <p>The abstract operation ResolveBinding takes argument <var>name</var> (a String) and optional argument <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> or <emu-val>undefined</emu-val>). It is used to determine the binding of <var>name</var>. <var>env</var> can be used to explicitly provide the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is to be searched for the binding. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>env</var> is not present or if <var>env</var> is <emu-val>undefined</emu-val>, then<ol><li>Set <var>env</var> to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>If the code matched by the syntactic production that is being evaluated is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>env</var>, <var>name</var>, <var>strict</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The result of ResolveBinding is always a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> whose [[ReferencedName]] field is <var>name</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-types-of-source-code": {"num": "11.2", "title": "#sec-types-of-source-code Types of Source Code", "html": "<emu-clause id=\"sec-types-of-source-code\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</span> Types of Source Code</h1>\n    <p>There are four types of ECMAScript code:</p>\n    <ul>\n      <li>\n        <em>Global code</em> is source text that is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The global code of a particular <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> does not include any source text that is parsed as part of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n      <li>\n        <em>Eval code</em> is the source text supplied to the built-in <code>eval</code> function. More precisely, if the parameter to the built-in <code>eval</code> function is a String, it is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The eval code for a particular invocation of <code>eval</code> is the global code portion of that <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.\n      </li>\n      <li>\n        <p><em>Function code</em> is source text that is parsed to supply the value of the [[ECMAScriptCode]] and [[FormalParameters]] internal slots (see <emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function code of a particular ECMAScript function does not include any source text that is parsed as the function code of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</p>\n        <p>In addition, if the source text referred to above is parsed as:</p>\n        <ul>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, or</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>,</li>\n        </ul>\n        <p>then the source text matched by the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> (if any) of that declaration or expression is also included in the function code of the corresponding function.</p>\n      </li>\n      <li>\n        <em>Module code</em> is source text that is code that is provided as a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt>. It is the code that is directly evaluated when a module is initialized. The module code of a particular module does not include any source text that is parsed as part of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n    </ul>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Function code is generally provided as the bodies of Function Definitions (<emu-xref href=\"#sec-function-definitions\"><a href=\"#sec-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</a></emu-xref>), Arrow Function Definitions (<emu-xref href=\"#sec-arrow-function-definitions\"><a href=\"#sec-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</a></emu-xref>), Method Definitions (<emu-xref href=\"#sec-method-definitions\"><a href=\"#sec-method-definitions\" class=\"excluded-xref\" excluded-id=\"sec-method-definitions\">#sec-method-definitions</a></emu-xref>), Generator Function Definitions (<emu-xref href=\"#sec-generator-function-definitions\"><a href=\"#sec-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-generator-function-definitions\">#sec-generator-function-definitions</a></emu-xref>), Async Function Definitions (<emu-xref href=\"#sec-async-function-definitions\"><a href=\"#sec-async-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</a></emu-xref>), Async Generator Function Definitions (<emu-xref href=\"#sec-async-generator-function-definitions\"><a href=\"#sec-async-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-generator-function-definitions\">#sec-async-generator-function-definitions</a></emu-xref>), and Async Arrow Functions (<emu-xref href=\"#sec-async-arrow-function-definitions\"><a href=\"#sec-async-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-arrow-function-definitions\">#sec-async-arrow-function-definitions</a></emu-xref>). Function code is also derived from the arguments to the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>), the GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-generatorfunction\"><a href=\"#sec-generatorfunction\" class=\"excluded-xref\" excluded-id=\"sec-generatorfunction\">#sec-generatorfunction</a></emu-xref>), and the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-async-function-constructor-arguments\"><a href=\"#sec-async-function-constructor-arguments\" class=\"excluded-xref\" excluded-id=\"sec-async-function-constructor-arguments\">#sec-async-function-constructor-arguments</a></emu-xref>).</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The practical effect of including the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in function code is that the Early Errors for <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> are applied to a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> that is the name of a function whose body contains a \"use strict\" directive, even if the surrounding code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-directive-prologues-and-the-use-strict-directive\"><h1><span class=\"secnum\">11.2.1</span>#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive</h1>...</div><div id=\"excluded-sec-strict-mode-code\"><h1><span class=\"secnum\">11.2.2</span>#sec-strict-mode-code Strict Mode Code</h1>...</div><div id=\"excluded-sec-non-ecmascript-functions\"><h1><span class=\"secnum\">11.2.3</span>#sec-non-ecmascript-functions Non-ECMAScript Functions</h1>...</div></emu-clause>\n"}, "sec-switch-duplicates-allowed-static-semantics": {"num": "B.3.2.5", "title": "#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-switch-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-duplicates-allowed-static-semantics\">#sec-switch-duplicates-allowed-static-semantics</span> Changes to <code>switch</code> Statement Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-switch-statement-static-semantics-early-errors\"><a href=\"#sec-switch-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-static-semantics-early-errors\">#sec-switch-statement-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> contains any duplicate entries<ins>, unless the source code matched by this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 34"}}}