{"from": {"secList": ["sec-types-of-source-code", "sec-labelled-function-declarations", "sec-ecmascript-language-source-code", "sec-function-calls-runtime-semantics-evaluation", "sec-left-hand-side-expressions-static-semantics-early-errors", "sec-forbidden-extensions", "sec-property-accessors-runtime-semantics-evaluation", "sec-object-initializer-static-semantics-early-errors", "sec-optional-chaining-chain-evaluation", "sec-createdynamicfunction", "sec-generator-function-definitions-static-semantics-early-errors", "sec-function-definitions-static-semantics-early-errors", "sec-async-function-definitions-static-semantics-early-errors", "sec-scripts-static-semantics-early-errors", "sec-switch-duplicates-allowed-static-semantics", "sec-labelled-statements-static-semantics-early-errors", "sec-cyclic-module-records", "sec-ordinaryfunctioncreate", "sec-isintailposition", "sec-patterns-static-semantics-early-errors-annexb", "sec-numeric-literals-early-errors", "sec-html-like-comments", "sec-block-duplicates-allowed-static-semantics", "sec-string-literals-early-errors", "sec-async-generator-function-definitions-static-semantics-early-errors", "sec-super-keyword-runtime-semantics-evaluation", "sec-with-statement-static-semantics-early-errors", "sec-functiondeclarations-in-ifstatement-statement-clauses", "sec-identifiers-static-semantics-early-errors", "sec-resolvebinding", "sec-pattern-semantics"], "secData": {"sec-types-of-source-code": {"num": "11.2", "title": "#sec-types-of-source-code Types of Source Code", "html": "<emu-clause id=\"sec-types-of-source-code\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</span> Types of Source Code</h1>\n    <p>There are four types of ECMAScript code:</p>\n    <ul>\n      <li>\n        <em>Global code</em> is source text that is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The global code of a particular <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> does not include any source text that is parsed as part of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n      <li>\n        <em>Eval code</em> is the source text supplied to the built-in <code>eval</code> function. More precisely, if the parameter to the built-in <code>eval</code> function is a String, it is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The eval code for a particular invocation of <code>eval</code> is the global code portion of that <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.\n      </li>\n      <li>\n        <p><em>Function code</em> is source text that is parsed to supply the value of the [[ECMAScriptCode]] and [[FormalParameters]] internal slots (see <emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function code of a particular ECMAScript function does not include any source text that is parsed as the function code of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</p>\n        <p>In addition, if the source text referred to above is parsed as:</p>\n        <ul>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, or</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>,</li>\n        </ul>\n        <p>then the source text matching the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> (if any) of that declaration or expression is also included in the function code of the corresponding function.</p>\n      </li>\n      <li>\n        <em>Module code</em> is source text that is code that is provided as a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt>. It is the code that is directly evaluated when a module is initialized. The module code of a particular module does not include any source text that is parsed as part of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n    </ul>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Function code is generally provided as the bodies of Function Definitions (<emu-xref href=\"#sec-function-definitions\"><a href=\"#sec-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</a></emu-xref>), Arrow Function Definitions (<emu-xref href=\"#sec-arrow-function-definitions\"><a href=\"#sec-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</a></emu-xref>), Method Definitions (<emu-xref href=\"#sec-method-definitions\"><a href=\"#sec-method-definitions\" class=\"excluded-xref\" excluded-id=\"sec-method-definitions\">#sec-method-definitions</a></emu-xref>), Generator Function Definitions (<emu-xref href=\"#sec-generator-function-definitions\"><a href=\"#sec-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-generator-function-definitions\">#sec-generator-function-definitions</a></emu-xref>), Async Function Definitions (<emu-xref href=\"#sec-async-function-definitions\"><a href=\"#sec-async-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</a></emu-xref>), Async Generator Function Definitions (<emu-xref href=\"#sec-async-generator-function-definitions\"><a href=\"#sec-async-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-generator-function-definitions\">#sec-async-generator-function-definitions</a></emu-xref>), and Async Arrow Functions (<emu-xref href=\"#sec-async-arrow-function-definitions\"><a href=\"#sec-async-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-arrow-function-definitions\">#sec-async-arrow-function-definitions</a></emu-xref>). Function code is also derived from the arguments to the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>), the GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-generatorfunction\"><a href=\"#sec-generatorfunction\" class=\"excluded-xref\" excluded-id=\"sec-generatorfunction\">#sec-generatorfunction</a></emu-xref>), and the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-async-function-constructor-arguments\"><a href=\"#sec-async-function-constructor-arguments\" class=\"excluded-xref\" excluded-id=\"sec-async-function-constructor-arguments\">#sec-async-function-constructor-arguments</a></emu-xref>).</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The practical effect of including the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in function code is that the Early Errors for <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> are applied to a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> that is the name of a function whose body contains a \"use strict\" directive, even if the surrounding code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-directive-prologues-and-the-use-strict-directive\"><h1><span class=\"secnum\">11.2.1</span>#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive</h1>...</div><div id=\"excluded-sec-strict-mode-code\"><h1><span class=\"secnum\">11.2.2</span>#sec-strict-mode-code Strict Mode Code</h1>...</div><div id=\"excluded-sec-non-ecmascript-functions\"><h1><span class=\"secnum\">11.2.3</span>#sec-non-ecmascript-functions Non-ECMAScript Functions</h1>...</div></emu-clause>\n"}, "sec-labelled-function-declarations": {"num": "B.3.1", "title": "#sec-labelled-function-declarations Labelled Function Declarations", "html": "<emu-annex id=\"sec-labelled-function-declarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</span> Labelled Function Declarations</h1>\n      <p>Prior to ECMAScript 2015, the specification of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> did not allow for the association of a statement label with a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>. However, a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension for <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref> and most browser-hosted ECMAScript implementations supported that extension. In ECMAScript 2015 and later, the grammar production for <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> permits use of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as a <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> but <emu-xref href=\"#sec-labelled-statements-static-semantics-early-errors\"><a href=\"#sec-labelled-statements-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-labelled-statements-static-semantics-early-errors\">#sec-labelled-statements-static-semantics-early-errors</a></emu-xref> includes an Early Error rule that produces a Syntax Error if that occurs. That rule is modified with the addition of the <ins>highlighted</ins> text:</p>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if any <ins>strict mode</ins> source code matches this rule.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>, <emu-nt><a href=\"#prod-annexB-IfStatement\">IfStatement</a></emu-nt>, and <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> prevent these statements from containing a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-annex>\n\n    "}, "sec-ecmascript-language-source-code": {"num": "11", "title": "#sec-ecmascript-language-source-code ECMAScript Language: Source Code", "html": "<emu-clause id=\"sec-ecmascript-language-source-code\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</span> ECMAScript Language: Source Code</h1>\n\n  <div id=\"excluded-sec-source-text\"><h1><span class=\"secnum\">11.1</span>#sec-source-text Source Text</h1>...</div><div id=\"excluded-sec-types-of-source-code\"><h1><span class=\"secnum\">11.2</span>#sec-types-of-source-code Types of Source Code</h1>...</div></emu-clause>\n\n"}, "sec-function-calls-runtime-semantics-evaluation": {"num": "13.3.6.1", "title": "#sec-function-calls-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-calls-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-calls-runtime-semantics-evaluation\">#sec-function-calls-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7jj-96li\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>memberExpr</var> be the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> of <var>expr</var>.</li><li>Let <var>arguments</var> be the <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> of <var>expr</var>.</li><li>Let <var>ref</var> be the result of evaluating <var>memberExpr</var>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>, and <var>ref</var>.[[ReferencedName]] is <emu-val>\"eval\"</emu-val>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>func</var>, <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\">%eval%</a></emu-xref>) is <emu-val>true</emu-val>, then<ol><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <var>arguments</var>.</li><li>If <var>argList</var> has no elements, return <emu-val>undefined</emu-val>.</li><li>Let <var>evalArg</var> be the first element of <var>argList</var>.</li><li>If the source code matching this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strictCaller</var> be <emu-val>true</emu-val>. Otherwise let <var>strictCaller</var> be <emu-val>false</emu-val>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li id=\"step-callexpression-evaluation-direct-eval\">Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>evalArg</var>, <var>evalRealm</var>, <var>strictCaller</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailCall</var>).</li></ol></emu-alg>\n        <p>A <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> evaluation that executes step <emu-xref href=\"#step-callexpression-evaluation-direct-eval\"><a href=\"#step-callexpression-evaluation-direct-eval\">6.a.vi</a></emu-xref> is a <dfn variants=\"direct evals\">direct eval</dfn>.</p>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qugahahu\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-left-hand-side-expressions-static-semantics-early-errors": {"num": "13.3.1.1", "title": "#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">#sec-left-hand-side-expressions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"OptionalChain\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tfcmykyj\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ocv4xe0-\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any code matches this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This production exists in order to prevent automatic semicolon insertion rules (<emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>) from being applied to the following code:</p>\n          <pre><code class=\"javascript hljs\">a?.<span class=\"hljs-property\">b</span>\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>so that it would be interpreted as two valid statements. The purpose is to maintain consistency with similar code without optional chaining:</p>\n          <pre><code class=\"javascript hljs\">a.<span class=\"hljs-property\">b</span>\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>which is a valid statement and where automatic semicolon insertion does not apply.</p>\n        </div></emu-note>\n\n        <emu-grammar><emu-production name=\"ImportMeta\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8myn6frq\">\n        <emu-t>import</emu-t>\n        <emu-t>.</emu-t>\n        <emu-t>meta</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is not <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-clause>\n    "}, "sec-forbidden-extensions": {"num": "17.1", "title": "#sec-forbidden-extensions Forbidden Extensions", "html": "<emu-clause id=\"sec-forbidden-extensions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</span> Forbidden Extensions</h1>\n    <p>An implementation must not extend this specification in the following ways:</p>\n    <ul>\n      <li>\n        ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> defined using syntactic <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> must not be created with own properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val>. Such own properties also must not be created for <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> defined using an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> regardless of whether the definition is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Built-in functions, <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref> created using the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, generator functions created using the Generator <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, async functions created using the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, and functions created using the <code>bind</code> method also must not be created with such own properties.\n      </li>\n      <li>\n        If an implementation extends any <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with an own property named <emu-val>\"caller\"</emu-val> the value of that property, as observed using [[Get]] or [[GetOwnProperty]], must not be a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref> object. If it is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>, the function that is the value of the property's [[Get]] attribute must never return a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref> when called.\n      </li>\n      <li>\n        Neither mapped nor unmapped arguments objects may be created with an own property named <emu-val>\"caller\"</emu-val>.\n      </li>\n      <li>\n        The behaviour of built-in methods which are specified in ECMA-402, such as those named <code>toLocaleString</code>, must not be extended except as specified in ECMA-402.\n      </li>\n      <li>\n        The RegExp pattern grammars in <emu-xref href=\"#sec-patterns\"><a href=\"#sec-patterns\" class=\"excluded-xref\" excluded-id=\"sec-patterns\">#sec-patterns</a></emu-xref> and <emu-xref href=\"#sec-regular-expressions-patterns\"><a href=\"#sec-regular-expressions-patterns\" class=\"excluded-xref\" excluded-id=\"sec-regular-expressions-patterns\">#sec-regular-expressions-patterns</a></emu-xref> must not be extended to recognize any of the source characters A-Z or a-z as <emu-nt params=\"+UnicodeMode\"><a href=\"#prod-IdentityEscape\">IdentityEscape</a><emu-mods><emu-params>[+UnicodeMode]</emu-params></emu-mods></emu-nt> when the <sub>[UnicodeMode]</sub> grammar parameter is present.\n      </li>\n      <li>\n        The Syntactic Grammar must not be extended in any manner that allows the token <code>:</code> to immediately follow source text that matches the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> nonterminal symbol.\n      </li>\n      <li>\n        When processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, an implementation must not relax the <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules of <emu-xref href=\"#sec-numeric-literals-early-errors\"><a href=\"#sec-numeric-literals-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-numeric-literals-early-errors\">#sec-numeric-literals-early-errors</a></emu-xref>.\n      </li>\n      <li>\n        <emu-nt><a href=\"#prod-TemplateEscapeSequence\">TemplateEscapeSequence</a></emu-nt> must not be extended to include <emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt> as defined in <emu-xref href=\"#sec-literals-string-literals\"><a href=\"#sec-literals-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-string-literals\">#sec-literals-string-literals</a></emu-xref>.\n      </li>\n      <li>\n        When processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the extensions defined in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref>, <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>, <emu-xref href=\"#sec-functiondeclarations-in-ifstatement-statement-clauses\"><a href=\"#sec-functiondeclarations-in-ifstatement-statement-clauses\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">#sec-functiondeclarations-in-ifstatement-statement-clauses</a></emu-xref>, and <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref> must not be supported.\n      </li>\n      <li>\n        When parsing for the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, the lexical grammar extensions defined in <emu-xref href=\"#sec-html-like-comments\"><a href=\"#sec-html-like-comments\" class=\"excluded-xref\" excluded-id=\"sec-html-like-comments\">#sec-html-like-comments</a></emu-xref> must not be supported.\n      </li>\n      <!-- The following is so that in the future we can potentially add new arguments or support ArgumentList. -->\n      <li>\n        <emu-nt><a href=\"#prod-ImportCall\">ImportCall</a></emu-nt> must not be extended.\n      </li>\n    </ul>\n  </emu-clause>\n"}, "sec-property-accessors-runtime-semantics-evaluation": {"num": "13.3.2.1", "title": "#sec-property-accessors-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-property-accessors-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-property-accessors-runtime-semantics-evaluation\">#sec-property-accessors-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a74xd7de\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithExpressionKey\"><a href=\"#sec-evaluate-property-access-with-expression-key\">EvaluatePropertyAccessWithExpressionKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"frbj984t\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithIdentifierKey\"><a href=\"#sec-evaluate-property-access-with-identifier-key\">EvaluatePropertyAccessWithIdentifierKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0uk9afbi\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>fieldNameString</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"MakePrivateReference\"><a href=\"#sec-makeprivatereference\">MakePrivateReference</a></emu-xref>(<var>baseValue</var>, <var>fieldNameString</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2u2urbmg\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithExpressionKey\"><a href=\"#sec-evaluate-property-access-with-expression-key\">EvaluatePropertyAccessWithExpressionKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"u6lsbvgu\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithIdentifierKey\"><a href=\"#sec-evaluate-property-access-with-identifier-key\">EvaluatePropertyAccessWithIdentifierKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cysjk9wh\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>fieldNameString</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"MakePrivateReference\"><a href=\"#sec-makeprivatereference\">MakePrivateReference</a></emu-xref>(<var>baseValue</var>, <var>fieldNameString</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-object-initializer-static-semantics-early-errors": {"num": "13.2.5.1", "title": "#sec-object-initializer-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-object-initializer-static-semantics-early-errors\" oldids=\"sec-__proto__-property-names-in-object-initializers\"><span id=\"sec-__proto__-property-names-in-object-initializers\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is not empty.\n          </li>\n        </ul>\n        <p>In addition to describing an actual object initializer the <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> productions are also used as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> and may be recognized as part of a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>. When <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required the following Early Error rules are <b>not</b> applied. In addition, they are not applied when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3wg6qczf\"><emu-nt><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            Always throw a Syntax Error if code matches this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This production exists so that <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> can serve as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt>. It cannot occur in an actual object initializer.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g--o073w\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hwnsf_iz\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>. This rule is not applied if this <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> is contained within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> that is being parsed for JSON.parse (see step <emu-xref href=\"#step-json-parse-parse\"><a href=\"#step-json-parse-parse\" class=\"excluded-xref\" excluded-id=\"step-json-parse-parse\">#step-json-parse-parse</a></emu-xref> of <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>).\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> does not include property names defined using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-optional-chaining-chain-evaluation": {"num": "13.3.9.2", "title": "#sec-optional-chaining-chain-evaluation Runtime Semantics: ChainEvaluation", "html": "<emu-clause id=\"sec-optional-chaining-chain-evaluation\" type=\"sdo\" aoid=\"ChainEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-optional-chaining-chain-evaluation\">#sec-optional-chaining-chain-evaluation</span> Runtime Semantics: ChainEvaluation</h1>\n        <p>The syntax-directed operation ChainEvaluation takes arguments <var>baseValue</var> and <var>baseReference</var>. It is defined piecewise over the following productions:</p>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ynxeowdb\" id=\"prod-1C3YSxR_\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>thisChain</var> be this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisChain</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>baseValue</var>, <var>baseReference</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kktyttw7\" id=\"prod-w5u7jzLu\">\n        <emu-t>?.</emu-t>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If the code matched by this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithExpressionKey\"><a href=\"#sec-evaluate-property-access-with-expression-key\">EvaluatePropertyAccessWithExpressionKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w-4ch2am\" id=\"prod-9T4kB2jq\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If the code matched by this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithIdentifierKey\"><a href=\"#sec-evaluate-property-access-with-identifier-key\">EvaluatePropertyAccessWithIdentifierKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0xlnjlpz\" id=\"prod-JeRaAt5H\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>fieldNameString</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"MakePrivateReference\"><a href=\"#sec-makeprivatereference\">MakePrivateReference</a></emu-xref>(<var>baseValue</var>, <var>fieldNameString</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eogoekck\" id=\"prod-kAXkNcIE\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>optionalChain</var> be <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>newReference</var> be ? <emu-xref aoid=\"ChainEvaluation\"><a href=\"#sec-optional-chaining-chain-evaluation\">ChainEvaluation</a></emu-xref> of <var>optionalChain</var> with arguments <var>baseValue</var> and <var>baseReference</var>.</li><li>Let <var>newValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>newReference</var>).</li><li>Let <var>thisChain</var> be this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisChain</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>newValue</var>, <var>newReference</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jgl-kve-\" id=\"prod-PNgnxyKa\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>optionalChain</var> be <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>newReference</var> be ? <emu-xref aoid=\"ChainEvaluation\"><a href=\"#sec-optional-chaining-chain-evaluation\">ChainEvaluation</a></emu-xref> of <var>optionalChain</var> with arguments <var>baseValue</var> and <var>baseReference</var>.</li><li>Let <var>newValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>newReference</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithExpressionKey\"><a href=\"#sec-evaluate-property-access-with-expression-key\">EvaluatePropertyAccessWithExpressionKey</a></emu-xref>(<var>newValue</var>, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lf2imwfr\" id=\"prod-Il7WrbnC\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>optionalChain</var> be <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>newReference</var> be ? <emu-xref aoid=\"ChainEvaluation\"><a href=\"#sec-optional-chaining-chain-evaluation\">ChainEvaluation</a></emu-xref> of <var>optionalChain</var> with arguments <var>baseValue</var> and <var>baseReference</var>.</li><li>Let <var>newValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>newReference</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithIdentifierKey\"><a href=\"#sec-evaluate-property-access-with-identifier-key\">EvaluatePropertyAccessWithIdentifierKey</a></emu-xref>(<var>newValue</var>, <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dnp-fbqk\" id=\"prod-5tv-oPv9\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>optionalChain</var> be <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>newReference</var> be ? <emu-xref aoid=\"ChainEvaluation\"><a href=\"#sec-optional-chaining-chain-evaluation\">ChainEvaluation</a></emu-xref> of <var>optionalChain</var> with arguments <var>baseValue</var> and <var>baseReference</var>.</li><li>Let <var>newValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>newReference</var>).</li><li>Let <var>fieldNameString</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"MakePrivateReference\"><a href=\"#sec-makeprivatereference\">MakePrivateReference</a></emu-xref>(<var>newValue</var>, <var>fieldNameString</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-createdynamicfunction": {"num": "20.2.1.1.1", "title": "#sec-createdynamicfunction CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" type=\"abstract operation\" oldids=\"table-dynamic-function-sourcetext-prefixes\" aoid=\"CreateDynamicFunction\"><span id=\"table-dynamic-function-sourcetext-prefixes\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (<emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language values</a></emu-xref>). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%GeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"async function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>prefix</var> be <emu-val>\"async function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1,<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Let <var>sourceText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>sourceString</var>).</li><li>Let <var>parameters</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>), <var>parameterSym</var>).</li><li>If <var>parameters</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>bodyString</var>), <var>bodySym</var>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: The parameters and body are parsed separately to ensure that each is valid alone. For example, <code>new Function(\"/*\", \"*/ ) {\")</code> is not legal.</li><li>NOTE: If this step is reached, <var>sourceText</var> must match <var>exprSym</var> (although the reverse implication does not hold). The purpose of the next two steps is to enforce any Early Error rules which apply to <var>exprSym</var> directly.</li><li>Let <var>expr</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <var>exprSym</var>).</li><li>If <var>expr</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>privateScope</var> be <emu-val>null</emu-val>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>sourceText</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Functions whose <var>kind</var> is <emu-const>async</emu-const> are not constructible and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>CreateDynamicFunction defines a <emu-val>\"prototype\"</emu-val> property on any function it creates whose <var>kind</var> is not <emu-const>async</emu-const> to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-generator-function-definitions-static-semantics-early-errors": {"num": "15.5.1", "title": "#sec-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-generator-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-static-semantics-early-errors\">#sec-generator-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"dsczygsq\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"32ghovyc\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          If the source code matching <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.\n        </li>\n        <li>\n          If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matching <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-function-definitions-static-semantics-early-errors": {"num": "15.2.1", "title": "#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"smus6qca\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g3mtfiqq\">\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          If the source code matching <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.\n        </li>\n        <li>\n          If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matching <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> does not include identifiers bound using var or function declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xn8an8nx\"><emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> contains any duplicate entries.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-static-semantics-early-errors": {"num": "15.8.1", "title": "#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-async-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-static-semantics-early-errors\">#sec-async-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"agdmcdye\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1_djgdhl\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>If the source code matching <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.</li>\n        <li>If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matching <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-scripts-static-semantics-early-errors": {"num": "16.1.1", "title": "#sec-scripts-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-scripts-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"Script\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t4-zzfei\"><emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> contains any duplicate entries.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <code>super</code> unless the source code containing <code>super</code> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <code>super</code> within <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> unless the source code containing <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> in <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>false</emu-val> unless the source code containing <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-switch-duplicates-allowed-static-semantics": {"num": "B.3.2.5", "title": "#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-switch-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-duplicates-allowed-static-semantics\">#sec-switch-duplicates-allowed-static-semantics</span> Changes to <code>switch</code> Statement Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-switch-statement-static-semantics-early-errors\"><a href=\"#sec-switch-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-static-semantics-early-errors\">#sec-switch-statement-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> contains any duplicate entries<ins>, unless the source code matching this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}, "sec-labelled-statements-static-semantics-early-errors": {"num": "14.13.1", "title": "#sec-labelled-statements-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-labelled-statements-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements-static-semantics-early-errors\">#sec-labelled-statements-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if any source text matches this rule.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An alternative definition for this rule is provided in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-cyclic-module-records": {"num": "16.2.1.5", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A <dfn id=\"cyclic-module-record\" variants=\"Cyclic Module Records\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Records</a></emu-xref> that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Records</a></emu-xref>.</p>\n        <p>In addition to the fields defined in <emu-xref href=\"#table-module-record-fields\"><a href=\"#table-module-record-fields\" class=\"excluded-xref\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</a></emu-xref> <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref> have the additional fields listed in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref></figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                </th>\n                <th>\n                  Value Type\n                </th>\n                <th>\n                  Meaning\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluating-async</emu-const> | <emu-const>evaluated</emu-const>\n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, possibly <emu-const>evaluating-async</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle. <emu-const>evaluating-async</emu-const> indicates this module is queued to execute on completion of its asynchronous dependencies or it is a module whose [[HasTLA]] field is <emu-val>true</emu-val> that has been executed and is pending top-level completion.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation. <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this non-negative number records the point at which the module was first visited during the depth-first traversal of the dependency graph.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[CycleRoot]]\n                </td>\n                <td>\n                  <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  The first visited module of the cycle, the root DFS ancestor of the strongly connected component. For a module not in a cycle this would be the module itself. Once Evaluate has completed, a module's [[DFSAncestorIndex]] is equal to the [[DFSIndex]] of its [[CycleRoot]].\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[HasTLA]]\n                </td>\n                <td>\n                  Boolean\n                </td>\n                <td>\n                  Whether this module is individually asynchronous (for example, if it's a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> containing a top-level await). Having an asynchronous dependency does not mean this field is <emu-val>true</emu-val>. This field must not change after the module is parsed.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[AsyncEvaluation]]\n                </td>\n                <td>\n                  Boolean\n                </td>\n                <td>\n                  Whether this module is either itself asynchronous or has an asynchronous dependency. Note: The order in which this field is set is used to order queued executions, see <emu-xref href=\"#sec-async-module-execution-fulfilled\"><a href=\"#sec-async-module-execution-fulfilled\" class=\"excluded-xref\" excluded-id=\"sec-async-module-execution-fulfilled\">#sec-async-module-execution-fulfilled</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[TopLevelCapability]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  If this module is the [[CycleRoot]] of some cycle, and Evaluate() was called on some module in that cycle, this field contains the <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> for that entire evaluation. It is used to settle the Promise object that is returned from the Evaluate() abstract method. This field will be <emu-const>empty</emu-const> for any dependencies of that module, unless a top-level Evaluate() has been initiated for some of those dependencies.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[AsyncParentModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref>\n                </td>\n                <td>\n                  If this module or a dependency has [[HasTLA]] <emu-val>true</emu-val>, and execution is in progress, this tracks the parent importers of this module for the top-level execution job. These parent modules will not start executing before this module has successfully completed execution.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[PendingAsyncDependencies]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  If this module has any asynchronous dependencies, this tracks the number of asynchronous dependency modules remaining to execute for this module. A module with asynchronous dependencies will be executed when this field reaches 0 and there are no execution errors.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in <emu-xref href=\"#table-abstract-methods-of-module-records\"><a href=\"#table-abstract-methods-of-module-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</a></emu-xref> <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref> have the additional methods listed in <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref></figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                </th>\n                <th>\n                  Purpose\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  InitializeEnvironment()\n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  ExecuteModule( [ <var>promiseCapability</var> ] )\n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>. If this module has <emu-val>true</emu-val> in [[HasTLA]], then a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> is passed as an argument, and the method is expected to resolve or reject the given capability. In this case, the method must not throw an exception, but instead reject the <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> if necessary.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">16.2.1.5.1</span>#sec-moduledeclarationlinking Link ( )</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">16.2.1.5.2</span>#sec-moduleevaluation Evaluate ( )</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">16.2.1.5.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-ordinaryfunctioncreate": {"num": "10.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" type=\"abstract operation\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\" aoid=\"OrdinaryFunctionCreate\"><span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (<emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>), and <var>PrivateScope</var> (a <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> or <emu-val>null</emu-val>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[PrivateEnvironment]] to <var>PrivateScope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[Fields]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[PrivateMethods]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[ClassFieldInitializerName]] to <emu-const>empty</emu-const>.</li><li>Let <var>len</var> be the <emu-xref aoid=\"ExpectedArgumentCount\"><a href=\"#sec-static-semantics-expectedargumentcount\">ExpectedArgumentCount</a></emu-xref> of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-isintailposition": {"num": "15.10.1", "title": "#sec-isintailposition Static Semantics: IsInTailPosition ( call )", "html": "<emu-clause id=\"sec-isintailposition\" type=\"abstract operation\" aoid=\"IsInTailPosition\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isintailposition\">#sec-isintailposition</span> Static Semantics: IsInTailPosition ( <var>call</var> )</h1>\n      <p>The abstract operation IsInTailPosition takes argument <var>call</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the source code matching <var>call</var> is <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>If <var>call</var> is not contained within a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> that most closely contains <var>call</var>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is an <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Return the result of <emu-xref aoid=\"HasCallInTailPosition\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <var>body</var> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Tail Position calls are only defined in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> because of a common non-standard language extension (see <emu-xref href=\"#sec-addrestrictedfunctionproperties\"><a href=\"#sec-addrestrictedfunctionproperties\" class=\"excluded-xref\" excluded-id=\"sec-addrestrictedfunctionproperties\">#sec-addrestrictedfunctionproperties</a></emu-xref>) that enables observation of the chain of caller contexts.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-patterns-static-semantics-early-errors-annexb": {"num": "B.1.2.1", "title": "#sec-patterns-static-semantics-early-errors-annexb Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-patterns-static-semantics-early-errors-annexb\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-patterns-static-semantics-early-errors-annexb\">#sec-patterns-static-semantics-early-errors-annexb</span> Static Semantics: Early Errors</h1>\n        <p>The semantics of <emu-xref href=\"#sec-patterns-static-semantics-early-errors\"><a href=\"#sec-patterns-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-patterns-static-semantics-early-errors\">#sec-patterns-static-semantics-early-errors</a></emu-xref> is extended as follows:</p>\n        <emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"u9cvu_c3\"><emu-nt><a href=\"#prod-annexB-InvalidBracedQuantifier\">InvalidBracedQuantifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any source text matches this rule.\n          </li>\n        </ul>\n        <p>Additionally, the rules for the following productions are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"NonemptyClassRanges\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonemptyClassRanges\">NonemptyClassRanges</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"pblfo8mk\">\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> or <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[UnicodeMode]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is larger than the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n        <emu-grammar><emu-production name=\"NonemptyClassRangesNoDash\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonemptyClassRangesNoDash\">NonemptyClassRangesNoDash</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6yvgquyp\">\n        <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>true</emu-val> or <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[UnicodeMode]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is larger than the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n\n      "}, "sec-numeric-literals-early-errors": {"num": "12.8.3.1", "title": "#sec-numeric-literals-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-numeric-literals-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-literals-early-errors\">#sec-numeric-literals-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"8n96hykg\"><emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xvklurnl\"><emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>It is a Syntax Error if the source code matching this production is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">In <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, this syntax is <emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Legacy</a></emu-xref>.</div></emu-note>\n      </emu-clause>\n\n      "}, "sec-html-like-comments": {"num": "B.1.1", "title": "#sec-html-like-comments HTML-like Comments", "html": "<emu-annex id=\"sec-html-like-comments\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-html-like-comments\">#sec-html-like-comments</span> HTML-like Comments</h1>\n      <p>The syntax and semantics of <emu-xref href=\"#sec-comments\"><a href=\"#sec-comments\" class=\"excluded-xref\" excluded-id=\"sec-comments\">#sec-comments</a></emu-xref> is extended as follows except that this extension is not allowed when parsing source code using the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>:</p>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"Comment\" type=\"lexical\" id=\"prod-annexB-Comment\">\n    <emu-nt><a href=\"#prod-annexB-Comment\">Comment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"sieyeref\"><emu-nt><a href=\"#prod-annexB-MultiLineComment\">MultiLineComment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"sscrkqcd\"><emu-nt><a href=\"#prod-SingleLineComment\">SingleLineComment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gpoosgoq\"><emu-nt><a href=\"#prod-annexB-SingleLineHTMLOpenComment\">SingleLineHTMLOpenComment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"-88cuq48\"><emu-nt><a href=\"#prod-annexB-SingleLineHTMLCloseComment\">SingleLineHTMLCloseComment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"x2zjsk6z\"><emu-nt><a href=\"#prod-annexB-SingleLineDelimitedComment\">SingleLineDelimitedComment</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MultiLineComment\" type=\"lexical\" id=\"prod-annexB-MultiLineComment\">\n    <emu-nt><a href=\"#prod-annexB-MultiLineComment\">MultiLineComment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"99bxtrdo\">\n        <emu-t>/*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-FirstCommentLine\">FirstCommentLine</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-MultiLineCommentChars\">MultiLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>*/</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-HTMLCloseComment\">HTMLCloseComment</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FirstCommentLine\" type=\"lexical\" id=\"prod-annexB-FirstCommentLine\">\n    <emu-nt><a href=\"#prod-annexB-FirstCommentLine\">FirstCommentLine</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"rwqqakko\"><emu-nt><a href=\"#prod-annexB-SingleLineDelimitedCommentChars\">SingleLineDelimitedCommentChars</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineHTMLOpenComment\" type=\"lexical\" id=\"prod-annexB-SingleLineHTMLOpenComment\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineHTMLOpenComment\">SingleLineHTMLOpenComment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"2e6mrqmm\">\n        <emu-t>&lt;!--</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-SingleLineCommentChars\">SingleLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineHTMLCloseComment\" type=\"lexical\" id=\"prod-annexB-SingleLineHTMLCloseComment\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineHTMLCloseComment\">SingleLineHTMLCloseComment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"wdv3xq9f\">\n        <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt>\n        <emu-nt><a href=\"#prod-annexB-HTMLCloseComment\">HTMLCloseComment</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineDelimitedComment\" type=\"lexical\" id=\"prod-annexB-SingleLineDelimitedComment\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineDelimitedComment\">SingleLineDelimitedComment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"-jxen_rq\">\n        <emu-t>/*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLineDelimitedCommentChars\">SingleLineDelimitedCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>*/</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"HTMLCloseComment\" type=\"lexical\" id=\"prod-annexB-HTMLCloseComment\">\n    <emu-nt><a href=\"#prod-annexB-HTMLCloseComment\">HTMLCloseComment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"doh0xpzb\">\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-WhiteSpaceSequence\">WhiteSpaceSequence</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLineDelimitedCommentSequence\">SingleLineDelimitedCommentSequence</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>--&gt;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-SingleLineCommentChars\">SingleLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineDelimitedCommentChars\" type=\"lexical\" id=\"prod-annexB-SingleLineDelimitedCommentChars\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineDelimitedCommentChars\">SingleLineDelimitedCommentChars</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"srrki4i5\">\n        <emu-nt><a href=\"#prod-annexB-SingleLineNotAsteriskChar\">SingleLineNotAsteriskChar</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLineDelimitedCommentChars\">SingleLineDelimitedCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ru60gzv_\">\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLinePostAsteriskCommentChars\">SingleLinePostAsteriskCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineNotAsteriskChar\" type=\"lexical\" id=\"prod-annexB-SingleLineNotAsteriskChar\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineNotAsteriskChar\">SingleLineNotAsteriskChar</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xx2apkej\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> <emu-gmod>but not one of <emu-t>*</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLinePostAsteriskCommentChars\" type=\"lexical\" id=\"prod-annexB-SingleLinePostAsteriskCommentChars\">\n    <emu-nt><a href=\"#prod-annexB-SingleLinePostAsteriskCommentChars\">SingleLinePostAsteriskCommentChars</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"p4bbdmqr\">\n        <emu-nt><a href=\"#prod-annexB-SingleLineNotForwardSlashOrAsteriskChar\">SingleLineNotForwardSlashOrAsteriskChar</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLineDelimitedCommentChars\">SingleLineDelimitedCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ru60gzv_\">\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLinePostAsteriskCommentChars\">SingleLinePostAsteriskCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineNotForwardSlashOrAsteriskChar\" type=\"lexical\" id=\"prod-annexB-SingleLineNotForwardSlashOrAsteriskChar\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineNotForwardSlashOrAsteriskChar\">SingleLineNotForwardSlashOrAsteriskChar</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"9cpftoim\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> <emu-gmod>but not one of <emu-t>/</emu-t> or <emu-t>*</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n<emu-production name=\"WhiteSpaceSequence\" type=\"lexical\" id=\"prod-annexB-WhiteSpaceSequence\">\n    <emu-nt><a href=\"#prod-annexB-WhiteSpaceSequence\">WhiteSpaceSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"r3bi9ks0\">\n        <emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-WhiteSpaceSequence\">WhiteSpaceSequence</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineDelimitedCommentSequence\" type=\"lexical\" id=\"prod-annexB-SingleLineDelimitedCommentSequence\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineDelimitedCommentSequence\">SingleLineDelimitedCommentSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"97egrzky\">\n        <emu-nt><a href=\"#prod-annexB-SingleLineDelimitedComment\">SingleLineDelimitedComment</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-WhiteSpaceSequence\">WhiteSpaceSequence</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLineDelimitedCommentSequence\">SingleLineDelimitedCommentSequence</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>Similar to a <emu-nt><a href=\"#prod-annexB-MultiLineComment\">MultiLineComment</a></emu-nt> that contains a line terminator code point, a <emu-nt><a href=\"#prod-annexB-SingleLineHTMLCloseComment\">SingleLineHTMLCloseComment</a></emu-nt> is considered to be a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> for purposes of parsing by the syntactic grammar.</p>\n    </emu-annex>\n\n    "}, "sec-block-duplicates-allowed-static-semantics": {"num": "B.3.2.4", "title": "#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-block-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-duplicates-allowed-static-semantics\">#sec-block-duplicates-allowed-static-semantics</span> Changes to Block Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-block-static-semantics-early-errors\"><a href=\"#sec-block-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-early-errors\">#sec-block-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ljp0ar\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> contains any duplicate entries<ins>, unless the source code matching this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}, "sec-string-literals-early-errors": {"num": "12.8.4.1", "title": "#sec-string-literals-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-string-literals-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-literals-early-errors\">#sec-string-literals-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6mwrfc1u\"><emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nv0ui3q7\"><emu-nt><a href=\"#prod-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>It is a Syntax Error if the source code matching this production is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">In <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, this syntax is <emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Legacy</a></emu-xref>.</div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>It is possible for string literals to precede a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> that places the enclosing code in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode</a></emu-xref>, and implementations must take care to enforce the above rules for such literals. For example, the following source text contains a Syntax Error:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">invalid</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-string\">\"\\7\"</span>; <span class=\"hljs-string\">\"use strict\"</span>; }</code></pre>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-generator-function-definitions-static-semantics-early-errors": {"num": "15.6.1", "title": "#sec-async-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">#sec-async-generator-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"xruu4gg0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nplor0n0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>If the source code matching <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.</li>\n        <li>If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matching <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-super-keyword-runtime-semantics-evaluation": {"num": "13.3.7.1", "title": "#sec-super-keyword-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-super-keyword-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-super-keyword-runtime-semantics-evaluation\">#sec-super-keyword-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tpjzdyqv\">\n        <emu-t>super</emu-t>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9pdsslwb\">\n        <emu-t>super</emu-t>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyKey</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If the code matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperCall\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qdmdlzzo\">\n        <emu-t>super</emu-t>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>newTarget</var> be <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>func</var> be !&#160;<emu-xref aoid=\"GetSuperConstructor\"><a href=\"#sec-getsuperconstructor\">GetSuperConstructor</a></emu-xref>().</li><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>argList</var>, <var>newTarget</var>).</li><li>Let <var>thisER</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Perform ? <var>thisER</var>.BindThisValue(<var>result</var>).</li><li>Let <var>F</var> be <var>thisER</var>.[[FunctionObject]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeInstanceElements\"><a href=\"#sec-initializeinstanceelements\">InitializeInstanceElements</a></emu-xref>(<var>result</var>, <var>F</var>).</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-with-statement-static-semantics-early-errors": {"num": "14.11.1", "title": "#sec-with-statement-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-with-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the code that matches this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"IsLabelledFunction\"><a href=\"#sec-islabelledfunction\">IsLabelledFunction</a></emu-xref>(<emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>) is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>It is only necessary to apply the second rule if the extension specified in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref> is implemented.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-functiondeclarations-in-ifstatement-statement-clauses": {"num": "B.3.3", "title": "#sec-functiondeclarations-in-ifstatement-statement-clauses FunctionDeclarations in IfStatement Statement Clauses", "html": "<emu-annex id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">#sec-functiondeclarations-in-ifstatement-statement-clauses</span> FunctionDeclarations in IfStatement Statement Clauses</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IfStatement\">IfStatement</a></emu-nt> production in <emu-xref href=\"#sec-if-statement\"><a href=\"#sec-if-statement\" class=\"excluded-xref\" excluded-id=\"sec-if-statement\">#sec-if-statement</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IfStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IfStatement\">IfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3oae1kl0\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_rfywn3t\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ndmrr5v_\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"qlu6dc6n\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[lookahead &#8800; <emu-t>else</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. Code matching this production is processed as if each matching occurrence of <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt> was the sole <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> of a <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt> occupying that position in the source code. The semantics of such a synthetic <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt> includes the web legacy compatibility semantics specified in <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n    </emu-annex>\n\n    "}, "sec-identifiers-static-semantics-early-errors": {"num": "13.1.1", "title": "#sec-identifiers-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-identifiers-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the code matched by this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"arguments\"</emu-val> or <emu-val>\"eval\"</emu-val>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the code matched by this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> of the syntactic grammar is <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has a <sub>[Yield]</sub> parameter.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has an <sub>[Await]</sub> parameter.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has a <sub>[Yield]</sub> parameter and <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"yield\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if this production has an <sub>[Await]</sub> parameter and <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"await\"</emu-val>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"Identifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v6xddc2h\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> <emu-gmod>but not <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this phrase is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is: <emu-val>\"implements\"</emu-val>, <emu-val>\"interface\"</emu-val>, <emu-val>\"let\"</emu-val>, <emu-val>\"package\"</emu-val>, <emu-val>\"private\"</emu-val>, <emu-val>\"protected\"</emu-val>, <emu-val>\"public\"</emu-val>, <emu-val>\"static\"</emu-val>, or <emu-val>\"yield\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> of the syntactic grammar is <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> and the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is <emu-val>\"await\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is the same String value as the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of any <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> except for <code>yield</code> or <code>await</code>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> normalizes any Unicode escape sequences in <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> hence such escapes cannot be used to write an <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> whose code point sequence is the same as a <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-resolvebinding": {"num": "9.4.2", "title": "#sec-resolvebinding ResolveBinding ( name [ , env ] )", "html": "<emu-clause id=\"sec-resolvebinding\" type=\"abstract operation\" aoid=\"ResolveBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvebinding\">#sec-resolvebinding</span> ResolveBinding ( <var>name</var> [ , <var>env</var> ] )</h1>\n      <p>The abstract operation ResolveBinding takes argument <var>name</var> (a String) and optional argument <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> or <emu-val>undefined</emu-val>). It is used to determine the binding of <var>name</var>. <var>env</var> can be used to explicitly provide the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is to be searched for the binding. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>env</var> is not present or if <var>env</var> is <emu-val>undefined</emu-val>, then<ol><li>Set <var>env</var> to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>If the code matching the syntactic production that is being evaluated is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>env</var>, <var>name</var>, <var>strict</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The result of ResolveBinding is always a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> whose [[ReferencedName]] field is <var>name</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-pattern-semantics": {"num": "22.2.2", "title": "#sec-pattern-semantics Pattern Semantics", "html": "<emu-clause id=\"sec-pattern-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</span> Pattern Semantics</h1>\n      <p>A regular expression pattern is converted into an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> using the process described below. An implementation is encouraged to use more efficient algorithms than the ones listed below, as long as the results are the same. The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> is used as the value of a RegExp object's [[RegExpMatcher]] internal slot.</p>\n      <p>A <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is either a BMP pattern or a Unicode pattern depending upon whether or not its associated flags contain a <code>u</code>. A BMP pattern matches against a String interpreted as consisting of a sequence of 16-bit values that are Unicode code points in the range of the Basic Multilingual Plane. A Unicode pattern matches against a String interpreted as consisting of Unicode code points encoded using UTF-16. In the context of describing the behaviour of a BMP pattern &#8220;character&#8221; means a single 16-bit Unicode BMP code point. In the context of describing the behaviour of a Unicode pattern &#8220;character&#8221; means a UTF-16 encoded code point (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>). In either context, &#8220;character value&#8221; means the numeric value of the corresponding non-encoded code point.</p>\n      <p>The syntax and semantics of <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is defined as if the source code for the <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> was a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values where each <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> corresponds to a Unicode code point. If a BMP pattern contains a non-BMP <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> the entire pattern is encoded using UTF-16 and the individual code units of that encoding are used as the elements of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For example, consider a pattern expressed in source text as the single non-BMP character U+1D11E (MUSICAL SYMBOL G CLEF). Interpreted as a Unicode pattern, it would be a single element (character) <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the single code point 0x1D11E. However, interpreted as a BMP pattern, it is first UTF-16 encoded to produce a two element <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the code units 0xD834 and 0xDD1E.</p>\n        <p>Patterns are passed to the RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> as ECMAScript String values in which non-BMP characters are UTF-16 encoded. For example, the single character MUSICAL SYMBOL G CLEF pattern, expressed as a String value, is a String of length 2 whose elements were the code units 0xD834 and 0xDD1E. So no further translation of the string would be necessary to process it as a BMP pattern consisting of two pattern characters. However, to process it as a Unicode pattern <emu-xref aoid=\"UTF16SurrogatePairToCodePoint\"><a href=\"#sec-utf16decodesurrogatepair\">UTF16SurrogatePairToCodePoint</a></emu-xref> must be used in producing a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is a single pattern character, the code point U+1D11E.</p>\n        <p>An implementation may not actually perform such translations to or from UTF-16, but the semantics of this specification requires that the result of pattern matching be as if such translations were performed.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-notation\"><h1><span class=\"secnum\">22.2.2.1</span>#sec-notation Notation</h1>...</div><div id=\"excluded-sec-compilepattern\"><h1><span class=\"secnum\">22.2.2.2</span>#sec-compilepattern Runtime Semantics: CompilePattern</h1>...</div><div id=\"excluded-sec-compilesubpattern\"><h1><span class=\"secnum\">22.2.2.3</span>#sec-compilesubpattern Runtime Semantics: CompileSubpattern</h1>...</div><div id=\"excluded-sec-compileassertion\"><h1><span class=\"secnum\">22.2.2.4</span>#sec-compileassertion Runtime Semantics: CompileAssertion</h1>...</div><div id=\"excluded-sec-compilequantifier\"><h1><span class=\"secnum\">22.2.2.5</span>#sec-compilequantifier Runtime Semantics: CompileQuantifier</h1>...</div><div id=\"excluded-sec-compilequantifierprefix\"><h1><span class=\"secnum\">22.2.2.6</span>#sec-compilequantifierprefix Runtime Semantics: CompileQuantifierPrefix</h1>...</div><div id=\"excluded-sec-compileatom\"><h1><span class=\"secnum\">22.2.2.7</span>#sec-compileatom Runtime Semantics: CompileAtom</h1>...</div><div id=\"excluded-sec-compilecharacterclass\"><h1><span class=\"secnum\">22.2.2.8</span>#sec-compilecharacterclass Runtime Semantics: CompileCharacterClass</h1>...</div><div id=\"excluded-sec-compiletocharset\"><h1><span class=\"secnum\">22.2.2.9</span>#sec-compiletocharset Runtime Semantics: CompileToCharSet</h1>...</div></emu-clause>\n\n    "}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 34", "table-module-record-fields": "Table 45", "table-abstract-methods-of-module-records": "Table 46", "table-cyclic-module-fields": "Table 47", "table-cyclic-module-methods": "Table 48"}}, "to": {"secList": ["sec-types-of-source-code", "sec-labelled-function-declarations", "sec-ecmascript-language-source-code", "sec-function-calls-runtime-semantics-evaluation", "sec-left-hand-side-expressions-static-semantics-early-errors", "sec-forbidden-extensions", "sec-property-accessors-runtime-semantics-evaluation", "sec-object-initializer-static-semantics-early-errors", "sec-optional-chaining-chain-evaluation", "sec-createdynamicfunction", "sec-generator-function-definitions-static-semantics-early-errors", "sec-function-definitions-static-semantics-early-errors", "sec-async-function-definitions-static-semantics-early-errors", "sec-scripts-static-semantics-early-errors", "sec-switch-duplicates-allowed-static-semantics", "sec-labelled-statements-static-semantics-early-errors", "sec-cyclic-module-records", "sec-ordinaryfunctioncreate", "sec-isintailposition", "sec-patterns-static-semantics-early-errors-annexb", "sec-numeric-literals-early-errors", "sec-html-like-comments", "sec-block-duplicates-allowed-static-semantics", "sec-string-literals-early-errors", "sec-async-generator-function-definitions-static-semantics-early-errors", "sec-super-keyword-runtime-semantics-evaluation", "sec-with-statement-static-semantics-early-errors", "sec-functiondeclarations-in-ifstatement-statement-clauses", "sec-identifiers-static-semantics-early-errors", "sec-resolvebinding", "sec-pattern-semantics"], "secData": {"sec-types-of-source-code": {"num": "11.2", "title": "#sec-types-of-source-code Types of Source Code", "html": "<emu-clause id=\"sec-types-of-source-code\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</span> Types of Source Code</h1>\n    <p>There are four types of ECMAScript code:</p>\n    <ul>\n      <li>\n        <em>Global code</em> is source text that is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The global code of a particular <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> does not include any source text that is parsed as part of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n      <li>\n        <em>Eval code</em> is the source text supplied to the built-in <code>eval</code> function. More precisely, if the parameter to the built-in <code>eval</code> function is a String, it is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The eval code for a particular invocation of <code>eval</code> is the global code portion of that <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.\n      </li>\n      <li>\n        <p><em>Function code</em> is source text that is parsed to supply the value of the [[ECMAScriptCode]] and [[FormalParameters]] internal slots (see <emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function code of a particular ECMAScript function does not include any source text that is parsed as the function code of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</p>\n        <p>In addition, if the source text referred to above is parsed as:</p>\n        <ul>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, or</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>,</li>\n        </ul>\n        <p>then the source text matched by the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> (if any) of that declaration or expression is also included in the function code of the corresponding function.</p>\n      </li>\n      <li>\n        <em>Module code</em> is source text that is code that is provided as a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt>. It is the code that is directly evaluated when a module is initialized. The module code of a particular module does not include any source text that is parsed as part of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n    </ul>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Function code is generally provided as the bodies of Function Definitions (<emu-xref href=\"#sec-function-definitions\"><a href=\"#sec-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</a></emu-xref>), Arrow Function Definitions (<emu-xref href=\"#sec-arrow-function-definitions\"><a href=\"#sec-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</a></emu-xref>), Method Definitions (<emu-xref href=\"#sec-method-definitions\"><a href=\"#sec-method-definitions\" class=\"excluded-xref\" excluded-id=\"sec-method-definitions\">#sec-method-definitions</a></emu-xref>), Generator Function Definitions (<emu-xref href=\"#sec-generator-function-definitions\"><a href=\"#sec-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-generator-function-definitions\">#sec-generator-function-definitions</a></emu-xref>), Async Function Definitions (<emu-xref href=\"#sec-async-function-definitions\"><a href=\"#sec-async-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</a></emu-xref>), Async Generator Function Definitions (<emu-xref href=\"#sec-async-generator-function-definitions\"><a href=\"#sec-async-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-generator-function-definitions\">#sec-async-generator-function-definitions</a></emu-xref>), and Async Arrow Functions (<emu-xref href=\"#sec-async-arrow-function-definitions\"><a href=\"#sec-async-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-arrow-function-definitions\">#sec-async-arrow-function-definitions</a></emu-xref>). Function code is also derived from the arguments to the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>), the GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-generatorfunction\"><a href=\"#sec-generatorfunction\" class=\"excluded-xref\" excluded-id=\"sec-generatorfunction\">#sec-generatorfunction</a></emu-xref>), and the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-async-function-constructor-arguments\"><a href=\"#sec-async-function-constructor-arguments\" class=\"excluded-xref\" excluded-id=\"sec-async-function-constructor-arguments\">#sec-async-function-constructor-arguments</a></emu-xref>).</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The practical effect of including the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in function code is that the Early Errors for <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> are applied to a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> that is the name of a function whose body contains a \"use strict\" directive, even if the surrounding code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-directive-prologues-and-the-use-strict-directive\"><h1><span class=\"secnum\">11.2.1</span>#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive</h1>...</div><div id=\"excluded-sec-strict-mode-code\"><h1><span class=\"secnum\">11.2.2</span>#sec-strict-mode-code Strict Mode Code</h1>...</div><div id=\"excluded-sec-non-ecmascript-functions\"><h1><span class=\"secnum\">11.2.3</span>#sec-non-ecmascript-functions Non-ECMAScript Functions</h1>...</div></emu-clause>\n"}, "sec-labelled-function-declarations": {"num": "B.3.1", "title": "#sec-labelled-function-declarations Labelled Function Declarations", "html": "<emu-annex id=\"sec-labelled-function-declarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</span> Labelled Function Declarations</h1>\n      <p>Prior to ECMAScript 2015, the specification of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> did not allow for the association of a statement label with a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>. However, a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension for <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref> and most browser-hosted ECMAScript implementations supported that extension. In ECMAScript 2015 and later, the grammar production for <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> permits use of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as a <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> but <emu-xref href=\"#sec-labelled-statements-static-semantics-early-errors\"><a href=\"#sec-labelled-statements-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-labelled-statements-static-semantics-early-errors\">#sec-labelled-statements-static-semantics-early-errors</a></emu-xref> includes an Early Error rule that produces a Syntax Error if that occurs. That rule is modified with the addition of the <ins>highlighted</ins> text:</p>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if any source text <ins>that is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref></ins> is matched by this production.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>, <emu-nt><a href=\"#prod-annexB-IfStatement\">IfStatement</a></emu-nt>, and <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> prevent these statements from containing a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-annex>\n\n    "}, "sec-ecmascript-language-source-code": {"num": "11", "title": "#sec-ecmascript-language-source-code ECMAScript Language: Source Text", "html": "<emu-clause id=\"sec-ecmascript-language-source-code\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</span> ECMAScript Language: Source Text</h1>\n\n  <div id=\"excluded-sec-source-text\"><h1><span class=\"secnum\">11.1</span>#sec-source-text Source Text</h1>...</div><div id=\"excluded-sec-types-of-source-code\"><h1><span class=\"secnum\">11.2</span>#sec-types-of-source-code Types of Source Code</h1>...</div></emu-clause>\n\n"}, "sec-function-calls-runtime-semantics-evaluation": {"num": "13.3.6.1", "title": "#sec-function-calls-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-calls-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-calls-runtime-semantics-evaluation\">#sec-function-calls-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7jj-96li\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the <emu-nt><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>memberExpr</var> be the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> of <var>expr</var>.</li><li>Let <var>arguments</var> be the <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> of <var>expr</var>.</li><li>Let <var>ref</var> be the result of evaluating <var>memberExpr</var>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>ref</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>, and <var>ref</var>.[[ReferencedName]] is <emu-val>\"eval\"</emu-val>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>func</var>, <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\">%eval%</a></emu-xref>) is <emu-val>true</emu-val>, then<ol><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <var>arguments</var>.</li><li>If <var>argList</var> has no elements, return <emu-val>undefined</emu-val>.</li><li>Let <var>evalArg</var> be the first element of <var>argList</var>.</li><li>If the source text matched by this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strictCaller</var> be <emu-val>true</emu-val>. Otherwise let <var>strictCaller</var> be <emu-val>false</emu-val>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li id=\"step-callexpression-evaluation-direct-eval\">Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>evalArg</var>, <var>evalRealm</var>, <var>strictCaller</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailCall</var>).</li></ol></emu-alg>\n        <p>A <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> evaluation that executes step <emu-xref href=\"#step-callexpression-evaluation-direct-eval\"><a href=\"#step-callexpression-evaluation-direct-eval\">6.a.vi</a></emu-xref> is a <dfn variants=\"direct evals\">direct eval</dfn>.</p>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qugahahu\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-left-hand-side-expressions-static-semantics-early-errors": {"num": "13.3.1.1", "title": "#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">#sec-left-hand-side-expressions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"OptionalChain\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tfcmykyj\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ocv4xe0-\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any source text is matched by this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This production exists in order to prevent automatic semicolon insertion rules (<emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>) from being applied to the following code:</p>\n          <pre><code class=\"javascript hljs\">a?.<span class=\"hljs-property\">b</span>\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>so that it would be interpreted as two valid statements. The purpose is to maintain consistency with similar code without optional chaining:</p>\n          <pre><code class=\"javascript hljs\">a.<span class=\"hljs-property\">b</span>\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>which is a valid statement and where automatic semicolon insertion does not apply.</p>\n        </div></emu-note>\n\n        <emu-grammar><emu-production name=\"ImportMeta\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8myn6frq\">\n        <emu-t>import</emu-t>\n        <emu-t>.</emu-t>\n        <emu-t>meta</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is not <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-clause>\n    "}, "sec-forbidden-extensions": {"num": "17.1", "title": "#sec-forbidden-extensions Forbidden Extensions", "html": "<emu-clause id=\"sec-forbidden-extensions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</span> Forbidden Extensions</h1>\n    <p>An implementation must not extend this specification in the following ways:</p>\n    <ul>\n      <li>\n        ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> defined using syntactic <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> must not be created with own properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val>. Such own properties also must not be created for <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> defined using an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> regardless of whether the definition is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Built-in functions, <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref> created using the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, generator functions created using the Generator <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, async functions created using the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, and functions created using the <code>bind</code> method also must not be created with such own properties.\n      </li>\n      <li>\n        If an implementation extends any <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with an own property named <emu-val>\"caller\"</emu-val> the value of that property, as observed using [[Get]] or [[GetOwnProperty]], must not be a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref> object. If it is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>, the function that is the value of the property's [[Get]] attribute must never return a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref> when called.\n      </li>\n      <li>\n        Neither mapped nor unmapped arguments objects may be created with an own property named <emu-val>\"caller\"</emu-val>.\n      </li>\n      <li>\n        The behaviour of built-in methods which are specified in ECMA-402, such as those named <code>toLocaleString</code>, must not be extended except as specified in ECMA-402.\n      </li>\n      <li>\n        The RegExp pattern grammars in <emu-xref href=\"#sec-patterns\"><a href=\"#sec-patterns\" class=\"excluded-xref\" excluded-id=\"sec-patterns\">#sec-patterns</a></emu-xref> and <emu-xref href=\"#sec-regular-expressions-patterns\"><a href=\"#sec-regular-expressions-patterns\" class=\"excluded-xref\" excluded-id=\"sec-regular-expressions-patterns\">#sec-regular-expressions-patterns</a></emu-xref> must not be extended to recognize any of the source characters A-Z or a-z as <emu-nt params=\"+UnicodeMode\"><a href=\"#prod-IdentityEscape\">IdentityEscape</a><emu-mods><emu-params>[+UnicodeMode]</emu-params></emu-mods></emu-nt> when the <sub>[UnicodeMode]</sub> grammar parameter is present.\n      </li>\n      <li>\n        The Syntactic Grammar must not be extended in any manner that allows the token <code>:</code> to immediately follow source text that is matched by the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> nonterminal symbol.\n      </li>\n      <li>\n        When processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, an implementation must not relax the <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules of <emu-xref href=\"#sec-numeric-literals-early-errors\"><a href=\"#sec-numeric-literals-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-numeric-literals-early-errors\">#sec-numeric-literals-early-errors</a></emu-xref>.\n      </li>\n      <li>\n        <emu-nt><a href=\"#prod-TemplateEscapeSequence\">TemplateEscapeSequence</a></emu-nt> must not be extended to include <emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt> as defined in <emu-xref href=\"#sec-literals-string-literals\"><a href=\"#sec-literals-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-string-literals\">#sec-literals-string-literals</a></emu-xref>.\n      </li>\n      <li>\n        When processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the extensions defined in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref>, <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>, <emu-xref href=\"#sec-functiondeclarations-in-ifstatement-statement-clauses\"><a href=\"#sec-functiondeclarations-in-ifstatement-statement-clauses\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">#sec-functiondeclarations-in-ifstatement-statement-clauses</a></emu-xref>, and <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref> must not be supported.\n      </li>\n      <li>\n        When parsing for the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, the lexical grammar extensions defined in <emu-xref href=\"#sec-html-like-comments\"><a href=\"#sec-html-like-comments\" class=\"excluded-xref\" excluded-id=\"sec-html-like-comments\">#sec-html-like-comments</a></emu-xref> must not be supported.\n      </li>\n      <!-- The following is so that in the future we can potentially add new arguments or support ArgumentList. -->\n      <li>\n        <emu-nt><a href=\"#prod-ImportCall\">ImportCall</a></emu-nt> must not be extended.\n      </li>\n    </ul>\n  </emu-clause>\n"}, "sec-property-accessors-runtime-semantics-evaluation": {"num": "13.3.2.1", "title": "#sec-property-accessors-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-property-accessors-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-property-accessors-runtime-semantics-evaluation\">#sec-property-accessors-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a74xd7de\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>If the source text matched by this <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithExpressionKey\"><a href=\"#sec-evaluate-property-access-with-expression-key\">EvaluatePropertyAccessWithExpressionKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"frbj984t\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>If the source text matched by this <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithIdentifierKey\"><a href=\"#sec-evaluate-property-access-with-identifier-key\">EvaluatePropertyAccessWithIdentifierKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0uk9afbi\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>fieldNameString</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"MakePrivateReference\"><a href=\"#sec-makeprivatereference\">MakePrivateReference</a></emu-xref>(<var>baseValue</var>, <var>fieldNameString</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2u2urbmg\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>If the source text matched by this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithExpressionKey\"><a href=\"#sec-evaluate-property-access-with-expression-key\">EvaluatePropertyAccessWithExpressionKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"u6lsbvgu\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>If the source text matched by this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithIdentifierKey\"><a href=\"#sec-evaluate-property-access-with-identifier-key\">EvaluatePropertyAccessWithIdentifierKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cysjk9wh\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>fieldNameString</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"MakePrivateReference\"><a href=\"#sec-makeprivatereference\">MakePrivateReference</a></emu-xref>(<var>baseValue</var>, <var>fieldNameString</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-object-initializer-static-semantics-early-errors": {"num": "13.2.5.1", "title": "#sec-object-initializer-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-object-initializer-static-semantics-early-errors\" oldids=\"sec-__proto__-property-names-in-object-initializers\"><span id=\"sec-__proto__-property-names-in-object-initializers\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is not empty.\n          </li>\n        </ul>\n        <p>In addition to describing an actual object initializer the <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> productions are also used as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> and may be recognized as part of a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>. When <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required the following Early Error rules are <b>not</b> applied. In addition, they are not applied when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3wg6qczf\"><emu-nt><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any source text is matched by this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This production exists so that <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> can serve as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt>. It cannot occur in an actual object initializer.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g--o073w\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hwnsf_iz\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>. This rule is not applied if this <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> is contained within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> that is being parsed for JSON.parse (see step <emu-xref href=\"#step-json-parse-parse\"><a href=\"#step-json-parse-parse\" class=\"excluded-xref\" excluded-id=\"step-json-parse-parse\">#step-json-parse-parse</a></emu-xref> of <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>).\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> does not include property names defined using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-optional-chaining-chain-evaluation": {"num": "13.3.9.2", "title": "#sec-optional-chaining-chain-evaluation Runtime Semantics: ChainEvaluation", "html": "<emu-clause id=\"sec-optional-chaining-chain-evaluation\" type=\"sdo\" aoid=\"ChainEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-optional-chaining-chain-evaluation\">#sec-optional-chaining-chain-evaluation</span> Runtime Semantics: ChainEvaluation</h1>\n        <p>The syntax-directed operation ChainEvaluation takes arguments <var>baseValue</var> and <var>baseReference</var>. It is defined piecewise over the following productions:</p>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ynxeowdb\" id=\"prod-1C3YSxR_\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>thisChain</var> be this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisChain</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>baseValue</var>, <var>baseReference</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kktyttw7\" id=\"prod-w5u7jzLu\">\n        <emu-t>?.</emu-t>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If the source text matched by this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithExpressionKey\"><a href=\"#sec-evaluate-property-access-with-expression-key\">EvaluatePropertyAccessWithExpressionKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w-4ch2am\" id=\"prod-9T4kB2jq\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If the source text matched by this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithIdentifierKey\"><a href=\"#sec-evaluate-property-access-with-identifier-key\">EvaluatePropertyAccessWithIdentifierKey</a></emu-xref>(<var>baseValue</var>, <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0xlnjlpz\" id=\"prod-JeRaAt5H\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>fieldNameString</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"MakePrivateReference\"><a href=\"#sec-makeprivatereference\">MakePrivateReference</a></emu-xref>(<var>baseValue</var>, <var>fieldNameString</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eogoekck\" id=\"prod-kAXkNcIE\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>optionalChain</var> be <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>newReference</var> be ? <emu-xref aoid=\"ChainEvaluation\"><a href=\"#sec-optional-chaining-chain-evaluation\">ChainEvaluation</a></emu-xref> of <var>optionalChain</var> with arguments <var>baseValue</var> and <var>baseReference</var>.</li><li>Let <var>newValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>newReference</var>).</li><li>Let <var>thisChain</var> be this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisChain</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>newValue</var>, <var>newReference</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jgl-kve-\" id=\"prod-PNgnxyKa\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>optionalChain</var> be <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>newReference</var> be ? <emu-xref aoid=\"ChainEvaluation\"><a href=\"#sec-optional-chaining-chain-evaluation\">ChainEvaluation</a></emu-xref> of <var>optionalChain</var> with arguments <var>baseValue</var> and <var>baseReference</var>.</li><li>Let <var>newValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>newReference</var>).</li><li>If the source text matched by this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithExpressionKey\"><a href=\"#sec-evaluate-property-access-with-expression-key\">EvaluatePropertyAccessWithExpressionKey</a></emu-xref>(<var>newValue</var>, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lf2imwfr\" id=\"prod-Il7WrbnC\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>optionalChain</var> be <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>newReference</var> be ? <emu-xref aoid=\"ChainEvaluation\"><a href=\"#sec-optional-chaining-chain-evaluation\">ChainEvaluation</a></emu-xref> of <var>optionalChain</var> with arguments <var>baseValue</var> and <var>baseReference</var>.</li><li>Let <var>newValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>newReference</var>).</li><li>If the source text matched by this <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"EvaluatePropertyAccessWithIdentifierKey\"><a href=\"#sec-evaluate-property-access-with-identifier-key\">EvaluatePropertyAccessWithIdentifierKey</a></emu-xref>(<var>newValue</var>, <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dnp-fbqk\" id=\"prod-5tv-oPv9\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>optionalChain</var> be <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>.</li><li>Let <var>newReference</var> be ? <emu-xref aoid=\"ChainEvaluation\"><a href=\"#sec-optional-chaining-chain-evaluation\">ChainEvaluation</a></emu-xref> of <var>optionalChain</var> with arguments <var>baseValue</var> and <var>baseReference</var>.</li><li>Let <var>newValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>newReference</var>).</li><li>Let <var>fieldNameString</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"MakePrivateReference\"><a href=\"#sec-makeprivatereference\">MakePrivateReference</a></emu-xref>(<var>newValue</var>, <var>fieldNameString</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-createdynamicfunction": {"num": "20.2.1.1.1", "title": "#sec-createdynamicfunction CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" type=\"abstract operation\" oldids=\"table-dynamic-function-sourcetext-prefixes\" aoid=\"CreateDynamicFunction\"><span id=\"table-dynamic-function-sourcetext-prefixes\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (<emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language values</a></emu-xref>). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%GeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"async function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>prefix</var> be <emu-val>\"async function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1,<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Let <var>sourceText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>sourceString</var>).</li><li>Let <var>parameters</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>), <var>parameterSym</var>).</li><li>If <var>parameters</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>bodyString</var>), <var>bodySym</var>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: The parameters and body are parsed separately to ensure that each is valid alone. For example, <code>new Function(\"/*\", \"*/ ) {\")</code> is not legal.</li><li>NOTE: If this step is reached, <var>sourceText</var> must have the syntax of <var>exprSym</var> (although the reverse implication does not hold). The purpose of the next two steps is to enforce any Early Error rules which apply to <var>exprSym</var> directly.</li><li>Let <var>expr</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <var>exprSym</var>).</li><li>If <var>expr</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>privateScope</var> be <emu-val>null</emu-val>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>sourceText</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Functions whose <var>kind</var> is <emu-const>async</emu-const> are not constructible and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>CreateDynamicFunction defines a <emu-val>\"prototype\"</emu-val> property on any function it creates whose <var>kind</var> is not <emu-const>async</emu-const> to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-generator-function-definitions-static-semantics-early-errors": {"num": "15.5.1", "title": "#sec-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-generator-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-static-semantics-early-errors\">#sec-generator-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"dsczygsq\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"32ghovyc\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          If the source text matched by <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.\n        </li>\n        <li>\n          If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source text matched by <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-function-definitions-static-semantics-early-errors": {"num": "15.2.1", "title": "#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"smus6qca\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g3mtfiqq\">\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          If the source text matched by <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.\n        </li>\n        <li>\n          If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source text matched by <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> does not include identifiers bound using var or function declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xn8an8nx\"><emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> contains any duplicate entries.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-static-semantics-early-errors": {"num": "15.8.1", "title": "#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-async-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-static-semantics-early-errors\">#sec-async-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"agdmcdye\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1_djgdhl\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>If the source text matched by <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.</li>\n        <li>If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source text matched by <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-scripts-static-semantics-early-errors": {"num": "16.1.1", "title": "#sec-scripts-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-scripts-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"Script\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t4-zzfei\"><emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> contains any duplicate entries.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <code>super</code> unless the source text containing <code>super</code> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <code>super</code> within <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> unless the source text containing <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> in <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>false</emu-val> unless the source text containing <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-switch-duplicates-allowed-static-semantics": {"num": "B.3.2.5", "title": "#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-switch-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-duplicates-allowed-static-semantics\">#sec-switch-duplicates-allowed-static-semantics</span> Changes to <code>switch</code> Statement Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-switch-statement-static-semantics-early-errors\"><a href=\"#sec-switch-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-static-semantics-early-errors\">#sec-switch-statement-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> contains any duplicate entries<ins>, unless the source text matched by this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}, "sec-labelled-statements-static-semantics-early-errors": {"num": "14.13.1", "title": "#sec-labelled-statements-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-labelled-statements-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements-static-semantics-early-errors\">#sec-labelled-statements-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if any source text is matched by this production.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An alternative definition for this rule is provided in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-cyclic-module-records": {"num": "16.2.1.5", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A <dfn id=\"cyclic-module-record\" variants=\"Cyclic Module Records\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Records</a></emu-xref> that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Records</a></emu-xref>.</p>\n        <p>In addition to the fields defined in <emu-xref href=\"#table-module-record-fields\"><a href=\"#table-module-record-fields\" class=\"excluded-xref\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</a></emu-xref> <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref> have the additional fields listed in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref></figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                </th>\n                <th>\n                  Value Type\n                </th>\n                <th>\n                  Meaning\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluating-async</emu-const> | <emu-const>evaluated</emu-const>\n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, possibly <emu-const>evaluating-async</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle. <emu-const>evaluating-async</emu-const> indicates this module is queued to execute on completion of its asynchronous dependencies or it is a module whose [[HasTLA]] field is <emu-val>true</emu-val> that has been executed and is pending top-level completion.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation. <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this non-negative number records the point at which the module was first visited during the depth-first traversal of the dependency graph.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source text occurrence ordered.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[CycleRoot]]\n                </td>\n                <td>\n                  <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  The first visited module of the cycle, the root DFS ancestor of the strongly connected component. For a module not in a cycle this would be the module itself. Once Evaluate has completed, a module's [[DFSAncestorIndex]] is equal to the [[DFSIndex]] of its [[CycleRoot]].\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[HasTLA]]\n                </td>\n                <td>\n                  Boolean\n                </td>\n                <td>\n                  Whether this module is individually asynchronous (for example, if it's a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> containing a top-level await). Having an asynchronous dependency does not mean this field is <emu-val>true</emu-val>. This field must not change after the module is parsed.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[AsyncEvaluation]]\n                </td>\n                <td>\n                  Boolean\n                </td>\n                <td>\n                  Whether this module is either itself asynchronous or has an asynchronous dependency. Note: The order in which this field is set is used to order queued executions, see <emu-xref href=\"#sec-async-module-execution-fulfilled\"><a href=\"#sec-async-module-execution-fulfilled\" class=\"excluded-xref\" excluded-id=\"sec-async-module-execution-fulfilled\">#sec-async-module-execution-fulfilled</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[TopLevelCapability]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  If this module is the [[CycleRoot]] of some cycle, and Evaluate() was called on some module in that cycle, this field contains the <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> for that entire evaluation. It is used to settle the Promise object that is returned from the Evaluate() abstract method. This field will be <emu-const>empty</emu-const> for any dependencies of that module, unless a top-level Evaluate() has been initiated for some of those dependencies.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[AsyncParentModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref>\n                </td>\n                <td>\n                  If this module or a dependency has [[HasTLA]] <emu-val>true</emu-val>, and execution is in progress, this tracks the parent importers of this module for the top-level execution job. These parent modules will not start executing before this module has successfully completed execution.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[PendingAsyncDependencies]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  If this module has any asynchronous dependencies, this tracks the number of asynchronous dependency modules remaining to execute for this module. A module with asynchronous dependencies will be executed when this field reaches 0 and there are no execution errors.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in <emu-xref href=\"#table-abstract-methods-of-module-records\"><a href=\"#table-abstract-methods-of-module-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</a></emu-xref> <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref> have the additional methods listed in <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref></figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                </th>\n                <th>\n                  Purpose\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  InitializeEnvironment()\n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  ExecuteModule( [ <var>promiseCapability</var> ] )\n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>. If this module has <emu-val>true</emu-val> in [[HasTLA]], then a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> is passed as an argument, and the method is expected to resolve or reject the given capability. In this case, the method must not throw an exception, but instead reject the <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> if necessary.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">16.2.1.5.1</span>#sec-moduledeclarationlinking Link ( )</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">16.2.1.5.2</span>#sec-moduleevaluation Evaluate ( )</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">16.2.1.5.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-ordinaryfunctioncreate": {"num": "10.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" type=\"abstract operation\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\" aoid=\"OrdinaryFunctionCreate\"><span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (<emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>), and <var>PrivateScope</var> (a <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> or <emu-val>null</emu-val>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matched by <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[PrivateEnvironment]] to <var>PrivateScope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[Fields]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[PrivateMethods]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[ClassFieldInitializerName]] to <emu-const>empty</emu-const>.</li><li>Let <var>len</var> be the <emu-xref aoid=\"ExpectedArgumentCount\"><a href=\"#sec-static-semantics-expectedargumentcount\">ExpectedArgumentCount</a></emu-xref> of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-isintailposition": {"num": "15.10.1", "title": "#sec-isintailposition Static Semantics: IsInTailPosition ( call )", "html": "<emu-clause id=\"sec-isintailposition\" type=\"abstract operation\" aoid=\"IsInTailPosition\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isintailposition\">#sec-isintailposition</span> Static Semantics: IsInTailPosition ( <var>call</var> )</h1>\n      <p>The abstract operation IsInTailPosition takes argument <var>call</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the source text matched by <var>call</var> is <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>If <var>call</var> is not contained within a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> that most closely contains <var>call</var>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is an <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Return the result of <emu-xref aoid=\"HasCallInTailPosition\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <var>body</var> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Tail Position calls are only defined in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> because of a common non-standard language extension (see <emu-xref href=\"#sec-addrestrictedfunctionproperties\"><a href=\"#sec-addrestrictedfunctionproperties\" class=\"excluded-xref\" excluded-id=\"sec-addrestrictedfunctionproperties\">#sec-addrestrictedfunctionproperties</a></emu-xref>) that enables observation of the chain of caller contexts.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-patterns-static-semantics-early-errors-annexb": {"num": "B.1.2.1", "title": "#sec-patterns-static-semantics-early-errors-annexb Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-patterns-static-semantics-early-errors-annexb\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-patterns-static-semantics-early-errors-annexb\">#sec-patterns-static-semantics-early-errors-annexb</span> Static Semantics: Early Errors</h1>\n        <p>The semantics of <emu-xref href=\"#sec-patterns-static-semantics-early-errors\"><a href=\"#sec-patterns-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-patterns-static-semantics-early-errors\">#sec-patterns-static-semantics-early-errors</a></emu-xref> is extended as follows:</p>\n        <emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"u9cvu_c3\"><emu-nt><a href=\"#prod-annexB-InvalidBracedQuantifier\">InvalidBracedQuantifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any source text is matched by this production.\n          </li>\n        </ul>\n        <p>Additionally, the rules for the following productions are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"NonemptyClassRanges\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonemptyClassRanges\">NonemptyClassRanges</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"pblfo8mk\">\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> or <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[UnicodeMode]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is larger than the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n        <emu-grammar><emu-production name=\"NonemptyClassRangesNoDash\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonemptyClassRangesNoDash\">NonemptyClassRangesNoDash</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6yvgquyp\">\n        <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>true</emu-val> or <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[UnicodeMode]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsCharacterClass\"><a href=\"#sec-patterns-static-semantics-is-character-class\">IsCharacterClass</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is larger than the <emu-xref aoid=\"CharacterValue\"><a href=\"#sec-patterns-static-semantics-character-value\">CharacterValue</a></emu-xref> of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n\n      "}, "sec-numeric-literals-early-errors": {"num": "12.8.3.1", "title": "#sec-numeric-literals-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-numeric-literals-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-literals-early-errors\">#sec-numeric-literals-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"8n96hykg\"><emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xvklurnl\"><emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>It is a Syntax Error if the source text matched by this production is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">In <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, this syntax is <emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Legacy</a></emu-xref>.</div></emu-note>\n      </emu-clause>\n\n      "}, "sec-html-like-comments": {"num": "B.1.1", "title": "#sec-html-like-comments HTML-like Comments", "html": "<emu-annex id=\"sec-html-like-comments\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-html-like-comments\">#sec-html-like-comments</span> HTML-like Comments</h1>\n      <p>The syntax and semantics of <emu-xref href=\"#sec-comments\"><a href=\"#sec-comments\" class=\"excluded-xref\" excluded-id=\"sec-comments\">#sec-comments</a></emu-xref> is extended as follows except that this extension is not allowed when parsing source text using the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>:</p>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"Comment\" type=\"lexical\" id=\"prod-annexB-Comment\">\n    <emu-nt><a href=\"#prod-annexB-Comment\">Comment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"sieyeref\"><emu-nt><a href=\"#prod-annexB-MultiLineComment\">MultiLineComment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"sscrkqcd\"><emu-nt><a href=\"#prod-SingleLineComment\">SingleLineComment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gpoosgoq\"><emu-nt><a href=\"#prod-annexB-SingleLineHTMLOpenComment\">SingleLineHTMLOpenComment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"-88cuq48\"><emu-nt><a href=\"#prod-annexB-SingleLineHTMLCloseComment\">SingleLineHTMLCloseComment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"x2zjsk6z\"><emu-nt><a href=\"#prod-annexB-SingleLineDelimitedComment\">SingleLineDelimitedComment</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MultiLineComment\" type=\"lexical\" id=\"prod-annexB-MultiLineComment\">\n    <emu-nt><a href=\"#prod-annexB-MultiLineComment\">MultiLineComment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"99bxtrdo\">\n        <emu-t>/*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-FirstCommentLine\">FirstCommentLine</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-MultiLineCommentChars\">MultiLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>*/</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-HTMLCloseComment\">HTMLCloseComment</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FirstCommentLine\" type=\"lexical\" id=\"prod-annexB-FirstCommentLine\">\n    <emu-nt><a href=\"#prod-annexB-FirstCommentLine\">FirstCommentLine</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"rwqqakko\"><emu-nt><a href=\"#prod-annexB-SingleLineDelimitedCommentChars\">SingleLineDelimitedCommentChars</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineHTMLOpenComment\" type=\"lexical\" id=\"prod-annexB-SingleLineHTMLOpenComment\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineHTMLOpenComment\">SingleLineHTMLOpenComment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"2e6mrqmm\">\n        <emu-t>&lt;!--</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-SingleLineCommentChars\">SingleLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineHTMLCloseComment\" type=\"lexical\" id=\"prod-annexB-SingleLineHTMLCloseComment\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineHTMLCloseComment\">SingleLineHTMLCloseComment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"wdv3xq9f\">\n        <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt>\n        <emu-nt><a href=\"#prod-annexB-HTMLCloseComment\">HTMLCloseComment</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineDelimitedComment\" type=\"lexical\" id=\"prod-annexB-SingleLineDelimitedComment\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineDelimitedComment\">SingleLineDelimitedComment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"-jxen_rq\">\n        <emu-t>/*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLineDelimitedCommentChars\">SingleLineDelimitedCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>*/</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"HTMLCloseComment\" type=\"lexical\" id=\"prod-annexB-HTMLCloseComment\">\n    <emu-nt><a href=\"#prod-annexB-HTMLCloseComment\">HTMLCloseComment</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"doh0xpzb\">\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-WhiteSpaceSequence\">WhiteSpaceSequence</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLineDelimitedCommentSequence\">SingleLineDelimitedCommentSequence</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>--&gt;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-SingleLineCommentChars\">SingleLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineDelimitedCommentChars\" type=\"lexical\" id=\"prod-annexB-SingleLineDelimitedCommentChars\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineDelimitedCommentChars\">SingleLineDelimitedCommentChars</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"srrki4i5\">\n        <emu-nt><a href=\"#prod-annexB-SingleLineNotAsteriskChar\">SingleLineNotAsteriskChar</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLineDelimitedCommentChars\">SingleLineDelimitedCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ru60gzv_\">\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLinePostAsteriskCommentChars\">SingleLinePostAsteriskCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineNotAsteriskChar\" type=\"lexical\" id=\"prod-annexB-SingleLineNotAsteriskChar\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineNotAsteriskChar\">SingleLineNotAsteriskChar</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xx2apkej\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> <emu-gmod>but not one of <emu-t>*</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLinePostAsteriskCommentChars\" type=\"lexical\" id=\"prod-annexB-SingleLinePostAsteriskCommentChars\">\n    <emu-nt><a href=\"#prod-annexB-SingleLinePostAsteriskCommentChars\">SingleLinePostAsteriskCommentChars</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"p4bbdmqr\">\n        <emu-nt><a href=\"#prod-annexB-SingleLineNotForwardSlashOrAsteriskChar\">SingleLineNotForwardSlashOrAsteriskChar</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLineDelimitedCommentChars\">SingleLineDelimitedCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ru60gzv_\">\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLinePostAsteriskCommentChars\">SingleLinePostAsteriskCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineNotForwardSlashOrAsteriskChar\" type=\"lexical\" id=\"prod-annexB-SingleLineNotForwardSlashOrAsteriskChar\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineNotForwardSlashOrAsteriskChar\">SingleLineNotForwardSlashOrAsteriskChar</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"9cpftoim\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> <emu-gmod>but not one of <emu-t>/</emu-t> or <emu-t>*</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n<emu-production name=\"WhiteSpaceSequence\" type=\"lexical\" id=\"prod-annexB-WhiteSpaceSequence\">\n    <emu-nt><a href=\"#prod-annexB-WhiteSpaceSequence\">WhiteSpaceSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"r3bi9ks0\">\n        <emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-WhiteSpaceSequence\">WhiteSpaceSequence</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"SingleLineDelimitedCommentSequence\" type=\"lexical\" id=\"prod-annexB-SingleLineDelimitedCommentSequence\">\n    <emu-nt><a href=\"#prod-annexB-SingleLineDelimitedCommentSequence\">SingleLineDelimitedCommentSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"97egrzky\">\n        <emu-nt><a href=\"#prod-annexB-SingleLineDelimitedComment\">SingleLineDelimitedComment</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-WhiteSpaceSequence\">WhiteSpaceSequence</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-annexB-SingleLineDelimitedCommentSequence\">SingleLineDelimitedCommentSequence</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>Similar to a <emu-nt><a href=\"#prod-annexB-MultiLineComment\">MultiLineComment</a></emu-nt> that contains a line terminator code point, a <emu-nt><a href=\"#prod-annexB-SingleLineHTMLCloseComment\">SingleLineHTMLCloseComment</a></emu-nt> is considered to be a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> for purposes of parsing by the syntactic grammar.</p>\n    </emu-annex>\n\n    "}, "sec-block-duplicates-allowed-static-semantics": {"num": "B.3.2.4", "title": "#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-block-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-duplicates-allowed-static-semantics\">#sec-block-duplicates-allowed-static-semantics</span> Changes to Block Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-block-static-semantics-early-errors\"><a href=\"#sec-block-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-early-errors\">#sec-block-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ljp0ar\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> contains any duplicate entries<ins>, unless the source text matched by this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}, "sec-string-literals-early-errors": {"num": "12.8.4.1", "title": "#sec-string-literals-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-string-literals-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-literals-early-errors\">#sec-string-literals-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6mwrfc1u\"><emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nv0ui3q7\"><emu-nt><a href=\"#prod-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>It is a Syntax Error if the source text matched by this production is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">In <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, this syntax is <emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Legacy</a></emu-xref>.</div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>It is possible for string literals to precede a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> that places the enclosing code in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode</a></emu-xref>, and implementations must take care to enforce the above rules for such literals. For example, the following source text contains a Syntax Error:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">invalid</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-string\">\"\\7\"</span>; <span class=\"hljs-string\">\"use strict\"</span>; }</code></pre>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-generator-function-definitions-static-semantics-early-errors": {"num": "15.6.1", "title": "#sec-async-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">#sec-async-generator-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"xruu4gg0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nplor0n0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>If the source text matched by <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahjg9bb6\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.</li>\n        <li>If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source text matched by <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.</li>\n        <li>It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-super-keyword-runtime-semantics-evaluation": {"num": "13.3.7.1", "title": "#sec-super-keyword-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-super-keyword-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-super-keyword-runtime-semantics-evaluation\">#sec-super-keyword-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tpjzdyqv\">\n        <emu-t>super</emu-t>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the source text matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9pdsslwb\">\n        <emu-t>super</emu-t>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyKey</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If the source text matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperCall\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qdmdlzzo\">\n        <emu-t>super</emu-t>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>newTarget</var> be <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>func</var> be !&#160;<emu-xref aoid=\"GetSuperConstructor\"><a href=\"#sec-getsuperconstructor\">GetSuperConstructor</a></emu-xref>().</li><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>argList</var>, <var>newTarget</var>).</li><li>Let <var>thisER</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Perform ? <var>thisER</var>.BindThisValue(<var>result</var>).</li><li>Let <var>F</var> be <var>thisER</var>.[[FunctionObject]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeInstanceElements\"><a href=\"#sec-initializeinstanceelements\">InitializeInstanceElements</a></emu-xref>(<var>result</var>, <var>F</var>).</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-with-statement-static-semantics-early-errors": {"num": "14.11.1", "title": "#sec-with-statement-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-with-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the source text matched by this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"IsLabelledFunction\"><a href=\"#sec-islabelledfunction\">IsLabelledFunction</a></emu-xref>(<emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>) is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>It is only necessary to apply the second rule if the extension specified in <emu-xref href=\"#sec-labelled-function-declarations\"><a href=\"#sec-labelled-function-declarations\" class=\"excluded-xref\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</a></emu-xref> is implemented.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-functiondeclarations-in-ifstatement-statement-clauses": {"num": "B.3.3", "title": "#sec-functiondeclarations-in-ifstatement-statement-clauses FunctionDeclarations in IfStatement Statement Clauses", "html": "<emu-annex id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">#sec-functiondeclarations-in-ifstatement-statement-clauses</span> FunctionDeclarations in IfStatement Statement Clauses</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IfStatement\">IfStatement</a></emu-nt> production in <emu-xref href=\"#sec-if-statement\"><a href=\"#sec-if-statement\" class=\"excluded-xref\" excluded-id=\"sec-if-statement\">#sec-if-statement</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IfStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IfStatement\">IfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3oae1kl0\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_rfywn3t\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ndmrr5v_\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"qlu6dc6n\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[lookahead &#8800; <emu-t>else</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. Source text matched by this production is processed as if each matching occurrence of <emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt> was the sole <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> of a <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt> occupying that position in the source text. The semantics of such a synthetic <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt> includes the web legacy compatibility semantics specified in <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n    </emu-annex>\n\n    "}, "sec-identifiers-static-semantics-early-errors": {"num": "13.1.1", "title": "#sec-identifiers-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-identifiers-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the source text matched by this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"arguments\"</emu-val> or <emu-val>\"eval\"</emu-val>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the source text matched by this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> of the syntactic grammar is <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has a <sub>[Yield]</sub> parameter.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has an <sub>[Await]</sub> parameter.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has a <sub>[Yield]</sub> parameter and <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"yield\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if this production has an <sub>[Await]</sub> parameter and <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"await\"</emu-val>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"Identifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v6xddc2h\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> <emu-gmod>but not <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this phrase is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is: <emu-val>\"implements\"</emu-val>, <emu-val>\"interface\"</emu-val>, <emu-val>\"let\"</emu-val>, <emu-val>\"package\"</emu-val>, <emu-val>\"private\"</emu-val>, <emu-val>\"protected\"</emu-val>, <emu-val>\"public\"</emu-val>, <emu-val>\"static\"</emu-val>, or <emu-val>\"yield\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> of the syntactic grammar is <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> and the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is <emu-val>\"await\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is the same String value as the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of any <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> except for <code>yield</code> or <code>await</code>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> normalizes any Unicode escape sequences in <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> hence such escapes cannot be used to write an <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> whose code point sequence is the same as a <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-resolvebinding": {"num": "9.4.2", "title": "#sec-resolvebinding ResolveBinding ( name [ , env ] )", "html": "<emu-clause id=\"sec-resolvebinding\" type=\"abstract operation\" aoid=\"ResolveBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvebinding\">#sec-resolvebinding</span> ResolveBinding ( <var>name</var> [ , <var>env</var> ] )</h1>\n      <p>The abstract operation ResolveBinding takes argument <var>name</var> (a String) and optional argument <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> or <emu-val>undefined</emu-val>). It is used to determine the binding of <var>name</var>. <var>env</var> can be used to explicitly provide the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is to be searched for the binding. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>env</var> is not present or if <var>env</var> is <emu-val>undefined</emu-val>, then<ol><li>Set <var>env</var> to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>If the source text matched by the syntactic production that is being evaluated is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>env</var>, <var>name</var>, <var>strict</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The result of ResolveBinding is always a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> whose [[ReferencedName]] field is <var>name</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-pattern-semantics": {"num": "22.2.2", "title": "#sec-pattern-semantics Pattern Semantics", "html": "<emu-clause id=\"sec-pattern-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</span> Pattern Semantics</h1>\n      <p>A regular expression pattern is converted into an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> using the process described below. An implementation is encouraged to use more efficient algorithms than the ones listed below, as long as the results are the same. The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> is used as the value of a RegExp object's [[RegExpMatcher]] internal slot.</p>\n      <p>A <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is either a BMP pattern or a Unicode pattern depending upon whether or not its associated flags contain a <code>u</code>. A BMP pattern matches against a String interpreted as consisting of a sequence of 16-bit values that are Unicode code points in the range of the Basic Multilingual Plane. A Unicode pattern matches against a String interpreted as consisting of Unicode code points encoded using UTF-16. In the context of describing the behaviour of a BMP pattern &#8220;character&#8221; means a single 16-bit Unicode BMP code point. In the context of describing the behaviour of a Unicode pattern &#8220;character&#8221; means a UTF-16 encoded code point (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>). In either context, &#8220;character value&#8221; means the numeric value of the corresponding non-encoded code point.</p>\n      <p>The syntax and semantics of <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is defined as if the source text for the <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> was a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values where each <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> corresponds to a Unicode code point. If a BMP pattern contains a non-BMP <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> the entire pattern is encoded using UTF-16 and the individual code units of that encoding are used as the elements of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For example, consider a pattern expressed in source text as the single non-BMP character U+1D11E (MUSICAL SYMBOL G CLEF). Interpreted as a Unicode pattern, it would be a single element (character) <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the single code point 0x1D11E. However, interpreted as a BMP pattern, it is first UTF-16 encoded to produce a two element <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the code units 0xD834 and 0xDD1E.</p>\n        <p>Patterns are passed to the RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> as ECMAScript String values in which non-BMP characters are UTF-16 encoded. For example, the single character MUSICAL SYMBOL G CLEF pattern, expressed as a String value, is a String of length 2 whose elements were the code units 0xD834 and 0xDD1E. So no further translation of the string would be necessary to process it as a BMP pattern consisting of two pattern characters. However, to process it as a Unicode pattern <emu-xref aoid=\"UTF16SurrogatePairToCodePoint\"><a href=\"#sec-utf16decodesurrogatepair\">UTF16SurrogatePairToCodePoint</a></emu-xref> must be used in producing a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is a single pattern character, the code point U+1D11E.</p>\n        <p>An implementation may not actually perform such translations to or from UTF-16, but the semantics of this specification requires that the result of pattern matching be as if such translations were performed.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-notation\"><h1><span class=\"secnum\">22.2.2.1</span>#sec-notation Notation</h1>...</div><div id=\"excluded-sec-compilepattern\"><h1><span class=\"secnum\">22.2.2.2</span>#sec-compilepattern Runtime Semantics: CompilePattern</h1>...</div><div id=\"excluded-sec-compilesubpattern\"><h1><span class=\"secnum\">22.2.2.3</span>#sec-compilesubpattern Runtime Semantics: CompileSubpattern</h1>...</div><div id=\"excluded-sec-compileassertion\"><h1><span class=\"secnum\">22.2.2.4</span>#sec-compileassertion Runtime Semantics: CompileAssertion</h1>...</div><div id=\"excluded-sec-compilequantifier\"><h1><span class=\"secnum\">22.2.2.5</span>#sec-compilequantifier Runtime Semantics: CompileQuantifier</h1>...</div><div id=\"excluded-sec-compilequantifierprefix\"><h1><span class=\"secnum\">22.2.2.6</span>#sec-compilequantifierprefix Runtime Semantics: CompileQuantifierPrefix</h1>...</div><div id=\"excluded-sec-compileatom\"><h1><span class=\"secnum\">22.2.2.7</span>#sec-compileatom Runtime Semantics: CompileAtom</h1>...</div><div id=\"excluded-sec-compilecharacterclass\"><h1><span class=\"secnum\">22.2.2.8</span>#sec-compilecharacterclass Runtime Semantics: CompileCharacterClass</h1>...</div><div id=\"excluded-sec-compiletocharset\"><h1><span class=\"secnum\">22.2.2.9</span>#sec-compiletocharset Runtime Semantics: CompileToCharSet</h1>...</div></emu-clause>\n\n    "}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 34", "table-module-record-fields": "Table 45", "table-abstract-methods-of-module-records": "Table 46", "table-cyclic-module-fields": "Table 47", "table-cyclic-module-methods": "Table 48"}}}