{"from": {"secList": ["sec-newfunctionenvironment", "sec-newmoduleenvironment", "sec-privatemethodoraccessoradd", "sec-module-environment-records-getbindingvalue-n-s", "sec-%typedarray%.prototype.sort", "sec-regexp.prototype-@@split", "sec-sharedarraybuffer-constructor", "sec-declarative-environment-records-initializebinding-n-v", "sec-declarative-environment-records-hasbinding-n", "sec-web-compat-blockdeclarationinstantiation", "sec-declarative-environment-records-createmutablebinding-n-d", "sec-createmapiterator", "sec-declarative-environment-records-createimmutablebinding-n-s", "sec-validatetypedarray", "sec-sharedarraybuffer-length", "sec-newglobalenvironment", "sec-createsetiterator", "sec-declarative-environment-records", "sec-declarative-environment-records-getbindingvalue-n-s", "sec-module-environment-records", "sec-validateintegertypedarray", "sec-createimportbinding", "sec-declarative-environment-records-setmutablebinding-n-v-s", "sec-newdeclarativeenvironment", "sec-declarative-environment-records-deletebinding-n"], "secData": {"sec-newfunctionenvironment": {"num": "9.1.2.4", "title": "#sec-newfunctionenvironment NewFunctionEnvironment ( F, newTarget )", "html": "<emu-clause id=\"sec-newfunctionenvironment\" aoid=\"NewFunctionEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newfunctionenvironment\">#sec-newfunctionenvironment</span> NewFunctionEnvironment ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>The abstract operation NewFunctionEnvironment takes arguments <var>F</var> and <var>newTarget</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript function.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>env</var> be a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[FunctionObject]] to <var>F</var>.</li><li>If <var>F</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, set <var>env</var>.[[ThisBindingStatus]] to <emu-const>lexical</emu-const>.</li><li>Else, set <var>env</var>.[[ThisBindingStatus]] to <emu-const>uninitialized</emu-const>.</li><li>Set <var>env</var>.[[NewTarget]] to <var>newTarget</var>.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>F</var>.[[Environment]].</li><li>Return <var>env</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-newmoduleenvironment": {"num": "9.1.2.6", "title": "#sec-newmoduleenvironment NewModuleEnvironment ( E )", "html": "<emu-clause id=\"sec-newmoduleenvironment\" aoid=\"NewModuleEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newmoduleenvironment\">#sec-newmoduleenvironment</span> NewModuleEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewModuleEnvironment takes argument <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-privatemethodoraccessoradd": {"num": "7.3.28", "title": "#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( method, O )", "html": "<emu-clause id=\"sec-privatemethodoraccessoradd\" aoid=\"PrivateMethodOrAccessorAdd\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privatemethodoraccessoradd\">#sec-privatemethodoraccessoradd</span> PrivateMethodOrAccessorAdd ( <var>method</var>, <var>O</var> )</h1>\n      <p>The abstract operation PrivateMethodOrAccessorAdd takes arguments <var>method</var> (a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>) and <var>O</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>method</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>method</var>.[[Key]], <var>O</var>).</li><li>If <var>entry</var> is not <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>method</var> to <var>O</var>.[[PrivateElements]].</li><li>NOTE: the values for private methods and accessors are shared across instances. This step does not create a new copy of the method or accessor.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-module-environment-records-getbindingvalue-n-s": {"num": "9.1.1.5.1", "title": "#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-module-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-getbindingvalue-n-s\">#sec-module-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The GetBindingValue concrete method of a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It returns the value of its bound identifier whose name is the value of the argument <var>N</var>. However, if the binding is an indirect binding the value of the target binding is returned. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> is an indirect binding, then<ol><li>Let <var>M</var> and <var>N2</var> be the indirection values provided when this binding for <var>N</var> was created.</li><li>Let <var>targetEnv</var> be <var>M</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>N2</var>, <emu-val>true</emu-val>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p><var>S</var> will always be <emu-val>true</emu-val> because a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-%typedarray%.prototype.sort": {"num": "23.2.3.26", "title": "#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.sort\">#sec-%typedarray%.prototype.sort</span> %TypedArray%.prototype.sort ( <var>comparefn</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> is a distinct function that, except as described below, implements the same requirements as those of <code>Array.prototype.sort</code> as defined in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>. The implementation of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> specification may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse.</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function. These steps are used instead of steps <emu-xref href=\"#step-array-sort-comparefn\"><a href=\"#step-array-sort-comparefn\" class=\"excluded-xref\" excluded-id=\"step-array-sort-comparefn\">#step-array-sort-comparefn</a></emu-xref>&#8211;<emu-xref href=\"#step-array-sort-len\"><a href=\"#step-array-sort-len\" class=\"excluded-xref\" excluded-id=\"step-array-sort-len\">#step-array-sort-len</a></emu-xref> in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>obj</var>).</li><li>Let <var>len</var> be <var>obj</var>.[[ArrayLength]].</li></ol></emu-alg>\n        <p>The following version of <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> is used by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>. It performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>.</p>\n        <p>The abstract operation TypedArraySortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> and <var>buffer</var> values of the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Both <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) are Number or both are BigInt.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Return <var>v</var>.</li></ol></li><li>If <var>x</var> and <var>y</var> are both <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>y</var> is <emu-val>NaN</emu-val>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> &lt; <var>y</var>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> &gt; <var>y</var>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> is <emu-val>-0</emu-val><sub>&#120125;</sub> and <var>y</var> is <emu-val>+0</emu-val><sub>&#120125;</sub>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> and <var>y</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>Return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Because <emu-val>NaN</emu-val> always compares greater than any other value, <emu-val>NaN</emu-val> property values always sort to the end of the result when <var>comparefn</var> is not provided.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-regexp.prototype-@@split": {"num": "22.2.5.13", "title": "#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )", "html": "<emu-clause id=\"sec-regexp.prototype-@@split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@split\">#sec-regexp.prototype-@@split</span> RegExp.prototype [ @@split ] ( <var>string</var>, <var>limit</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns an Array object into which substrings of the result of converting <var>string</var> to a String have been stored. The substrings are determined by searching from left to right for matches of the <emu-val>this</emu-val> value regular expression; these occurrences are not part of any String in the returned array, but serve to divide up the String value.</p>\n          <p>The <emu-val>this</emu-val> value may be an empty regular expression or a regular expression that can match an empty String. In this case, the regular expression does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. (For example, if the regular expression matches the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.) Only the first match at a given index of the String is considered, even if backtracking could yield a non-empty <emu-not-ref>substring</emu-not-ref> match at that index. (For example, <code>/a*?/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"a\", \"b\"]</code>, while <code>/a*/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"\",\"b\"]</code>.)</p>\n          <p>If <var>string</var> is (or converts to) the empty String, the result depends on whether the regular expression can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If the regular expression contains capturing parentheses, then each time <var>separator</var> is matched the results (including any <emu-val>undefined</emu-val> results) of the capturing parentheses are spliced into the output array. For example,</p>\n          <pre><code class=\"javascript hljs\">/&lt;(\\/)?([^<span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>]+)&gt;/[Symbol.split](\"A<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">B</span>&gt;</span>bold<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">B</span>&gt;<span class=\"hljs-name\">and</span></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CODE</span>&gt;</span>coded<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CODE</span>&gt;</span>\")</span></code></pre>\n          <p>evaluates to the array</p>\n          <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"bold\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"and\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"coded\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          <p>If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <p>When the <code>@@split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>rx</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"flags\"</emu-val>)).</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>unicodeMatching</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>unicodeMatching</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>newFlags</var> be <var>flags</var>.</li><li>Else, let <var>newFlags</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>flags</var> and <emu-val>\"y\"</emu-val>.</li><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>rx</var>, <var>newFlags</var> &#187;).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>)).</li><li>If <var>lim</var> is 0, return <var>A</var>.</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>size</var> is 0, then<ol><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is not <emu-val>null</emu-val>, return <var>A</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &lt; <var>size</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>q</var>), <emu-val>true</emu-val>).</li><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is <emu-val>null</emu-val>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>e</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Set <var>e</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>size</var>).</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Let <var>numberOfCaptures</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>z</var>).</li><li>Set <var>numberOfCaptures</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>numberOfCaptures</var> - 1, 0).</li><li>Let <var>i</var> be 1.</li><li>Repeat, while <var>i</var> &#8804; <var>numberOfCaptures</var>,<ol><li>Let <var>nextCapture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>z</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>))).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>nextCapture</var>).</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li></ol></li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>size</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.split]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>@@split</code> method ignores the value of the <emu-val>\"global\"</emu-val> and <emu-val>\"sticky\"</emu-val> properties of this RegExp object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-sharedarraybuffer-constructor": {"num": "25.2.2", "title": "#sec-sharedarraybuffer-constructor The SharedArrayBuffer Constructor", "html": "<emu-clause id=\"sec-sharedarraybuffer-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sharedarraybuffer-constructor\">#sec-sharedarraybuffer-constructor</span> The SharedArrayBuffer Constructor</h1>\n      <p>The SharedArrayBuffer <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is <dfn>%SharedArrayBuffer%</dfn>.</li>\n        <li>is the initial value of the <emu-val>\"SharedArrayBuffer\"</emu-val> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, if that property is present (see below).</li>\n        <li>creates and initializes a new SharedArrayBuffer object when called as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li>\n        <li>is not intended to be called as a function and will throw an exception when called in that manner.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified SharedArrayBuffer behaviour must include a <code>super</code> call to the SharedArrayBuffer <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal state necessary to support the <code>SharedArrayBuffer.prototype</code> built-in methods.</li>\n      </ul>\n\n      <p>Whenever a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> does not provide concurrent access to SharedArrayBuffer objects it may omit the <emu-val>\"SharedArrayBuffer\"</emu-val> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</p>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Unlike an <code>ArrayBuffer</code>, a <code>SharedArrayBuffer</code> cannot become detached, and its internal [[ArrayBufferData]] slot is never <emu-val>null</emu-val>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-sharedarraybuffer-length\"><h1><span class=\"secnum\">25.2.2.1</span>#sec-sharedarraybuffer-length SharedArrayBuffer ( [ length ] )</h1>...</div></emu-clause>\n\n    "}, "sec-declarative-environment-records-initializebinding-n-v": {"num": "9.1.1.1.4", "title": "#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-declarative-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-initializebinding-n-v\">#sec-declarative-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The InitializeBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> must have an uninitialized binding for <var>N</var>.</li><li>Set the bound value for <var>N</var> in <var>envRec</var> to <var>V</var>.</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>envRec</var> has been initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-hasbinding-n": {"num": "9.1.1.1.1", "title": "#sec-declarative-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-hasbinding-n\">#sec-declarative-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The HasBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes argument <var>N</var> (a String). It determines if the argument identifier is one of the identifiers bound by the record. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>envRec</var> has a binding for the name that is the value of <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-web-compat-blockdeclarationinstantiation": {"num": "B.3.3.6", "title": "#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-blockdeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</span> Changes to BlockDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-blockdeclarationinstantiation-createmutablebinding\"><a href=\"#step-blockdeclarationinstantiation-createmutablebinding\">4.a.ii.1</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-blockdeclarationinstantiation-createmutablebinding\"><ol start=\"1\" class=\"nested-thrice\"><li>If <var>env</var>.HasBinding(<var>dn</var>) is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></emu-alg>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-blockdeclarationinstantiation-initializebinding\"><a href=\"#step-blockdeclarationinstantiation-initializebinding\">4.b.iii</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-blockdeclarationinstantiation-initializebinding\"><ol start=\"3\" class=\"nested-twice\"><li>If the binding for <var>fn</var> in <var>env</var> is an uninitialized binding, then<ol><li>Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Perform <var>env</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></emu-alg>\n      </emu-annex>\n    "}, "sec-declarative-environment-records-createmutablebinding-n-d": {"num": "9.1.1.1.2", "title": "#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-declarative-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createmutablebinding-n-d\">#sec-declarative-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The CreateMutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>D</var> (a Boolean). It creates a new mutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If <var>D</var> has the value <emu-val>true</emu-val>, the new binding is marked as being subject to deletion. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create a mutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>D</var> is <emu-val>true</emu-val>, record that the newly created binding may be deleted by a subsequent DeleteBinding call.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createmapiterator": {"num": "24.1.5.1", "title": "#sec-createmapiterator CreateMapIterator ( map, kind )", "html": "<emu-clause id=\"sec-createmapiterator\" aoid=\"CreateMapIterator\" oldids=\"sec-properties-of-map-iterator-instances,table-50,table-internal-slots-of-map-iterator-instances\"><span id=\"table-internal-slots-of-map-iterator-instances\"></span><span id=\"table-50\"></span><span id=\"sec-properties-of-map-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmapiterator\">#sec-createmapiterator</span> CreateMapIterator ( <var>map</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateMapIterator takes arguments <var>map</var> and <var>kind</var>. This operation is used to create iterator objects for Map methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>map</var>, [[MapData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>map</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>map</var>.[[MapData]].</li><li>Let <var>index</var> be 0.</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>kind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>result</var>).</li><li>NOTE: the number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%MapIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-createimmutablebinding-n-s": {"num": "9.1.1.1.3", "title": "#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">#sec-declarative-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The CreateImmutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If <var>S</var> has the value <emu-val>true</emu-val>, the new binding is marked as a strict binding. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create an immutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>S</var> is <emu-val>true</emu-val>, record that the newly created binding is a strict binding.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-validatetypedarray": {"num": "23.2.4.3", "title": "#sec-validatetypedarray ValidateTypedArray ( O )", "html": "<emu-clause id=\"sec-validatetypedarray\" aoid=\"ValidateTypedArray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validatetypedarray\">#sec-validatetypedarray</span> ValidateTypedArray ( <var>O</var> )</h1>\n        <p>The abstract operation ValidateTypedArray takes argument <var>O</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>buffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-sharedarraybuffer-length": {"num": "25.2.2.1", "title": "#sec-sharedarraybuffer-length SharedArrayBuffer ( [ length ] )", "html": "<emu-clause id=\"sec-sharedarraybuffer-length\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sharedarraybuffer-length\">#sec-sharedarraybuffer-length</span> SharedArrayBuffer ( [ <var>length</var> ] )</h1>\n        <p>When the <code>SharedArrayBuffer</code> function is called with optional argument <var>length</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>byteLength</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>length</var>).</li><li>Return ?&#160;<emu-xref aoid=\"AllocateSharedArrayBuffer\"><a href=\"#sec-allocatesharedarraybuffer\">AllocateSharedArrayBuffer</a></emu-xref>(NewTarget, <var>byteLength</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-newglobalenvironment": {"num": "9.1.2.5", "title": "#sec-newglobalenvironment NewGlobalEnvironment ( G, thisValue )", "html": "<emu-clause id=\"sec-newglobalenvironment\" aoid=\"NewGlobalEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newglobalenvironment\">#sec-newglobalenvironment</span> NewGlobalEnvironment ( <var>G</var>, <var>thisValue</var> )</h1>\n        <p>The abstract operation NewGlobalEnvironment takes arguments <var>G</var> and <var>thisValue</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>objRec</var> be <emu-xref aoid=\"NewObjectEnvironment\"><a href=\"#sec-newobjectenvironment\">NewObjectEnvironment</a></emu-xref>(<var>G</var>, <emu-val>false</emu-val>, <emu-val>null</emu-val>).</li><li>Let <var>dclRec</var> be a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> containing no bindings.</li><li>Let <var>env</var> be a new <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Set <var>env</var>.[[ObjectRecord]] to <var>objRec</var>.</li><li>Set <var>env</var>.[[GlobalThisValue]] to <var>thisValue</var>.</li><li>Set <var>env</var>.[[DeclarativeRecord]] to <var>dclRec</var>.</li><li>Set <var>env</var>.[[VarNames]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>env</var>.[[OuterEnv]] to <emu-val>null</emu-val>.</li><li>Return <var>env</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createsetiterator": {"num": "24.2.5.1", "title": "#sec-createsetiterator CreateSetIterator ( set, kind )", "html": "<emu-clause id=\"sec-createsetiterator\" aoid=\"CreateSetIterator\" oldids=\"sec-properties-of-set-iterator-instances,table-51,table-internal-slots-of-set-iterator-instances\"><span id=\"table-internal-slots-of-set-iterator-instances\"></span><span id=\"table-51\"></span><span id=\"sec-properties-of-set-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsetiterator\">#sec-createsetiterator</span> CreateSetIterator ( <var>set</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateSetIterator takes arguments <var>set</var> and <var>kind</var>. This operation is used to create iterator objects for Set methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const> or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>set</var>, [[SetData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>set</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>index</var> be 0.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>set</var>.[[SetData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key+value</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(! <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>e</var>).</li></ol></li><li>NOTE: the number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%SetIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records": {"num": "9.1.1.1", "title": "#sec-declarative-environment-records Declarative Environment Records", "html": "<emu-clause id=\"sec-declarative-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records\">#sec-declarative-environment-records</span> Declarative Environment Records</h1>\n        <p>Each <dfn>declarative Environment Record</dfn> is associated with an ECMAScript program scope containing variable, constant, let, class, module, import, and/or function declarations. A declarative Environment Record binds the set of identifiers defined by the declarations contained within its scope.</p>\n        <p>The behaviour of the concrete specification methods for declarative Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-declarative-environment-records-hasbinding-n\"><h1><span class=\"secnum\">9.1.1.1.1</span>#sec-declarative-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">9.1.1.1.2</span>#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">9.1.1.1.3</span>#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">9.1.1.1.4</span>#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">9.1.1.1.5</span>#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">9.1.1.1.6</span>#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-deletebinding-n\"><h1><span class=\"secnum\">9.1.1.1.7</span>#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hasthisbinding\"><h1><span class=\"secnum\">9.1.1.1.8</span>#sec-declarative-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hassuperbinding\"><h1><span class=\"secnum\">9.1.1.1.9</span>#sec-declarative-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-withbaseobject\"><h1><span class=\"secnum\">9.1.1.1.10</span>#sec-declarative-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-declarative-environment-records-getbindingvalue-n-s": {"num": "9.1.1.1.6", "title": "#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-getbindingvalue-n-s\">#sec-declarative-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The GetBindingValue concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It returns the value of its bound identifier whose name is the value of the argument <var>N</var>. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-module-environment-records": {"num": "9.1.1.5", "title": "#sec-module-environment-records Module Environment Records", "html": "<emu-clause id=\"sec-module-environment-records\" oldids=\"module-environment\"><span id=\"module-environment\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records\">#sec-module-environment-records</span> Module Environment Records</h1>\n        <p>A <dfn>module Environment Record</dfn> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> that is used to represent the outer scope of an ECMAScript <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. In additional to normal mutable and immutable bindings, module Environment Records also provide immutable import bindings which are bindings that provide indirect access to a target binding that exists in another <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Module Environment Records support all of the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> methods listed in <emu-xref href=\"#table-abstract-methods-of-environment-records\"><a href=\"#table-abstract-methods-of-environment-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-environment-records\">#table-abstract-methods-of-environment-records</a></emu-xref> and share the same specifications for all of those methods except for GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In addition, module Environment Records support the methods listed in <emu-xref href=\"#table-additional-methods-of-module-environment-records\"><a href=\"#table-additional-methods-of-module-environment-records\" class=\"excluded-xref\" excluded-id=\"table-additional-methods-of-module-environment-records\">#table-additional-methods-of-module-environment-records</a></emu-xref>:</p>\n        <emu-table id=\"table-additional-methods-of-module-environment-records\" caption=\"Additional Methods of Module Environment Records\" oldids=\"table-20\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-methods-of-module-environment-records\">#table-additional-methods-of-module-environment-records</span>: Additional Methods of Module Environment Records</figcaption><span id=\"table-20\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                CreateImportBinding(N, M, N2)\n              </td>\n              <td>\n                Create an immutable indirect binding in a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for module Environment Records are defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-module-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">9.1.1.5.1</span>#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-module-environment-records-deletebinding-n\"><h1><span class=\"secnum\">9.1.1.5.2</span>#sec-module-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-module-environment-records-hasthisbinding\"><h1><span class=\"secnum\">9.1.1.5.3</span>#sec-module-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-module-environment-records-getthisbinding\"><h1><span class=\"secnum\">9.1.1.5.4</span>#sec-module-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-createimportbinding\"><h1><span class=\"secnum\">9.1.1.5.5</span>#sec-createimportbinding CreateImportBinding ( N, M, N2 )</h1>...</div></emu-clause>\n    "}, "sec-validateintegertypedarray": {"num": "25.4.1.1", "title": "#sec-validateintegertypedarray ValidateIntegerTypedArray ( typedArray [ , waitable ] )", "html": "<emu-clause id=\"sec-validateintegertypedarray\" aoid=\"ValidateIntegerTypedArray\" oldids=\"sec-validatesharedintegertypedarray\"><span id=\"sec-validatesharedintegertypedarray\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validateintegertypedarray\">#sec-validateintegertypedarray</span> ValidateIntegerTypedArray ( <var>typedArray</var> [ , <var>waitable</var> ] )</h1>\n        <p>The abstract operation ValidateIntegerTypedArray takes argument <var>typedArray</var> and optional argument <var>waitable</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>waitable</var> is not present, set <var>waitable</var> to <emu-val>false</emu-val>.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>typeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>typeName</var>.</li><li>If <var>waitable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>typeName</var> is not <emu-val>\"Int32Array\"</emu-val> or <emu-val>\"BigInt64Array\"</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>If !&#160;<emu-xref aoid=\"IsUnclampedIntegerElementType\"><a href=\"#sec-isunclampedintegerelementtype\">IsUnclampedIntegerElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val> and !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <var>buffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createimportbinding": {"num": "9.1.1.5.5", "title": "#sec-createimportbinding CreateImportBinding ( N, M, N2 )", "html": "<emu-clause id=\"sec-createimportbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createimportbinding\">#sec-createimportbinding</span> CreateImportBinding ( <var>N</var>, <var>M</var>, <var>N2</var> )</h1>\n          <p>The CreateImportBinding concrete method of a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String), <var>M</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>), and <var>N2</var> (a String). It creates a new initialized immutable indirect binding for the name <var>N</var>. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. <var>N2</var> is the name of a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. Accesses to the value of the new binding will indirectly access the bound value of the target binding. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When <var>M</var>.[[Environment]] is instantiated it will have a direct binding for <var>N2</var>.</li><li>Create an immutable indirect binding in <var>envRec</var> for <var>N</var> that references <var>M</var> and <var>N2</var> as its target binding and record that the binding is initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-declarative-environment-records-setmutablebinding-n-v-s": {"num": "9.1.1.1.5", "title": "#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">#sec-declarative-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The SetMutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>S</var> (a Boolean). It attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A binding for <var>N</var> normally already exists, but in rare cases it may not. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>. It performs the following steps when called:</p>\n          <emu-alg><ol><li id=\"step-setmutablebinding-missing-binding\">If <var>envRec</var> does not have a binding for <var>N</var>, then<ol><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Perform <var>envRec</var>.CreateMutableBinding(<var>N</var>, <emu-val>true</emu-val>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is a strict binding, set <var>S</var> to <emu-val>true</emu-val>.</li><li>If the binding for <var>N</var> in <var>envRec</var> has not yet been initialized, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Else if the binding for <var>N</var> in <var>envRec</var> is a mutable binding, change its bound value to <var>V</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is an attempt to change the value of an immutable binding.</li><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An example of ECMAScript code that results in a missing binding at step <emu-xref href=\"#step-setmutablebinding-missing-binding\"><a href=\"#step-setmutablebinding-missing-binding\" class=\"excluded-xref\" excluded-id=\"step-setmutablebinding-missing-binding\">#step-setmutablebinding-missing-binding</a></emu-xref> is:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"var x; x = (delete x, 0);\"</span>); }</code></pre>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-newdeclarativeenvironment": {"num": "9.1.2.2", "title": "#sec-newdeclarativeenvironment NewDeclarativeEnvironment ( E )", "html": "<emu-clause id=\"sec-newdeclarativeenvironment\" aoid=\"NewDeclarativeEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newdeclarativeenvironment\">#sec-newdeclarativeenvironment</span> NewDeclarativeEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewDeclarativeEnvironment takes argument <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-deletebinding-n": {"num": "9.1.1.1.7", "title": "#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-deletebinding-n\">#sec-declarative-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The DeleteBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes argument <var>N</var> (a String). It can only delete bindings that have been explicitly designated as being subject to deletion. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for the name that is the value of <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> cannot be deleted, return <emu-val>false</emu-val>.</li><li>Remove the binding for <var>N</var> from <var>envRec</var>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-abstract-methods-of-environment-records": "Table 19", "table-additional-methods-of-module-environment-records": "Table 25", "table-the-typedarray-constructors": "Table 64"}}, "to": {"secList": ["sec-newfunctionenvironment", "sec-newmoduleenvironment", "sec-privatemethodoraccessoradd", "sec-module-environment-records-getbindingvalue-n-s", "sec-%typedarray%.prototype.sort", "sec-regexp.prototype-@@split", "sec-sharedarraybuffer-constructor", "sec-declarative-environment-records-initializebinding-n-v", "sec-declarative-environment-records-hasbinding-n", "sec-web-compat-blockdeclarationinstantiation", "sec-declarative-environment-records-createmutablebinding-n-d", "sec-createmapiterator", "sec-declarative-environment-records-createimmutablebinding-n-s", "sec-validatetypedarray", "sec-sharedarraybuffer-length", "sec-newglobalenvironment", "sec-createsetiterator", "sec-declarative-environment-records", "sec-declarative-environment-records-getbindingvalue-n-s", "sec-module-environment-records", "sec-validateintegertypedarray", "sec-createimportbinding", "sec-declarative-environment-records-setmutablebinding-n-v-s", "sec-newdeclarativeenvironment", "sec-declarative-environment-records-deletebinding-n"], "secData": {"sec-newfunctionenvironment": {"num": "9.1.2.4", "title": "#sec-newfunctionenvironment NewFunctionEnvironment ( F, newTarget )", "html": "<emu-clause id=\"sec-newfunctionenvironment\" aoid=\"NewFunctionEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newfunctionenvironment\">#sec-newfunctionenvironment</span> NewFunctionEnvironment ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>The abstract operation NewFunctionEnvironment takes arguments <var>F</var> and <var>newTarget</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript function.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>env</var> be a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>.</li><li>Set <var>env</var>.[[Bindings]] to &#171; &#187;.</li><li>Set <var>env</var>.[[FunctionObject]] to <var>F</var>.</li><li>If <var>F</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, set <var>env</var>.[[ThisBindingStatus]] to <emu-const>lexical</emu-const>.</li><li>Else, set <var>env</var>.[[ThisBindingStatus]] to <emu-const>uninitialized</emu-const>.</li><li>Set <var>env</var>.[[NewTarget]] to <var>newTarget</var>.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>F</var>.[[Environment]].</li><li>Return <var>env</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-newmoduleenvironment": {"num": "9.1.2.6", "title": "#sec-newmoduleenvironment NewModuleEnvironment ( E )", "html": "<emu-clause id=\"sec-newmoduleenvironment\" aoid=\"NewModuleEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newmoduleenvironment\">#sec-newmoduleenvironment</span> NewModuleEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewModuleEnvironment takes argument <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.</li><li>Set <var>env</var>.[[Bindings]] to &#171; &#187;.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-privatemethodoraccessoradd": {"num": "7.3.28", "title": "#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( method, O )", "html": "<emu-clause id=\"sec-privatemethodoraccessoradd\" aoid=\"PrivateMethodOrAccessorAdd\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privatemethodoraccessoradd\">#sec-privatemethodoraccessoradd</span> PrivateMethodOrAccessorAdd ( <var>method</var>, <var>O</var> )</h1>\n      <p>The abstract operation PrivateMethodOrAccessorAdd takes arguments <var>method</var> (a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>) and <var>O</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>method</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>method</var>.[[Key]], <var>O</var>).</li><li>If <var>entry</var> is not <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>method</var> to <var>O</var>.[[PrivateElements]].</li><li>NOTE: The values for private methods and accessors are shared across instances. This step does not create a new copy of the method or accessor.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-module-environment-records-getbindingvalue-n-s": {"num": "9.1.1.5.1", "title": "#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-module-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-getbindingvalue-n-s\">#sec-module-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The GetBindingValue concrete method of a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It returns the value of its bound identifier whose name is the value of the argument <var>N</var>. However, if the binding is an indirect binding the value of the target binding is returned. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>.</li><li>Let <var>binding</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">DeclarativeBindingRecord</a></emu-xref> in <var>envRec</var>.[[Bindings]] whose [[BoundName]] field equals <var>N</var>.</li><li>If <var>binding</var> is an ImportDeclarativeBindingRecord, then<ol><li>Let <var>M</var> be <var>binding</var>.[[TargetModuleRec]].</li><li>Let <var>N2</var> be <var>binding</var>.[[TargetName]].</li><li>Let <var>targetEnv</var> be <var>M</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>N2</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <var>binding</var>.[[IsInitialized]] is <emu-val>false</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return <var>binding</var>.[[BoundValue]].</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p><var>S</var> will always be <emu-val>true</emu-val> because a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-%typedarray%.prototype.sort": {"num": "23.2.3.26", "title": "#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.sort\">#sec-%typedarray%.prototype.sort</span> %TypedArray%.prototype.sort ( <var>comparefn</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> is a distinct function that, except as described below, implements the same requirements as those of <code>Array.prototype.sort</code> as defined in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>. The implementation of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> specification may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse.</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function. These steps are used instead of steps <emu-xref href=\"#step-array-sort-comparefn\"><a href=\"#step-array-sort-comparefn\" class=\"excluded-xref\" excluded-id=\"step-array-sort-comparefn\">#step-array-sort-comparefn</a></emu-xref>&#8211;<emu-xref href=\"#step-array-sort-len\"><a href=\"#step-array-sort-len\" class=\"excluded-xref\" excluded-id=\"step-array-sort-len\">#step-array-sort-len</a></emu-xref> in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>obj</var>).</li><li>Let <var>buffer</var> be <var>obj</var>.[[ViewedArrayBuffer]].</li><li>Let <var>len</var> be <var>obj</var>.[[ArrayLength]].</li></ol></emu-alg>\n        <p>The following version of <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> is used by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>. It performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>.</p>\n        <p>The abstract operation TypedArraySortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> and <var>buffer</var> values of the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Both <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) are Number or both are BigInt.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Return <var>v</var>.</li></ol></li><li>If <var>x</var> and <var>y</var> are both <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>y</var> is <emu-val>NaN</emu-val>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> &lt; <var>y</var>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> &gt; <var>y</var>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> is <emu-val>-0</emu-val><sub>&#120125;</sub> and <var>y</var> is <emu-val>+0</emu-val><sub>&#120125;</sub>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> and <var>y</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>Return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Because <emu-val>NaN</emu-val> always compares greater than any other value, <emu-val>NaN</emu-val> property values always sort to the end of the result when <var>comparefn</var> is not provided.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-regexp.prototype-@@split": {"num": "22.2.5.13", "title": "#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )", "html": "<emu-clause id=\"sec-regexp.prototype-@@split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@split\">#sec-regexp.prototype-@@split</span> RegExp.prototype [ @@split ] ( <var>string</var>, <var>limit</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns an Array object into which substrings of the result of converting <var>string</var> to a String have been stored. The substrings are determined by searching from left to right for matches of the <emu-val>this</emu-val> value regular expression; these occurrences are not part of any String in the returned array, but serve to divide up the String value.</p>\n          <p>The <emu-val>this</emu-val> value may be an empty regular expression or a regular expression that can match an empty String. In this case, the regular expression does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. (For example, if the regular expression matches the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.) Only the first match at a given index of the String is considered, even if backtracking could yield a non-empty <emu-not-ref>substring</emu-not-ref> match at that index. (For example, <code>/a*?/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"a\", \"b\"]</code>, while <code>/a*/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"\",\"b\"]</code>.)</p>\n          <p>If <var>string</var> is (or converts to) the empty String, the result depends on whether the regular expression can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If the regular expression contains capturing parentheses, then each time <var>separator</var> is matched the results (including any <emu-val>undefined</emu-val> results) of the capturing parentheses are spliced into the output array. For example,</p>\n          <pre><code class=\"javascript hljs\">/&lt;(\\/)?([^<span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>]+)&gt;/[Symbol.split](\"A<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">B</span>&gt;</span>bold<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">B</span>&gt;</span>and<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CODE</span>&gt;</span>coded<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CODE</span>&gt;</span>\")</span></code></pre>\n          <p>evaluates to the array</p>\n          <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"bold\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"and\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"coded\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          <p>If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <p>When the <code>@@split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>rx</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"flags\"</emu-val>)).</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>unicodeMatching</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>unicodeMatching</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>newFlags</var> be <var>flags</var>.</li><li>Else, let <var>newFlags</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>flags</var> and <emu-val>\"y\"</emu-val>.</li><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>rx</var>, <var>newFlags</var> &#187;).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>)).</li><li>If <var>lim</var> is 0, return <var>A</var>.</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>size</var> is 0, then<ol><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is not <emu-val>null</emu-val>, return <var>A</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &lt; <var>size</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>q</var>), <emu-val>true</emu-val>).</li><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is <emu-val>null</emu-val>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>e</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Set <var>e</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>size</var>).</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Let <var>numberOfCaptures</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>z</var>).</li><li>Set <var>numberOfCaptures</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>numberOfCaptures</var> - 1, 0).</li><li>Let <var>i</var> be 1.</li><li>Repeat, while <var>i</var> &#8804; <var>numberOfCaptures</var>,<ol><li>Let <var>nextCapture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>z</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>))).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>nextCapture</var>).</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li></ol></li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>size</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.split]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>@@split</code> method ignores the value of the <emu-val>\"global\"</emu-val> and <emu-val>\"sticky\"</emu-val> properties of this RegExp object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-sharedarraybuffer-constructor": {"num": "25.2.2", "title": "#sec-sharedarraybuffer-constructor The SharedArrayBuffer Constructor", "html": "<emu-clause id=\"sec-sharedarraybuffer-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sharedarraybuffer-constructor\">#sec-sharedarraybuffer-constructor</span> The SharedArrayBuffer Constructor</h1>\n      <p>The SharedArrayBuffer <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is <dfn>%SharedArrayBuffer%</dfn>.</li>\n        <li>is the initial value of the <emu-val>\"SharedArrayBuffer\"</emu-val> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, if that property is present (see below).</li>\n        <li>creates and initializes a new SharedArrayBuffer object when called as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li>\n        <li>is not intended to be called as a function and will throw an exception when called in that manner.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified SharedArrayBuffer behaviour must include a <code>super</code> call to the SharedArrayBuffer <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal state necessary to support the <code>SharedArrayBuffer.prototype</code> built-in methods.</li>\n      </ul>\n\n      <p>Whenever a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> does not provide concurrent access to SharedArrayBuffer objects it may omit the <emu-val>\"SharedArrayBuffer\"</emu-val> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</p>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Unlike an <code>ArrayBuffer</code>, a <code>SharedArrayBuffer</code> cannot become detached, and its internal [[ArrayBufferData]] slot is never <emu-val>null</emu-val>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-sharedarraybuffer-length\"><h1><span class=\"secnum\">25.2.2.1</span>#sec-sharedarraybuffer-length SharedArrayBuffer ( length )</h1>...</div></emu-clause>\n\n    "}, "sec-declarative-environment-records-initializebinding-n-v": {"num": "9.1.1.1.4", "title": "#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-declarative-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-initializebinding-n-v\">#sec-declarative-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The InitializeBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>.</li><li>Let <var>binding</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">DeclarativeBindingRecord</a></emu-xref> in <var>envRec</var>.[[Bindings]] whose [[BoundName]] field equals <var>N</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>binding</var>.[[IsInitialized]] is <emu-val>false</emu-val>.</li><li>Set <var>binding</var>.[[BoundValue]] to <var>V</var>.</li><li>Set <var>binding</var>.[[IsInitialized]] to <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-hasbinding-n": {"num": "9.1.1.1.1", "title": "#sec-declarative-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-hasbinding-n\">#sec-declarative-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The HasBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes argument <var>N</var> (a String). It determines if the argument identifier is one of the identifiers bound by the record. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>envRec</var>.[[Bindings]] contains a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">DeclarativeBindingRecord</a></emu-xref> whose [[BoundName]] field is equal to the value of <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-web-compat-blockdeclarationinstantiation": {"num": "B.3.3.6", "title": "#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-blockdeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</span> Changes to BlockDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-blockdeclarationinstantiation-createmutablebinding\"><a href=\"#step-blockdeclarationinstantiation-createmutablebinding\">4.a.ii.1</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-blockdeclarationinstantiation-createmutablebinding\"><ol start=\"1\" class=\"nested-thrice\"><li>If <var>env</var>.HasBinding(<var>dn</var>) is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></emu-alg>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-blockdeclarationinstantiation-initializebinding\"><a href=\"#step-blockdeclarationinstantiation-initializebinding\">4.b.iii</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-blockdeclarationinstantiation-initializebinding\"><ol start=\"3\" class=\"nested-twice\"><li>Let <var>binding</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">DeclarativeBindingRecord</a></emu-xref> in <var>env</var>.[[Bindings]] whose [[BoundName]] field equals <var>fn</var>.</li><li>If <var>binding</var>.[[IsInitialized]] is <emu-val>false</emu-val>, then<ol><li>Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Perform <var>env</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></emu-alg>\n      </emu-annex>\n    "}, "sec-declarative-environment-records-createmutablebinding-n-d": {"num": "9.1.1.1.2", "title": "#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-declarative-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createmutablebinding-n-d\">#sec-declarative-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The CreateMutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>D</var> (a Boolean). It creates a new mutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If <var>D</var> has the value <emu-val>true</emu-val>, the new binding is marked as being subject to deletion. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var>.HasBinding(<var>N</var>) is <emu-val>false</emu-val>.</li><li>Let <var>binding</var> be <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">DeclarativeBindingRecord</a></emu-xref> { [[BoundName]]: <var>N</var>, [[IsInitialized]]: <emu-val>false</emu-val>, [[BoundValue]]: <emu-val>undefined</emu-val>, [[IsMutable]]: <emu-val>true</emu-val>, [[IsDeletable]]: <var>D</var>, [[IsStrict]]: <emu-val>false</emu-val> }.</li><li>Append <var>binding</var> to <var>envRec</var>.[[Bindings]].</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createmapiterator": {"num": "24.1.5.1", "title": "#sec-createmapiterator CreateMapIterator ( map, kind )", "html": "<emu-clause id=\"sec-createmapiterator\" aoid=\"CreateMapIterator\" oldids=\"sec-properties-of-map-iterator-instances,table-50,table-internal-slots-of-map-iterator-instances\"><span id=\"table-internal-slots-of-map-iterator-instances\"></span><span id=\"table-50\"></span><span id=\"sec-properties-of-map-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmapiterator\">#sec-createmapiterator</span> CreateMapIterator ( <var>map</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateMapIterator takes arguments <var>map</var> and <var>kind</var>. This operation is used to create iterator objects for Map methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>map</var>, [[MapData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>map</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>map</var>.[[MapData]].</li><li>Let <var>index</var> be 0.</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>kind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>result</var>).</li><li>NOTE: The number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%MapIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-createimmutablebinding-n-s": {"num": "9.1.1.1.3", "title": "#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">#sec-declarative-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The CreateImmutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If <var>S</var> has the value <emu-val>true</emu-val>, the new binding is marked as a strict binding. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var>.HasBinding(<var>N</var>) is <emu-val>false</emu-val>.</li><li>Let <var>binding</var> be <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">DeclarativeBindingRecord</a></emu-xref> { [[BoundName]]: <var>N</var>, [[IsInitialized]]: <emu-val>false</emu-val>, [[BoundValue]]: <emu-val>undefined</emu-val>, [[IsMutable]]: <emu-val>false</emu-val>, [[IsDeletable]]: <emu-val>false</emu-val>, [[IsStrict]]: <var>S</var> }.</li><li>Append <var>binding</var> to <var>envRec</var>.[[Bindings]].</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-validatetypedarray": {"num": "23.2.4.3", "title": "#sec-validatetypedarray ValidateTypedArray ( O )", "html": "<emu-clause id=\"sec-validatetypedarray\" aoid=\"ValidateTypedArray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validatetypedarray\">#sec-validatetypedarray</span> ValidateTypedArray ( <var>O</var> )</h1>\n        <p>The abstract operation ValidateTypedArray takes argument <var>O</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-sharedarraybuffer-length": {"num": "25.2.2.1", "title": "#sec-sharedarraybuffer-length SharedArrayBuffer ( length )", "html": "<emu-clause id=\"sec-sharedarraybuffer-length\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sharedarraybuffer-length\">#sec-sharedarraybuffer-length</span> SharedArrayBuffer ( <var>length</var> )</h1>\n        <p>When the <code>SharedArrayBuffer</code> function is called with argument <var>length</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>byteLength</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>length</var>).</li><li>Return ?&#160;<emu-xref aoid=\"AllocateSharedArrayBuffer\"><a href=\"#sec-allocatesharedarraybuffer\">AllocateSharedArrayBuffer</a></emu-xref>(NewTarget, <var>byteLength</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-newglobalenvironment": {"num": "9.1.2.5", "title": "#sec-newglobalenvironment NewGlobalEnvironment ( G, thisValue )", "html": "<emu-clause id=\"sec-newglobalenvironment\" aoid=\"NewGlobalEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newglobalenvironment\">#sec-newglobalenvironment</span> NewGlobalEnvironment ( <var>G</var>, <var>thisValue</var> )</h1>\n        <p>The abstract operation NewGlobalEnvironment takes arguments <var>G</var> and <var>thisValue</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>objRec</var> be <emu-xref aoid=\"NewObjectEnvironment\"><a href=\"#sec-newobjectenvironment\">NewObjectEnvironment</a></emu-xref>(<var>G</var>, <emu-val>false</emu-val>, <emu-val>null</emu-val>).</li><li>Let <var>dclRec</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Let <var>env</var> be a new <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Set <var>env</var>.[[ObjectRecord]] to <var>objRec</var>.</li><li>Set <var>env</var>.[[GlobalThisValue]] to <var>thisValue</var>.</li><li>Set <var>env</var>.[[DeclarativeRecord]] to <var>dclRec</var>.</li><li>Set <var>env</var>.[[VarNames]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>env</var>.[[OuterEnv]] to <emu-val>null</emu-val>.</li><li>Return <var>env</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createsetiterator": {"num": "24.2.5.1", "title": "#sec-createsetiterator CreateSetIterator ( set, kind )", "html": "<emu-clause id=\"sec-createsetiterator\" aoid=\"CreateSetIterator\" oldids=\"sec-properties-of-set-iterator-instances,table-51,table-internal-slots-of-set-iterator-instances\"><span id=\"table-internal-slots-of-set-iterator-instances\"></span><span id=\"table-51\"></span><span id=\"sec-properties-of-set-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsetiterator\">#sec-createsetiterator</span> CreateSetIterator ( <var>set</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateSetIterator takes arguments <var>set</var> and <var>kind</var>. This operation is used to create iterator objects for Set methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const> or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>set</var>, [[SetData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>set</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>index</var> be 0.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>set</var>.[[SetData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key+value</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(! <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>e</var>).</li></ol></li><li>NOTE: The number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%SetIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records": {"num": "9.1.1.1", "title": "#sec-declarative-environment-records Declarative Environment Records", "html": "<emu-clause id=\"sec-declarative-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records\">#sec-declarative-environment-records</span> Declarative Environment Records</h1>\n        <p>Each <dfn>declarative Environment Record</dfn> is associated with an ECMAScript program scope containing variable, constant, let, class, module, import, and/or function declarations. A declarative Environment Record binds the set of identifiers defined by the declarations contained within its scope.</p>\n        <p>Object Environment Records have the additional state field listed in <emu-xref href=\"#table-additional-fields-of-declarative-environment-records\"><a href=\"#table-additional-fields-of-declarative-environment-records\" class=\"excluded-xref\" excluded-id=\"table-additional-fields-of-declarative-environment-records\">#table-additional-fields-of-declarative-environment-records</a></emu-xref>.</p>\n        <emu-table id=\"table-additional-fields-of-declarative-environment-records\" caption=\"Additional Fields of Declarative Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-fields-of-declarative-environment-records\">#table-additional-fields-of-declarative-environment-records</span>: Additional Fields of Declarative Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Bindings]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">DeclarativeBindingRecord</a></emu-xref>\n              </td>\n              <td>\n                Satisfies the invariant that no two records in [[Bindings]] have the same [[BoundName]].\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <p>A <dfn>DeclarativeBindingRecord</dfn> has the following fields:</p>\n        <emu-table id=\"table-fields-of-declarative-binding-records\" caption=\"DeclarativeBindingRecord Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-fields-of-declarative-binding-records\">#table-fields-of-declarative-binding-records</span>: <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">DeclarativeBindingRecord</a></emu-xref> Fields</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[BoundName]]\n              </td>\n              <td>\n                a String\n              </td>\n              <td>\n                the name being bound.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsInitialized]]\n              </td>\n              <td>\n                a Boolean\n              </td>\n              <td>\n                indicates whether the binding is initialized.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[BoundValue]]\n              </td>\n              <td>\n                an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>\n              </td>\n              <td>\n                the value that the name is bound to.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsMutable]]\n              </td>\n              <td>\n                a Boolean\n              </td>\n              <td>\n                if <emu-val>true</emu-val>, indicates that the binding is mutable.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsDeletable]]\n              </td>\n              <td>\n                a Boolean\n              </td>\n              <td>\n                if <emu-val>true</emu-val>, indicates that the binding may be deleted by a subsequent DeleteBinding call.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsStrict]]\n              </td>\n              <td>\n                a Boolean\n              </td>\n              <td>\n                if <emu-val>true</emu-val>, indicates that the binding is a strict binding.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <p>The behaviour of the concrete specification methods for declarative Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-declarative-environment-records-hasbinding-n\"><h1><span class=\"secnum\">9.1.1.1.1</span>#sec-declarative-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">9.1.1.1.2</span>#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">9.1.1.1.3</span>#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">9.1.1.1.4</span>#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">9.1.1.1.5</span>#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">9.1.1.1.6</span>#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-deletebinding-n\"><h1><span class=\"secnum\">9.1.1.1.7</span>#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hasthisbinding\"><h1><span class=\"secnum\">9.1.1.1.8</span>#sec-declarative-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hassuperbinding\"><h1><span class=\"secnum\">9.1.1.1.9</span>#sec-declarative-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-withbaseobject\"><h1><span class=\"secnum\">9.1.1.1.10</span>#sec-declarative-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-declarative-environment-records-getbindingvalue-n-s": {"num": "9.1.1.1.6", "title": "#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-getbindingvalue-n-s\">#sec-declarative-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The GetBindingValue concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It returns the value of its bound identifier whose name is the value of the argument <var>N</var>. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>.</li><li>Let <var>binding</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">DeclarativeBindingRecord</a></emu-xref> in <var>envRec</var>.[[Bindings]] whose [[BoundName]] field equals <var>N</var>.</li><li>If <var>binding</var>.[[IsInitialized]] is <emu-val>false</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return <var>binding</var>.[[BoundValue]].</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-module-environment-records": {"num": "9.1.1.5", "title": "#sec-module-environment-records Module Environment Records", "html": "<emu-clause id=\"sec-module-environment-records\" oldids=\"module-environment\"><span id=\"module-environment\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records\">#sec-module-environment-records</span> Module Environment Records</h1>\n        <p>A <dfn>module Environment Record</dfn> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> that is used to represent the outer scope of an ECMAScript <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. In additional to normal mutable and immutable bindings, module Environment Records also provide immutable import bindings which are bindings that provide indirect access to a target binding that exists in another <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Module Environment Records support all of the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> methods listed in <emu-xref href=\"#table-abstract-methods-of-environment-records\"><a href=\"#table-abstract-methods-of-environment-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-environment-records\">#table-abstract-methods-of-environment-records</a></emu-xref> and share the same specifications for all of those methods except for GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In addition, module Environment Records support the methods listed in <emu-xref href=\"#table-additional-methods-of-module-environment-records\"><a href=\"#table-additional-methods-of-module-environment-records\" class=\"excluded-xref\" excluded-id=\"table-additional-methods-of-module-environment-records\">#table-additional-methods-of-module-environment-records</a></emu-xref>:</p>\n        <emu-table id=\"table-additional-methods-of-module-environment-records\" caption=\"Additional Methods of Module Environment Records\" oldids=\"table-20\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-methods-of-module-environment-records\">#table-additional-methods-of-module-environment-records</span>: Additional Methods of Module Environment Records</figcaption><span id=\"table-20\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                CreateImportBinding(N, M, N2)\n              </td>\n              <td>\n                Create an immutable indirect binding in a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The [[Bindings]] of a Module Environment Record can include ImportDeclarativeBindingRecords. These have all the fields of DeclarativeBindingRecords, plus the additional state fields listed in the following table.</p>\n        <emu-table id=\"table-additional-fields-of-importdeclarativebindingrecords\" caption=\"Additional Fields of ImportDeclarativeBindingRecords\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-fields-of-importdeclarativebindingrecords\">#table-additional-fields-of-importdeclarativebindingrecords</span>: Additional Fields of ImportDeclarativeBindingRecords</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[TargetModuleRec]]\n              </td>\n              <td>\n                a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n              </td>\n              <td>\n                ?\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[TargetName]]\n              </td>\n              <td>\n                a String\n              </td>\n              <td>\n                the name of a binding that exists in [[TargetModuleRec]]'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for module Environment Records are defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-module-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">9.1.1.5.1</span>#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-module-environment-records-deletebinding-n\"><h1><span class=\"secnum\">9.1.1.5.2</span>#sec-module-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-module-environment-records-hasthisbinding\"><h1><span class=\"secnum\">9.1.1.5.3</span>#sec-module-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-module-environment-records-getthisbinding\"><h1><span class=\"secnum\">9.1.1.5.4</span>#sec-module-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-createimportbinding\"><h1><span class=\"secnum\">9.1.1.5.5</span>#sec-createimportbinding CreateImportBinding ( N, M, N2 )</h1>...</div></emu-clause>\n    "}, "sec-validateintegertypedarray": {"num": "25.4.1.1", "title": "#sec-validateintegertypedarray ValidateIntegerTypedArray ( typedArray [ , waitable ] )", "html": "<emu-clause id=\"sec-validateintegertypedarray\" aoid=\"ValidateIntegerTypedArray\" oldids=\"sec-validatesharedintegertypedarray\"><span id=\"sec-validatesharedintegertypedarray\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validateintegertypedarray\">#sec-validateintegertypedarray</span> ValidateIntegerTypedArray ( <var>typedArray</var> [ , <var>waitable</var> ] )</h1>\n        <p>The abstract operation ValidateIntegerTypedArray takes argument <var>typedArray</var> and optional argument <var>waitable</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>waitable</var> is not present, set <var>waitable</var> to <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>buffer</var> be <var>typedArray</var>.[[ViewedArrayBuffer]].</li><li>Let <var>typeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>typeName</var>.</li><li>If <var>waitable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>typeName</var> is not <emu-val>\"Int32Array\"</emu-val> or <emu-val>\"BigInt64Array\"</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>If !&#160;<emu-xref aoid=\"IsUnclampedIntegerElementType\"><a href=\"#sec-isunclampedintegerelementtype\">IsUnclampedIntegerElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val> and !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <var>buffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createimportbinding": {"num": "9.1.1.5.5", "title": "#sec-createimportbinding CreateImportBinding ( N, M, N2 )", "html": "<emu-clause id=\"sec-createimportbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createimportbinding\">#sec-createimportbinding</span> CreateImportBinding ( <var>N</var>, <var>M</var>, <var>N2</var> )</h1>\n          <p>The CreateImportBinding concrete method of a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String), <var>M</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>), and <var>N2</var> (a String). It creates a new initialized immutable indirect binding for the name <var>N</var>. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. <var>N2</var> is the name of a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. Accesses to the value of the new binding will indirectly access the bound value of the target binding. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var>.HasBinding(<var>N</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When <var>M</var>.[[Environment]] is instantiated it will have a direct binding for <var>N2</var>.</li><li>Let <var>binding</var> be ImportDeclarativeBindingRecord { [[BoundName]]: <var>N</var>, [[IsInitialized]]: <emu-val>true</emu-val>, [[BoundValue]]: <emu-val>undefined</emu-val>, [[IsMutable]]: <emu-val>false</emu-val>, [[IsDeletable]]: <emu-val>false</emu-val>, [[IsStrict]]: <emu-val>false</emu-val>, [[TargetModuleRec]]: <var>M</var>, [[TargetName]]: <var>N2</var> }.</li><li>Append <var>binding</var> to <var>envRec</var>.[[Bindings]].</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-declarative-environment-records-setmutablebinding-n-v-s": {"num": "9.1.1.1.5", "title": "#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">#sec-declarative-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The SetMutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>S</var> (a Boolean). It attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A binding for <var>N</var> normally already exists, but in rare cases it may not. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>. It performs the following steps when called:</p>\n          <emu-alg><ol><li id=\"step-setmutablebinding-missing-binding\">If <var>envRec</var>.HasBinding(<var>N</var>) is <emu-val>false</emu-val>, then<ol><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Perform <var>envRec</var>.CreateMutableBinding(<var>N</var>, <emu-val>true</emu-val>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>Let <var>binding</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">DeclarativeBindingRecord</a></emu-xref> in <var>envRec</var>.[[Bindings]] whose [[BoundName]] field equals <var>N</var>.</li><li>If <var>binding</var>.[[IsStrict]] is <emu-val>true</emu-val>, set <var>S</var> to <emu-val>true</emu-val>.</li><li>If <var>binding</var>.[[IsInitialized]] is <emu-val>false</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Else if <var>binding</var>.[[IsMutable]] is <emu-val>true</emu-val>, change its bound value to <var>V</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is an attempt to change the value of an immutable binding.</li><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An example of ECMAScript code that results in a missing binding at step <emu-xref href=\"#step-setmutablebinding-missing-binding\"><a href=\"#step-setmutablebinding-missing-binding\" class=\"excluded-xref\" excluded-id=\"step-setmutablebinding-missing-binding\">#step-setmutablebinding-missing-binding</a></emu-xref> is:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"var x; x = (delete x, 0);\"</span>); }</code></pre>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-newdeclarativeenvironment": {"num": "9.1.2.2", "title": "#sec-newdeclarativeenvironment NewDeclarativeEnvironment ( E )", "html": "<emu-clause id=\"sec-newdeclarativeenvironment\" aoid=\"NewDeclarativeEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newdeclarativeenvironment\">#sec-newdeclarativeenvironment</span> NewDeclarativeEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewDeclarativeEnvironment takes argument <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> or <emu-val>null</emu-val>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</li><li>Set <var>env</var>.[[Bindings]] to &#171; &#187;.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-deletebinding-n": {"num": "9.1.1.1.7", "title": "#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-deletebinding-n\">#sec-declarative-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The DeleteBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes argument <var>N</var> (a String). It can only delete bindings that have been explicitly designated as being subject to deletion. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>.</li><li>Let <var>binding</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">DeclarativeBindingRecord</a></emu-xref> in <var>envRec</var>.[[Bindings]] whose [[BoundName]] field equals <var>N</var>.</li><li>If <var>binding</var>.[[IsDeletable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Remove <var>binding</var> from <var>envRec</var>.[[Bindings]].</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-abstract-methods-of-environment-records": "Table 19", "table-additional-fields-of-declarative-environment-records": "Table 20", "table-fields-of-declarative-binding-records": "Table 21", "table-additional-methods-of-module-environment-records": "Table 27", "table-additional-fields-of-importdeclarativebindingrecords": "Table 28", "table-the-typedarray-constructors": "Table 67"}}}