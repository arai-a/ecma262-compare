{"from": {"secList": ["sec-maketime"], "secData": {"sec-maketime": {"num": "20.4.1.11", "title": "#sec-maketime MakeTime ( hour, min, sec, ms )", "html": "<emu-clause id=\"sec-maketime\" aoid=\"MakeTime\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-maketime\">#sec-maketime</span> MakeTime ( <var>hour</var>, <var>min</var>, <var>sec</var>, <var>ms</var> )</h1>\n        <p>The abstract operation MakeTime takes arguments <var>hour</var> (a Number), <var>min</var> (a Number), <var>sec</var> (a Number), and <var>ms</var> (a Number). It calculates a number of milliseconds. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>hour</var> is not finite or <var>min</var> is not finite or <var>sec</var> is not finite or <var>ms</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Let <var>h</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>hour</var>).</li><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>min</var>).</li><li>Let <var>s</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>sec</var>).</li><li>Let <var>milli</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>ms</var>).</li><li>Let <var>t</var> be <var>h</var> <code>*</code> <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref> <code>+</code> <var>m</var> <code>*</code> <emu-xref aoid=\"msPerMinute\"><a href=\"#eqn-msPerMinute\">msPerMinute</a></emu-xref> <code>+</code> <var>s</var> <code>*</code> <emu-xref aoid=\"msPerSecond\"><a href=\"#eqn-msPerSecond\">msPerSecond</a></emu-xref> <code>+</code> <var>milli</var>, performing the arithmetic according to <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> rules (that is, as if using the ECMAScript operators <code>*</code> and <code>+</code>).</li><li>Return <var>t</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-maketime"], "secData": {"sec-maketime": {"num": "20.4.1.11", "title": "#sec-maketime MakeTime ( hour, min, sec, ms )", "html": "<emu-clause id=\"sec-maketime\" aoid=\"MakeTime\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-maketime\">#sec-maketime</span> MakeTime ( <var>hour</var>, <var>min</var>, <var>sec</var>, <var>ms</var> )</h1>\n        <p>The abstract operation MakeTime takes arguments <var>hour</var> (a Number), <var>min</var> (a Number), <var>sec</var> (a Number), and <var>ms</var> (a Number). It calculates a number of milliseconds. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>hour</var> is not finite or <var>min</var> is not finite or <var>sec</var> is not finite or <var>ms</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Let <var>h</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>hour</var>).</li><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>min</var>).</li><li>Let <var>s</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>sec</var>).</li><li>Let <var>milli</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>ms</var>).</li><li>Let <var>t</var> be ((<var>h</var> <code>*</code> <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref> <code>+</code> <var>m</var> <code>*</code> <emu-xref aoid=\"msPerMinute\"><a href=\"#eqn-msPerMinute\">msPerMinute</a></emu-xref>) <code>+</code> <var>s</var> <code>*</code> <emu-xref aoid=\"msPerSecond\"><a href=\"#eqn-msPerSecond\">msPerSecond</a></emu-xref>) <code>+</code> <var>milli</var>, performing the arithmetic according to <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> rules (that is, as if using the ECMAScript operators <code>*</code> and <code>+</code>).</li><li>Return <var>t</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}