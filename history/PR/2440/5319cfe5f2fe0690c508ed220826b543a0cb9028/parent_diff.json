{"from": {"secList": ["sec-class-definitions-static-semantics-early-errors", "sec-static-semantics-contains", "sec-ecmascript-specification-types", "sec-class-definitions", "sec-runtime-semantics-evaluatebody", "sec-functions-and-classes", "sec-static-semantics-vardeclarednames", "sec-initializeinstanceelements", "sec-static-semantics-containsundefinedcontinuetarget", "sec-static-semantics-classelementkind", "sec-static-semantics-containsduplicatelabels", "sec-static-semantics-lexicallyscopeddeclarations", "sec-static-semantics-isstatic", "sec-private-names", "sec-static-semantics-varscopeddeclarations", "sec-static-semantics-lexicallydeclarednames", "sec-break-statement-static-semantics-early-errors", "sec-operations-on-objects", "sec-runtime-semantics-classdefinitionevaluation", "sec-static-semantics-containsundefinedbreaktarget", "sec-static-semantics-computedpropertycontains", "sec-static-semantics-classelementevaluation", "sec-static-semantics-privateboundidentifiers", "sec-static-semantics-propname", "sec-continue-statement-static-semantics-early-errors"], "secData": {"sec-class-definitions-static-semantics-early-errors": {"num": "15.7.1", "title": "#sec-class-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-class-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-static-semantics-early-errors\">#sec-class-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0uhgf3fw\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> is not present and the following algorithm evaluates to <emu-val>true</emu-val>:</p>\n          <emu-alg><ol><li>Let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <var>constructor</var>.</li></ol></emu-alg>\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1y1dunax\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PrototypePropertyNameList\"><a href=\"#sec-static-semantics-prototypepropertynamelist\">PrototypePropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> contains more than one occurrence of <emu-val>\"constructor\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> contains any duplicate entries, unless the name is used once for a getter and once for a setter and in no other entries, and the getter and setter are either both static or both non-static.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is not <emu-val>\"constructor\"</emu-val> and <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>\"constructor\"</emu-val> and <emu-xref aoid=\"SpecialMethod\"><a href=\"#sec-static-semantics-specialmethod\">SpecialMethod</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-ljgtrpo\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>\"prototype\"</emu-val>.\n        </li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bwbyf1-5\">\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> is <emu-val>\"constructor\"</emu-val>.</li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cpyv1xvc\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> is <emu-val>\"prototype\"</emu-val> or <emu-val>\"constructor\"</emu-val>.\n        </li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"FieldDefinition\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <emu-xref aoid=\"ContainsArguments\"><a href=\"#sec-static-semantics-containsarguments\">ContainsArguments</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt> is <emu-val>\"#constructor\"</emu-val>.</li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-static-semantics-contains": {"num": "8.4.1", "title": "#sec-static-semantics-contains Static Semantics: Contains", "html": "<emu-clause id=\"sec-static-semantics-contains\" oldids=\"sec-object-initializer-static-semantics-contains,sec-static-semantics-static-semantics-contains,sec-function-definitions-static-semantics-contains,sec-arrow-function-definitions-static-semantics-contains,sec-generator-function-definitions-static-semantics-contains,sec-async-generator-function-definitions-static-semantics-contains,sec-class-definitions-static-semantics-contains,sec-async-function-definitions-static-semantics-Contains,sec-async-arrow-function-definitions-static-semantics-Contains\" type=\"sdo\" aoid=\"Contains\"><span id=\"sec-async-arrow-function-definitions-static-semantics-Contains\"></span><span id=\"sec-async-function-definitions-static-semantics-Contains\"></span><span id=\"sec-class-definitions-static-semantics-contains\"></span><span id=\"sec-async-generator-function-definitions-static-semantics-contains\"></span><span id=\"sec-generator-function-definitions-static-semantics-contains\"></span><span id=\"sec-arrow-function-definitions-static-semantics-contains\"></span><span id=\"sec-function-definitions-static-semantics-contains\"></span><span id=\"sec-static-semantics-static-semantics-contains\"></span><span id=\"sec-object-initializer-static-semantics-contains\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-contains\">#sec-static-semantics-contains</span> Static Semantics: Contains</h1>\n      <p>With parameter <var>symbol</var>.</p>\n      <p>Every grammar production alternative in this specification which is not listed below implicitly has the following default definition of Contains:</p>\n      <emu-alg><ol><li>For each child node <var>child</var> of this <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, do<ol><li>If <var>child</var> is an instance of <var>symbol</var>, return <emu-val>true</emu-val>.</li><li>If <var>child</var> is an instance of a nonterminal, then<ol><li>Let <var>contained</var> be the result of <var>child</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li><li>If <var>contained</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-JYruL-G6\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"smus6qca\" id=\"prod-RYB8pT4v\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g3mtfiqq\" id=\"prod-Jc3hxjyv\">\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-YglW_lFm\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"dsczygsq\" id=\"prod-hMB2st0D\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"32ghovyc\" id=\"prod-5B9biisJ\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-ow6TXQ_a\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"xruu4gg0\" id=\"prod-lLs4pRL8\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nplor0n0\" id=\"prod-_doZ_xN0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-vPfDfZVz\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"agdmcdye\" id=\"prod-PDvYlV0q\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1_djgdhl\" id=\"prod-0p21L8en\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Static semantic rules that depend upon substructure generally do not look into function definitions.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0uhgf3fw\" id=\"prod-cKFrJVUo\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>If <var>symbol</var> is <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>, then<ol><li>If <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> is present, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> is present, then<ol><li>If <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Static semantic rules that depend upon substructure generally do not look into class bodies except for <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>s.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ieeod2mi\" id=\"prod-o1L20JNH\">\n        <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is not one of <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, <code>super</code> or <code>this</code>, return <emu-val>false</emu-val>.</li><li>If <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yrb110hm\" id=\"prod-CNqH7XEc\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>formals</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return <var>formals</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dqxgopsb\" id=\"prod-hmHHRRG6\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is not one of <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, <code>super</code>, or <code>this</code>, return <emu-val>false</emu-val>.</li><li>Return <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"auwv8gbh\" id=\"prod-0dGKszgN\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is not one of <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, <code>super</code>, or <code>this</code>, return <emu-val>false</emu-val>.</li><li>Let <var>head</var> be the <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>If <var>head</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Contains is used to detect <code>new.target</code>, <code>this</code>, and <code>super</code> usage within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\" id=\"prod-bGWft0ts\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-wul2dpOd\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"frbj984t\" id=\"prod-mlsPerHg\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9pdsslwb\" id=\"prod-GysYUEUH\">\n        <emu-t>super</emu-t>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is the <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> <code>super</code>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"u6lsbvgu\" id=\"prod-uIhOYzuO\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w-4ch2am\" id=\"prod-Aeadd-iM\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lf2imwfr\" id=\"prod-o08cCHMJ\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ecmascript-specification-types": {"num": "6.2", "title": "#sec-ecmascript-specification-types ECMAScript Specification Types", "html": "<emu-clause id=\"sec-ecmascript-specification-types\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-specification-types\">#sec-ecmascript-specification-types</span> ECMAScript Specification Types</h1>\n    <p>A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types. The specification types include Reference, <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>, <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>, and <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref>. Specification type values are specification artefacts that do not necessarily correspond to any specific entity within an ECMAScript implementation. Specification type values may be used to describe intermediate results of ECMAScript expression evaluation but such values cannot be stored as properties of objects or values of ECMAScript language variables.</p>\n\n    <div id=\"excluded-sec-list-and-record-specification-type\"><h1><span class=\"secnum\">6.2.1</span>#sec-list-and-record-specification-type The List and Record Specification Types</h1>...</div><div id=\"excluded-sec-set-and-relation-specification-type\"><h1><span class=\"secnum\">6.2.2</span>#sec-set-and-relation-specification-type The Set and Relation Specification Types</h1>...</div><div id=\"excluded-sec-completion-record-specification-type\"><h1><span class=\"secnum\">6.2.3</span>#sec-completion-record-specification-type The Completion Record Specification Type</h1>...</div><div id=\"excluded-sec-reference-record-specification-type\"><h1><span class=\"secnum\">6.2.4</span>#sec-reference-record-specification-type The Reference Record Specification Type</h1>...</div><div id=\"excluded-sec-property-descriptor-specification-type\"><h1><span class=\"secnum\">6.2.5</span>#sec-property-descriptor-specification-type The Property Descriptor Specification Type</h1>...</div><div id=\"excluded-sec-lexical-environment-and-environment-record-specification-types\"><h1><span class=\"secnum\">6.2.6</span>#sec-lexical-environment-and-environment-record-specification-types The Environment Record Specification Type</h1>...</div><div id=\"excluded-sec-abstract-closure\"><h1><span class=\"secnum\">6.2.7</span>#sec-abstract-closure The Abstract Closure Specification Type</h1>...</div><div id=\"excluded-sec-data-blocks\"><h1><span class=\"secnum\">6.2.8</span>#sec-data-blocks Data Blocks</h1>...</div><div id=\"excluded-sec-privateelement-specification-type\"><h1><span class=\"secnum\">6.2.9</span>#sec-privateelement-specification-type The PrivateElement Specification Type</h1>...</div><div id=\"excluded-sec-classfielddefinition-record-specification-type\"><h1><span class=\"secnum\">6.2.10</span>#sec-classfielddefinition-record-specification-type The ClassFieldDefinition Record Specification Type</h1>...</div><div id=\"excluded-sec-private-names\"><h1><span class=\"secnum\">6.2.11</span>#sec-private-names Private Names</h1>...</div></emu-clause>\n"}, "sec-class-definitions": {"num": "15.7", "title": "#sec-class-definitions Class Definitions", "html": "<emu-clause id=\"sec-class-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions\">#sec-class-definitions</span> Class Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\" id=\"prod-ClassDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"r-8ix7mw\" id=\"prod-kd27yk51\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"eish3c1z\" constraints=\"+Default\" id=\"prod-bStNnwN_\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassExpression\" params=\"Yield, Await\" id=\"prod-ClassExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3vemrlhb\" id=\"prod-Vthx67sj\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassTail\" params=\"Yield, Await\" id=\"prod-ClassTail\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0tcpjpju\" id=\"prod-mIr25y7h\">\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassHeritage\" params=\"Yield, Await\" id=\"prod-ClassHeritage\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eyngn05c\">\n        <emu-t>extends</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassBody\" params=\"Yield, Await\" id=\"prod-ClassBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hi6rf-a8\" id=\"prod-YUQCWiaa\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElementList\" params=\"Yield, Await\" id=\"prod-ClassElementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"l7zmtagw\" id=\"prod-ADR6-dWZ\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ga1dtfdq\" id=\"prod-sKhHHXFQ\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" params=\"Yield, Await\" id=\"prod-ClassElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ke2_9p84\" id=\"prod-Qf4HAgqR\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"a0i06csv\" id=\"prod-0XtyXojL\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"guxzmt6t\" id=\"prod-RVH9JhqU\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"w56q4hpj\" id=\"prod-8cGH1X5O\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"sg2sawim\" id=\"prod-0Xskgzt4\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"FieldDefinition\" params=\"Yield, Await\" id=\"prod-FieldDefinition\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlc4azd3\" id=\"prod-qdC94hXo\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElementName\" params=\"Yield, Await\" id=\"prod-ClassElementName\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jbcjyldj\" id=\"prod-G9YdmiD5\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ie2-zc1c\" id=\"prod-BPUn8Lt3\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>A class definition is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-class-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.7.1</span>#sec-class-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-classelementkind\"><h1><span class=\"secnum\">15.7.2</span>#sec-static-semantics-classelementkind Static Semantics: ClassElementKind</h1>...</div><div id=\"excluded-sec-static-semantics-constructormethod\"><h1><span class=\"secnum\">15.7.3</span>#sec-static-semantics-constructormethod Static Semantics: ConstructorMethod</h1>...</div><div id=\"excluded-sec-static-semantics-isstatic\"><h1><span class=\"secnum\">15.7.4</span>#sec-static-semantics-isstatic Static Semantics: IsStatic</h1>...</div><div id=\"excluded-sec-static-semantics-nonconstructorelements\"><h1><span class=\"secnum\">15.7.5</span>#sec-static-semantics-nonconstructorelements Static Semantics: NonConstructorElements</h1>...</div><div id=\"excluded-sec-static-semantics-prototypepropertynamelist\"><h1><span class=\"secnum\">15.7.6</span>#sec-static-semantics-prototypepropertynamelist Static Semantics: PrototypePropertyNameList</h1>...</div><div id=\"excluded-sec-static-semantics-allprivateidentifiersvalid\"><h1><span class=\"secnum\">15.7.7</span>#sec-static-semantics-allprivateidentifiersvalid Static Semantics: AllPrivateIdentifiersValid</h1>...</div><div id=\"excluded-sec-static-semantics-privateboundidentifiers\"><h1><span class=\"secnum\">15.7.8</span>#sec-static-semantics-privateboundidentifiers Static Semantics: PrivateBoundIdentifiers</h1>...</div><div id=\"excluded-sec-static-semantics-containsarguments\"><h1><span class=\"secnum\">15.7.9</span>#sec-static-semantics-containsarguments Static Semantics: ContainsArguments</h1>...</div><div id=\"excluded-sec-runtime-semantics-classfielddefinitionevaluation\"><h1><span class=\"secnum\">15.7.10</span>#sec-runtime-semantics-classfielddefinitionevaluation Runtime Semantics: ClassFieldDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-static-semantics-classelementevaluation\"><h1><span class=\"secnum\">15.7.11</span>#sec-static-semantics-classelementevaluation Runtime Semantics: ClassElementEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-classdefinitionevaluation\"><h1><span class=\"secnum\">15.7.12</span>#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindingclassdeclarationevaluation\"><h1><span class=\"secnum\">15.7.13</span>#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation</h1>...</div><div id=\"excluded-sec-class-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.7.14</span>#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-evaluatebody": {"num": "10.2.1.3", "title": "#sec-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody", "html": "<emu-clause id=\"sec-runtime-semantics-evaluatebody\" type=\"sdo\" aoid=\"EvaluateBody\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-evaluatebody\">#sec-runtime-semantics-evaluatebody</span> Runtime Semantics: EvaluateBody</h1>\n        <p>With parameters <var>functionObject</var> and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>).</p>\n        <emu-grammar><emu-production name=\"FunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xn8an8nx\" id=\"prod-xc-5PFkl\"><emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateFunctionBody\"><a href=\"#sec-runtime-semantics-evaluatefunctionbody\">EvaluateFunctionBody</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-ph5_rCcA\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateConciseBody\"><a href=\"#sec-runtime-semantics-evaluateconcisebody\">EvaluateConciseBody</a></emu-xref> of <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"GeneratorBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iqzbkm-h\" id=\"prod-dp9uKN5f\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateGeneratorBody\"><a href=\"#sec-runtime-semantics-evaluategeneratorbody\">EvaluateGeneratorBody</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncGeneratorBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iqzbkm-h\" id=\"prod-_F5bCEpP\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateAsyncGeneratorBody\"><a href=\"#sec-runtime-semantics-evaluateasyncgeneratorbody\">EvaluateAsyncGeneratorBody</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncFunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iqzbkm-h\" id=\"prod-V5mALOgb\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateAsyncFunctionBody\"><a href=\"#sec-runtime-semantics-evaluateasyncfunctionbody\">EvaluateAsyncFunctionBody</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod--uh40sBe\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateAsyncConciseBody\"><a href=\"#sec-runtime-semantics-evaluateasyncconcisebody\">EvaluateAsyncConciseBody</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Initializer\">\n    <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_d0ijvnh\" id=\"prod-pu8sYeYA\">\n        <emu-t>=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argumentsList</var> is empty.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>functionObject</var>.[[ClassFieldInitializerName]] is not <emu-const>empty</emu-const>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>functionObject</var>.[[ClassFieldInitializerName]].</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Even though field initializers constitute a function boundary, calling <emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref> does not have any observable effect and so is omitted.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-functions-and-classes": {"num": "A.4", "title": "#sec-functions-and-classes Functions and Classes", "html": "<emu-annex id=\"sec-functions-and-classes\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functions-and-classes\">#sec-functions-and-classes</span> Functions and Classes</h1>\n    <emu-production name=\"UniqueFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kat5sugn\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-X0L442RA\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"xs94btl2\" id=\"prod-eloVArBA\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f3rxyqw\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"wdsulm_w\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"yh9ahvuw\" id=\"prod-aTWifksv\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameterList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3qhu-4tu\" id=\"prod-TejDOk2p\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"mlncfkxh\" id=\"prod-7NFUmaIc\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionRestParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iw2hthb9\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xpmoewcq\" id=\"prod-t4IFgCs2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fal2s0ab\" id=\"prod-lEQdX6hk\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"_ww4ynxp\" constraints=\"+Default\" id=\"prod-eqpHaG0r\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"h6r9zk3c\" id=\"prod--zvLR38c\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gljyayfs\" id=\"prod-CvdRIvQG\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionStatementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ime6-pzo\" id=\"prod-jJULW0Hz\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c-igjs-g\" id=\"prod-AtXUMYu3\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ir-rfjfi\" id=\"prod-C8khN6EK\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\" id=\"prod-K4CbCiCx\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eofx7fcb\" id=\"prod-UOsd7muB\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, ~Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, ~Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3uvs-pa\" id=\"prod-c6cxJePv\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ExpressionBody\" params=\"In, Await\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ickgdpbs\"><emu-nt params=\"?In, ~Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production\n      <br>\n      <emu-production name=\"ArrowParameters\" params=\"Yield, Await\" a=\"parencover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"parencover\" id=\"prod-K4CbCiCx\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t1yas6ob\">\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"u1dc5ef3\" id=\"prod-YIoJOc1p\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"callcover\" id=\"prod-WTX_aban\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bpu3_ipt\" id=\"prod-Dfs5WPuP\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, +Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"bm-b5ose\" id=\"prod-Kq4Uu2cU\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncArrowBindingIdentifier\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yuozsg2r\" id=\"prod-cDxY5q2J\"><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"90e-xzcw\" id=\"prod-HT-vtkeW\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production\n      <br>\n      <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\" a=\"callcover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"callcover\" id=\"prod-WTX_aban\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs></emu-production>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"AsyncArrowHead\">\n    <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ydfl_ghb\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"MethodDefinition\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zqbkmnaz\" id=\"prod-BMcTBp4V\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"uivm4t30\" id=\"prod-SKJRU3Gy\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"l4rbqexd\" id=\"prod-JrqfvaKq\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"2nx0uygb\" id=\"prod-Cxt3DfG5\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"jjr3zjnj\" id=\"prod-SnKN_cew\">\n        <emu-t>get</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"lrypae2k\" id=\"prod-nWs7csn9\">\n        <emu-t>set</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertySetParameterList\">\n    <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"p0ls10ix\" id=\"prod-4-xtlU1r\"><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s6ntmoac\" id=\"prod-8GV2khgE\">\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"56abocni\" id=\"prod-oJNsRhfl\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"gcxlonl8\" constraints=\"+Default\" id=\"prod-bWfHg6Xe\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zsu4etlj\" id=\"prod-haubt72j\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorBody\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"quvqn30c\" id=\"prod-UaNDUTMe\"><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"YieldExpression\" params=\"In, Await\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"alznzlpx\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mrbi6v84\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bojlwy10\" id=\"prod-ceV74b-L\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vxevrvwx\" id=\"prod-cOKIJmRw\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"zdnckwse\" constraints=\"+Default\" id=\"prod-1L17zU6t\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yh0wbqjf\" id=\"prod-s18yr2Ij\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorBody\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zqmkrekv\" id=\"prod-47HC640n\"><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9rildsyw\" id=\"prod-iAuKx0s9\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"_vbcugdo\" constraints=\"+Default\" id=\"prod-TaHP58mu\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mviccgpw\" id=\"prod-LFCRNt3l\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tzooi3sy\" id=\"prod-80co-gZ6\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"j_tcfidx\" id=\"prod-WjFwGBMF\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AwaitExpression\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"wzxw5xwu\">\n        <emu-t>await</emu-t>\n        <emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"r-8ix7mw\" id=\"prod-kd27yk51\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"eish3c1z\" constraints=\"+Default\" id=\"prod-bStNnwN_\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3vemrlhb\" id=\"prod-Vthx67sj\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassTail\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0tcpjpju\" id=\"prod-mIr25y7h\">\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassHeritage\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eyngn05c\">\n        <emu-t>extends</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hi6rf-a8\" id=\"prod-YUQCWiaa\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"l7zmtagw\" id=\"prod-ADR6-dWZ\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ga1dtfdq\" id=\"prod-sKhHHXFQ\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ke2_9p84\" id=\"prod-Qf4HAgqR\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"a0i06csv\" id=\"prod-0XtyXojL\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"guxzmt6t\" id=\"prod-RVH9JhqU\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"w56q4hpj\" id=\"prod-8cGH1X5O\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"sg2sawim\" id=\"prod-0Xskgzt4\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"FieldDefinition\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlc4azd3\" id=\"prod-qdC94hXo\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElementName\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jbcjyldj\" id=\"prod-G9YdmiD5\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ie2-zc1c\" id=\"prod-BPUn8Lt3\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-static-semantics-vardeclarednames": {"num": "8.1.6", "title": "#sec-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-vardeclarednames\" oldids=\"sec-statement-semantics-static-semantics-vardeclarednames,sec-block-static-semantics-vardeclarednames,sec-variable-statement-static-semantics-vardeclarednames,sec-if-statement-static-semantics-vardeclarednames,sec-do-while-statement-static-semantics-vardeclarednames,sec-while-statement-static-semantics-vardeclarednames,sec-for-statement-static-semantics-vardeclarednames,sec-for-in-and-for-of-statements-static-semantics-vardeclarednames,sec-with-statement-static-semantics-vardeclarednames,sec-switch-statement-static-semantics-vardeclarednames,sec-labelled-statements-static-semantics-vardeclarednames,sec-try-statement-static-semantics-vardeclarednames,sec-function-definitions-static-semantics-vardeclarednames,sec-arrow-function-definitions-static-semantics-vardeclarednames,sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames,sec-scripts-static-semantics-vardeclarednames,sec-module-semantics-static-semantics-vardeclarednames\" type=\"sdo\" aoid=\"VarDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-vardeclarednames\"></span><span id=\"sec-scripts-static-semantics-vardeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-try-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-with-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-for-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-do-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-if-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-variable-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-block-static-semantics-vardeclarednames\"></span><span id=\"sec-statement-semantics-static-semantics-vardeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</span> Static Semantics: VarDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-TvRo0Jzz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-x3WiVh1X\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-cXTIOEn1\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-PhLm_cqX\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-bMjWoX52\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-OPyZZ0FU\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-6wmxzhRC\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-4f3fXSme\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ikslLJyV\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-mb72lTih\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"m0ehvb8m\" id=\"prod-_o07UyGN\">\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-5Ab4YMrd\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-Jj9iNkQT\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-MQNHAeo7\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-6MiGg7LY\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-22bMsY8a\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-iNfrCk_F\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-N2GkbzwH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-polenv5I\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-cQmWs6F4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-6rXrz7RR\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-LH0otfP0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-UE8msfiB\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-Xl42xW5D\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-eiN5tOgj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-dkeW5WMH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-dXd3oD1j\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-kf6BzwpI\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-lB_U5kUv\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-DTgBd2wQ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-e2BPI-N_\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>names</var>.</li><li>Return the result of appending to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-_zisH9m7\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-Gdv5Uzyo\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ocDhl-eB\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-xypmC2Rc\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-TKnUh23n\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-K6wLfAiN\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-naQihl7z\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-F1kslF5t\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-1jr14zqX\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-ic6_wi6x\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-Fovz-BpD\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-kKbHUs1e\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-IDrLWHWU\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-_GPKA3Cb\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-YneO94W1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-WMKjW5iz\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-lGybrnks\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-5uRXjJj7\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-initializeinstanceelements": {"num": "7.3.32", "title": "#sec-initializeinstanceelements InitializeInstanceElements ( O, constructor )", "html": "<emu-clause id=\"sec-initializeinstanceelements\" aoid=\"InitializeInstanceElements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializeinstanceelements\">#sec-initializeinstanceelements</span> InitializeInstanceElements ( <var>O</var>, <var>constructor</var> )</h1>\n      <p>The abstract operation InitializeInstanceElements takes arguments <var>O</var> (an Object) and <var>constructor</var> (an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>methods</var> be the value of <var>constructor</var>.[[PrivateMethods]].</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>methods</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>method</var>, <var>O</var>).</li></ol></li><li>Let <var>fields</var> be the value of <var>constructor</var>.[[Fields]].</li><li>For each element <var>fieldRecord</var> of <var>fields</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>O</var>, <var>fieldRecord</var>).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-containsundefinedcontinuetarget": {"num": "8.2.3", "title": "#sec-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-static-semantics-containsundefinedcontinuetarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget,sec-block-static-semantics-containsundefinedcontinuetarget,sec-if-statement-static-semantics-containsundefinedcontinuetarget,sec-do-while-statement-static-semantics-containsundefinedcontinuetarget,sec-while-statement-static-semantics-containsundefinedcontinuetarget,sec-for-statement-static-semantics-containsundefinedcontinuetarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget,sec-continue-statement-static-semantics-containsundefinedcontinuetarget,sec-with-statement-static-semantics-containsundefinedcontinuetarget,sec-switch-statement-static-semantics-containsundefinedcontinuetarget,sec-labelled-statements-static-semantics-containsundefinedcontinuetarget,sec-try-statement-static-semantics-containsundefinedcontinuetarget,sec-function-definitions-static-semantics-containsundefinedcontinuetarget,sec-module-semantics-static-semantics-containsundefinedcontinuetarget\" type=\"sdo\" aoid=\"ContainsUndefinedContinueTarget\"><span id=\"sec-module-semantics-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-function-definitions-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-try-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-labelled-statements-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-switch-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-with-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-continue-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-for-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-while-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-do-while-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-if-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-block-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-HhlDWDz1\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-NBGwhRuE\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-E6M7T9Em\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-V2tQVOUI\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-jJUZqLJS\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-BNxhQmvf\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-B3-Yz0aF\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-eptReca1\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-QrxFmsVC\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kmxl4yum\" id=\"prod-PptGj0zd\"><emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>newIterationSet</var> be a copy of <var>iterationSet</var> with all the elements of <var>labelSet</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> with arguments <var>newIterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-Vrq9L4TL\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-MYTRO2yV\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-idT2m0fR\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-1k-PvIQ6\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-nqE7jDen\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-sdOZ0OVe\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-38R1spHk\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-GQ9tF3ug\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-ilROtw6r\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-RXKTOvxD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-mKAcS051\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-MPaED8xy\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-SLsBgk8L\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-G_08fu0g\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-xuMzWdW7\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-xVs7Y4Vv\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-Ii0_W2zX\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6qppgxyk\" id=\"prod-P3ParQAP\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"wh7qddgu\" id=\"prod-ngwxJt1P\">\n        <emu-t>continue</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>iterationSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-qti0YV4g\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-yGASkGus\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-wESl6-va\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-L1SF9WLb\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-Mf-FlzJR\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-YLBmIA_U\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ycWJ_ozd\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-8au0KFQe\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with arguments <var>iterationSet</var> and <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-I9dzHyBf\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-bHqvfllk\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-MPDlN7RI\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-fYVcY74b\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-WfIkG4rU\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-zb1__ND8\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-9GocAvXy\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-GeitVMt4\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-JQIpAjs-\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-classelementkind": {"num": "15.7.2", "title": "#sec-static-semantics-classelementkind Static Semantics: ClassElementKind", "html": "<emu-clause id=\"sec-static-semantics-classelementkind\" type=\"sdo\" aoid=\"ClassElementKind\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-classelementkind\">#sec-static-semantics-classelementkind</span> Static Semantics: ClassElementKind</h1>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\" id=\"prod-z4kY36XR\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>\"constructor\"</emu-val>, return <emu-const>ConstructorMethod</emu-const>.</li><li>Return <emu-const>NonConstructorMethod</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-ljgtrpo\" id=\"prod-WYqnrGO2\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"bwbyf1-5\" id=\"prod-gbiOT0dB\">\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"cpyv1xvc\" id=\"prod-aKP7bsri\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>NonConstructorMethod</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-U_NLPgRJ\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-containsduplicatelabels": {"num": "8.2.1", "title": "#sec-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-static-semantics-containsduplicatelabels\" oldids=\"sec-statement-semantics-static-semantics-containsduplicatelabels,sec-block-static-semantics-containsduplicatelabels,sec-if-statement-static-semantics-containsduplicatelabels,sec-do-while-statement-static-semantics-containsduplicatelabels,sec-while-statement-static-semantics-containsduplicatelabels,sec-for-statement-static-semantics-containsduplicatelabels,sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels,sec-with-statement-static-semantics-containsduplicatelabels,sec-switch-statement-static-semantics-containsduplicatelabels,sec-labelled-statements-static-semantics-containsduplicatelabels,sec-try-statement-static-semantics-containsduplicatelabels,sec-function-definitions-static-semantics-containsduplicatelabels,sec-module-semantics-static-semantics-containsduplicatelabels\" type=\"sdo\" aoid=\"ContainsDuplicateLabels\"><span id=\"sec-module-semantics-static-semantics-containsduplicatelabels\"></span><span id=\"sec-function-definitions-static-semantics-containsduplicatelabels\"></span><span id=\"sec-try-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-labelled-statements-static-semantics-containsduplicatelabels\"></span><span id=\"sec-switch-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-with-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"></span><span id=\"sec-for-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-while-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-do-while-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-if-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-block-static-semantics-containsduplicatelabels\"></span><span id=\"sec-statement-semantics-static-semantics-containsduplicatelabels\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-5segouA8\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-X3W5RktU\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-tPl3NUyn\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-5amcoTln\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-SRoeq51F\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-sjee5Pog\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-iv3GJbNA\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-VdiHdMbL\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-SpvJf5dZ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-OH037R2P\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-IG220ePF\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-iIi7e4Mv\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicate</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicate</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-M7d89bkQ\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-CSwsyonC\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-UWs53aWN\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-GgLrXaaO\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-di1-cm7_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-zOnkGPoB\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-rNKuYq6q\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-jKYdRg__\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-zBPUdTbl\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-zoCqTANq\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-zqf8dZti\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-dRwtb2-L\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-kCZrLuMF\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-1mQl-EgZ\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-SKvXy5l6\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-92qu0ILT\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-OMSfPp_0\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-8Uz0YNaN\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-UcaBQzki\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-yJHneCFO\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-YbPvJc_D\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-__iQJPEb\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-UiQoMdIo\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>If <var>label</var> is an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-j-zK1vJK\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-iFqlj7Lz\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-DkNjzLGB\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-Aa8IOm4z\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-K0PcnMLw\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-cn79vCHf\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-FlDPQVjo\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-hjcOowKc\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-OcbYq9se\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-lexicallyscopeddeclarations": {"num": "8.1.5", "title": "#sec-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-lexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-lexicallyscopeddeclarations,sec-switch-statement-static-semantics-lexicallyscopeddeclarations,sec-labelled-statements-static-semantics-lexicallyscopeddeclarations,sec-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations,sec-scripts-static-semantics-lexicallyscopeddeclarations,sec-module-semantics-static-semantics-lexicallyscopeddeclarations,sec-exports-static-semantics-lexicallyscopeddeclarations\" type=\"sdo\" aoid=\"LexicallyScopedDeclarations\"><span id=\"sec-exports-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-module-semantics-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-block-static-semantics-lexicallyscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallyscopeddeclarations\">#sec-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-dqBS0eQw\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-MlufDCPG\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-IYBZJ2CF\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-bhogjJ1W\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-am_Z4H66\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>declarations</var>.</li><li>Return the result of appending to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-LxvbRJKF\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-tORmzQQv\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-84xBBiJA\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-V7zVpmtw\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-3Vc5meav\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-nL_6JlM9\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-gtaAB-x7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-aKFk9Ijn\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-4B0l6Nwq\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-0qrVz5hX\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-1WkoNRM_\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-eWnfpwM7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-rZF3AogZ\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-zqmuSkfM\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-IxEr0QE9\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod-DEMJzdJ7\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"bg3oaw2m\" id=\"prod-cMreMYU5\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-xsgJyOoQ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-cRTDqnfl\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\" id=\"prod-4yMGuqEs\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\" id=\"prod-XTfiw-G1\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-isstatic": {"num": "15.7.4", "title": "#sec-static-semantics-isstatic Static Semantics: IsStatic", "html": "<emu-clause id=\"sec-static-semantics-isstatic\" type=\"sdo\" aoid=\"IsStatic\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-isstatic\">#sec-static-semantics-isstatic</span> Static Semantics: IsStatic</h1>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\" id=\"prod-CtxLpivn\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-ljgtrpo\" id=\"prod-lR6jUbAy\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bwbyf1-5\" id=\"prod-gXtZ0OpF\">\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cpyv1xvc\" id=\"prod-wyUVxCrb\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-LP0OJ3qJ\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-private-names": {"num": "6.2.11", "title": "#sec-private-names Private Names", "html": "<emu-clause id=\"sec-private-names\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-private-names\">#sec-private-names</span> Private Names</h1>\n      <p>The <dfn>Private Name</dfn> specification type is used to describe a globally unique value (one which differs from any other Private Name, even if they are otherwise indistinguishable) which represents the key of a private class element (field, method, or accessor). Each Private Name has an associated immutable [[Description]] which is a String value. A Private Name may be installed on any ECMAScript object with <emu-xref aoid=\"PrivateFieldAdd\"><a href=\"#sec-privatefieldadd\">PrivateFieldAdd</a></emu-xref> or <emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>, and then read or written using <emu-xref aoid=\"PrivateGet\"><a href=\"#sec-privateget\">PrivateGet</a></emu-xref> and <emu-xref aoid=\"PrivateSet\"><a href=\"#sec-privateset\">PrivateSet</a></emu-xref>.</p>\n    </emu-clause>\n  "}, "sec-static-semantics-varscopeddeclarations": {"num": "8.1.7", "title": "#sec-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-varscopeddeclarations\" oldids=\"sec-statement-semantics-static-semantics-varscopeddeclarations,sec-block-static-semantics-varscopeddeclarations,sec-variable-statement-static-semantics-varscopeddeclarations,sec-if-statement-static-semantics-varscopeddeclarations,sec-do-while-statement-static-semantics-varscopeddeclarations,sec-while-statement-static-semantics-varscopeddeclarations,sec-for-statement-static-semantics-varscopeddeclarations,sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations,sec-with-statement-static-semantics-varscopeddeclarations,sec-switch-statement-static-semantics-varscopeddeclarations,sec-labelled-statements-static-semantics-varscopeddeclarations,sec-try-statement-static-semantics-varscopeddeclarations,sec-function-definitions-static-semantics-varscopeddeclarations,sec-arrow-function-definitions-static-semantics-varscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations,sec-scripts-static-semantics-varscopeddeclarations,sec-module-semantics-static-semantics-varscopeddeclarations\" type=\"sdo\" aoid=\"VarScopedDeclarations\"><span id=\"sec-module-semantics-static-semantics-varscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-varscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-try-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-with-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-do-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-if-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-variable-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-block-static-semantics-varscopeddeclarations\"></span><span id=\"sec-statement-semantics-static-semantics-varscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</span> Static Semantics: VarScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-CXBIcQtz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-4cf8z78V\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-UIiAeivR\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-R2NCFAfM\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-8C3zNXp6\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-QgvbQ6qN\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-nkERSk1r\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--ycd0kFi\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-r8z3UV58\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-zHpAsUUQ\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n3piepmh\" id=\"prod-r4VwMPwM\"><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oavweevb\" id=\"prod-HsuXutdb\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> to <var>declarations</var>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-B7KHfByo\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-yyIeKAQ3\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-QkEPe1CC\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-jrq4eHFJ\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-5lKKTAkN\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-13ohOiCm\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-eqKiNSk1\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-KgxDtGf4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-AWnFzjE8\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-5TY9-yea\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-t9Ps-Sf3\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-IEEeV8La\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-WOgH08rb\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-SyVO6l8T\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-o2HaUKnD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-kZcYMT8d\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-otI6GMSS\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-FjNXiCI7\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-BX82yRxg\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-aW8QiumN\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>declarations</var>.</li><li>Return the result of appending to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-nuKGUlOU\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-mzP2If-y\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ZPHZRUV6\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-i-A4iWeY\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-ntkJlgei\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-RhYCwWQZ\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-0GInHInm\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-pi8GJ951\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-H8Sf_rsN\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-vvqmH-2l\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-x8eD4P1T\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-UWG_9qGM\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-VllrABp8\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-MCeJZE_U\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-g_wYfia1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-oVpqQZka\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-TBDbISuB\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-f75VYPkN\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-lexicallydeclarednames": {"num": "8.1.4", "title": "#sec-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-lexicallydeclarednames\" oldids=\"sec-block-static-semantics-lexicallydeclarednames,sec-switch-statement-static-semantics-lexicallydeclarednames,sec-labelled-statements-static-semantics-lexicallydeclarednames,sec-function-definitions-static-semantics-lexicallydeclarednames,sec-arrow-function-definitions-static-semantics-lexicallydeclarednames,sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames,sec-scripts-static-semantics-lexicallydeclarednames,sec-module-semantics-static-semantics-lexicallydeclarednames\" type=\"sdo\" aoid=\"LexicallyDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-scripts-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-block-static-semantics-lexicallydeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallydeclarednames\">#sec-static-semantics-lexicallydeclarednames</span> Static Semantics: LexicallyDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-mPEvRR9d\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ZFtxhsq0\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-Rrf-OST4\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-9AEMspNg\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--_BgAjEq\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-mSnfTK7z\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>names</var>.</li><li>Return the result of appending to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-7Gkp_Ikd\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-LyDmmUT5\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-JWPhP_ev\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-BptUBlCG\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-FwgSl19M\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-_jhHTL9Z\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-8YrmfaA1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-yRWpcHmG\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-2xZloP4O\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-tdMR5_9c\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-m6bh3GpA\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The LexicallyDeclaredNames of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> includes the names of all of its imported bindings.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-t-OtLQL7\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-vXiSx9wh\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-v-PqD2SJ\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"15hryu6r\" id=\"prod-XYalkd2A\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, function declarations are treated like lexical declarations rather than like var declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-break-statement-static-semantics-early-errors": {"num": "14.9.1", "title": "#sec-break-statement-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-break-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-break-statement-static-semantics-early-errors\">#sec-break-statement-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlip5zkt\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> is not nested, directly or indirectly (but not crossing function boundaries), within an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> or a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-operations-on-objects": {"num": "7.3", "title": "#sec-operations-on-objects Operations on Objects", "html": "<emu-clause id=\"sec-operations-on-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-operations-on-objects\">#sec-operations-on-objects</span> Operations on Objects</h1>\n\n    <div id=\"excluded-sec-makebasicobject\"><h1><span class=\"secnum\">7.3.1</span>#sec-makebasicobject MakeBasicObject ( internalSlotsList )</h1>...</div><div id=\"excluded-sec-get-o-p\"><h1><span class=\"secnum\">7.3.2</span>#sec-get-o-p Get ( O, P )</h1>...</div><div id=\"excluded-sec-getv\"><h1><span class=\"secnum\">7.3.3</span>#sec-getv GetV ( V, P )</h1>...</div><div id=\"excluded-sec-set-o-p-v-throw\"><h1><span class=\"secnum\">7.3.4</span>#sec-set-o-p-v-throw Set ( O, P, V, Throw )</h1>...</div><div id=\"excluded-sec-createdataproperty\"><h1><span class=\"secnum\">7.3.5</span>#sec-createdataproperty CreateDataProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createmethodproperty\"><h1><span class=\"secnum\">7.3.6</span>#sec-createmethodproperty CreateMethodProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createdatapropertyorthrow\"><h1><span class=\"secnum\">7.3.7</span>#sec-createdatapropertyorthrow CreateDataPropertyOrThrow ( O, P, V )</h1>...</div><div id=\"excluded-sec-definepropertyorthrow\"><h1><span class=\"secnum\">7.3.8</span>#sec-definepropertyorthrow DefinePropertyOrThrow ( O, P, desc )</h1>...</div><div id=\"excluded-sec-deletepropertyorthrow\"><h1><span class=\"secnum\">7.3.9</span>#sec-deletepropertyorthrow DeletePropertyOrThrow ( O, P )</h1>...</div><div id=\"excluded-sec-getmethod\"><h1><span class=\"secnum\">7.3.10</span>#sec-getmethod GetMethod ( V, P )</h1>...</div><div id=\"excluded-sec-hasproperty\"><h1><span class=\"secnum\">7.3.11</span>#sec-hasproperty HasProperty ( O, P )</h1>...</div><div id=\"excluded-sec-hasownproperty\"><h1><span class=\"secnum\">7.3.12</span>#sec-hasownproperty HasOwnProperty ( O, P )</h1>...</div><div id=\"excluded-sec-call\"><h1><span class=\"secnum\">7.3.13</span>#sec-call Call ( F, V [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-construct\"><h1><span class=\"secnum\">7.3.14</span>#sec-construct Construct ( F [ , argumentsList [ , newTarget ] ] )</h1>...</div><div id=\"excluded-sec-setintegritylevel\"><h1><span class=\"secnum\">7.3.15</span>#sec-setintegritylevel SetIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-testintegritylevel\"><h1><span class=\"secnum\">7.3.16</span>#sec-testintegritylevel TestIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-createarrayfromlist\"><h1><span class=\"secnum\">7.3.17</span>#sec-createarrayfromlist CreateArrayFromList ( elements )</h1>...</div><div id=\"excluded-sec-lengthofarraylike\"><h1><span class=\"secnum\">7.3.18</span>#sec-lengthofarraylike LengthOfArrayLike ( obj )</h1>...</div><div id=\"excluded-sec-createlistfromarraylike\"><h1><span class=\"secnum\">7.3.19</span>#sec-createlistfromarraylike CreateListFromArrayLike ( obj [ , elementTypes ] )</h1>...</div><div id=\"excluded-sec-invoke\"><h1><span class=\"secnum\">7.3.20</span>#sec-invoke Invoke ( V, P [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-ordinaryhasinstance\"><h1><span class=\"secnum\">7.3.21</span>#sec-ordinaryhasinstance OrdinaryHasInstance ( C, O )</h1>...</div><div id=\"excluded-sec-speciesconstructor\"><h1><span class=\"secnum\">7.3.22</span>#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )</h1>...</div><div id=\"excluded-sec-enumerableownpropertynames\"><h1><span class=\"secnum\">7.3.23</span>#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )</h1>...</div><div id=\"excluded-sec-getfunctionrealm\"><h1><span class=\"secnum\">7.3.24</span>#sec-getfunctionrealm GetFunctionRealm ( obj )</h1>...</div><div id=\"excluded-sec-copydataproperties\"><h1><span class=\"secnum\">7.3.25</span>#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )</h1>...</div><div id=\"excluded-sec-privateelementfind\"><h1><span class=\"secnum\">7.3.26</span>#sec-privateelementfind PrivateElementFind ( P, O )</h1>...</div><div id=\"excluded-sec-privatefieldadd\"><h1><span class=\"secnum\">7.3.27</span>#sec-privatefieldadd PrivateFieldAdd ( P, O, value )</h1>...</div><div id=\"excluded-sec-privatemethodoraccessoradd\"><h1><span class=\"secnum\">7.3.28</span>#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( method, O )</h1>...</div><div id=\"excluded-sec-privateget\"><h1><span class=\"secnum\">7.3.29</span>#sec-privateget PrivateGet ( P, O )</h1>...</div><div id=\"excluded-sec-privateset\"><h1><span class=\"secnum\">7.3.30</span>#sec-privateset PrivateSet ( P, O, value )</h1>...</div><div id=\"excluded-sec-definefield\"><h1><span class=\"secnum\">7.3.31</span>#sec-definefield DefineField ( receiver, fieldRecord )</h1>...</div><div id=\"excluded-sec-initializeinstanceelements\"><h1><span class=\"secnum\">7.3.32</span>#sec-initializeinstanceelements InitializeInstanceElements ( O, constructor )</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "15.7.12", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" type=\"sdo\" aoid=\"ClassDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For ease of specification, private methods and accessors are included alongside private fields in the [[PrivateElements]] slot of class instances. However, any given object has either all or none of the private methods and accessors defined by a given class. This feature has been designed so that implementations may choose to implement private methods and accessors using a strategy which does not require tracking each method or accessor individually.</p>\n        <p>For example, an implementation could directly associate instance private methods with their corresponding <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> and track, for each object, which class constructors have run with that object as their <code>this</code> value. Looking up an instance private method on an object then consists of checking that the class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> which defines the method has been used to initialize the object, then returning the method associated with the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>.</p>\n        <p>This differs from private fields: because field initializers can throw during class instantiation, an individual object may have some proper subset of the private fields of a given class, and so private fields must in general be tracked individually.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uopqpdqx\" id=\"prod-AcPtObVs\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>outerPrivateEnvironment</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>classPrivateEnvironment</var> be <emu-xref aoid=\"NewPrivateEnvironment\"><a href=\"#sec-newprivateenvironment\">NewPrivateEnvironment</a></emu-xref>(<var>outerPrivateEnvironment</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>For each String <var>dn</var> of the <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>, do<ol><li>If <var>classPrivateEnvironment</var>.[[Names]] contains a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>dn</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is only possible for getter/setter pairs.</li></ol></li><li>Else,<ol><li>Let <var>name</var> be a new <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] value is <var>dn</var>.</li><li>Append <var>name</var> to <var>classPrivateEnvironment</var>.[[Names]].</li></ol></li></ol></li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>NOTE: The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment is <var>outerPrivateEnvironment</var> when evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>classPrivateEnvironment</var>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-default-constructor-functions\" title=\"\"><a href=\"#sec-default-constructor-functions\">Default Constructor Functions</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, 0, <var>className</var>, &#171; [[ConstructorKind]], [[SourceText]] &#187;, <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>, <var>constructorParent</var>).</li></ol></li><li>Else,<ol><li>Let <var>constructorInfo</var> be ! <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform !&#160;<emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>elements</var> be <emu-xref aoid=\"NonConstructorElements\"><a href=\"#sec-static-semantics-nonconstructorelements\">NonConstructorElements</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Let <var>instancePrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticPrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>instanceFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>e</var> of <var>elements</var>, do<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>field</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>field</var>).</li></ol></li><li>Set <var>field</var> to <var>field</var>.[[Value]].</li><li>If <var>field</var> is a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, let <var>container</var> be <var>instancePrivateMethods</var>.</li><li>Else, let <var>container</var> be <var>staticPrivateMethods</var>.</li><li>If <var>container</var> contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>field</var>.[[Key]], then<ol><li>Let <var>existing</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] and <var>existing</var>.[[Kind]] are both <emu-const>accessor</emu-const>.</li><li>If <var>field</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>existing</var>.[[Get]], [[Set]]: <var>field</var>.[[Set]] }.</li></ol></li><li>Else,<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>field</var>.[[Get]], [[Set]]: <var>existing</var>.[[Set]] }.</li></ol></li><li>Replace <var>existing</var> in <var>container</var> with <var>combined</var>.</li></ol></li><li>Else,<ol><li>Append <var>field</var> to <var>container</var>.</li></ol></li></ol></li><li>Else if <var>field</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, append <var>field</var> to <var>instanceFields</var>.</li><li>Else, append <var>field</var> to <var>staticFields</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Set <var>F</var>.[[PrivateMethods]] to <var>instancePrivateMethods</var>.</li><li>Set <var>F</var>.[[Fields]] to <var>instanceFields</var>.</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>staticPrivateMethods</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>method</var>, <var>F</var>).</li></ol></li><li>For each element <var>fieldRecord</var> of <var>staticFields</var>, do<ol><li>Let <var>result</var> be <emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>F</var>, <var>fieldRecord</var>).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>result</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-default-constructor-functions\"><h1><span class=\"secnum\">15.7.12.1</span>#sec-default-constructor-functions Default Constructor Functions</h1>...</div></emu-clause>\n\n    "}, "sec-static-semantics-containsundefinedbreaktarget": {"num": "8.2.2", "title": "#sec-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-static-semantics-containsundefinedbreaktarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget,sec-block-static-semantics-containsundefinedbreaktarget,sec-if-statement-static-semantics-containsundefinedbreaktarget,sec-do-while-statement-static-semantics-containsundefinedbreaktarget,sec-while-statement-static-semantics-containsundefinedbreaktarget,sec-for-statement-static-semantics-containsundefinedbreaktarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget,sec-break-statement-static-semantics-containsundefinedbreaktarget,sec-with-statement-static-semantics-containsundefinedbreaktarget,sec-switch-statement-static-semantics-containsundefinedbreaktarget,sec-labelled-statements-static-semantics-containsundefinedbreaktarget,sec-try-statement-static-semantics-containsundefinedbreaktarget,sec-function-definitions-static-semantics-containsundefinedbreaktarget,sec-module-semantics-static-semantics-containsundefinedbreaktarget\" type=\"sdo\" aoid=\"ContainsUndefinedBreakTarget\"><span id=\"sec-module-semantics-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-function-definitions-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-try-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-labelled-statements-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-switch-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-with-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-break-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-for-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-while-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-do-while-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-if-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-block-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-fZ1-o-5P\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-T0wQwLQ_\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-kUTRcwOP\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-LpKI1NOa\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-s5sTXkkT\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-CeDAPMUu\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-81RguExk\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-YsZID3li\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-ndTQ-Fse\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-v3tH_xWo\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-OZMT2LO1\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-kiVPWNCJ\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-JiuempzE\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-NfepJ8d-\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-_bYykgU2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-0RGYYYa8\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-gRSHgUm2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-mui4tXHs\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-tYmMbbAK\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-xkRBC0p_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-3FISwBIz\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-3UTSN7Q_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-0EPuBRtw\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-bxXqpHGf\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-DVohExfz\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-eDdhr4db\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlip5zkt\" id=\"prod-YN_w7WcD\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcg-yy3r\" id=\"prod-sVlKX7KO\">\n        <emu-t>break</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-wq9kNHey\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-zEFnXzdo\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-MxUCmZej\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-a3dtTxDp\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-mWAyGNz1\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-xKDcEL_e\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-WyF-LUeK\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-zsR5iLZH\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-Mu3VhVjD\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-Yr89pOXp\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-3_4iLynl\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-KaiFSIRm\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-_CFhQEhr\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-fN52Tgzf\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-gDhjMfCK\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-T8hjI_vu\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-SLqg0yKr\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-computedpropertycontains": {"num": "8.4.2", "title": "#sec-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains", "html": "<emu-clause id=\"sec-static-semantics-computedpropertycontains\" oldids=\"sec-object-initializer-static-semantics-computedpropertycontains,sec-method-definitions-static-semantics-computedpropertycontains,sec-generator-function-definitions-static-semantics-computedpropertycontains,sec-async-generator-function-definitions-static-semantics-computedpropertycontains,sec-class-definitions-static-semantics-computedpropertycontains,sec-async-function-definitions-static-semantics-ComputedPropertyContains\" type=\"sdo\" aoid=\"ComputedPropertyContains\"><span id=\"sec-async-function-definitions-static-semantics-ComputedPropertyContains\"></span><span id=\"sec-class-definitions-static-semantics-computedpropertycontains\"></span><span id=\"sec-async-generator-function-definitions-static-semantics-computedpropertycontains\"></span><span id=\"sec-generator-function-definitions-static-semantics-computedpropertycontains\"></span><span id=\"sec-method-definitions-static-semantics-computedpropertycontains\"></span><span id=\"sec-object-initializer-static-semantics-computedpropertycontains\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-computedpropertycontains\">#sec-static-semantics-computedpropertycontains</span> Static Semantics: ComputedPropertyContains</h1>\n      <p>With parameter <var>symbol</var>.</p>\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\" id=\"prod-A8PF_J4D\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"PropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5x4jbee2\" id=\"prod-KBlapLw6\"><emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"PropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nimmmso5\" id=\"prod-pgiwn-A8\"><emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-ZS17eYsY\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"s7vk7pda\" id=\"prod-vyebD6Jr\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"lbu40xzc\" id=\"prod-49ueHbo6\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-clQ5cW-v\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-7J1puDuJ\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"msulavvt\" id=\"prod-w3-p5Y-S\">\n        <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>inList</var> be <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> with argument <var>symbol</var>.</li><li>If <var>inList</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-uyqDiD0W\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-yQr72pM_\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-s8Rlgqlc\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-classelementevaluation": {"num": "15.7.11", "title": "#sec-static-semantics-classelementevaluation Runtime Semantics: ClassElementEvaluation", "html": "<emu-clause id=\"sec-static-semantics-classelementevaluation\" type=\"sdo\" aoid=\"ClassElementEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-classelementevaluation\">#sec-static-semantics-classelementevaluation</span> Runtime Semantics: ClassElementEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bwbyf1-5\" id=\"prod-tPq9hD-G\">\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cpyv1xvc\" id=\"prod-Cn1oLmsN\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ClassFieldDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classfielddefinitionevaluation\">ClassFieldDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> with argument <var>object</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\" id=\"prod-Qe_eKZ3f\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-ljgtrpo\" id=\"prod-DNhqQKHO\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-V88LvFxI\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-privateboundidentifiers": {"num": "15.7.8", "title": "#sec-static-semantics-privateboundidentifiers Static Semantics: PrivateBoundIdentifiers", "html": "<emu-clause id=\"sec-static-semantics-privateboundidentifiers\" type=\"sdo\" aoid=\"PrivateBoundIdentifiers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-privateboundidentifiers\">#sec-static-semantics-privateboundidentifiers</span> Static Semantics: PrivateBoundIdentifiers</h1>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-QQ9gR7rA\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\" id=\"prod-3FDawUhc\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bmyo-0oj\" id=\"prod-sMaEe0uD\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-dExs5jCW\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"msulavvt\" id=\"prod-PTQtTdvS\">\n        <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-pxy6kYq7\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"s7vk7pda\" id=\"prod-axmlrr3F\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"lbu40xzc\" id=\"prod-9-TzGQnW\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorMethod\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-Qvq1cmEs\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-zTa8Ph70\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorMethod\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-1nK7U43p\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-propname": {"num": "8.5.5", "title": "#sec-static-semantics-propname Static Semantics: PropName", "html": "<emu-clause id=\"sec-static-semantics-propname\" oldids=\"sec-object-initializer-static-semantics-propname,sec-method-definitions-static-semantics-propname,sec-generator-function-definitions-static-semantics-propname,sec-async-generator-function-definitions-static-semantics-propname,sec-class-definitions-static-semantics-propname,sec-async-function-definitions-static-semantics-PropName\" type=\"sdo\" aoid=\"PropName\"><span id=\"sec-async-function-definitions-static-semantics-PropName\"></span><span id=\"sec-class-definitions-static-semantics-propname\"></span><span id=\"sec-async-generator-function-definitions-static-semantics-propname\"></span><span id=\"sec-generator-function-definitions-static-semantics-propname\"></span><span id=\"sec-method-definitions-static-semantics-propname\"></span><span id=\"sec-object-initializer-static-semantics-propname\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-propname\">#sec-static-semantics-propname</span> Static Semantics: PropName</h1>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i2hxnrih\" id=\"prod-qwkHLLWn\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w7ifpmpd\" id=\"prod-LNEVDzQo\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\" id=\"prod-T9fmdB_X\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-u_yMpuq5\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xhtltz00\" id=\"prod-Xw0182zP\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"SV\"><a href=\"#sec-static-semantics-sv\">SV</a></emu-xref> of <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pui0b1rt\" id=\"prod-nyDilreQ\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>nbr</var> be the <emu-xref aoid=\"NumericValue\"><a href=\"#sec-numericvalue\">NumericValue</a></emu-xref> of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nbr</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ComputedPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ltvvc-5a\" id=\"prod-r9-JDvZR\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-CpdLYUt9\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"s7vk7pda\" id=\"prod-5q0xQjd1\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"lbu40xzc\" id=\"prod-Pj7-Oy-Q\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-zA_cSICS\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-kfKLLmSB\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-eIc0iw1U\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-cOwxJsMP\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-NW7fjJTs\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\" id=\"prod-5EaGoVCR\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-continue-statement-static-semantics-early-errors": {"num": "14.8.1", "title": "#sec-continue-statement-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-continue-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-continue-statement-static-semantics-early-errors\">#sec-continue-statement-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"ContinueStatement\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6qppgxyk\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"wh7qddgu\">\n        <emu-t>continue</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> is not nested, directly or indirectly (but not crossing function boundaries), within an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-class-definitions-static-semantics-early-errors", "sec-static-semantics-contains", "sec-ecmascript-specification-types", "sec-class-definitions", "sec-runtime-semantics-evaluatebody", "sec-functions-and-classes", "sec-static-semantics-containsawait", "sec-static-semantics-vardeclarednames", "sec-runtime-semantics-classstaticblockdefinitionevaluation", "sec-initializeinstanceelements", "sec-static-semantics-containsundefinedcontinuetarget", "sec-static-semantics-classelementkind", "sec-static-semantics-containsduplicatelabels", "sec-static-semantics-lexicallyscopeddeclarations", "sec-static-semantics-isstatic", "sec-private-names", "sec-static-semantics-varscopeddeclarations", "sec-static-semantics-lexicallydeclarednames", "sec-classstaticblockdefinition-record-specification-type", "sec-evaluatestaticblock", "sec-break-statement-static-semantics-early-errors", "sec-operations-on-objects", "sec-runtime-semantics-classdefinitionevaluation", "sec-static-semantics-computedpropertycontainsawait", "sec-static-semantics-containsundefinedbreaktarget", "sec-static-semantics-computedpropertycontains", "sec-runtime-semantics-evaluateclassstaticblockbody", "sec-static-semantics-classelementevaluation", "sec-static-semantics-privateboundidentifiers", "sec-static-semantics-propname", "sec-continue-statement-static-semantics-early-errors"], "secData": {"sec-class-definitions-static-semantics-early-errors": {"num": "15.7.1", "title": "#sec-class-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-class-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-static-semantics-early-errors\">#sec-class-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0uhgf3fw\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> is not present and the following algorithm evaluates to <emu-val>true</emu-val>:</p>\n          <emu-alg><ol><li>Let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <var>constructor</var>.</li></ol></emu-alg>\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1y1dunax\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PrototypePropertyNameList\"><a href=\"#sec-static-semantics-prototypepropertynamelist\">PrototypePropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> contains more than one occurrence of <emu-val>\"constructor\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> contains any duplicate entries, unless the name is used once for a getter and once for a setter and in no other entries, and the getter and setter are either both static or both non-static.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is not <emu-val>\"constructor\"</emu-val> and <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>\"constructor\"</emu-val> and <emu-xref aoid=\"SpecialMethod\"><a href=\"#sec-static-semantics-specialmethod\">SpecialMethod</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-ljgtrpo\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>\"prototype\"</emu-val>.\n        </li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bwbyf1-5\">\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> is <emu-val>\"constructor\"</emu-val>.</li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cpyv1xvc\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> is <emu-val>\"prototype\"</emu-val> or <emu-val>\"constructor\"</emu-val>.\n        </li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"FieldDefinition\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <emu-xref aoid=\"ContainsArguments\"><a href=\"#sec-static-semantics-containsarguments\">ContainsArguments</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt> is <emu-val>\"#constructor\"</emu-val>.</li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"ClassStaticBlockBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oh0jsomm\"><emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> contains any duplicate entries.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsArguments\"><a href=\"#sec-static-semantics-containsarguments\">ContainsArguments</a></emu-xref> of <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsAwait\"><a href=\"#sec-static-semantics-containsawait\">ContainsAwait</a></emu-xref> of <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-static-semantics-contains": {"num": "8.4.1", "title": "#sec-static-semantics-contains Static Semantics: Contains", "html": "<emu-clause id=\"sec-static-semantics-contains\" oldids=\"sec-object-initializer-static-semantics-contains,sec-static-semantics-static-semantics-contains,sec-function-definitions-static-semantics-contains,sec-arrow-function-definitions-static-semantics-contains,sec-generator-function-definitions-static-semantics-contains,sec-async-generator-function-definitions-static-semantics-contains,sec-class-definitions-static-semantics-contains,sec-async-function-definitions-static-semantics-Contains,sec-async-arrow-function-definitions-static-semantics-Contains\" type=\"sdo\" aoid=\"Contains\"><span id=\"sec-async-arrow-function-definitions-static-semantics-Contains\"></span><span id=\"sec-async-function-definitions-static-semantics-Contains\"></span><span id=\"sec-class-definitions-static-semantics-contains\"></span><span id=\"sec-async-generator-function-definitions-static-semantics-contains\"></span><span id=\"sec-generator-function-definitions-static-semantics-contains\"></span><span id=\"sec-arrow-function-definitions-static-semantics-contains\"></span><span id=\"sec-function-definitions-static-semantics-contains\"></span><span id=\"sec-static-semantics-static-semantics-contains\"></span><span id=\"sec-object-initializer-static-semantics-contains\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-contains\">#sec-static-semantics-contains</span> Static Semantics: Contains</h1>\n      <p>With parameter <var>symbol</var>.</p>\n      <p>Every grammar production alternative in this specification which is not listed below implicitly has the following default definition of Contains:</p>\n      <emu-alg><ol><li>For each child node <var>child</var> of this <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, do<ol><li>If <var>child</var> is an instance of <var>symbol</var>, return <emu-val>true</emu-val>.</li><li>If <var>child</var> is an instance of a nonterminal, then<ol><li>Let <var>contained</var> be the result of <var>child</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li><li>If <var>contained</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-JYruL-G6\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"smus6qca\" id=\"prod-RYB8pT4v\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g3mtfiqq\" id=\"prod-Jc3hxjyv\">\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-YglW_lFm\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"dsczygsq\" id=\"prod-hMB2st0D\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"32ghovyc\" id=\"prod-5B9biisJ\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-ow6TXQ_a\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"xruu4gg0\" id=\"prod-lLs4pRL8\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nplor0n0\" id=\"prod-_doZ_xN0\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-vPfDfZVz\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"agdmcdye\" id=\"prod-PDvYlV0q\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1_djgdhl\" id=\"prod-0p21L8en\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Static semantic rules that depend upon substructure generally do not look into function definitions.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0uhgf3fw\" id=\"prod-cKFrJVUo\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>If <var>symbol</var> is <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>, then<ol><li>If <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> is present, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> is present, then<ol><li>If <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Static semantic rules that depend upon substructure generally do not look into class bodies except for <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>s.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassStaticBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hv6hopt7\" id=\"prod-rrvBSOLD\">\n        <emu-t>static</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Static semantic rules that depend upon substructure generally do not look into <code>static</code> initialization blocks.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ieeod2mi\" id=\"prod-o1L20JNH\">\n        <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is not one of <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, <code>super</code> or <code>this</code>, return <emu-val>false</emu-val>.</li><li>If <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yrb110hm\" id=\"prod-CNqH7XEc\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>formals</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return <var>formals</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dqxgopsb\" id=\"prod-hmHHRRG6\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is not one of <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, <code>super</code>, or <code>this</code>, return <emu-val>false</emu-val>.</li><li>Return <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"auwv8gbh\" id=\"prod-0dGKszgN\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is not one of <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, <code>super</code>, or <code>this</code>, return <emu-val>false</emu-val>.</li><li>Let <var>head</var> be the <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>If <var>head</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Contains is used to detect <code>new.target</code>, <code>this</code>, and <code>super</code> usage within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\" id=\"prod-bGWft0ts\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-wul2dpOd\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"frbj984t\" id=\"prod-mlsPerHg\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9pdsslwb\" id=\"prod-GysYUEUH\">\n        <emu-t>super</emu-t>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>symbol</var> is the <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> <code>super</code>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"u6lsbvgu\" id=\"prod-uIhOYzuO\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w-4ch2am\" id=\"prod-Aeadd-iM\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lf2imwfr\" id=\"prod-o08cCHMJ\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ecmascript-specification-types": {"num": "6.2", "title": "#sec-ecmascript-specification-types ECMAScript Specification Types", "html": "<emu-clause id=\"sec-ecmascript-specification-types\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-specification-types\">#sec-ecmascript-specification-types</span> ECMAScript Specification Types</h1>\n    <p>A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types. The specification types include Reference, <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>, <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>, and <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref>. Specification type values are specification artefacts that do not necessarily correspond to any specific entity within an ECMAScript implementation. Specification type values may be used to describe intermediate results of ECMAScript expression evaluation but such values cannot be stored as properties of objects or values of ECMAScript language variables.</p>\n\n    <div id=\"excluded-sec-list-and-record-specification-type\"><h1><span class=\"secnum\">6.2.1</span>#sec-list-and-record-specification-type The List and Record Specification Types</h1>...</div><div id=\"excluded-sec-set-and-relation-specification-type\"><h1><span class=\"secnum\">6.2.2</span>#sec-set-and-relation-specification-type The Set and Relation Specification Types</h1>...</div><div id=\"excluded-sec-completion-record-specification-type\"><h1><span class=\"secnum\">6.2.3</span>#sec-completion-record-specification-type The Completion Record Specification Type</h1>...</div><div id=\"excluded-sec-reference-record-specification-type\"><h1><span class=\"secnum\">6.2.4</span>#sec-reference-record-specification-type The Reference Record Specification Type</h1>...</div><div id=\"excluded-sec-property-descriptor-specification-type\"><h1><span class=\"secnum\">6.2.5</span>#sec-property-descriptor-specification-type The Property Descriptor Specification Type</h1>...</div><div id=\"excluded-sec-lexical-environment-and-environment-record-specification-types\"><h1><span class=\"secnum\">6.2.6</span>#sec-lexical-environment-and-environment-record-specification-types The Environment Record Specification Type</h1>...</div><div id=\"excluded-sec-abstract-closure\"><h1><span class=\"secnum\">6.2.7</span>#sec-abstract-closure The Abstract Closure Specification Type</h1>...</div><div id=\"excluded-sec-data-blocks\"><h1><span class=\"secnum\">6.2.8</span>#sec-data-blocks Data Blocks</h1>...</div><div id=\"excluded-sec-privateelement-specification-type\"><h1><span class=\"secnum\">6.2.9</span>#sec-privateelement-specification-type The PrivateElement Specification Type</h1>...</div><div id=\"excluded-sec-classfielddefinition-record-specification-type\"><h1><span class=\"secnum\">6.2.10</span>#sec-classfielddefinition-record-specification-type The ClassFieldDefinition Record Specification Type</h1>...</div><div id=\"excluded-sec-private-names\"><h1><span class=\"secnum\">6.2.11</span>#sec-private-names Private Names</h1>...</div><div id=\"excluded-sec-classstaticblockdefinition-record-specification-type\"><h1><span class=\"secnum\">6.2.12</span>#sec-classstaticblockdefinition-record-specification-type The ClassStaticBlockDefinition Record Specification Type</h1>...</div></emu-clause>\n"}, "sec-class-definitions": {"num": "15.7", "title": "#sec-class-definitions Class Definitions", "html": "<emu-clause id=\"sec-class-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions\">#sec-class-definitions</span> Class Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\" id=\"prod-ClassDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"r-8ix7mw\" id=\"prod-kd27yk51\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"eish3c1z\" constraints=\"+Default\" id=\"prod-bStNnwN_\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassExpression\" params=\"Yield, Await\" id=\"prod-ClassExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3vemrlhb\" id=\"prod-Vthx67sj\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassTail\" params=\"Yield, Await\" id=\"prod-ClassTail\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0tcpjpju\" id=\"prod-mIr25y7h\">\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassHeritage\" params=\"Yield, Await\" id=\"prod-ClassHeritage\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eyngn05c\">\n        <emu-t>extends</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassBody\" params=\"Yield, Await\" id=\"prod-ClassBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hi6rf-a8\" id=\"prod-YUQCWiaa\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElementList\" params=\"Yield, Await\" id=\"prod-ClassElementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"l7zmtagw\" id=\"prod-ADR6-dWZ\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ga1dtfdq\" id=\"prod-sKhHHXFQ\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" params=\"Yield, Await\" id=\"prod-ClassElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ke2_9p84\" id=\"prod-Qf4HAgqR\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"a0i06csv\" id=\"prod-0XtyXojL\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"guxzmt6t\" id=\"prod-RVH9JhqU\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"w56q4hpj\" id=\"prod-8cGH1X5O\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"2ui-f2qn\" id=\"prod-Z0w9dpDy\"><emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"sg2sawim\" id=\"prod-0Xskgzt4\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"FieldDefinition\" params=\"Yield, Await\" id=\"prod-FieldDefinition\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlc4azd3\" id=\"prod-qdC94hXo\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElementName\" params=\"Yield, Await\" id=\"prod-ClassElementName\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jbcjyldj\" id=\"prod-G9YdmiD5\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ie2-zc1c\" id=\"prod-BPUn8Lt3\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassStaticBlock\" id=\"prod-ClassStaticBlock\">\n    <emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hv6hopt7\" id=\"prod-qUwUqfkW\">\n        <emu-t>static</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassStaticBlockBody\" id=\"prod-ClassStaticBlockBody\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oh0jsomm\" id=\"prod-7H97-zXN\"><emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassStaticBlockStatementList\" id=\"prod-ClassStaticBlockStatementList\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7wzunuv6\" id=\"prod-0HOUlTAD\"><emu-nt params=\"~Yield, +Await, ~Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[~Yield, +Await, ~Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>A class definition is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-class-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.7.1</span>#sec-class-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-classelementkind\"><h1><span class=\"secnum\">15.7.2</span>#sec-static-semantics-classelementkind Static Semantics: ClassElementKind</h1>...</div><div id=\"excluded-sec-static-semantics-constructormethod\"><h1><span class=\"secnum\">15.7.3</span>#sec-static-semantics-constructormethod Static Semantics: ConstructorMethod</h1>...</div><div id=\"excluded-sec-static-semantics-isstatic\"><h1><span class=\"secnum\">15.7.4</span>#sec-static-semantics-isstatic Static Semantics: IsStatic</h1>...</div><div id=\"excluded-sec-static-semantics-nonconstructorelements\"><h1><span class=\"secnum\">15.7.5</span>#sec-static-semantics-nonconstructorelements Static Semantics: NonConstructorElements</h1>...</div><div id=\"excluded-sec-static-semantics-prototypepropertynamelist\"><h1><span class=\"secnum\">15.7.6</span>#sec-static-semantics-prototypepropertynamelist Static Semantics: PrototypePropertyNameList</h1>...</div><div id=\"excluded-sec-static-semantics-allprivateidentifiersvalid\"><h1><span class=\"secnum\">15.7.7</span>#sec-static-semantics-allprivateidentifiersvalid Static Semantics: AllPrivateIdentifiersValid</h1>...</div><div id=\"excluded-sec-static-semantics-privateboundidentifiers\"><h1><span class=\"secnum\">15.7.8</span>#sec-static-semantics-privateboundidentifiers Static Semantics: PrivateBoundIdentifiers</h1>...</div><div id=\"excluded-sec-static-semantics-containsarguments\"><h1><span class=\"secnum\">15.7.9</span>#sec-static-semantics-containsarguments Static Semantics: ContainsArguments</h1>...</div><div id=\"excluded-sec-static-semantics-containsawait\"><h1><span class=\"secnum\">15.7.10</span>#sec-static-semantics-containsawait Static Semantics: ContainsAwait</h1>...</div><div id=\"excluded-sec-static-semantics-computedpropertycontainsawait\"><h1><span class=\"secnum\">15.7.11</span>#sec-static-semantics-computedpropertycontainsawait Static Semantics: ComputedPropertyContainsAwait</h1>...</div><div id=\"excluded-sec-runtime-semantics-classfielddefinitionevaluation\"><h1><span class=\"secnum\">15.7.12</span>#sec-runtime-semantics-classfielddefinitionevaluation Runtime Semantics: ClassFieldDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-classstaticblockdefinitionevaluation\"><h1><span class=\"secnum\">15.7.13</span>#sec-runtime-semantics-classstaticblockdefinitionevaluation Runtime Semantics: ClassStaticBlockDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluateclassstaticblockbody\"><h1><span class=\"secnum\">15.7.14</span>#sec-runtime-semantics-evaluateclassstaticblockbody Runtime Semantics: EvaluateClassStaticBlockBody</h1>...</div><div id=\"excluded-sec-static-semantics-classelementevaluation\"><h1><span class=\"secnum\">15.7.15</span>#sec-static-semantics-classelementevaluation Runtime Semantics: ClassElementEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-classdefinitionevaluation\"><h1><span class=\"secnum\">15.7.16</span>#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindingclassdeclarationevaluation\"><h1><span class=\"secnum\">15.7.17</span>#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation</h1>...</div><div id=\"excluded-sec-class-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.7.18</span>#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-evaluatebody": {"num": "10.2.1.3", "title": "#sec-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody", "html": "<emu-clause id=\"sec-runtime-semantics-evaluatebody\" type=\"sdo\" aoid=\"EvaluateBody\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-evaluatebody\">#sec-runtime-semantics-evaluatebody</span> Runtime Semantics: EvaluateBody</h1>\n        <p>With parameters <var>functionObject</var> and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>).</p>\n        <emu-grammar><emu-production name=\"FunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xn8an8nx\" id=\"prod-xc-5PFkl\"><emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateFunctionBody\"><a href=\"#sec-runtime-semantics-evaluatefunctionbody\">EvaluateFunctionBody</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-ph5_rCcA\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateConciseBody\"><a href=\"#sec-runtime-semantics-evaluateconcisebody\">EvaluateConciseBody</a></emu-xref> of <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"GeneratorBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iqzbkm-h\" id=\"prod-dp9uKN5f\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateGeneratorBody\"><a href=\"#sec-runtime-semantics-evaluategeneratorbody\">EvaluateGeneratorBody</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncGeneratorBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iqzbkm-h\" id=\"prod-_F5bCEpP\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateAsyncGeneratorBody\"><a href=\"#sec-runtime-semantics-evaluateasyncgeneratorbody\">EvaluateAsyncGeneratorBody</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncFunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iqzbkm-h\" id=\"prod-V5mALOgb\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateAsyncFunctionBody\"><a href=\"#sec-runtime-semantics-evaluateasyncfunctionbody\">EvaluateAsyncFunctionBody</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod--uh40sBe\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"EvaluateAsyncConciseBody\"><a href=\"#sec-runtime-semantics-evaluateasyncconcisebody\">EvaluateAsyncConciseBody</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> with arguments <var>functionObject</var> and <var>argumentsList</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Initializer\">\n    <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_d0ijvnh\" id=\"prod-pu8sYeYA\">\n        <emu-t>=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argumentsList</var> is empty.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>functionObject</var>.[[ClassFieldInitializerName]] is not <emu-const>empty</emu-const>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>functionObject</var>.[[ClassFieldInitializerName]].</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Even though field initializers constitute a function boundary, calling <emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref> does not have any observable effect and so is omitted.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ClassStaticBlockBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oh0jsomm\" id=\"prod-X0MRkB7d\"><emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-grammar></emu-grammar>\n      </emu-clause>\n\n      "}, "sec-functions-and-classes": {"num": "A.4", "title": "#sec-functions-and-classes Functions and Classes", "html": "<emu-annex id=\"sec-functions-and-classes\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functions-and-classes\">#sec-functions-and-classes</span> Functions and Classes</h1>\n    <emu-production name=\"UniqueFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kat5sugn\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-X0L442RA\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"xs94btl2\" id=\"prod-eloVArBA\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f3rxyqw\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"wdsulm_w\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"yh9ahvuw\" id=\"prod-aTWifksv\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameterList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3qhu-4tu\" id=\"prod-TejDOk2p\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"mlncfkxh\" id=\"prod-7NFUmaIc\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionRestParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iw2hthb9\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xpmoewcq\" id=\"prod-t4IFgCs2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fal2s0ab\" id=\"prod-lEQdX6hk\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"_ww4ynxp\" constraints=\"+Default\" id=\"prod-eqpHaG0r\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"h6r9zk3c\" id=\"prod--zvLR38c\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gljyayfs\" id=\"prod-CvdRIvQG\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionStatementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ime6-pzo\" id=\"prod-jJULW0Hz\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c-igjs-g\" id=\"prod-AtXUMYu3\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ir-rfjfi\" id=\"prod-C8khN6EK\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\" id=\"prod-K4CbCiCx\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eofx7fcb\" id=\"prod-UOsd7muB\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, ~Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, ~Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3uvs-pa\" id=\"prod-c6cxJePv\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ExpressionBody\" params=\"In, Await\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ickgdpbs\"><emu-nt params=\"?In, ~Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production\n      <br>\n      <emu-production name=\"ArrowParameters\" params=\"Yield, Await\" a=\"parencover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"parencover\" id=\"prod-K4CbCiCx\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t1yas6ob\">\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"u1dc5ef3\" id=\"prod-YIoJOc1p\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"callcover\" id=\"prod-WTX_aban\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bpu3_ipt\" id=\"prod-Dfs5WPuP\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, +Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"bm-b5ose\" id=\"prod-Kq4Uu2cU\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncArrowBindingIdentifier\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yuozsg2r\" id=\"prod-cDxY5q2J\"><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"90e-xzcw\" id=\"prod-HT-vtkeW\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production\n      <br>\n      <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\" a=\"callcover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"callcover\" id=\"prod-WTX_aban\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs></emu-production>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"AsyncArrowHead\">\n    <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ydfl_ghb\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"MethodDefinition\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zqbkmnaz\" id=\"prod-BMcTBp4V\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"uivm4t30\" id=\"prod-SKJRU3Gy\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"l4rbqexd\" id=\"prod-JrqfvaKq\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"2nx0uygb\" id=\"prod-Cxt3DfG5\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"jjr3zjnj\" id=\"prod-SnKN_cew\">\n        <emu-t>get</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"lrypae2k\" id=\"prod-nWs7csn9\">\n        <emu-t>set</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertySetParameterList\">\n    <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"p0ls10ix\" id=\"prod-4-xtlU1r\"><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s6ntmoac\" id=\"prod-8GV2khgE\">\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"56abocni\" id=\"prod-oJNsRhfl\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"gcxlonl8\" constraints=\"+Default\" id=\"prod-bWfHg6Xe\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zsu4etlj\" id=\"prod-haubt72j\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorBody\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"quvqn30c\" id=\"prod-UaNDUTMe\"><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"YieldExpression\" params=\"In, Await\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"alznzlpx\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mrbi6v84\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bojlwy10\" id=\"prod-ceV74b-L\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vxevrvwx\" id=\"prod-cOKIJmRw\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"zdnckwse\" constraints=\"+Default\" id=\"prod-1L17zU6t\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yh0wbqjf\" id=\"prod-s18yr2Ij\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorBody\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zqmkrekv\" id=\"prod-47HC640n\"><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9rildsyw\" id=\"prod-iAuKx0s9\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"_vbcugdo\" constraints=\"+Default\" id=\"prod-TaHP58mu\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mviccgpw\" id=\"prod-LFCRNt3l\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tzooi3sy\" id=\"prod-80co-gZ6\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"j_tcfidx\" id=\"prod-WjFwGBMF\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AwaitExpression\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"wzxw5xwu\">\n        <emu-t>await</emu-t>\n        <emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"r-8ix7mw\" id=\"prod-kd27yk51\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"eish3c1z\" constraints=\"+Default\" id=\"prod-bStNnwN_\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3vemrlhb\" id=\"prod-Vthx67sj\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassTail\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0tcpjpju\" id=\"prod-mIr25y7h\">\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassHeritage\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eyngn05c\">\n        <emu-t>extends</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hi6rf-a8\" id=\"prod-YUQCWiaa\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"l7zmtagw\" id=\"prod-ADR6-dWZ\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ga1dtfdq\" id=\"prod-sKhHHXFQ\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ke2_9p84\" id=\"prod-Qf4HAgqR\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"a0i06csv\" id=\"prod-0XtyXojL\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"guxzmt6t\" id=\"prod-RVH9JhqU\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"w56q4hpj\" id=\"prod-8cGH1X5O\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"2ui-f2qn\" id=\"prod-Z0w9dpDy\"><emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"sg2sawim\" id=\"prod-0Xskgzt4\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"FieldDefinition\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlc4azd3\" id=\"prod-qdC94hXo\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElementName\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jbcjyldj\" id=\"prod-G9YdmiD5\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ie2-zc1c\" id=\"prod-BPUn8Lt3\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassStaticBlock\">\n    <emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hv6hopt7\" id=\"prod-qUwUqfkW\">\n        <emu-t>static</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassStaticBlockBody\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oh0jsomm\" id=\"prod-7H97-zXN\"><emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-prodref name=\"ClassStaticBlockBodyStatementList\"></emu-prodref>\n  </emu-annex>\n\n  "}, "sec-static-semantics-containsawait": {"num": "15.7.10", "title": "#sec-static-semantics-containsawait Static Semantics: ContainsAwait", "html": "<emu-clause id=\"sec-static-semantics-containsawait\" type=\"sdo\" aoid=\"ContainsAwait\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsawait\">#sec-static-semantics-containsawait</span> Static Semantics: ContainsAwait</h1>\n\n      <p>Every grammar production alternative in this specification which is not listed below implicitly has the following default definition of ContainsAwait:</p>\n      <emu-alg><ol><li>For each child node <var>child</var> of this <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, do<ol><li>If <var>child</var> is an instance of a nonterminal, then<ol><li>If <emu-xref aoid=\"ContainsAwait\"><a href=\"#sec-static-semantics-containsawait\">ContainsAwait</a></emu-xref> for <var>child</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"FunctionDeclaration\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-Ycz3xVtS\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"smus6qca\" id=\"prod-AawL8p0W\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g3mtfiqq\" id=\"prod-ztwoRtLB\">\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-fsf6XgDI\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"dsczygsq\" id=\"prod-JQm5ZW6h\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"32ghovyc\" id=\"prod-sr80xpFY\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-c5jIhY_3\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"xruu4gg0\" id=\"prod-5OwxPFLC\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nplor0n0\" id=\"prod-YEW4OvsH\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-nU7fLlyQ\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"agdmcdye\" id=\"prod-fXXLY-QW\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1_djgdhl\" id=\"prod-C-zgbpUW\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Static semantic rules that depend upon substructure generally do not look into function definitions.</p>\n      </div></emu-note>\n\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0uhgf3fw\" id=\"prod-0VLAcghC\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsAwait\"><a href=\"#sec-static-semantics-containsawait\">ContainsAwait</a></emu-xref> for <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return the result of <emu-xref aoid=\"ComputedPropertyContainsAwait\"><a href=\"#sec-static-semantics-computedpropertycontainsawait\">ComputedPropertyContainsAwait</a></emu-xref> for <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Static semantic rules that depend upon substructure generally do not look into class bodies except for <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>s.</p>\n      </div></emu-note>\n\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ieeod2mi\" id=\"prod-oOw5v5iZ\">\n        <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncArrowFunction\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dqxgopsb\" id=\"prod-EjJXPT65\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"auwv8gbh\" id=\"prod-aSctJKx5\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Static semantic rules that depend upon substructure containing <code>await</code> do not need to look into arrow functions.</p>\n      </div></emu-note>\n\n      <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"shlomml6\" id=\"prod-Iy8X177H\"><emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mhrux1r7\" id=\"prod-gkb7oRET\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cyt_lv_1\" id=\"prod-fWaB6IFr\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uatmda3j\" id=\"prod-jeQdaJwz\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-vardeclarednames": {"num": "8.1.6", "title": "#sec-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-vardeclarednames\" oldids=\"sec-statement-semantics-static-semantics-vardeclarednames,sec-block-static-semantics-vardeclarednames,sec-variable-statement-static-semantics-vardeclarednames,sec-if-statement-static-semantics-vardeclarednames,sec-do-while-statement-static-semantics-vardeclarednames,sec-while-statement-static-semantics-vardeclarednames,sec-for-statement-static-semantics-vardeclarednames,sec-for-in-and-for-of-statements-static-semantics-vardeclarednames,sec-with-statement-static-semantics-vardeclarednames,sec-switch-statement-static-semantics-vardeclarednames,sec-labelled-statements-static-semantics-vardeclarednames,sec-try-statement-static-semantics-vardeclarednames,sec-function-definitions-static-semantics-vardeclarednames,sec-arrow-function-definitions-static-semantics-vardeclarednames,sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames,sec-scripts-static-semantics-vardeclarednames,sec-module-semantics-static-semantics-vardeclarednames\" type=\"sdo\" aoid=\"VarDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-vardeclarednames\"></span><span id=\"sec-scripts-static-semantics-vardeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-try-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-with-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-for-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-do-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-if-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-variable-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-block-static-semantics-vardeclarednames\"></span><span id=\"sec-statement-semantics-static-semantics-vardeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</span> Static Semantics: VarDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-TvRo0Jzz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-x3WiVh1X\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-cXTIOEn1\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-PhLm_cqX\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-bMjWoX52\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-OPyZZ0FU\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-6wmxzhRC\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-4f3fXSme\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ikslLJyV\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-mb72lTih\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"m0ehvb8m\" id=\"prod-_o07UyGN\">\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-5Ab4YMrd\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-Jj9iNkQT\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-MQNHAeo7\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-6MiGg7LY\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-22bMsY8a\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-iNfrCk_F\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-N2GkbzwH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-polenv5I\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-cQmWs6F4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-6rXrz7RR\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-LH0otfP0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-UE8msfiB\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-Xl42xW5D\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-eiN5tOgj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-dkeW5WMH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-dXd3oD1j\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-kf6BzwpI\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-lB_U5kUv\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-DTgBd2wQ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-e2BPI-N_\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>names</var>.</li><li>Return the result of appending to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-_zisH9m7\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-Gdv5Uzyo\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ocDhl-eB\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-xypmC2Rc\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-TKnUh23n\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-K6wLfAiN\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-naQihl7z\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-F1kslF5t\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-1jr14zqX\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-ic6_wi6x\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-Fovz-BpD\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassStaticBlockStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-JPGgU11H\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassStaticBlockStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-ZZJ4np60\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-kKbHUs1e\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-IDrLWHWU\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-_GPKA3Cb\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-YneO94W1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-WMKjW5iz\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-lGybrnks\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-5uRXjJj7\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-classstaticblockdefinitionevaluation": {"num": "15.7.13", "title": "#sec-runtime-semantics-classstaticblockdefinitionevaluation Runtime Semantics: ClassStaticBlockDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classstaticblockdefinitionevaluation\" type=\"sdo\" aoid=\"ClassStaticBlockDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classstaticblockdefinitionevaluation\">#sec-runtime-semantics-classstaticblockdefinitionevaluation</span> Runtime Semantics: ClassStaticBlockDefinitionEvaluation</h1>\n      <p>With parameter <var>homeObject</var>.</p>\n      <emu-grammar><emu-production name=\"ClassStaticBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hv6hopt7\" id=\"prod-sy-617ri\">\n        <emu-t>static</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lex</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the empty sequence of Unicode code points.</li><li>Let <var>bodyFunction</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, &#171; &#187;, <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>lex</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>bodyFunction</var>, <var>homeObject</var>).</li><li>Return the <emu-xref href=\"#sec-classstaticblockdefinition-record-specification-type\"><a href=\"#sec-classstaticblockdefinition-record-specification-type\">ClassStaticBlockDefinition Record</a></emu-xref> { [[BodyFunction]]: <var>bodyFunction</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The function <var>bodyFunction</var> is never directly accessible to ECMAScript code.</div></emu-note>\n    </emu-clause>\n\n    "}, "sec-initializeinstanceelements": {"num": "7.3.32", "title": "#sec-initializeinstanceelements InitializeInstanceElements ( O, constructor )", "html": "<emu-clause id=\"sec-initializeinstanceelements\" aoid=\"InitializeInstanceElements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializeinstanceelements\">#sec-initializeinstanceelements</span> InitializeInstanceElements ( <var>O</var>, <var>constructor</var> )</h1>\n      <p>The abstract operation InitializeInstanceElements takes arguments <var>O</var> (an Object) and <var>constructor</var> (an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>methods</var> be the value of <var>constructor</var>.[[PrivateMethods]].</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>methods</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>method</var>, <var>O</var>).</li></ol></li><li>Let <var>fields</var> be the value of <var>constructor</var>.[[Fields]].</li><li>For each element <var>fieldRecord</var> of <var>fields</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>O</var>, <var>fieldRecord</var>).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-containsundefinedcontinuetarget": {"num": "8.2.3", "title": "#sec-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-static-semantics-containsundefinedcontinuetarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget,sec-block-static-semantics-containsundefinedcontinuetarget,sec-if-statement-static-semantics-containsundefinedcontinuetarget,sec-do-while-statement-static-semantics-containsundefinedcontinuetarget,sec-while-statement-static-semantics-containsundefinedcontinuetarget,sec-for-statement-static-semantics-containsundefinedcontinuetarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget,sec-continue-statement-static-semantics-containsundefinedcontinuetarget,sec-with-statement-static-semantics-containsundefinedcontinuetarget,sec-switch-statement-static-semantics-containsundefinedcontinuetarget,sec-labelled-statements-static-semantics-containsundefinedcontinuetarget,sec-try-statement-static-semantics-containsundefinedcontinuetarget,sec-function-definitions-static-semantics-containsundefinedcontinuetarget,sec-module-semantics-static-semantics-containsundefinedcontinuetarget\" type=\"sdo\" aoid=\"ContainsUndefinedContinueTarget\"><span id=\"sec-module-semantics-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-function-definitions-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-try-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-labelled-statements-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-switch-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-with-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-continue-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-for-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-while-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-do-while-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-if-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-block-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-HhlDWDz1\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-NBGwhRuE\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-E6M7T9Em\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-V2tQVOUI\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-jJUZqLJS\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-BNxhQmvf\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-B3-Yz0aF\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-eptReca1\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-QrxFmsVC\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kmxl4yum\" id=\"prod-PptGj0zd\"><emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>newIterationSet</var> be a copy of <var>iterationSet</var> with all the elements of <var>labelSet</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> with arguments <var>newIterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-Vrq9L4TL\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-MYTRO2yV\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-idT2m0fR\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-1k-PvIQ6\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-nqE7jDen\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-sdOZ0OVe\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-38R1spHk\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-GQ9tF3ug\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-ilROtw6r\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-RXKTOvxD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-mKAcS051\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-MPaED8xy\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-SLsBgk8L\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-G_08fu0g\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-xuMzWdW7\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-xVs7Y4Vv\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-Ii0_W2zX\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6qppgxyk\" id=\"prod-P3ParQAP\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"wh7qddgu\" id=\"prod-ngwxJt1P\">\n        <emu-t>continue</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>iterationSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-qti0YV4g\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-yGASkGus\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-wESl6-va\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-L1SF9WLb\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-Mf-FlzJR\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-YLBmIA_U\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ycWJ_ozd\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-8au0KFQe\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with arguments <var>iterationSet</var> and <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-I9dzHyBf\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-bHqvfllk\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-MPDlN7RI\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-fYVcY74b\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-WfIkG4rU\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-zb1__ND8\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassStaticBlockStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-7jAHsc96\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-9GocAvXy\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-GeitVMt4\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-JQIpAjs-\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-classelementkind": {"num": "15.7.2", "title": "#sec-static-semantics-classelementkind Static Semantics: ClassElementKind", "html": "<emu-clause id=\"sec-static-semantics-classelementkind\" type=\"sdo\" aoid=\"ClassElementKind\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-classelementkind\">#sec-static-semantics-classelementkind</span> Static Semantics: ClassElementKind</h1>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\" id=\"prod-z4kY36XR\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>\"constructor\"</emu-val>, return <emu-const>ConstructorMethod</emu-const>.</li><li>Return <emu-const>NonConstructorMethod</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-ljgtrpo\" id=\"prod-WYqnrGO2\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"bwbyf1-5\" id=\"prod-gbiOT0dB\">\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"cpyv1xvc\" id=\"prod-aKP7bsri\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>NonConstructorMethod</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2ui-f2qn\" id=\"prod--zCXluqv\"><emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>NonConstructorMethod</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-U_NLPgRJ\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-containsduplicatelabels": {"num": "8.2.1", "title": "#sec-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-static-semantics-containsduplicatelabels\" oldids=\"sec-statement-semantics-static-semantics-containsduplicatelabels,sec-block-static-semantics-containsduplicatelabels,sec-if-statement-static-semantics-containsduplicatelabels,sec-do-while-statement-static-semantics-containsduplicatelabels,sec-while-statement-static-semantics-containsduplicatelabels,sec-for-statement-static-semantics-containsduplicatelabels,sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels,sec-with-statement-static-semantics-containsduplicatelabels,sec-switch-statement-static-semantics-containsduplicatelabels,sec-labelled-statements-static-semantics-containsduplicatelabels,sec-try-statement-static-semantics-containsduplicatelabels,sec-function-definitions-static-semantics-containsduplicatelabels,sec-module-semantics-static-semantics-containsduplicatelabels\" type=\"sdo\" aoid=\"ContainsDuplicateLabels\"><span id=\"sec-module-semantics-static-semantics-containsduplicatelabels\"></span><span id=\"sec-function-definitions-static-semantics-containsduplicatelabels\"></span><span id=\"sec-try-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-labelled-statements-static-semantics-containsduplicatelabels\"></span><span id=\"sec-switch-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-with-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"></span><span id=\"sec-for-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-while-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-do-while-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-if-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-block-static-semantics-containsduplicatelabels\"></span><span id=\"sec-statement-semantics-static-semantics-containsduplicatelabels\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-5segouA8\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-X3W5RktU\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-tPl3NUyn\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-5amcoTln\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-SRoeq51F\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-sjee5Pog\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-iv3GJbNA\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-VdiHdMbL\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-SpvJf5dZ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-OH037R2P\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-IG220ePF\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-iIi7e4Mv\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicate</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicate</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-M7d89bkQ\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-CSwsyonC\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-UWs53aWN\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-GgLrXaaO\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-di1-cm7_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-zOnkGPoB\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-rNKuYq6q\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-jKYdRg__\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-zBPUdTbl\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-zoCqTANq\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-zqf8dZti\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-dRwtb2-L\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-kCZrLuMF\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-1mQl-EgZ\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-SKvXy5l6\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-92qu0ILT\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-OMSfPp_0\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-8Uz0YNaN\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-UcaBQzki\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-yJHneCFO\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-YbPvJc_D\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-__iQJPEb\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-UiQoMdIo\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>If <var>label</var> is an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-j-zK1vJK\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-iFqlj7Lz\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-DkNjzLGB\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-Aa8IOm4z\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-K0PcnMLw\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-cn79vCHf\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassStaticBlockStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-_uXGEqKw\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-FlDPQVjo\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-hjcOowKc\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-OcbYq9se\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-lexicallyscopeddeclarations": {"num": "8.1.5", "title": "#sec-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-lexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-lexicallyscopeddeclarations,sec-switch-statement-static-semantics-lexicallyscopeddeclarations,sec-labelled-statements-static-semantics-lexicallyscopeddeclarations,sec-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations,sec-scripts-static-semantics-lexicallyscopeddeclarations,sec-module-semantics-static-semantics-lexicallyscopeddeclarations,sec-exports-static-semantics-lexicallyscopeddeclarations\" type=\"sdo\" aoid=\"LexicallyScopedDeclarations\"><span id=\"sec-exports-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-module-semantics-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-block-static-semantics-lexicallyscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallyscopeddeclarations\">#sec-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-dqBS0eQw\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-MlufDCPG\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-IYBZJ2CF\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-bhogjJ1W\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-am_Z4H66\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>declarations</var>.</li><li>Return the result of appending to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-LxvbRJKF\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-tORmzQQv\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-84xBBiJA\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-V7zVpmtw\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-3Vc5meav\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-nL_6JlM9\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-gtaAB-x7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-aKFk9Ijn\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassStaticBlockStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-8GIOVjs9\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassStaticBlockStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-kKBABX1R\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-4B0l6Nwq\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-0qrVz5hX\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-1WkoNRM_\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-eWnfpwM7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-rZF3AogZ\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-zqmuSkfM\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-IxEr0QE9\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod-DEMJzdJ7\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"bg3oaw2m\" id=\"prod-cMreMYU5\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-xsgJyOoQ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-cRTDqnfl\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\" id=\"prod-4yMGuqEs\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\" id=\"prod-XTfiw-G1\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-isstatic": {"num": "15.7.4", "title": "#sec-static-semantics-isstatic Static Semantics: IsStatic", "html": "<emu-clause id=\"sec-static-semantics-isstatic\" type=\"sdo\" aoid=\"IsStatic\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-isstatic\">#sec-static-semantics-isstatic</span> Static Semantics: IsStatic</h1>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\" id=\"prod-CtxLpivn\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-ljgtrpo\" id=\"prod-lR6jUbAy\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bwbyf1-5\" id=\"prod-gXtZ0OpF\">\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cpyv1xvc\" id=\"prod-wyUVxCrb\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2ui-f2qn\" id=\"prod-1JW7WXBn\"><emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-LP0OJ3qJ\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-private-names": {"num": "6.2.11", "title": "#sec-private-names Private Names", "html": "<emu-clause id=\"sec-private-names\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-private-names\">#sec-private-names</span> Private Names</h1>\n      <p>The <dfn>Private Name</dfn> specification type is used to describe a globally unique value (one which differs from any other Private Name, even if they are otherwise indistinguishable) which represents the key of a private class element (field, method, or accessor). Each Private Name has an associated immutable [[Description]] which is a String value. A Private Name may be installed on any ECMAScript object with <emu-xref aoid=\"PrivateFieldAdd\"><a href=\"#sec-privatefieldadd\">PrivateFieldAdd</a></emu-xref> or <emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>, and then read or written using <emu-xref aoid=\"PrivateGet\"><a href=\"#sec-privateget\">PrivateGet</a></emu-xref> and <emu-xref aoid=\"PrivateSet\"><a href=\"#sec-privateset\">PrivateSet</a></emu-xref>.</p>\n    </emu-clause>\n\n    "}, "sec-static-semantics-varscopeddeclarations": {"num": "8.1.7", "title": "#sec-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-varscopeddeclarations\" oldids=\"sec-statement-semantics-static-semantics-varscopeddeclarations,sec-block-static-semantics-varscopeddeclarations,sec-variable-statement-static-semantics-varscopeddeclarations,sec-if-statement-static-semantics-varscopeddeclarations,sec-do-while-statement-static-semantics-varscopeddeclarations,sec-while-statement-static-semantics-varscopeddeclarations,sec-for-statement-static-semantics-varscopeddeclarations,sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations,sec-with-statement-static-semantics-varscopeddeclarations,sec-switch-statement-static-semantics-varscopeddeclarations,sec-labelled-statements-static-semantics-varscopeddeclarations,sec-try-statement-static-semantics-varscopeddeclarations,sec-function-definitions-static-semantics-varscopeddeclarations,sec-arrow-function-definitions-static-semantics-varscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations,sec-scripts-static-semantics-varscopeddeclarations,sec-module-semantics-static-semantics-varscopeddeclarations\" type=\"sdo\" aoid=\"VarScopedDeclarations\"><span id=\"sec-module-semantics-static-semantics-varscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-varscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-try-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-with-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-do-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-if-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-variable-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-block-static-semantics-varscopeddeclarations\"></span><span id=\"sec-statement-semantics-static-semantics-varscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</span> Static Semantics: VarScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-CXBIcQtz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-4cf8z78V\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-UIiAeivR\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-R2NCFAfM\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-8C3zNXp6\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-QgvbQ6qN\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-nkERSk1r\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--ycd0kFi\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-r8z3UV58\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-zHpAsUUQ\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n3piepmh\" id=\"prod-r4VwMPwM\"><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oavweevb\" id=\"prod-HsuXutdb\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> to <var>declarations</var>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-B7KHfByo\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-yyIeKAQ3\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-QkEPe1CC\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-jrq4eHFJ\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-5lKKTAkN\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-13ohOiCm\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-eqKiNSk1\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-KgxDtGf4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-AWnFzjE8\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-5TY9-yea\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-t9Ps-Sf3\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-IEEeV8La\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-WOgH08rb\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-SyVO6l8T\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-o2HaUKnD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-kZcYMT8d\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-otI6GMSS\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-FjNXiCI7\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-BX82yRxg\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-aW8QiumN\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>declarations</var>.</li><li>Return the result of appending to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-nuKGUlOU\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-mzP2If-y\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ZPHZRUV6\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-i-A4iWeY\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-ntkJlgei\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-RhYCwWQZ\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-0GInHInm\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-pi8GJ951\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-H8Sf_rsN\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-vvqmH-2l\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-x8eD4P1T\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassStaticBlockStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-p7Y_jFE0\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassStaticBlockStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-o66wZ98a\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-UWG_9qGM\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-VllrABp8\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-MCeJZE_U\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-g_wYfia1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-oVpqQZka\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-TBDbISuB\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-f75VYPkN\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-lexicallydeclarednames": {"num": "8.1.4", "title": "#sec-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-lexicallydeclarednames\" oldids=\"sec-block-static-semantics-lexicallydeclarednames,sec-switch-statement-static-semantics-lexicallydeclarednames,sec-labelled-statements-static-semantics-lexicallydeclarednames,sec-function-definitions-static-semantics-lexicallydeclarednames,sec-arrow-function-definitions-static-semantics-lexicallydeclarednames,sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames,sec-scripts-static-semantics-lexicallydeclarednames,sec-module-semantics-static-semantics-lexicallydeclarednames\" type=\"sdo\" aoid=\"LexicallyDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-scripts-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-block-static-semantics-lexicallydeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallydeclarednames\">#sec-static-semantics-lexicallydeclarednames</span> Static Semantics: LexicallyDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-mPEvRR9d\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ZFtxhsq0\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-Rrf-OST4\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-9AEMspNg\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--_BgAjEq\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-mSnfTK7z\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>names</var>.</li><li>Return the result of appending to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-7Gkp_Ikd\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-LyDmmUT5\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-JWPhP_ev\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-BptUBlCG\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-FwgSl19M\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-_jhHTL9Z\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-8YrmfaA1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-yRWpcHmG\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassStaticBlockStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod--e9cHzAJ\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassStaticBlockStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-o7NmaBd_\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-2xZloP4O\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-tdMR5_9c\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-m6bh3GpA\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The LexicallyDeclaredNames of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> includes the names of all of its imported bindings.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-t-OtLQL7\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-vXiSx9wh\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-v-PqD2SJ\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"15hryu6r\" id=\"prod-XYalkd2A\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, function declarations are treated like lexical declarations rather than like var declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-classstaticblockdefinition-record-specification-type": {"num": "6.2.12", "title": "#sec-classstaticblockdefinition-record-specification-type The ClassStaticBlockDefinition Record Specification Type", "html": "<emu-clause id=\"sec-classstaticblockdefinition-record-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-classstaticblockdefinition-record-specification-type\">#sec-classstaticblockdefinition-record-specification-type</span> The ClassStaticBlockDefinition Record Specification Type</h1>\n      <p>A <dfn>ClassStaticBlockDefinition Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> value used to encapsulate the executable code for a class static initialization block.</p>\n      <p>ClassStaticBlockDefinition Records have the fields listed in <emu-xref href=\"#table-classstaticblockdefinition-record-fields\"><a href=\"#table-classstaticblockdefinition-record-fields\" class=\"excluded-xref\" excluded-id=\"table-classstaticblockdefinition-record-fields\">#table-classstaticblockdefinition-record-fields</a></emu-xref>.</p>\n      <emu-table id=\"table-classstaticblockdefinition-record-fields\" caption=\"ClassStaticBlockDefinition Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-classstaticblockdefinition-record-fields\">#table-classstaticblockdefinition-record-fields</span>: <emu-xref href=\"#sec-classstaticblockdefinition-record-specification-type\"><a href=\"#sec-classstaticblockdefinition-record-specification-type\">ClassStaticBlockDefinition Record</a></emu-xref> Fields</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[BodyFunction]]\n            </td>\n            <td>\n              An <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.\n            </td>\n            <td>\n              The <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> to be called during static initialization of a class.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n  "}, "sec-evaluatestaticblock": {"num": "7.3.33", "title": "#sec-evaluatestaticblock EvaluateStaticBlock ( receiver, blockRecord )", "html": "<emu-clause id=\"sec-evaluatestaticblock\" aoid=\"EvaluateStaticBlock\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatestaticblock\">#sec-evaluatestaticblock</span> EvaluateStaticBlock ( <var>receiver</var>, <var>blockRecord</var> )</h1>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>receiver</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>blockRecord</var> is a <emu-xref href=\"#sec-classstaticblockdefinition-record-specification-type\"><a href=\"#sec-classstaticblockdefinition-record-specification-type\">ClassStaticBlockDefinition Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>blockRecord</var>.[[BodyFunction]], <var>receiver</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-break-statement-static-semantics-early-errors": {"num": "14.9.1", "title": "#sec-break-statement-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-break-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-break-statement-static-semantics-early-errors\">#sec-break-statement-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlip5zkt\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> is not nested, directly or indirectly (but not crossing function or <code>static</code> initialization block boundaries), within an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> or a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-operations-on-objects": {"num": "7.3", "title": "#sec-operations-on-objects Operations on Objects", "html": "<emu-clause id=\"sec-operations-on-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-operations-on-objects\">#sec-operations-on-objects</span> Operations on Objects</h1>\n\n    <div id=\"excluded-sec-makebasicobject\"><h1><span class=\"secnum\">7.3.1</span>#sec-makebasicobject MakeBasicObject ( internalSlotsList )</h1>...</div><div id=\"excluded-sec-get-o-p\"><h1><span class=\"secnum\">7.3.2</span>#sec-get-o-p Get ( O, P )</h1>...</div><div id=\"excluded-sec-getv\"><h1><span class=\"secnum\">7.3.3</span>#sec-getv GetV ( V, P )</h1>...</div><div id=\"excluded-sec-set-o-p-v-throw\"><h1><span class=\"secnum\">7.3.4</span>#sec-set-o-p-v-throw Set ( O, P, V, Throw )</h1>...</div><div id=\"excluded-sec-createdataproperty\"><h1><span class=\"secnum\">7.3.5</span>#sec-createdataproperty CreateDataProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createmethodproperty\"><h1><span class=\"secnum\">7.3.6</span>#sec-createmethodproperty CreateMethodProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createdatapropertyorthrow\"><h1><span class=\"secnum\">7.3.7</span>#sec-createdatapropertyorthrow CreateDataPropertyOrThrow ( O, P, V )</h1>...</div><div id=\"excluded-sec-definepropertyorthrow\"><h1><span class=\"secnum\">7.3.8</span>#sec-definepropertyorthrow DefinePropertyOrThrow ( O, P, desc )</h1>...</div><div id=\"excluded-sec-deletepropertyorthrow\"><h1><span class=\"secnum\">7.3.9</span>#sec-deletepropertyorthrow DeletePropertyOrThrow ( O, P )</h1>...</div><div id=\"excluded-sec-getmethod\"><h1><span class=\"secnum\">7.3.10</span>#sec-getmethod GetMethod ( V, P )</h1>...</div><div id=\"excluded-sec-hasproperty\"><h1><span class=\"secnum\">7.3.11</span>#sec-hasproperty HasProperty ( O, P )</h1>...</div><div id=\"excluded-sec-hasownproperty\"><h1><span class=\"secnum\">7.3.12</span>#sec-hasownproperty HasOwnProperty ( O, P )</h1>...</div><div id=\"excluded-sec-call\"><h1><span class=\"secnum\">7.3.13</span>#sec-call Call ( F, V [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-construct\"><h1><span class=\"secnum\">7.3.14</span>#sec-construct Construct ( F [ , argumentsList [ , newTarget ] ] )</h1>...</div><div id=\"excluded-sec-setintegritylevel\"><h1><span class=\"secnum\">7.3.15</span>#sec-setintegritylevel SetIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-testintegritylevel\"><h1><span class=\"secnum\">7.3.16</span>#sec-testintegritylevel TestIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-createarrayfromlist\"><h1><span class=\"secnum\">7.3.17</span>#sec-createarrayfromlist CreateArrayFromList ( elements )</h1>...</div><div id=\"excluded-sec-lengthofarraylike\"><h1><span class=\"secnum\">7.3.18</span>#sec-lengthofarraylike LengthOfArrayLike ( obj )</h1>...</div><div id=\"excluded-sec-createlistfromarraylike\"><h1><span class=\"secnum\">7.3.19</span>#sec-createlistfromarraylike CreateListFromArrayLike ( obj [ , elementTypes ] )</h1>...</div><div id=\"excluded-sec-invoke\"><h1><span class=\"secnum\">7.3.20</span>#sec-invoke Invoke ( V, P [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-ordinaryhasinstance\"><h1><span class=\"secnum\">7.3.21</span>#sec-ordinaryhasinstance OrdinaryHasInstance ( C, O )</h1>...</div><div id=\"excluded-sec-speciesconstructor\"><h1><span class=\"secnum\">7.3.22</span>#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )</h1>...</div><div id=\"excluded-sec-enumerableownpropertynames\"><h1><span class=\"secnum\">7.3.23</span>#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )</h1>...</div><div id=\"excluded-sec-getfunctionrealm\"><h1><span class=\"secnum\">7.3.24</span>#sec-getfunctionrealm GetFunctionRealm ( obj )</h1>...</div><div id=\"excluded-sec-copydataproperties\"><h1><span class=\"secnum\">7.3.25</span>#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )</h1>...</div><div id=\"excluded-sec-privateelementfind\"><h1><span class=\"secnum\">7.3.26</span>#sec-privateelementfind PrivateElementFind ( P, O )</h1>...</div><div id=\"excluded-sec-privatefieldadd\"><h1><span class=\"secnum\">7.3.27</span>#sec-privatefieldadd PrivateFieldAdd ( P, O, value )</h1>...</div><div id=\"excluded-sec-privatemethodoraccessoradd\"><h1><span class=\"secnum\">7.3.28</span>#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( method, O )</h1>...</div><div id=\"excluded-sec-privateget\"><h1><span class=\"secnum\">7.3.29</span>#sec-privateget PrivateGet ( P, O )</h1>...</div><div id=\"excluded-sec-privateset\"><h1><span class=\"secnum\">7.3.30</span>#sec-privateset PrivateSet ( P, O, value )</h1>...</div><div id=\"excluded-sec-definefield\"><h1><span class=\"secnum\">7.3.31</span>#sec-definefield DefineField ( receiver, fieldRecord )</h1>...</div><div id=\"excluded-sec-initializeinstanceelements\"><h1><span class=\"secnum\">7.3.32</span>#sec-initializeinstanceelements InitializeInstanceElements ( O, constructor )</h1>...</div><div id=\"excluded-sec-evaluatestaticblock\"><h1><span class=\"secnum\">7.3.33</span>#sec-evaluatestaticblock EvaluateStaticBlock ( receiver, blockRecord )</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "15.7.16", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" type=\"sdo\" aoid=\"ClassDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For ease of specification, private methods and accessors are included alongside private fields in the [[PrivateElements]] slot of class instances. However, any given object has either all or none of the private methods and accessors defined by a given class. This feature has been designed so that implementations may choose to implement private methods and accessors using a strategy which does not require tracking each method or accessor individually.</p>\n        <p>For example, an implementation could directly associate instance private methods with their corresponding <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> and track, for each object, which class constructors have run with that object as their <code>this</code> value. Looking up an instance private method on an object then consists of checking that the class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> which defines the method has been used to initialize the object, then returning the method associated with the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>.</p>\n        <p>This differs from private fields: because field initializers can throw during class instantiation, an individual object may have some proper subset of the private fields of a given class, and so private fields must in general be tracked individually.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uopqpdqx\" id=\"prod-AcPtObVs\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>outerPrivateEnvironment</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>classPrivateEnvironment</var> be <emu-xref aoid=\"NewPrivateEnvironment\"><a href=\"#sec-newprivateenvironment\">NewPrivateEnvironment</a></emu-xref>(<var>outerPrivateEnvironment</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>For each String <var>dn</var> of the <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>, do<ol><li>If <var>classPrivateEnvironment</var>.[[Names]] contains a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>dn</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is only possible for getter/setter pairs.</li></ol></li><li>Else,<ol><li>Let <var>name</var> be a new <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] value is <var>dn</var>.</li><li>Append <var>name</var> to <var>classPrivateEnvironment</var>.[[Names]].</li></ol></li></ol></li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>NOTE: The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment is <var>outerPrivateEnvironment</var> when evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>classPrivateEnvironment</var>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-default-constructor-functions\" title=\"\"><a href=\"#sec-default-constructor-functions\">Default Constructor Functions</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, 0, <var>className</var>, &#171; [[ConstructorKind]], [[SourceText]] &#187;, <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>, <var>constructorParent</var>).</li></ol></li><li>Else,<ol><li>Let <var>constructorInfo</var> be ! <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform !&#160;<emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>elements</var> be <emu-xref aoid=\"NonConstructorElements\"><a href=\"#sec-static-semantics-nonconstructorelements\">NonConstructorElements</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Let <var>instancePrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticPrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>instanceFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticElements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>e</var> of <var>elements</var>, do<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>element</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>element</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>element</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>element</var>).</li></ol></li><li>Set <var>element</var> to <var>element</var>.[[Value]].</li><li>If <var>element</var> is a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>element</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, let <var>container</var> be <var>instancePrivateMethods</var>.</li><li>Else, let <var>container</var> be <var>staticPrivateMethods</var>.</li><li>If <var>container</var> contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>element</var>.[[Key]], then<ol><li>Let <var>existing</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>element</var>.[[Kind]] and <var>existing</var>.[[Kind]] are both <emu-const>accessor</emu-const>.</li><li>If <var>element</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>element</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>existing</var>.[[Get]], [[Set]]: <var>element</var>.[[Set]] }.</li></ol></li><li>Else,<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>element</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>element</var>.[[Get]], [[Set]]: <var>existing</var>.[[Set]] }.</li></ol></li><li>Replace <var>existing</var> in <var>container</var> with <var>combined</var>.</li></ol></li><li>Else,<ol><li>Append <var>element</var> to <var>container</var>.</li></ol></li></ol></li><li>Else if <var>element</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, append <var>element</var> to <var>instanceFields</var>.</li><li>Else, append <var>element</var> to <var>staticElements</var>.</li></ol></li><li>Else if <var>element</var> is a <emu-xref href=\"#sec-classstaticblockdefinition-record-specification-type\"><a href=\"#sec-classstaticblockdefinition-record-specification-type\">ClassStaticBlockDefinition Record</a></emu-xref>, then<ol><li>Append <var>element</var> to <var>staticElements</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Set <var>F</var>.[[PrivateMethods]] to <var>instancePrivateMethods</var>.</li><li>Set <var>F</var>.[[Fields]] to <var>instanceFields</var>.</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>staticPrivateMethods</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>method</var>, <var>F</var>).</li></ol></li><li>For each element <var>elementRecord</var> of <var>staticElements</var>, do<ol><li>If <var>elementRecord</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>F</var>, <var>elementRecord</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>elementRecord</var> is a <emu-xref href=\"#sec-classstaticblockdefinition-record-specification-type\"><a href=\"#sec-classstaticblockdefinition-record-specification-type\">ClassStaticBlockDefinition Record</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvaluateStaticBlock\"><a href=\"#sec-evaluatestaticblock\">EvaluateStaticBlock</a></emu-xref>(<var>F</var>, <var>elementRecord</var>).</li></ol></li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>result</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-default-constructor-functions\"><h1><span class=\"secnum\">15.7.16.1</span>#sec-default-constructor-functions Default Constructor Functions</h1>...</div></emu-clause>\n\n    "}, "sec-static-semantics-computedpropertycontainsawait": {"num": "15.7.11", "title": "#sec-static-semantics-computedpropertycontainsawait Static Semantics: ComputedPropertyContainsAwait", "html": "<emu-clause id=\"sec-static-semantics-computedpropertycontainsawait\" type=\"sdo\" aoid=\"ComputedPropertyContainsAwait\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-computedpropertycontainsawait\">#sec-static-semantics-computedpropertycontainsawait</span> Static Semantics: ComputedPropertyContainsAwait</h1>\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\" id=\"prod-e0jsc0gD\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"PropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5x4jbee2\" id=\"prod-SYQf65IZ\"><emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"PropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nimmmso5\" id=\"prod-d_f-XfRT\"><emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ContainsAwait\"><a href=\"#sec-static-semantics-containsawait\">ContainsAwait</a></emu-xref> for <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-zhHPk5Uw\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"s7vk7pda\" id=\"prod-Led9UUwd\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"lbu40xzc\" id=\"prod-SMgyLZoi\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContainsAwait\"><a href=\"#sec-static-semantics-computedpropertycontainsawait\">ComputedPropertyContainsAwait</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-YZFRBefc\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContainsAwait\"><a href=\"#sec-static-semantics-computedpropertycontainsawait\">ComputedPropertyContainsAwait</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-AJc3nj4-\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContainsAwait\"><a href=\"#sec-static-semantics-computedpropertycontainsawait\">ComputedPropertyContainsAwait</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"msulavvt\" id=\"prod-lWdMduad\">\n        <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ComputedPropertyContainsAwait\"><a href=\"#sec-static-semantics-computedpropertycontainsawait\">ComputedPropertyContainsAwait</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return the result of <emu-xref aoid=\"ComputedPropertyContainsAwait\"><a href=\"#sec-static-semantics-computedpropertycontainsawait\">ComputedPropertyContainsAwait</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2ui-f2qn\" id=\"prod-YyqufSxW\"><emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-VbAHE-xR\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-0hGxpMrG\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContainsAwait\"><a href=\"#sec-static-semantics-computedpropertycontainsawait\">ComputedPropertyContainsAwait</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-BHiyU1ct\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContainsAwait\"><a href=\"#sec-static-semantics-computedpropertycontainsawait\">ComputedPropertyContainsAwait</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-containsundefinedbreaktarget": {"num": "8.2.2", "title": "#sec-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-static-semantics-containsundefinedbreaktarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget,sec-block-static-semantics-containsundefinedbreaktarget,sec-if-statement-static-semantics-containsundefinedbreaktarget,sec-do-while-statement-static-semantics-containsundefinedbreaktarget,sec-while-statement-static-semantics-containsundefinedbreaktarget,sec-for-statement-static-semantics-containsundefinedbreaktarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget,sec-break-statement-static-semantics-containsundefinedbreaktarget,sec-with-statement-static-semantics-containsundefinedbreaktarget,sec-switch-statement-static-semantics-containsundefinedbreaktarget,sec-labelled-statements-static-semantics-containsundefinedbreaktarget,sec-try-statement-static-semantics-containsundefinedbreaktarget,sec-function-definitions-static-semantics-containsundefinedbreaktarget,sec-module-semantics-static-semantics-containsundefinedbreaktarget\" type=\"sdo\" aoid=\"ContainsUndefinedBreakTarget\"><span id=\"sec-module-semantics-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-function-definitions-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-try-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-labelled-statements-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-switch-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-with-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-break-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-for-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-while-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-do-while-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-if-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-block-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-fZ1-o-5P\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-T0wQwLQ_\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-kUTRcwOP\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-LpKI1NOa\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-s5sTXkkT\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-CeDAPMUu\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-81RguExk\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-YsZID3li\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-ndTQ-Fse\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-v3tH_xWo\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-OZMT2LO1\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-kiVPWNCJ\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-JiuempzE\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-NfepJ8d-\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-_bYykgU2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-0RGYYYa8\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-gRSHgUm2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-mui4tXHs\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-tYmMbbAK\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-xkRBC0p_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-3FISwBIz\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-3UTSN7Q_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-0EPuBRtw\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-bxXqpHGf\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-DVohExfz\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-eDdhr4db\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlip5zkt\" id=\"prod-YN_w7WcD\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcg-yy3r\" id=\"prod-sVlKX7KO\">\n        <emu-t>break</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-wq9kNHey\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-zEFnXzdo\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-MxUCmZej\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-a3dtTxDp\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-mWAyGNz1\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-xKDcEL_e\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-WyF-LUeK\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-zsR5iLZH\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-Mu3VhVjD\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-Yr89pOXp\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-3_4iLynl\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-KaiFSIRm\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-_CFhQEhr\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-fN52Tgzf\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassStaticBlockStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-vh6EF-BV\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-gDhjMfCK\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-T8hjI_vu\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-SLqg0yKr\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-computedpropertycontains": {"num": "8.4.2", "title": "#sec-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains", "html": "<emu-clause id=\"sec-static-semantics-computedpropertycontains\" oldids=\"sec-object-initializer-static-semantics-computedpropertycontains,sec-method-definitions-static-semantics-computedpropertycontains,sec-generator-function-definitions-static-semantics-computedpropertycontains,sec-async-generator-function-definitions-static-semantics-computedpropertycontains,sec-class-definitions-static-semantics-computedpropertycontains,sec-async-function-definitions-static-semantics-ComputedPropertyContains\" type=\"sdo\" aoid=\"ComputedPropertyContains\"><span id=\"sec-async-function-definitions-static-semantics-ComputedPropertyContains\"></span><span id=\"sec-class-definitions-static-semantics-computedpropertycontains\"></span><span id=\"sec-async-generator-function-definitions-static-semantics-computedpropertycontains\"></span><span id=\"sec-generator-function-definitions-static-semantics-computedpropertycontains\"></span><span id=\"sec-method-definitions-static-semantics-computedpropertycontains\"></span><span id=\"sec-object-initializer-static-semantics-computedpropertycontains\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-computedpropertycontains\">#sec-static-semantics-computedpropertycontains</span> Static Semantics: ComputedPropertyContains</h1>\n      <p>With parameter <var>symbol</var>.</p>\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\" id=\"prod-A8PF_J4D\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"PropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5x4jbee2\" id=\"prod-KBlapLw6\"><emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"PropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nimmmso5\" id=\"prod-pgiwn-A8\"><emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-ZS17eYsY\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"s7vk7pda\" id=\"prod-vyebD6Jr\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"lbu40xzc\" id=\"prod-49ueHbo6\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-clQ5cW-v\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-7J1puDuJ\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"msulavvt\" id=\"prod-w3-p5Y-S\">\n        <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>inList</var> be <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> with argument <var>symbol</var>.</li><li>If <var>inList</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2ui-f2qn\" id=\"prod-a6HgYRcV\"><emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-uyqDiD0W\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-yQr72pM_\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-s8Rlgqlc\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of <emu-xref aoid=\"ComputedPropertyContains\"><a href=\"#sec-static-semantics-computedpropertycontains\">ComputedPropertyContains</a></emu-xref> for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> with argument <var>symbol</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-runtime-semantics-evaluateclassstaticblockbody": {"num": "15.7.14", "title": "#sec-runtime-semantics-evaluateclassstaticblockbody Runtime Semantics: EvaluateClassStaticBlockBody", "html": "<emu-clause id=\"sec-runtime-semantics-evaluateclassstaticblockbody\" type=\"sdo\" aoid=\"EvaluateClassStaticBlockBody\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-evaluateclassstaticblockbody\">#sec-runtime-semantics-evaluateclassstaticblockbody</span> Runtime Semantics: EvaluateClassStaticBlockBody</h1>\n      <p>With parameter <var>functionObject</var>.</p>\n      <emu-grammar><emu-production name=\"ClassStaticBlockBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oh0jsomm\" id=\"prod-1dy60deL\"><emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref>(<var>functionObject</var>, &#171; &#187;).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-ClassStaticBlockStatementList\">ClassStaticBlockStatementList</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-classelementevaluation": {"num": "15.7.15", "title": "#sec-static-semantics-classelementevaluation Runtime Semantics: ClassElementEvaluation", "html": "<emu-clause id=\"sec-static-semantics-classelementevaluation\" type=\"sdo\" aoid=\"ClassElementEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-classelementevaluation\">#sec-static-semantics-classelementevaluation</span> Runtime Semantics: ClassElementEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bwbyf1-5\" id=\"prod-tPq9hD-G\">\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cpyv1xvc\" id=\"prod-Cn1oLmsN\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ClassFieldDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classfielddefinitionevaluation\">ClassFieldDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> with argument <var>object</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\" id=\"prod-Qe_eKZ3f\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-ljgtrpo\" id=\"prod-DNhqQKHO\">\n        <emu-t>static</emu-t>\n        <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2ui-f2qn\" id=\"prod-Hb23PvBK\"><emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ClassStaticBlockDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classstaticblockdefinitionevaluation\">ClassStaticBlockDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt> with argument <var>object</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-V88LvFxI\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-privateboundidentifiers": {"num": "15.7.8", "title": "#sec-static-semantics-privateboundidentifiers Static Semantics: PrivateBoundIdentifiers", "html": "<emu-clause id=\"sec-static-semantics-privateboundidentifiers\" type=\"sdo\" aoid=\"PrivateBoundIdentifiers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-privateboundidentifiers\">#sec-static-semantics-privateboundidentifiers</span> Static Semantics: PrivateBoundIdentifiers</h1>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-QQ9gR7rA\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\" id=\"prod-3FDawUhc\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bmyo-0oj\" id=\"prod-sMaEe0uD\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2ui-f2qn\" id=\"prod-uPgf_Q1K\"><emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-dExs5jCW\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"msulavvt\" id=\"prod-PTQtTdvS\">\n        <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-pxy6kYq7\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"s7vk7pda\" id=\"prod-axmlrr3F\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"lbu40xzc\" id=\"prod-9-TzGQnW\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorMethod\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-Qvq1cmEs\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-zTa8Ph70\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorMethod\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-1nK7U43p\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-propname": {"num": "8.5.5", "title": "#sec-static-semantics-propname Static Semantics: PropName", "html": "<emu-clause id=\"sec-static-semantics-propname\" oldids=\"sec-object-initializer-static-semantics-propname,sec-method-definitions-static-semantics-propname,sec-generator-function-definitions-static-semantics-propname,sec-async-generator-function-definitions-static-semantics-propname,sec-class-definitions-static-semantics-propname,sec-async-function-definitions-static-semantics-PropName\" type=\"sdo\" aoid=\"PropName\"><span id=\"sec-async-function-definitions-static-semantics-PropName\"></span><span id=\"sec-class-definitions-static-semantics-propname\"></span><span id=\"sec-async-generator-function-definitions-static-semantics-propname\"></span><span id=\"sec-generator-function-definitions-static-semantics-propname\"></span><span id=\"sec-method-definitions-static-semantics-propname\"></span><span id=\"sec-object-initializer-static-semantics-propname\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-propname\">#sec-static-semantics-propname</span> Static Semantics: PropName</h1>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i2hxnrih\" id=\"prod-qwkHLLWn\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w7ifpmpd\" id=\"prod-LNEVDzQo\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\" id=\"prod-T9fmdB_X\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-u_yMpuq5\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xhtltz00\" id=\"prod-Xw0182zP\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"SV\"><a href=\"#sec-static-semantics-sv\">SV</a></emu-xref> of <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pui0b1rt\" id=\"prod-nyDilreQ\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>nbr</var> be the <emu-xref aoid=\"NumericValue\"><a href=\"#sec-numericvalue\">NumericValue</a></emu-xref> of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nbr</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ComputedPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ltvvc-5a\" id=\"prod-r9-JDvZR\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-CpdLYUt9\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"s7vk7pda\" id=\"prod-5q0xQjd1\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"lbu40xzc\" id=\"prod-Pj7-Oy-Q\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-zA_cSICS\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-kfKLLmSB\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2ui-f2qn\" id=\"prod-auRJV_iy\"><emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-eIc0iw1U\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-cOwxJsMP\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-NW7fjJTs\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\" id=\"prod-5EaGoVCR\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-continue-statement-static-semantics-early-errors": {"num": "14.8.1", "title": "#sec-continue-statement-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-continue-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-continue-statement-static-semantics-early-errors\">#sec-continue-statement-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"ContinueStatement\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6qppgxyk\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"wh7qddgu\">\n        <emu-t>continue</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> is not nested, directly or indirectly (but not crossing function or <code>static</code> initialization block boundaries), within an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}}, "figData": {"table-classstaticblockdefinition-record-fields": "Table 13"}}}