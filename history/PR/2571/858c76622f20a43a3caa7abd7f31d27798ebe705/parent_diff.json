{"from": {"secList": ["sec-ordinaryfunctioncreate", "sec-algorithm-conventions-syntax-directed-operations", "sec-types-of-source-code"], "secData": {"sec-ordinaryfunctioncreate": {"num": "10.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" type=\"abstract operation\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\" aoid=\"OrdinaryFunctionCreate\"><span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (<emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>), and <var>PrivateScope</var> (a <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> or <emu-val>null</emu-val>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[PrivateEnvironment]] to <var>PrivateScope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[Fields]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[PrivateMethods]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[ClassFieldInitializerName]] to <emu-const>empty</emu-const>.</li><li>Let <var>len</var> be the <emu-xref aoid=\"ExpectedArgumentCount\"><a href=\"#sec-static-semantics-expectedargumentcount\">ExpectedArgumentCount</a></emu-xref> of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-algorithm-conventions-syntax-directed-operations": {"num": "5.2.2", "title": "#sec-algorithm-conventions-syntax-directed-operations Syntax-Directed Operations", "html": "<emu-clause id=\"sec-algorithm-conventions-syntax-directed-operations\" namespace=\"algorithm-conventions\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-algorithm-conventions-syntax-directed-operations\">#sec-algorithm-conventions-syntax-directed-operations</span> Syntax-Directed Operations</h1>\n      <p>A <dfn variants=\"syntax-directed operations\">syntax-directed operation</dfn> is a named operation whose definition consists of algorithms, each of which is associated with one or more productions from one of the ECMAScript grammars. A production that has multiple alternative definitions will typically have a distinct algorithm for each alternative. When an algorithm is associated with a grammar production, it may reference the terminal and nonterminal symbols of the production alternative as if they were parameters of the algorithm. When used in this manner, nonterminal symbols refer to the actual alternative definition that is matched when parsing the source text. The <dfn>source text matched by</dfn> a grammar production is the portion of the source text that starts at the beginning of the first terminal that participated in the match and ends at the end of the last terminal that participated in the match.</p>\n      <p>When an algorithm is associated with a production alternative, the alternative is typically shown without any &#8220;[ ]&#8221; grammar annotations. Such annotations should only affect the syntactic recognition of the alternative and have no effect on the associated semantics for the alternative.</p>\n      <p>Syntax-directed operations are invoked with a parse node and, optionally, other parameters by using the conventions on steps <emu-xref href=\"#step-sdo-invocation-example-1\"><a href=\"#step-sdo-invocation-example-1\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-1\">#step-sdo-invocation-example-1</a></emu-xref>, <emu-xref href=\"#step-sdo-invocation-example-2\"><a href=\"#step-sdo-invocation-example-2\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-2\">#step-sdo-invocation-example-2</a></emu-xref>, and <emu-xref href=\"#step-sdo-invocation-example-3\"><a href=\"#step-sdo-invocation-example-3\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-3\">#step-sdo-invocation-example-3</a></emu-xref> in the following algorithm:</p>\n      <emu-alg example=\"\"><ol><li id=\"step-sdo-invocation-example-1\">Let <var>status</var> be SyntaxDirectedOperation of <emu-nt>SomeNonTerminal</emu-nt>.</li><li>Let <var>someParseNode</var> be the parse of some source text.</li><li id=\"step-sdo-invocation-example-2\">Perform SyntaxDirectedOperation of <var>someParseNode</var>.</li><li id=\"step-sdo-invocation-example-3\">Perform SyntaxDirectedOperation of <var>someParseNode</var> passing <emu-val>\"value\"</emu-val> as the argument.</li></ol></emu-alg>\n      <p>Unless explicitly specified otherwise, all <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">chain productions</a></emu-xref> have an implicit definition for every operation that might be applied to that production's left-hand side nonterminal. The implicit definition simply reapplies the same operation with the same parameters, if any, to the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">chain production</a></emu-xref>'s sole right-hand side nonterminal and then returns the result. For example, assume that some algorithm has a step of the form: &#8220;Return the result of evaluating <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>&#8221; and that there is a production:</p>\n      <emu-grammar example=\"\"><emu-production name=\"Block\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ljp0ar\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>but the Evaluation operation does not associate an algorithm with that production. In that case, the Evaluation operation implicitly includes an association of the form:</p>\n      <p><b>Runtime Semantics: Evaluation</b></p>\n      <emu-grammar example=\"\"><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ljp0ar\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-types-of-source-code": {"num": "11.2", "title": "#sec-types-of-source-code Types of Source Code", "html": "<emu-clause id=\"sec-types-of-source-code\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</span> Types of Source Code</h1>\n    <p>There are four types of ECMAScript code:</p>\n    <ul>\n      <li>\n        <em>Global code</em> is source text that is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The global code of a particular <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> does not include any source text that is parsed as part of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n      <li>\n        <em>Eval code</em> is the source text supplied to the built-in <code>eval</code> function. More precisely, if the parameter to the built-in <code>eval</code> function is a String, it is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The eval code for a particular invocation of <code>eval</code> is the global code portion of that <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.\n      </li>\n      <li>\n        <p><em>Function code</em> is source text that is parsed to supply the value of the [[ECMAScriptCode]] and [[FormalParameters]] internal slots (see <emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function code of a particular ECMAScript function does not include any source text that is parsed as the function code of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</p>\n        <p>In addition, if the source text referred to above is parsed as:</p>\n        <ul>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, or</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>,</li>\n        </ul>\n        <p>then the source text matching the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> (if any) of that declaration or expression is also included in the function code of the corresponding function.</p>\n      </li>\n      <li>\n        <em>Module code</em> is source text that is code that is provided as a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt>. It is the code that is directly evaluated when a module is initialized. The module code of a particular module does not include any source text that is parsed as part of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n    </ul>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Function code is generally provided as the bodies of Function Definitions (<emu-xref href=\"#sec-function-definitions\"><a href=\"#sec-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</a></emu-xref>), Arrow Function Definitions (<emu-xref href=\"#sec-arrow-function-definitions\"><a href=\"#sec-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</a></emu-xref>), Method Definitions (<emu-xref href=\"#sec-method-definitions\"><a href=\"#sec-method-definitions\" class=\"excluded-xref\" excluded-id=\"sec-method-definitions\">#sec-method-definitions</a></emu-xref>), Generator Function Definitions (<emu-xref href=\"#sec-generator-function-definitions\"><a href=\"#sec-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-generator-function-definitions\">#sec-generator-function-definitions</a></emu-xref>), Async Function Definitions (<emu-xref href=\"#sec-async-function-definitions\"><a href=\"#sec-async-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</a></emu-xref>), Async Generator Function Definitions (<emu-xref href=\"#sec-async-generator-function-definitions\"><a href=\"#sec-async-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-generator-function-definitions\">#sec-async-generator-function-definitions</a></emu-xref>), and Async Arrow Functions (<emu-xref href=\"#sec-async-arrow-function-definitions\"><a href=\"#sec-async-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-arrow-function-definitions\">#sec-async-arrow-function-definitions</a></emu-xref>). Function code is also derived from the arguments to the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>), the GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-generatorfunction\"><a href=\"#sec-generatorfunction\" class=\"excluded-xref\" excluded-id=\"sec-generatorfunction\">#sec-generatorfunction</a></emu-xref>), and the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-async-function-constructor-arguments\"><a href=\"#sec-async-function-constructor-arguments\" class=\"excluded-xref\" excluded-id=\"sec-async-function-constructor-arguments\">#sec-async-function-constructor-arguments</a></emu-xref>).</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The practical effect of including the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in function code is that the Early Errors for <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> are applied to a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> that is the name of a function whose body contains a \"use strict\" directive, even if the surrounding code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-directive-prologues-and-the-use-strict-directive\"><h1><span class=\"secnum\">11.2.1</span>#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive</h1>...</div><div id=\"excluded-sec-strict-mode-code\"><h1><span class=\"secnum\">11.2.2</span>#sec-strict-mode-code Strict Mode Code</h1>...</div><div id=\"excluded-sec-non-ecmascript-functions\"><h1><span class=\"secnum\">11.2.3</span>#sec-non-ecmascript-functions Non-ECMAScript Functions</h1>...</div></emu-clause>\n"}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 34"}}, "to": {"secList": ["sec-ordinaryfunctioncreate", "sec-algorithm-conventions-syntax-directed-operations", "sec-types-of-source-code"], "secData": {"sec-ordinaryfunctioncreate": {"num": "10.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" type=\"abstract operation\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\" aoid=\"OrdinaryFunctionCreate\"><span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (<emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>), and <var>PrivateScope</var> (a <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> or <emu-val>null</emu-val>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matched by <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[PrivateEnvironment]] to <var>PrivateScope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[Fields]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[PrivateMethods]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[ClassFieldInitializerName]] to <emu-const>empty</emu-const>.</li><li>Let <var>len</var> be the <emu-xref aoid=\"ExpectedArgumentCount\"><a href=\"#sec-static-semantics-expectedargumentcount\">ExpectedArgumentCount</a></emu-xref> of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-algorithm-conventions-syntax-directed-operations": {"num": "5.2.2", "title": "#sec-algorithm-conventions-syntax-directed-operations Syntax-Directed Operations", "html": "<emu-clause id=\"sec-algorithm-conventions-syntax-directed-operations\" namespace=\"algorithm-conventions\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-algorithm-conventions-syntax-directed-operations\">#sec-algorithm-conventions-syntax-directed-operations</span> Syntax-Directed Operations</h1>\n      <p>A <dfn variants=\"syntax-directed operations\">syntax-directed operation</dfn> is a named operation whose definition consists of algorithms, each of which is associated with one or more productions from one of the ECMAScript grammars. A production that has multiple alternative definitions will typically have a distinct algorithm for each alternative. When an algorithm is associated with a grammar production, it may reference the terminal and nonterminal symbols of the production alternative as if they were parameters of the algorithm. When used in this manner, nonterminal symbols refer to the actual alternative definition that is matched when parsing the source text. The <dfn>source text matched by</dfn> a grammar production or <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> derived from it is the portion of the source text that starts at the beginning of the first terminal that participated in the match and ends at the end of the last terminal that participated in the match.</p>\n      <p>When an algorithm is associated with a production alternative, the alternative is typically shown without any &#8220;[ ]&#8221; grammar annotations. Such annotations should only affect the syntactic recognition of the alternative and have no effect on the associated semantics for the alternative.</p>\n      <p>Syntax-directed operations are invoked with a parse node and, optionally, other parameters by using the conventions on steps <emu-xref href=\"#step-sdo-invocation-example-1\"><a href=\"#step-sdo-invocation-example-1\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-1\">#step-sdo-invocation-example-1</a></emu-xref>, <emu-xref href=\"#step-sdo-invocation-example-2\"><a href=\"#step-sdo-invocation-example-2\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-2\">#step-sdo-invocation-example-2</a></emu-xref>, and <emu-xref href=\"#step-sdo-invocation-example-3\"><a href=\"#step-sdo-invocation-example-3\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-3\">#step-sdo-invocation-example-3</a></emu-xref> in the following algorithm:</p>\n      <emu-alg example=\"\"><ol><li id=\"step-sdo-invocation-example-1\">Let <var>status</var> be SyntaxDirectedOperation of <emu-nt>SomeNonTerminal</emu-nt>.</li><li>Let <var>someParseNode</var> be the parse of some source text.</li><li id=\"step-sdo-invocation-example-2\">Perform SyntaxDirectedOperation of <var>someParseNode</var>.</li><li id=\"step-sdo-invocation-example-3\">Perform SyntaxDirectedOperation of <var>someParseNode</var> passing <emu-val>\"value\"</emu-val> as the argument.</li></ol></emu-alg>\n      <p>Unless explicitly specified otherwise, all <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">chain productions</a></emu-xref> have an implicit definition for every operation that might be applied to that production's left-hand side nonterminal. The implicit definition simply reapplies the same operation with the same parameters, if any, to the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">chain production</a></emu-xref>'s sole right-hand side nonterminal and then returns the result. For example, assume that some algorithm has a step of the form: &#8220;Return the result of evaluating <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>&#8221; and that there is a production:</p>\n      <emu-grammar example=\"\"><emu-production name=\"Block\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ljp0ar\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>but the Evaluation operation does not associate an algorithm with that production. In that case, the Evaluation operation implicitly includes an association of the form:</p>\n      <p><b>Runtime Semantics: Evaluation</b></p>\n      <emu-grammar example=\"\"><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ljp0ar\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-types-of-source-code": {"num": "11.2", "title": "#sec-types-of-source-code Types of Source Code", "html": "<emu-clause id=\"sec-types-of-source-code\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</span> Types of Source Code</h1>\n    <p>There are four types of ECMAScript code:</p>\n    <ul>\n      <li>\n        <em>Global code</em> is source text that is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The global code of a particular <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> does not include any source text that is parsed as part of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n      <li>\n        <em>Eval code</em> is the source text supplied to the built-in <code>eval</code> function. More precisely, if the parameter to the built-in <code>eval</code> function is a String, it is treated as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The eval code for a particular invocation of <code>eval</code> is the global code portion of that <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.\n      </li>\n      <li>\n        <p><em>Function code</em> is source text that is parsed to supply the value of the [[ECMAScriptCode]] and [[FormalParameters]] internal slots (see <emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function code of a particular ECMAScript function does not include any source text that is parsed as the function code of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</p>\n        <p>In addition, if the source text referred to above is parsed as:</p>\n        <ul>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>,</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, or</li>\n          <li>the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> and <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>,</li>\n        </ul>\n        <p>then the source text matched by the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> (if any) of that declaration or expression is also included in the function code of the corresponding function.</p>\n      </li>\n      <li>\n        <em>Module code</em> is source text that is code that is provided as a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt>. It is the code that is directly evaluated when a module is initialized. The module code of a particular module does not include any source text that is parsed as part of a nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>, <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>, <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>, <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.\n      </li>\n    </ul>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Function code is generally provided as the bodies of Function Definitions (<emu-xref href=\"#sec-function-definitions\"><a href=\"#sec-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</a></emu-xref>), Arrow Function Definitions (<emu-xref href=\"#sec-arrow-function-definitions\"><a href=\"#sec-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</a></emu-xref>), Method Definitions (<emu-xref href=\"#sec-method-definitions\"><a href=\"#sec-method-definitions\" class=\"excluded-xref\" excluded-id=\"sec-method-definitions\">#sec-method-definitions</a></emu-xref>), Generator Function Definitions (<emu-xref href=\"#sec-generator-function-definitions\"><a href=\"#sec-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-generator-function-definitions\">#sec-generator-function-definitions</a></emu-xref>), Async Function Definitions (<emu-xref href=\"#sec-async-function-definitions\"><a href=\"#sec-async-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</a></emu-xref>), Async Generator Function Definitions (<emu-xref href=\"#sec-async-generator-function-definitions\"><a href=\"#sec-async-generator-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-generator-function-definitions\">#sec-async-generator-function-definitions</a></emu-xref>), and Async Arrow Functions (<emu-xref href=\"#sec-async-arrow-function-definitions\"><a href=\"#sec-async-arrow-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-arrow-function-definitions\">#sec-async-arrow-function-definitions</a></emu-xref>). Function code is also derived from the arguments to the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>), the GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-generatorfunction\"><a href=\"#sec-generatorfunction\" class=\"excluded-xref\" excluded-id=\"sec-generatorfunction\">#sec-generatorfunction</a></emu-xref>), and the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (<emu-xref href=\"#sec-async-function-constructor-arguments\"><a href=\"#sec-async-function-constructor-arguments\" class=\"excluded-xref\" excluded-id=\"sec-async-function-constructor-arguments\">#sec-async-function-constructor-arguments</a></emu-xref>).</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The practical effect of including the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in function code is that the Early Errors for <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> are applied to a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> that is the name of a function whose body contains a \"use strict\" directive, even if the surrounding code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-directive-prologues-and-the-use-strict-directive\"><h1><span class=\"secnum\">11.2.1</span>#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive</h1>...</div><div id=\"excluded-sec-strict-mode-code\"><h1><span class=\"secnum\">11.2.2</span>#sec-strict-mode-code Strict Mode Code</h1>...</div><div id=\"excluded-sec-non-ecmascript-functions\"><h1><span class=\"secnum\">11.2.3</span>#sec-non-ecmascript-functions Non-ECMAScript Functions</h1>...</div></emu-clause>\n"}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 34"}}}