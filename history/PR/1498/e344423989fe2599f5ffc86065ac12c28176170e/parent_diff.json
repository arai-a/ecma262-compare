{"from": {"secList": ["sec-eval-x", "sec-function-calls-runtime-semantics-evaluation", "sec-createdynamicfunction", "sec-hostensurecancompilestrings"], "secData": {"sec-eval-x": {"num": "18.2.1", "title": "#sec-eval-x eval ( x )", "html": "<emu-clause id=\"sec-eval-x\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-eval-x\">#sec-eval-x</span> eval ( <var>x</var> )</h1>\n      <p>The <code>eval</code> function is the  <dfn>%eval%</dfn> intrinsic object. When the <code>eval</code> function is called with one argument <var>x</var>, the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>x</var>, <var>calleeRealm</var>, <emu-val>false</emu-val>, <emu-val>false</emu-val>).\n      </li></ol></emu-alg>\n\n      <div id=\"excluded-sec-performeval\"><h1><span class=\"secnum\">18.2.1.1</span>#sec-performeval Runtime Semantics: PerformEval ( x, evalRealm, strictCaller, direct )</h1>...</div><div id=\"excluded-sec-hostensurecancompilestrings\"><h1><span class=\"secnum\">18.2.1.2</span>#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm )</h1>...</div><div id=\"excluded-sec-evaldeclarationinstantiation\"><h1><span class=\"secnum\">18.2.1.3</span>#sec-evaldeclarationinstantiation Runtime Semantics: EvalDeclarationInstantiation ( body, varEnv, lexEnv, strict )</h1>...</div></emu-clause>\n\n    "}, "sec-function-calls-runtime-semantics-evaluation": {"num": "12.3.4.1", "title": "#sec-function-calls-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-calls-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-calls-runtime-semantics-evaluation\">#sec-function-calls-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be CoveredCallExpression of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>memberExpr</var> be the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> of <var>expr</var>.</li><li>Let <var>arguments</var> be the <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> of <var>expr</var>.</li><li>Let <var>ref</var> be the result of evaluating <var>memberExpr</var>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ref</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> and <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val> and <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>ref</var>) is <code>\"eval\"</code>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>func</var>, <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\">%eval%</a></emu-xref>) is <emu-val>true</emu-val>, then<ol><li>Let <var>argList</var> be ? ArgumentListEvaluation of <var>arguments</var>.</li><li>If <var>argList</var> has no elements, return <emu-val>undefined</emu-val>.</li><li>Let <var>evalText</var> be the first element of <var>argList</var>.</li><li>If the source code matching this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strictCaller</var> be <emu-val>true</emu-val>. Otherwise let <var>strictCaller</var> be <emu-val>false</emu-val>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>evalRealm</var>, <var>evalRealm</var>).</li><li>Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>evalText</var>, <var>evalRealm</var>, <var>strictCaller</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailCall</var>).\n        </li></ol></emu-alg>\n        <p>A <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> evaluation that executes step 6.a.vii is a  <dfn>direct eval</dfn>.</p>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"42e81a1c\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createdynamicfunction": {"num": "19.2.1.1.1", "title": "#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> Runtime Semantics: CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction is called with arguments <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, and <var>args</var>. <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action, <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to, <var>kind</var> is either <code>\"normal\"</code>, <code>\"generator\"</code>, <code>\"async\"</code>, or <code>\"async generator\"</code>, and <var>args</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the actual argument values that were passed to <var>constructor</var>. The following steps are taken:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <code>\"normal\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%FunctionPrototype%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <code>\"generator\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%Generator%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <code>\"async\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncFunctionPrototype%\"</code>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <code>\"async generator\"</code>.</li><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncGenerator%\"</code>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyText</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyText</var> be <var>args</var>[0].</li><li>Else <var>argCount</var> &gt; 1,<ol><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>P</var>, <code>\",\"</code> (a comma), and <var>nextArgString</var>.</li><li>Increase <var>k</var> by 1.</li></ol></li><li>Let <var>bodyText</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Set <var>bodyText</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyText</var>).</li><li>Let <var>parameters</var> be the result of parsing <var>P</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>parameterGoal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>body</var> be the result of parsing <var>bodyText</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>goal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>strict</var> be ContainsUseStrict of <var>body</var>.</li><li>If any <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> errors are detected for <var>parameters</var> or <var>body</var>, throw a <emu-val>SyntaxError</emu-val> or a <emu-val>ReferenceError</emu-val> exception, depending on the type of the error. If <var>strict</var> is <emu-val>true</emu-val>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> are applied. Parsing and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> detection may be interweaved in an implementation-dependent manner.</li><li>If <var>strict</var> is <emu-val>true</emu-val> and IsSimpleParameterList of <var>parameters</var> is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If any element of the BoundNames of <var>parameters</var> also occurs in the LexicallyDeclaredNames of <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>kind</var> is <code>\"generator\"</code> or <code>\"async generator\"</code>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>kind</var> is <code>\"async\"</code> or <code>\"async generator\"</code>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>If BoundNames of <var>parameters</var> contains any duplicate elements, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>proto</var>, <var>strict</var>, <var>kind</var>).</li><li>Let <var>realmF</var> be <var>F</var>.[[Realm]].</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Perform <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <emu-const>Normal</emu-const>, <var>parameters</var>, <var>body</var>, <var>scope</var>).</li><li>If <var>kind</var> is <code>\"generator\"</code>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <code>\"async generator\"</code>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <code>\"normal\"</code>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Async functions are not constructable and do not have a [[Construct]] internal method or a <code>\"prototype\"</code> property.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"anonymous\"</code>).</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, <code>\" anonymous(\"</code>, <var>P</var>, 0x000A (LINE FEED), <code>\") {\"</code>, 0x000A (LINE FEED), <var>bodyText</var>, 0x000A (LINE FEED), and <code>\"}\"</code>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Return <var>F</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>A <code>prototype</code> property is created for every non-async function created using CreateDynamicFunction to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function SourceText Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function SourceText Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><code>\"normal\"</code></td><td><code>\"function\"</code></td></tr>\n                <tr><td><code>\"generator\"</code></td><td><code>\"function*\"</code></td></tr>\n                <tr><td><code>\"async\"</code></td><td><code>\"async function\"</code></td></tr>\n                <tr><td><code>\"async generator\"</code></td><td><code>\"async function*\"</code></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-hostensurecancompilestrings": {"num": "18.2.1.2", "title": "#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm )", "html": "<emu-clause id=\"sec-hostensurecancompilestrings\" aoid=\"HostEnsureCanCompileStrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostensurecancompilestrings\">#sec-hostensurecancompilestrings</span> HostEnsureCanCompileStrings ( <var>callerRealm</var>, <var>calleeRealm</var> )</h1>\n\n        <p>HostEnsureCanCompileStrings is an implementation-defined abstract operation that allows host environments to block certain ECMAScript functions which allow developers to compile strings into ECMAScript code.</p>\n\n        <p>An implementation of HostEnsureCanCompileStrings may complete normally or abruptly. Any abrupt completions will be propagated to its callers. The default implementation of HostEnsureCanCompileStrings is to unconditionally return an empty normal completion.</p>\n      </emu-clause>\n\n      "}}, "figData": {"table-dynamic-function-sourcetext-prefixes": "Table 47"}}, "to": {"secList": ["sec-eval-x", "sec-function-calls-runtime-semantics-evaluation", "sec-createdynamicfunction", "sec-hostensurecancompilestrings"], "secData": {"sec-eval-x": {"num": "18.2.1", "title": "#sec-eval-x eval ( x )", "html": "<emu-clause id=\"sec-eval-x\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-eval-x\">#sec-eval-x</span> eval ( <var>x</var> )</h1>\n      <p>The <code>eval</code> function is the  <dfn>%eval%</dfn> intrinsic object. When the <code>eval</code> function is called with one argument <var>x</var>, the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>, Script, <var>x</var>).</li><li>Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>x</var>, <var>calleeRealm</var>, <emu-val>false</emu-val>, <emu-val>false</emu-val>).\n      </li></ol></emu-alg>\n\n      <div id=\"excluded-sec-performeval\"><h1><span class=\"secnum\">18.2.1.1</span>#sec-performeval Runtime Semantics: PerformEval ( x, evalRealm, strictCaller, direct )</h1>...</div><div id=\"excluded-sec-hostensurecancompilestrings\"><h1><span class=\"secnum\">18.2.1.2</span>#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm[, goal[, bodyText]] )</h1>...</div><div id=\"excluded-sec-evaldeclarationinstantiation\"><h1><span class=\"secnum\">18.2.1.3</span>#sec-evaldeclarationinstantiation Runtime Semantics: EvalDeclarationInstantiation ( body, varEnv, lexEnv, strict )</h1>...</div></emu-clause>\n\n    "}, "sec-function-calls-runtime-semantics-evaluation": {"num": "12.3.4.1", "title": "#sec-function-calls-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-calls-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-calls-runtime-semantics-evaluation\">#sec-function-calls-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be CoveredCallExpression of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>memberExpr</var> be the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> of <var>expr</var>.</li><li>Let <var>arguments</var> be the <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> of <var>expr</var>.</li><li>Let <var>ref</var> be the result of evaluating <var>memberExpr</var>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ref</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> and <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val> and <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>ref</var>) is <code>\"eval\"</code>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>func</var>, <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\">%eval%</a></emu-xref>) is <emu-val>true</emu-val>, then<ol><li>Let <var>argList</var> be ? ArgumentListEvaluation of <var>arguments</var>.</li><li>If <var>argList</var> has no elements, return <emu-val>undefined</emu-val>.</li><li>Let <var>evalText</var> be the first element of <var>argList</var>.</li><li>If the source code matching this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strictCaller</var> be <emu-val>true</emu-val>. Otherwise let <var>strictCaller</var> be <emu-val>false</emu-val>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>evalRealm</var>, <var>evalRealm</var>, Script, <var>evalText</var>).</li><li>Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>evalText</var>, <var>evalRealm</var>, <var>strictCaller</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailCall</var>).\n        </li></ol></emu-alg>\n        <p>A <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> evaluation that executes step 6.a.vii is a  <dfn>direct eval</dfn>.</p>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"42e81a1c\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisCall</var> be this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid=\"IsInTailPosition\"><a href=\"#sec-isintailposition\">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateCall\"><a href=\"#sec-evaluatecall\">EvaluateCall</a></emu-xref>(<var>func</var>, <var>ref</var>, <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>, <var>tailCall</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createdynamicfunction": {"num": "19.2.1.1.1", "title": "#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> Runtime Semantics: CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction is called with arguments <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, and <var>args</var>. <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action, <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to, <var>kind</var> is either <code>\"normal\"</code>, <code>\"generator\"</code>, <code>\"async\"</code>, or <code>\"async generator\"</code>, and <var>args</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the actual argument values that were passed to <var>constructor</var>. The following steps are taken:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <code>\"normal\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%FunctionPrototype%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <code>\"generator\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%Generator%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <code>\"async\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncFunctionPrototype%\"</code>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <code>\"async generator\"</code>.</li><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncGenerator%\"</code>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>If <var>argCount</var> = 0, let <var>bodyText</var> be the empty String.</li><li>Else <var>argCount</var> &#8805; 1,<ol><li>Let <var>bodyText</var> be <var>args</var>[<var>argCount</var> - 1].</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>, <var>goal</var>, <var>bodyText</var>).</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 1, let <var>bodyText</var> be <var>args</var>[0].</li><li>Else <var>argCount</var> &gt; 1,<ol><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>P</var>, <code>\",\"</code> (a comma), and <var>nextArgString</var>.</li><li>Increase <var>k</var> by 1.</li></ol></li></ol></li><li>Set <var>bodyText</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyText</var>).</li><li>Let <var>parameters</var> be the result of parsing <var>P</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>parameterGoal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>body</var> be the result of parsing <var>bodyText</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>goal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>strict</var> be ContainsUseStrict of <var>body</var>.</li><li>If any <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> errors are detected for <var>parameters</var> or <var>body</var>, throw a <emu-val>SyntaxError</emu-val> or a <emu-val>ReferenceError</emu-val> exception, depending on the type of the error. If <var>strict</var> is <emu-val>true</emu-val>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> are applied. Parsing and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> detection may be interweaved in an implementation-dependent manner.</li><li>If <var>strict</var> is <emu-val>true</emu-val> and IsSimpleParameterList of <var>parameters</var> is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If any element of the BoundNames of <var>parameters</var> also occurs in the LexicallyDeclaredNames of <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>kind</var> is <code>\"generator\"</code> or <code>\"async generator\"</code>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>kind</var> is <code>\"async\"</code> or <code>\"async generator\"</code>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>If BoundNames of <var>parameters</var> contains any duplicate elements, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>proto</var>, <var>strict</var>, <var>kind</var>).</li><li>Let <var>realmF</var> be <var>F</var>.[[Realm]].</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Perform <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <emu-const>Normal</emu-const>, <var>parameters</var>, <var>body</var>, <var>scope</var>).</li><li>If <var>kind</var> is <code>\"generator\"</code>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <code>\"async generator\"</code>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <code>\"normal\"</code>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Async functions are not constructable and do not have a [[Construct]] internal method or a <code>\"prototype\"</code> property.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"anonymous\"</code>).</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, <code>\" anonymous(\"</code>, <var>P</var>, 0x000A (LINE FEED), <code>\") {\"</code>, 0x000A (LINE FEED), <var>bodyText</var>, 0x000A (LINE FEED), and <code>\"}\"</code>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Return <var>F</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>A <code>prototype</code> property is created for every non-async function created using CreateDynamicFunction to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function SourceText Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function SourceText Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><code>\"normal\"</code></td><td><code>\"function\"</code></td></tr>\n                <tr><td><code>\"generator\"</code></td><td><code>\"function*\"</code></td></tr>\n                <tr><td><code>\"async\"</code></td><td><code>\"async function\"</code></td></tr>\n                <tr><td><code>\"async generator\"</code></td><td><code>\"async function*\"</code></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-hostensurecancompilestrings": {"num": "18.2.1.2", "title": "#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm[, goal[, bodyText]] )", "html": "<emu-clause id=\"sec-hostensurecancompilestrings\" aoid=\"HostEnsureCanCompileStrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostensurecancompilestrings\">#sec-hostensurecancompilestrings</span> HostEnsureCanCompileStrings ( <var>callerRealm</var>, <var>calleeRealm</var>[, <var>goal</var>[, <var>bodyText</var>]] )</h1>\n\n        <p>HostEnsureCanCompileStrings is an implementation-defined abstract operation that allows host environments to block certain ECMAScript functions which allow developers to compile strings into ECMAScript code.</p>\n\n        <p>An implementation of HostEnsureCanCompileStrings may complete normally or abruptly. Any abrupt completions will be propagated to its callers. The default implementation of HostEnsureCanCompileStrings is to unconditionally return an empty normal completion.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>goal</var> is the production which will be used to parse <var>bodyText</var>.  For example, if called via <emu-xref href=\"#sec-function-constructor\"><a href=\"#sec-function-constructor\">%Function%</a></emu-xref> it might be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt> and from <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\">%eval%</a></emu-xref> it might be the grammar symbol <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.</p>\n        </div></emu-note>\n\n        <p>Implementations of HostEnsureCanCompileStrings should not coerce <var>bodyText</var> to a string since callers will later do that and HostEnsureCanCompileStrings must not base security decisions on both coercions producing the same string.  Clients may base security decisions on internal slots.</p>\n      </emu-clause>\n\n      "}}, "figData": {"table-dynamic-function-sourcetext-prefixes": "Table 47"}}}