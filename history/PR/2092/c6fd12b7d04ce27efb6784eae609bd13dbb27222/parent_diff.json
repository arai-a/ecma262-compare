{"from": {"secList": ["sec-innermoduleevaluation"], "secData": {"sec-innermoduleevaluation": {"num": "15.2.1.16.2.1", "title": "#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )", "html": "<emu-clause id=\"sec-innermoduleevaluation\" aoid=\"InnerModuleEvaluation\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-innermoduleevaluation\">#sec-innermoduleevaluation</span> InnerModuleEvaluation ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleEvaluation takes arguments <var>module</var> (a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var>. It is used by Evaluate to perform the actual evaluation process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as <var>module</var>'s [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the same way as in <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Evaluate().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const>, then<ol><li>If <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>, return <var>index</var>.</li><li>Otherwise, return <var>module</var>.[[EvaluationError]].</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluating</emu-const>, return <var>index</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>evaluating</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>NOTE: Link must be completed successfully prior to invoking this method, so every requested module is guaranteed to resolve successfully.</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>evaluating</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}}, "figData": {}}, "to": {"secList": ["sec-innermoduleevaluation"], "secData": {"sec-innermoduleevaluation": {"num": "15.2.1.16.2.1", "title": "#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )", "html": "<emu-clause id=\"sec-innermoduleevaluation\" aoid=\"InnerModuleEvaluation\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-innermoduleevaluation\">#sec-innermoduleevaluation</span> InnerModuleEvaluation ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleEvaluation takes arguments <var>module</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var>. It is used by Evaluate to perform the actual evaluation process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as <var>module</var>'s [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the same way as in <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Evaluate().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const>, then<ol><li>If <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>, return <var>index</var>.</li><li>Otherwise, return <var>module</var>.[[EvaluationError]].</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluating</emu-const>, return <var>index</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>evaluating</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>NOTE: Link must be completed successfully prior to invoking this method, so every requested module is guaranteed to resolve successfully.</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>evaluating</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}}, "figData": {}}}