{"from": {"secList": ["sec-bound-function-exotic-objects-call-thisargument-argumentslist", "sec-variable-statement-static-semantics-varscopeddeclarations", "sec-exports-static-semantics-exportednames", "sec-static-semantics-referencedbindings", "sec-pattern", "sec-runtime-semantics-substitutionevaluation", "sec-exports-static-semantics-exportedbindings", "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations", "sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations", "sec-static-semantics-templatestrings", "sec-bound-function-exotic-objects-construct-argumentslist-newtarget", "sec-functiondeclarationinstantiation", "sec-static-semantics-prototypepropertynamelist", "sec-static-semantics-exportentriesformodule", "sec-modulenamespacecreate", "sec-static-semantics-nonconstructormethoddefinitions", "sec-static-semantics-propertynamelist", "sec-block-static-semantics-toplevellexicallyscopeddeclarations", "sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization", "sec-decode", "sec-initializers-in-forin-statement-heads", "sec-template-literals-runtime-semantics-argumentlistevaluation", "sec-imports-static-semantics-modulerequests", "sec-runtime-semantics-propertydestructuringassignmentevaluation", "sec-getvaluefrombuffer", "sec-identifiers-static-semantics-boundnames", "sec-labelled-statements-static-semantics-lexicallyscopeddeclarations", "sec-static-semantics-importentriesformodule", "sec-exports-static-semantics-exportentries", "sec-numerictorawbytes", "sec-block-static-semantics-lexicallyscopeddeclarations", "sec-exports-static-semantics-lexicallyscopeddeclarations", "sec-argument-lists-runtime-semantics-argumentlistevaluation"], "secData": {"sec-bound-function-exotic-objects-call-thisargument-argumentslist": {"num": "9.4.1.1", "title": "#sec-bound-function-exotic-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">#sec-bound-function-exotic-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n        <p>When the [[Call]] internal method of a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref>, <var>F</var>, which was created using the bind function is called with parameters <var>thisArgument</var> and <var>argumentsList</var>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>target</var> be <var>F</var>.[[BoundTargetFunction]].</li><li>Let <var>boundThis</var> be <var>F</var>.[[BoundThis]].</li><li>Let <var>boundArgs</var> be <var>F</var>.[[BoundArguments]].</li><li>Let <var>args</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the elements of <var>boundArgs</var>, followed by the elements of <var>argumentsList</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>target</var>, <var>boundThis</var>, <var>args</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-variable-statement-static-semantics-varscopeddeclarations": {"num": "13.3.2.3", "title": "#sec-variable-statement-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations", "html": "<emu-clause id=\"sec-variable-statement-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement-static-semantics-varscopeddeclarations\">#sec-variable-statement-static-semantics-varscopeddeclarations</span> Static Semantics: VarScopedDeclarations</h1>\n        <emu-see-also-para op=\"VarScopedDeclarations\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"377a6210\"><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a0057011\"><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>declarations</var> be VarScopedDeclarations of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> to <var>declarations</var>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-exports-static-semantics-exportednames": {"num": "15.2.3.4", "title": "#sec-exports-static-semantics-exportednames Static Semantics: ExportedNames", "html": "<emu-clause id=\"sec-exports-static-semantics-exportednames\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-static-semantics-exportednames\">#sec-exports-static-semantics-exportednames</span> Static Semantics: ExportedNames</h1>\n        <emu-see-also-para op=\"ExportedNames\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0a40575\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the ExportedNames of <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b01e734d\"><emu-t>*</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"76d083ed\"><emu-t>*</emu-t><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fd74b9b6\"><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the ExportedNames of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6c6de801\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"828f5ae3\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71d1417e\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3c3cb8d\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e1fe9c4f\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return &#171; <emu-val>\"default\"</emu-val> &#187;.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1907cd0c\"><emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the ExportedNames of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the ExportedNames of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a9552c46\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the StringValue of the second <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-referencedbindings": {"num": "15.2.3.10", "title": "#sec-static-semantics-referencedbindings Static Semantics: ReferencedBindings", "html": "<emu-clause id=\"sec-static-semantics-referencedbindings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-referencedbindings\">#sec-static-semantics-referencedbindings</span> Static Semantics: ReferencedBindings</h1>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1907cd0c\"><emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the ReferencedBindings of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the ReferencedBindings of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a9552c46\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-pattern": {"num": "21.2.2.2", "title": "#sec-pattern Pattern", "html": "<emu-clause id=\"sec-pattern\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern\">#sec-pattern</span> Pattern</h1>\n        <p>The production <emu-grammar><emu-production name=\"Pattern\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"79a5bbd0\"><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with +1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>str</var>, <var>index</var>) that captures <var>m</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>index</var>) is <emu-val>true</emu-val> and <var>index</var> &#8804; the length of <var>str</var>.</li><li>If <var>Unicode</var> is <emu-val>true</emu-val>, let <var>Input</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>str</var>). Otherwise, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the code units that are the elements of <var>str</var>. <var>Input</var> will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>. Each element of <var>Input</var> is considered to be a character.</li><li>Let <var>InputLength</var> be the number of characters contained in <var>Input</var>. This alias will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>.</li><li>Let <var>listIndex</var> be the index into <var>Input</var> of the character that was obtained from element <var>index</var> of <var>str</var>.</li><li>Let <var>c</var> be a new Continuation with parameters (<var>y</var>) that captures nothing and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li>Return <var>y</var>.</li></ol></li><li>Let <var>cap</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> <emu-val>undefined</emu-val> values, indexed 1 through <var>NcapturingParens</var>.</li><li>Let <var>x</var> be the State (<var>listIndex</var>, <var>cap</var>).</li><li>Return <var>m</var>(<var>x</var>, <var>c</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A Pattern evaluates (&#8220;compiles&#8221;) to an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> value. <emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref> can then apply this procedure to a String and an offset within the String to determine whether the pattern would match starting at exactly that offset within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> are designed so that compiling a pattern may throw a <emu-val>SyntaxError</emu-val> exception; on the other hand, once the pattern is successfully compiled, applying the resulting <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> to find a match in a String cannot throw an exception (except for any <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> exceptions that can occur anywhere such as out-of-memory).</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-substitutionevaluation": {"num": "12.2.9.5", "title": "#sec-runtime-semantics-substitutionevaluation Runtime Semantics: SubstitutionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-substitutionevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-substitutionevaluation\">#sec-runtime-semantics-substitutionevaluation</span> Runtime Semantics: SubstitutionEvaluation</h1>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b0b4f425\"><emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the result of SubstitutionEvaluation of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dc7ec961\"><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>subRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>sub</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>subRef</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing only <var>sub</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47acf041\"><emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>preceding</var> be ? SubstitutionEvaluation of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>.</li><li>Let <var>nextRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>nextRef</var>).</li><li>Append <var>next</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>preceding</var>.</li><li>Return <var>preceding</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-exports-static-semantics-exportedbindings": {"num": "15.2.3.3", "title": "#sec-exports-static-semantics-exportedbindings Static Semantics: ExportedBindings", "html": "<emu-clause id=\"sec-exports-static-semantics-exportedbindings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-static-semantics-exportedbindings\">#sec-exports-static-semantics-exportedbindings</span> Static Semantics: ExportedBindings</h1>\n        <emu-see-also-para op=\"ExportedBindings\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0a40575\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2762c7fe\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the ExportedBindings of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6c6de801\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"828f5ae3\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71d1417e\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3c3cb8d\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e1fe9c4f\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BoundNames of this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1907cd0c\"><emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the ExportedBindings of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the ExportedBindings of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a9552c46\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the StringValue of the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys": {"num": "9.5.11", "title": "#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n      <p>When the [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"ownKeys\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[OwnPropertyKeys]]().</li></ol></li><li>Let <var>trapResultArray</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var> &#187;).</li><li>Let <var>trapResult</var> be ?&#160;<emu-xref aoid=\"CreateListFromArrayLike\"><a href=\"#sec-createlistfromarraylike\">CreateListFromArrayLike</a></emu-xref>(<var>trapResultArray</var>, &#171; String, Symbol &#187;).</li><li>If <var>trapResult</var> contains any duplicate entries, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>targetKeys</var> be ? <var>target</var>.[[OwnPropertyKeys]]().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing only String and Symbol values.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> contains no duplicate entries.</li><li>Let <var>targetConfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>targetNonconfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>targetKeys</var>, do<ol><li>Let <var>desc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>Append <var>key</var> as an element of <var>targetNonconfigurableKeys</var>.</li></ol></li><li>Else,<ol><li>Append <var>key</var> as an element of <var>targetConfigurableKeys</var>.</li></ol></li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val> and <var>targetNonconfigurableKeys</var> is empty, then<ol><li>Return <var>trapResult</var>.</li></ol></li><li>Let <var>uncheckedResultKeys</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the elements of <var>trapResult</var>.</li><li>For each element <var>key</var> of <var>targetNonconfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val>, return <var>trapResult</var>.</li><li>For each element <var>key</var> of <var>targetConfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>uncheckedResultKeys</var> is not empty, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>trapResult</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[OwnPropertyKeys]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[OwnPropertyKeys]] is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> contains no duplicate entries.\n          </li>\n          <li>\n            The Type of each result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> element is either String or Symbol.\n          </li>\n          <li>\n            The result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain the keys of all non-configurable own properties of the target object.\n          </li>\n          <li>\n            If the target object is not extensible, then the result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain all the keys of the own properties of the target object and no other values.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations": {"num": "13.13.11", "title": "#sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations Static Semantics: TopLevelVarScopedDeclarations", "html": "<emu-clause id=\"sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\">#sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations</span> Static Semantics: TopLevelVarScopedDeclarations</h1>\n      <emu-see-also-para op=\"TopLevelVarScopedDeclarations\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"51b6efb5\"><emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the TopLevelVarScopedDeclarations of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a72ca256\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"08827f68\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> , return TopLevelVarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations": {"num": "13.7.5.8", "title": "#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations</span> Static Semantics: VarScopedDeclarations</h1>\n        <emu-see-also-para op=\"VarScopedDeclarations\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bf521b70\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2590ad81\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"8ea6608b\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"6f7c3304\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9a146e5f\"><emu-t>for</emu-t><emu-t>await</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b80b6675\"><emu-t>for</emu-t><emu-t>await</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ecf18944\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ee6f9a77\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7324ff96\"><emu-t>for</emu-t><emu-t>await</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-static-semantics-templatestrings": {"num": "12.2.9.2", "title": "#sec-static-semantics-templatestrings Static Semantics: TemplateStrings", "html": "<emu-clause id=\"sec-static-semantics-templatestrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-templatestrings\">#sec-static-semantics-templatestrings</span> Static Semantics: TemplateStrings</h1>\n        <p>With parameter <var>raw</var>.</p>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>string</var> be the TV of <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>string</var> be the TRV of <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the single element, <var>string</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be95cc40\"><emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>head</var> be the TV of <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>head</var> be the TRV of <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>.</li></ol></li><li>Let <var>tail</var> be TemplateStrings of <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> with argument <var>raw</var>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>head</var> followed by the elements of <var>tail</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>tail</var> be the TV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>tail</var> be the TRV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the single element, <var>tail</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b0b4f425\"><emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>middle</var> be TemplateStrings of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> with argument <var>raw</var>.</li><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>tail</var> be the TV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>tail</var> be the TRV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the elements of <var>middle</var> followed by <var>tail</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dc7ec961\"><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>string</var> be the TV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>string</var> be the TRV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the single element, <var>string</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47acf041\"><emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>front</var> be TemplateStrings of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> with argument <var>raw</var>.</li><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>last</var> be the TV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>last</var> be the TRV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Append <var>last</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>front</var>.</li><li>Return <var>front</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-bound-function-exotic-objects-construct-argumentslist-newtarget": {"num": "9.4.1.2", "title": "#sec-bound-function-exotic-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">#sec-bound-function-exotic-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n        <p>When the [[Construct]] internal method of a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref>, <var>F</var> that was created using the bind function is called with a list of arguments <var>argumentsList</var> and <var>newTarget</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>target</var> be <var>F</var>.[[BoundTargetFunction]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>target</var>) is <emu-val>true</emu-val>.</li><li>Let <var>boundArgs</var> be <var>F</var>.[[BoundArguments]].</li><li>Let <var>args</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the elements of <var>boundArgs</var>, followed by the elements of <var>argumentsList</var>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>F</var>, <var>newTarget</var>) is <emu-val>true</emu-val>, set <var>newTarget</var> to <var>target</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>target</var>, <var>args</var>, <var>newTarget</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-functiondeclarationinstantiation": {"num": "9.2.10", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>The abstract operation FunctionDeclarationInstantiation takes arguments <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be IsSimpleParameterList of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be ContainsExpression of <var>formals</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the LexicallyDeclaredNames of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <emu-val>\"arguments\"</emu-val> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <emu-val>\"arguments\"</emu-val> is an element of <var>functionNames</var> or if <emu-val>\"arguments\"</emu-val> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that bindings created by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls in the formal parameter list are outside the environment where parameters are declared.</li><li>Let <var>calleeEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>calleeEnv</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The VariableEnvironment of <var>calleeContext</var> is <var>calleeEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>env</var>.</li></ol></li><li>For each String <var>paramName</var> of <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>env</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>env</var>.InitializeBinding(<emu-val>\"arguments\"</emu-val>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the elements of <var>parameterNames</var>, followed by <emu-val>\"arguments\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>env</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>env</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnv</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li id=\"step-functiondeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in <emu-xref href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\">#sec-function-definitions-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-static-semantics-prototypepropertynamelist": {"num": "14.6.12", "title": "#sec-static-semantics-prototypepropertynamelist Static Semantics: PrototypePropertyNameList", "html": "<emu-clause id=\"sec-static-semantics-prototypepropertynamelist\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-prototypepropertynamelist\">#sec-static-semantics-prototypepropertynamelist</span> Static Semantics: PrototypePropertyNameList</h1>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"711bcbba\"><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If PropName of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>empty</emu-const>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If IsStatic of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing PropName of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9ac50b6a\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>list</var> be PrototypePropertyNameList of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>.</li><li>If PropName of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>empty</emu-const>, return <var>list</var>.</li><li>If IsStatic of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return <var>list</var>.</li><li>Append PropName of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> to the end of <var>list</var>.</li><li>Return <var>list</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-exportentriesformodule": {"num": "15.2.3.6", "title": "#sec-static-semantics-exportentriesformodule Static Semantics: ExportEntriesForModule", "html": "<emu-clause id=\"sec-static-semantics-exportentriesformodule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-exportentriesformodule\">#sec-static-semantics-exportentriesformodule</span> Static Semantics: ExportEntriesForModule</h1>\n        <p>With parameter <var>module</var>.</p>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b01e734d\"><emu-t>*</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <emu-val>null</emu-val> }.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"76d083ed\"><emu-t>*</emu-t><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>exportName</var> be the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>exportName</var> }.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1907cd0c\"><emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>specs</var> be the ExportEntriesForModule of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>specs</var> the elements of the ExportEntriesForModule of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>specs</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>sourceName</var> be the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If <var>module</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>localName</var> be <var>sourceName</var>.</li><li>Let <var>importName</var> be <emu-val>null</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>localName</var> be <emu-val>null</emu-val>.</li><li>Let <var>importName</var> be <var>sourceName</var>.</li></ol></li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <var>sourceName</var> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a9552c46\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>sourceName</var> be the StringValue of the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>exportName</var> be the StringValue of the second <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If <var>module</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>localName</var> be <var>sourceName</var>.</li><li>Let <var>importName</var> be <emu-val>null</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>localName</var> be <emu-val>null</emu-val>.</li><li>Let <var>importName</var> be <var>sourceName</var>.</li></ol></li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <var>exportName</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-modulenamespacecreate": {"num": "9.4.6.11", "title": "#sec-modulenamespacecreate ModuleNamespaceCreate ( module, exports )", "html": "<emu-clause id=\"sec-modulenamespacecreate\" aoid=\"ModuleNamespaceCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-modulenamespacecreate\">#sec-modulenamespacecreate</span> ModuleNamespaceCreate ( <var>module</var>, <var>exports</var> )</h1>\n        <p>The abstract operation ModuleNamespaceCreate takes arguments <var>module</var> and <var>exports</var>. It is used to specify the creation of new module namespace exotic objects. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Namespace]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>exports</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String values.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-module-namespace-exotic-objects\"><a href=\"#table-internal-slots-of-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-module-namespace-exotic-objects\">#table-internal-slots-of-module-namespace-exotic-objects</a></emu-xref>.</li><li>Let <var>M</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>M</var>'s essential internal methods to the definitions specified in <emu-xref href=\"#sec-module-namespace-exotic-objects\"><a href=\"#sec-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-exotic-objects\">#sec-module-namespace-exotic-objects</a></emu-xref>.</li><li>Set <var>M</var>.[[Prototype]] to <emu-val>null</emu-val>.</li><li>Set <var>M</var>.[[Module]] to <var>module</var>.</li><li>Let <var>sortedExports</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the elements of <var>exports</var> ordered as if an Array of the same values had been sorted using <code>Array.prototype.sort</code> using <emu-val>undefined</emu-val> as <var>comparefn</var>.</li><li>Set <var>M</var>.[[Exports]] to <var>sortedExports</var>.</li><li>Create own properties of <var>M</var> corresponding to the definitions in <emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>.</li><li>Set <var>module</var>.[[Namespace]] to <var>M</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-static-semantics-nonconstructormethoddefinitions": {"num": "14.6.11", "title": "#sec-static-semantics-nonconstructormethoddefinitions Static Semantics: NonConstructorMethodDefinitions", "html": "<emu-clause id=\"sec-static-semantics-nonconstructormethoddefinitions\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-nonconstructormethoddefinitions\">#sec-static-semantics-nonconstructormethoddefinitions</span> Static Semantics: NonConstructorMethodDefinitions</h1>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"711bcbba\"><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If ClassElementKind of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>NonConstructorMethod</emu-const>, then<ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>.</li></ol></li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9ac50b6a\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>list</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>.</li><li>If ClassElementKind of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>NonConstructorMethod</emu-const>, then<ol><li>Append <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> to the end of <var>list</var>.</li></ol></li><li>Return <var>list</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-propertynamelist": {"num": "12.2.6.6", "title": "#sec-static-semantics-propertynamelist Static Semantics: PropertyNameList", "html": "<emu-clause id=\"sec-static-semantics-propertynamelist\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-propertynamelist\">#sec-static-semantics-propertynamelist</span> Static Semantics: PropertyNameList</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"671a051b\"><emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If PropName of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is <emu-const>empty</emu-const>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing PropName of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3152d601\"><emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>list</var> be PropertyNameList of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>.</li><li>If PropName of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is <emu-const>empty</emu-const>, return <var>list</var>.</li><li>Append PropName of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> to the end of <var>list</var>.</li><li>Return <var>list</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-block-static-semantics-toplevellexicallyscopeddeclarations": {"num": "13.2.8", "title": "#sec-block-static-semantics-toplevellexicallyscopeddeclarations Static Semantics: TopLevelLexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\">#sec-block-static-semantics-toplevellexicallyscopeddeclarations</span> Static Semantics: TopLevelLexicallyScopedDeclarations</h1>\n      <emu-see-also-para op=\"TopLevelLexicallyScopedDeclarations\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0db4597a\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be TopLevelLexicallyScopedDeclarations of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the TopLevelLexicallyScopedDeclarations of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a72ca256\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d6f37721\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"62452cb6\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> , then<ol><li>Return &#171; &#187;.</li></ol></li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization": {"num": "13.3.3.6", "title": "#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization Runtime Semantics: PropertyBindingInitialization", "html": "<emu-clause id=\"sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\">#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization</span> Runtime Semantics: PropertyBindingInitialization</h1>\n        <p>With parameters <var>value</var> and <var>environment</var>.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">These collect a list of all bound property names rather than just empty completion.</div></emu-note>\n\n        <emu-grammar><emu-production name=\"BindingPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0730de3b\"><emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>boundNames</var> be ? PropertyBindingInitialization of <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt> with arguments <var>value</var> and <var>environment</var>.</li><li>Let <var>nextNames</var> be ? PropertyBindingInitialization of <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt> with arguments <var>value</var> and <var>environment</var>.</li><li>Append each item in <var>nextNames</var> to the end of <var>boundNames</var>.</li><li>Return <var>boundNames</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"BindingProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"94e17c00\"><emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>name</var> be the string that is the only element of BoundNames of <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt>.</li><li>Perform ? KeyedBindingInitialization for <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> using <var>value</var>, <var>environment</var>, and <var>name</var> as the arguments.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>name</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"BindingProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"987bd1c2\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>P</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>P</var>).</li><li>Perform ? KeyedBindingInitialization of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> with <var>value</var>, <var>environment</var>, and <var>P</var> as the arguments.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>P</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-decode": {"num": "18.2.6.1.2", "title": "#sec-decode Decode ( string, reservedSet )", "html": "<emu-clause id=\"sec-decode\" aoid=\"Decode\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-decode\">#sec-decode</span> Decode ( <var>string</var>, <var>reservedSet</var> )</h1>\n          <p>The abstract operation Decode takes arguments <var>string</var> (a String) and <var>reservedSet</var> (a String). It performs URI unescaping and decoding. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>strLen</var> be the length of <var>string</var>.</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> equals <var>strLen</var>, return <var>R</var>.</li><li>Let <var>C</var> be the code unit at index <var>k</var> within <var>string</var>.</li><li>If <var>C</var> is not the code unit 0x0025 (PERCENT SIGN), then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>start</var> be <var>k</var>.</li><li>If <var>k</var> + 2 is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>Let <var>n</var> be the number of leading 1 bits in <var>B</var>.</li><li>If <var>n</var> = 0, then<ol><li>Let <var>C</var> be the code unit whose value is <var>B</var>.</li><li>If <var>C</var> is not in <var>reservedSet</var>, then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>S</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>start</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>If <var>n</var> = 1 or <var>n</var> &gt; 4, throw a <emu-val>URIError</emu-val> exception.</li><li>If <var>k</var> + (3 &#215; (<var>n</var> - 1)) is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>Octets</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>B</var>.</li><li>Let <var>j</var> be 1.</li><li>Repeat, while <var>j</var> &lt; <var>n</var>,<ol><li>Set <var>k</var> to <var>k</var> + 1.</li><li>If the code unit at index <var>k</var> within <var>string</var> is not the code unit 0x0025 (PERCENT SIGN), throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>Append <var>B</var> to <var>Octets</var>.</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The length of <var>Octets</var> is <var>n</var>.</li><li>If <var>Octets</var> does not contain a valid UTF-8 encoding of a Unicode code point, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>V</var> be the value obtained by applying the UTF-8 transformation to <var>Octets</var>, that is, from a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of octets into a 21-bit value.</li><li>Let <var>S</var> be the String value whose code units are the elements in <emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>V</var>).</li></ol></li></ol></li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>S</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>This syntax of Uniform Resource Identifiers is based upon RFC 2396 and does not reflect the more recent RFC 3986 which replaces RFC 2396. A formal description and implementation of UTF-8 is given in RFC 3629.</p>\n            <p>In UTF-8, characters are encoded using sequences of 1 to 6 octets. The only octet of a sequence of one has the higher-order bit set to 0, the remaining 7 bits being used to encode the character value. In a sequence of n octets, n &gt; 1, the initial octet has the n higher-order bits set to 1, followed by a bit set to 0. The remaining bits of that octet contain bits from the value of the character to be encoded. The following octets all have the higher-order bit set to 1 and the following bit set to 0, leaving 6 bits in each to contain bits from the character to be encoded. The possible UTF-8 encodings of ECMAScript characters are specified in <emu-xref href=\"#table-utf-8-encodings\"><a href=\"#table-utf-8-encodings\" class=\"excluded-xref\" excluded-id=\"table-utf-8-encodings\">#table-utf-8-encodings</a></emu-xref>.</p>\n            <emu-table id=\"table-utf-8-encodings\" caption=\"UTF-8 Encodings\" informative=\"\" oldids=\"table-43\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-utf-8-encodings\">#table-utf-8-encodings</span> (Informative): UTF-8 Encodings</figcaption><span id=\"table-43\"></span>\n              <table>\n                <tbody>\n                <tr>\n                  <th>\n                    Code Unit Value\n                  </th>\n                  <th>\n                    Representation\n                  </th>\n                  <th>\n                    1<sup>st</sup> Octet\n                  </th>\n                  <th>\n                    2<sup>nd</sup> Octet\n                  </th>\n                  <th>\n                    3<sup>rd</sup> Octet\n                  </th>\n                  <th>\n                    4<sup>th</sup> Octet\n                  </th>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0000 - 0x007F</code>\n                  </td>\n                  <td>\n                    <code>00000000 0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0080 - 0x07FF</code>\n                  </td>\n                  <td>\n                    <code>00000<i>yyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>110<i>yyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0800 - 0xD7FF</code>\n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    <br>\n                    followed by\n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    <code>110110<i>vv vvwwwwxx</i></code>\n                    <br>\n                    followed by\n                    <br>\n                    <code>110111<i>yy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>11110<i>uuu</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>uuwwww</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>xxyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    <br>\n                    not followed by\n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xE000 - 0xFFFF</code>\n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                </tbody>\n              </table>\n            </figure></emu-table>\n            <p>Where\n              <br>\n                <var>uuuuu</var> = <var>vvvv</var> + 1\n              <br>\n              to account for the addition of 0x10000 as in section 3.8 of the Unicode Standard (Surrogates).</p>\n            <p>The above transformation combines each <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> (for which code unit values in the inclusive range 0xD800 to 0xDFFF are reserved) into a UTF-32 representation and encodes the resulting 21-bit value into UTF-8. Decoding reconstructs the <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref>.</p>\n            <p>RFC 3629 prohibits the decoding of invalid UTF-8 octet sequences. For example, the invalid sequence C0 80 must not decode into the code unit 0x0000. Implementations of the Decode algorithm are required to throw a <emu-val>URIError</emu-val> when encountering such invalid sequences.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a2e02ff2\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>in</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsDuplicateLabels in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\">#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedBreakTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedContinueTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of IsDestructuring in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">#sec-for-in-and-for-of-statements-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" id=\"prod-annexB-BindingIdentifier\">\n    <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarDeclaredNames in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\">#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarScopedDeclarations in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of LabelledEvaluation in <emu-xref href=\"#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\"><a href=\"#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\">#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-template-literals-runtime-semantics-argumentlistevaluation": {"num": "12.2.9.3", "title": "#sec-template-literals-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation", "html": "<emu-clause id=\"sec-template-literals-runtime-semantics-argumentlistevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-template-literals-runtime-semantics-argumentlistevaluation\">#sec-template-literals-runtime-semantics-argumentlistevaluation</span> Runtime Semantics: ArgumentListEvaluation</h1>\n        <emu-see-also-para op=\"ArgumentListEvaluation\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the one element which is <var>siteObj</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1dab93f5\"><emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Let <var>remaining</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose first element is <var>siteObj</var> and whose subsequent elements are the elements of <var>remaining</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be95cc40\"><emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>firstSubRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>firstSub</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>firstSubRef</var>).</li><li>Let <var>restSub</var> be ? SubstitutionEvaluation of <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>restSub</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose first element is <var>firstSub</var> and whose subsequent elements are the elements of <var>restSub</var>. <var>restSub</var> may contain no elements.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-imports-static-semantics-modulerequests": {"num": "15.2.2.5", "title": "#sec-imports-static-semantics-modulerequests Static Semantics: ModuleRequests", "html": "<emu-clause id=\"sec-imports-static-semantics-modulerequests\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-imports-static-semantics-modulerequests\">#sec-imports-static-semantics-modulerequests</span> Static Semantics: ModuleRequests</h1>\n        <emu-see-also-para op=\"ModuleRequests\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ImportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1a51d4c5\"><emu-t>import</emu-t><emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return ModuleRequests of <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the StringValue of <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-propertydestructuringassignmentevaluation": {"num": "12.15.7.3", "title": "#sec-runtime-semantics-propertydestructuringassignmentevaluation Runtime Semantics: PropertyDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\">#sec-runtime-semantics-propertydestructuringassignmentevaluation</span> Runtime Semantics: PropertyDestructuringAssignmentEvaluation</h1>\n        <p>With parameter <var>value</var>.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The following operations collect a list of all destructured property names.</div></emu-note>\n\n        <emu-grammar><emu-production name=\"AssignmentPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3680459\"><emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>propertyNames</var> be ? PropertyDestructuringAssignmentEvaluation of <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt> with argument <var>value</var>.</li><li>Let <var>nextNames</var> be ? PropertyDestructuringAssignmentEvaluation of <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> with argument <var>value</var>.</li><li>Append each item in <var>nextNames</var> to the end of <var>propertyNames</var>.</li><li>Return <var>propertyNames</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c55f7708\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>P</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>lref</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>P</var>).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>P</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing NamedEvaluation for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>P</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>P</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c9ac8882\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>name</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>name</var>).</li><li>Perform ? KeyedDestructuringAssignmentEvaluation of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>value</var> and <var>name</var> as the arguments.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>name</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-getvaluefrombuffer": {"num": "24.1.2.10", "title": "#sec-getvaluefrombuffer GetValueFromBuffer ( arrayBuffer, byteIndex, type, isTypedArray, order [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getvaluefrombuffer\" aoid=\"GetValueFromBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getvaluefrombuffer\">#sec-getvaluefrombuffer</span> GetValueFromBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>isTypedArray</var>, <var>order</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetValueFromBuffer takes arguments <var>arrayBuffer</var> (an ArrayBuffer or SharedArrayBuffer), <var>byteIndex</var> (an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>type</var> (a TypedArray element type), <var>isTypedArray</var> (a Boolean), and <var>order</var> (either <emu-const>SeqCst</emu-const> or <emu-const>Unordered</emu-const>) and optional argument <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>byteIndex</var>) is <emu-val>true</emu-val>.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>If <var>isTypedArray</var> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsNoTearConfiguration\"><a href=\"#sec-isnotearconfiguration\">IsNoTearConfiguration</a></emu-xref>(<var>type</var>, <var>order</var>) is <emu-val>true</emu-val>, let <var>noTear</var> be <emu-val>true</emu-val>; otherwise let <var>noTear</var> be <emu-val>false</emu-val>.</li><li>Let <var>rawValue</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> of nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawValue</var> is the result of a non-atomic or atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>readEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> { [[Order]]: <var>order</var>, [[NoTear]]: <var>noTear</var>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var> }.</li><li>Append <var>readEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>readEvent</var>, [[ChosenValue]]: <var>rawValue</var> } to <var>execution</var>.[[ChosenValues]].</li></ol></li><li>Else, let <var>rawValue</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing bytes from <var>block</var> at indices <var>byteIndex</var> (inclusive) through <var>byteIndex</var> + <var>elementSize</var> (exclusive).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The number of elements in <var>rawValue</var> is <var>elementSize</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawValue</var>, <var>isLittleEndian</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-identifiers-static-semantics-boundnames": {"num": "12.1.2", "title": "#sec-identifiers-static-semantics-boundnames Static Semantics: BoundNames", "html": "<emu-clause id=\"sec-identifiers-static-semantics-boundnames\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifiers-static-semantics-boundnames\">#sec-identifiers-static-semantics-boundnames</span> Static Semantics: BoundNames</h1>\n      <emu-see-also-para op=\"BoundNames\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the StringValue of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <emu-val>\"yield\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <emu-val>\"await\"</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-labelled-statements-static-semantics-lexicallyscopeddeclarations": {"num": "13.13.7", "title": "#sec-labelled-statements-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations\">#sec-labelled-statements-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n      <emu-see-also-para op=\"LexicallyScopedDeclarations\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"51b6efb5\"><emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the LexicallyScopedDeclarations of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a72ca256\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-importentriesformodule": {"num": "15.2.2.4", "title": "#sec-static-semantics-importentriesformodule Static Semantics: ImportEntriesForModule", "html": "<emu-clause id=\"sec-static-semantics-importentriesformodule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-importentriesformodule\">#sec-static-semantics-importentriesformodule</span> Static Semantics: ImportEntriesForModule</h1>\n        <p>With parameter <var>module</var>.</p>\n        <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cbd47597\"><emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be ImportEntriesForModule of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>entries</var> the elements of the ImportEntriesForModule of <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8a1f1182\"><emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be ImportEntriesForModule of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>entries</var> the elements of the ImportEntriesForModule of <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportedDefaultBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bedec05a\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the sole element of BoundNames of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>defaultEntry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"default\"</emu-val>, [[LocalName]]: <var>localName</var> }.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>defaultEntry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NameSpaceImport\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7641ff3\"><emu-t>*</emu-t><emu-t>as</emu-t><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the StringValue of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <var>localName</var> }.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedImports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82009fbc\"><emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>specs</var> be the ImportEntriesForModule of <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>specs</var> the elements of the ImportEntriesForModule of <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>specs</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bedec05a\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the sole element of BoundNames of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>localName</var>, [[LocalName]]: <var>localName</var> }.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"38da6908\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-t>as</emu-t><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>importName</var> be the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>localName</var> be the StringValue of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var> }.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>entry</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-exports-static-semantics-exportentries": {"num": "15.2.3.5", "title": "#sec-exports-static-semantics-exportentries Static Semantics: ExportEntries", "html": "<emu-clause id=\"sec-exports-static-semantics-exportentries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-static-semantics-exportentries\">#sec-exports-static-semantics-exportentries</span> Static Semantics: ExportEntries</h1>\n        <emu-see-also-para op=\"ExportEntries\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0a40575\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be the sole element of ModuleRequests of <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>.</li><li>Return ExportEntriesForModule of <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> with argument <var>module</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2762c7fe\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return ExportEntriesForModule of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> with argument <emu-val>null</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6c6de801\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>For each element <var>name</var> of <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"828f5ae3\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li><li>For each element <var>name</var> of <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71d1417e\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3c3cb8d\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e1fe9c4f\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <emu-val>\"*default*\"</emu-val>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>entry</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-val>\"*default*\"</emu-val> is used within this specification as a synthetic name for anonymous default export values.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-numerictorawbytes": {"num": "24.1.2.11", "title": "#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )", "html": "<emu-clause id=\"sec-numerictorawbytes\" aoid=\"NumericToRawBytes\" oldids=\"sec-numbertorawbytes\"><span id=\"sec-numbertorawbytes\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numerictorawbytes\">#sec-numerictorawbytes</span> NumericToRawBytes ( <var>type</var>, <var>value</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation NumericToRawBytes takes arguments <var>type</var> (a TypedArray element type), <var>value</var> (a BigInt or a Number), and <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 4 bytes that are the result of converting <var>value</var> to <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 format using roundTiesToEven mode. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else if <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 8 bytes that are the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 format encoding of <var>value</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>convOp</var> be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>intValue</var> be <var>convOp</var>(<var>value</var>) treated as a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>, whether the result is a BigInt or Number.</li><li>If <var>intValue</var> &#8805; 0<sub>&#8477;</sub>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li><li>Else,<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary two's complement encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li></ol></li><li>Return <var>rawBytes</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-block-static-semantics-lexicallyscopeddeclarations": {"num": "13.2.6", "title": "#sec-block-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-block-static-semantics-lexicallyscopeddeclarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-static-semantics-lexicallyscopeddeclarations\">#sec-block-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n      <emu-see-also-para op=\"LexicallyScopedDeclarations\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0db4597a\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be LexicallyScopedDeclarations of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the LexicallyScopedDeclarations of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a72ca256\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"08827f68\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> , return LexicallyScopedDeclarations of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d6f37721\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing DeclarationPart of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-exports-static-semantics-lexicallyscopeddeclarations": {"num": "15.2.3.8", "title": "#sec-exports-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-exports-static-semantics-lexicallyscopeddeclarations\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-static-semantics-lexicallyscopeddeclarations\">#sec-exports-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n        <emu-see-also-para op=\"LexicallyScopedDeclarations\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0a40575\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"2762c7fe\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"6c6de801\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"828f5ae3\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing DeclarationPart of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71d1417e\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing DeclarationPart of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3c3cb8d\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e1fe9c4f\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-argument-lists-runtime-semantics-argumentlistevaluation": {"num": "12.3.8.1", "title": "#sec-argument-lists-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation", "html": "<emu-clause id=\"sec-argument-lists-runtime-semantics-argumentlistevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-argument-lists-runtime-semantics-argumentlistevaluation\">#sec-argument-lists-runtime-semantics-argumentlistevaluation</span> Runtime Semantics: ArgumentListEvaluation</h1>\n        <emu-see-also-para op=\"ArgumentListEvaluation\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"Arguments\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"78e44c33\"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d4fc7da4\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole item is <var>arg</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5bb8853e\"><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>list</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>list</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>list</var>.</li></ol></li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7ff23fee\"><emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Append <var>arg</var> to the end of <var>precedingArgs</var>.</li><li>Return <var>precedingArgs</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"678ad0f9\"><emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>)).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>precedingArgs</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>precedingArgs</var>.</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {"table-internal-slots-of-module-namespace-exotic-objects": "Table 30", "table-utf-8-encodings": "Table 48", "table-the-typedarray-constructors": "Table 62"}}, "to": {"secList": ["sec-bound-function-exotic-objects-call-thisargument-argumentslist", "sec-variable-statement-static-semantics-varscopeddeclarations", "sec-exports-static-semantics-exportednames", "sec-static-semantics-referencedbindings", "sec-pattern", "sec-runtime-semantics-substitutionevaluation", "sec-exports-static-semantics-exportedbindings", "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations", "sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations", "sec-static-semantics-templatestrings", "sec-bound-function-exotic-objects-construct-argumentslist-newtarget", "sec-functiondeclarationinstantiation", "sec-static-semantics-prototypepropertynamelist", "sec-static-semantics-exportentriesformodule", "sec-modulenamespacecreate", "sec-static-semantics-nonconstructormethoddefinitions", "sec-static-semantics-propertynamelist", "sec-block-static-semantics-toplevellexicallyscopeddeclarations", "sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization", "sec-decode", "sec-initializers-in-forin-statement-heads", "sec-template-literals-runtime-semantics-argumentlistevaluation", "sec-imports-static-semantics-modulerequests", "sec-runtime-semantics-propertydestructuringassignmentevaluation", "sec-getvaluefrombuffer", "sec-identifiers-static-semantics-boundnames", "sec-labelled-statements-static-semantics-lexicallyscopeddeclarations", "sec-static-semantics-importentriesformodule", "sec-exports-static-semantics-exportentries", "sec-numerictorawbytes", "sec-block-static-semantics-lexicallyscopeddeclarations", "sec-exports-static-semantics-lexicallyscopeddeclarations", "sec-argument-lists-runtime-semantics-argumentlistevaluation"], "secData": {"sec-bound-function-exotic-objects-call-thisargument-argumentslist": {"num": "9.4.1.1", "title": "#sec-bound-function-exotic-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">#sec-bound-function-exotic-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n        <p>When the [[Call]] internal method of a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref>, <var>F</var>, which was created using the bind function is called with parameters <var>thisArgument</var> and <var>argumentsList</var>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>target</var> be <var>F</var>.[[BoundTargetFunction]].</li><li>Let <var>boundThis</var> be <var>F</var>.[[BoundThis]].</li><li>Let <var>boundArgs</var> be <var>F</var>.[[BoundArguments]].</li><li>Let <var>args</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>boundArgs</var>, followed by the elements of <var>argumentsList</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>target</var>, <var>boundThis</var>, <var>args</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-variable-statement-static-semantics-varscopeddeclarations": {"num": "13.3.2.3", "title": "#sec-variable-statement-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations", "html": "<emu-clause id=\"sec-variable-statement-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement-static-semantics-varscopeddeclarations\">#sec-variable-statement-static-semantics-varscopeddeclarations</span> Static Semantics: VarScopedDeclarations</h1>\n        <emu-see-also-para op=\"VarScopedDeclarations\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"377a6210\"><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a0057011\"><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>declarations</var> be VarScopedDeclarations of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> to <var>declarations</var>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-exports-static-semantics-exportednames": {"num": "15.2.3.4", "title": "#sec-exports-static-semantics-exportednames Static Semantics: ExportedNames", "html": "<emu-clause id=\"sec-exports-static-semantics-exportednames\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-static-semantics-exportednames\">#sec-exports-static-semantics-exportednames</span> Static Semantics: ExportedNames</h1>\n        <emu-see-also-para op=\"ExportedNames\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0a40575\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the ExportedNames of <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b01e734d\"><emu-t>*</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"76d083ed\"><emu-t>*</emu-t><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fd74b9b6\"><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the ExportedNames of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6c6de801\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"828f5ae3\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71d1417e\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3c3cb8d\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e1fe9c4f\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return &#171; <emu-val>\"default\"</emu-val> &#187;.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1907cd0c\"><emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the ExportedNames of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the ExportedNames of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a9552c46\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the StringValue of the second <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-referencedbindings": {"num": "15.2.3.10", "title": "#sec-static-semantics-referencedbindings Static Semantics: ReferencedBindings", "html": "<emu-clause id=\"sec-static-semantics-referencedbindings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-referencedbindings\">#sec-static-semantics-referencedbindings</span> Static Semantics: ReferencedBindings</h1>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1907cd0c\"><emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the ReferencedBindings of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the ReferencedBindings of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a9552c46\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-pattern": {"num": "21.2.2.2", "title": "#sec-pattern Pattern", "html": "<emu-clause id=\"sec-pattern\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern\">#sec-pattern</span> Pattern</h1>\n        <p>The production <emu-grammar><emu-production name=\"Pattern\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"79a5bbd0\"><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with +1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>str</var>, <var>index</var>) that captures <var>m</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>index</var>) is <emu-val>true</emu-val> and <var>index</var> &#8804; the length of <var>str</var>.</li><li>If <var>Unicode</var> is <emu-val>true</emu-val>, let <var>Input</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>str</var>). Otherwise, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code units that are the elements of <var>str</var>. <var>Input</var> will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>. Each element of <var>Input</var> is considered to be a character.</li><li>Let <var>InputLength</var> be the number of characters contained in <var>Input</var>. This alias will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>.</li><li>Let <var>listIndex</var> be the index into <var>Input</var> of the character that was obtained from element <var>index</var> of <var>str</var>.</li><li>Let <var>c</var> be a new Continuation with parameters (<var>y</var>) that captures nothing and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li>Return <var>y</var>.</li></ol></li><li>Let <var>cap</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> <emu-val>undefined</emu-val> values, indexed 1 through <var>NcapturingParens</var>.</li><li>Let <var>x</var> be the State (<var>listIndex</var>, <var>cap</var>).</li><li>Return <var>m</var>(<var>x</var>, <var>c</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A Pattern evaluates (&#8220;compiles&#8221;) to an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> value. <emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref> can then apply this procedure to a String and an offset within the String to determine whether the pattern would match starting at exactly that offset within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> are designed so that compiling a pattern may throw a <emu-val>SyntaxError</emu-val> exception; on the other hand, once the pattern is successfully compiled, applying the resulting <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> to find a match in a String cannot throw an exception (except for any <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> exceptions that can occur anywhere such as out-of-memory).</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-substitutionevaluation": {"num": "12.2.9.5", "title": "#sec-runtime-semantics-substitutionevaluation Runtime Semantics: SubstitutionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-substitutionevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-substitutionevaluation\">#sec-runtime-semantics-substitutionevaluation</span> Runtime Semantics: SubstitutionEvaluation</h1>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b0b4f425\"><emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the result of SubstitutionEvaluation of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dc7ec961\"><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>subRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>sub</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>subRef</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>sub</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47acf041\"><emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>preceding</var> be ? SubstitutionEvaluation of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>.</li><li>Let <var>nextRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>nextRef</var>).</li><li>Append <var>next</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>preceding</var>.</li><li>Return <var>preceding</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-exports-static-semantics-exportedbindings": {"num": "15.2.3.3", "title": "#sec-exports-static-semantics-exportedbindings Static Semantics: ExportedBindings", "html": "<emu-clause id=\"sec-exports-static-semantics-exportedbindings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-static-semantics-exportedbindings\">#sec-exports-static-semantics-exportedbindings</span> Static Semantics: ExportedBindings</h1>\n        <emu-see-also-para op=\"ExportedBindings\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0a40575\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2762c7fe\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the ExportedBindings of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6c6de801\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"828f5ae3\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71d1417e\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3c3cb8d\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e1fe9c4f\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BoundNames of this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1907cd0c\"><emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the ExportedBindings of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the ExportedBindings of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a9552c46\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the StringValue of the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys": {"num": "9.5.11", "title": "#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n      <p>When the [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"ownKeys\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[OwnPropertyKeys]]().</li></ol></li><li>Let <var>trapResultArray</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var> &#187;).</li><li>Let <var>trapResult</var> be ?&#160;<emu-xref aoid=\"CreateListFromArrayLike\"><a href=\"#sec-createlistfromarraylike\">CreateListFromArrayLike</a></emu-xref>(<var>trapResultArray</var>, &#171; String, Symbol &#187;).</li><li>If <var>trapResult</var> contains any duplicate entries, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>targetKeys</var> be ? <var>target</var>.[[OwnPropertyKeys]]().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are only String and Symbol values.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> contains no duplicate entries.</li><li>Let <var>targetConfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>targetNonconfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>targetKeys</var>, do<ol><li>Let <var>desc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>Append <var>key</var> as an element of <var>targetNonconfigurableKeys</var>.</li></ol></li><li>Else,<ol><li>Append <var>key</var> as an element of <var>targetConfigurableKeys</var>.</li></ol></li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val> and <var>targetNonconfigurableKeys</var> is empty, then<ol><li>Return <var>trapResult</var>.</li></ol></li><li>Let <var>uncheckedResultKeys</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>trapResult</var>.</li><li>For each element <var>key</var> of <var>targetNonconfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val>, return <var>trapResult</var>.</li><li>For each element <var>key</var> of <var>targetConfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>uncheckedResultKeys</var> is not empty, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>trapResult</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[OwnPropertyKeys]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[OwnPropertyKeys]] is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> contains no duplicate entries.\n          </li>\n          <li>\n            The Type of each result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> element is either String or Symbol.\n          </li>\n          <li>\n            The result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain the keys of all non-configurable own properties of the target object.\n          </li>\n          <li>\n            If the target object is not extensible, then the result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain all the keys of the own properties of the target object and no other values.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations": {"num": "13.13.11", "title": "#sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations Static Semantics: TopLevelVarScopedDeclarations", "html": "<emu-clause id=\"sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\">#sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations</span> Static Semantics: TopLevelVarScopedDeclarations</h1>\n      <emu-see-also-para op=\"TopLevelVarScopedDeclarations\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"51b6efb5\"><emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the TopLevelVarScopedDeclarations of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a72ca256\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"08827f68\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> , return TopLevelVarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations": {"num": "13.7.5.8", "title": "#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations</span> Static Semantics: VarScopedDeclarations</h1>\n        <emu-see-also-para op=\"VarScopedDeclarations\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bf521b70\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2590ad81\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"8ea6608b\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"6f7c3304\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9a146e5f\"><emu-t>for</emu-t><emu-t>await</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b80b6675\"><emu-t>for</emu-t><emu-t>await</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ecf18944\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ee6f9a77\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7324ff96\"><emu-t>for</emu-t><emu-t>await</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-static-semantics-templatestrings": {"num": "12.2.9.2", "title": "#sec-static-semantics-templatestrings Static Semantics: TemplateStrings", "html": "<emu-clause id=\"sec-static-semantics-templatestrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-templatestrings\">#sec-static-semantics-templatestrings</span> Static Semantics: TemplateStrings</h1>\n        <p>With parameter <var>raw</var>.</p>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>string</var> be the TV of <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>string</var> be the TRV of <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>string</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be95cc40\"><emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>head</var> be the TV of <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>head</var> be the TRV of <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>.</li></ol></li><li>Let <var>tail</var> be TemplateStrings of <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> with argument <var>raw</var>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are <var>head</var> followed by the elements of <var>tail</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>tail</var> be the TV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>tail</var> be the TRV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>tail</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b0b4f425\"><emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>middle</var> be TemplateStrings of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> with argument <var>raw</var>.</li><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>tail</var> be the TV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>tail</var> be the TRV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>middle</var> followed by <var>tail</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dc7ec961\"><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>string</var> be the TV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>string</var> be the TRV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>string</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47acf041\"><emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>front</var> be TemplateStrings of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> with argument <var>raw</var>.</li><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>last</var> be the TV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>last</var> be the TRV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Append <var>last</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>front</var>.</li><li>Return <var>front</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-bound-function-exotic-objects-construct-argumentslist-newtarget": {"num": "9.4.1.2", "title": "#sec-bound-function-exotic-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">#sec-bound-function-exotic-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n        <p>When the [[Construct]] internal method of a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref>, <var>F</var> that was created using the bind function is called with a list of arguments <var>argumentsList</var> and <var>newTarget</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>target</var> be <var>F</var>.[[BoundTargetFunction]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>target</var>) is <emu-val>true</emu-val>.</li><li>Let <var>boundArgs</var> be <var>F</var>.[[BoundArguments]].</li><li>Let <var>args</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>boundArgs</var>, followed by the elements of <var>argumentsList</var>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>F</var>, <var>newTarget</var>) is <emu-val>true</emu-val>, set <var>newTarget</var> to <var>target</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>target</var>, <var>args</var>, <var>newTarget</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-functiondeclarationinstantiation": {"num": "9.2.10", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>The abstract operation FunctionDeclarationInstantiation takes arguments <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be IsSimpleParameterList of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be ContainsExpression of <var>formals</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the LexicallyDeclaredNames of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <emu-val>\"arguments\"</emu-val> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <emu-val>\"arguments\"</emu-val> is an element of <var>functionNames</var> or if <emu-val>\"arguments\"</emu-val> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that bindings created by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls in the formal parameter list are outside the environment where parameters are declared.</li><li>Let <var>calleeEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>calleeEnv</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The VariableEnvironment of <var>calleeContext</var> is <var>calleeEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>env</var>.</li></ol></li><li>For each String <var>paramName</var> of <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>env</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>env</var>.InitializeBinding(<emu-val>\"arguments\"</emu-val>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>parameterNames</var>, followed by <emu-val>\"arguments\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>env</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>env</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnv</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li id=\"step-functiondeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in <emu-xref href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\">#sec-function-definitions-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-static-semantics-prototypepropertynamelist": {"num": "14.6.12", "title": "#sec-static-semantics-prototypepropertynamelist Static Semantics: PrototypePropertyNameList", "html": "<emu-clause id=\"sec-static-semantics-prototypepropertynamelist\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-prototypepropertynamelist\">#sec-static-semantics-prototypepropertynamelist</span> Static Semantics: PrototypePropertyNameList</h1>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"711bcbba\"><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If PropName of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>empty</emu-const>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If IsStatic of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is PropName of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9ac50b6a\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>list</var> be PrototypePropertyNameList of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>.</li><li>If PropName of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>empty</emu-const>, return <var>list</var>.</li><li>If IsStatic of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return <var>list</var>.</li><li>Append PropName of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> to the end of <var>list</var>.</li><li>Return <var>list</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-exportentriesformodule": {"num": "15.2.3.6", "title": "#sec-static-semantics-exportentriesformodule Static Semantics: ExportEntriesForModule", "html": "<emu-clause id=\"sec-static-semantics-exportentriesformodule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-exportentriesformodule\">#sec-static-semantics-exportentriesformodule</span> Static Semantics: ExportEntriesForModule</h1>\n        <p>With parameter <var>module</var>.</p>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b01e734d\"><emu-t>*</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <emu-val>null</emu-val> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"76d083ed\"><emu-t>*</emu-t><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>exportName</var> be the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>exportName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1907cd0c\"><emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>specs</var> be the ExportEntriesForModule of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>specs</var> the elements of the ExportEntriesForModule of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>specs</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>sourceName</var> be the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If <var>module</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>localName</var> be <var>sourceName</var>.</li><li>Let <var>importName</var> be <emu-val>null</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>localName</var> be <emu-val>null</emu-val>.</li><li>Let <var>importName</var> be <var>sourceName</var>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <var>sourceName</var> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a9552c46\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-t>as</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>sourceName</var> be the StringValue of the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>exportName</var> be the StringValue of the second <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If <var>module</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>localName</var> be <var>sourceName</var>.</li><li>Let <var>importName</var> be <emu-val>null</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>localName</var> be <emu-val>null</emu-val>.</li><li>Let <var>importName</var> be <var>sourceName</var>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <var>exportName</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-modulenamespacecreate": {"num": "9.4.6.11", "title": "#sec-modulenamespacecreate ModuleNamespaceCreate ( module, exports )", "html": "<emu-clause id=\"sec-modulenamespacecreate\" aoid=\"ModuleNamespaceCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-modulenamespacecreate\">#sec-modulenamespacecreate</span> ModuleNamespaceCreate ( <var>module</var>, <var>exports</var> )</h1>\n        <p>The abstract operation ModuleNamespaceCreate takes arguments <var>module</var> and <var>exports</var>. It is used to specify the creation of new module namespace exotic objects. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Namespace]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>exports</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String values.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-module-namespace-exotic-objects\"><a href=\"#table-internal-slots-of-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-module-namespace-exotic-objects\">#table-internal-slots-of-module-namespace-exotic-objects</a></emu-xref>.</li><li>Let <var>M</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>M</var>'s essential internal methods to the definitions specified in <emu-xref href=\"#sec-module-namespace-exotic-objects\"><a href=\"#sec-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-exotic-objects\">#sec-module-namespace-exotic-objects</a></emu-xref>.</li><li>Set <var>M</var>.[[Prototype]] to <emu-val>null</emu-val>.</li><li>Set <var>M</var>.[[Module]] to <var>module</var>.</li><li>Let <var>sortedExports</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>exports</var> ordered as if an Array of the same values had been sorted using <code>Array.prototype.sort</code> using <emu-val>undefined</emu-val> as <var>comparefn</var>.</li><li>Set <var>M</var>.[[Exports]] to <var>sortedExports</var>.</li><li>Create own properties of <var>M</var> corresponding to the definitions in <emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>.</li><li>Set <var>module</var>.[[Namespace]] to <var>M</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-static-semantics-nonconstructormethoddefinitions": {"num": "14.6.11", "title": "#sec-static-semantics-nonconstructormethoddefinitions Static Semantics: NonConstructorMethodDefinitions", "html": "<emu-clause id=\"sec-static-semantics-nonconstructormethoddefinitions\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-nonconstructormethoddefinitions\">#sec-static-semantics-nonconstructormethoddefinitions</span> Static Semantics: NonConstructorMethodDefinitions</h1>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"711bcbba\"><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If ClassElementKind of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>NonConstructorMethod</emu-const>, then<ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>.</li></ol></li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9ac50b6a\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>list</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>.</li><li>If ClassElementKind of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>NonConstructorMethod</emu-const>, then<ol><li>Append <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> to the end of <var>list</var>.</li></ol></li><li>Return <var>list</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-propertynamelist": {"num": "12.2.6.6", "title": "#sec-static-semantics-propertynamelist Static Semantics: PropertyNameList", "html": "<emu-clause id=\"sec-static-semantics-propertynamelist\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-propertynamelist\">#sec-static-semantics-propertynamelist</span> Static Semantics: PropertyNameList</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"671a051b\"><emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If PropName of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is <emu-const>empty</emu-const>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is PropName of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3152d601\"><emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>list</var> be PropertyNameList of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>.</li><li>If PropName of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is <emu-const>empty</emu-const>, return <var>list</var>.</li><li>Append PropName of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> to the end of <var>list</var>.</li><li>Return <var>list</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-block-static-semantics-toplevellexicallyscopeddeclarations": {"num": "13.2.8", "title": "#sec-block-static-semantics-toplevellexicallyscopeddeclarations Static Semantics: TopLevelLexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\">#sec-block-static-semantics-toplevellexicallyscopeddeclarations</span> Static Semantics: TopLevelLexicallyScopedDeclarations</h1>\n      <emu-see-also-para op=\"TopLevelLexicallyScopedDeclarations\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0db4597a\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be TopLevelLexicallyScopedDeclarations of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the TopLevelLexicallyScopedDeclarations of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a72ca256\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d6f37721\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"62452cb6\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> , then<ol><li>Return &#171; &#187;.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization": {"num": "13.3.3.6", "title": "#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization Runtime Semantics: PropertyBindingInitialization", "html": "<emu-clause id=\"sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\">#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization</span> Runtime Semantics: PropertyBindingInitialization</h1>\n        <p>With parameters <var>value</var> and <var>environment</var>.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">These collect a list of all bound property names rather than just empty completion.</div></emu-note>\n\n        <emu-grammar><emu-production name=\"BindingPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0730de3b\"><emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>boundNames</var> be ? PropertyBindingInitialization of <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt> with arguments <var>value</var> and <var>environment</var>.</li><li>Let <var>nextNames</var> be ? PropertyBindingInitialization of <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt> with arguments <var>value</var> and <var>environment</var>.</li><li>Append each item in <var>nextNames</var> to the end of <var>boundNames</var>.</li><li>Return <var>boundNames</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"BindingProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"94e17c00\"><emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>name</var> be the string that is the only element of BoundNames of <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt>.</li><li>Perform ? KeyedBindingInitialization for <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> using <var>value</var>, <var>environment</var>, and <var>name</var> as the arguments.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>name</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"BindingProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"987bd1c2\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>P</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>P</var>).</li><li>Perform ? KeyedBindingInitialization of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> with <var>value</var>, <var>environment</var>, and <var>P</var> as the arguments.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>P</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-decode": {"num": "18.2.6.1.2", "title": "#sec-decode Decode ( string, reservedSet )", "html": "<emu-clause id=\"sec-decode\" aoid=\"Decode\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-decode\">#sec-decode</span> Decode ( <var>string</var>, <var>reservedSet</var> )</h1>\n          <p>The abstract operation Decode takes arguments <var>string</var> (a String) and <var>reservedSet</var> (a String). It performs URI unescaping and decoding. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>strLen</var> be the length of <var>string</var>.</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> equals <var>strLen</var>, return <var>R</var>.</li><li>Let <var>C</var> be the code unit at index <var>k</var> within <var>string</var>.</li><li>If <var>C</var> is not the code unit 0x0025 (PERCENT SIGN), then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>start</var> be <var>k</var>.</li><li>If <var>k</var> + 2 is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>Let <var>n</var> be the number of leading 1 bits in <var>B</var>.</li><li>If <var>n</var> = 0, then<ol><li>Let <var>C</var> be the code unit whose value is <var>B</var>.</li><li>If <var>C</var> is not in <var>reservedSet</var>, then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>S</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>start</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>If <var>n</var> = 1 or <var>n</var> &gt; 4, throw a <emu-val>URIError</emu-val> exception.</li><li>If <var>k</var> + (3 &#215; (<var>n</var> - 1)) is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>Octets</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>B</var>.</li><li>Let <var>j</var> be 1.</li><li>Repeat, while <var>j</var> &lt; <var>n</var>,<ol><li>Set <var>k</var> to <var>k</var> + 1.</li><li>If the code unit at index <var>k</var> within <var>string</var> is not the code unit 0x0025 (PERCENT SIGN), throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>Append <var>B</var> to <var>Octets</var>.</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The length of <var>Octets</var> is <var>n</var>.</li><li>If <var>Octets</var> does not contain a valid UTF-8 encoding of a Unicode code point, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>V</var> be the value obtained by applying the UTF-8 transformation to <var>Octets</var>, that is, from a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of octets into a 21-bit value.</li><li>Let <var>S</var> be the String value whose code units are the elements in <emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>V</var>).</li></ol></li></ol></li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>S</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>This syntax of Uniform Resource Identifiers is based upon RFC 2396 and does not reflect the more recent RFC 3986 which replaces RFC 2396. A formal description and implementation of UTF-8 is given in RFC 3629.</p>\n            <p>In UTF-8, characters are encoded using sequences of 1 to 6 octets. The only octet of a sequence of one has the higher-order bit set to 0, the remaining 7 bits being used to encode the character value. In a sequence of n octets, n &gt; 1, the initial octet has the n higher-order bits set to 1, followed by a bit set to 0. The remaining bits of that octet contain bits from the value of the character to be encoded. The following octets all have the higher-order bit set to 1 and the following bit set to 0, leaving 6 bits in each to contain bits from the character to be encoded. The possible UTF-8 encodings of ECMAScript characters are specified in <emu-xref href=\"#table-utf-8-encodings\"><a href=\"#table-utf-8-encodings\" class=\"excluded-xref\" excluded-id=\"table-utf-8-encodings\">#table-utf-8-encodings</a></emu-xref>.</p>\n            <emu-table id=\"table-utf-8-encodings\" caption=\"UTF-8 Encodings\" informative=\"\" oldids=\"table-43\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-utf-8-encodings\">#table-utf-8-encodings</span> (Informative): UTF-8 Encodings</figcaption><span id=\"table-43\"></span>\n              <table>\n                <tbody>\n                <tr>\n                  <th>\n                    Code Unit Value\n                  </th>\n                  <th>\n                    Representation\n                  </th>\n                  <th>\n                    1<sup>st</sup> Octet\n                  </th>\n                  <th>\n                    2<sup>nd</sup> Octet\n                  </th>\n                  <th>\n                    3<sup>rd</sup> Octet\n                  </th>\n                  <th>\n                    4<sup>th</sup> Octet\n                  </th>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0000 - 0x007F</code>\n                  </td>\n                  <td>\n                    <code>00000000 0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0080 - 0x07FF</code>\n                  </td>\n                  <td>\n                    <code>00000<i>yyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>110<i>yyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0800 - 0xD7FF</code>\n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    <br>\n                    followed by\n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    <code>110110<i>vv vvwwwwxx</i></code>\n                    <br>\n                    followed by\n                    <br>\n                    <code>110111<i>yy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>11110<i>uuu</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>uuwwww</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>xxyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    <br>\n                    not followed by\n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xE000 - 0xFFFF</code>\n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                </tbody>\n              </table>\n            </figure></emu-table>\n            <p>Where\n              <br>\n                <var>uuuuu</var> = <var>vvvv</var> + 1\n              <br>\n              to account for the addition of 0x10000 as in section 3.8 of the Unicode Standard (Surrogates).</p>\n            <p>The above transformation combines each <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> (for which code unit values in the inclusive range 0xD800 to 0xDFFF are reserved) into a UTF-32 representation and encodes the resulting 21-bit value into UTF-8. Decoding reconstructs the <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref>.</p>\n            <p>RFC 3629 prohibits the decoding of invalid UTF-8 octet sequences. For example, the invalid sequence C0 80 must not decode into the code unit 0x0000. Implementations of the Decode algorithm are required to throw a <emu-val>URIError</emu-val> when encountering such invalid sequences.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a2e02ff2\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>in</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsDuplicateLabels in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\">#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedBreakTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedContinueTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of IsDestructuring in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">#sec-for-in-and-for-of-statements-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" id=\"prod-annexB-BindingIdentifier\">\n    <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarDeclaredNames in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\">#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarScopedDeclarations in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of LabelledEvaluation in <emu-xref href=\"#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\"><a href=\"#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\">#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b97d96ca\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-template-literals-runtime-semantics-argumentlistevaluation": {"num": "12.2.9.3", "title": "#sec-template-literals-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation", "html": "<emu-clause id=\"sec-template-literals-runtime-semantics-argumentlistevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-template-literals-runtime-semantics-argumentlistevaluation\">#sec-template-literals-runtime-semantics-argumentlistevaluation</span> Runtime Semantics: ArgumentListEvaluation</h1>\n        <emu-see-also-para op=\"ArgumentListEvaluation\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>siteObj</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1dab93f5\"><emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Let <var>remaining</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose first element is <var>siteObj</var> and whose subsequent elements are the elements of <var>remaining</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be95cc40\"><emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>firstSubRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>firstSub</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>firstSubRef</var>).</li><li>Let <var>restSub</var> be ? SubstitutionEvaluation of <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>restSub</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose first element is <var>firstSub</var> and whose subsequent elements are the elements of <var>restSub</var>. <var>restSub</var> may contain no elements.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-imports-static-semantics-modulerequests": {"num": "15.2.2.5", "title": "#sec-imports-static-semantics-modulerequests Static Semantics: ModuleRequests", "html": "<emu-clause id=\"sec-imports-static-semantics-modulerequests\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-imports-static-semantics-modulerequests\">#sec-imports-static-semantics-modulerequests</span> Static Semantics: ModuleRequests</h1>\n        <emu-see-also-para op=\"ModuleRequests\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ImportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1a51d4c5\"><emu-t>import</emu-t><emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return ModuleRequests of <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the StringValue of <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-propertydestructuringassignmentevaluation": {"num": "12.15.7.3", "title": "#sec-runtime-semantics-propertydestructuringassignmentevaluation Runtime Semantics: PropertyDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\">#sec-runtime-semantics-propertydestructuringassignmentevaluation</span> Runtime Semantics: PropertyDestructuringAssignmentEvaluation</h1>\n        <p>With parameter <var>value</var>.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The following operations collect a list of all destructured property names.</div></emu-note>\n\n        <emu-grammar><emu-production name=\"AssignmentPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3680459\"><emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>propertyNames</var> be ? PropertyDestructuringAssignmentEvaluation of <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt> with argument <var>value</var>.</li><li>Let <var>nextNames</var> be ? PropertyDestructuringAssignmentEvaluation of <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> with argument <var>value</var>.</li><li>Append each item in <var>nextNames</var> to the end of <var>propertyNames</var>.</li><li>Return <var>propertyNames</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c55f7708\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>P</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>lref</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>P</var>).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>P</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing NamedEvaluation for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>P</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>P</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c9ac8882\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>name</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>name</var>).</li><li>Perform ? KeyedDestructuringAssignmentEvaluation of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>value</var> and <var>name</var> as the arguments.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>name</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-getvaluefrombuffer": {"num": "24.1.2.10", "title": "#sec-getvaluefrombuffer GetValueFromBuffer ( arrayBuffer, byteIndex, type, isTypedArray, order [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getvaluefrombuffer\" aoid=\"GetValueFromBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getvaluefrombuffer\">#sec-getvaluefrombuffer</span> GetValueFromBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>isTypedArray</var>, <var>order</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetValueFromBuffer takes arguments <var>arrayBuffer</var> (an ArrayBuffer or SharedArrayBuffer), <var>byteIndex</var> (an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>type</var> (a TypedArray element type), <var>isTypedArray</var> (a Boolean), and <var>order</var> (either <emu-const>SeqCst</emu-const> or <emu-const>Unordered</emu-const>) and optional argument <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>byteIndex</var>) is <emu-val>true</emu-val>.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>If <var>isTypedArray</var> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsNoTearConfiguration\"><a href=\"#sec-isnotearconfiguration\">IsNoTearConfiguration</a></emu-xref>(<var>type</var>, <var>order</var>) is <emu-val>true</emu-val>, let <var>noTear</var> be <emu-val>true</emu-val>; otherwise let <var>noTear</var> be <emu-val>false</emu-val>.</li><li>Let <var>rawValue</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> of nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawValue</var> is the result of a non-atomic or atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>readEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> { [[Order]]: <var>order</var>, [[NoTear]]: <var>noTear</var>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var> }.</li><li>Append <var>readEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>readEvent</var>, [[ChosenValue]]: <var>rawValue</var> } to <var>execution</var>.[[ChosenValues]].</li></ol></li><li>Else, let <var>rawValue</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are bytes from <var>block</var> at indices <var>byteIndex</var> (inclusive) through <var>byteIndex</var> + <var>elementSize</var> (exclusive).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The number of elements in <var>rawValue</var> is <var>elementSize</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawValue</var>, <var>isLittleEndian</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-identifiers-static-semantics-boundnames": {"num": "12.1.2", "title": "#sec-identifiers-static-semantics-boundnames Static Semantics: BoundNames", "html": "<emu-clause id=\"sec-identifiers-static-semantics-boundnames\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifiers-static-semantics-boundnames\">#sec-identifiers-static-semantics-boundnames</span> Static Semantics: BoundNames</h1>\n      <emu-see-also-para op=\"BoundNames\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the StringValue of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-val>\"yield\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-val>\"await\"</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-labelled-statements-static-semantics-lexicallyscopeddeclarations": {"num": "13.13.7", "title": "#sec-labelled-statements-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations\">#sec-labelled-statements-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n      <emu-see-also-para op=\"LexicallyScopedDeclarations\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"51b6efb5\"><emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the LexicallyScopedDeclarations of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a72ca256\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-importentriesformodule": {"num": "15.2.2.4", "title": "#sec-static-semantics-importentriesformodule Static Semantics: ImportEntriesForModule", "html": "<emu-clause id=\"sec-static-semantics-importentriesformodule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-importentriesformodule\">#sec-static-semantics-importentriesformodule</span> Static Semantics: ImportEntriesForModule</h1>\n        <p>With parameter <var>module</var>.</p>\n        <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cbd47597\"><emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be ImportEntriesForModule of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>entries</var> the elements of the ImportEntriesForModule of <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8a1f1182\"><emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be ImportEntriesForModule of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>entries</var> the elements of the ImportEntriesForModule of <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportedDefaultBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bedec05a\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the sole element of BoundNames of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>defaultEntry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"default\"</emu-val>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>defaultEntry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NameSpaceImport\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7641ff3\"><emu-t>*</emu-t><emu-t>as</emu-t><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the StringValue of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedImports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82009fbc\"><emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>specs</var> be the ImportEntriesForModule of <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>specs</var> the elements of the ImportEntriesForModule of <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>specs</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bedec05a\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the sole element of BoundNames of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>localName</var>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"38da6908\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-t>as</emu-t><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>importName</var> be the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>localName</var> be the StringValue of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-exports-static-semantics-exportentries": {"num": "15.2.3.5", "title": "#sec-exports-static-semantics-exportentries Static Semantics: ExportEntries", "html": "<emu-clause id=\"sec-exports-static-semantics-exportentries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-static-semantics-exportentries\">#sec-exports-static-semantics-exportentries</span> Static Semantics: ExportEntries</h1>\n        <emu-see-also-para op=\"ExportEntries\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0a40575\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be the sole element of ModuleRequests of <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>.</li><li>Return ExportEntriesForModule of <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> with argument <var>module</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2762c7fe\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return ExportEntriesForModule of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> with argument <emu-val>null</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6c6de801\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>For each element <var>name</var> of <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"828f5ae3\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li><li>For each element <var>name</var> of <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71d1417e\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3c3cb8d\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e1fe9c4f\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <emu-val>\"*default*\"</emu-val>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-val>\"*default*\"</emu-val> is used within this specification as a synthetic name for anonymous default export values.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-numerictorawbytes": {"num": "24.1.2.11", "title": "#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )", "html": "<emu-clause id=\"sec-numerictorawbytes\" aoid=\"NumericToRawBytes\" oldids=\"sec-numbertorawbytes\"><span id=\"sec-numbertorawbytes\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numerictorawbytes\">#sec-numerictorawbytes</span> NumericToRawBytes ( <var>type</var>, <var>value</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation NumericToRawBytes takes arguments <var>type</var> (a TypedArray element type), <var>value</var> (a BigInt or a Number), and <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the 4 bytes that are the result of converting <var>value</var> to <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 format using roundTiesToEven mode. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else if <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the 8 bytes that are the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 format encoding of <var>value</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>convOp</var> be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>intValue</var> be <var>convOp</var>(<var>value</var>) treated as a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>, whether the result is a BigInt or Number.</li><li>If <var>intValue</var> &#8805; 0<sub>&#8477;</sub>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the <var>n</var>-byte binary encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li><li>Else,<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the <var>n</var>-byte binary two's complement encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li></ol></li><li>Return <var>rawBytes</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-block-static-semantics-lexicallyscopeddeclarations": {"num": "13.2.6", "title": "#sec-block-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-block-static-semantics-lexicallyscopeddeclarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-static-semantics-lexicallyscopeddeclarations\">#sec-block-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n      <emu-see-also-para op=\"LexicallyScopedDeclarations\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0db4597a\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be LexicallyScopedDeclarations of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the LexicallyScopedDeclarations of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a72ca256\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"08827f68\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> , return LexicallyScopedDeclarations of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d6f37721\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is DeclarationPart of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-exports-static-semantics-lexicallyscopeddeclarations": {"num": "15.2.3.8", "title": "#sec-exports-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-exports-static-semantics-lexicallyscopeddeclarations\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-static-semantics-lexicallyscopeddeclarations\">#sec-exports-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n        <emu-see-also-para op=\"LexicallyScopedDeclarations\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0a40575\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt><emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"2762c7fe\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"6c6de801\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"828f5ae3\"><emu-t>export</emu-t><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is DeclarationPart of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71d1417e\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is DeclarationPart of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c3c3cb8d\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e1fe9c4f\"><emu-t>export</emu-t><emu-t>default</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-argument-lists-runtime-semantics-argumentlistevaluation": {"num": "12.3.8.1", "title": "#sec-argument-lists-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation", "html": "<emu-clause id=\"sec-argument-lists-runtime-semantics-argumentlistevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-argument-lists-runtime-semantics-argumentlistevaluation\">#sec-argument-lists-runtime-semantics-argumentlistevaluation</span> Runtime Semantics: ArgumentListEvaluation</h1>\n        <emu-see-also-para op=\"ArgumentListEvaluation\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"Arguments\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"78e44c33\"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d4fc7da4\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>arg</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5bb8853e\"><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>list</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>list</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>list</var>.</li></ol></li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7ff23fee\"><emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Append <var>arg</var> to the end of <var>precedingArgs</var>.</li><li>Return <var>precedingArgs</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"678ad0f9\"><emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>)).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>precedingArgs</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>precedingArgs</var>.</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {"table-internal-slots-of-module-namespace-exotic-objects": "Table 30", "table-utf-8-encodings": "Table 48", "table-the-typedarray-constructors": "Table 62"}}}