{"from": {"secList": ["sec-regexp.prototype-@@match", "sec-runtime-semantics-iteratordestructuringassignmentevaluation", "sec-json.stringify", "sec-frompropertydescriptor", "sec-copydataproperties", "sec-promise.allsettled-resolve-element-functions", "sec-createunmappedargumentsobject", "sec-array", "sec-object.fromentries", "sec-runtime-semantics-iteratorbindinginitialization", "sec-array.prototype-@@unscopables", "sec-runtime-semantics-propertydefinitionevaluation", "sec-proxy.revocable", "sec-object.getownpropertydescriptors", "sec-regexpbuiltinexec", "sec-runtime-semantics-arrayaccumulation", "sec-createarrayfromlist", "sec-meta-properties-runtime-semantics-evaluation", "sec-createmappedargumentsobject", "sec-json.parse", "sec-string.prototype.split", "sec-createiterresultobject", "sec-promise.allsettled-reject-element-functions", "sec-regexp.prototype-@@split"], "secData": {"sec-regexp.prototype-@@match": {"num": "22.2.5.7", "title": "#sec-regexp.prototype-@@match RegExp.prototype [ @@match ] ( string )", "html": "<emu-clause id=\"sec-regexp.prototype-@@match\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@match\">#sec-regexp.prototype-@@match</span> RegExp.prototype [ @@match ] ( <var>string</var> )</h1>\n        <p>When the <code>@@match</code> method is called with argument <var>string</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>false</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>global</var> is <emu-val>true</emu-val>.</li><li>Let <var>fullUnicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li><li>If <var>result</var> is <emu-val>null</emu-val>, then<ol><li>If <var>n</var> = 0, return <emu-val>null</emu-val>.</li><li>Return <var>A</var>.</li></ol></li><li>Else,<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>matchStr</var>).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>nextIndex</var> be <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>), <emu-val>true</emu-val>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li></ol></li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.match]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@match</a></emu-xref> property is used by the <emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref> abstract operation to identify objects that have the basic behaviour of regular expressions. The absence of a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@match</a></emu-xref> property or the existence of such a property whose value does not Boolean coerce to <emu-val>true</emu-val> indicates that the object is not intended to be used as a regular expression object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-iteratordestructuringassignmentevaluation": {"num": "13.15.5.5", "title": "#sec-runtime-semantics-iteratordestructuringassignmentevaluation Runtime Semantics: IteratorDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\" type=\"sdo\" aoid=\"IteratorDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\">#sec-runtime-semantics-iteratordestructuringassignmentevaluation</span> Runtime Semantics: IteratorDestructuringAssignmentEvaluation</h1>\n        <p>The syntax-directed operation IteratorDestructuringAssignmentEvaluation takes argument <var>iteratorRecord</var>. It is defined piecewise over the following productions:</p>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4rvubdlp\" id=\"prod-wdwg9MFc\"><emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vcxcd5k-\" id=\"prod-LgDa64vV\">\n        <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gw1kvoap\" id=\"prod-vVbhdjr0\"><emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aw9c7xpu\" id=\"prod-gwNUTqrO\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lhh3u7f7\" id=\"prod-4Wj_oyTQ\"><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gg0bjle3\" id=\"prod-zWmQntmV\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pzzkz5gu\" id=\"prod-L7cVew9S\">\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>value</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>value</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>value</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>v</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Else, let <var>v</var> be <var>value</var>.</li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>v</var> as the argument.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Left to right evaluation order is maintained by evaluating a <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> that is not a destructuring pattern prior to accessing the iterator or evaluating the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"AssignmentRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0cmdp2o\" id=\"prod-NB8JhQlN\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat, while <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>,<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>A</var>).</li></ol></li><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>A</var> as the argument.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-json.stringify": {"num": "25.5.2", "title": "#sec-json.stringify JSON.stringify ( value [ , replacer [ , space ] ] )", "html": "<emu-clause id=\"sec-json.stringify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.stringify\">#sec-json.stringify</span> JSON.stringify ( <var>value</var> [ , <var>replacer</var> [ , <var>space</var> ] ] )</h1>\n      <p>The <code>stringify</code> function returns a String in UTF-16 encoded JSON format representing an ECMAScript value, or <emu-val>undefined</emu-val>. It can take three parameters. The <var>value</var> parameter is an ECMAScript value, which is usually an object or array, although it can also be a String, Boolean, Number or <emu-val>null</emu-val>. The optional <var>replacer</var> parameter is either a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that acts as an inclusion list for selecting the object properties that will be stringified. The optional <var>space</var> parameter is a String or Number that allows the result to have white space injected into it to improve human readability.</p>\n      <p>These are the steps in stringifying an object:</p>\n      <emu-alg><ol><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>indent</var> be the empty String.</li><li>Let <var>PropertyList</var> and <var>ReplacerFunction</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replacer</var>) is Object, then<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replacer</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>ReplacerFunction</var> to <var>replacer</var>.</li></ol></li><li>Else,<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>replacer</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>PropertyList</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>replacer</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>prop</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>replacer</var>, <var>prop</var>).</li><li>Let <var>item</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is String, set <var>item</var> to <var>v</var>.</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, set <var>item</var> to !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Object, then<ol><li>If <var>v</var> has a [[StringData]] or [[NumberData]] internal slot, set <var>item</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>item</var> is not <emu-val>undefined</emu-val> and <var>item</var> is not currently an element of <var>PropertyList</var>, then<ol><li>Append <var>item</var> to the end of <var>PropertyList</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Object, then<ol><li>If <var>space</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>space</var>).</li></ol></li><li>Else if <var>space</var> has a [[StringData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>space</var>).</li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Number, then<ol><li>Let <var>spaceMV</var> be !&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>space</var>).</li><li>Set <var>spaceMV</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(10, <var>spaceMV</var>).</li><li>If <var>spaceMV</var> &lt; 1, let <var>gap</var> be the empty String; otherwise let <var>gap</var> be the String value containing <var>spaceMV</var> occurrences of the code unit 0x0020 (SPACE).</li></ol></li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is String, then<ol><li>If the length of <var>space</var> is 10 or less, let <var>gap</var> be <var>space</var>; otherwise let <var>gap</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>space</var> from 0 to 10.</li></ol></li><li>Else,<ol><li>Let <var>gap</var> be the empty String.</li></ol></li><li>Let <var>wrapper</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>wrapper</var>, the empty String, <var>value</var>).</li><li>Let <var>state</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[ReplacerFunction]]: <var>ReplacerFunction</var>, [[Stack]]: <var>stack</var>, [[Indent]]: <var>indent</var>, [[Gap]]: <var>gap</var>, [[PropertyList]]: <var>PropertyList</var> }.</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>state</var>, the empty String, <var>wrapper</var>).</li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>stringify</code> function is <emu-val>3</emu-val><sub>&#120125;</sub>.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>JSON structures are allowed to be nested to any depth, but they must be acyclic. If <var>value</var> is or contains a cyclic structure, then the stringify function must throw a <emu-val>TypeError</emu-val> exception. This is an example of a value that cannot be stringified:</p>\n        <pre><code class=\"javascript hljs\">a = [];\na[<span class=\"hljs-number\">0</span>] = a;\nmy_text = <span class=\"hljs-variable constant_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(a); <span class=\"hljs-comment\">// This must throw a TypeError.</span></code></pre>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Symbolic primitive values are rendered as follows:</p>\n        <ul>\n          <li>\n            The <emu-val>null</emu-val> value is rendered in JSON text as the String <emu-val>\"null\"</emu-val>.\n          </li>\n          <li>\n            The <emu-val>undefined</emu-val> value is not rendered.\n          </li>\n          <li>\n            The <emu-val>true</emu-val> value is rendered in JSON text as the String <emu-val>\"true\"</emu-val>.\n          </li>\n          <li>\n            The <emu-val>false</emu-val> value is rendered in JSON text as the String <emu-val>\"false\"</emu-val>.\n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>String values are wrapped in QUOTATION MARK (<code>\"</code>) code units. The code units <code>\"</code> and <code>\\</code> are escaped with <code>\\</code> prefixes. Control characters code units are replaced with escape sequences <code>\\u</code>HHHH, or with the shorter forms, <code>\\b</code> (BACKSPACE), <code>\\f</code> (FORM FEED), <code>\\n</code> (LINE FEED), <code>\\r</code> (CARRIAGE RETURN), <code>\\t</code> (CHARACTER TABULATION).</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Finite numbers are stringified as if by calling <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>number</var>). <emu-val>NaN</emu-val> and <emu-val>Infinity</emu-val> regardless of sign are represented as the String <emu-val>\"null\"</emu-val>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n        <p>Values that do not have a JSON representation (such as <emu-val>undefined</emu-val> and functions) do not produce a String. Instead they produce the <emu-val>undefined</emu-val> value. In arrays these values are represented as the String <emu-val>\"null\"</emu-val>. In objects an unrepresentable value causes the property to be excluded from stringification.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 6</span><div class=\"note-contents\">\n        <p>An object is rendered as U+007B (LEFT CURLY BRACKET) followed by zero or more properties, separated with a U+002C (COMMA), closed with a U+007D (RIGHT CURLY BRACKET). A property is a quoted String representing the key or <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>, a U+003A (COLON), and then the stringified property value. An array is rendered as an opening U+005B (LEFT SQUARE BRACKET followed by zero or more values, separated with a U+002C (COMMA), closed with a U+005D (RIGHT SQUARE BRACKET).</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-serializejsonproperty\"><h1><span class=\"secnum\">25.5.2.1</span>#sec-serializejsonproperty SerializeJSONProperty ( state, key, holder )</h1>...</div><div id=\"excluded-sec-quotejsonstring\"><h1><span class=\"secnum\">25.5.2.2</span>#sec-quotejsonstring QuoteJSONString ( value )</h1>...</div><div id=\"excluded-sec-unicodeescape\"><h1><span class=\"secnum\">25.5.2.3</span>#sec-unicodeescape UnicodeEscape ( C )</h1>...</div><div id=\"excluded-sec-serializejsonobject\"><h1><span class=\"secnum\">25.5.2.4</span>#sec-serializejsonobject SerializeJSONObject ( state, value )</h1>...</div><div id=\"excluded-sec-serializejsonarray\"><h1><span class=\"secnum\">25.5.2.5</span>#sec-serializejsonarray SerializeJSONArray ( state, value )</h1>...</div></emu-clause>\n\n    "}, "sec-frompropertydescriptor": {"num": "6.2.5.4", "title": "#sec-frompropertydescriptor FromPropertyDescriptor ( Desc )", "html": "<emu-clause id=\"sec-frompropertydescriptor\" type=\"abstract operation\" aoid=\"FromPropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-frompropertydescriptor\">#sec-frompropertydescriptor</span> FromPropertyDescriptor ( <var>Desc</var> )</h1>\n        <p>The abstract operation FromPropertyDescriptor takes argument <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or <emu-val>undefined</emu-val>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>Desc</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>obj</var> is an extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties.</li><li>If <var>Desc</var> has a [[Value]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"value\"</emu-val>, <var>Desc</var>.[[Value]]).</li></ol></li><li>If <var>Desc</var> has a [[Writable]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"writable\"</emu-val>, <var>Desc</var>.[[Writable]]).</li></ol></li><li>If <var>Desc</var> has a [[Get]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"get\"</emu-val>, <var>Desc</var>.[[Get]]).</li></ol></li><li>If <var>Desc</var> has a [[Set]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"set\"</emu-val>, <var>Desc</var>.[[Set]]).</li></ol></li><li>If <var>Desc</var> has an [[Enumerable]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"enumerable\"</emu-val>, <var>Desc</var>.[[Enumerable]]).</li></ol></li><li>If <var>Desc</var> has a [[Configurable]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"configurable\"</emu-val>, <var>Desc</var>.[[Configurable]]).</li></ol></li><li>Return <var>obj</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-copydataproperties": {"num": "7.3.25", "title": "#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )", "html": "<emu-clause id=\"sec-copydataproperties\" type=\"abstract operation\" aoid=\"CopyDataProperties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-copydataproperties\">#sec-copydataproperties</span> CopyDataProperties ( <var>target</var>, <var>source</var>, <var>excludedItems</var> )</h1>\n      <p>The abstract operation CopyDataProperties takes arguments <var>target</var> (an Object), <var>source</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>excludedItems</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of property keys). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>source</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>target</var>.</li><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var>, do<ol><li>Let <var>excluded</var> be <emu-val>false</emu-val>.</li><li>For each element <var>e</var> of <var>excludedItems</var>, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>nextKey</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>excluded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>excluded</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>target</var>, <var>nextKey</var>, <var>propValue</var>).</li></ol></li></ol></li></ol></li><li>Return <var>target</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The target passed in here is always a newly created object which is not directly accessible in case of an error being thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-promise.allsettled-resolve-element-functions": {"num": "27.2.4.2.2", "title": "#sec-promise.allsettled-resolve-element-functions Promise.allSettled Resolve Element Functions", "html": "<emu-clause id=\"sec-promise.allsettled-resolve-element-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise.allsettled-resolve-element-functions\">#sec-promise.allsettled-resolve-element-functions</span> <code>Promise.allSettled</code> Resolve Element Functions</h1>\n          <p>A <code>Promise.allSettled</code> resolve element function is an anonymous built-in function that is used to resolve a specific <code>Promise.allSettled</code> element. Each <code>Promise.allSettled</code> resolve element function has [[Index]], [[Values]], [[Capability]], [[RemainingElements]], and [[AlreadyCalled]] internal slots.</p>\n          <p>When a <code>Promise.allSettled</code> resolve element function is called with argument <var>x</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>alreadyCalled</var> be <var>F</var>.[[AlreadyCalled]].</li><li>If <var>alreadyCalled</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>alreadyCalled</var>.[[Value]] to <emu-val>true</emu-val>.</li><li>Let <var>index</var> be <var>F</var>.[[Index]].</li><li>Let <var>values</var> be <var>F</var>.[[Values]].</li><li>Let <var>promiseCapability</var> be <var>F</var>.[[Capability]].</li><li>Let <var>remainingElementsCount</var> be <var>F</var>.[[RemainingElements]].</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"status\"</emu-val>, <emu-val>\"fulfilled\"</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"value\"</emu-val>, <var>x</var>).</li><li>Set <var>values</var>[<var>index</var>] to <var>obj</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>valuesArray</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>values</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>valuesArray</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a <code>Promise.allSettled</code> resolve element function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n\n        "}, "sec-createunmappedargumentsobject": {"num": "10.4.4.6", "title": "#sec-createunmappedargumentsobject CreateUnmappedArgumentsObject ( argumentsList )", "html": "<emu-clause id=\"sec-createunmappedargumentsobject\" type=\"abstract operation\" aoid=\"CreateUnmappedArgumentsObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</span> CreateUnmappedArgumentsObject ( <var>argumentsList</var> )</h1>\n        <p>The abstract operation CreateUnmappedArgumentsObject takes argument <var>argumentsList</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>len</var> be the number of elements in <var>argumentsList</var>.</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>, &#171; [[ParameterMap]] &#187;).</li><li>Set <var>obj</var>.[[ParameterMap]] to <emu-val>undefined</emu-val>.</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Value]]: <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>len</var>), [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>val</var> be <var>argumentsList</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)), <var>val</var>).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"callee\"</emu-val>, PropertyDescriptor { [[Get]]: <emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>, [[Set]]: <emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array": {"num": "23.1.1.1", "title": "#sec-array Array ( ...values )", "html": "<emu-clause id=\"sec-array\" oldids=\"sec-array-constructor-array,sec-array-len,sec-array-items\"><span id=\"sec-array-items\"></span><span id=\"sec-array-len\"></span><span id=\"sec-array-constructor-array\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array\">#sec-array</span> Array ( ...<var>values</var> )</h1>\n        <p>When the <code>Array</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, let <var>newTarget</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>; else let <var>newTarget</var> be NewTarget.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%Array.prototype%\"</emu-val>).</li><li>Let <var>numberOfArgs</var> be the number of elements in <var>values</var>.</li><li>If <var>numberOfArgs</var> = 0, then<ol><li>Return !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0, <var>proto</var>).</li></ol></li><li>Else if <var>numberOfArgs</var> = 1, then<ol><li>Let <var>len</var> be <var>values</var>[0].</li><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0, <var>proto</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>len</var>) is not Number, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, <emu-val>\"0\"</emu-val>, <var>len</var>).</li><li>Let <var>intLen</var> be <emu-val>1</emu-val><sub>&#120125;</sub>.</li></ol></li><li>Else,<ol><li>Let <var>intLen</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>len</var>).</li><li>If <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>intLen</var>, <var>len</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <emu-val>\"length\"</emu-val>, <var>intLen</var>, <emu-val>true</emu-val>).</li><li>Return <var>array</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>numberOfArgs</var> &#8805; 2.</li><li>Let <var>array</var> be ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>numberOfArgs</var>, <var>proto</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>numberOfArgs</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>itemK</var> be <var>values</var>[<var>k</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, <var>Pk</var>, <var>itemK</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>array</var>'s <emu-val>\"length\"</emu-val> property is <var>numberOfArgs</var>.</li><li>Return <var>array</var>.</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-object.fromentries": {"num": "20.1.2.7", "title": "#sec-object.fromentries Object.fromEntries ( iterable )", "html": "<emu-clause id=\"sec-object.fromentries\" oldids=\"sec-create-data-property-on-object-functions\"><span id=\"sec-create-data-property-on-object-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.fromentries\">#sec-object.fromentries</span> Object.fromEntries ( <var>iterable</var> )</h1>\n        <p>When the <code>fromEntries</code> method is called with argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>iterable</var>).</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>obj</var> is an extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties.</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>key</var>, <var>value</var>) that captures <var>obj</var> and performs the following steps when called:<ol><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>key</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <var>propertyKey</var>, <var>value</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>adder</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>closure</var>, 2, <emu-val>\"\"</emu-val>, &#171; &#187;).</li><li>Return ?&#160;<emu-xref aoid=\"AddEntriesFromIterable\"><a href=\"#sec-add-entries-from-iterable\">AddEntriesFromIterable</a></emu-xref>(<var>obj</var>, <var>iterable</var>, <var>adder</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          The function created for <var>adder</var> is never directly accessible to ECMAScript code.\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-iteratorbindinginitialization": {"num": "8.5.3", "title": "#sec-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization", "html": "<emu-clause id=\"sec-runtime-semantics-iteratorbindinginitialization\" oldids=\"sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization,sec-function-definitions-runtime-semantics-iteratorbindinginitialization,sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization,sec-async-arrow-function-definitions-IteratorBindingInitialization\" type=\"sdo\" aoid=\"IteratorBindingInitialization\"><span id=\"sec-async-arrow-function-definitions-IteratorBindingInitialization\"></span><span id=\"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\"></span><span id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"></span><span id=\"sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-iteratorbindinginitialization\">#sec-runtime-semantics-iteratorbindinginitialization</span> Runtime Semantics: IteratorBindingInitialization</h1>\n      <p>The syntax-directed operation IteratorBindingInitialization takes arguments <var>iteratorRecord</var> and <var>environment</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for formal parameter lists of <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict functions</a></emu-xref>. In that case the formal parameter bindings are preinitialized in order to deal with the possibility of multiple parameters with the same name.</p>\n      </div></emu-note>\n      <p>It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mdhsnk3i\" id=\"prod-tsjeAqRc\">\n        <emu-t>[</emu-t>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mf_msvtp\" id=\"prod--IC6X92I\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dev8fspa\" id=\"prod-NrdrIJZT\">\n        <emu-t>[</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lby6fogn\" id=\"prod-KgRoomIq\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7lkdseap\" id=\"prod-jvZ0PZvK\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hiwampap\" id=\"prod-JkWX9ITf\">\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sh--_n4f\" id=\"prod-mMA3BDq4\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SingleNameBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5neqctp\" id=\"prod-SVSt7_f4\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>, <var>environment</var>).</li><li>Let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Set <var>v</var> to <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li></ol></li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahx6lm0w\" id=\"prod-m05a8O_b\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Set <var>v</var> to <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li></ol></li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> with <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ffhe3nqa\" id=\"prod-evgdYCB8\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <var>environment</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>A</var>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>A</var>).</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hmjzlo6g\" id=\"prod-QEcf_4fA\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> with <var>A</var> and <var>environment</var> as the arguments.</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-1uizUnEF\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uqeba6gz\" id=\"prod-uQ_NTpHd\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameterList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ijrjejbs\" id=\"prod-F7oEv_fM\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\" id=\"prod-D3j0ZmD-\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>v</var> be <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>.</li><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Set <var>v</var> to <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> using <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yrb110hm\" id=\"prod-F51qoUgS\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>formals</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> of <var>formals</var> with arguments <var>iteratorRecord</var> and <var>environment</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowBindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\" id=\"prod-1SN5A2Ci\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>v</var> be <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>.</li><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Set <var>v</var> to <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> using <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-array.prototype-@@unscopables": {"num": "23.1.3.35", "title": "#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]", "html": "<emu-clause id=\"sec-array.prototype-@@unscopables\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype-@@unscopables\">#sec-array.prototype-@@unscopables</span> Array.prototype [ @@unscopables ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@unscopables</a></emu-xref> <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> is an object created by the following steps:</p>\n        <emu-alg><ol><li>Let <var>unscopableList</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"at\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"copyWithin\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"entries\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"fill\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"find\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"findIndex\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flat\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flatMap\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"includes\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"keys\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"values\"</emu-val>, <emu-val>true</emu-val>).</li><li>Return <var>unscopableList</var>.</li></ol></emu-alg>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The own property names of this object are property names that were not included as standard properties of <code>Array.prototype</code> prior to the ECMAScript 2015 specification. These names are ignored for <code>with</code> statement binding purposes in order to preserve the behaviour of existing code that might use one of these names as a binding in an outer scope that is shadowed by a <code>with</code> statement whose binding object is an Array.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-runtime-semantics-propertydefinitionevaluation": {"num": "13.2.5.5", "title": "#sec-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydefinitionevaluation\" oldids=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" type=\"sdo\" aoid=\"PropertyDefinitionEvaluation\"><span id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n        <p>The syntax-directed operation PropertyDefinitionEvaluation takes argument <var>object</var>. It is defined piecewise over the following productions:</p>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mvlwazei\" id=\"prod-2nasR_1u\">\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with argument <var>object</var>.</li><li>Return the result of performing <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> with argument <var>object</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w7ifpmpd\" id=\"prod-r1teTyPc\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>excludedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"CopyDataProperties\"><a href=\"#sec-copydataproperties\">CopyDataProperties</a></emu-xref>(<var>object</var>, <var>fromValue</var>, <var>excludedNames</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i2hxnrih\" id=\"prod-pxaBv7Tq\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propName</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propName</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\" id=\"prod-N8qwXXqo\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If this <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is contained within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> that is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-eval\"><a href=\"#step-json-parse-eval\" class=\"excluded-xref\" excluded-id=\"step-json-parse-eval\">#step-json-parse-eval</a></emu-xref> of <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>), then<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val> and if <emu-xref aoid=\"IsComputedPropertyKey\"><a href=\"#sec-static-semantics-iscomputedpropertykey\">IsComputedPropertyKey</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return ! <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\" id=\"prod-FVQpyKtq\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with arguments <var>object</var> and <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-proxy.revocable": {"num": "28.2.2.1", "title": "#sec-proxy.revocable Proxy.revocable ( target, handler )", "html": "<emu-clause id=\"sec-proxy.revocable\" oldids=\"sec-proxy-revocation-functions\"><span id=\"sec-proxy-revocation-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy.revocable\">#sec-proxy.revocable</span> Proxy.revocable ( <var>target</var>, <var>handler</var> )</h1>\n        <p>The <code>Proxy.revocable</code> function is used to create a revocable Proxy object. When <code>Proxy.revocable</code> is called with arguments <var>target</var> and <var>handler</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>p</var> be ?&#160;<emu-xref aoid=\"ProxyCreate\"><a href=\"#sec-proxycreate\">ProxyCreate</a></emu-xref>(<var>target</var>, <var>handler</var>).</li><li>Let <var>revokerClosure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures nothing and performs the following steps when called:<ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>p</var> be <var>F</var>.[[RevocableProxy]].</li><li>If <var>p</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[RevocableProxy]] to <emu-val>null</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a Proxy object.</li><li>Set <var>p</var>.[[ProxyTarget]] to <emu-val>null</emu-val>.</li><li>Set <var>p</var>.[[ProxyHandler]] to <emu-val>null</emu-val>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>revoker</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>revokerClosure</var>, 0, <emu-val>\"\"</emu-val>, &#171; [[RevocableProxy]] &#187;).</li><li>Set <var>revoker</var>.[[RevocableProxy]] to <var>p</var>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>result</var>, <emu-val>\"proxy\"</emu-val>, <var>p</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>result</var>, <emu-val>\"revoke\"</emu-val>, <var>revoker</var>).</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-object.getownpropertydescriptors": {"num": "20.1.2.9", "title": "#sec-object.getownpropertydescriptors Object.getOwnPropertyDescriptors ( O )", "html": "<emu-clause id=\"sec-object.getownpropertydescriptors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.getownpropertydescriptors\">#sec-object.getownpropertydescriptors</span> Object.getOwnPropertyDescriptors ( <var>O</var> )</h1>\n        <p>When the <code>getOwnPropertyDescriptors</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>ownKeys</var> be ? <var>obj</var>.[[OwnPropertyKeys]]().</li><li>Let <var>descriptors</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>For each element <var>key</var> of <var>ownKeys</var>, do<ol><li>Let <var>desc</var> be ? <var>obj</var>.[[GetOwnProperty]](<var>key</var>).</li><li>Let <var>descriptor</var> be !&#160;<emu-xref aoid=\"FromPropertyDescriptor\"><a href=\"#sec-frompropertydescriptor\">FromPropertyDescriptor</a></emu-xref>(<var>desc</var>).</li><li>If <var>descriptor</var> is not <emu-val>undefined</emu-val>, perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>descriptors</var>, <var>key</var>, <var>descriptor</var>).</li></ol></li><li>Return <var>descriptors</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexpbuiltinexec": {"num": "22.2.5.2.2", "title": "#sec-regexpbuiltinexec RegExpBuiltinExec ( R, S )", "html": "<emu-clause id=\"sec-regexpbuiltinexec\" type=\"abstract operation\" aoid=\"RegExpBuiltinExec\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpbuiltinexec\">#sec-regexpbuiltinexec</span> RegExpBuiltinExec ( <var>R</var>, <var>S</var> )</h1>\n          <p>The abstract operation RegExpBuiltinExec takes arguments <var>R</var> (an initialized RegExp instance) and <var>S</var> (a String). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>Let <var>lastIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains <emu-val>\"g\"</emu-val>, let <var>global</var> be <emu-val>true</emu-val>; else let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>sticky</var> be <emu-val>true</emu-val>; else let <var>sticky</var> be <emu-val>false</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val> and <var>sticky</var> is <emu-val>false</emu-val>, set <var>lastIndex</var> to 0.</li><li>Let <var>matcher</var> be <var>R</var>.[[RegExpMatcher]].</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>fullUnicode</var> be <emu-val>true</emu-val>; else let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Let <var>matchSucceeded</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>matchSucceeded</var> is <emu-val>false</emu-val>,<ol><li>If <var>lastIndex</var> &gt; <var>length</var>, then<ol><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Let <var>r</var> be <var>matcher</var>(<var>S</var>, <var>lastIndex</var>).</li><li>If <var>r</var> is <emu-const>failure</emu-const>, then<ol><li>If <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Set <var>lastIndex</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>lastIndex</var>, <var>fullUnicode</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a State.</li><li>Set <var>matchSucceeded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Let <var>e</var> be <var>r</var>'s <var>endIndex</var> value.</li><li>If <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><var>e</var> is an index into the <var>Input</var> character list, derived from <var>S</var>, matched by <var>matcher</var>. Let <var>eUTF</var> be the smallest index into <var>S</var> that corresponds to the character at element <var>e</var> of <var>Input</var>. If <var>e</var> is greater than or equal to the number of elements in <var>Input</var>, then <var>eUTF</var> is the number of code units in <var>S</var>.</li><li>Set <var>e</var> to <var>eUTF</var>.</li></ol></li><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>e</var>), <emu-val>true</emu-val>).</li></ol></li><li>Let <var>n</var> be the number of elements in <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. (This is the same value as <emu-xref href=\"#sec-notation\"><a href=\"#sec-notation\" class=\"excluded-xref\" excluded-id=\"sec-notation\">#sec-notation</a></emu-xref>'s <var>NcapturingParens</var>.)</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> &lt; 2<sup>32</sup> - 1.</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>n</var> + 1).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>A</var>'s <emu-val>\"length\"</emu-val> property is <var>n</var> + 1.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"index\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lastIndex</var>)).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"input\"</emu-val>, <var>S</var>).</li><li>Let <var>matchedSubstr</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>lastIndex</var> to <var>e</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>matchedSubstr</var>).</li><li>If <var>R</var> contains any <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>groups</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>groups</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"groups\"</emu-val>, <var>groups</var>).</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> such that <var>i</var> &#8805; 1 and <var>i</var> &#8804; <var>n</var>, in ascending order, do<ol><li>Let <var>captureI</var> be <var>i</var><sup>th</sup> element of <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>captureI</var> is <emu-val>undefined</emu-val>, let <var>capturedValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code points.</li><li>Let <var>capturedValue</var> be !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>captureI</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fullUnicode</var> is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code units.</li><li>Let <var>capturedValue</var> be the String value consisting of the code units of <var>captureI</var>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>)), <var>capturedValue</var>).</li><li>If the <var>i</var><sup>th</sup> capture of <var>R</var> was defined with a <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>s</var> be the <emu-xref aoid=\"CapturingGroupName\"><a href=\"#sec-static-semantics-capturinggroupname\">CapturingGroupName</a></emu-xref> of the corresponding <emu-nt><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a></emu-nt>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>groups</var>, <var>s</var>, <var>capturedValue</var>).</li></ol></li></ol></li><li>Return <var>A</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-arrayaccumulation": {"num": "13.2.4.1", "title": "#sec-runtime-semantics-arrayaccumulation Runtime Semantics: ArrayAccumulation", "html": "<emu-clause id=\"sec-runtime-semantics-arrayaccumulation\" oldids=\"sec-static-semantics-elisionwidth\" type=\"sdo\" aoid=\"ArrayAccumulation\"><span id=\"sec-static-semantics-elisionwidth\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-arrayaccumulation\">#sec-runtime-semantics-arrayaccumulation</span> Runtime Semantics: ArrayAccumulation</h1>\n        <p>The syntax-directed operation ArrayAccumulation takes arguments <var>array</var> and <var>nextIndex</var>. It is defined piecewise over the following productions:</p>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lhh3u7f7\" id=\"prod-ACq7eTCD\"><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>len</var> be <var>nextIndex</var> + 1.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <emu-val>\"length\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>len</var>), <emu-val>true</emu-val>).</li><li>NOTE: The above Set throws if <var>len</var> exceeds 2<sup>32</sup>-1.</li><li>Return <var>len</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gg0bjle3\" id=\"prod-KyZNZ-MT\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2aa1epou\" id=\"prod-_juTnZH7\">\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>)), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbpz0ate\" id=\"prod-PNKSiljq\">\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_sr5sq6t\" id=\"prod-9ZiZA1Ch\">\n        <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>)), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aleaauxs\" id=\"prod-HRfw0EOP\">\n        <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SpreadElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w7ifpmpd\" id=\"prod-_w8Sn596\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>nextIndex</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>)), <var>nextValue</var>).</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref> is used to ensure that own properties are defined for the array even if the standard built-in <emu-xref href=\"#sec-properties-of-the-array-prototype-object\"><a href=\"#sec-properties-of-the-array-prototype-object\">Array prototype object</a></emu-xref> has been modified in a manner that would preclude the creation of new own properties using [[Set]].</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-createarrayfromlist": {"num": "7.3.17", "title": "#sec-createarrayfromlist CreateArrayFromList ( elements )", "html": "<emu-clause id=\"sec-createarrayfromlist\" type=\"abstract operation\" aoid=\"CreateArrayFromList\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createarrayfromlist\">#sec-createarrayfromlist</span> CreateArrayFromList ( <var>elements</var> )</h1>\n      <p>The abstract operation CreateArrayFromList takes argument <var>elements</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language values</a></emu-xref>). It is used to create an Array whose elements are provided by <var>elements</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>For each element <var>e</var> of <var>elements</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>e</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Return <var>array</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-meta-properties-runtime-semantics-evaluation": {"num": "13.3.12.1", "title": "#sec-meta-properties-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-meta-properties-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-meta-properties-runtime-semantics-evaluation\">#sec-meta-properties-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"NewTarget\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0t4hpsv9\">\n        <emu-t>new</emu-t>\n        <emu-t>.</emu-t>\n        <emu-t>target</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"ImportMeta\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8myn6frq\">\n        <emu-t>import</emu-t>\n        <emu-t>.</emu-t>\n        <emu-t>meta</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be !&#160;<emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>Let <var>importMeta</var> be <var>module</var>.[[ImportMeta]].</li><li>If <var>importMeta</var> is <emu-const>empty</emu-const>, then<ol><li>Set <var>importMeta</var> to !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Let <var>importMetaValues</var> be !&#160;<emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>(<var>module</var>).</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>importMetaValues</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>importMeta</var>, <var>p</var>.[[Key]], <var>p</var>.[[Value]]).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"HostFinalizeImportMeta\"><a href=\"#sec-hostfinalizeimportmeta\">HostFinalizeImportMeta</a></emu-xref>(<var>importMeta</var>, <var>module</var>).</li><li>Set <var>module</var>.[[ImportMeta]] to <var>importMeta</var>.</li><li>Return <var>importMeta</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>importMeta</var>) is Object.</li><li>Return <var>importMeta</var>.</li></ol></li></ol></emu-alg>\n\n        <div id=\"excluded-sec-hostgetimportmetaproperties\"><h1><span class=\"secnum\">13.3.12.1.1</span>#sec-hostgetimportmetaproperties HostGetImportMetaProperties ( moduleRecord )</h1>...</div><div id=\"excluded-sec-hostfinalizeimportmeta\"><h1><span class=\"secnum\">13.3.12.1.2</span>#sec-hostfinalizeimportmeta HostFinalizeImportMeta ( importMeta, moduleRecord )</h1>...</div></emu-clause>\n    "}, "sec-createmappedargumentsobject": {"num": "10.4.4.7", "title": "#sec-createmappedargumentsobject CreateMappedArgumentsObject ( func, formals, argumentsList, env )", "html": "<emu-clause id=\"sec-createmappedargumentsobject\" type=\"abstract operation\" aoid=\"CreateMappedArgumentsObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmappedargumentsobject\">#sec-createmappedargumentsobject</span> CreateMappedArgumentsObject ( <var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var> )</h1>\n        <p>The abstract operation CreateMappedArgumentsObject takes arguments <var>func</var> (an Object), <var>formals</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>), and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>formals</var> does not contain a rest parameter, any binding patterns, or any initializers. It may contain duplicate identifiers.</li><li>Let <var>len</var> be the number of elements in <var>argumentsList</var>.</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(&#171; [[Prototype]], [[Extensible]], [[ParameterMap]] &#187;).</li><li>Set <var>obj</var>.[[GetOwnProperty]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-getownproperty-p\"><a href=\"#sec-arguments-exotic-objects-getownproperty-p\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-getownproperty-p\">#sec-arguments-exotic-objects-getownproperty-p</a></emu-xref>.</li><li>Set <var>obj</var>.[[DefineOwnProperty]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-arguments-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-defineownproperty-p-desc\">#sec-arguments-exotic-objects-defineownproperty-p-desc</a></emu-xref>.</li><li>Set <var>obj</var>.[[Get]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-get-p-receiver\"><a href=\"#sec-arguments-exotic-objects-get-p-receiver\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-get-p-receiver\">#sec-arguments-exotic-objects-get-p-receiver</a></emu-xref>.</li><li>Set <var>obj</var>.[[Set]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-set-p-v-receiver\"><a href=\"#sec-arguments-exotic-objects-set-p-v-receiver\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-set-p-v-receiver\">#sec-arguments-exotic-objects-set-p-v-receiver</a></emu-xref>.</li><li>Set <var>obj</var>.[[Delete]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-delete-p\"><a href=\"#sec-arguments-exotic-objects-delete-p\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-delete-p\">#sec-arguments-exotic-objects-delete-p</a></emu-xref>.</li><li>Set <var>obj</var>.[[Prototype]] to <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>map</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Set <var>obj</var>.[[ParameterMap]] to <var>map</var>.</li><li>Let <var>parameterNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>formals</var>.</li><li>Let <var>numberOfParameters</var> be the number of elements in <var>parameterNames</var>.</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>val</var> be <var>argumentsList</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)), <var>val</var>).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Value]]: <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>len</var>), [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Let <var>mappedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>index</var> to <var>numberOfParameters</var> - 1.</li><li>Repeat, while <var>index</var> &#8805; 0,<ol><li>Let <var>name</var> be <var>parameterNames</var>[<var>index</var>].</li><li>If <var>name</var> is not an element of <var>mappedNames</var>, then<ol><li>Add <var>name</var> as an element of the list <var>mappedNames</var>.</li><li>If <var>index</var> &lt; <var>len</var>, then<ol><li>Let <var>g</var> be <emu-xref aoid=\"MakeArgGetter\"><a href=\"#sec-makearggetter\">MakeArgGetter</a></emu-xref>(<var>name</var>, <var>env</var>).</li><li>Let <var>p</var> be <emu-xref aoid=\"MakeArgSetter\"><a href=\"#sec-makeargsetter\">MakeArgSetter</a></emu-xref>(<var>name</var>, <var>env</var>).</li><li>Perform <var>map</var>.[[DefineOwnProperty]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)), PropertyDescriptor { [[Set]]: <var>p</var>, [[Get]]: <var>g</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li></ol></li></ol></li><li>Set <var>index</var> to <var>index</var> - 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"callee\"</emu-val>, PropertyDescriptor { [[Value]]: <var>func</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-makearggetter\"><h1><span class=\"secnum\">10.4.4.7.1</span>#sec-makearggetter MakeArgGetter ( name, env )</h1>...</div><div id=\"excluded-sec-makeargsetter\"><h1><span class=\"secnum\">10.4.4.7.2</span>#sec-makeargsetter MakeArgSetter ( name, env )</h1>...</div></emu-clause>\n    "}, "sec-json.parse": {"num": "25.5.1", "title": "#sec-json.parse JSON.parse ( text [ , reviver ] )", "html": "<emu-clause id=\"sec-json.parse\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.parse\">#sec-json.parse</span> JSON.parse ( <var>text</var> [ , <var>reviver</var> ] )</h1>\n      <p>The <code>parse</code> function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON format represents literals, arrays, and objects with a syntax similar to the syntax for ECMAScript literals, Array Initializers, and Object Initializers. After parsing, JSON objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript Array instances. JSON strings, numbers, booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and <emu-val>null</emu-val>.</p>\n      <p>The optional <var>reviver</var> parameter is a function that takes two parameters, <var>key</var> and <var>value</var>. It can filter and transform the results. It is called with each of the <var>key</var>/<var>value</var> pairs produced by the parse, and its return value is used instead of the original value. If it returns what it received, the structure is not modified. If it returns <emu-val>undefined</emu-val> then the property is deleted from the result.</p>\n      <emu-alg><ol><li>Let <var>jsonString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>text</var>).</li><li id=\"step-json-parse-validate\">Parse !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>jsonString</var>) as a JSON text as specified in ECMA-404. Throw a <emu-val>SyntaxError</emu-val> exception if it is not a valid JSON text as defined in that specification.</li><li>Let <var>scriptString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"(\"</emu-val>, <var>jsonString</var>, and <emu-val>\");\"</emu-val>.</li><li id=\"step-json-parse-parse\">Let <var>script</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>scriptString</var>), <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li>NOTE: The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules defined in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref> have special handling for the above invocation of <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>script</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</li><li id=\"step-json-parse-eval\">Let <var>completion</var> be the result of evaluating <var>script</var>.</li><li>NOTE: The <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> semantics defined in <emu-xref href=\"#sec-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</a></emu-xref> have special handling for the above evaluation.</li><li>Let <var>unfiltered</var> be <var>completion</var>.[[Value]].</li><li id=\"step-json-parse-assert-type\"><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>unfiltered</var> is either a String, Number, Boolean, Null, or an Object that is defined by either an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>reviver</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>root</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Let <var>rootName</var> be the empty String.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>unfiltered</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>reviver</var>).</li></ol></li><li>Else,<ol><li>Return <var>unfiltered</var>.</li></ol></li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>parse</code> function is <emu-val>2</emu-val><sub>&#120125;</sub>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Valid JSON text is a subset of the ECMAScript <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> syntax. Step <emu-xref href=\"#step-json-parse-validate\"><a href=\"#step-json-parse-validate\" class=\"excluded-xref\" excluded-id=\"step-json-parse-validate\">#step-json-parse-validate</a></emu-xref> verifies that <var>jsonString</var> conforms to that subset, and step <emu-xref href=\"#step-json-parse-assert-type\"><a href=\"#step-json-parse-assert-type\" class=\"excluded-xref\" excluded-id=\"step-json-parse-assert-type\">#step-json-parse-assert-type</a></emu-xref> asserts that that parsing and evaluation returns a value of an appropriate type.</p>\n        <p>However, because <emu-xref href=\"#sec-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</a></emu-xref> behaves differently during <code>JSON.parse</code>, the same source text can produce different results when evaluated as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> rather than as JSON. Furthermore, the Early Error for duplicate <emu-val>\"__proto__\"</emu-val> properties in object literals, which likewise does not apply during <code>JSON.parse</code>, means that not all texts accepted by <code>JSON.parse</code> are valid as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt>, despite matching the grammar.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-internalizejsonproperty\"><h1><span class=\"secnum\">25.5.1.1</span>#sec-internalizejsonproperty InternalizeJSONProperty ( holder, name, reviver )</h1>...</div></emu-clause>\n\n    "}, "sec-string.prototype.split": {"num": "22.1.3.22", "title": "#sec-string.prototype.split String.prototype.split ( separator, limit )", "html": "<emu-clause id=\"sec-string.prototype.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.split\">#sec-string.prototype.split</span> String.prototype.split ( <var>separator</var>, <var>limit</var> )</h1>\n        <p>Returns an Array into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of <var>separator</var>; these occurrences are not part of any String in the returned array, but serve to divide up the String value. The value of <var>separator</var> may be a String of any length or it may be an object, such as a RegExp, that has a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref> method.</p>\n        <p>When the <code>split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>separator</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>separator</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref>).</li><li>If <var>splitter</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>splitter</var>, <var>separator</var>, &#171; <var>O</var>, <var>limit</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>)).</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>If <var>lim</var> = 0, return <var>A</var>.</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>s</var> be the length of <var>S</var>.</li><li>If <var>s</var> = 0, then<ol><li>If <var>R</var> is not the empty String, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li></ol></li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &#8800; <var>s</var>,<ol><li>Let <var>e</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, <var>q</var>, <var>R</var>).</li><li>If <var>e</var> is <emu-const>not-matched</emu-const>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> &#8804; <var>s</var>.</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>s</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The value of <var>separator</var> may be an empty String. In this case, <var>separator</var> does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. If <var>separator</var> is the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.</p>\n          <p>If the <emu-val>this</emu-val> value is (or converts to) the empty String, the result depends on whether <var>separator</var> can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If <var>separator</var> is <emu-val>undefined</emu-val>, then the result array contains just one String, which is the <emu-val>this</emu-val> value (converted to a String). If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>split</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-splitmatch\"><h1><span class=\"secnum\">22.1.3.22.1</span>#sec-splitmatch SplitMatch ( S, q, R )</h1>...</div></emu-clause>\n\n      "}, "sec-createiterresultobject": {"num": "7.4.9", "title": "#sec-createiterresultobject CreateIterResultObject ( value, done )", "html": "<emu-clause id=\"sec-createiterresultobject\" type=\"abstract operation\" aoid=\"CreateIterResultObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createiterresultobject\">#sec-createiterresultobject</span> CreateIterResultObject ( <var>value</var>, <var>done</var> )</h1>\n      <p>The abstract operation CreateIterResultObject takes arguments <var>value</var> and <var>done</var> (a Boolean). It creates an object that conforms to the <i>IteratorResult</i> interface. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"value\"</emu-val>, <var>value</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"done\"</emu-val>, <var>done</var>).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-promise.allsettled-reject-element-functions": {"num": "27.2.4.2.3", "title": "#sec-promise.allsettled-reject-element-functions Promise.allSettled Reject Element Functions", "html": "<emu-clause id=\"sec-promise.allsettled-reject-element-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise.allsettled-reject-element-functions\">#sec-promise.allsettled-reject-element-functions</span> <code>Promise.allSettled</code> Reject Element Functions</h1>\n          <p>A <code>Promise.allSettled</code> reject element function is an anonymous built-in function that is used to reject a specific <code>Promise.allSettled</code> element. Each <code>Promise.allSettled</code> reject element function has [[Index]], [[Values]], [[Capability]], [[RemainingElements]], and [[AlreadyCalled]] internal slots.</p>\n          <p>When a <code>Promise.allSettled</code> reject element function is called with argument <var>x</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>alreadyCalled</var> be <var>F</var>.[[AlreadyCalled]].</li><li>If <var>alreadyCalled</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>alreadyCalled</var>.[[Value]] to <emu-val>true</emu-val>.</li><li>Let <var>index</var> be <var>F</var>.[[Index]].</li><li>Let <var>values</var> be <var>F</var>.[[Values]].</li><li>Let <var>promiseCapability</var> be <var>F</var>.[[Capability]].</li><li>Let <var>remainingElementsCount</var> be <var>F</var>.[[RemainingElements]].</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"status\"</emu-val>, <emu-val>\"rejected\"</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"reason\"</emu-val>, <var>x</var>).</li><li>Set <var>values</var>[<var>index</var>] to <var>obj</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>valuesArray</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>values</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>valuesArray</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a <code>Promise.allSettled</code> reject element function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n      "}, "sec-regexp.prototype-@@split": {"num": "22.2.5.13", "title": "#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )", "html": "<emu-clause id=\"sec-regexp.prototype-@@split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@split\">#sec-regexp.prototype-@@split</span> RegExp.prototype [ @@split ] ( <var>string</var>, <var>limit</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns an Array into which substrings of the result of converting <var>string</var> to a String have been stored. The substrings are determined by searching from left to right for matches of the <emu-val>this</emu-val> value regular expression; these occurrences are not part of any String in the returned array, but serve to divide up the String value.</p>\n          <p>The <emu-val>this</emu-val> value may be an empty regular expression or a regular expression that can match an empty String. In this case, the regular expression does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. (For example, if the regular expression matches the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.) Only the first match at a given index of the String is considered, even if backtracking could yield a non-empty <emu-not-ref>substring</emu-not-ref> match at that index. (For example, <code>/a*?/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"a\", \"b\"]</code>, while <code>/a*/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"\",\"b\"]</code>.)</p>\n          <p>If <var>string</var> is (or converts to) the empty String, the result depends on whether the regular expression can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If the regular expression contains capturing parentheses, then each time <var>separator</var> is matched the results (including any <emu-val>undefined</emu-val> results) of the capturing parentheses are spliced into the output array. For example,</p>\n          <pre><code class=\"javascript hljs\">/&lt;(\\/)?([^<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>]+)&gt;/[Symbol.split](\"A<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">B</span>&gt;</span>bold<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">B</span>&gt;</span>and<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CODE</span>&gt;</span>coded<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CODE</span>&gt;</span>\")</span></code></pre>\n          <p>evaluates to the array</p>\n          <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"bold\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"and\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"coded\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          <p>If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <p>When the <code>@@split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>rx</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"flags\"</emu-val>)).</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>unicodeMatching</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>unicodeMatching</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>newFlags</var> be <var>flags</var>.</li><li>Else, let <var>newFlags</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>flags</var> and <emu-val>\"y\"</emu-val>.</li><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>rx</var>, <var>newFlags</var> &#187;).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>)).</li><li>If <var>lim</var> is 0, return <var>A</var>.</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>size</var> is 0, then<ol><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is not <emu-val>null</emu-val>, return <var>A</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &lt; <var>size</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>q</var>), <emu-val>true</emu-val>).</li><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is <emu-val>null</emu-val>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>e</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Set <var>e</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>size</var>).</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Let <var>numberOfCaptures</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>z</var>).</li><li>Set <var>numberOfCaptures</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>numberOfCaptures</var> - 1, 0).</li><li>Let <var>i</var> be 1.</li><li>Repeat, while <var>i</var> &#8804; <var>numberOfCaptures</var>,<ol><li>Let <var>nextCapture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>z</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>))).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>nextCapture</var>).</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li></ol></li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>size</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.split]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>@@split</code> method ignores the value of the <emu-val>\"global\"</emu-val> and <emu-val>\"sticky\"</emu-val> properties of this RegExp object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-regexp.prototype-@@match", "sec-runtime-semantics-iteratordestructuringassignmentevaluation", "sec-json.stringify", "sec-frompropertydescriptor", "sec-copydataproperties", "sec-promise.allsettled-resolve-element-functions", "sec-createunmappedargumentsobject", "sec-array", "sec-object.fromentries", "sec-runtime-semantics-iteratorbindinginitialization", "sec-array.prototype-@@unscopables", "sec-runtime-semantics-propertydefinitionevaluation", "sec-proxy.revocable", "sec-object.getownpropertydescriptors", "sec-regexpbuiltinexec", "sec-runtime-semantics-arrayaccumulation", "sec-createarrayfromlist", "sec-meta-properties-runtime-semantics-evaluation", "sec-createmappedargumentsobject", "sec-json.parse", "sec-string.prototype.split", "sec-createiterresultobject", "sec-promise.allsettled-reject-element-functions", "sec-regexp.prototype-@@split"], "secData": {"sec-regexp.prototype-@@match": {"num": "22.2.5.7", "title": "#sec-regexp.prototype-@@match RegExp.prototype [ @@match ] ( string )", "html": "<emu-clause id=\"sec-regexp.prototype-@@match\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@match\">#sec-regexp.prototype-@@match</span> RegExp.prototype [ @@match ] ( <var>string</var> )</h1>\n        <p>When the <code>@@match</code> method is called with argument <var>string</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>false</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>global</var> is <emu-val>true</emu-val>.</li><li>Let <var>fullUnicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li><li>If <var>result</var> is <emu-val>null</emu-val>, then<ol><li>If <var>n</var> = 0, return <emu-val>null</emu-val>.</li><li>Return <var>A</var>.</li></ol></li><li>Else,<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>matchStr</var>).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>nextIndex</var> be <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>), <emu-val>true</emu-val>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li></ol></li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.match]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@match</a></emu-xref> property is used by the <emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref> abstract operation to identify objects that have the basic behaviour of regular expressions. The absence of a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@match</a></emu-xref> property or the existence of such a property whose value does not Boolean coerce to <emu-val>true</emu-val> indicates that the object is not intended to be used as a regular expression object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-iteratordestructuringassignmentevaluation": {"num": "13.15.5.5", "title": "#sec-runtime-semantics-iteratordestructuringassignmentevaluation Runtime Semantics: IteratorDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\" type=\"sdo\" aoid=\"IteratorDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-iteratordestructuringassignmentevaluation\">#sec-runtime-semantics-iteratordestructuringassignmentevaluation</span> Runtime Semantics: IteratorDestructuringAssignmentEvaluation</h1>\n        <p>The syntax-directed operation IteratorDestructuringAssignmentEvaluation takes argument <var>iteratorRecord</var>. It is defined piecewise over the following productions:</p>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4rvubdlp\" id=\"prod-wdwg9MFc\"><emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vcxcd5k-\" id=\"prod-LgDa64vV\">\n        <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gw1kvoap\" id=\"prod-vVbhdjr0\"><emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aw9c7xpu\" id=\"prod-gwNUTqrO\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lhh3u7f7\" id=\"prod-4Wj_oyTQ\"><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gg0bjle3\" id=\"prod-zWmQntmV\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AssignmentElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pzzkz5gu\" id=\"prod-L7cVew9S\">\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>value</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>value</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>value</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>v</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Else, let <var>v</var> be <var>value</var>.</li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>v</var> as the argument.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Left to right evaluation order is maintained by evaluating a <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> that is not a destructuring pattern prior to accessing the iterator or evaluating the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"AssignmentRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0cmdp2o\" id=\"prod-NB8JhQlN\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat, while <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>,<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li>If <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>A</var>).</li></ol></li><li>Let <var>nestedAssignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a></emu-nt>.</li><li>Return the result of performing <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>nestedAssignmentPattern</var> with <var>A</var> as the argument.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-json.stringify": {"num": "25.5.2", "title": "#sec-json.stringify JSON.stringify ( value [ , replacer [ , space ] ] )", "html": "<emu-clause id=\"sec-json.stringify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.stringify\">#sec-json.stringify</span> JSON.stringify ( <var>value</var> [ , <var>replacer</var> [ , <var>space</var> ] ] )</h1>\n      <p>The <code>stringify</code> function returns a String in UTF-16 encoded JSON format representing an ECMAScript value, or <emu-val>undefined</emu-val>. It can take three parameters. The <var>value</var> parameter is an ECMAScript value, which is usually an object or array, although it can also be a String, Boolean, Number or <emu-val>null</emu-val>. The optional <var>replacer</var> parameter is either a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that acts as an inclusion list for selecting the object properties that will be stringified. The optional <var>space</var> parameter is a String or Number that allows the result to have white space injected into it to improve human readability.</p>\n      <p>These are the steps in stringifying an object:</p>\n      <emu-alg><ol><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>indent</var> be the empty String.</li><li>Let <var>PropertyList</var> and <var>ReplacerFunction</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replacer</var>) is Object, then<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replacer</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>ReplacerFunction</var> to <var>replacer</var>.</li></ol></li><li>Else,<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>replacer</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>PropertyList</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>replacer</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>prop</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>replacer</var>, <var>prop</var>).</li><li>Let <var>item</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is String, set <var>item</var> to <var>v</var>.</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, set <var>item</var> to !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Object, then<ol><li>If <var>v</var> has a [[StringData]] or [[NumberData]] internal slot, set <var>item</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>item</var> is not <emu-val>undefined</emu-val> and <var>item</var> is not currently an element of <var>PropertyList</var>, then<ol><li>Append <var>item</var> to the end of <var>PropertyList</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Object, then<ol><li>If <var>space</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>space</var>).</li></ol></li><li>Else if <var>space</var> has a [[StringData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>space</var>).</li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Number, then<ol><li>Let <var>spaceMV</var> be !&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>space</var>).</li><li>Set <var>spaceMV</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(10, <var>spaceMV</var>).</li><li>If <var>spaceMV</var> &lt; 1, let <var>gap</var> be the empty String; otherwise let <var>gap</var> be the String value containing <var>spaceMV</var> occurrences of the code unit 0x0020 (SPACE).</li></ol></li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is String, then<ol><li>If the length of <var>space</var> is 10 or less, let <var>gap</var> be <var>space</var>; otherwise let <var>gap</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>space</var> from 0 to 10.</li></ol></li><li>Else,<ol><li>Let <var>gap</var> be the empty String.</li></ol></li><li>Let <var>wrapper</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>wrapper</var>, the empty String, <var>value</var>).</li><li>Let <var>state</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[ReplacerFunction]]: <var>ReplacerFunction</var>, [[Stack]]: <var>stack</var>, [[Indent]]: <var>indent</var>, [[Gap]]: <var>gap</var>, [[PropertyList]]: <var>PropertyList</var> }.</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>state</var>, the empty String, <var>wrapper</var>).</li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>stringify</code> function is <emu-val>3</emu-val><sub>&#120125;</sub>.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>JSON structures are allowed to be nested to any depth, but they must be acyclic. If <var>value</var> is or contains a cyclic structure, then the stringify function must throw a <emu-val>TypeError</emu-val> exception. This is an example of a value that cannot be stringified:</p>\n        <pre><code class=\"javascript hljs\">a = [];\na[<span class=\"hljs-number\">0</span>] = a;\nmy_text = <span class=\"hljs-variable constant_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(a); <span class=\"hljs-comment\">// This must throw a TypeError.</span></code></pre>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Symbolic primitive values are rendered as follows:</p>\n        <ul>\n          <li>\n            The <emu-val>null</emu-val> value is rendered in JSON text as the String <emu-val>\"null\"</emu-val>.\n          </li>\n          <li>\n            The <emu-val>undefined</emu-val> value is not rendered.\n          </li>\n          <li>\n            The <emu-val>true</emu-val> value is rendered in JSON text as the String <emu-val>\"true\"</emu-val>.\n          </li>\n          <li>\n            The <emu-val>false</emu-val> value is rendered in JSON text as the String <emu-val>\"false\"</emu-val>.\n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>String values are wrapped in QUOTATION MARK (<code>\"</code>) code units. The code units <code>\"</code> and <code>\\</code> are escaped with <code>\\</code> prefixes. Control characters code units are replaced with escape sequences <code>\\u</code>HHHH, or with the shorter forms, <code>\\b</code> (BACKSPACE), <code>\\f</code> (FORM FEED), <code>\\n</code> (LINE FEED), <code>\\r</code> (CARRIAGE RETURN), <code>\\t</code> (CHARACTER TABULATION).</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Finite numbers are stringified as if by calling <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>number</var>). <emu-val>NaN</emu-val> and <emu-val>Infinity</emu-val> regardless of sign are represented as the String <emu-val>\"null\"</emu-val>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n        <p>Values that do not have a JSON representation (such as <emu-val>undefined</emu-val> and functions) do not produce a String. Instead they produce the <emu-val>undefined</emu-val> value. In arrays these values are represented as the String <emu-val>\"null\"</emu-val>. In objects an unrepresentable value causes the property to be excluded from stringification.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 6</span><div class=\"note-contents\">\n        <p>An object is rendered as U+007B (LEFT CURLY BRACKET) followed by zero or more properties, separated with a U+002C (COMMA), closed with a U+007D (RIGHT CURLY BRACKET). A property is a quoted String representing the key or <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>, a U+003A (COLON), and then the stringified property value. An array is rendered as an opening U+005B (LEFT SQUARE BRACKET followed by zero or more values, separated with a U+002C (COMMA), closed with a U+005D (RIGHT SQUARE BRACKET).</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-serializejsonproperty\"><h1><span class=\"secnum\">25.5.2.1</span>#sec-serializejsonproperty SerializeJSONProperty ( state, key, holder )</h1>...</div><div id=\"excluded-sec-quotejsonstring\"><h1><span class=\"secnum\">25.5.2.2</span>#sec-quotejsonstring QuoteJSONString ( value )</h1>...</div><div id=\"excluded-sec-unicodeescape\"><h1><span class=\"secnum\">25.5.2.3</span>#sec-unicodeescape UnicodeEscape ( C )</h1>...</div><div id=\"excluded-sec-serializejsonobject\"><h1><span class=\"secnum\">25.5.2.4</span>#sec-serializejsonobject SerializeJSONObject ( state, value )</h1>...</div><div id=\"excluded-sec-serializejsonarray\"><h1><span class=\"secnum\">25.5.2.5</span>#sec-serializejsonarray SerializeJSONArray ( state, value )</h1>...</div></emu-clause>\n\n    "}, "sec-frompropertydescriptor": {"num": "6.2.5.4", "title": "#sec-frompropertydescriptor FromPropertyDescriptor ( Desc )", "html": "<emu-clause id=\"sec-frompropertydescriptor\" type=\"abstract operation\" aoid=\"FromPropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-frompropertydescriptor\">#sec-frompropertydescriptor</span> FromPropertyDescriptor ( <var>Desc</var> )</h1>\n        <p>The abstract operation FromPropertyDescriptor takes argument <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or <emu-val>undefined</emu-val>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>Desc</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>obj</var> is an extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties.</li><li>If <var>Desc</var> has a [[Value]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"value\"</emu-val>, <var>Desc</var>.[[Value]]).</li></ol></li><li>If <var>Desc</var> has a [[Writable]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"writable\"</emu-val>, <var>Desc</var>.[[Writable]]).</li></ol></li><li>If <var>Desc</var> has a [[Get]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"get\"</emu-val>, <var>Desc</var>.[[Get]]).</li></ol></li><li>If <var>Desc</var> has a [[Set]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"set\"</emu-val>, <var>Desc</var>.[[Set]]).</li></ol></li><li>If <var>Desc</var> has an [[Enumerable]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"enumerable\"</emu-val>, <var>Desc</var>.[[Enumerable]]).</li></ol></li><li>If <var>Desc</var> has a [[Configurable]] field, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"configurable\"</emu-val>, <var>Desc</var>.[[Configurable]]).</li></ol></li><li>Return <var>obj</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-copydataproperties": {"num": "7.3.25", "title": "#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )", "html": "<emu-clause id=\"sec-copydataproperties\" type=\"abstract operation\" aoid=\"CopyDataProperties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-copydataproperties\">#sec-copydataproperties</span> CopyDataProperties ( <var>target</var>, <var>source</var>, <var>excludedItems</var> )</h1>\n      <p>The abstract operation CopyDataProperties takes arguments <var>target</var> (an Object), <var>source</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>excludedItems</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of property keys). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>source</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>target</var>.</li><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var>, do<ol><li>Let <var>excluded</var> be <emu-val>false</emu-val>.</li><li>For each element <var>e</var> of <var>excludedItems</var>, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>nextKey</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>excluded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>excluded</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>target</var>, <var>nextKey</var>, <var>propValue</var>).</li></ol></li></ol></li></ol></li><li>Return <var>target</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The target passed in here is always a newly created object which is not directly accessible in case of an error being thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-promise.allsettled-resolve-element-functions": {"num": "27.2.4.2.2", "title": "#sec-promise.allsettled-resolve-element-functions Promise.allSettled Resolve Element Functions", "html": "<emu-clause id=\"sec-promise.allsettled-resolve-element-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise.allsettled-resolve-element-functions\">#sec-promise.allsettled-resolve-element-functions</span> <code>Promise.allSettled</code> Resolve Element Functions</h1>\n          <p>A <code>Promise.allSettled</code> resolve element function is an anonymous built-in function that is used to resolve a specific <code>Promise.allSettled</code> element. Each <code>Promise.allSettled</code> resolve element function has [[Index]], [[Values]], [[Capability]], [[RemainingElements]], and [[AlreadyCalled]] internal slots.</p>\n          <p>When a <code>Promise.allSettled</code> resolve element function is called with argument <var>x</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>alreadyCalled</var> be <var>F</var>.[[AlreadyCalled]].</li><li>If <var>alreadyCalled</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>alreadyCalled</var>.[[Value]] to <emu-val>true</emu-val>.</li><li>Let <var>index</var> be <var>F</var>.[[Index]].</li><li>Let <var>values</var> be <var>F</var>.[[Values]].</li><li>Let <var>promiseCapability</var> be <var>F</var>.[[Capability]].</li><li>Let <var>remainingElementsCount</var> be <var>F</var>.[[RemainingElements]].</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"status\"</emu-val>, <emu-val>\"fulfilled\"</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"value\"</emu-val>, <var>x</var>).</li><li>Set <var>values</var>[<var>index</var>] to <var>obj</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>valuesArray</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>values</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>valuesArray</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a <code>Promise.allSettled</code> resolve element function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n\n        "}, "sec-createunmappedargumentsobject": {"num": "10.4.4.6", "title": "#sec-createunmappedargumentsobject CreateUnmappedArgumentsObject ( argumentsList )", "html": "<emu-clause id=\"sec-createunmappedargumentsobject\" type=\"abstract operation\" aoid=\"CreateUnmappedArgumentsObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</span> CreateUnmappedArgumentsObject ( <var>argumentsList</var> )</h1>\n        <p>The abstract operation CreateUnmappedArgumentsObject takes argument <var>argumentsList</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>len</var> be the number of elements in <var>argumentsList</var>.</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>, &#171; [[ParameterMap]] &#187;).</li><li>Set <var>obj</var>.[[ParameterMap]] to <emu-val>undefined</emu-val>.</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Value]]: <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>len</var>), [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>val</var> be <var>argumentsList</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)), <var>val</var>).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"callee\"</emu-val>, PropertyDescriptor { [[Get]]: <emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>, [[Set]]: <emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array": {"num": "23.1.1.1", "title": "#sec-array Array ( ...values )", "html": "<emu-clause id=\"sec-array\" oldids=\"sec-array-constructor-array,sec-array-len,sec-array-items\"><span id=\"sec-array-items\"></span><span id=\"sec-array-len\"></span><span id=\"sec-array-constructor-array\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array\">#sec-array</span> Array ( ...<var>values</var> )</h1>\n        <p>When the <code>Array</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, let <var>newTarget</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>; else let <var>newTarget</var> be NewTarget.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%Array.prototype%\"</emu-val>).</li><li>Let <var>numberOfArgs</var> be the number of elements in <var>values</var>.</li><li>If <var>numberOfArgs</var> = 0, then<ol><li>Return !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0, <var>proto</var>).</li></ol></li><li>Else if <var>numberOfArgs</var> = 1, then<ol><li>Let <var>len</var> be <var>values</var>[0].</li><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0, <var>proto</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>len</var>) is not Number, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>array</var>, <emu-val>\"0\"</emu-val>, <var>len</var>).</li><li>Let <var>intLen</var> be <emu-val>1</emu-val><sub>&#120125;</sub>.</li></ol></li><li>Else,<ol><li>Let <var>intLen</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>len</var>).</li><li>If <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>intLen</var>, <var>len</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <emu-val>\"length\"</emu-val>, <var>intLen</var>, <emu-val>true</emu-val>).</li><li>Return <var>array</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>numberOfArgs</var> &#8805; 2.</li><li>Let <var>array</var> be ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>numberOfArgs</var>, <var>proto</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>numberOfArgs</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>itemK</var> be <var>values</var>[<var>k</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>array</var>, <var>Pk</var>, <var>itemK</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>array</var>'s <emu-val>\"length\"</emu-val> property is <var>numberOfArgs</var>.</li><li>Return <var>array</var>.</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-object.fromentries": {"num": "20.1.2.7", "title": "#sec-object.fromentries Object.fromEntries ( iterable )", "html": "<emu-clause id=\"sec-object.fromentries\" oldids=\"sec-create-data-property-on-object-functions\"><span id=\"sec-create-data-property-on-object-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.fromentries\">#sec-object.fromentries</span> Object.fromEntries ( <var>iterable</var> )</h1>\n        <p>When the <code>fromEntries</code> method is called with argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>iterable</var>).</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>obj</var> is an extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties.</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>key</var>, <var>value</var>) that captures <var>obj</var> and performs the following steps when called:<ol><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>key</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <var>propertyKey</var>, <var>value</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>adder</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>closure</var>, 2, <emu-val>\"\"</emu-val>, &#171; &#187;).</li><li>Return ?&#160;<emu-xref aoid=\"AddEntriesFromIterable\"><a href=\"#sec-add-entries-from-iterable\">AddEntriesFromIterable</a></emu-xref>(<var>obj</var>, <var>iterable</var>, <var>adder</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          The function created for <var>adder</var> is never directly accessible to ECMAScript code.\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-iteratorbindinginitialization": {"num": "8.5.3", "title": "#sec-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization", "html": "<emu-clause id=\"sec-runtime-semantics-iteratorbindinginitialization\" oldids=\"sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization,sec-function-definitions-runtime-semantics-iteratorbindinginitialization,sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization,sec-async-arrow-function-definitions-IteratorBindingInitialization\" type=\"sdo\" aoid=\"IteratorBindingInitialization\"><span id=\"sec-async-arrow-function-definitions-IteratorBindingInitialization\"></span><span id=\"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\"></span><span id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"></span><span id=\"sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-iteratorbindinginitialization\">#sec-runtime-semantics-iteratorbindinginitialization</span> Runtime Semantics: IteratorBindingInitialization</h1>\n      <p>The syntax-directed operation IteratorBindingInitialization takes arguments <var>iteratorRecord</var> and <var>environment</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for formal parameter lists of <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict functions</a></emu-xref>. In that case the formal parameter bindings are preinitialized in order to deal with the possibility of multiple parameters with the same name.</p>\n      </div></emu-note>\n      <p>It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mdhsnk3i\" id=\"prod-tsjeAqRc\">\n        <emu-t>[</emu-t>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mf_msvtp\" id=\"prod--IC6X92I\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dev8fspa\" id=\"prod-NrdrIJZT\">\n        <emu-t>[</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lby6fogn\" id=\"prod-KgRoomIq\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7lkdseap\" id=\"prod-jvZ0PZvK\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hiwampap\" id=\"prod-JkWX9ITf\">\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sh--_n4f\" id=\"prod-mMA3BDq4\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-iteratordestructuringassignmentevaluation\">IteratorDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SingleNameBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5neqctp\" id=\"prod-SVSt7_f4\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>, <var>environment</var>).</li><li>Let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Set <var>v</var> to <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li></ol></li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahx6lm0w\" id=\"prod-m05a8O_b\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Set <var>v</var> to <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li></ol></li><li>If <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> with <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ffhe3nqa\" id=\"prod-evgdYCB8\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <var>environment</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>A</var>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>A</var>).</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingRestElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hmjzlo6g\" id=\"prod-QEcf_4fA\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> with <var>A</var> and <var>environment</var> as the arguments.</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>nextValue</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-1uizUnEF\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uqeba6gz\" id=\"prod-uQ_NTpHd\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameterList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ijrjejbs\" id=\"prod-F7oEv_fM\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Return the result of performing <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\" id=\"prod-D3j0ZmD-\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>v</var> be <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>.</li><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Set <var>v</var> to <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> using <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yrb110hm\" id=\"prod-F51qoUgS\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>formals</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> of <var>formals</var> with arguments <var>iteratorRecord</var> and <var>environment</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowBindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\" id=\"prod-1SN5A2Ci\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>v</var> be <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>.</li><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Set <var>v</var> to <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> using <var>v</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-array.prototype-@@unscopables": {"num": "23.1.3.35", "title": "#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]", "html": "<emu-clause id=\"sec-array.prototype-@@unscopables\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype-@@unscopables\">#sec-array.prototype-@@unscopables</span> Array.prototype [ @@unscopables ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@unscopables</a></emu-xref> <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> is an object created by the following steps:</p>\n        <emu-alg><ol><li>Let <var>unscopableList</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"at\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"copyWithin\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"entries\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"fill\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"find\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"findIndex\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flat\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flatMap\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"includes\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"keys\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"values\"</emu-val>, <emu-val>true</emu-val>).</li><li>Return <var>unscopableList</var>.</li></ol></emu-alg>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The own property names of this object are property names that were not included as standard properties of <code>Array.prototype</code> prior to the ECMAScript 2015 specification. These names are ignored for <code>with</code> statement binding purposes in order to preserve the behaviour of existing code that might use one of these names as a binding in an outer scope that is shadowed by a <code>with</code> statement whose binding object is an Array.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-runtime-semantics-propertydefinitionevaluation": {"num": "13.2.5.5", "title": "#sec-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydefinitionevaluation\" oldids=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" type=\"sdo\" aoid=\"PropertyDefinitionEvaluation\"><span id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n        <p>The syntax-directed operation PropertyDefinitionEvaluation takes argument <var>object</var>. It is defined piecewise over the following productions:</p>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mvlwazei\" id=\"prod-2nasR_1u\">\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with argument <var>object</var>.</li><li>Return the result of performing <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> with argument <var>object</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w7ifpmpd\" id=\"prod-r1teTyPc\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>excludedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"CopyDataProperties\"><a href=\"#sec-copydataproperties\">CopyDataProperties</a></emu-xref>(<var>object</var>, <var>fromValue</var>, <var>excludedNames</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i2hxnrih\" id=\"prod-pxaBv7Tq\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propName</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>object</var>, <var>propName</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\" id=\"prod-N8qwXXqo\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If this <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is contained within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> that is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-eval\"><a href=\"#step-json-parse-eval\" class=\"excluded-xref\" excluded-id=\"step-json-parse-eval\">#step-json-parse-eval</a></emu-xref> of <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>), then<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val> and if <emu-xref aoid=\"IsComputedPropertyKey\"><a href=\"#sec-static-semantics-iscomputedpropertykey\">IsComputedPropertyKey</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return ! <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\" id=\"prod-FVQpyKtq\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with arguments <var>object</var> and <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-proxy.revocable": {"num": "28.2.2.1", "title": "#sec-proxy.revocable Proxy.revocable ( target, handler )", "html": "<emu-clause id=\"sec-proxy.revocable\" oldids=\"sec-proxy-revocation-functions\"><span id=\"sec-proxy-revocation-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy.revocable\">#sec-proxy.revocable</span> Proxy.revocable ( <var>target</var>, <var>handler</var> )</h1>\n        <p>The <code>Proxy.revocable</code> function is used to create a revocable Proxy object. When <code>Proxy.revocable</code> is called with arguments <var>target</var> and <var>handler</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>p</var> be ?&#160;<emu-xref aoid=\"ProxyCreate\"><a href=\"#sec-proxycreate\">ProxyCreate</a></emu-xref>(<var>target</var>, <var>handler</var>).</li><li>Let <var>revokerClosure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures nothing and performs the following steps when called:<ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>p</var> be <var>F</var>.[[RevocableProxy]].</li><li>If <var>p</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[RevocableProxy]] to <emu-val>null</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a Proxy object.</li><li>Set <var>p</var>.[[ProxyTarget]] to <emu-val>null</emu-val>.</li><li>Set <var>p</var>.[[ProxyHandler]] to <emu-val>null</emu-val>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>revoker</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>revokerClosure</var>, 0, <emu-val>\"\"</emu-val>, &#171; [[RevocableProxy]] &#187;).</li><li>Set <var>revoker</var>.[[RevocableProxy]] to <var>p</var>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>result</var>, <emu-val>\"proxy\"</emu-val>, <var>p</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>result</var>, <emu-val>\"revoke\"</emu-val>, <var>revoker</var>).</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-object.getownpropertydescriptors": {"num": "20.1.2.9", "title": "#sec-object.getownpropertydescriptors Object.getOwnPropertyDescriptors ( O )", "html": "<emu-clause id=\"sec-object.getownpropertydescriptors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.getownpropertydescriptors\">#sec-object.getownpropertydescriptors</span> Object.getOwnPropertyDescriptors ( <var>O</var> )</h1>\n        <p>When the <code>getOwnPropertyDescriptors</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>ownKeys</var> be ? <var>obj</var>.[[OwnPropertyKeys]]().</li><li>Let <var>descriptors</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>For each element <var>key</var> of <var>ownKeys</var>, do<ol><li>Let <var>desc</var> be ? <var>obj</var>.[[GetOwnProperty]](<var>key</var>).</li><li>Let <var>descriptor</var> be !&#160;<emu-xref aoid=\"FromPropertyDescriptor\"><a href=\"#sec-frompropertydescriptor\">FromPropertyDescriptor</a></emu-xref>(<var>desc</var>).</li><li>If <var>descriptor</var> is not <emu-val>undefined</emu-val>, perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>descriptors</var>, <var>key</var>, <var>descriptor</var>).</li></ol></li><li>Return <var>descriptors</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexpbuiltinexec": {"num": "22.2.5.2.2", "title": "#sec-regexpbuiltinexec RegExpBuiltinExec ( R, S )", "html": "<emu-clause id=\"sec-regexpbuiltinexec\" type=\"abstract operation\" aoid=\"RegExpBuiltinExec\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpbuiltinexec\">#sec-regexpbuiltinexec</span> RegExpBuiltinExec ( <var>R</var>, <var>S</var> )</h1>\n          <p>The abstract operation RegExpBuiltinExec takes arguments <var>R</var> (an initialized RegExp instance) and <var>S</var> (a String). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>Let <var>lastIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains <emu-val>\"g\"</emu-val>, let <var>global</var> be <emu-val>true</emu-val>; else let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>sticky</var> be <emu-val>true</emu-val>; else let <var>sticky</var> be <emu-val>false</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val> and <var>sticky</var> is <emu-val>false</emu-val>, set <var>lastIndex</var> to 0.</li><li>Let <var>matcher</var> be <var>R</var>.[[RegExpMatcher]].</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>fullUnicode</var> be <emu-val>true</emu-val>; else let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Let <var>matchSucceeded</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>matchSucceeded</var> is <emu-val>false</emu-val>,<ol><li>If <var>lastIndex</var> &gt; <var>length</var>, then<ol><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Let <var>r</var> be <var>matcher</var>(<var>S</var>, <var>lastIndex</var>).</li><li>If <var>r</var> is <emu-const>failure</emu-const>, then<ol><li>If <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Set <var>lastIndex</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>lastIndex</var>, <var>fullUnicode</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a State.</li><li>Set <var>matchSucceeded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Let <var>e</var> be <var>r</var>'s <var>endIndex</var> value.</li><li>If <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><var>e</var> is an index into the <var>Input</var> character list, derived from <var>S</var>, matched by <var>matcher</var>. Let <var>eUTF</var> be the smallest index into <var>S</var> that corresponds to the character at element <var>e</var> of <var>Input</var>. If <var>e</var> is greater than or equal to the number of elements in <var>Input</var>, then <var>eUTF</var> is the number of code units in <var>S</var>.</li><li>Set <var>e</var> to <var>eUTF</var>.</li></ol></li><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>e</var>), <emu-val>true</emu-val>).</li></ol></li><li>Let <var>n</var> be the number of elements in <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. (This is the same value as <emu-xref href=\"#sec-notation\"><a href=\"#sec-notation\" class=\"excluded-xref\" excluded-id=\"sec-notation\">#sec-notation</a></emu-xref>'s <var>NcapturingParens</var>.)</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> &lt; 2<sup>32</sup> - 1.</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>n</var> + 1).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>A</var>'s <emu-val>\"length\"</emu-val> property is <var>n</var> + 1.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <emu-val>\"index\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lastIndex</var>)).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <emu-val>\"input\"</emu-val>, <var>S</var>).</li><li>Let <var>matchedSubstr</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>lastIndex</var> to <var>e</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>matchedSubstr</var>).</li><li>If <var>R</var> contains any <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>groups</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>groups</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <emu-val>\"groups\"</emu-val>, <var>groups</var>).</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> such that <var>i</var> &#8805; 1 and <var>i</var> &#8804; <var>n</var>, in ascending order, do<ol><li>Let <var>captureI</var> be <var>i</var><sup>th</sup> element of <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>captureI</var> is <emu-val>undefined</emu-val>, let <var>capturedValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code points.</li><li>Let <var>capturedValue</var> be !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>captureI</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fullUnicode</var> is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code units.</li><li>Let <var>capturedValue</var> be the String value consisting of the code units of <var>captureI</var>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>)), <var>capturedValue</var>).</li><li>If the <var>i</var><sup>th</sup> capture of <var>R</var> was defined with a <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>s</var> be the <emu-xref aoid=\"CapturingGroupName\"><a href=\"#sec-static-semantics-capturinggroupname\">CapturingGroupName</a></emu-xref> of the corresponding <emu-nt><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a></emu-nt>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>groups</var>, <var>s</var>, <var>capturedValue</var>).</li></ol></li></ol></li><li>Return <var>A</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-arrayaccumulation": {"num": "13.2.4.1", "title": "#sec-runtime-semantics-arrayaccumulation Runtime Semantics: ArrayAccumulation", "html": "<emu-clause id=\"sec-runtime-semantics-arrayaccumulation\" oldids=\"sec-static-semantics-elisionwidth\" type=\"sdo\" aoid=\"ArrayAccumulation\"><span id=\"sec-static-semantics-elisionwidth\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-arrayaccumulation\">#sec-runtime-semantics-arrayaccumulation</span> Runtime Semantics: ArrayAccumulation</h1>\n        <p>The syntax-directed operation ArrayAccumulation takes arguments <var>array</var> and <var>nextIndex</var>. It is defined piecewise over the following productions:</p>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lhh3u7f7\" id=\"prod-ACq7eTCD\"><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>len</var> be <var>nextIndex</var> + 1.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <emu-val>\"length\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>len</var>), <emu-val>true</emu-val>).</li><li>NOTE: The above Set throws if <var>len</var> exceeds 2<sup>32</sup>-1.</li><li>Return <var>len</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gg0bjle3\" id=\"prod-KyZNZ-MT\">\n        <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2aa1epou\" id=\"prod-_juTnZH7\">\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>)), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbpz0ate\" id=\"prod-PNKSiljq\">\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_sr5sq6t\" id=\"prod-9ZiZA1Ch\">\n        <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>)), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aleaauxs\" id=\"prod-HRfw0EOP\">\n        <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing <emu-xref aoid=\"ArrayAccumulation\"><a href=\"#sec-runtime-semantics-arrayaccumulation\">ArrayAccumulation</a></emu-xref> for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SpreadElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w7ifpmpd\" id=\"prod-_w8Sn596\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>nextIndex</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>)), <var>nextValue</var>).</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref> is used to ensure that own properties are defined for the array even if the standard built-in <emu-xref href=\"#sec-properties-of-the-array-prototype-object\"><a href=\"#sec-properties-of-the-array-prototype-object\">Array prototype object</a></emu-xref> has been modified in a manner that would preclude the creation of new own properties using [[Set]].</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-createarrayfromlist": {"num": "7.3.17", "title": "#sec-createarrayfromlist CreateArrayFromList ( elements )", "html": "<emu-clause id=\"sec-createarrayfromlist\" type=\"abstract operation\" aoid=\"CreateArrayFromList\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createarrayfromlist\">#sec-createarrayfromlist</span> CreateArrayFromList ( <var>elements</var> )</h1>\n      <p>The abstract operation CreateArrayFromList takes argument <var>elements</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language values</a></emu-xref>). It is used to create an Array whose elements are provided by <var>elements</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>For each element <var>e</var> of <var>elements</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>e</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Return <var>array</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-meta-properties-runtime-semantics-evaluation": {"num": "13.3.12.1", "title": "#sec-meta-properties-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-meta-properties-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-meta-properties-runtime-semantics-evaluation\">#sec-meta-properties-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"NewTarget\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0t4hpsv9\">\n        <emu-t>new</emu-t>\n        <emu-t>.</emu-t>\n        <emu-t>target</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"ImportMeta\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8myn6frq\">\n        <emu-t>import</emu-t>\n        <emu-t>.</emu-t>\n        <emu-t>meta</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be !&#160;<emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>Let <var>importMeta</var> be <var>module</var>.[[ImportMeta]].</li><li>If <var>importMeta</var> is <emu-const>empty</emu-const>, then<ol><li>Set <var>importMeta</var> to !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Let <var>importMetaValues</var> be !&#160;<emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>(<var>module</var>).</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>importMetaValues</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>importMeta</var>, <var>p</var>.[[Key]], <var>p</var>.[[Value]]).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"HostFinalizeImportMeta\"><a href=\"#sec-hostfinalizeimportmeta\">HostFinalizeImportMeta</a></emu-xref>(<var>importMeta</var>, <var>module</var>).</li><li>Set <var>module</var>.[[ImportMeta]] to <var>importMeta</var>.</li><li>Return <var>importMeta</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>importMeta</var>) is Object.</li><li>Return <var>importMeta</var>.</li></ol></li></ol></emu-alg>\n\n        <div id=\"excluded-sec-hostgetimportmetaproperties\"><h1><span class=\"secnum\">13.3.12.1.1</span>#sec-hostgetimportmetaproperties HostGetImportMetaProperties ( moduleRecord )</h1>...</div><div id=\"excluded-sec-hostfinalizeimportmeta\"><h1><span class=\"secnum\">13.3.12.1.2</span>#sec-hostfinalizeimportmeta HostFinalizeImportMeta ( importMeta, moduleRecord )</h1>...</div></emu-clause>\n    "}, "sec-createmappedargumentsobject": {"num": "10.4.4.7", "title": "#sec-createmappedargumentsobject CreateMappedArgumentsObject ( func, formals, argumentsList, env )", "html": "<emu-clause id=\"sec-createmappedargumentsobject\" type=\"abstract operation\" aoid=\"CreateMappedArgumentsObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmappedargumentsobject\">#sec-createmappedargumentsobject</span> CreateMappedArgumentsObject ( <var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var> )</h1>\n        <p>The abstract operation CreateMappedArgumentsObject takes arguments <var>func</var> (an Object), <var>formals</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>), and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>formals</var> does not contain a rest parameter, any binding patterns, or any initializers. It may contain duplicate identifiers.</li><li>Let <var>len</var> be the number of elements in <var>argumentsList</var>.</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(&#171; [[Prototype]], [[Extensible]], [[ParameterMap]] &#187;).</li><li>Set <var>obj</var>.[[GetOwnProperty]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-getownproperty-p\"><a href=\"#sec-arguments-exotic-objects-getownproperty-p\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-getownproperty-p\">#sec-arguments-exotic-objects-getownproperty-p</a></emu-xref>.</li><li>Set <var>obj</var>.[[DefineOwnProperty]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-arguments-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-defineownproperty-p-desc\">#sec-arguments-exotic-objects-defineownproperty-p-desc</a></emu-xref>.</li><li>Set <var>obj</var>.[[Get]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-get-p-receiver\"><a href=\"#sec-arguments-exotic-objects-get-p-receiver\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-get-p-receiver\">#sec-arguments-exotic-objects-get-p-receiver</a></emu-xref>.</li><li>Set <var>obj</var>.[[Set]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-set-p-v-receiver\"><a href=\"#sec-arguments-exotic-objects-set-p-v-receiver\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-set-p-v-receiver\">#sec-arguments-exotic-objects-set-p-v-receiver</a></emu-xref>.</li><li>Set <var>obj</var>.[[Delete]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-delete-p\"><a href=\"#sec-arguments-exotic-objects-delete-p\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-delete-p\">#sec-arguments-exotic-objects-delete-p</a></emu-xref>.</li><li>Set <var>obj</var>.[[Prototype]] to <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>map</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Set <var>obj</var>.[[ParameterMap]] to <var>map</var>.</li><li>Let <var>parameterNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>formals</var>.</li><li>Let <var>numberOfParameters</var> be the number of elements in <var>parameterNames</var>.</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>val</var> be <var>argumentsList</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)), <var>val</var>).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Value]]: <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>len</var>), [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Let <var>mappedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>index</var> to <var>numberOfParameters</var> - 1.</li><li>Repeat, while <var>index</var> &#8805; 0,<ol><li>Let <var>name</var> be <var>parameterNames</var>[<var>index</var>].</li><li>If <var>name</var> is not an element of <var>mappedNames</var>, then<ol><li>Add <var>name</var> as an element of the list <var>mappedNames</var>.</li><li>If <var>index</var> &lt; <var>len</var>, then<ol><li>Let <var>g</var> be <emu-xref aoid=\"MakeArgGetter\"><a href=\"#sec-makearggetter\">MakeArgGetter</a></emu-xref>(<var>name</var>, <var>env</var>).</li><li>Let <var>p</var> be <emu-xref aoid=\"MakeArgSetter\"><a href=\"#sec-makeargsetter\">MakeArgSetter</a></emu-xref>(<var>name</var>, <var>env</var>).</li><li>Perform <var>map</var>.[[DefineOwnProperty]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)), PropertyDescriptor { [[Set]]: <var>p</var>, [[Get]]: <var>g</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li></ol></li></ol></li><li>Set <var>index</var> to <var>index</var> - 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"callee\"</emu-val>, PropertyDescriptor { [[Value]]: <var>func</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-makearggetter\"><h1><span class=\"secnum\">10.4.4.7.1</span>#sec-makearggetter MakeArgGetter ( name, env )</h1>...</div><div id=\"excluded-sec-makeargsetter\"><h1><span class=\"secnum\">10.4.4.7.2</span>#sec-makeargsetter MakeArgSetter ( name, env )</h1>...</div></emu-clause>\n    "}, "sec-json.parse": {"num": "25.5.1", "title": "#sec-json.parse JSON.parse ( text [ , reviver ] )", "html": "<emu-clause id=\"sec-json.parse\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.parse\">#sec-json.parse</span> JSON.parse ( <var>text</var> [ , <var>reviver</var> ] )</h1>\n      <p>The <code>parse</code> function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON format represents literals, arrays, and objects with a syntax similar to the syntax for ECMAScript literals, Array Initializers, and Object Initializers. After parsing, JSON objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript Array instances. JSON strings, numbers, booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and <emu-val>null</emu-val>.</p>\n      <p>The optional <var>reviver</var> parameter is a function that takes two parameters, <var>key</var> and <var>value</var>. It can filter and transform the results. It is called with each of the <var>key</var>/<var>value</var> pairs produced by the parse, and its return value is used instead of the original value. If it returns what it received, the structure is not modified. If it returns <emu-val>undefined</emu-val> then the property is deleted from the result.</p>\n      <emu-alg><ol><li>Let <var>jsonString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>text</var>).</li><li id=\"step-json-parse-validate\">Parse !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>jsonString</var>) as a JSON text as specified in ECMA-404. Throw a <emu-val>SyntaxError</emu-val> exception if it is not a valid JSON text as defined in that specification.</li><li>Let <var>scriptString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"(\"</emu-val>, <var>jsonString</var>, and <emu-val>\");\"</emu-val>.</li><li id=\"step-json-parse-parse\">Let <var>script</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>scriptString</var>), <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li>NOTE: The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules defined in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref> have special handling for the above invocation of <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>script</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</li><li id=\"step-json-parse-eval\">Let <var>completion</var> be the result of evaluating <var>script</var>.</li><li>NOTE: The <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> semantics defined in <emu-xref href=\"#sec-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</a></emu-xref> have special handling for the above evaluation.</li><li>Let <var>unfiltered</var> be <var>completion</var>.[[Value]].</li><li id=\"step-json-parse-assert-type\"><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>unfiltered</var> is either a String, Number, Boolean, Null, or an Object that is defined by either an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>reviver</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>root</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Let <var>rootName</var> be the empty String.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>unfiltered</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>reviver</var>).</li></ol></li><li>Else,<ol><li>Return <var>unfiltered</var>.</li></ol></li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>parse</code> function is <emu-val>2</emu-val><sub>&#120125;</sub>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Valid JSON text is a subset of the ECMAScript <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> syntax. Step <emu-xref href=\"#step-json-parse-validate\"><a href=\"#step-json-parse-validate\" class=\"excluded-xref\" excluded-id=\"step-json-parse-validate\">#step-json-parse-validate</a></emu-xref> verifies that <var>jsonString</var> conforms to that subset, and step <emu-xref href=\"#step-json-parse-assert-type\"><a href=\"#step-json-parse-assert-type\" class=\"excluded-xref\" excluded-id=\"step-json-parse-assert-type\">#step-json-parse-assert-type</a></emu-xref> asserts that that parsing and evaluation returns a value of an appropriate type.</p>\n        <p>However, because <emu-xref href=\"#sec-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</a></emu-xref> behaves differently during <code>JSON.parse</code>, the same source text can produce different results when evaluated as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> rather than as JSON. Furthermore, the Early Error for duplicate <emu-val>\"__proto__\"</emu-val> properties in object literals, which likewise does not apply during <code>JSON.parse</code>, means that not all texts accepted by <code>JSON.parse</code> are valid as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt>, despite matching the grammar.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-internalizejsonproperty\"><h1><span class=\"secnum\">25.5.1.1</span>#sec-internalizejsonproperty InternalizeJSONProperty ( holder, name, reviver )</h1>...</div></emu-clause>\n\n    "}, "sec-string.prototype.split": {"num": "22.1.3.22", "title": "#sec-string.prototype.split String.prototype.split ( separator, limit )", "html": "<emu-clause id=\"sec-string.prototype.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.split\">#sec-string.prototype.split</span> String.prototype.split ( <var>separator</var>, <var>limit</var> )</h1>\n        <p>Returns an Array into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of <var>separator</var>; these occurrences are not part of any String in the returned array, but serve to divide up the String value. The value of <var>separator</var> may be a String of any length or it may be an object, such as a RegExp, that has a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref> method.</p>\n        <p>When the <code>split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>separator</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>separator</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref>).</li><li>If <var>splitter</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>splitter</var>, <var>separator</var>, &#171; <var>O</var>, <var>limit</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>)).</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>If <var>lim</var> = 0, return <var>A</var>.</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>s</var> be the length of <var>S</var>.</li><li>If <var>s</var> = 0, then<ol><li>If <var>R</var> is not the empty String, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li></ol></li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &#8800; <var>s</var>,<ol><li>Let <var>e</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, <var>q</var>, <var>R</var>).</li><li>If <var>e</var> is <emu-const>not-matched</emu-const>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> &#8804; <var>s</var>.</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>s</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The value of <var>separator</var> may be an empty String. In this case, <var>separator</var> does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. If <var>separator</var> is the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.</p>\n          <p>If the <emu-val>this</emu-val> value is (or converts to) the empty String, the result depends on whether <var>separator</var> can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If <var>separator</var> is <emu-val>undefined</emu-val>, then the result array contains just one String, which is the <emu-val>this</emu-val> value (converted to a String). If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>split</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-splitmatch\"><h1><span class=\"secnum\">22.1.3.22.1</span>#sec-splitmatch SplitMatch ( S, q, R )</h1>...</div></emu-clause>\n\n      "}, "sec-createiterresultobject": {"num": "7.4.9", "title": "#sec-createiterresultobject CreateIterResultObject ( value, done )", "html": "<emu-clause id=\"sec-createiterresultobject\" type=\"abstract operation\" aoid=\"CreateIterResultObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createiterresultobject\">#sec-createiterresultobject</span> CreateIterResultObject ( <var>value</var>, <var>done</var> )</h1>\n      <p>The abstract operation CreateIterResultObject takes arguments <var>value</var> and <var>done</var> (a Boolean). It creates an object that conforms to the <i>IteratorResult</i> interface. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"value\"</emu-val>, <var>value</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"done\"</emu-val>, <var>done</var>).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-promise.allsettled-reject-element-functions": {"num": "27.2.4.2.3", "title": "#sec-promise.allsettled-reject-element-functions Promise.allSettled Reject Element Functions", "html": "<emu-clause id=\"sec-promise.allsettled-reject-element-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise.allsettled-reject-element-functions\">#sec-promise.allsettled-reject-element-functions</span> <code>Promise.allSettled</code> Reject Element Functions</h1>\n          <p>A <code>Promise.allSettled</code> reject element function is an anonymous built-in function that is used to reject a specific <code>Promise.allSettled</code> element. Each <code>Promise.allSettled</code> reject element function has [[Index]], [[Values]], [[Capability]], [[RemainingElements]], and [[AlreadyCalled]] internal slots.</p>\n          <p>When a <code>Promise.allSettled</code> reject element function is called with argument <var>x</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>alreadyCalled</var> be <var>F</var>.[[AlreadyCalled]].</li><li>If <var>alreadyCalled</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>alreadyCalled</var>.[[Value]] to <emu-val>true</emu-val>.</li><li>Let <var>index</var> be <var>F</var>.[[Index]].</li><li>Let <var>values</var> be <var>F</var>.[[Values]].</li><li>Let <var>promiseCapability</var> be <var>F</var>.[[Capability]].</li><li>Let <var>remainingElementsCount</var> be <var>F</var>.[[RemainingElements]].</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"status\"</emu-val>, <emu-val>\"rejected\"</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>obj</var>, <emu-val>\"reason\"</emu-val>, <var>x</var>).</li><li>Set <var>values</var>[<var>index</var>] to <var>obj</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>valuesArray</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>values</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>valuesArray</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a <code>Promise.allSettled</code> reject element function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n      "}, "sec-regexp.prototype-@@split": {"num": "22.2.5.13", "title": "#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )", "html": "<emu-clause id=\"sec-regexp.prototype-@@split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@split\">#sec-regexp.prototype-@@split</span> RegExp.prototype [ @@split ] ( <var>string</var>, <var>limit</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns an Array into which substrings of the result of converting <var>string</var> to a String have been stored. The substrings are determined by searching from left to right for matches of the <emu-val>this</emu-val> value regular expression; these occurrences are not part of any String in the returned array, but serve to divide up the String value.</p>\n          <p>The <emu-val>this</emu-val> value may be an empty regular expression or a regular expression that can match an empty String. In this case, the regular expression does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. (For example, if the regular expression matches the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.) Only the first match at a given index of the String is considered, even if backtracking could yield a non-empty <emu-not-ref>substring</emu-not-ref> match at that index. (For example, <code>/a*?/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"a\", \"b\"]</code>, while <code>/a*/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"\",\"b\"]</code>.)</p>\n          <p>If <var>string</var> is (or converts to) the empty String, the result depends on whether the regular expression can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If the regular expression contains capturing parentheses, then each time <var>separator</var> is matched the results (including any <emu-val>undefined</emu-val> results) of the capturing parentheses are spliced into the output array. For example,</p>\n          <pre><code class=\"javascript hljs\">/&lt;(\\/)?([^<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>]+)&gt;/[Symbol.split](\"A<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">B</span>&gt;</span>bold<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">B</span>&gt;</span>and<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CODE</span>&gt;</span>coded<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CODE</span>&gt;</span>\")</span></code></pre>\n          <p>evaluates to the array</p>\n          <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"bold\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"and\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"coded\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          <p>If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <p>When the <code>@@split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>rx</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"flags\"</emu-val>)).</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>unicodeMatching</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>unicodeMatching</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>newFlags</var> be <var>flags</var>.</li><li>Else, let <var>newFlags</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>flags</var> and <emu-val>\"y\"</emu-val>.</li><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>rx</var>, <var>newFlags</var> &#187;).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>)).</li><li>If <var>lim</var> is 0, return <var>A</var>.</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>size</var> is 0, then<ol><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is not <emu-val>null</emu-val>, return <var>A</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &lt; <var>size</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>q</var>), <emu-val>true</emu-val>).</li><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is <emu-val>null</emu-val>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>e</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Set <var>e</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>size</var>).</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Let <var>numberOfCaptures</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>z</var>).</li><li>Set <var>numberOfCaptures</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>numberOfCaptures</var> - 1, 0).</li><li>Let <var>i</var> be 1.</li><li>Repeat, while <var>i</var> &#8804; <var>numberOfCaptures</var>,<ol><li>Let <var>nextCapture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>z</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>))).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>nextCapture</var>).</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li></ol></li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>size</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.split]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>@@split</code> method ignores the value of the <emu-val>\"global\"</emu-val> and <emu-val>\"sticky\"</emu-val> properties of this RegExp object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}