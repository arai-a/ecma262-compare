{"from": {"secList": ["sec-pattern-semantics", "sec-get-regexp.prototype.unicode", "sec-regexpinitialize", "sec-pattern", "sec-isvalidregularexpressionliteral", "sec-get-regexp.prototype.flags", "sec-notation", "sec-runtime-semantics-charactersetmatcher-abstract-operation", "sec-runtime-semantics-unicodematchproperty-p", "sec-runtime-semantics-canonicalize-ch", "sec-properties-of-the-regexp-prototype-object"], "secData": {"sec-pattern-semantics": {"num": "22.2.2", "title": "#sec-pattern-semantics Pattern Semantics", "html": "<emu-clause id=\"sec-pattern-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</span> Pattern Semantics</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>This section is amended in <emu-xref href=\"#sec-regular-expression-patterns-semantics\"><a href=\"#sec-regular-expression-patterns-semantics\" class=\"excluded-xref\" excluded-id=\"sec-regular-expression-patterns-semantics\">#sec-regular-expression-patterns-semantics</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>A regular expression pattern is converted into an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> using the process described below. An implementation is encouraged to use more efficient algorithms than the ones listed below, as long as the results are the same. The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> is used as the value of a RegExp object's [[RegExpMatcher]] internal slot.</p>\n      <p>A <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is either a BMP pattern or a Unicode pattern depending upon whether or not its associated flags contain a <code>u</code>. A BMP pattern matches against a String interpreted as consisting of a sequence of 16-bit values that are Unicode code points in the range of the Basic Multilingual Plane. A Unicode pattern matches against a String interpreted as consisting of Unicode code points encoded using UTF-16. In the context of describing the behaviour of a BMP pattern &#8220;character&#8221; means a single 16-bit Unicode BMP code point. In the context of describing the behaviour of a Unicode pattern &#8220;character&#8221; means a UTF-16 encoded code point (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>). In either context, &#8220;character value&#8221; means the numeric value of the corresponding non-encoded code point.</p>\n      <p>The syntax and semantics of <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is defined as if the source code for the <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> was a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values where each <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> corresponds to a Unicode code point. If a BMP pattern contains a non-BMP <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> the entire pattern is encoded using UTF-16 and the individual code units of that encoding are used as the elements of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>For example, consider a pattern expressed in source text as the single non-BMP character U+1D11E (MUSICAL SYMBOL G CLEF). Interpreted as a Unicode pattern, it would be a single element (character) <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the single code point 0x1D11E. However, interpreted as a BMP pattern, it is first UTF-16 encoded to produce a two element <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the code units 0xD834 and 0xDD1E.</p>\n        <p>Patterns are passed to the RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> as ECMAScript String values in which non-BMP characters are UTF-16 encoded. For example, the single character MUSICAL SYMBOL G CLEF pattern, expressed as a String value, is a String of length 2 whose elements were the code units 0xD834 and 0xDD1E. So no further translation of the string would be necessary to process it as a BMP pattern consisting of two pattern characters. However, to process it as a Unicode pattern <emu-xref aoid=\"UTF16SurrogatePairToCodePoint\"><a href=\"#sec-utf16decodesurrogatepair\">UTF16SurrogatePairToCodePoint</a></emu-xref> must be used in producing a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is a single pattern character, the code point U+1D11E.</p>\n        <p>An implementation may not actually perform such translations to or from UTF-16, but the semantics of this specification requires that the result of pattern matching be as if such translations were performed.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-notation\"><h1><span class=\"secnum\">22.2.2.1</span>#sec-notation Notation</h1>...</div><div id=\"excluded-sec-pattern\"><h1><span class=\"secnum\">22.2.2.2</span>#sec-pattern Pattern</h1>...</div><div id=\"excluded-sec-disjunction\"><h1><span class=\"secnum\">22.2.2.3</span>#sec-disjunction Disjunction</h1>...</div><div id=\"excluded-sec-alternative\"><h1><span class=\"secnum\">22.2.2.4</span>#sec-alternative Alternative</h1>...</div><div id=\"excluded-sec-term\"><h1><span class=\"secnum\">22.2.2.5</span>#sec-term Term</h1>...</div><div id=\"excluded-sec-assertion\"><h1><span class=\"secnum\">22.2.2.6</span>#sec-assertion Assertion</h1>...</div><div id=\"excluded-sec-quantifier\"><h1><span class=\"secnum\">22.2.2.7</span>#sec-quantifier Quantifier</h1>...</div><div id=\"excluded-sec-atom\"><h1><span class=\"secnum\">22.2.2.8</span>#sec-atom Atom</h1>...</div><div id=\"excluded-sec-atomescape\"><h1><span class=\"secnum\">22.2.2.9</span>#sec-atomescape AtomEscape</h1>...</div><div id=\"excluded-sec-characterescape\"><h1><span class=\"secnum\">22.2.2.10</span>#sec-characterescape CharacterEscape</h1>...</div><div id=\"excluded-sec-decimalescape\"><h1><span class=\"secnum\">22.2.2.11</span>#sec-decimalescape DecimalEscape</h1>...</div><div id=\"excluded-sec-characterclassescape\"><h1><span class=\"secnum\">22.2.2.12</span>#sec-characterclassescape CharacterClassEscape</h1>...</div><div id=\"excluded-sec-characterclass\"><h1><span class=\"secnum\">22.2.2.13</span>#sec-characterclass CharacterClass</h1>...</div><div id=\"excluded-sec-classranges\"><h1><span class=\"secnum\">22.2.2.14</span>#sec-classranges ClassRanges</h1>...</div><div id=\"excluded-sec-nonemptyclassranges\"><h1><span class=\"secnum\">22.2.2.15</span>#sec-nonemptyclassranges NonemptyClassRanges</h1>...</div><div id=\"excluded-sec-nonemptyclassrangesnodash\"><h1><span class=\"secnum\">22.2.2.16</span>#sec-nonemptyclassrangesnodash NonemptyClassRangesNoDash</h1>...</div><div id=\"excluded-sec-classatom\"><h1><span class=\"secnum\">22.2.2.17</span>#sec-classatom ClassAtom</h1>...</div><div id=\"excluded-sec-classatomnodash\"><h1><span class=\"secnum\">22.2.2.18</span>#sec-classatomnodash ClassAtomNoDash</h1>...</div><div id=\"excluded-sec-classescape\"><h1><span class=\"secnum\">22.2.2.19</span>#sec-classescape ClassEscape</h1>...</div></emu-clause>\n\n    "}, "sec-get-regexp.prototype.unicode": {"num": "22.2.5.17", "title": "#sec-get-regexp.prototype.unicode get RegExp.prototype.unicode", "html": "<emu-clause id=\"sec-get-regexp.prototype.unicode\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.unicode\">#sec-get-regexp.prototype.unicode</span> get RegExp.prototype.unicode</h1>\n        <p><code>RegExp.prototype.unicode</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>cu</var> be the code unit 0x0075 (LATIN SMALL LETTER U).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpHasFlag\"><a href=\"#sec-regexphasflag\">RegExpHasFlag</a></emu-xref>(<var>R</var>, <var>cu</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-regexpinitialize": {"num": "22.2.3.2.2", "title": "#sec-regexpinitialize RegExpInitialize ( obj, pattern, flags )", "html": "<emu-clause id=\"sec-regexpinitialize\" type=\"abstract operation\" aoid=\"RegExpInitialize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpinitialize\">#sec-regexpinitialize</span> RegExpInitialize ( <var>obj</var>, <var>pattern</var>, <var>flags</var> )</h1>\n          <p>The abstract operation RegExpInitialize takes arguments <var>obj</var> (an Object), <var>pattern</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>flags</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>pattern</var> is <emu-val>undefined</emu-val>, let <var>P</var> be the empty String.</li><li>Else, let <var>P</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>pattern</var>).</li><li>If <var>flags</var> is <emu-val>undefined</emu-val>, let <var>F</var> be the empty String.</li><li>Else, let <var>F</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>flags</var>).</li><li>If <var>F</var> contains any code unit other than <emu-val>\"g\"</emu-val>, <emu-val>\"i\"</emu-val>, <emu-val>\"m\"</emu-val>, <emu-val>\"s\"</emu-val>, <emu-val>\"u\"</emu-val>, or <emu-val>\"y\"</emu-val> or if it contains the same code unit more than once, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>F</var> contains <emu-val>\"u\"</emu-val>, let <var>u</var> be <emu-val>true</emu-val>; else let <var>u</var> be <emu-val>false</emu-val>.</li><li>If <var>u</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>patternText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>).</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code points of <var>patternText</var>.</li></ol></li><li>Else,<ol><li>Let <var>patternText</var> be the result of interpreting each of <var>P</var>'s 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code unit elements of <var>P</var>.</li></ol></li><li>Let <var>parseResult</var> be <emu-xref aoid=\"ParsePattern\"><a href=\"#sec-parsepattern\">ParsePattern</a></emu-xref>(<var>patternText</var>, <var>u</var>).</li><li>If <var>parseResult</var> is a non-empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-val>SyntaxError</emu-val> objects, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>parseResult</var> is a <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</li><li>Set <var>obj</var>.[[OriginalSource]] to <var>P</var>.</li><li>Set <var>obj</var>.[[OriginalFlags]] to <var>F</var>.</li><li>Set <var>obj</var>.[[RegExpMatcher]] to the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that evaluates <var>parseResult</var> by applying the semantics provided in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> using <var>patternCharacters</var> as the pattern's <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values and <var>F</var> as the flag parameters.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>obj</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-pattern": {"num": "22.2.2.2", "title": "#sec-pattern Pattern", "html": "<emu-clause id=\"sec-pattern\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern\">#sec-pattern</span> Pattern</h1>\n        <p>The production <emu-grammar><emu-production name=\"Pattern\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"eaw70mcy\"><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with 1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>str</var>, <var>index</var>) that captures <var>m</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> which is &#8804; the length of <var>str</var>.</li><li>If <var>Unicode</var> is <emu-val>true</emu-val>, let <var>Input</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>str</var>). Otherwise, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code units that are the elements of <var>str</var>. <var>Input</var> will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>. Each element of <var>Input</var> is considered to be a character.</li><li>Let <var>InputLength</var> be the number of characters contained in <var>Input</var>. This alias will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>.</li><li>Let <var>listIndex</var> be the index into <var>Input</var> of the character that was obtained from element <var>index</var> of <var>str</var>.</li><li>Let <var>c</var> be a new Continuation with parameters (<var>y</var>) that captures nothing and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li>Return <var>y</var>.</li></ol></li><li>Let <var>cap</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> <emu-val>undefined</emu-val> values, indexed 1 through <var>NcapturingParens</var>.</li><li>Let <var>x</var> be the State (<var>listIndex</var>, <var>cap</var>).</li><li>Return <var>m</var>(<var>x</var>, <var>c</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A Pattern evaluates (&#8220;compiles&#8221;) to an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> value. <emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref> can then apply this procedure to a String and an offset within the String to determine whether the pattern would match starting at exactly that offset within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> are designed so that compiling a pattern may throw a <emu-val>SyntaxError</emu-val> exception; on the other hand, once the pattern is successfully compiled, applying the resulting <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> to find a match in a String cannot throw an exception (except for any <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> exceptions that can occur anywhere such as out-of-memory).</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-isvalidregularexpressionliteral": {"num": "13.2.7.2", "title": "#sec-isvalidregularexpressionliteral Static Semantics: IsValidRegularExpressionLiteral ( literal )", "html": "<emu-clause id=\"sec-isvalidregularexpressionliteral\" type=\"abstract operation\" aoid=\"IsValidRegularExpressionLiteral\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isvalidregularexpressionliteral\">#sec-isvalidregularexpressionliteral</span> Static Semantics: IsValidRegularExpressionLiteral ( <var>literal</var> )</h1>\n        <p>The abstract operation IsValidRegularExpressionLiteral takes argument <var>literal</var> (a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It determines if its argument is a valid regular expression literal. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"FlagText\"><a href=\"#sec-static-semantics-flagtext\">FlagText</a></emu-xref> of <var>literal</var> contains any code points other than <code>g</code>, <code>i</code>, <code>m</code>, <code>s</code>, <code>u</code>, or <code>y</code>, or if it contains the same code point more than once, return <emu-val>false</emu-val>.</li><li>Let <var>patternText</var> be <emu-xref aoid=\"BodyText\"><a href=\"#sec-static-semantics-bodytext\">BodyText</a></emu-xref> of <var>literal</var>.</li><li>If <emu-xref aoid=\"FlagText\"><a href=\"#sec-static-semantics-flagtext\">FlagText</a></emu-xref> of <var>literal</var> contains <code>u</code>, let <var>u</var> be <emu-val>true</emu-val>; else let <var>u</var> be <emu-val>false</emu-val>.</li><li>If <var>u</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>stringValue</var> be <emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>patternText</var>).</li><li>Set <var>patternText</var> to the sequence of code points resulting from interpreting each of the 16-bit elements of <var>stringValue</var> as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.</li></ol></li><li>Let <var>parseResult</var> be <emu-xref aoid=\"ParsePattern\"><a href=\"#sec-parsepattern\">ParsePattern</a></emu-xref>(<var>patternText</var>, <var>u</var>).</li><li>If <var>parseResult</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, return <emu-val>true</emu-val>; else return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-regexp.prototype.flags": {"num": "22.2.5.4", "title": "#sec-get-regexp.prototype.flags get RegExp.prototype.flags", "html": "<emu-clause id=\"sec-get-regexp.prototype.flags\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.flags\">#sec-get-regexp.prototype.flags</span> get RegExp.prototype.flags</h1>\n        <p><code>RegExp.prototype.flags</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>result</var> be the empty String.</li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>true</emu-val>, append the code unit 0x0067 (LATIN SMALL LETTER G) as the last code unit of <var>result</var>.</li><li>Let <var>ignoreCase</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"ignoreCase\"</emu-val>)).</li><li>If <var>ignoreCase</var> is <emu-val>true</emu-val>, append the code unit 0x0069 (LATIN SMALL LETTER I) as the last code unit of <var>result</var>.</li><li>Let <var>multiline</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"multiline\"</emu-val>)).</li><li>If <var>multiline</var> is <emu-val>true</emu-val>, append the code unit 0x006D (LATIN SMALL LETTER M) as the last code unit of <var>result</var>.</li><li>Let <var>dotAll</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"dotAll\"</emu-val>)).</li><li>If <var>dotAll</var> is <emu-val>true</emu-val>, append the code unit 0x0073 (LATIN SMALL LETTER S) as the last code unit of <var>result</var>.</li><li>Let <var>unicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>If <var>unicode</var> is <emu-val>true</emu-val>, append the code unit 0x0075 (LATIN SMALL LETTER U) as the last code unit of <var>result</var>.</li><li>Let <var>sticky</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"sticky\"</emu-val>)).</li><li>If <var>sticky</var> is <emu-val>true</emu-val>, append the code unit 0x0079 (LATIN SMALL LETTER Y) as the last code unit of <var>result</var>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-notation": {"num": "22.2.2.1", "title": "#sec-notation Notation", "html": "<emu-clause id=\"sec-notation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-notation\">#sec-notation</span> Notation</h1>\n        <p>The descriptions below use the following aliases:</p>\n        <ul>\n          <li>\n            <var>Input</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the characters of the String being matched by the regular expression pattern. Each character is either a code unit or a code point, depending upon the kind of pattern involved. The notation <var>Input</var>[<var>n</var>] means the <var>n</var><sup>th</sup> character of <var>Input</var>, where <var>n</var> can range between 0 (inclusive) and <var>InputLength</var> (exclusive).\n          </li>\n          <li>\n            <var>InputLength</var> is the number of characters in <var>Input</var>.\n          </li>\n          <li>\n            <var>NcapturingParens</var> is the total number of left-capturing parentheses (i.e. the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Nodes</a></emu-xref>) in the pattern. A left-capturing parenthesis is any <code>(</code> pattern character that is matched by the <code>(</code> terminal of the <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> production.\n          </li>\n          <li>\n            <var>DotAll</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"s\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>IgnoreCase</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"i\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>Multiline</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"m\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>Unicode</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"u\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li oldids=\"sec-runtime-semantics-wordcharacters-abstract-operation\"><span id=\"sec-runtime-semantics-wordcharacters-abstract-operation\"></span>\n            <var>WordCharacters</var> is the mathematical set that is the union of all sixty-three characters in <emu-val>\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\"</emu-val> (letters, numbers, and U+005F (LOW LINE) in the Unicode Basic Latin block) and all characters <var>c</var> for which <var>c</var> is not in that set but <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>c</var>) is. <var>WordCharacters</var> cannot contain more than sixty-three characters unless <var>Unicode</var> and <var>IgnoreCase</var> are both <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>Furthermore, the descriptions below use the following internal data structures:</p>\n        <ul>\n          <li>\n            A <em>CharSet</em> is a mathematical set of characters. When the <var>Unicode</var> flag is <emu-val>true</emu-val>, &#8220;all characters&#8221; means the CharSet containing all code point values; otherwise &#8220;all characters&#8221; means the CharSet containing all code unit values.\n          </li>\n          <li>\n            A <em>State</em> is an ordered pair (<var>endIndex</var>, <var>captures</var>) where <var>endIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> and <var>captures</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> values. States are used to represent partial match states in the regular expression matching algorithms. The <var>endIndex</var> is one plus the index of the last input character matched so far by the pattern, while <var>captures</var> holds the results of capturing parentheses. The <var>n</var><sup>th</sup> element of <var>captures</var> is either a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of characters that represents the value obtained by the <var>n</var><sup>th</sup> set of capturing parentheses or <emu-val>undefined</emu-val> if the <var>n</var><sup>th</sup> set of capturing parentheses hasn't been reached yet. Due to backtracking, many States may be in use at any time during the matching process.\n          </li>\n          <li>\n            A <em>MatchResult</em> is either a State or the special token <emu-const>failure</emu-const> that indicates that the match failed.\n          </li>\n          <li>\n            A <em>Continuation</em> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that takes one State argument and returns a MatchResult result. The Continuation attempts to match the remaining portion (specified by the closure's captured values) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. If the match succeeds, the Continuation returns the final State that it reached; if the match fails, the Continuation returns <emu-const>failure</emu-const>.\n          </li>\n          <li>\n            A <em>Matcher</em> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that takes two arguments&#8212;a State and a Continuation&#8212;and returns a MatchResult result. A Matcher attempts to match a middle subpattern (specified by the closure's captured values) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. The Continuation argument should be a closure that matches the rest of the pattern. After matching the subpattern of a pattern to obtain a new State, the Matcher then calls Continuation on that new State to test if the rest of the pattern can match as well. If it can, the Matcher returns the State returned by Continuation; if not, the Matcher may try different choices at its choice points, repeatedly calling Continuation until it either succeeds or all possibilities have been exhausted.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-charactersetmatcher-abstract-operation": {"num": "22.2.2.8.1", "title": "#sec-runtime-semantics-charactersetmatcher-abstract-operation CharacterSetMatcher ( A, invert, direction )", "html": "<emu-clause id=\"sec-runtime-semantics-charactersetmatcher-abstract-operation\" type=\"abstract operation\" aoid=\"CharacterSetMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-charactersetmatcher-abstract-operation\">#sec-runtime-semantics-charactersetmatcher-abstract-operation</span> CharacterSetMatcher ( <var>A</var>, <var>invert</var>, <var>direction</var> )</h1>\n          <p>The abstract operation CharacterSetMatcher takes arguments <var>A</var> (a CharSet), <var>invert</var> (a Boolean), and <var>direction</var> (1 or -1). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>A</var>, <var>invert</var>, and <var>direction</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>f</var> be <var>e</var> + <var>direction</var>.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; <var>InputLength</var>, return <emu-const>failure</emu-const>.</li><li>Let <var>index</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>f</var>).</li><li>Let <var>ch</var> be the character <var>Input</var>[<var>index</var>].</li><li>Let <var>cc</var> be <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>ch</var>).</li><li>If there exists a member <var>a</var> of <var>A</var> such that <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>a</var>) is <var>cc</var>, let <var>found</var> be <emu-val>true</emu-val>. Otherwise, let <var>found</var> be <emu-val>false</emu-val>.</li><li>If <var>invert</var> is <emu-val>false</emu-val> and <var>found</var> is <emu-val>false</emu-val>, return <emu-const>failure</emu-const>.</li><li>If <var>invert</var> is <emu-val>true</emu-val> and <var>found</var> is <emu-val>true</emu-val>, return <emu-const>failure</emu-const>.</li><li>Let <var>cap</var> be <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>y</var> be the State (<var>f</var>, <var>cap</var>).</li><li>Return <var>c</var>(<var>y</var>).</li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-unicodematchproperty-p": {"num": "22.2.2.8.3", "title": "#sec-runtime-semantics-unicodematchproperty-p UnicodeMatchProperty ( p )", "html": "<emu-clause id=\"sec-runtime-semantics-unicodematchproperty-p\" type=\"abstract operation\" aoid=\"UnicodeMatchProperty\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-unicodematchproperty-p\">#sec-runtime-semantics-unicodematchproperty-p</span> UnicodeMatchProperty ( <var>p</var> )</h1>\n          <p>The abstract operation UnicodeMatchProperty takes argument <var>p</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a Unicode <emu-not-ref>property name</emu-not-ref> or property alias listed in the &#8220;<emu-not-ref>Property name</emu-not-ref> and aliases&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref> or <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>.</li><li>Let <var>c</var> be the canonical <emu-not-ref>property name</emu-not-ref> of <var>p</var> as given in the &#8220;Canonical <emu-not-ref>property name</emu-not-ref>&#8221; column of the corresponding row.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points <var>c</var>.</li></ol></emu-alg>\n          <p>Implementations must support the Unicode property names and aliases listed in <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref> and <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>. To ensure interoperability, implementations must not support any other property names or aliases.</p>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>For example, <code>Script_Extensions</code> (<emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>) and <code>scx</code> (property alias) are valid, but <code>script_extensions</code> or <code>Scx</code> aren't.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The listed properties form a superset of what <a href=\"https://unicode.org/reports/tr18/#RL1.2\">UTS18 RL1.2</a> requires.</p>\n          </div></emu-note>\n          <emu-import href=\"table-nonbinary-unicode-properties.html\"><emu-table id=\"table-nonbinary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</span>: Non-binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>General_Category</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>General_Category</code></a></td>\n    </tr>\n    <tr>\n      <td><code>gc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script\"><code>Script</code></a></td>\n    </tr>\n    <tr>\n      <td><code>sc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script_Extensions</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script_Extensions\"><code>Script_Extensions</code></a></td>\n    </tr>\n    <tr>\n      <td><code>scx</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n          <emu-import href=\"table-binary-unicode-properties.html\"><emu-table id=\"table-binary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</span>: Binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>ASCII</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>ASCII</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ASCII_Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ASCII_Hex_Digit\"><code>ASCII_Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>AHex</code></td>\n    </tr>\n    <tr>\n      <td><code>Alphabetic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Alphabetic\"><code>Alphabetic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Alpha</code></td>\n    </tr>\n    <tr>\n      <td><code>Any</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Any</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Assigned</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Assigned</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Control\"><code>Bidi_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Mirrored</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Mirrored\"><code>Bidi_Mirrored</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_M</code></td>\n    </tr>\n    <tr>\n      <td><code>Case_Ignorable</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Case_Ignorable\"><code>Case_Ignorable</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CI</code></td>\n    </tr>\n    <tr>\n      <td><code>Cased</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Cased\"><code>Cased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCF\"><code>Changes_When_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casemapped</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCM\"><code>Changes_When_Casemapped</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCM</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Lowercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWL\"><code>Changes_When_Lowercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWL</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_NFKC_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWKCF\"><code>Changes_When_NFKC_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWKCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Titlecased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWT\"><code>Changes_When_Titlecased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWT</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Uppercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWU\"><code>Changes_When_Uppercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWU</code></td>\n    </tr>\n    <tr>\n      <td><code>Dash</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Dash\"><code>Dash</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Default_Ignorable_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Default_Ignorable_Code_Point\"><code>Default_Ignorable_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>DI</code></td>\n    </tr>\n    <tr>\n      <td><code>Deprecated</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Deprecated\"><code>Deprecated</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dep</code></td>\n    </tr>\n    <tr>\n      <td><code>Diacritic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Diacritic\"><code>Diacritic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dia</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji</code></td>\n      <td><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Component</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Component</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EComp</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EMod</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EBase</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Presentation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Presentation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EPres</code></td>\n    </tr>\n    <tr>\n      <td><code>Extended_Pictographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Extended_Pictographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ExtPict</code></td>\n    </tr>\n    <tr>\n      <td><code>Extender</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Extender\"><code>Extender</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Base\"><code>Grapheme_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Base</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Extend</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Extend\"><code>Grapheme_Extend</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Hex_Digit\"><code>Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Hex</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Binary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Binary_Operator\"><code>IDS_Binary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDSB</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Trinary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Trinary_Operator\"><code>IDS_Trinary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDST</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Continue\"><code>ID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDC</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Start\"><code>ID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDS</code></td>\n    </tr>\n    <tr>\n      <td><code>Ideographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Ideographic\"><code>Ideographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ideo</code></td>\n    </tr>\n    <tr>\n      <td><code>Join_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Join_Control\"><code>Join_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Join_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Logical_Order_Exception</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Logical_Order_Exception\"><code>Logical_Order_Exception</code></a></td>\n    </tr>\n    <tr>\n      <td><code>LOE</code></td>\n    </tr>\n    <tr>\n      <td><code>Lowercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Lowercase\"><code>Lowercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Lower</code></td>\n    </tr>\n    <tr>\n      <td><code>Math</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Math\"><code>Math</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Noncharacter_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Noncharacter_Code_Point\"><code>Noncharacter_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>NChar</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_Syntax</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_Syntax\"><code>Pattern_Syntax</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_Syn</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_White_Space\"><code>Pattern_White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_WS</code></td>\n    </tr>\n    <tr>\n      <td><code>Quotation_Mark</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Quotation_Mark\"><code>Quotation_Mark</code></a></td>\n    </tr>\n    <tr>\n      <td><code>QMark</code></td>\n    </tr>\n    <tr>\n      <td><code>Radical</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Radical\"><code>Radical</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Regional_Indicator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Regional_Indicator\"><code>Regional_Indicator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>RI</code></td>\n    </tr>\n    <tr>\n      <td><code>Sentence_Terminal</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#STerm\"><code>Sentence_Terminal</code></a></td>\n    </tr>\n    <tr>\n      <td><code>STerm</code></td>\n    </tr>\n    <tr>\n      <td><code>Soft_Dotted</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Soft_Dotted\"><code>Soft_Dotted</code></a></td>\n    </tr>\n    <tr>\n      <td><code>SD</code></td>\n    </tr>\n    <tr>\n      <td><code>Terminal_Punctuation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Terminal_Punctuation\"><code>Terminal_Punctuation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Term</code></td>\n    </tr>\n    <tr>\n      <td><code>Unified_Ideograph</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Unified_Ideograph\"><code>Unified_Ideograph</code></a></td>\n    </tr>\n    <tr>\n      <td><code>UIdeo</code></td>\n    </tr>\n    <tr>\n      <td><code>Uppercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Uppercase\"><code>Uppercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Upper</code></td>\n    </tr>\n    <tr>\n      <td><code>Variation_Selector</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Variation_Selector\"><code>Variation_Selector</code></a></td>\n    </tr>\n    <tr>\n      <td><code>VS</code></td>\n    </tr>\n    <tr>\n      <td><code>White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#White_Space\"><code>White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>space</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Continue\"><code>XID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDC</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Start\"><code>XID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDS</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n        </emu-clause>\n        "}, "sec-runtime-semantics-canonicalize-ch": {"num": "22.2.2.8.2", "title": "#sec-runtime-semantics-canonicalize-ch Canonicalize ( ch )", "html": "<emu-clause id=\"sec-runtime-semantics-canonicalize-ch\" type=\"abstract operation\" aoid=\"Canonicalize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-canonicalize-ch\">#sec-runtime-semantics-canonicalize-ch</span> Canonicalize ( <var>ch</var> )</h1>\n          <p>The abstract operation Canonicalize takes argument <var>ch</var> (a character). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>Unicode</var> is <emu-val>true</emu-val> and <var>IgnoreCase</var> is <emu-val>true</emu-val>, then<ol><li>If the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping for <var>ch</var>, return the result of applying that mapping to <var>ch</var>.</li><li>Return <var>ch</var>.</li></ol></li><li>If <var>IgnoreCase</var> is <emu-val>false</emu-val>, return <var>ch</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ch</var> is a UTF-16 code unit.</li><li>Let <var>cp</var> be the code point whose numeric value is that of <var>ch</var>.</li><li>Let <var>u</var> be the result of toUppercase(&#171; <var>cp</var> &#187;), according to the Unicode Default Case Conversion algorithm.</li><li>Let <var>uStr</var> be !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>u</var>).</li><li>If <var>uStr</var> does not consist of a single code unit, return <var>ch</var>.</li><li>Let <var>cu</var> be <var>uStr</var>'s single code unit element.</li><li>If the numeric value of <var>ch</var> &#8805; 128 and the numeric value of <var>cu</var> &lt; 128, return <var>ch</var>.</li><li>Return <var>cu</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Parentheses of the form <code>(</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> serve both to group the components of the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> pattern together and to save the result of the match. The result can be used either in a backreference (<code>\\</code> followed by a non-zero decimal number), referenced in a replace String, or returned as part of an array from the regular expression matching <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>. To inhibit the capturing behaviour of parentheses, use the form <code>(?:</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> instead.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The form <code>(?=</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width positive lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must match at the current position, but the current position is not advanced before matching the sequel. If <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can match at the current position in several ways, only the first one is tried. Unlike other regular expression operators, there is no backtracking into a <code>(?=</code> form (this unusual behaviour is inherited from Perl). This only matters when the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> contains capturing parentheses and the sequel of the pattern contains backreferences to those captures.</p>\n            <p>For example,</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>matches the empty String immediately after the first <code>b</code> and therefore returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"aaa\"</span>]</code></pre>\n            <p>To illustrate the lack of backtracking into the lookahead, consider:</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))a*b\\<span class=\"hljs-number\">1</span>/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>This expression returns</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n            <p>and not:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaaba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>The form <code>(?!</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width negative lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must fail to match at the current position. The current position is not advanced before matching the sequel. <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can contain capturing parentheses, but backreferences to them only make sense from within <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> itself. Backreferences to these capturing parentheses from elsewhere in the pattern always return <emu-val>undefined</emu-val> because the negative lookahead must fail for the pattern to succeed. For example,</p>\n            <pre><code class=\"javascript hljs\">/(.*?)<span class=\"hljs-title function_\">a</span>(?!(a+)b\\2c)\\<span class=\"hljs-number\">2</span>(.*)/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"baaabaac\"</span>)</code></pre>\n            <p>looks for an <code>a</code> not immediately followed by some positive number n of <code>a</code>'s, a <code>b</code>, another n <code>a</code>'s (specified by the first <code>\\2</code>) and a <code>c</code>. The second <code>\\2</code> is outside the negative lookahead, so it matches against <emu-val>undefined</emu-val> and therefore always succeeds. The whole expression returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"baaabaac\"</span>, <span class=\"hljs-string\">\"ba\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"abaac\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>In case-insignificant matches when <var>Unicode</var> is <emu-val>true</emu-val>, all characters are implicitly case-folded using the simple mapping provided by the Unicode standard immediately before they are compared. The simple mapping always maps to a single code point, so it does not map, for example, <code>&#223;</code> (U+00DF) to <code>SS</code>. It may however map a code point outside the Basic Latin range to a character within, for example, <code>&#383;</code> (U+017F) to <code>s</code>. Such characters are not mapped if <var>Unicode</var> is <emu-val>false</emu-val>. This prevents Unicode code points such as U+017F and U+212A from matching regular expressions such as <code>/[a-z]/i</code>, but they will match <code>/[a-z]/ui</code>.</p>\n          </div></emu-note>\n        </emu-clause>\n        "}, "sec-properties-of-the-regexp-prototype-object": {"num": "22.2.5", "title": "#sec-properties-of-the-regexp-prototype-object Properties of the RegExp Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-regexp-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</span> Properties of the RegExp Prototype Object</h1>\n      <p>The <dfn>RegExp prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%RegExp.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is not a RegExp instance and does not have a [[RegExpMatcher]] internal slot or any of the other internal slots of RegExp instance objects.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The RegExp prototype object does not have a <emu-val>\"valueOf\"</emu-val> property of its own; however, it inherits the <emu-val>\"valueOf\"</emu-val> property from the <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">Object prototype object</a></emu-xref>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-regexp.prototype.constructor\"><h1><span class=\"secnum\">22.2.5.1</span>#sec-regexp.prototype.constructor RegExp.prototype.constructor</h1>...</div><div id=\"excluded-sec-regexp.prototype.exec\"><h1><span class=\"secnum\">22.2.5.2</span>#sec-regexp.prototype.exec RegExp.prototype.exec ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.dotAll\"><h1><span class=\"secnum\">22.2.5.3</span>#sec-get-regexp.prototype.dotAll get RegExp.prototype.dotAll</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.flags\"><h1><span class=\"secnum\">22.2.5.4</span>#sec-get-regexp.prototype.flags get RegExp.prototype.flags</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.global\"><h1><span class=\"secnum\">22.2.5.5</span>#sec-get-regexp.prototype.global get RegExp.prototype.global</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.ignorecase\"><h1><span class=\"secnum\">22.2.5.6</span>#sec-get-regexp.prototype.ignorecase get RegExp.prototype.ignoreCase</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@match\"><h1><span class=\"secnum\">22.2.5.7</span>#sec-regexp.prototype-@@match RegExp.prototype [ @@match ] ( string )</h1>...</div><div id=\"excluded-sec-regexp-prototype-matchall\"><h1><span class=\"secnum\">22.2.5.8</span>#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.multiline\"><h1><span class=\"secnum\">22.2.5.9</span>#sec-get-regexp.prototype.multiline get RegExp.prototype.multiline</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@replace\"><h1><span class=\"secnum\">22.2.5.10</span>#sec-regexp.prototype-@@replace RegExp.prototype [ @@replace ] ( string, replaceValue )</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@search\"><h1><span class=\"secnum\">22.2.5.11</span>#sec-regexp.prototype-@@search RegExp.prototype [ @@search ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.source\"><h1><span class=\"secnum\">22.2.5.12</span>#sec-get-regexp.prototype.source get RegExp.prototype.source</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@split\"><h1><span class=\"secnum\">22.2.5.13</span>#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.sticky\"><h1><span class=\"secnum\">22.2.5.14</span>#sec-get-regexp.prototype.sticky get RegExp.prototype.sticky</h1>...</div><div id=\"excluded-sec-regexp.prototype.test\"><h1><span class=\"secnum\">22.2.5.15</span>#sec-regexp.prototype.test RegExp.prototype.test ( S )</h1>...</div><div id=\"excluded-sec-regexp.prototype.tostring\"><h1><span class=\"secnum\">22.2.5.16</span>#sec-regexp.prototype.tostring RegExp.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.unicode\"><h1><span class=\"secnum\">22.2.5.17</span>#sec-get-regexp.prototype.unicode get RegExp.prototype.unicode</h1>...</div></emu-clause>\n\n    "}}, "figData": {"table-nonbinary-unicode-properties": "Table 68", "table-binary-unicode-properties": "Table 69"}}, "to": {"secList": ["sec-pattern-semantics", "sec-get-regexp.prototype.unicode", "sec-regexpinitialize", "sec-pattern", "sec-isvalidregularexpressionliteral", "sec-get-regexp.prototype.flags", "sec-notation", "sec-runtime-semantics-charactersetmatcher-abstract-operation", "sec-runtime-semantics-unicodematchproperty-p", "sec-runtime-semantics-canonicalize-ch", "sec-properties-of-the-regexp-prototype-object", "sec-get-regexp.prototype.unicodesets"], "secData": {"sec-pattern-semantics": {"num": "22.2.2", "title": "#sec-pattern-semantics Pattern Semantics", "html": "<emu-clause id=\"sec-pattern-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</span> Pattern Semantics</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>This section is amended in <emu-xref href=\"#sec-regular-expression-patterns-semantics\"><a href=\"#sec-regular-expression-patterns-semantics\" class=\"excluded-xref\" excluded-id=\"sec-regular-expression-patterns-semantics\">#sec-regular-expression-patterns-semantics</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>A regular expression pattern is converted into an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> using the process described below. An implementation is encouraged to use more efficient algorithms than the ones listed below, as long as the results are the same. The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> is used as the value of a RegExp object's [[RegExpMatcher]] internal slot.</p>\n      <p>A <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is either a BMP pattern or a Unicode pattern depending upon whether or not its associated flags contain a <code>u</code> or a <code>v</code>. A BMP pattern matches against a String interpreted as consisting of a sequence of 16-bit values that are Unicode code points in the range of the Basic Multilingual Plane. A Unicode pattern matches against a String interpreted as consisting of Unicode code points encoded using UTF-16. In the context of describing the behaviour of a BMP pattern &#8220;character&#8221; means a single 16-bit Unicode BMP code point. In the context of describing the behaviour of a Unicode pattern &#8220;character&#8221; means a UTF-16 encoded code point (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>). In either context, &#8220;character value&#8221; means the numeric value of the corresponding non-encoded code point.</p>\n      <p>The syntax and semantics of <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is defined as if the source code for the <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> was a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values where each <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> corresponds to a Unicode code point. If a BMP pattern contains a non-BMP <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> the entire pattern is encoded using UTF-16 and the individual code units of that encoding are used as the elements of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>For example, consider a pattern expressed in source text as the single non-BMP character U+1D11E (MUSICAL SYMBOL G CLEF). Interpreted as a Unicode pattern, it would be a single element (character) <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the single code point 0x1D11E. However, interpreted as a BMP pattern, it is first UTF-16 encoded to produce a two element <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the code units 0xD834 and 0xDD1E.</p>\n        <p>Patterns are passed to the RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> as ECMAScript String values in which non-BMP characters are UTF-16 encoded. For example, the single character MUSICAL SYMBOL G CLEF pattern, expressed as a String value, is a String of length 2 whose elements were the code units 0xD834 and 0xDD1E. So no further translation of the string would be necessary to process it as a BMP pattern consisting of two pattern characters. However, to process it as a Unicode pattern <emu-xref aoid=\"UTF16SurrogatePairToCodePoint\"><a href=\"#sec-utf16decodesurrogatepair\">UTF16SurrogatePairToCodePoint</a></emu-xref> must be used in producing a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is a single pattern character, the code point U+1D11E.</p>\n        <p>An implementation may not actually perform such translations to or from UTF-16, but the semantics of this specification requires that the result of pattern matching be as if such translations were performed.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-notation\"><h1><span class=\"secnum\">22.2.2.1</span>#sec-notation Notation</h1>...</div><div id=\"excluded-sec-pattern\"><h1><span class=\"secnum\">22.2.2.2</span>#sec-pattern Pattern</h1>...</div><div id=\"excluded-sec-disjunction\"><h1><span class=\"secnum\">22.2.2.3</span>#sec-disjunction Disjunction</h1>...</div><div id=\"excluded-sec-alternative\"><h1><span class=\"secnum\">22.2.2.4</span>#sec-alternative Alternative</h1>...</div><div id=\"excluded-sec-term\"><h1><span class=\"secnum\">22.2.2.5</span>#sec-term Term</h1>...</div><div id=\"excluded-sec-assertion\"><h1><span class=\"secnum\">22.2.2.6</span>#sec-assertion Assertion</h1>...</div><div id=\"excluded-sec-quantifier\"><h1><span class=\"secnum\">22.2.2.7</span>#sec-quantifier Quantifier</h1>...</div><div id=\"excluded-sec-atom\"><h1><span class=\"secnum\">22.2.2.8</span>#sec-atom Atom</h1>...</div><div id=\"excluded-sec-atomescape\"><h1><span class=\"secnum\">22.2.2.9</span>#sec-atomescape AtomEscape</h1>...</div><div id=\"excluded-sec-characterescape\"><h1><span class=\"secnum\">22.2.2.10</span>#sec-characterescape CharacterEscape</h1>...</div><div id=\"excluded-sec-decimalescape\"><h1><span class=\"secnum\">22.2.2.11</span>#sec-decimalescape DecimalEscape</h1>...</div><div id=\"excluded-sec-characterclassescape\"><h1><span class=\"secnum\">22.2.2.12</span>#sec-characterclassescape CharacterClassEscape</h1>...</div><div id=\"excluded-sec-characterclass\"><h1><span class=\"secnum\">22.2.2.13</span>#sec-characterclass CharacterClass</h1>...</div><div id=\"excluded-sec-classranges\"><h1><span class=\"secnum\">22.2.2.14</span>#sec-classranges ClassRanges</h1>...</div><div id=\"excluded-sec-nonemptyclassranges\"><h1><span class=\"secnum\">22.2.2.15</span>#sec-nonemptyclassranges NonemptyClassRanges</h1>...</div><div id=\"excluded-sec-nonemptyclassrangesnodash\"><h1><span class=\"secnum\">22.2.2.16</span>#sec-nonemptyclassrangesnodash NonemptyClassRangesNoDash</h1>...</div><div id=\"excluded-sec-classatom\"><h1><span class=\"secnum\">22.2.2.17</span>#sec-classatom ClassAtom</h1>...</div><div id=\"excluded-sec-classatomnodash\"><h1><span class=\"secnum\">22.2.2.18</span>#sec-classatomnodash ClassAtomNoDash</h1>...</div><div id=\"excluded-sec-classescape\"><h1><span class=\"secnum\">22.2.2.19</span>#sec-classescape ClassEscape</h1>...</div></emu-clause>\n\n    "}, "sec-get-regexp.prototype.unicode": {"num": "22.2.5.17", "title": "#sec-get-regexp.prototype.unicode get RegExp.prototype.unicode", "html": "<emu-clause id=\"sec-get-regexp.prototype.unicode\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.unicode\">#sec-get-regexp.prototype.unicode</span> get RegExp.prototype.unicode</h1>\n        <p><code>RegExp.prototype.unicode</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>cu</var> be the code unit 0x0075 (LATIN SMALL LETTER U).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpHasFlag\"><a href=\"#sec-regexphasflag\">RegExpHasFlag</a></emu-xref>(<var>R</var>, <var>cu</var>).</li></ol></emu-alg>\n      </emu-clause>\n      "}, "sec-regexpinitialize": {"num": "22.2.3.2.2", "title": "#sec-regexpinitialize RegExpInitialize ( obj, pattern, flags )", "html": "<emu-clause id=\"sec-regexpinitialize\" type=\"abstract operation\" aoid=\"RegExpInitialize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpinitialize\">#sec-regexpinitialize</span> RegExpInitialize ( <var>obj</var>, <var>pattern</var>, <var>flags</var> )</h1>\n          <p>The abstract operation RegExpInitialize takes arguments <var>obj</var> (an Object), <var>pattern</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>flags</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>pattern</var> is <emu-val>undefined</emu-val>, let <var>P</var> be the empty String.</li><li>Else, let <var>P</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>pattern</var>).</li><li>If <var>flags</var> is <emu-val>undefined</emu-val>, let <var>F</var> be the empty String.</li><li>Else, let <var>F</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>flags</var>).</li><li>If <var>F</var> contains any code unit other than <emu-val>\"g\"</emu-val>, <emu-val>\"i\"</emu-val>, <emu-val>\"m\"</emu-val>, <emu-val>\"s\"</emu-val>, <emu-val>\"u\"</emu-val>, <emu-val>\"v\"</emu-val>, or <emu-val>\"y\"</emu-val> or if it contains the same code unit more than once, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>F</var> contains <emu-val>\"u\"</emu-val>, let <var>u</var> be <emu-val>true</emu-val>; else let <var>u</var> be <emu-val>false</emu-val>.</li><li>If <var>F</var> contains <emu-val>\"v\"</emu-val>, let <var>v</var> be <emu-val>true</emu-val>; else let <var>v</var> be <emu-val>false</emu-val>.</li><li>If <var>u</var> is <emu-val>true</emu-val> or <var>v</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>patternText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>).</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code points of <var>patternText</var>.</li></ol></li><li>Else,<ol><li>Let <var>patternText</var> be the result of interpreting each of <var>P</var>'s 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code unit elements of <var>P</var>.</li></ol></li><li>Let <var>parseResult</var> be <emu-xref aoid=\"ParsePattern\"><a href=\"#sec-parsepattern\">ParsePattern</a></emu-xref>(<var>patternText</var>, <var>u</var>, <var>v</var>).</li><li>If <var>parseResult</var> is a non-empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-val>SyntaxError</emu-val> objects, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>parseResult</var> is a <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</li><li>Set <var>obj</var>.[[OriginalSource]] to <var>P</var>.</li><li>Set <var>obj</var>.[[OriginalFlags]] to <var>F</var>.</li><li>Set <var>obj</var>.[[RegExpMatcher]] to the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that evaluates <var>parseResult</var> by applying the semantics provided in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> using <var>patternCharacters</var> as the pattern's <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values and <var>F</var> as the flag parameters.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>obj</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-pattern": {"num": "22.2.2.2", "title": "#sec-pattern Pattern", "html": "<emu-clause id=\"sec-pattern\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern\">#sec-pattern</span> Pattern</h1>\n        <p>The production <emu-grammar><emu-production name=\"Pattern\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"eaw70mcy\"><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with 1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>str</var>, <var>index</var>) that captures <var>m</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> which is &#8804; the length of <var>str</var>.</li><li>If <var>UnicodeSets</var> is <emu-val>true</emu-val>, let <var>Input</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>str</var>). Otherwise, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code units that are the elements of <var>str</var>. <var>Input</var> will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>. Each element of <var>Input</var> is considered to be a character.</li><li>Let <var>InputLength</var> be the number of characters contained in <var>Input</var>. This alias will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>.</li><li>Let <var>listIndex</var> be the index into <var>Input</var> of the character that was obtained from element <var>index</var> of <var>str</var>.</li><li>Let <var>c</var> be a new Continuation with parameters (<var>y</var>) that captures nothing and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li>Return <var>y</var>.</li></ol></li><li>Let <var>cap</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> <emu-val>undefined</emu-val> values, indexed 1 through <var>NcapturingParens</var>.</li><li>Let <var>x</var> be the State (<var>listIndex</var>, <var>cap</var>).</li><li>Return <var>m</var>(<var>x</var>, <var>c</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A Pattern evaluates (&#8220;compiles&#8221;) to an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> value. <emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref> can then apply this procedure to a String and an offset within the String to determine whether the pattern would match starting at exactly that offset within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> are designed so that compiling a pattern may throw a <emu-val>SyntaxError</emu-val> exception; on the other hand, once the pattern is successfully compiled, applying the resulting <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> to find a match in a String cannot throw an exception (except for any <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> exceptions that can occur anywhere such as out-of-memory).</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-isvalidregularexpressionliteral": {"num": "13.2.7.2", "title": "#sec-isvalidregularexpressionliteral Static Semantics: IsValidRegularExpressionLiteral ( literal )", "html": "<emu-clause id=\"sec-isvalidregularexpressionliteral\" type=\"abstract operation\" aoid=\"IsValidRegularExpressionLiteral\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isvalidregularexpressionliteral\">#sec-isvalidregularexpressionliteral</span> Static Semantics: IsValidRegularExpressionLiteral ( <var>literal</var> )</h1>\n        <p>The abstract operation IsValidRegularExpressionLiteral takes argument <var>literal</var> (a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It determines if its argument is a valid regular expression literal. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"FlagText\"><a href=\"#sec-static-semantics-flagtext\">FlagText</a></emu-xref> of <var>literal</var> contains any code points other than <code>g</code>, <code>i</code>, <code>m</code>, <code>s</code>, <code>u</code>, <code>v</code>, or <code>y</code>, or if it contains the same code point more than once, return <emu-val>false</emu-val>.</li><li>Let <var>patternText</var> be <emu-xref aoid=\"BodyText\"><a href=\"#sec-static-semantics-bodytext\">BodyText</a></emu-xref> of <var>literal</var>.</li><li>If <emu-xref aoid=\"FlagText\"><a href=\"#sec-static-semantics-flagtext\">FlagText</a></emu-xref> of <var>literal</var> contains <code>u</code>, let <var>u</var> be <emu-val>true</emu-val>; else let <var>u</var> be <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"FlagText\"><a href=\"#sec-static-semantics-flagtext\">FlagText</a></emu-xref> of <var>literal</var> contains <code>v</code>, let <var>v</var> be <emu-val>true</emu-val>; else let <var>v</var> be <emu-val>false</emu-val>.</li><li>If <var>u</var> is <emu-val>false</emu-val> and <var>v</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>stringValue</var> be <emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>patternText</var>).</li><li>Set <var>patternText</var> to the sequence of code points resulting from interpreting each of the 16-bit elements of <var>stringValue</var> as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.</li></ol></li><li>Let <var>parseResult</var> be <emu-xref aoid=\"ParsePattern\"><a href=\"#sec-parsepattern\">ParsePattern</a></emu-xref>(<var>patternText</var>, <var>u</var>, <var>v</var>).</li><li>If <var>parseResult</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, return <emu-val>true</emu-val>; else return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-regexp.prototype.flags": {"num": "22.2.5.4", "title": "#sec-get-regexp.prototype.flags get RegExp.prototype.flags", "html": "<emu-clause id=\"sec-get-regexp.prototype.flags\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.flags\">#sec-get-regexp.prototype.flags</span> get RegExp.prototype.flags</h1>\n        <p><code>RegExp.prototype.flags</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>result</var> be the empty String.</li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>true</emu-val>, append the code unit 0x0067 (LATIN SMALL LETTER G) as the last code unit of <var>result</var>.</li><li>Let <var>ignoreCase</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"ignoreCase\"</emu-val>)).</li><li>If <var>ignoreCase</var> is <emu-val>true</emu-val>, append the code unit 0x0069 (LATIN SMALL LETTER I) as the last code unit of <var>result</var>.</li><li>Let <var>multiline</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"multiline\"</emu-val>)).</li><li>If <var>multiline</var> is <emu-val>true</emu-val>, append the code unit 0x006D (LATIN SMALL LETTER M) as the last code unit of <var>result</var>.</li><li>Let <var>dotAll</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"dotAll\"</emu-val>)).</li><li>If <var>dotAll</var> is <emu-val>true</emu-val>, append the code unit 0x0073 (LATIN SMALL LETTER S) as the last code unit of <var>result</var>.</li><li>Let <var>unicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>If <var>unicode</var> is <emu-val>true</emu-val>, append the code unit 0x0075 (LATIN SMALL LETTER U) as the last code unit of <var>result</var>.</li><li>Let <var>unicodeSet</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"unicodeSet\"</emu-val>)).</li><li>If <var>unicodeSet</var> is <emu-val>true</emu-val>, append the code unit 0x0076 (LATIN SMALL LETTER V) as the last code unit of <var>result</var>.</li><li>Let <var>sticky</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"sticky\"</emu-val>)).</li><li>If <var>sticky</var> is <emu-val>true</emu-val>, append the code unit 0x0079 (LATIN SMALL LETTER Y) as the last code unit of <var>result</var>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-notation": {"num": "22.2.2.1", "title": "#sec-notation Notation", "html": "<emu-clause id=\"sec-notation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-notation\">#sec-notation</span> Notation</h1>\n        <p>The descriptions below use the following aliases:</p>\n        <ul>\n          <li>\n            <var>Input</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the characters of the String being matched by the regular expression pattern. Each character is either a code unit or a code point, depending upon the kind of pattern involved. The notation <var>Input</var>[<var>n</var>] means the <var>n</var><sup>th</sup> character of <var>Input</var>, where <var>n</var> can range between 0 (inclusive) and <var>InputLength</var> (exclusive).\n          </li>\n          <li>\n            <var>InputLength</var> is the number of characters in <var>Input</var>.\n          </li>\n          <li>\n            <var>NcapturingParens</var> is the total number of left-capturing parentheses (i.e. the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Nodes</a></emu-xref>) in the pattern. A left-capturing parenthesis is any <code>(</code> pattern character that is matched by the <code>(</code> terminal of the <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> production.\n          </li>\n          <li>\n            <var>DotAll</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"s\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>IgnoreCase</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"i\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>Multiline</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"m\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>Unicode</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"u\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>UnicodeSets</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"v\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>EitherUnicode</var> is <emu-val>true</emu-val> if <var>Unicode</var> is <emu-val>true</emu-val> or <var>UnicodeSets</var> is <emu-val>true</emu-val>, and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li oldids=\"sec-runtime-semantics-wordcharacters-abstract-operation\"><span id=\"sec-runtime-semantics-wordcharacters-abstract-operation\"></span>\n            <var>WordCharacters</var> is the mathematical set that is the union of all sixty-three characters in <emu-val>\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\"</emu-val> (letters, numbers, and U+005F (LOW LINE) in the Unicode Basic Latin block) and all characters <var>c</var> for which <var>c</var> is not in that set but <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>c</var>) is. <var>WordCharacters</var> cannot contain more than sixty-three characters unless <var>EitherUnicode</var> and <var>IgnoreCase</var> are both <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>Furthermore, the descriptions below use the following internal data structures:</p>\n        <ul>\n          <li>\n            A <em>CharSetElement</em> is one of the two following entities:\n            <ul>\n              <li>\n                If <var>UnicodeSets</var> is <emu-val>false</emu-val>, then a CharSetElement is a character in the sense of the Pattern Semantics above.\n              </li>\n              <li>\n                If <var>UnicodeSets</var> is <emu-val>true</emu-val>, then a CharSetElement is either a character in the sense of the Pattern Semantics above, or it is a sequence of characters, that is, a string. This includes the empty String and strings with more than 1 character. A string of length 1 is the same as a single character.\n              </li>\n            </ul>\n          </li>\n          <li>\n            A <em>CharSet</em> is a mathematical set of CharSetElements.\n          </li>\n          <li>\n            A <em>State</em> is an ordered pair (<var>endIndex</var>, <var>captures</var>) where <var>endIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> and <var>captures</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> values. States are used to represent partial match states in the regular expression matching algorithms. The <var>endIndex</var> is one plus the index of the last input character matched so far by the pattern, while <var>captures</var> holds the results of capturing parentheses. The <var>n</var><sup>th</sup> element of <var>captures</var> is either a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of characters that represents the value obtained by the <var>n</var><sup>th</sup> set of capturing parentheses or <emu-val>undefined</emu-val> if the <var>n</var><sup>th</sup> set of capturing parentheses hasn't been reached yet. Due to backtracking, many States may be in use at any time during the matching process.\n          </li>\n          <li>\n            A <em>MatchResult</em> is either a State or the special token <emu-const>failure</emu-const> that indicates that the match failed.\n          </li>\n          <li>\n            A <em>Continuation</em> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that takes one State argument and returns a MatchResult result. The Continuation attempts to match the remaining portion (specified by the closure's captured values) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. If the match succeeds, the Continuation returns the final State that it reached; if the match fails, the Continuation returns <emu-const>failure</emu-const>.\n          </li>\n          <li>\n            A <em>Matcher</em> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that takes two arguments&#8212;a State and a Continuation&#8212;and returns a MatchResult result. A Matcher attempts to match a middle subpattern (specified by the closure's captured values) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. The Continuation argument should be a closure that matches the rest of the pattern. After matching the subpattern of a pattern to obtain a new State, the Matcher then calls Continuation on that new State to test if the rest of the pattern can match as well. If it can, the Matcher returns the State returned by Continuation; if not, the Matcher may try different choices at its choice points, repeatedly calling Continuation until it either succeeds or all possibilities have been exhausted.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-charactersetmatcher-abstract-operation": {"num": "22.2.2.8.1", "title": "#sec-runtime-semantics-charactersetmatcher-abstract-operation CharacterSetMatcher ( A, invert, direction )", "html": "<emu-clause id=\"sec-runtime-semantics-charactersetmatcher-abstract-operation\" type=\"abstract operation\" aoid=\"CharacterSetMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-charactersetmatcher-abstract-operation\">#sec-runtime-semantics-charactersetmatcher-abstract-operation</span> CharacterSetMatcher ( <var>A</var>, <var>invert</var>, <var>direction</var> )</h1>\n          <p>The abstract operation CharacterSetMatcher takes arguments <var>A</var> (a CharSet), <var>invert</var> (a Boolean), and <var>direction</var> (1 or -1). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>UnicodeSets</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>invert</var> is <emu-val>false</emu-val>.</li></ol></li><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>A</var>, <var>invert</var>, and <var>direction</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>f</var> be <var>e</var> + <var>direction</var>.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; <var>InputLength</var>, return <emu-const>failure</emu-const>.</li><li>Let <var>index</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>f</var>).</li><li>Let <var>ch</var> be the character <var>Input</var>[<var>index</var>].</li><li>Let <var>cc</var> be <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>ch</var>).</li><li>If there exists a member <var>a</var> of <var>A</var> such that <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>a</var>) is <var>cc</var>, let <var>found</var> be <emu-val>true</emu-val>. Otherwise, let <var>found</var> be <emu-val>false</emu-val>.</li><li>If <var>invert</var> is <emu-val>false</emu-val> and <var>found</var> is <emu-val>false</emu-val>, return <emu-const>failure</emu-const>.</li><li>If <var>invert</var> is <emu-val>true</emu-val> and <var>found</var> is <emu-val>true</emu-val>, return <emu-const>failure</emu-const>.</li><li>Let <var>cap</var> be <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>y</var> be the State (<var>f</var>, <var>cap</var>).</li><li>Return <var>c</var>(<var>y</var>).</li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-unicodematchproperty-p": {"num": "22.2.2.8.3", "title": "#sec-runtime-semantics-unicodematchproperty-p UnicodeMatchProperty ( p )", "html": "<emu-clause id=\"sec-runtime-semantics-unicodematchproperty-p\" type=\"abstract operation\" aoid=\"UnicodeMatchProperty\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-unicodematchproperty-p\">#sec-runtime-semantics-unicodematchproperty-p</span> UnicodeMatchProperty ( <var>p</var> )</h1>\n          <p>The abstract operation UnicodeMatchProperty takes argument <var>p</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a Unicode <emu-not-ref>property name</emu-not-ref> or property alias listed in the &#8220;<emu-not-ref>Property name</emu-not-ref> and aliases&#8221; or &#8220;<emu-not-ref>Property name</emu-not-ref>&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref> or <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>; or, if <var>UnicodeSets</var> is <emu-val>true</emu-val>, of <emu-xref href=\"#table-binary-unicode-properties-of-strings\"><a href=\"#table-binary-unicode-properties-of-strings\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties-of-strings\">#table-binary-unicode-properties-of-strings</a></emu-xref>.</li><li>Let <var>c</var> be the canonical <emu-not-ref>property name</emu-not-ref> of <var>p</var> as given in the &#8220;Canonical <emu-not-ref>property name</emu-not-ref>&#8221; or &#8220;<emu-not-ref>Property name</emu-not-ref>&#8221; column of the corresponding row; or the same as <var>p</var> if <var>p</var> is listed in <emu-xref href=\"#table-binary-unicode-properties-of-strings\"><a href=\"#table-binary-unicode-properties-of-strings\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties-of-strings\">#table-binary-unicode-properties-of-strings</a></emu-xref>.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points and strings of <var>c</var>.</li></ol></emu-alg>\n          <p>Implementations must support the Unicode property names and aliases listed in <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref>, <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>, and <emu-xref href=\"#table-binary-unicode-properties-of-strings\"><a href=\"#table-binary-unicode-properties-of-strings\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties-of-strings\">#table-binary-unicode-properties-of-strings</a></emu-xref>. To ensure interoperability, implementations must not support any other property names or aliases.</p>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>For example, <code>Script_Extensions</code> (<emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>) and <code>scx</code> (property alias) are valid, but <code>script_extensions</code> or <code>Scx</code> aren't.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The listed properties form a superset of what <a href=\"https://unicode.org/reports/tr18/#RL1.2\">UTS18 RL1.2</a> requires.</p>\n          </div></emu-note>\n          <emu-import href=\"table-nonbinary-unicode-properties.html\"><emu-table id=\"table-nonbinary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</span>: Non-binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>General_Category</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>General_Category</code></a></td>\n    </tr>\n    <tr>\n      <td><code>gc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script\"><code>Script</code></a></td>\n    </tr>\n    <tr>\n      <td><code>sc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script_Extensions</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script_Extensions\"><code>Script_Extensions</code></a></td>\n    </tr>\n    <tr>\n      <td><code>scx</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n          <emu-import href=\"table-binary-unicode-properties.html\"><emu-table id=\"table-binary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</span>: Binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>ASCII</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>ASCII</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ASCII_Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ASCII_Hex_Digit\"><code>ASCII_Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>AHex</code></td>\n    </tr>\n    <tr>\n      <td><code>Alphabetic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Alphabetic\"><code>Alphabetic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Alpha</code></td>\n    </tr>\n    <tr>\n      <td><code>Any</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Any</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Assigned</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Assigned</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Control\"><code>Bidi_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Mirrored</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Mirrored\"><code>Bidi_Mirrored</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_M</code></td>\n    </tr>\n    <tr>\n      <td><code>Case_Ignorable</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Case_Ignorable\"><code>Case_Ignorable</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CI</code></td>\n    </tr>\n    <tr>\n      <td><code>Cased</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Cased\"><code>Cased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCF\"><code>Changes_When_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casemapped</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCM\"><code>Changes_When_Casemapped</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCM</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Lowercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWL\"><code>Changes_When_Lowercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWL</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_NFKC_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWKCF\"><code>Changes_When_NFKC_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWKCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Titlecased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWT\"><code>Changes_When_Titlecased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWT</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Uppercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWU\"><code>Changes_When_Uppercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWU</code></td>\n    </tr>\n    <tr>\n      <td><code>Dash</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Dash\"><code>Dash</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Default_Ignorable_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Default_Ignorable_Code_Point\"><code>Default_Ignorable_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>DI</code></td>\n    </tr>\n    <tr>\n      <td><code>Deprecated</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Deprecated\"><code>Deprecated</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dep</code></td>\n    </tr>\n    <tr>\n      <td><code>Diacritic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Diacritic\"><code>Diacritic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dia</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji</code></td>\n      <td><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Component</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Component</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EComp</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EMod</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EBase</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Presentation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Presentation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EPres</code></td>\n    </tr>\n    <tr>\n      <td><code>Extended_Pictographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Extended_Pictographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ExtPict</code></td>\n    </tr>\n    <tr>\n      <td><code>Extender</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Extender\"><code>Extender</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Base\"><code>Grapheme_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Base</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Extend</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Extend\"><code>Grapheme_Extend</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Hex_Digit\"><code>Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Hex</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Binary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Binary_Operator\"><code>IDS_Binary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDSB</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Trinary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Trinary_Operator\"><code>IDS_Trinary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDST</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Continue\"><code>ID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDC</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Start\"><code>ID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDS</code></td>\n    </tr>\n    <tr>\n      <td><code>Ideographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Ideographic\"><code>Ideographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ideo</code></td>\n    </tr>\n    <tr>\n      <td><code>Join_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Join_Control\"><code>Join_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Join_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Logical_Order_Exception</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Logical_Order_Exception\"><code>Logical_Order_Exception</code></a></td>\n    </tr>\n    <tr>\n      <td><code>LOE</code></td>\n    </tr>\n    <tr>\n      <td><code>Lowercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Lowercase\"><code>Lowercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Lower</code></td>\n    </tr>\n    <tr>\n      <td><code>Math</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Math\"><code>Math</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Noncharacter_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Noncharacter_Code_Point\"><code>Noncharacter_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>NChar</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_Syntax</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_Syntax\"><code>Pattern_Syntax</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_Syn</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_White_Space\"><code>Pattern_White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_WS</code></td>\n    </tr>\n    <tr>\n      <td><code>Quotation_Mark</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Quotation_Mark\"><code>Quotation_Mark</code></a></td>\n    </tr>\n    <tr>\n      <td><code>QMark</code></td>\n    </tr>\n    <tr>\n      <td><code>Radical</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Radical\"><code>Radical</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Regional_Indicator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Regional_Indicator\"><code>Regional_Indicator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>RI</code></td>\n    </tr>\n    <tr>\n      <td><code>Sentence_Terminal</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#STerm\"><code>Sentence_Terminal</code></a></td>\n    </tr>\n    <tr>\n      <td><code>STerm</code></td>\n    </tr>\n    <tr>\n      <td><code>Soft_Dotted</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Soft_Dotted\"><code>Soft_Dotted</code></a></td>\n    </tr>\n    <tr>\n      <td><code>SD</code></td>\n    </tr>\n    <tr>\n      <td><code>Terminal_Punctuation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Terminal_Punctuation\"><code>Terminal_Punctuation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Term</code></td>\n    </tr>\n    <tr>\n      <td><code>Unified_Ideograph</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Unified_Ideograph\"><code>Unified_Ideograph</code></a></td>\n    </tr>\n    <tr>\n      <td><code>UIdeo</code></td>\n    </tr>\n    <tr>\n      <td><code>Uppercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Uppercase\"><code>Uppercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Upper</code></td>\n    </tr>\n    <tr>\n      <td><code>Variation_Selector</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Variation_Selector\"><code>Variation_Selector</code></a></td>\n    </tr>\n    <tr>\n      <td><code>VS</code></td>\n    </tr>\n    <tr>\n      <td><code>White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#White_Space\"><code>White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>space</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Continue\"><code>XID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDC</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Start\"><code>XID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDS</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n          <emu-import href=\"table-binary-unicode-properties-of-strings.html\"><emu-table id=\"table-binary-unicode-properties-of-strings\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-binary-unicode-properties-of-strings\">#table-binary-unicode-properties-of-strings</span>: Binary Unicode properties of strings</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>Basic_Emoji</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Keycap_Sequence</code></td>\n    </tr>\n    <tr>\n      <td><code>RGI_Emoji_Modifier_Sequence</code></td>\n    </tr>\n    <tr>\n      <td><code>RGI_Emoji_Flag_Sequence</code></td>\n    </tr>\n    <tr>\n      <td><code>RGI_Emoji_Tag_Sequence</code></td>\n    </tr>\n    <tr>\n      <td><code>RGI_Emoji_ZWJ_Sequence</code></td>\n    </tr>\n    \n      <tr><td><code>RGI_Emoji</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n        </emu-clause>\n        "}, "sec-runtime-semantics-canonicalize-ch": {"num": "22.2.2.8.2", "title": "#sec-runtime-semantics-canonicalize-ch Canonicalize ( ch )", "html": "<emu-clause id=\"sec-runtime-semantics-canonicalize-ch\" type=\"abstract operation\" aoid=\"Canonicalize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-canonicalize-ch\">#sec-runtime-semantics-canonicalize-ch</span> Canonicalize ( <var>ch</var> )</h1>\n          <p>The abstract operation Canonicalize takes argument <var>ch</var> (a character). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>EitherUnicode</var> is <emu-val>true</emu-val> and <var>IgnoreCase</var> is <emu-val>true</emu-val>, then<ol><li>If the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping for <var>ch</var>, return the result of applying that mapping to <var>ch</var>.</li><li>Return <var>ch</var>.</li></ol></li><li>If <var>IgnoreCase</var> is <emu-val>false</emu-val>, return <var>ch</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ch</var> is a UTF-16 code unit.</li><li>Let <var>cp</var> be the code point whose numeric value is that of <var>ch</var>.</li><li>Let <var>u</var> be the result of toUppercase(&#171; <var>cp</var> &#187;), according to the Unicode Default Case Conversion algorithm.</li><li>Let <var>uStr</var> be !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>u</var>).</li><li>If <var>uStr</var> does not consist of a single code unit, return <var>ch</var>.</li><li>Let <var>cu</var> be <var>uStr</var>'s single code unit element.</li><li>If the numeric value of <var>ch</var> &#8805; 128 and the numeric value of <var>cu</var> &lt; 128, return <var>ch</var>.</li><li>Return <var>cu</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Parentheses of the form <code>(</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> serve both to group the components of the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> pattern together and to save the result of the match. The result can be used either in a backreference (<code>\\</code> followed by a non-zero decimal number), referenced in a replace String, or returned as part of an array from the regular expression matching <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>. To inhibit the capturing behaviour of parentheses, use the form <code>(?:</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> instead.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The form <code>(?=</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width positive lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must match at the current position, but the current position is not advanced before matching the sequel. If <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can match at the current position in several ways, only the first one is tried. Unlike other regular expression operators, there is no backtracking into a <code>(?=</code> form (this unusual behaviour is inherited from Perl). This only matters when the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> contains capturing parentheses and the sequel of the pattern contains backreferences to those captures.</p>\n            <p>For example,</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>matches the empty String immediately after the first <code>b</code> and therefore returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"aaa\"</span>]</code></pre>\n            <p>To illustrate the lack of backtracking into the lookahead, consider:</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))a*b\\<span class=\"hljs-number\">1</span>/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>This expression returns</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n            <p>and not:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaaba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>The form <code>(?!</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width negative lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must fail to match at the current position. The current position is not advanced before matching the sequel. <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can contain capturing parentheses, but backreferences to them only make sense from within <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> itself. Backreferences to these capturing parentheses from elsewhere in the pattern always return <emu-val>undefined</emu-val> because the negative lookahead must fail for the pattern to succeed. For example,</p>\n            <pre><code class=\"javascript hljs\">/(.*?)<span class=\"hljs-title function_\">a</span>(?!(a+)b\\2c)\\<span class=\"hljs-number\">2</span>(.*)/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"baaabaac\"</span>)</code></pre>\n            <p>looks for an <code>a</code> not immediately followed by some positive number n of <code>a</code>'s, a <code>b</code>, another n <code>a</code>'s (specified by the first <code>\\2</code>) and a <code>c</code>. The second <code>\\2</code> is outside the negative lookahead, so it matches against <emu-val>undefined</emu-val> and therefore always succeeds. The whole expression returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"baaabaac\"</span>, <span class=\"hljs-string\">\"ba\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"abaac\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>In case-insignificant matches when <var>EitherUnicode</var> is <emu-val>true</emu-val>, all characters are implicitly case-folded using the simple mapping provided by the Unicode standard immediately before they are compared. The simple mapping always maps to a single code point, so it does not map, for example, <code>&#223;</code> (U+00DF) to <code>SS</code>. It may however map a code point outside the Basic Latin range to a character within, for example, <code>&#383;</code> (U+017F) to <code>s</code>. Such characters are not mapped if <var>EitherUnicode</var> is <emu-val>false</emu-val>. This prevents Unicode code points such as U+017F and U+212A from matching regular expressions such as <code>/[a-z]/i</code>, but they will match <code>/[a-z]/ui</code>.</p>\n          </div></emu-note>\n        </emu-clause>\n        "}, "sec-properties-of-the-regexp-prototype-object": {"num": "22.2.5", "title": "#sec-properties-of-the-regexp-prototype-object Properties of the RegExp Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-regexp-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</span> Properties of the RegExp Prototype Object</h1>\n      <p>The <dfn>RegExp prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%RegExp.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is not a RegExp instance and does not have a [[RegExpMatcher]] internal slot or any of the other internal slots of RegExp instance objects.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The RegExp prototype object does not have a <emu-val>\"valueOf\"</emu-val> property of its own; however, it inherits the <emu-val>\"valueOf\"</emu-val> property from the <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">Object prototype object</a></emu-xref>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-regexp.prototype.constructor\"><h1><span class=\"secnum\">22.2.5.1</span>#sec-regexp.prototype.constructor RegExp.prototype.constructor</h1>...</div><div id=\"excluded-sec-regexp.prototype.exec\"><h1><span class=\"secnum\">22.2.5.2</span>#sec-regexp.prototype.exec RegExp.prototype.exec ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.dotAll\"><h1><span class=\"secnum\">22.2.5.3</span>#sec-get-regexp.prototype.dotAll get RegExp.prototype.dotAll</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.flags\"><h1><span class=\"secnum\">22.2.5.4</span>#sec-get-regexp.prototype.flags get RegExp.prototype.flags</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.global\"><h1><span class=\"secnum\">22.2.5.5</span>#sec-get-regexp.prototype.global get RegExp.prototype.global</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.ignorecase\"><h1><span class=\"secnum\">22.2.5.6</span>#sec-get-regexp.prototype.ignorecase get RegExp.prototype.ignoreCase</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@match\"><h1><span class=\"secnum\">22.2.5.7</span>#sec-regexp.prototype-@@match RegExp.prototype [ @@match ] ( string )</h1>...</div><div id=\"excluded-sec-regexp-prototype-matchall\"><h1><span class=\"secnum\">22.2.5.8</span>#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.multiline\"><h1><span class=\"secnum\">22.2.5.9</span>#sec-get-regexp.prototype.multiline get RegExp.prototype.multiline</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@replace\"><h1><span class=\"secnum\">22.2.5.10</span>#sec-regexp.prototype-@@replace RegExp.prototype [ @@replace ] ( string, replaceValue )</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@search\"><h1><span class=\"secnum\">22.2.5.11</span>#sec-regexp.prototype-@@search RegExp.prototype [ @@search ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.source\"><h1><span class=\"secnum\">22.2.5.12</span>#sec-get-regexp.prototype.source get RegExp.prototype.source</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@split\"><h1><span class=\"secnum\">22.2.5.13</span>#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.sticky\"><h1><span class=\"secnum\">22.2.5.14</span>#sec-get-regexp.prototype.sticky get RegExp.prototype.sticky</h1>...</div><div id=\"excluded-sec-regexp.prototype.test\"><h1><span class=\"secnum\">22.2.5.15</span>#sec-regexp.prototype.test RegExp.prototype.test ( S )</h1>...</div><div id=\"excluded-sec-regexp.prototype.tostring\"><h1><span class=\"secnum\">22.2.5.16</span>#sec-regexp.prototype.tostring RegExp.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.unicode\"><h1><span class=\"secnum\">22.2.5.17</span>#sec-get-regexp.prototype.unicode get RegExp.prototype.unicode</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.unicodesets\"><h1><span class=\"secnum\">22.2.5.18</span>#sec-get-regexp.prototype.unicodesets get RegExp.prototype.unicodeSets</h1>...</div></emu-clause>\n    "}, "sec-get-regexp.prototype.unicodesets": {"num": "22.2.5.18", "title": "#sec-get-regexp.prototype.unicodesets get RegExp.prototype.unicodeSets", "html": "<emu-clause id=\"sec-get-regexp.prototype.unicodesets\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.unicodesets\">#sec-get-regexp.prototype.unicodesets</span> get RegExp.prototype.unicodeSets</h1>\n        <p><code>RegExp.prototype.unicodeSets</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>cu</var> be the code unit 0x0076 (LATIN SMALL LETTER V).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpHasFlag\"><a href=\"#sec-regexphasflag\">RegExpHasFlag</a></emu-xref>(<var>R</var>, <var>cu</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {"table-nonbinary-unicode-properties": "Table 68", "table-binary-unicode-properties": "Table 69", "table-binary-unicode-properties-of-strings": "Table 70"}}}