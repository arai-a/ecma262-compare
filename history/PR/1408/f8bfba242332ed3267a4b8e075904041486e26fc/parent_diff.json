{"from": {"secList": ["sec-iteratorclose", "sec-asynciteratorclose"], "secData": {"sec-iteratorclose": {"num": "7.4.6", "title": "#sec-iteratorclose IteratorClose ( iteratorRecord, completion )", "html": "<emu-clause id=\"sec-iteratorclose\" aoid=\"IteratorClose\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iteratorclose\">#sec-iteratorclose</span> IteratorClose ( <var>iteratorRecord</var>, <var>completion</var> )</h1>\n      <p>The abstract operation IteratorClose with arguments <var>iteratorRecord</var> and <var>completion</var> is used to notify an iterator that it should perform any actions it would normally perform when it has reached its completed state:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>.</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>Let <var>innerResult</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>).</li><li>If <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>.[[Value]]) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asynciteratorclose": {"num": "7.4.7", "title": "#sec-asynciteratorclose AsyncIteratorClose ( iteratorRecord, completion )", "html": "<emu-clause id=\"sec-asynciteratorclose\" aoid=\"AsyncIteratorClose\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asynciteratorclose\">#sec-asynciteratorclose</span> AsyncIteratorClose ( <var>iteratorRecord</var>, <var>completion</var> )</h1>\n      <p>The abstract operation AsyncIteratorClose with arguments <var>iteratorRecord</var> and <var>completion</var> is used to notify an async iterator that it should perform any actions it would normally perform when it has reached its completed state:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>.</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>Let <var>innerResult</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>normal</emu-const>, set <var>innerResult</var> to <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>.[[Value]]).</li><li>If <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>.[[Value]]) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-iteratorclose", "sec-asynciteratorclose"], "secData": {"sec-iteratorclose": {"num": "7.4.6", "title": "#sec-iteratorclose IteratorClose ( iteratorRecord, completion )", "html": "<emu-clause id=\"sec-iteratorclose\" aoid=\"IteratorClose\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iteratorclose\">#sec-iteratorclose</span> IteratorClose ( <var>iteratorRecord</var>, <var>completion</var> )</h1>\n      <p>The abstract operation IteratorClose with arguments <var>iteratorRecord</var> and <var>completion</var> is used to notify an iterator that it should perform any actions it would normally perform when it has reached its completed state:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>.</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>innerResult</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <code>\"return\"</code>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>normal</emu-const>,<ol><li>Let <var>return</var> be <var>innerResult</var>.[[Value]].</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>Set <var>innerResult</var> to <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>).</li></ol></li><li>If <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>.[[Value]]) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asynciteratorclose": {"num": "7.4.7", "title": "#sec-asynciteratorclose AsyncIteratorClose ( iteratorRecord, completion )", "html": "<emu-clause id=\"sec-asynciteratorclose\" aoid=\"AsyncIteratorClose\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asynciteratorclose\">#sec-asynciteratorclose</span> AsyncIteratorClose ( <var>iteratorRecord</var>, <var>completion</var> )</h1>\n      <p>The abstract operation AsyncIteratorClose with arguments <var>iteratorRecord</var> and <var>completion</var> is used to notify an async iterator that it should perform any actions it would normally perform when it has reached its completed state:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>.</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>innerResult</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <code>\"return\"</code>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>normal</emu-const>,<ol><li>Let <var>return</var> be <var>innerResult</var>.[[Value]].</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>Set <var>innerResult</var> to <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>normal</emu-const>, set <var>innerResult</var> to <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>.[[Value]]).</li></ol></li><li>If <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>.[[Value]]) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}}