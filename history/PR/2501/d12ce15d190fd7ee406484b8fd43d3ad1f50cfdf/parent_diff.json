{"from": {"secList": ["sec-toindex", "sec-tolength", "sec-tointegerorinfinity"], "secData": {"sec-toindex": {"num": "7.1.22", "title": "#sec-toindex ToIndex ( value )", "html": "<emu-clause id=\"sec-toindex\" aoid=\"ToIndex\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toindex\">#sec-toindex</span> ToIndex ( <var>value</var> )</h1>\n      <p>The abstract operation ToIndex takes argument <var>value</var>. It returns <var>value</var> argument converted to a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> if it is a valid <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> value. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>Return 0.</li></ol></li><li>Else,<ol><li>Let <var>integerIndex</var> be <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(? <emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>value</var>)).</li><li>If <var>integerIndex</var> &lt; <emu-val>+0</emu-val><sub>&#120125;</sub>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<var>integerIndex</var>).</li><li>If !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>integerIndex</var>, <var>index</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Return <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-tolength": {"num": "7.1.20", "title": "#sec-tolength ToLength ( argument )", "html": "<emu-clause id=\"sec-tolength\" aoid=\"ToLength\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tolength\">#sec-tolength</span> ToLength ( <var>argument</var> )</h1>\n      <p>The abstract operation ToLength takes argument <var>argument</var>. It converts <var>argument</var> to an <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> suitable for use as the length of an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>argument</var>).</li><li>If <var>len</var> &#8804; 0, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>len</var>, 2<sup>53</sup> - 1)).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-tointegerorinfinity": {"num": "7.1.5", "title": "#sec-tointegerorinfinity ToIntegerOrInfinity ( argument )", "html": "<emu-clause id=\"sec-tointegerorinfinity\" oldids=\"sec-tointeger\" aoid=\"ToIntegerOrInfinity\"><span id=\"sec-tointeger\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tointegerorinfinity\">#sec-tointegerorinfinity</span> ToIntegerOrInfinity ( <var>argument</var> )</h1>\n      <p>The abstract operation ToIntegerOrInfinity takes argument <var>argument</var>. It converts <var>argument</var> to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, +&#8734;, or -&#8734;. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, or <emu-val>-0</emu-val><sub>&#120125;</sub>, return 0.</li><li>If <var>number</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return +&#8734;.</li><li>If <var>number</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return -&#8734;.</li><li>Let <var>integer</var> be <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>If <var>number</var> &lt; <emu-val>+0</emu-val><sub>&#120125;</sub>, set <var>integer</var> to -<var>integer</var>.</li><li>Return <var>integer</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-toindex", "sec-tolength", "sec-tointegerorinfinity"], "secData": {"sec-toindex": {"num": "7.1.22", "title": "#sec-toindex ToIndex ( value )", "html": "<emu-clause id=\"sec-toindex\" aoid=\"ToIndex\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toindex\">#sec-toindex</span> ToIndex ( <var>value</var> )</h1>\n      <p>The abstract operation ToIndex takes argument <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It converts <var>value</var> to a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> if the corresponding decimal representation is equivalent to an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>Return 0.</li></ol></li><li>Else,<ol><li>Let <var>integer</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>value</var>).</li><li>Let <var>clamped</var> be !&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<var>value</var>).</li><li>If !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>integer</var>), <var>clamped</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: 0 &#8804; <var>integer</var> &#8804; 2<sup>53</sup> - 1.</li><li>Return <var>integer</var>.</li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-tolength": {"num": "7.1.20", "title": "#sec-tolength ToLength ( argument )", "html": "<emu-clause id=\"sec-tolength\" aoid=\"ToLength\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tolength\">#sec-tolength</span> ToLength ( <var>argument</var> )</h1>\n      <p>The abstract operation ToLength takes argument <var>argument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It clamps <var>argument</var> to an <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref> suitable for use as the length of an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>argument</var>).</li><li>If <var>len</var> &#8804; 0, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>len</var>, 2<sup>53</sup> - 1)).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-tointegerorinfinity": {"num": "7.1.5", "title": "#sec-tointegerorinfinity ToIntegerOrInfinity ( argument )", "html": "<emu-clause id=\"sec-tointegerorinfinity\" oldids=\"sec-tointeger\" aoid=\"ToIntegerOrInfinity\"><span id=\"sec-tointeger\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tointegerorinfinity\">#sec-tointegerorinfinity</span> ToIntegerOrInfinity ( <var>argument</var> )</h1>\n      <p>The abstract operation ToIntegerOrInfinity takes argument <var>argument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It converts <var>argument</var> to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> representing its <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> with fractional part truncated, or to +&#8734; or -&#8734; when that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is infinite. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, or <emu-val>-0</emu-val><sub>&#120125;</sub>, return 0.</li><li>If <var>number</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return +&#8734;.</li><li>If <var>number</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return -&#8734;.</li><li>Let <var>integer</var> be <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>If <var>number</var> &lt; <emu-val>+0</emu-val><sub>&#120125;</sub>, set <var>integer</var> to -<var>integer</var>.</li><li>Return <var>integer</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}}