{"from": {"secList": ["sec-function.prototype.call", "sec-function.prototype.apply", "sec-preparefortailcall", "sec-tail-position-calls", "sec-reflect.apply", "sec-evaluatedirectcall"], "secData": {"sec-function.prototype.call": {"num": "19.2.3.3", "title": "#sec-function.prototype.call Function.prototype.call (thisArg, ...args)", "html": "<emu-clause id=\"sec-function.prototype.call\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</span> Function.prototype.call (<var>thisArg</var>, ...<var>args</var>)</h1>\n        <p>When the <code>call</code> method is called on an object <var>func</var> with argument, <var>thisArg</var> and zero or more <var>args</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>argList</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If this method was called with more than one argument, then in left to right order, starting with the second argument, append each argument as the last element of <var>argList</var>.</li><li>Perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisArg</var>, <var>argList</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>thisArg</var> value is passed without modification as the <emu-val>this</emu-val> value. This is a change from Edition 3, where an <emu-val>undefined</emu-val> or <emu-val>null</emu-val> <var>thisArg</var> is replaced with the <emu-xref href=\"#global-object\"><a href=\"#global-object\">global object</a></emu-xref> and <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> is applied to all other values and that result is passed as the <emu-val>this</emu-val> value. Even though the <var>thisArg</var> is passed without modification, non-strict functions still perform these transformations upon entry to the function.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>func</var> is an arrow function or a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function</a></emu-xref> then the <var>thisArg</var> will be ignored by the function [[Call]] in step 5.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-function.prototype.apply": {"num": "19.2.3.1", "title": "#sec-function.prototype.apply Function.prototype.apply ( thisArg, argArray )", "html": "<emu-clause id=\"sec-function.prototype.apply\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</span> Function.prototype.apply ( <var>thisArg</var>, <var>argArray</var> )</h1>\n        <p>When the <code>apply</code> method is called on an object <var>func</var> with arguments <var>thisArg</var> and <var>argArray</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>argArray</var> is <emu-val>null</emu-val> or <emu-val>undefined</emu-val>, then<ol><li>Perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisArg</var>).</li></ol></li><li>Let <var>argList</var> be ?&#160;<emu-xref aoid=\"CreateListFromArrayLike\"><a href=\"#sec-createlistfromarraylike\">CreateListFromArrayLike</a></emu-xref>(<var>argArray</var>).</li><li>Perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisArg</var>, <var>argList</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>thisArg</var> value is passed without modification as the <emu-val>this</emu-val> value. This is a change from Edition 3, where an <emu-val>undefined</emu-val> or <emu-val>null</emu-val> <var>thisArg</var> is replaced with the <emu-xref href=\"#global-object\"><a href=\"#global-object\">global object</a></emu-xref> and <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> is applied to all other values and that result is passed as the <emu-val>this</emu-val> value. Even though the <var>thisArg</var> is passed without modification, non-strict functions still perform these transformations upon entry to the function.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>func</var> is an arrow function or a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function</a></emu-xref> then the <var>thisArg</var> will be ignored by the function [[Call]] in step 5.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-preparefortailcall": {"num": "14.6.3", "title": "#sec-preparefortailcall Runtime Semantics: PrepareForTailCall ( )", "html": "<emu-clause id=\"sec-preparefortailcall\" aoid=\"PrepareForTailCall\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-preparefortailcall\">#sec-preparefortailcall</span> Runtime Semantics: PrepareForTailCall ( )</h1>\n      <p>The abstract operation PrepareForTailCall performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>leafContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> <var>leafContext</var>.</li><li>Pop <var>leafContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> now on the top of the stack becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>leafContext</var> has no further use. It will never be activated as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.\n      </li></ol></emu-alg>\n      <p>A tail position call must either release any transient internal resources associated with the currently executing function <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> before invoking the target function or reuse those resources in support of the target function.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For example, a tail position call should only grow an implementation's activation record stack by the amount that the size of the target function's activation record exceeds the size of the calling function's activation record. If the target function's activation record is smaller, then the total size of the stack should decrease.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-tail-position-calls": {"num": "14.6", "title": "#sec-tail-position-calls Tail Position Calls", "html": "<emu-clause id=\"sec-tail-position-calls\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tail-position-calls\">#sec-tail-position-calls</span> Tail Position Calls</h1>\n\n    <!-- es6num=\"14.6.1\" -->\n    <div id=\"excluded-sec-isintailposition\"><h1><span class=\"secnum\">14.6.1</span>#sec-isintailposition Static Semantics: IsInTailPosition(nonterminal)</h1>...</div><!-- es6num=\"14.6.2\" -->\n    <div id=\"excluded-sec-static-semantics-hasproductionintailposition\"><h1><span class=\"secnum\">14.6.2</span>#sec-static-semantics-hasproductionintailposition Static Semantics: HasProductionInTailPosition</h1>...</div><!-- es6num=\"14.6.3\" -->\n    <div id=\"excluded-sec-preparefortailcall\"><h1><span class=\"secnum\">14.6.3</span>#sec-preparefortailcall Runtime Semantics: PrepareForTailCall ( )</h1>...</div></emu-clause>\n"}, "sec-reflect.apply": {"num": "26.1.1", "title": "#sec-reflect.apply Reflect.apply ( target, thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-reflect.apply\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-reflect.apply\">#sec-reflect.apply</span> Reflect.apply ( <var>target</var>, <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n      <p>When the <code>apply</code> function is called with arguments <var>target</var>, <var>thisArgument</var>, and <var>argumentsList</var>, the following steps are taken:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>target</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>args</var> be ?&#160;<emu-xref aoid=\"CreateListFromArrayLike\"><a href=\"#sec-createlistfromarraylike\">CreateListFromArrayLike</a></emu-xref>(<var>argumentsList</var>).</li><li>Perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>target</var>, <var>thisArgument</var>, <var>args</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-evaluatedirectcall": {"num": "12.3.4.3", "title": "#sec-evaluatedirectcall Runtime Semantics: EvaluateDirectCall( func, thisValue, arguments, tailPosition )", "html": "<emu-clause id=\"sec-evaluatedirectcall\" aoid=\"EvaluateDirectCall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatedirectcall\">#sec-evaluatedirectcall</span> Runtime Semantics: EvaluateDirectCall( <var>func</var>, <var>thisValue</var>, <var>arguments</var>, <var>tailPosition</var> )</h1>\n        <p>The abstract operation EvaluateDirectCall takes as arguments a value <var>func</var>, a value <var>thisValue</var>, a syntactic grammar production <var>arguments</var>, and a Boolean argument <var>tailPosition</var>. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>argList</var> be ?&#160;ArgumentListEvaluation(<var>arguments</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>tailPosition</var> is <emu-val>true</emu-val>, perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisValue</var>, <var>argList</var>).</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: If <var>tailPosition</var> is <emu-val>true</emu-val>, the above call will not return here, but instead evaluation will continue as if the following return has already occurred.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: If <var>result</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</li><li>Return <var>result</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-function.prototype.call", "sec-function.prototype.apply", "sec-preparefortailcall", "sec-tail-position-calls", "sec-reflect.apply", "sec-evaluatedirectcall"], "secData": {"sec-function.prototype.call": {"num": "19.2.3.3", "title": "#sec-function.prototype.call Function.prototype.call (thisArg, ...args)", "html": "<emu-clause id=\"sec-function.prototype.call\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</span> Function.prototype.call (<var>thisArg</var>, ...<var>args</var>)</h1>\n        <p>When the <code>call</code> method is called on an object <var>func</var> with argument, <var>thisArg</var> and zero or more <var>args</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>argList</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If this method was called with more than one argument, then in left to right order, starting with the second argument, append each argument as the last element of <var>argList</var>.</li><li>Perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>(<var>func</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisArg</var>, <var>argList</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>thisArg</var> value is passed without modification as the <emu-val>this</emu-val> value. This is a change from Edition 3, where an <emu-val>undefined</emu-val> or <emu-val>null</emu-val> <var>thisArg</var> is replaced with the <emu-xref href=\"#global-object\"><a href=\"#global-object\">global object</a></emu-xref> and <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> is applied to all other values and that result is passed as the <emu-val>this</emu-val> value. Even though the <var>thisArg</var> is passed without modification, non-strict functions still perform these transformations upon entry to the function.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>func</var> is an arrow function or a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function</a></emu-xref> then the <var>thisArg</var> will be ignored by the function [[Call]] in step 5.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-function.prototype.apply": {"num": "19.2.3.1", "title": "#sec-function.prototype.apply Function.prototype.apply ( thisArg, argArray )", "html": "<emu-clause id=\"sec-function.prototype.apply\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</span> Function.prototype.apply ( <var>thisArg</var>, <var>argArray</var> )</h1>\n        <p>When the <code>apply</code> method is called on an object <var>func</var> with arguments <var>thisArg</var> and <var>argArray</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>argArray</var> is <emu-val>null</emu-val> or <emu-val>undefined</emu-val>, then<ol><li>Perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>(<var>func</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisArg</var>).</li></ol></li><li>Let <var>argList</var> be ?&#160;<emu-xref aoid=\"CreateListFromArrayLike\"><a href=\"#sec-createlistfromarraylike\">CreateListFromArrayLike</a></emu-xref>(<var>argArray</var>).</li><li>Perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>(<var>func</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisArg</var>, <var>argList</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>thisArg</var> value is passed without modification as the <emu-val>this</emu-val> value. This is a change from Edition 3, where an <emu-val>undefined</emu-val> or <emu-val>null</emu-val> <var>thisArg</var> is replaced with the <emu-xref href=\"#global-object\"><a href=\"#global-object\">global object</a></emu-xref> and <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> is applied to all other values and that result is passed as the <emu-val>this</emu-val> value. Even though the <var>thisArg</var> is passed without modification, non-strict functions still perform these transformations upon entry to the function.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>func</var> is an arrow function or a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function</a></emu-xref> then the <var>thisArg</var> will be ignored by the function [[Call]] in step 5.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-preparefortailcall": {"num": "14.6.3", "title": "#sec-preparefortailcall Runtime Semantics: PrepareForTailCall ( target )", "html": "<emu-clause id=\"sec-preparefortailcall\" aoid=\"PrepareForTailCall\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-preparefortailcall\">#sec-preparefortailcall</span> Runtime Semantics: PrepareForTailCall ( <var>target</var> )</h1>\n      <p>The abstract operation PrepareForTailCall with argument <var>target</var> performs the following steps:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>target</var>) is not equal to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>, return.</li><li>Let <var>leafContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"https://tc39.es/ecma262/#sec-suspend\">Suspend</a></emu-xref> <var>leafContext</var>.</li><li>Pop <var>leafContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> now on the top of the stack becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: <var>leafContext</var> has no further use. It will never be activated as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.\n      </li></ol></emu-alg>\n      <p>A same-<emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> tail position call must either release any transient internal resources associated with the currently executing function <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> before invoking the target function or reuse those resources in support of the target function.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For example, a same-<emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> tail position call should only grow an implementation's activation record stack by the amount that the size of the target function's activation record exceeds the size of the calling function's activation record. If the target function's activation record is smaller, then the total size of the stack should decrease.</p>\n        <p>Because cross-<emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> tail position calls still syntactically appear in tail poition, implementations may optionally elect to optimize cross-<emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> tail position calls to not increase total internal resource consumption in this manner, or to emit a warning in this case.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-tail-position-calls": {"num": "14.6", "title": "#sec-tail-position-calls Tail Position Calls", "html": "<emu-clause id=\"sec-tail-position-calls\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tail-position-calls\">#sec-tail-position-calls</span> Tail Position Calls</h1>\n\n    <!-- es6num=\"14.6.1\" -->\n    <div id=\"excluded-sec-isintailposition\"><h1><span class=\"secnum\">14.6.1</span>#sec-isintailposition Static Semantics: IsInTailPosition(nonterminal)</h1>...</div><!-- es6num=\"14.6.2\" -->\n    <div id=\"excluded-sec-static-semantics-hasproductionintailposition\"><h1><span class=\"secnum\">14.6.2</span>#sec-static-semantics-hasproductionintailposition Static Semantics: HasProductionInTailPosition</h1>...</div><!-- es6num=\"14.6.3\" -->\n    <div id=\"excluded-sec-preparefortailcall\"><h1><span class=\"secnum\">14.6.3</span>#sec-preparefortailcall Runtime Semantics: PrepareForTailCall ( target )</h1>...</div></emu-clause>\n"}, "sec-reflect.apply": {"num": "26.1.1", "title": "#sec-reflect.apply Reflect.apply ( target, thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-reflect.apply\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-reflect.apply\">#sec-reflect.apply</span> Reflect.apply ( <var>target</var>, <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n      <p>When the <code>apply</code> function is called with arguments <var>target</var>, <var>thisArgument</var>, and <var>argumentsList</var>, the following steps are taken:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>target</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>args</var> be ?&#160;<emu-xref aoid=\"CreateListFromArrayLike\"><a href=\"#sec-createlistfromarraylike\">CreateListFromArrayLike</a></emu-xref>(<var>argumentsList</var>).</li><li>Perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>(<var>target</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>target</var>, <var>thisArgument</var>, <var>args</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-evaluatedirectcall": {"num": "12.3.4.3", "title": "#sec-evaluatedirectcall Runtime Semantics: EvaluateDirectCall( func, thisValue, arguments, tailPosition )", "html": "<emu-clause id=\"sec-evaluatedirectcall\" aoid=\"EvaluateDirectCall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatedirectcall\">#sec-evaluatedirectcall</span> Runtime Semantics: EvaluateDirectCall( <var>func</var>, <var>thisValue</var>, <var>arguments</var>, <var>tailPosition</var> )</h1>\n        <p>The abstract operation EvaluateDirectCall takes as arguments a value <var>func</var>, a value <var>thisValue</var>, a syntactic grammar production <var>arguments</var>, and a Boolean argument <var>tailPosition</var>. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>argList</var> be ?&#160;ArgumentListEvaluation(<var>arguments</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>tailPosition</var> is <emu-val>true</emu-val>, perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>(<var>func</var>).</li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisValue</var>, <var>argList</var>).</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: If <var>tailPosition</var> is <emu-val>true</emu-val>, the above call will not return here, but instead evaluation will continue as if the following return has already occurred.</li><li><emu-xref href=\"#assert\"><a href=\"https://tc39.es/ecma262/#assert\">Assert</a></emu-xref>: If <var>result</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</li><li>Return <var>result</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}}