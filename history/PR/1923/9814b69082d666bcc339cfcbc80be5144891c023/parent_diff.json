{"from": {"secList": ["sec-ordinaryownpropertykeys", "sec-pattern"], "secData": {"sec-ordinaryownpropertykeys": {"num": "9.1.11.1", "title": "#sec-ordinaryownpropertykeys OrdinaryOwnPropertyKeys ( O )", "html": "<emu-clause id=\"sec-ordinaryownpropertykeys\" aoid=\"OrdinaryOwnPropertyKeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryownpropertykeys\">#sec-ordinaryownpropertykeys</span> OrdinaryOwnPropertyKeys ( <var>O</var> )</h1>\n        <p>When the abstract operation OrdinaryOwnPropertyKeys is called with Object <var>O</var>, the following steps are taken:</p>\n\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each own property key <var>P</var> of <var>O</var> that is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, in ascending numeric index order, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> that is a String but is not an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> that is a Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-pattern": {"num": "21.2.2.2", "title": "#sec-pattern Pattern", "html": "<emu-clause id=\"sec-pattern\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern\">#sec-pattern</span> Pattern</h1>\n        <p>The production  <emu-grammar><emu-production name=\"Pattern\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"79a5bbd0\"><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with +1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">abstract closure</a></emu-xref> with parameters (<var>str</var>, <var>index</var>) that captures <var>m</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>str</var> is a String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>index</var>) is <emu-val>true</emu-val> and <var>index</var> &#8804; the length of <var>str</var>.</li><li>If <var>Unicode</var> is <emu-val>true</emu-val>, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the sequence of code points of !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>str</var>). Otherwise, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the sequence of code units that are the elements of <var>str</var>. <var>Input</var> will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>. Each element of <var>Input</var> is considered to be a character.</li><li>Let <var>InputLength</var> be the number of characters contained in <var>Input</var>. This variable will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>.</li><li>Let <var>listIndex</var> be the index into <var>Input</var> of the character that was obtained from element <var>index</var> of <var>str</var>.</li><li>Let <var>c</var> be a new Continuation with parameters (<var>y</var>) that captures nothing and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li>Return <var>y</var>.</li></ol></li><li>Let <var>cap</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> <emu-val>undefined</emu-val> values, indexed 1 through <var>NcapturingParens</var>.</li><li>Let <var>x</var> be the State (<var>listIndex</var>, <var>cap</var>).</li><li>Call <var>m</var>(<var>x</var>, <var>c</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A Pattern evaluates (&#8220;compiles&#8221;) to an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">abstract closure</a></emu-xref> value. <emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref> can then apply this procedure to a String and an offset within the String to determine whether the pattern would match starting at exactly that offset within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms in  <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> are designed so that compiling a pattern may throw a <emu-val>SyntaxError</emu-val> exception; on the other hand, once the pattern is successfully compiled, applying the resulting <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">abstract closure</a></emu-xref> to find a match in a String cannot throw an exception (except for any host-defined exceptions that can occur anywhere such as out-of-memory).</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-ordinaryownpropertykeys", "sec-pattern"], "secData": {"sec-ordinaryownpropertykeys": {"num": "9.1.11.1", "title": "#sec-ordinaryownpropertykeys OrdinaryOwnPropertyKeys ( O )", "html": "<emu-clause id=\"sec-ordinaryownpropertykeys\" aoid=\"OrdinaryOwnPropertyKeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryownpropertykeys\">#sec-ordinaryownpropertykeys</span> OrdinaryOwnPropertyKeys ( <var>O</var> )</h1>\n        <p>When the abstract operation OrdinaryOwnPropertyKeys is called with Object <var>O</var>, the following steps are taken:</p>\n\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each own property key <var>P</var> of <var>O</var> such that <var>P</var> is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, in ascending numeric index order, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-pattern": {"num": "21.2.2.2", "title": "#sec-pattern Pattern", "html": "<emu-clause id=\"sec-pattern\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern\">#sec-pattern</span> Pattern</h1>\n        <p>The production  <emu-grammar><emu-production name=\"Pattern\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"79a5bbd0\"><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with +1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">abstract closure</a></emu-xref> with parameters (<var>str</var>, <var>index</var>) that captures <var>m</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>index</var>) is <emu-val>true</emu-val> and <var>index</var> &#8804; the length of <var>str</var>.</li><li>If <var>Unicode</var> is <emu-val>true</emu-val>, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the sequence of code points of !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>str</var>). Otherwise, let <var>Input</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the sequence of code units that are the elements of <var>str</var>. <var>Input</var> will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>. Each element of <var>Input</var> is considered to be a character.</li><li>Let <var>InputLength</var> be the number of characters contained in <var>Input</var>. This variable will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref>.</li><li>Let <var>listIndex</var> be the index into <var>Input</var> of the character that was obtained from element <var>index</var> of <var>str</var>.</li><li>Let <var>c</var> be a new Continuation with parameters (<var>y</var>) that captures nothing and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li>Return <var>y</var>.</li></ol></li><li>Let <var>cap</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> <emu-val>undefined</emu-val> values, indexed 1 through <var>NcapturingParens</var>.</li><li>Let <var>x</var> be the State (<var>listIndex</var>, <var>cap</var>).</li><li>Call <var>m</var>(<var>x</var>, <var>c</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A Pattern evaluates (&#8220;compiles&#8221;) to an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">abstract closure</a></emu-xref> value. <emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref> can then apply this procedure to a String and an offset within the String to determine whether the pattern would match starting at exactly that offset within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms in  <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> are designed so that compiling a pattern may throw a <emu-val>SyntaxError</emu-val> exception; on the other hand, once the pattern is successfully compiled, applying the resulting <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">abstract closure</a></emu-xref> to find a match in a String cannot throw an exception (except for any host-defined exceptions that can occur anywhere such as out-of-memory).</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}