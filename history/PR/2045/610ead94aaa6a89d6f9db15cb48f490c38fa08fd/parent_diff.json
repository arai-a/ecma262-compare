{"from": {"secList": ["sec-createmapiterator", "sec-properties-of-map-iterator-instances", "sec-properties-of-set-iterator-instances", "sec-asyncgenerator-prototype-next", "sec-listiteratornext-functions", "sec-array-iterator-objects", "sec-%setiteratorprototype%.next", "sec-generatorvalidate", "sec-generator-function-definitions-runtime-semantics-evaluatebody", "sec-%arrayiteratorprototype%-object", "sec-string.prototype-@@iterator", "sec-asyncgeneratorresumenext", "sec-asyncgeneratoryield", "sec-createarrayiterator", "sec-asyncgenerator-definitions-evaluatebody", "sec-asyncgenerator-prototype-throw", "sec-asyncgeneratorenqueue", "sec-generatorresume", "sec-%mapiteratorprototype%.next", "sec-createlistiteratorRecord", "sec-%setiteratorprototype%-object", "sec-generator.prototype.next", "sec-properties-of-string-iterator-instances", "sec-properties-of-asyncgenerator-intances", "sec-properties-of-regexp-string-iterator-instances", "sec-asyncgenerator-abstract-operations", "sec-generator.prototype.throw", "sec-async-function-constructor-properties", "sec-generator-abstract-operations", "sec-map-iterator-objects", "sec-createregexpstringiterator", "sec-string-iterator-objects", "sec-async-function-constructor", "sec-%regexpstringiteratorprototype%-object", "sec-generator.prototype.return", "sec-set-iterator-objects", "sec-%stringiteratorprototype%.next", "sec-%arrayiteratorprototype%.next", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-generatorstart", "sec-asyncgeneratorresolve", "sec-generatoryield", "sec-%regexpstringiteratorprototype%.next", "sec-%stringiteratorprototype%-object", "sec-createstringiterator", "sec-generatorresumeabrupt", "sec-properties-of-generator-instances", "sec-asyncgenerator-prototype-return", "sec-asyncgeneratorstart", "sec-createsetiterator", "sec-properties-of-array-iterator-instances", "sec-regexp-string-iterator-objects", "sec-%mapiteratorprototype%-object"], "secData": {"sec-createmapiterator": {"num": "23.1.5.1", "title": "#sec-createmapiterator CreateMapIterator ( map, kind )", "html": "<emu-clause id=\"sec-createmapiterator\" aoid=\"CreateMapIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmapiterator\">#sec-createmapiterator</span> CreateMapIterator ( <var>map</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateMapIterator takes arguments <var>map</var> and <var>kind</var>. This operation is used to create iterator objects for Map methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>map</var>, [[MapData]]).</li><li>Let <var>iterator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref>, &#171; [[IteratedMap]], [[MapNextIndex]], [[MapIterationKind]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedMap]] to <var>map</var>.</li><li>Set <var>iterator</var>.[[MapNextIndex]] to 0.</li><li>Set <var>iterator</var>.[[MapIterationKind]] to <var>kind</var>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-map-iterator-instances": {"num": "23.1.5.3", "title": "#sec-properties-of-map-iterator-instances Properties of Map Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-map-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-map-iterator-instances\">#sec-properties-of-map-iterator-instances</span> Properties of Map Iterator Instances</h1>\n        <p>Map Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref> intrinsic object. Map Iterator instances are initially created with the internal slots described in <emu-xref href=\"#table-internal-slots-of-map-iterator-instances\"><a href=\"#table-internal-slots-of-map-iterator-instances\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-map-iterator-instances\">#table-internal-slots-of-map-iterator-instances</a></emu-xref>.</p>\n        <emu-table id=\"table-internal-slots-of-map-iterator-instances\" caption=\"Internal Slots of Map Iterator Instances\" oldids=\"table-50\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-map-iterator-instances\">#table-internal-slots-of-map-iterator-instances</span>: Internal Slots of Map Iterator Instances</figcaption><span id=\"table-50\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedMap]]\n              </td>\n              <td>\n                The Map object that is being iterated.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[MapNextIndex]]\n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next [[MapData]] element to be examined by this iterator.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[MapIterationKind]]\n              </td>\n              <td>\n                A String value that identifies what is returned for each element of the iteration. The possible values are: <emu-const>key</emu-const>, <emu-const>value</emu-const>, <emu-const>key+value</emu-const>.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-properties-of-set-iterator-instances": {"num": "23.2.5.3", "title": "#sec-properties-of-set-iterator-instances Properties of Set Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-set-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-set-iterator-instances\">#sec-properties-of-set-iterator-instances</span> Properties of Set Iterator Instances</h1>\n        <p>Set Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref> intrinsic object. Set Iterator instances are initially created with the internal slots specified in <emu-xref href=\"#table-internal-slots-of-set-iterator-instances\"><a href=\"#table-internal-slots-of-set-iterator-instances\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-set-iterator-instances\">#table-internal-slots-of-set-iterator-instances</a></emu-xref>.</p>\n        <emu-table id=\"table-internal-slots-of-set-iterator-instances\" caption=\"Internal Slots of Set Iterator Instances\" oldids=\"table-51\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-set-iterator-instances\">#table-internal-slots-of-set-iterator-instances</span>: Internal Slots of Set Iterator Instances</figcaption><span id=\"table-51\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedSet]]\n              </td>\n              <td>\n                The Set object that is being iterated.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetNextIndex]]\n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next [[SetData]] element to be examined by this iterator.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetIterationKind]]\n              </td>\n              <td>\n                A String value that identifies what is returned for each element of the iteration. The possible values are <emu-const>value</emu-const> and <emu-const>key+value</emu-const>.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-asyncgenerator-prototype-next": {"num": "26.5.1.2", "title": "#sec-asyncgenerator-prototype-next AsyncGenerator.prototype.next ( value )", "html": "<emu-clause id=\"sec-asyncgenerator-prototype-next\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-prototype-next\">#sec-asyncgenerator-prototype-next</span> AsyncGenerator.prototype.next ( <var>value</var> )</h1>\n        <emu-alg><ol><li>Let <var>generator</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>completion</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>).</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorEnqueue\"><a href=\"#sec-asyncgeneratorenqueue\">AsyncGeneratorEnqueue</a></emu-xref>(<var>generator</var>, <var>completion</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-listiteratornext-functions": {"num": "7.4.9.1", "title": "#sec-listiteratornext-functions ListIteratorNext Functions", "html": "<emu-clause id=\"sec-listiteratornext-functions\" oldids=\"sec-listiterator-next\"><span id=\"sec-listiterator-next\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-listiteratornext-functions\">#sec-listiteratornext-functions</span> ListIteratorNext Functions</h1>\n        <p>A ListIteratorNext function is an anonymous built-in function. When called with no arguments, it performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has an [[IteratedList]] internal slot.</li><li>Let <var>list</var> be <var>O</var>.[[IteratedList]].</li><li>Let <var>index</var> be <var>O</var>.[[ListNextIndex]].</li><li>Let <var>len</var> be the number of elements of <var>list</var>.</li><li>If <var>index</var> &#8805; <var>len</var>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>O</var>.[[ListNextIndex]] to <var>index</var> + 1.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>list</var>[<var>index</var>], <emu-val>false</emu-val>).</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of a ListIteratorNext function is <emu-val>+0</emu-val><sub>&#120125;</sub>.</p>\n      </emu-clause>\n    "}, "sec-array-iterator-objects": {"num": "22.1.5", "title": "#sec-array-iterator-objects Array Iterator Objects", "html": "<emu-clause id=\"sec-array-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-iterator-objects\">#sec-array-iterator-objects</span> Array Iterator Objects</h1>\n      <p>An Array Iterator is an object, that represents a specific iteration over some specific Array instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Array Iterator objects. Instead, Array iterator objects are created by calling certain methods of Array instance objects.</p>\n\n      <div id=\"excluded-sec-createarrayiterator\"><h1><span class=\"secnum\">22.1.5.1</span>#sec-createarrayiterator CreateArrayIterator ( array, kind )</h1>...</div><div id=\"excluded-sec-%arrayiteratorprototype%-object\"><h1><span class=\"secnum\">22.1.5.2</span>#sec-%arrayiteratorprototype%-object The %ArrayIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-array-iterator-instances\"><h1><span class=\"secnum\">22.1.5.3</span>#sec-properties-of-array-iterator-instances Properties of Array Iterator Instances</h1>...</div></emu-clause>\n  "}, "sec-%setiteratorprototype%.next": {"num": "23.2.5.2.1", "title": "#sec-%setiteratorprototype%.next %SetIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%setiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%.next\">#sec-%setiteratorprototype%.next</span> %SetIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a Set Iterator Instance (<emu-xref href=\"#sec-properties-of-set-iterator-instances\"><a href=\"#sec-properties-of-set-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-set-iterator-instances\">#sec-properties-of-set-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>s</var> be <var>O</var>.[[IteratedSet]].</li><li>Let <var>index</var> be <var>O</var>.[[SetNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[SetIterationKind]].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>s</var> has a [[SetData]] internal slot.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>s</var>.[[SetData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>NOTE: <var>numEntries</var> must be redetermined each time this method is evaluated.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Set <var>O</var>.[[SetNextIndex]] to <var>index</var>.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>itemKind</var> is <emu-const>key+value</emu-const>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;), <emu-val>false</emu-val>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>itemKind</var> is <emu-const>value</emu-const>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>e</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set <var>O</var>.[[IteratedSet]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-generatorvalidate": {"num": "26.4.3.2", "title": "#sec-generatorvalidate GeneratorValidate ( generator )", "html": "<emu-clause id=\"sec-generatorvalidate\" aoid=\"GeneratorValidate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorvalidate\">#sec-generatorvalidate</span> GeneratorValidate ( <var>generator</var> )</h1>\n        <p>The abstract operation GeneratorValidate takes argument <var>generator</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>generator</var>, [[GeneratorState]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> also has a [[GeneratorContext]] internal slot.</li><li>Let <var>state</var> be <var>generator</var>.[[GeneratorState]].</li><li>If <var>state</var> is <emu-const>executing</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>state</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generator-function-definitions-runtime-semantics-evaluatebody": {"num": "14.4.10", "title": "#sec-generator-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluatebody\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluatebody\">#sec-generator-function-definitions-runtime-semantics-evaluatebody</span> Runtime Semantics: EvaluateBody</h1>\n      <p>With parameters <var>functionObject</var> and <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>argumentsList</var>.</p>\n      <emu-see-also-para op=\"EvaluateBody\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8aa65b90\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref>(<var>functionObject</var>, <var>argumentsList</var>).</li><li>Let <var>G</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>functionObject</var>, <emu-val>\"%GeneratorFunction.prototype.prototype%\"</emu-val>, &#171; [[GeneratorState]], [[GeneratorContext]] &#187;).</li><li>Perform <emu-xref aoid=\"GeneratorStart\"><a href=\"#sec-generatorstart\">GeneratorStart</a></emu-xref>(<var>G</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>G</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-%arrayiteratorprototype%-object": {"num": "22.1.5.2", "title": "#sec-%arrayiteratorprototype%-object The %ArrayIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%-object\">#sec-%arrayiteratorprototype%-object</span> The %ArrayIteratorPrototype% Object</h1>\n        <p>The <dfn>%ArrayIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Array Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%arrayiteratorprototype%.next\"><h1><span class=\"secnum\">22.1.5.2.1</span>#sec-%arrayiteratorprototype%.next %ArrayIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%arrayiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">22.1.5.2.2</span>#sec-%arrayiteratorprototype%-@@tostringtag %ArrayIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}, "sec-string.prototype-@@iterator": {"num": "21.1.3.33", "title": "#sec-string.prototype-@@iterator String.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-string.prototype-@@iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype-@@iterator\">#sec-string.prototype-@@iterator</span> String.prototype [ @@iterator ] ( )</h1>\n        <p>When the <code>@@iterator</code> method is called it returns an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) that iterates over the code points of a String value, returning each code point as a String value. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Return <emu-xref aoid=\"CreateStringIterator\"><a href=\"#sec-createstringiterator\">CreateStringIterator</a></emu-xref>(<var>S</var>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.iterator]\"</emu-val>.</p>\n      </emu-clause>\n    "}, "sec-asyncgeneratorresumenext": {"num": "26.5.3.5", "title": "#sec-asyncgeneratorresumenext AsyncGeneratorResumeNext ( generator )", "html": "<emu-clause id=\"sec-asyncgeneratorresumenext\" aoid=\"AsyncGeneratorResumeNext\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</span> AsyncGeneratorResumeNext ( <var>generator</var> )</h1>\n        <p>The abstract operation AsyncGeneratorResumeNext takes argument <var>generator</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>state</var> be <var>generator</var>.[[AsyncGeneratorState]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is not <emu-const>executing</emu-const>.</li><li>If <var>state</var> is <emu-const>awaiting-return</emu-const>, return <emu-val>undefined</emu-val>.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li>If <var>queue</var> is an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, return <emu-val>undefined</emu-val>.</li><li>Let <var>next</var> be the value of the first element of <var>queue</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>next</var> is an AsyncGeneratorRequest record.</li><li>Let <var>completion</var> be <var>next</var>.[[Completion]].</li><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>completion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>awaiting-return</emu-const>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>completion</var>.[[Value]]).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-fulfilled\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-fulfilled\">AsyncGeneratorResumeNext Return Processor Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onFulfilled</var>.[[Generator]] to <var>generator</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-rejected\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-rejected\">AsyncGeneratorResumeNext Return Processor Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onRejected</var>.[[Generator]] to <var>generator</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>completion</var>.[[Value]]).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li></ol></li></ol></li><li>Else if <var>state</var> is <emu-const>completed</emu-const>, return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[AsyncGeneratorContext]].</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>callerContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>completion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>callerContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-fulfilled\">\n          <h1><span class=\"secnum\">26.5.3.5.1</span> AsyncGeneratorResumeNext Return Processor Fulfilled Functions</h1>\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function has a [[Generator]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>F</var>.[[Generator]], <var>value</var>, <emu-val>true</emu-val>).</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-rejected\">\n          <h1><span class=\"secnum\">26.5.3.5.2</span> AsyncGeneratorResumeNext Return Processor Rejected Functions</h1>\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function has a [[Generator]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>F</var>.[[Generator]], <var>reason</var>).</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratoryield": {"num": "26.5.3.7", "title": "#sec-asyncgeneratoryield AsyncGeneratorYield ( value )", "html": "<emu-clause id=\"sec-asyncgeneratoryield\" aoid=\"AsyncGeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratoryield\">#sec-asyncgeneratoryield</span> AsyncGeneratorYield ( <var>value</var> )</h1>\n        <p>The abstract operation AsyncGeneratorYield takes argument <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>async</emu-const>.</li><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>If <var>resumptionValue</var>.[[Type]] is not <emu-const>return</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>resumptionValue</var>).</li><li>Let <var>awaited</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>resumptionValue</var>.[[Value]]).</li><li>If <var>awaited</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>awaited</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>awaited</var>.[[Type]] is <emu-const>normal</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>awaited</var>.[[Value]], [[Target]]: <emu-const>empty</emu-const> }.</li><li>NOTE: When one of the above steps returns, it returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> production that originally called this abstract operation.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>value</var>, <emu-val>false</emu-val>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-createarrayiterator": {"num": "22.1.5.1", "title": "#sec-createarrayiterator CreateArrayIterator ( array, kind )", "html": "<emu-clause id=\"sec-createarrayiterator\" aoid=\"CreateArrayIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createarrayiterator\">#sec-createarrayiterator</span> CreateArrayIterator ( <var>array</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateArrayIterator takes arguments <var>array</var> and <var>kind</var>. This operation is used to create iterator objects for Array methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>array</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>.</li><li>Let <var>iterator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%arrayiteratorprototype%-object\"><a href=\"#sec-%arrayiteratorprototype%-object\">%ArrayIteratorPrototype%</a></emu-xref>, &#171; [[IteratedArrayLike]], [[ArrayLikeNextIndex]], [[ArrayLikeIterationKind]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedArrayLike]] to <var>array</var>.</li><li>Set <var>iterator</var>.[[ArrayLikeNextIndex]] to 0.</li><li>Set <var>iterator</var>.[[ArrayLikeIterationKind]] to <var>kind</var>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgenerator-definitions-evaluatebody": {"num": "14.5.10", "title": "#sec-asyncgenerator-definitions-evaluatebody Runtime Semantics: EvaluateBody", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluatebody\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluatebody\">#sec-asyncgenerator-definitions-evaluatebody</span> Runtime Semantics: EvaluateBody</h1>\n      <p>With parameters <var>functionObject</var> and <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>argumentsList</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8aa65b90\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref>(<var>functionObject</var>, <var>argumentsList</var>).</li><li>Let <var>generator</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>functionObject</var>, <emu-val>\"%AsyncGeneratorFunction.prototype.prototype%\"</emu-val>, &#171; [[AsyncGeneratorState]], [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]] &#187;).</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorStart\"><a href=\"#sec-asyncgeneratorstart\">AsyncGeneratorStart</a></emu-xref>(<var>generator</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>generator</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-prototype-throw": {"num": "26.5.1.4", "title": "#sec-asyncgenerator-prototype-throw AsyncGenerator.prototype.throw ( exception )", "html": "<emu-clause id=\"sec-asyncgenerator-prototype-throw\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-prototype-throw\">#sec-asyncgenerator-prototype-throw</span> AsyncGenerator.prototype.throw ( <var>exception</var> )</h1>\n        <emu-alg><ol><li>Let <var>generator</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>completion</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>exception</var>).</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorEnqueue\"><a href=\"#sec-asyncgeneratorenqueue\">AsyncGeneratorEnqueue</a></emu-xref>(<var>generator</var>, <var>completion</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorenqueue": {"num": "26.5.3.6", "title": "#sec-asyncgeneratorenqueue AsyncGeneratorEnqueue ( generator, completion )", "html": "<emu-clause id=\"sec-asyncgeneratorenqueue\" aoid=\"AsyncGeneratorEnqueue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorenqueue\">#sec-asyncgeneratorenqueue</span> AsyncGeneratorEnqueue ( <var>generator</var>, <var>completion</var> )</h1>\n        <p>The abstract operation AsyncGeneratorEnqueue takes arguments <var>generator</var> and <var>completion</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>generator</var>) is not Object, or if <var>generator</var> does not have an [[AsyncGeneratorState]] internal slot, then<ol><li>Let <var>badGeneratorError</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>badGeneratorError</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li>Let <var>request</var> be AsyncGeneratorRequest { [[Completion]]: <var>completion</var>, [[Capability]]: <var>promiseCapability</var> }.</li><li>Append <var>request</var> to the end of <var>queue</var>.</li><li>Let <var>state</var> be <var>generator</var>.[[AsyncGeneratorState]].</li><li>If <var>state</var> is not <emu-const>executing</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref>(<var>generator</var>).</li></ol></li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorresume": {"num": "26.4.3.3", "title": "#sec-generatorresume GeneratorResume ( generator, value )", "html": "<emu-clause id=\"sec-generatorresume\" aoid=\"GeneratorResume\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresume\">#sec-generatorresume</span> GeneratorResume ( <var>generator</var>, <var>value</var> )</h1>\n        <p>The abstract operation GeneratorResume takes arguments <var>generator</var> and <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <emu-const>completed</emu-const>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%mapiteratorprototype%.next": {"num": "23.1.5.2.1", "title": "#sec-%mapiteratorprototype%.next %MapIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%mapiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%.next\">#sec-%mapiteratorprototype%.next</span> %MapIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a Map Iterator Instance (<emu-xref href=\"#sec-properties-of-map-iterator-instances\"><a href=\"#sec-properties-of-map-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-map-iterator-instances\">#sec-properties-of-map-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>m</var> be <var>O</var>.[[IteratedMap]].</li><li>Let <var>index</var> be <var>O</var>.[[MapNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[MapIterationKind]].</li><li>If <var>m</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var> has a [[MapData]] internal slot.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>m</var>.[[MapData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>NOTE: <var>numEntries</var> must be redetermined each time this method is evaluated.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Set <var>O</var>.[[MapNextIndex]] to <var>index</var>.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>itemKind</var> is <emu-const>key</emu-const>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>itemKind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>itemKind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>result</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set <var>O</var>.[[IteratedMap]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createlistiteratorRecord": {"num": "7.4.9", "title": "#sec-createlistiteratorRecord CreateListIteratorRecord ( list )", "html": "<emu-clause id=\"sec-createlistiteratorRecord\" oldids=\"sec-createlistiterator\" aoid=\"CreateListIteratorRecord\"><span id=\"sec-createlistiterator\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createlistiteratorRecord\">#sec-createlistiteratorRecord</span> CreateListIteratorRecord ( <var>list</var> )</h1>\n      <p>The abstract operation CreateListIteratorRecord takes argument <var>list</var>. It creates an Iterator (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) object record whose next method returns the successive elements of <var>list</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>iterator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>, &#171; [[IteratedList]], [[ListNextIndex]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedList]] to <var>list</var>.</li><li>Set <var>iterator</var>.[[ListNextIndex]] to 0.</li><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-listiteratornext-functions\" title=\"\"><a href=\"#sec-listiteratornext-functions\">ListIteratorNext Functions</a></emu-xref>.</li><li>Let <var>next</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, &#171; &#187;).</li><li>Return <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>next</var>, [[Done]]: <emu-val>false</emu-val> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The list iterator object is never directly accessible to ECMAScript code.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-listiteratornext-functions\"><h1><span class=\"secnum\">7.4.9.1</span>#sec-listiteratornext-functions ListIteratorNext Functions</h1>...</div></emu-clause>\n\n    "}, "sec-%setiteratorprototype%-object": {"num": "23.2.5.2", "title": "#sec-%setiteratorprototype%-object The %SetIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%setiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%-object\">#sec-%setiteratorprototype%-object</span> The %SetIteratorPrototype% Object</h1>\n        <p>The <dfn>%SetIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Set Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%setiteratorprototype%.next\"><h1><span class=\"secnum\">23.2.5.2.1</span>#sec-%setiteratorprototype%.next %SetIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%setiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">23.2.5.2.2</span>#sec-%setiteratorprototype%-@@tostringtag %SetIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}, "sec-generator.prototype.next": {"num": "26.4.1.2", "title": "#sec-generator.prototype.next Generator.prototype.next ( value )", "html": "<emu-clause id=\"sec-generator.prototype.next\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.next\">#sec-generator.prototype.next</span> Generator.prototype.next ( <var>value</var> )</h1>\n        <p>The <code>next</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<var>g</var>, <var>value</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-string-iterator-instances": {"num": "21.1.5.3", "title": "#sec-properties-of-string-iterator-instances Properties of String Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-string-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-string-iterator-instances\">#sec-properties-of-string-iterator-instances</span> Properties of String Iterator Instances</h1>\n        <p>String Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%stringiteratorprototype%-object\"><a href=\"#sec-%stringiteratorprototype%-object\">%StringIteratorPrototype%</a></emu-xref> intrinsic object. String Iterator instances are initially created with the internal slots listed in <emu-xref href=\"#table-internal-slots-of-string-iterator-instances\"><a href=\"#table-internal-slots-of-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-string-iterator-instances\">#table-internal-slots-of-string-iterator-instances</a></emu-xref>.</p>\n        <emu-table id=\"table-internal-slots-of-string-iterator-instances\" caption=\"Internal Slots of String Iterator Instances\" oldids=\"table-46\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-string-iterator-instances\">#table-internal-slots-of-string-iterator-instances</span>: Internal Slots of String Iterator Instances</figcaption><span id=\"table-46\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedString]]\n              </td>\n              <td>\n                The String value whose code units are being iterated.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[StringNextIndex]]\n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next string element (code unit) to be examined by this iterator.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-properties-of-asyncgenerator-intances": {"num": "26.5.2", "title": "#sec-properties-of-asyncgenerator-intances Properties of AsyncGenerator Instances", "html": "<emu-clause id=\"sec-properties-of-asyncgenerator-intances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-asyncgenerator-intances\">#sec-properties-of-asyncgenerator-intances</span> Properties of AsyncGenerator Instances</h1>\n      <p>AsyncGenerator instances are initially created with the internal slots described below:</p>\n      <emu-table id=\"table-internal-slots-of-asyncgenerator-instances\" caption=\"Internal Slots of AsyncGenerator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-asyncgenerator-instances\">#table-internal-slots-of-asyncgenerator-instances</span>: Internal Slots of AsyncGenerator Instances</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>Internal Slot</th>\n            <th>Description</th>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorState]]</td>\n            <td>The current execution state of the async generator. The possible values are: <emu-val>undefined</emu-val>, <emu-const>suspendedStart</emu-const>, <emu-const>suspendedYield</emu-const>, <emu-const>executing</emu-const>, <emu-const>awaiting-return</emu-const>, and <emu-const>completed</emu-const>.</td>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorContext]]</td>\n            <td>The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is used when executing the code of this async generator.</td>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorQueue]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of AsyncGeneratorRequest records which represent requests to resume the async generator.</td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-properties-of-regexp-string-iterator-instances": {"num": "21.2.7.3", "title": "#sec-properties-of-regexp-string-iterator-instances Properties of RegExp String Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-regexp-string-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-regexp-string-iterator-instances\">#sec-properties-of-regexp-string-iterator-instances</span> Properties of RegExp String Iterator Instances</h1>\n        <p>RegExp String Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%regexpstringiteratorprototype%-object\"><a href=\"#sec-%regexpstringiteratorprototype%-object\">%RegExpStringIteratorPrototype%</a></emu-xref> intrinsic object. RegExp String Iterator instances are initially created with the internal slots listed in <emu-xref href=\"#table-regexp-string-iterator-instance-slots\"><a href=\"#table-regexp-string-iterator-instance-slots\" class=\"excluded-xref\" excluded-id=\"table-regexp-string-iterator-instance-slots\">#table-regexp-string-iterator-instance-slots</a></emu-xref>.</p>\n        <emu-table id=\"table-regexp-string-iterator-instance-slots\" caption=\"Internal Slots of RegExp String Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-regexp-string-iterator-instance-slots\">#table-regexp-string-iterator-instance-slots</span>: Internal Slots of RegExp String Iterator Instances</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>Internal Slot</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td>[[IteratingRegExp]]</td>\n                <td>The regular expression used for iteration. <emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>([[IteratingRegExp]]) is initially <emu-val>true</emu-val>.</td>\n              </tr>\n              <tr>\n                <td>[[IteratedString]]</td>\n                <td>The String value being iterated upon.</td>\n              </tr>\n              <tr>\n                <td>[[Global]]</td>\n                <td>A Boolean value to indicate whether the [[IteratingRegExp]] is global or not.</td>\n              </tr>\n              <tr>\n                <td>[[Unicode]]</td>\n                <td>A Boolean value to indicate whether the [[IteratingRegExp]] is in Unicode mode or not.</td>\n              </tr>\n              <tr>\n                <td>[[Done]]</td>\n                <td>A Boolean value to indicate whether the iteration is complete or not.</td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-asyncgenerator-abstract-operations": {"num": "26.5.3", "title": "#sec-asyncgenerator-abstract-operations AsyncGenerator Abstract Operations", "html": "<emu-clause id=\"sec-asyncgenerator-abstract-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-abstract-operations\">#sec-asyncgenerator-abstract-operations</span> AsyncGenerator Abstract Operations</h1>\n      <div id=\"excluded-sec-asyncgeneratorrequest-records\"><h1><span class=\"secnum\">26.5.3.1</span>#sec-asyncgeneratorrequest-records AsyncGeneratorRequest Records</h1>...</div><div id=\"excluded-sec-asyncgeneratorstart\"><h1><span class=\"secnum\">26.5.3.2</span>#sec-asyncgeneratorstart AsyncGeneratorStart ( generator, generatorBody )</h1>...</div><div id=\"excluded-sec-asyncgeneratorresolve\"><h1><span class=\"secnum\">26.5.3.3</span>#sec-asyncgeneratorresolve AsyncGeneratorResolve ( generator, value, done )</h1>...</div><div id=\"excluded-sec-asyncgeneratorreject\"><h1><span class=\"secnum\">26.5.3.4</span>#sec-asyncgeneratorreject AsyncGeneratorReject ( generator, exception )</h1>...</div><div id=\"excluded-sec-asyncgeneratorresumenext\"><h1><span class=\"secnum\">26.5.3.5</span>#sec-asyncgeneratorresumenext AsyncGeneratorResumeNext ( generator )</h1>...</div><div id=\"excluded-sec-asyncgeneratorenqueue\"><h1><span class=\"secnum\">26.5.3.6</span>#sec-asyncgeneratorenqueue AsyncGeneratorEnqueue ( generator, completion )</h1>...</div><div id=\"excluded-sec-asyncgeneratoryield\"><h1><span class=\"secnum\">26.5.3.7</span>#sec-asyncgeneratoryield AsyncGeneratorYield ( value )</h1>...</div></emu-clause>\n  "}, "sec-generator.prototype.throw": {"num": "26.4.1.4", "title": "#sec-generator.prototype.throw Generator.prototype.throw ( exception )", "html": "<emu-clause id=\"sec-generator.prototype.throw\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.throw\">#sec-generator.prototype.throw</span> Generator.prototype.throw ( <var>exception</var> )</h1>\n        <p>The <code>throw</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>C</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>exception</var>).</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResumeAbrupt\"><a href=\"#sec-generatorresumeabrupt\">GeneratorResumeAbrupt</a></emu-xref>(<var>g</var>, <var>C</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-async-function-constructor-properties": {"num": "26.7.2", "title": "#sec-async-function-constructor-properties Properties of the AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor-properties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor-properties\">#sec-async-function-constructor-properties</span> Properties of the AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is a standard built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that inherits from the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-function-constructor\"><a href=\"#sec-function-constructor\">%Function%</a></emu-xref>.</li>\n        <li>has a <emu-val>\"name\"</emu-val> property whose value is <emu-val>\"AsyncFunction\"</emu-val>.</li>\n        <li>has the following properties:</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-length\"><h1><span class=\"secnum\">26.7.2.1</span>#sec-async-function-constructor-length AsyncFunction.length</h1>...</div><div id=\"excluded-sec-async-function-constructor-prototype\"><h1><span class=\"secnum\">26.7.2.2</span>#sec-async-function-constructor-prototype AsyncFunction.prototype</h1>...</div></emu-clause>\n    "}, "sec-generator-abstract-operations": {"num": "26.4.3", "title": "#sec-generator-abstract-operations Generator Abstract Operations", "html": "<emu-clause id=\"sec-generator-abstract-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-abstract-operations\">#sec-generator-abstract-operations</span> Generator Abstract Operations</h1>\n\n      <div id=\"excluded-sec-generatorstart\"><h1><span class=\"secnum\">26.4.3.1</span>#sec-generatorstart GeneratorStart ( generator, generatorBody )</h1>...</div><div id=\"excluded-sec-generatorvalidate\"><h1><span class=\"secnum\">26.4.3.2</span>#sec-generatorvalidate GeneratorValidate ( generator )</h1>...</div><div id=\"excluded-sec-generatorresume\"><h1><span class=\"secnum\">26.4.3.3</span>#sec-generatorresume GeneratorResume ( generator, value )</h1>...</div><div id=\"excluded-sec-generatorresumeabrupt\"><h1><span class=\"secnum\">26.4.3.4</span>#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion )</h1>...</div><div id=\"excluded-sec-getgeneratorkind\"><h1><span class=\"secnum\">26.4.3.5</span>#sec-getgeneratorkind GetGeneratorKind ( )</h1>...</div><div id=\"excluded-sec-generatoryield\"><h1><span class=\"secnum\">26.4.3.6</span>#sec-generatoryield GeneratorYield ( iterNextObj )</h1>...</div></emu-clause>\n  "}, "sec-map-iterator-objects": {"num": "23.1.5", "title": "#sec-map-iterator-objects Map Iterator Objects", "html": "<emu-clause id=\"sec-map-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map-iterator-objects\">#sec-map-iterator-objects</span> Map Iterator Objects</h1>\n      <p>A Map Iterator is an object, that represents a specific iteration over some specific Map instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Map Iterator objects. Instead, map iterator objects are created by calling certain methods of Map instance objects.</p>\n\n      <div id=\"excluded-sec-createmapiterator\"><h1><span class=\"secnum\">23.1.5.1</span>#sec-createmapiterator CreateMapIterator ( map, kind )</h1>...</div><div id=\"excluded-sec-%mapiteratorprototype%-object\"><h1><span class=\"secnum\">23.1.5.2</span>#sec-%mapiteratorprototype%-object The %MapIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-map-iterator-instances\"><h1><span class=\"secnum\">23.1.5.3</span>#sec-properties-of-map-iterator-instances Properties of Map Iterator Instances</h1>...</div></emu-clause>\n  "}, "sec-createregexpstringiterator": {"num": "21.2.7.1", "title": "#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )", "html": "<emu-clause id=\"sec-createregexpstringiterator\" aoid=\"CreateRegExpStringIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createregexpstringiterator\">#sec-createregexpstringiterator</span> CreateRegExpStringIterator ( <var>R</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var> )</h1>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>global</var>) is Boolean.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>fullUnicode</var>) is Boolean.</li><li>Let <var>iterator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%regexpstringiteratorprototype%-object\"><a href=\"#sec-%regexpstringiteratorprototype%-object\">%RegExpStringIteratorPrototype%</a></emu-xref>, &#171; [[IteratingRegExp]], [[IteratedString]], [[Global]], [[Unicode]], [[Done]] &#187;).</li><li>Set <var>iterator</var>.[[IteratingRegExp]] to <var>R</var>.</li><li>Set <var>iterator</var>.[[IteratedString]] to <var>S</var>.</li><li>Set <var>iterator</var>.[[Global]] to <var>global</var>.</li><li>Set <var>iterator</var>.[[Unicode]] to <var>fullUnicode</var>.</li><li>Set <var>iterator</var>.[[Done]] to <emu-val>false</emu-val>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string-iterator-objects": {"num": "21.1.5", "title": "#sec-string-iterator-objects String Iterator Objects", "html": "<emu-clause id=\"sec-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-iterator-objects\">#sec-string-iterator-objects</span> String Iterator Objects</h1>\n      <p>A String Iterator is an object, that represents a specific iteration over some specific String instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for String Iterator objects. Instead, String iterator objects are created by calling certain methods of String instance objects.</p>\n\n      <div id=\"excluded-sec-createstringiterator\"><h1><span class=\"secnum\">21.1.5.1</span>#sec-createstringiterator CreateStringIterator ( string )</h1>...</div><div id=\"excluded-sec-%stringiteratorprototype%-object\"><h1><span class=\"secnum\">21.1.5.2</span>#sec-%stringiteratorprototype%-object The %StringIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-string-iterator-instances\"><h1><span class=\"secnum\">21.1.5.3</span>#sec-properties-of-string-iterator-instances Properties of String Iterator Instances</h1>...</div></emu-clause>\n  "}, "sec-async-function-constructor": {"num": "26.7.1", "title": "#sec-async-function-constructor The AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor\">#sec-async-function-constructor</span> The AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is <dfn>%AsyncFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new AsyncFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncFunction(&#8230;)</code> is equivalent to the object creation expression <code>new AsyncFunction(&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncFunction behaviour must include a <code>super</code> call to the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize a subclass instance with the internal slots necessary for built-in async function behaviour. All ECMAScript syntactic forms for defining async function objects create direct instances of AsyncFunction. There is no syntactic means to create instances of AsyncFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-arguments\"><h1><span class=\"secnum\">26.7.1.1</span>#sec-async-function-constructor-arguments AsyncFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n    "}, "sec-%regexpstringiteratorprototype%-object": {"num": "21.2.7.2", "title": "#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-object\">#sec-%regexpstringiteratorprototype%-object</span> The %RegExpStringIteratorPrototype% Object</h1>\n        <p>The <dfn>%RegExpStringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all RegExp String Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%regexpstringiteratorprototype%.next\"><h1><span class=\"secnum\">21.2.7.2.1</span>#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%regexpstringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.2.7.2.2</span>#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}, "sec-generator.prototype.return": {"num": "26.4.1.3", "title": "#sec-generator.prototype.return Generator.prototype.return ( value )", "html": "<emu-clause id=\"sec-generator.prototype.return\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.return\">#sec-generator.prototype.return</span> Generator.prototype.return ( <var>value</var> )</h1>\n        <p>The <code>return</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>C</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResumeAbrupt\"><a href=\"#sec-generatorresumeabrupt\">GeneratorResumeAbrupt</a></emu-xref>(<var>g</var>, <var>C</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set-iterator-objects": {"num": "23.2.5", "title": "#sec-set-iterator-objects Set Iterator Objects", "html": "<emu-clause id=\"sec-set-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set-iterator-objects\">#sec-set-iterator-objects</span> Set Iterator Objects</h1>\n      <p>A Set Iterator is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>, with the structure defined below, that represents a specific iteration over some specific Set instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Set Iterator objects. Instead, set iterator objects are created by calling certain methods of Set instance objects.</p>\n\n      <div id=\"excluded-sec-createsetiterator\"><h1><span class=\"secnum\">23.2.5.1</span>#sec-createsetiterator CreateSetIterator ( set, kind )</h1>...</div><div id=\"excluded-sec-%setiteratorprototype%-object\"><h1><span class=\"secnum\">23.2.5.2</span>#sec-%setiteratorprototype%-object The %SetIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-set-iterator-instances\"><h1><span class=\"secnum\">23.2.5.3</span>#sec-properties-of-set-iterator-instances Properties of Set Iterator Instances</h1>...</div></emu-clause>\n  "}, "sec-%stringiteratorprototype%.next": {"num": "21.1.5.2.1", "title": "#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%stringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%.next\">#sec-%stringiteratorprototype%.next</span> %StringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a String Iterator Instance (<emu-xref href=\"#sec-properties-of-string-iterator-instances\"><a href=\"#sec-properties-of-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-string-iterator-instances\">#sec-properties-of-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be <var>O</var>.[[IteratedString]].</li><li>If <var>S</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>position</var> be <var>O</var>.[[StringNextIndex]].</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>If <var>position</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedString]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>S</var>, <var>position</var>).</li><li>Let <var>nextIndex</var> be <var>position</var> + <var>cp</var>.[[CodeUnitCount]].</li><li>Let <var>resultString</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>position</var> to <var>nextIndex</var>.</li><li>Set <var>O</var>.[[StringNextIndex]] to <var>nextIndex</var>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultString</var>, <emu-val>false</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%arrayiteratorprototype%.next": {"num": "22.1.5.2.1", "title": "#sec-%arrayiteratorprototype%.next %ArrayIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%.next\">#sec-%arrayiteratorprototype%.next</span> %ArrayIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of an Array Iterator Instance (<emu-xref href=\"#sec-properties-of-array-iterator-instances\"><a href=\"#sec-properties-of-array-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-array-iterator-instances\">#sec-properties-of-array-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>a</var> be <var>O</var>.[[IteratedArrayLike]].</li><li>If <var>a</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>index</var> be <var>O</var>.[[ArrayLikeNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[ArrayLikeIterationKind]].</li><li>If <var>a</var> has a [[TypedArrayName]] internal slot, then<ol><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>a</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>a</var>.[[ArrayLength]].</li></ol></li><li>Else,<ol><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>a</var>).</li></ol></li><li>If <var>index</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedArrayLike]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>O</var>.[[ArrayLikeNextIndex]] to <var>index</var> + 1.</li><li>If <var>itemKind</var> is <emu-const>key</emu-const>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>), <emu-val>false</emu-val>).</li><li>Let <var>elementKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)).</li><li>Let <var>elementValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>a</var>, <var>elementKey</var>).</li><li>If <var>itemKind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>elementValue</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>itemKind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>), <var>elementValue</var> &#187;).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>result</var>, <emu-val>false</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d271960\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7dbc99b6\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e741ede8\">\n        <emu-t>yield</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"47a33813\">\n        <emu-t>yield</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"throw\"</emu-val>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).</li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-generatorstart": {"num": "26.4.3.1", "title": "#sec-generatorstart GeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-generatorstart\" aoid=\"GeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorstart\">#sec-generatorstart</span> GeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation GeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>generator</var>.[[GeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[GeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorresolve": {"num": "26.5.3.3", "title": "#sec-asyncgeneratorresolve AsyncGeneratorResolve ( generator, value, done )", "html": "<emu-clause id=\"sec-asyncgeneratorresolve\" aoid=\"AsyncGeneratorResolve\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorresolve\">#sec-asyncgeneratorresolve</span> AsyncGeneratorResolve ( <var>generator</var>, <var>value</var>, <var>done</var> )</h1>\n        <p>The abstract operation AsyncGeneratorResolve takes arguments <var>generator</var>, <var>value</var>, and <var>done</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>queue</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>next</var> be the first element of <var>queue</var>.</li><li>Remove the first element from <var>queue</var>.</li><li>Let <var>promiseCapability</var> be <var>next</var>.[[Capability]].</li><li>Let <var>iteratorResult</var> be !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <var>done</var>).</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>iteratorResult</var> &#187;).</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref>(<var>generator</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatoryield": {"num": "26.4.3.6", "title": "#sec-generatoryield GeneratorYield ( iterNextObj )", "html": "<emu-clause id=\"sec-generatoryield\" aoid=\"GeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatoryield\">#sec-generatoryield</span> GeneratorYield ( <var>iterNextObj</var> )</h1>\n        <p>The abstract operation GeneratorYield takes argument <var>iterNextObj</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterNextObj</var> is an Object that implements the <i>IteratorResult</i> interface.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>sync</emu-const>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>Return <var>resumptionValue</var>.</li><li>NOTE: This returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> that originally called this abstract operation.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>iterNextObj</var>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-%regexpstringiteratorprototype%.next": {"num": "21.2.7.2.1", "title": "#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%.next\">#sec-%regexpstringiteratorprototype%.next</span> %RegExpStringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a RegExp String Iterator Object Instance (see <emu-xref href=\"#sec-properties-of-regexp-string-iterator-instances\"><a href=\"#sec-properties-of-regexp-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-regexp-string-iterator-instances\">#sec-properties-of-regexp-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>R</var> be <var>O</var>.[[IteratingRegExp]].</li><li>Let <var>S</var> be <var>O</var>.[[IteratedString]].</li><li>Let <var>global</var> be <var>O</var>.[[Global]].</li><li>Let <var>fullUnicode</var> be <var>O</var>.[[Unicode]].</li><li>Let <var>match</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li><li>If <var>match</var> is <emu-val>null</emu-val>, then<ol><li>Set <var>O</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>If <var>global</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>match</var>, <emu-val>\"0\"</emu-val>)).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>nextIndex</var> be <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>), <emu-val>true</emu-val>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>match</var>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Set <var>O</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>match</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%stringiteratorprototype%-object": {"num": "21.1.5.2", "title": "#sec-%stringiteratorprototype%-object The %StringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%stringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%-object\">#sec-%stringiteratorprototype%-object</span> The %StringIteratorPrototype% Object</h1>\n        <p>The <dfn>%StringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all String Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%stringiteratorprototype%.next\"><h1><span class=\"secnum\">21.1.5.2.1</span>#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%stringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.1.5.2.2</span>#sec-%stringiteratorprototype%-@@tostringtag %StringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}, "sec-createstringiterator": {"num": "21.1.5.1", "title": "#sec-createstringiterator CreateStringIterator ( string )", "html": "<emu-clause id=\"sec-createstringiterator\" aoid=\"CreateStringIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createstringiterator\">#sec-createstringiterator</span> CreateStringIterator ( <var>string</var> )</h1>\n        <p>The abstract operation CreateStringIterator takes argument <var>string</var>. This operation is used to create iterator objects for String methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>string</var>) is String.</li><li>Let <var>iterator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%stringiteratorprototype%-object\"><a href=\"#sec-%stringiteratorprototype%-object\">%StringIteratorPrototype%</a></emu-xref>, &#171; [[IteratedString]], [[StringNextIndex]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedString]] to <var>string</var>.</li><li>Set <var>iterator</var>.[[StringNextIndex]] to 0.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorresumeabrupt": {"num": "26.4.3.4", "title": "#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion )", "html": "<emu-clause id=\"sec-generatorresumeabrupt\" aoid=\"GeneratorResumeAbrupt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresumeabrupt\">#sec-generatorresumeabrupt</span> GeneratorResumeAbrupt ( <var>generator</var>, <var>abruptCompletion</var> )</h1>\n        <p>The abstract operation GeneratorResumeAbrupt takes arguments <var>generator</var> and <var>abruptCompletion</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>abruptCompletion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>abruptCompletion</var>.[[Value]], <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>abruptCompletion</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>abruptCompletion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-generator-instances": {"num": "26.4.2", "title": "#sec-properties-of-generator-instances Properties of Generator Instances", "html": "<emu-clause id=\"sec-properties-of-generator-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-generator-instances\">#sec-properties-of-generator-instances</span> Properties of Generator Instances</h1>\n      <p>Generator instances are initially created with the internal slots described in <emu-xref href=\"#table-internal-slots-of-generator-instances\"><a href=\"#table-internal-slots-of-generator-instances\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-generator-instances\">#table-internal-slots-of-generator-instances</a></emu-xref>.</p>\n      <emu-table id=\"table-internal-slots-of-generator-instances\" caption=\"Internal Slots of Generator Instances\" oldids=\"table-56\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-generator-instances\">#table-internal-slots-of-generator-instances</span>: Internal Slots of Generator Instances</figcaption><span id=\"table-56\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Internal Slot\n            </th>\n            <th>\n              Description\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorState]]\n            </td>\n            <td>\n              The current execution state of the generator. The possible values are: <emu-val>undefined</emu-val>, <emu-const>suspendedStart</emu-const>, <emu-const>suspendedYield</emu-const>, <emu-const>executing</emu-const>, and <emu-const>completed</emu-const>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorContext]]\n            </td>\n            <td>\n              The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is used when executing the code of this generator.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-prototype-return": {"num": "26.5.1.3", "title": "#sec-asyncgenerator-prototype-return AsyncGenerator.prototype.return ( value )", "html": "<emu-clause id=\"sec-asyncgenerator-prototype-return\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-prototype-return\">#sec-asyncgenerator-prototype-return</span> AsyncGenerator.prototype.return ( <var>value</var> )</h1>\n        <emu-alg><ol><li>Let <var>generator</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>completion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorEnqueue\"><a href=\"#sec-asyncgeneratorenqueue\">AsyncGeneratorEnqueue</a></emu-xref>(<var>generator</var>, <var>completion</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorstart": {"num": "26.5.3.2", "title": "#sec-asyncgeneratorstart AsyncGeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-asyncgeneratorstart\" aoid=\"AsyncGeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorstart\">#sec-asyncgeneratorstart</span> AsyncGeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation AsyncGeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var>.[[AsyncGeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>If <var>result</var> is a normal completion, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>If <var>result</var>.[[Type]] is not <emu-const>return</emu-const>, then<ol><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>resultValue</var>).</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[AsyncGeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Set <var>generator</var>.[[AsyncGeneratorQueue]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createsetiterator": {"num": "23.2.5.1", "title": "#sec-createsetiterator CreateSetIterator ( set, kind )", "html": "<emu-clause id=\"sec-createsetiterator\" aoid=\"CreateSetIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsetiterator\">#sec-createsetiterator</span> CreateSetIterator ( <var>set</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateSetIterator takes arguments <var>set</var> and <var>kind</var>. This operation is used to create iterator objects for Set methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>set</var>, [[SetData]]).</li><li>Let <var>iterator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref>, &#171; [[IteratedSet]], [[SetNextIndex]], [[SetIterationKind]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedSet]] to <var>set</var>.</li><li>Set <var>iterator</var>.[[SetNextIndex]] to 0.</li><li>Set <var>iterator</var>.[[SetIterationKind]] to <var>kind</var>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-array-iterator-instances": {"num": "22.1.5.3", "title": "#sec-properties-of-array-iterator-instances Properties of Array Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-array-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-array-iterator-instances\">#sec-properties-of-array-iterator-instances</span> Properties of Array Iterator Instances</h1>\n        <p>Array Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%arrayiteratorprototype%-object\"><a href=\"#sec-%arrayiteratorprototype%-object\">%ArrayIteratorPrototype%</a></emu-xref> intrinsic object. Array Iterator instances are initially created with the internal slots listed in <emu-xref href=\"#table-internal-slots-of-array-iterator-instances\"><a href=\"#table-internal-slots-of-array-iterator-instances\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-array-iterator-instances\">#table-internal-slots-of-array-iterator-instances</a></emu-xref>.</p>\n        <emu-table id=\"table-internal-slots-of-array-iterator-instances\" caption=\"Internal Slots of Array Iterator Instances\" oldids=\"table-48\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-array-iterator-instances\">#table-internal-slots-of-array-iterator-instances</span>: Internal Slots of Array Iterator Instances</figcaption><span id=\"table-48\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedArrayLike]]\n              </td>\n              <td>\n                The <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> that is being iterated.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ArrayLikeNextIndex]]\n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next element to be examined by this iterator.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ArrayLikeIterationKind]]\n              </td>\n              <td>\n                A String value that identifies what is returned for each element of the iteration. The possible values are: <emu-const>key</emu-const>, <emu-const>value</emu-const>, <emu-const>key+value</emu-const>.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-regexp-string-iterator-objects": {"num": "21.2.7", "title": "#sec-regexp-string-iterator-objects RegExp String Iterator Objects", "html": "<emu-clause id=\"sec-regexp-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-string-iterator-objects\">#sec-regexp-string-iterator-objects</span> RegExp String Iterator Objects</h1>\n      <p>A RegExp String Iterator is an object, that represents a specific iteration over some specific String instance object, matching against some specific RegExp instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for RegExp String Iterator objects. Instead, RegExp String Iterator objects are created by calling certain methods of RegExp instance objects.</p>\n\n      <div id=\"excluded-sec-createregexpstringiterator\"><h1><span class=\"secnum\">21.2.7.1</span>#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )</h1>...</div><div id=\"excluded-sec-%regexpstringiteratorprototype%-object\"><h1><span class=\"secnum\">21.2.7.2</span>#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-regexp-string-iterator-instances\"><h1><span class=\"secnum\">21.2.7.3</span>#sec-properties-of-regexp-string-iterator-instances Properties of RegExp String Iterator Instances</h1>...</div></emu-clause>\n  "}, "sec-%mapiteratorprototype%-object": {"num": "23.1.5.2", "title": "#sec-%mapiteratorprototype%-object The %MapIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%mapiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%-object\">#sec-%mapiteratorprototype%-object</span> The %MapIteratorPrototype% Object</h1>\n        <p>The <dfn>%MapIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Map Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%mapiteratorprototype%.next\"><h1><span class=\"secnum\">23.1.5.2.1</span>#sec-%mapiteratorprototype%.next %MapIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%mapiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">23.1.5.2.2</span>#sec-%mapiteratorprototype%-@@tostringtag %MapIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}}, "figData": {"table-internal-slots-of-string-iterator-instances": "Table 55", "table-regexp-string-iterator-instance-slots": "Table 61", "table-internal-slots-of-array-iterator-instances": "Table 62", "table-internal-slots-of-map-iterator-instances": "Table 64", "table-internal-slots-of-set-iterator-instances": "Table 65", "table-internal-slots-of-generator-instances": "Table 75", "table-internal-slots-of-asyncgenerator-instances": "Table 76"}}, "to": {"secList": ["sec-createmapiterator", "sec-asyncgenerator-prototype-next", "sec-array-iterator-objects", "sec-%setiteratorprototype%.next", "sec-generatorvalidate", "sec-generator-function-definitions-runtime-semantics-evaluatebody", "sec-%arrayiteratorprototype%-object", "sec-asyncgeneratorvalidate", "sec-string.prototype-@@iterator", "sec-asyncgeneratorresumenext", "sec-asyncgeneratoryield", "sec-createarrayiterator", "sec-asyncgenerator-definitions-evaluatebody", "sec-asyncgenerator-prototype-throw", "sec-asyncgeneratorenqueue", "sec-generatorresume", "sec-%mapiteratorprototype%.next", "sec-createlistiteratorRecord", "sec-%setiteratorprototype%-object", "sec-generator.prototype.next", "sec-properties-of-asyncgenerator-intances", "sec-asyncgenerator-abstract-operations", "sec-generator.prototype.throw", "sec-async-function-constructor-properties", "sec-generator-abstract-operations", "sec-map-iterator-objects", "sec-createregexpstringiterator", "sec-string-iterator-objects", "sec-createiteratorfromclosure", "sec-async-function-constructor", "sec-%regexpstringiteratorprototype%-object", "sec-generator.prototype.return", "sec-set-iterator-objects", "sec-%stringiteratorprototype%.next", "sec-%arrayiteratorprototype%.next", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-createasynciteratorfromclosure", "sec-generatorstart", "sec-asyncgeneratorresolve", "sec-generatoryield", "sec-%regexpstringiteratorprototype%.next", "sec-%stringiteratorprototype%-object", "sec-generatorresumeabrupt", "sec-properties-of-generator-instances", "sec-asyncgenerator-prototype-return", "sec-asyncgeneratorstart", "sec-yield", "sec-createsetiterator", "sec-regexp-string-iterator-objects", "sec-%mapiteratorprototype%-object"], "secData": {"sec-createmapiterator": {"num": "23.1.5.1", "title": "#sec-createmapiterator CreateMapIterator ( map, kind )", "html": "<emu-clause id=\"sec-createmapiterator\" aoid=\"CreateMapIterator\" oldids=\"sec-properties-of-map-iterator-instances,table-50,table-internal-slots-of-map-iterator-instances\"><span id=\"table-internal-slots-of-map-iterator-instances\"></span><span id=\"table-50\"></span><span id=\"sec-properties-of-map-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmapiterator\">#sec-createmapiterator</span> CreateMapIterator ( <var>map</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateMapIterator takes arguments <var>map</var> and <var>kind</var>. This operation is used to create iterator objects for Map methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>map</var>, [[MapData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>map</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>map</var>.[[MapData]].</li><li>Let <var>index</var> be 0.</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>kind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>result</var>).</li><li>NOTE: the number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%MapIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgenerator-prototype-next": {"num": "26.5.1.2", "title": "#sec-asyncgenerator-prototype-next AsyncGenerator.prototype.next ( value )", "html": "<emu-clause id=\"sec-asyncgenerator-prototype-next\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-prototype-next\">#sec-asyncgenerator-prototype-next</span> AsyncGenerator.prototype.next ( <var>value</var> )</h1>\n        <emu-alg><ol><li>Let <var>generator</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>completion</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>).</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorEnqueue\"><a href=\"#sec-asyncgeneratorenqueue\">AsyncGeneratorEnqueue</a></emu-xref>(<var>generator</var>, <var>completion</var>, <emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array-iterator-objects": {"num": "22.1.5", "title": "#sec-array-iterator-objects Array Iterator Objects", "html": "<emu-clause id=\"sec-array-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-iterator-objects\">#sec-array-iterator-objects</span> Array Iterator Objects</h1>\n      <p>An Array Iterator is an object, that represents a specific iteration over some specific Array instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Array Iterator objects. Instead, Array iterator objects are created by calling certain methods of Array instance objects.</p>\n\n      <div id=\"excluded-sec-createarrayiterator\"><h1><span class=\"secnum\">22.1.5.1</span>#sec-createarrayiterator CreateArrayIterator ( array, kind )</h1>...</div><div id=\"excluded-sec-%arrayiteratorprototype%-object\"><h1><span class=\"secnum\">22.1.5.2</span>#sec-%arrayiteratorprototype%-object The %ArrayIteratorPrototype% Object</h1>...</div></emu-clause>\n  "}, "sec-%setiteratorprototype%.next": {"num": "23.2.5.2.1", "title": "#sec-%setiteratorprototype%.next %SetIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%setiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%.next\">#sec-%setiteratorprototype%.next</span> %SetIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<emu-val>this</emu-val> value, <emu-const>empty</emu-const>, <emu-val>\"%SetIteratorPrototype%\"</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-generatorvalidate": {"num": "26.4.3.2", "title": "#sec-generatorvalidate GeneratorValidate ( generator, generatorBrand )", "html": "<emu-clause id=\"sec-generatorvalidate\" aoid=\"GeneratorValidate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorvalidate\">#sec-generatorvalidate</span> GeneratorValidate ( <var>generator</var>, <var>generatorBrand</var> )</h1>\n        <p>The abstract operation GeneratorValidate takes arguments <var>generator</var> and <var>generatorBrand</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>generator</var>, [[GeneratorState]]).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>generator</var>, [[GeneratorBrand]]).</li><li>If <var>generator</var>.[[GeneratorBrand]] is not the same value as <var>generatorBrand</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> also has a [[GeneratorContext]] internal slot.</li><li>Let <var>state</var> be <var>generator</var>.[[GeneratorState]].</li><li>If <var>state</var> is <emu-const>executing</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>state</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generator-function-definitions-runtime-semantics-evaluatebody": {"num": "14.4.10", "title": "#sec-generator-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluatebody\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluatebody\">#sec-generator-function-definitions-runtime-semantics-evaluatebody</span> Runtime Semantics: EvaluateBody</h1>\n      <p>With parameters <var>functionObject</var> and <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>argumentsList</var>.</p>\n      <emu-see-also-para op=\"EvaluateBody\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8aa65b90\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref>(<var>functionObject</var>, <var>argumentsList</var>).</li><li>Let <var>G</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>functionObject</var>, <emu-val>\"%GeneratorFunction.prototype.prototype%\"</emu-val>, &#171; [[GeneratorState]], [[GeneratorContext]], [[GeneratorBrand]] &#187;).</li><li>Set <var>G</var>.[[GeneratorBrand]] to <emu-const>empty</emu-const>.</li><li>Perform <emu-xref aoid=\"GeneratorStart\"><a href=\"#sec-generatorstart\">GeneratorStart</a></emu-xref>(<var>G</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>G</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-%arrayiteratorprototype%-object": {"num": "22.1.5.2", "title": "#sec-%arrayiteratorprototype%-object The %ArrayIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%-object\">#sec-%arrayiteratorprototype%-object</span> The %ArrayIteratorPrototype% Object</h1>\n        <p>The <dfn>%ArrayIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Array Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%arrayiteratorprototype%.next\"><h1><span class=\"secnum\">22.1.5.2.1</span>#sec-%arrayiteratorprototype%.next %ArrayIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%arrayiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">22.1.5.2.2</span>#sec-%arrayiteratorprototype%-@@tostringtag %ArrayIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n    "}, "sec-asyncgeneratorvalidate": {"num": "26.5.3.3", "title": "#sec-asyncgeneratorvalidate AsyncGeneratorValidate ( generator, generatorBrand )", "html": "<emu-clause id=\"sec-asyncgeneratorvalidate\" aoid=\"AsyncGeneratorValidate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorvalidate\">#sec-asyncgeneratorvalidate</span> AsyncGeneratorValidate ( <var>generator</var>, <var>generatorBrand</var> )</h1>\n        <p>The abstract operation AsyncGeneratorValidate takes arguments <var>generator</var> and <var>generatorBrand</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>generator</var>, [[AsyncGeneratorContext]]).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>generator</var>, [[AsyncGeneratorState]]).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>generator</var>, [[AsyncGeneratorQueue]]).</li><li>If <var>generator</var>.[[GeneratorBrand]] is not the same value as <var>generatorBrand</var>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string.prototype-@@iterator": {"num": "21.1.3.33", "title": "#sec-string.prototype-@@iterator String.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-string.prototype-@@iterator\" oldids=\"sec-createstringiterator,sec-properties-of-string-iterator-instances,table-46,table-internal-slots-of-string-iterator-instances\"><span id=\"table-internal-slots-of-string-iterator-instances\"></span><span id=\"table-46\"></span><span id=\"sec-properties-of-string-iterator-instances\"></span><span id=\"sec-createstringiterator\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype-@@iterator\">#sec-string.prototype-@@iterator</span> String.prototype [ @@iterator ] ( )</h1>\n        <p>When the <code>@@iterator</code> method is called it returns an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) that iterates over the code points of a String value, returning each code point as a String value. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>s</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>s</var> and performs the following steps when called:<ol><li>Let <var>position</var> be 0.</li><li>Let <var>len</var> be the length of <var>s</var>.</li><li>Repeat, while <var>position</var> &lt; <var>len</var>,<ol><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>s</var>, <var>position</var>).</li><li>Let <var>nextIndex</var> be <var>position</var> + <var>cp</var>.[[CodeUnitCount]].</li><li>Let <var>resultString</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>s</var> from <var>position</var> to <var>nextIndex</var>.</li><li>Set <var>position</var> to <var>nextIndex</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>resultString</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%StringIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%stringiteratorprototype%-object\"><a href=\"#sec-%stringiteratorprototype%-object\">%StringIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.iterator]\"</emu-val>.</p>\n      </emu-clause>\n    "}, "sec-asyncgeneratorresumenext": {"num": "26.5.3.6", "title": "#sec-asyncgeneratorresumenext AsyncGeneratorResumeNext ( generator )", "html": "<emu-clause id=\"sec-asyncgeneratorresumenext\" aoid=\"AsyncGeneratorResumeNext\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</span> AsyncGeneratorResumeNext ( <var>generator</var> )</h1>\n        <p>The abstract operation AsyncGeneratorResumeNext takes argument <var>generator</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>state</var> be <var>generator</var>.[[AsyncGeneratorState]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is not <emu-const>executing</emu-const>.</li><li>If <var>state</var> is <emu-const>awaiting-return</emu-const>, return <emu-val>undefined</emu-val>.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li>If <var>queue</var> is an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, return <emu-val>undefined</emu-val>.</li><li>Let <var>next</var> be the value of the first element of <var>queue</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>next</var> is an AsyncGeneratorRequest record.</li><li>Let <var>completion</var> be <var>next</var>.[[Completion]].</li><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>completion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>awaiting-return</emu-const>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>completion</var>.[[Value]]).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-fulfilled\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-fulfilled\">AsyncGeneratorResumeNext Return Processor Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onFulfilled</var>.[[Generator]] to <var>generator</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-rejected\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-rejected\">AsyncGeneratorResumeNext Return Processor Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onRejected</var>.[[Generator]] to <var>generator</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>completion</var>.[[Value]]).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li></ol></li></ol></li><li>Else if <var>state</var> is <emu-const>completed</emu-const>, return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[AsyncGeneratorContext]].</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>callerContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>completion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>callerContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-fulfilled\">\n          <h1><span class=\"secnum\">26.5.3.6.1</span> AsyncGeneratorResumeNext Return Processor Fulfilled Functions</h1>\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function has a [[Generator]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>F</var>.[[Generator]], <var>value</var>, <emu-val>true</emu-val>).</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-rejected\">\n          <h1><span class=\"secnum\">26.5.3.6.2</span> AsyncGeneratorResumeNext Return Processor Rejected Functions</h1>\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function has a [[Generator]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>F</var>.[[Generator]], <var>reason</var>).</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratoryield": {"num": "26.5.3.8", "title": "#sec-asyncgeneratoryield AsyncGeneratorYield ( value )", "html": "<emu-clause id=\"sec-asyncgeneratoryield\" aoid=\"AsyncGeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratoryield\">#sec-asyncgeneratoryield</span> AsyncGeneratorYield ( <var>value</var> )</h1>\n        <p>The abstract operation AsyncGeneratorYield takes argument <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>async</emu-const>.</li><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>If <var>resumptionValue</var>.[[Type]] is not <emu-const>return</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>resumptionValue</var>).</li><li>Let <var>awaited</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>resumptionValue</var>.[[Value]]).</li><li>If <var>awaited</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>awaited</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>awaited</var>.[[Type]] is <emu-const>normal</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>awaited</var>.[[Value]], [[Target]]: <emu-const>empty</emu-const> }.</li><li>NOTE: When one of the above steps returns, it returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> production that originally called this abstract operation.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>value</var>, <emu-val>false</emu-val>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createarrayiterator": {"num": "22.1.5.1", "title": "#sec-createarrayiterator CreateArrayIterator ( array, kind )", "html": "<emu-clause id=\"sec-createarrayiterator\" aoid=\"CreateArrayIterator\" oldids=\"sec-properties-of-array-iterator-instances,table-48,table-internal-slots-of-array-iterator-instances\"><span id=\"table-internal-slots-of-array-iterator-instances\"></span><span id=\"table-48\"></span><span id=\"sec-properties-of-array-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createarrayiterator\">#sec-createarrayiterator</span> CreateArrayIterator ( <var>array</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateArrayIterator takes arguments <var>array</var> and <var>kind</var>. This operation is used to create iterator objects for Array methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>array</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>.</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>kind</var> and <var>array</var> and performs the following steps when called:<ol><li>Let <var>index</var> be 0.</li><li>Repeat,<ol><li>If <var>array</var> has a [[TypedArrayName]] internal slot, then<ol><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>array</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>array</var>.[[ArrayLength]].</li></ol></li><li>Else,<ol><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>array</var>).</li></ol></li><li>If <var>index</var> &#8805; <var>len</var>, return <emu-val>undefined</emu-val>.</li><li>If <var>kind</var> is <emu-const>key</emu-const>, perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)).</li><li>Else,<ol><li>Let <var>elementKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)).</li><li>Let <var>elementValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>array</var>, <var>elementKey</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>elementValue</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(! <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>), <var>elementValue</var> &#187;)).</li></ol></li></ol></li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%ArrayIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%arrayiteratorprototype%-object\"><a href=\"#sec-%arrayiteratorprototype%-object\">%ArrayIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgenerator-definitions-evaluatebody": {"num": "14.5.10", "title": "#sec-asyncgenerator-definitions-evaluatebody Runtime Semantics: EvaluateBody", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluatebody\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluatebody\">#sec-asyncgenerator-definitions-evaluatebody</span> Runtime Semantics: EvaluateBody</h1>\n      <p>With parameters <var>functionObject</var> and <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>argumentsList</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8aa65b90\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref>(<var>functionObject</var>, <var>argumentsList</var>).</li><li>Let <var>generator</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>functionObject</var>, <emu-val>\"%AsyncGeneratorFunction.prototype.prototype%\"</emu-val>, &#171; [[AsyncGeneratorState]], [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]], [[GeneratorBrand]] &#187;).</li><li>Set <var>generator</var>.[[GeneratorBrand]] to <emu-const>empty</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorStart\"><a href=\"#sec-asyncgeneratorstart\">AsyncGeneratorStart</a></emu-xref>(<var>generator</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>generator</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-prototype-throw": {"num": "26.5.1.4", "title": "#sec-asyncgenerator-prototype-throw AsyncGenerator.prototype.throw ( exception )", "html": "<emu-clause id=\"sec-asyncgenerator-prototype-throw\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-prototype-throw\">#sec-asyncgenerator-prototype-throw</span> AsyncGenerator.prototype.throw ( <var>exception</var> )</h1>\n        <emu-alg><ol><li>Let <var>generator</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>completion</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>exception</var>).</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorEnqueue\"><a href=\"#sec-asyncgeneratorenqueue\">AsyncGeneratorEnqueue</a></emu-xref>(<var>generator</var>, <var>completion</var>, <emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorenqueue": {"num": "26.5.3.7", "title": "#sec-asyncgeneratorenqueue AsyncGeneratorEnqueue ( generator, completion, generatorBrand )", "html": "<emu-clause id=\"sec-asyncgeneratorenqueue\" aoid=\"AsyncGeneratorEnqueue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorenqueue\">#sec-asyncgeneratorenqueue</span> AsyncGeneratorEnqueue ( <var>generator</var>, <var>completion</var>, <var>generatorBrand</var> )</h1>\n        <p>The abstract operation AsyncGeneratorEnqueue takes arguments <var>generator</var>, <var>completion</var> (a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>), and <var>generatorBrand</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>check</var> be <emu-xref aoid=\"AsyncGeneratorValidate\"><a href=\"#sec-asyncgeneratorvalidate\">AsyncGeneratorValidate</a></emu-xref>(<var>generator</var>, <var>generatorBrand</var>).</li><li>If <var>check</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>badGeneratorError</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>badGeneratorError</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li>Let <var>request</var> be AsyncGeneratorRequest { [[Completion]]: <var>completion</var>, [[Capability]]: <var>promiseCapability</var> }.</li><li>Append <var>request</var> to the end of <var>queue</var>.</li><li>Let <var>state</var> be <var>generator</var>.[[AsyncGeneratorState]].</li><li>If <var>state</var> is not <emu-const>executing</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref>(<var>generator</var>).</li></ol></li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorresume": {"num": "26.4.3.3", "title": "#sec-generatorresume GeneratorResume ( generator, value, generatorBrand )", "html": "<emu-clause id=\"sec-generatorresume\" aoid=\"GeneratorResume\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresume\">#sec-generatorresume</span> GeneratorResume ( <var>generator</var>, <var>value</var>, <var>generatorBrand</var> )</h1>\n        <p>The abstract operation GeneratorResume takes arguments <var>generator</var>, <var>value</var>, and <var>generatorBrand</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>, <var>generatorBrand</var>).</li><li>If <var>state</var> is <emu-const>completed</emu-const>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%mapiteratorprototype%.next": {"num": "23.1.5.2.1", "title": "#sec-%mapiteratorprototype%.next %MapIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%mapiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%.next\">#sec-%mapiteratorprototype%.next</span> %MapIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<emu-val>this</emu-val> value, <emu-const>empty</emu-const>, <emu-val>\"%MapIteratorPrototype%\"</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createlistiteratorRecord": {"num": "7.4.9", "title": "#sec-createlistiteratorRecord CreateListIteratorRecord ( list )", "html": "<emu-clause id=\"sec-createlistiteratorRecord\" oldids=\"sec-createlistiterator,sec-listiteratornext-functions,sec-listiterator-next\" aoid=\"CreateListIteratorRecord\"><span id=\"sec-listiterator-next\"></span><span id=\"sec-listiteratornext-functions\"></span><span id=\"sec-createlistiterator\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createlistiteratorRecord\">#sec-createlistiteratorRecord</span> CreateListIteratorRecord ( <var>list</var> )</h1>\n      <p>The abstract operation CreateListIteratorRecord takes argument <var>list</var>. It creates an Iterator (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) object record whose next method returns the successive elements of <var>list</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>list</var> and performs the following steps when called:<ol><li>For each element <var>E</var> of <var>list</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>E</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>iterator</var> be !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-const>empty</emu-const>, <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>).</li><li>Return <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: %GeneratorFunction.prototype.prototype.next%, [[Done]]: <emu-val>false</emu-val> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The list iterator object is never directly accessible to ECMAScript code.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-%setiteratorprototype%-object": {"num": "23.2.5.2", "title": "#sec-%setiteratorprototype%-object The %SetIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%setiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%-object\">#sec-%setiteratorprototype%-object</span> The %SetIteratorPrototype% Object</h1>\n        <p>The <dfn>%SetIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Set Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%setiteratorprototype%.next\"><h1><span class=\"secnum\">23.2.5.2.1</span>#sec-%setiteratorprototype%.next %SetIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%setiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">23.2.5.2.2</span>#sec-%setiteratorprototype%-@@tostringtag %SetIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n    "}, "sec-generator.prototype.next": {"num": "26.4.1.2", "title": "#sec-generator.prototype.next Generator.prototype.next ( value )", "html": "<emu-clause id=\"sec-generator.prototype.next\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.next\">#sec-generator.prototype.next</span> Generator.prototype.next ( <var>value</var> )</h1>\n        <p>The <code>next</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<var>g</var>, <var>value</var>, <emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-asyncgenerator-intances": {"num": "26.5.2", "title": "#sec-properties-of-asyncgenerator-intances Properties of AsyncGenerator Instances", "html": "<emu-clause id=\"sec-properties-of-asyncgenerator-intances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-asyncgenerator-intances\">#sec-properties-of-asyncgenerator-intances</span> Properties of AsyncGenerator Instances</h1>\n      <p>AsyncGenerator instances are initially created with the internal slots described below:</p>\n      <emu-table id=\"table-internal-slots-of-asyncgenerator-instances\" caption=\"Internal Slots of AsyncGenerator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-asyncgenerator-instances\">#table-internal-slots-of-asyncgenerator-instances</span>: Internal Slots of AsyncGenerator Instances</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>Internal Slot</th>\n            <th>Description</th>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorState]]</td>\n            <td>The current execution state of the async generator. The possible values are: <emu-val>undefined</emu-val>, <emu-const>suspendedStart</emu-const>, <emu-const>suspendedYield</emu-const>, <emu-const>executing</emu-const>, <emu-const>awaiting-return</emu-const>, and <emu-const>completed</emu-const>.</td>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorContext]]</td>\n            <td>The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is used when executing the code of this async generator.</td>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorQueue]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of AsyncGeneratorRequest records which represent requests to resume the async generator.</td>\n          </tr>\n          <tr>\n            <td>[[GeneratorBrand]]</td>\n            <td>A brand used to distinguish different kinds of async generators. The [[GeneratorBrand]] of async generators declared by ECMAScript source text is always <emu-const>empty</emu-const>.</td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-abstract-operations": {"num": "26.5.3", "title": "#sec-asyncgenerator-abstract-operations AsyncGenerator Abstract Operations", "html": "<emu-clause id=\"sec-asyncgenerator-abstract-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-abstract-operations\">#sec-asyncgenerator-abstract-operations</span> AsyncGenerator Abstract Operations</h1>\n      <div id=\"excluded-sec-asyncgeneratorrequest-records\"><h1><span class=\"secnum\">26.5.3.1</span>#sec-asyncgeneratorrequest-records AsyncGeneratorRequest Records</h1>...</div><div id=\"excluded-sec-asyncgeneratorstart\"><h1><span class=\"secnum\">26.5.3.2</span>#sec-asyncgeneratorstart AsyncGeneratorStart ( generator, generatorBody )</h1>...</div><div id=\"excluded-sec-asyncgeneratorvalidate\"><h1><span class=\"secnum\">26.5.3.3</span>#sec-asyncgeneratorvalidate AsyncGeneratorValidate ( generator, generatorBrand )</h1>...</div><div id=\"excluded-sec-asyncgeneratorresolve\"><h1><span class=\"secnum\">26.5.3.4</span>#sec-asyncgeneratorresolve AsyncGeneratorResolve ( generator, value, done )</h1>...</div><div id=\"excluded-sec-asyncgeneratorreject\"><h1><span class=\"secnum\">26.5.3.5</span>#sec-asyncgeneratorreject AsyncGeneratorReject ( generator, exception )</h1>...</div><div id=\"excluded-sec-asyncgeneratorresumenext\"><h1><span class=\"secnum\">26.5.3.6</span>#sec-asyncgeneratorresumenext AsyncGeneratorResumeNext ( generator )</h1>...</div><div id=\"excluded-sec-asyncgeneratorenqueue\"><h1><span class=\"secnum\">26.5.3.7</span>#sec-asyncgeneratorenqueue AsyncGeneratorEnqueue ( generator, completion, generatorBrand )</h1>...</div><div id=\"excluded-sec-asyncgeneratoryield\"><h1><span class=\"secnum\">26.5.3.8</span>#sec-asyncgeneratoryield AsyncGeneratorYield ( value )</h1>...</div><div id=\"excluded-sec-createasynciteratorfromclosure\"><h1><span class=\"secnum\">26.5.3.9</span>#sec-createasynciteratorfromclosure CreateAsyncIteratorFromClosure ( closure, generatorBrand, generatorPrototype )</h1>...</div></emu-clause>\n  "}, "sec-generator.prototype.throw": {"num": "26.4.1.4", "title": "#sec-generator.prototype.throw Generator.prototype.throw ( exception )", "html": "<emu-clause id=\"sec-generator.prototype.throw\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.throw\">#sec-generator.prototype.throw</span> Generator.prototype.throw ( <var>exception</var> )</h1>\n        <p>The <code>throw</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>C</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>exception</var>).</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResumeAbrupt\"><a href=\"#sec-generatorresumeabrupt\">GeneratorResumeAbrupt</a></emu-xref>(<var>g</var>, <var>C</var>, <emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-async-function-constructor-properties": {"num": "26.7.2", "title": "#sec-async-function-constructor-properties Properties of the AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor-properties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor-properties\">#sec-async-function-constructor-properties</span> Properties of the AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is a standard built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that inherits from the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-function-constructor\"><a href=\"#sec-function-constructor\">%Function%</a></emu-xref>.</li>\n        <li>has a <emu-val>\"name\"</emu-val> property whose value is <emu-val>\"AsyncFunction\"</emu-val>.</li>\n        <li>has the following properties:</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-length\"><h1><span class=\"secnum\">26.7.2.1</span>#sec-async-function-constructor-length AsyncFunction.length</h1>...</div><div id=\"excluded-sec-async-function-constructor-prototype\"><h1><span class=\"secnum\">26.7.2.2</span>#sec-async-function-constructor-prototype AsyncFunction.prototype</h1>...</div></emu-clause>\n\n    "}, "sec-generator-abstract-operations": {"num": "26.4.3", "title": "#sec-generator-abstract-operations Generator Abstract Operations", "html": "<emu-clause id=\"sec-generator-abstract-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-abstract-operations\">#sec-generator-abstract-operations</span> Generator Abstract Operations</h1>\n\n      <div id=\"excluded-sec-generatorstart\"><h1><span class=\"secnum\">26.4.3.1</span>#sec-generatorstart GeneratorStart ( generator, generatorBody )</h1>...</div><div id=\"excluded-sec-generatorvalidate\"><h1><span class=\"secnum\">26.4.3.2</span>#sec-generatorvalidate GeneratorValidate ( generator, generatorBrand )</h1>...</div><div id=\"excluded-sec-generatorresume\"><h1><span class=\"secnum\">26.4.3.3</span>#sec-generatorresume GeneratorResume ( generator, value, generatorBrand )</h1>...</div><div id=\"excluded-sec-generatorresumeabrupt\"><h1><span class=\"secnum\">26.4.3.4</span>#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion, generatorBrand )</h1>...</div><div id=\"excluded-sec-getgeneratorkind\"><h1><span class=\"secnum\">26.4.3.5</span>#sec-getgeneratorkind GetGeneratorKind ( )</h1>...</div><div id=\"excluded-sec-generatoryield\"><h1><span class=\"secnum\">26.4.3.6</span>#sec-generatoryield GeneratorYield ( iterNextObj )</h1>...</div><div id=\"excluded-sec-yield\"><h1><span class=\"secnum\">26.4.3.7</span>#sec-yield Yield ( value )</h1>...</div><div id=\"excluded-sec-createiteratorfromclosure\"><h1><span class=\"secnum\">26.4.3.8</span>#sec-createiteratorfromclosure CreateIteratorFromClosure ( closure, generatorBrand, generatorPrototype )</h1>...</div></emu-clause>\n  "}, "sec-map-iterator-objects": {"num": "23.1.5", "title": "#sec-map-iterator-objects Map Iterator Objects", "html": "<emu-clause id=\"sec-map-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map-iterator-objects\">#sec-map-iterator-objects</span> Map Iterator Objects</h1>\n      <p>A Map Iterator is an object, that represents a specific iteration over some specific Map instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Map Iterator objects. Instead, map iterator objects are created by calling certain methods of Map instance objects.</p>\n\n      <div id=\"excluded-sec-createmapiterator\"><h1><span class=\"secnum\">23.1.5.1</span>#sec-createmapiterator CreateMapIterator ( map, kind )</h1>...</div><div id=\"excluded-sec-%mapiteratorprototype%-object\"><h1><span class=\"secnum\">23.1.5.2</span>#sec-%mapiteratorprototype%-object The %MapIteratorPrototype% Object</h1>...</div></emu-clause>\n  "}, "sec-createregexpstringiterator": {"num": "21.2.7.1", "title": "#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )", "html": "<emu-clause id=\"sec-createregexpstringiterator\" aoid=\"CreateRegExpStringIterator\" oldids=\"sec-properties-of-regexp-string-iterator-instances,table-regexp-string-iterator-instance-slots\"><span id=\"table-regexp-string-iterator-instance-slots\"></span><span id=\"sec-properties-of-regexp-string-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createregexpstringiterator\">#sec-createregexpstringiterator</span> CreateRegExpStringIterator ( <var>R</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var> )</h1>\n        <p>The abstract operation CreateRegExpStringIterator takes arguments <var>R</var>, <var>S</var>, <var>global</var>, and <var>fullUnicode</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>global</var>) is Boolean.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>fullUnicode</var>) is Boolean.</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>R</var>, <var>S</var>, <var>global</var>, and <var>fullUnicode</var> and performs the following steps when called:<ol><li>Repeat,<ol><li>Let <var>match</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li><li>If <var>match</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>match</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>match</var>, <emu-val>\"0\"</emu-val>)).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>nextIndex</var> be !&#160;<emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>), <emu-val>true</emu-val>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>match</var>).</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%RegExpStringIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%regexpstringiteratorprototype%-object\"><a href=\"#sec-%regexpstringiteratorprototype%-object\">%RegExpStringIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string-iterator-objects": {"num": "21.1.5", "title": "#sec-string-iterator-objects String Iterator Objects", "html": "<emu-clause id=\"sec-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-iterator-objects\">#sec-string-iterator-objects</span> String Iterator Objects</h1>\n      <p>A String Iterator is an object, that represents a specific iteration over some specific String instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for String Iterator objects. Instead, String iterator objects are created by calling certain methods of String instance objects.</p>\n\n      <div id=\"excluded-sec-%stringiteratorprototype%-object\"><h1><span class=\"secnum\">21.1.5.1</span>#sec-%stringiteratorprototype%-object The %StringIteratorPrototype% Object</h1>...</div></emu-clause>\n  "}, "sec-createiteratorfromclosure": {"num": "26.4.3.8", "title": "#sec-createiteratorfromclosure CreateIteratorFromClosure ( closure, generatorBrand, generatorPrototype )", "html": "<emu-clause id=\"sec-createiteratorfromclosure\" aoid=\"CreateIteratorFromClosure\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createiteratorfromclosure\">#sec-createiteratorfromclosure</span> CreateIteratorFromClosure ( <var>closure</var>, <var>generatorBrand</var>, <var>generatorPrototype</var> )</h1>\n        <p>The abstract operation CreateIteratorFromClosure takes arguments <var>closure</var> (an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters), <var>generatorBrand</var>, and <var>generatorPrototype</var> (an Object). It performs the following steps when called:</p>\n        <emu-alg><ol><li>NOTE: <var>closure</var> can contain uses of the <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref> shorthand to yield an IteratorResult object.</li><li>Let <var>internalSlotsList</var> be &#171; [[GeneratorState]], [[GeneratorContext]], [[GeneratorBrand]] &#187;.</li><li>Let <var>generator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>generatorPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>generator</var>.[[GeneratorBrand]] to <var>generatorBrand</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-val>undefined</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"GeneratorStart\"><a href=\"#sec-generatorstart\">GeneratorStart</a></emu-xref>(<var>generator</var>, <var>closure</var>).</li><li>Return <var>generator</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-function-constructor": {"num": "26.7.1", "title": "#sec-async-function-constructor The AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor\">#sec-async-function-constructor</span> The AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is <dfn>%AsyncFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new AsyncFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncFunction(&#8230;)</code> is equivalent to the object creation expression <code>new AsyncFunction(&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncFunction behaviour must include a <code>super</code> call to the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize a subclass instance with the internal slots necessary for built-in async function behaviour. All ECMAScript syntactic forms for defining async function objects create direct instances of AsyncFunction. There is no syntactic means to create instances of AsyncFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-arguments\"><h1><span class=\"secnum\">26.7.1.1</span>#sec-async-function-constructor-arguments AsyncFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n\n    "}, "sec-%regexpstringiteratorprototype%-object": {"num": "21.2.7.2", "title": "#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-object\">#sec-%regexpstringiteratorprototype%-object</span> The %RegExpStringIteratorPrototype% Object</h1>\n        <p>The <dfn>%RegExpStringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all RegExp String Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%regexpstringiteratorprototype%.next\"><h1><span class=\"secnum\">21.2.7.2.1</span>#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%regexpstringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.2.7.2.2</span>#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n    "}, "sec-generator.prototype.return": {"num": "26.4.1.3", "title": "#sec-generator.prototype.return Generator.prototype.return ( value )", "html": "<emu-clause id=\"sec-generator.prototype.return\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.return\">#sec-generator.prototype.return</span> Generator.prototype.return ( <var>value</var> )</h1>\n        <p>The <code>return</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>C</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResumeAbrupt\"><a href=\"#sec-generatorresumeabrupt\">GeneratorResumeAbrupt</a></emu-xref>(<var>g</var>, <var>C</var>, <emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set-iterator-objects": {"num": "23.2.5", "title": "#sec-set-iterator-objects Set Iterator Objects", "html": "<emu-clause id=\"sec-set-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set-iterator-objects\">#sec-set-iterator-objects</span> Set Iterator Objects</h1>\n      <p>A Set Iterator is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>, with the structure defined below, that represents a specific iteration over some specific Set instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Set Iterator objects. Instead, set iterator objects are created by calling certain methods of Set instance objects.</p>\n\n      <div id=\"excluded-sec-createsetiterator\"><h1><span class=\"secnum\">23.2.5.1</span>#sec-createsetiterator CreateSetIterator ( set, kind )</h1>...</div><div id=\"excluded-sec-%setiteratorprototype%-object\"><h1><span class=\"secnum\">23.2.5.2</span>#sec-%setiteratorprototype%-object The %SetIteratorPrototype% Object</h1>...</div></emu-clause>\n  "}, "sec-%stringiteratorprototype%.next": {"num": "21.1.5.1.1", "title": "#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%stringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%.next\">#sec-%stringiteratorprototype%.next</span> %StringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<emu-val>this</emu-val> value, <emu-const>empty</emu-const>, <emu-val>\"%StringIteratorPrototype%\"</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%arrayiteratorprototype%.next": {"num": "22.1.5.2.1", "title": "#sec-%arrayiteratorprototype%.next %ArrayIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%.next\">#sec-%arrayiteratorprototype%.next</span> %ArrayIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<emu-val>this</emu-val> value, <emu-const>empty</emu-const>, <emu-val>\"%ArrayIteratorPrototype%\"</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d271960\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7dbc99b6\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e741ede8\">\n        <emu-t>yield</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"47a33813\">\n        <emu-t>yield</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"throw\"</emu-val>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).</li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-createasynciteratorfromclosure": {"num": "26.5.3.9", "title": "#sec-createasynciteratorfromclosure CreateAsyncIteratorFromClosure ( closure, generatorBrand, generatorPrototype )", "html": "<emu-clause id=\"sec-createasynciteratorfromclosure\" aoid=\"CreateAsyncIteratorFromClosure\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createasynciteratorfromclosure\">#sec-createasynciteratorfromclosure</span> CreateAsyncIteratorFromClosure ( <var>closure</var>, <var>generatorBrand</var>, <var>generatorPrototype</var> )</h1>\n        <p>The abstract operation CreateAsyncIteratorFromClosure takes arguments <var>closure</var> (an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters), <var>generatorBrand</var>, and <var>generatorPrototype</var> (an Object). It performs the following steps when called:</p>\n        <emu-alg><ol><li>NOTE: <var>closure</var> can contain uses of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> shorthand and uses of the <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref> shorthand to yield an IteratorResult object.</li><li>Let <var>internalSlotsList</var> be &#171; [[AsyncGeneratorState]], [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]], [[GeneratorBrand]] &#187;.</li><li>Let <var>generator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>generatorPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>generator</var>.[[GeneratorBrand]] to <var>generatorBrand</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-val>undefined</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"AsyncGeneratorStart\"><a href=\"#sec-asyncgeneratorstart\">AsyncGeneratorStart</a></emu-xref>(<var>generator</var>, <var>closure</var>).</li><li>Return <var>generator</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-generatorstart": {"num": "26.4.3.1", "title": "#sec-generatorstart GeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-generatorstart\" aoid=\"GeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorstart\">#sec-generatorstart</span> GeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation GeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>generator</var>.[[GeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>If <var>generatorBody</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, then<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generatorBody</var> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters.</li><li>Let <var>result</var> be <var>generatorBody</var>().</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[GeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorresolve": {"num": "26.5.3.4", "title": "#sec-asyncgeneratorresolve AsyncGeneratorResolve ( generator, value, done )", "html": "<emu-clause id=\"sec-asyncgeneratorresolve\" aoid=\"AsyncGeneratorResolve\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorresolve\">#sec-asyncgeneratorresolve</span> AsyncGeneratorResolve ( <var>generator</var>, <var>value</var>, <var>done</var> )</h1>\n        <p>The abstract operation AsyncGeneratorResolve takes arguments <var>generator</var>, <var>value</var>, and <var>done</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>queue</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>next</var> be the first element of <var>queue</var>.</li><li>Remove the first element from <var>queue</var>.</li><li>Let <var>promiseCapability</var> be <var>next</var>.[[Capability]].</li><li>Let <var>iteratorResult</var> be !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <var>done</var>).</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>iteratorResult</var> &#187;).</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref>(<var>generator</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatoryield": {"num": "26.4.3.6", "title": "#sec-generatoryield GeneratorYield ( iterNextObj )", "html": "<emu-clause id=\"sec-generatoryield\" aoid=\"GeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatoryield\">#sec-generatoryield</span> GeneratorYield ( <var>iterNextObj</var> )</h1>\n        <p>The abstract operation GeneratorYield takes argument <var>iterNextObj</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterNextObj</var> is an Object that implements the <i>IteratorResult</i> interface.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>sync</emu-const>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>Return <var>resumptionValue</var>.</li><li>NOTE: This returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> that originally called this abstract operation.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>iterNextObj</var>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%regexpstringiteratorprototype%.next": {"num": "21.2.7.2.1", "title": "#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%.next\">#sec-%regexpstringiteratorprototype%.next</span> %RegExpStringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<emu-val>this</emu-val> value, <emu-const>empty</emu-const>, <emu-val>\"%RegExpStringIteratorPrototype%\"</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%stringiteratorprototype%-object": {"num": "21.1.5.1", "title": "#sec-%stringiteratorprototype%-object The %StringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%stringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%-object\">#sec-%stringiteratorprototype%-object</span> The %StringIteratorPrototype% Object</h1>\n        <p>The <dfn>%StringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all String Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%stringiteratorprototype%.next\"><h1><span class=\"secnum\">21.1.5.1.1</span>#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%stringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.1.5.1.2</span>#sec-%stringiteratorprototype%-@@tostringtag %StringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n    "}, "sec-generatorresumeabrupt": {"num": "26.4.3.4", "title": "#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion, generatorBrand )", "html": "<emu-clause id=\"sec-generatorresumeabrupt\" aoid=\"GeneratorResumeAbrupt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresumeabrupt\">#sec-generatorresumeabrupt</span> GeneratorResumeAbrupt ( <var>generator</var>, <var>abruptCompletion</var>, <var>generatorBrand</var> )</h1>\n        <p>The abstract operation GeneratorResumeAbrupt takes arguments <var>generator</var>, <var>abruptCompletion</var> (a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> whose [[Type]] is <emu-const>return</emu-const> or <emu-const>throw</emu-const>), and <var>generatorBrand</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>, <var>generatorBrand</var>).</li><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>abruptCompletion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>abruptCompletion</var>.[[Value]], <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>abruptCompletion</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>abruptCompletion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-generator-instances": {"num": "26.4.2", "title": "#sec-properties-of-generator-instances Properties of Generator Instances", "html": "<emu-clause id=\"sec-properties-of-generator-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-generator-instances\">#sec-properties-of-generator-instances</span> Properties of Generator Instances</h1>\n      <p>Generator instances are initially created with the internal slots described in <emu-xref href=\"#table-internal-slots-of-generator-instances\"><a href=\"#table-internal-slots-of-generator-instances\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-generator-instances\">#table-internal-slots-of-generator-instances</a></emu-xref>.</p>\n      <emu-table id=\"table-internal-slots-of-generator-instances\" caption=\"Internal Slots of Generator Instances\" oldids=\"table-56\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-generator-instances\">#table-internal-slots-of-generator-instances</span>: Internal Slots of Generator Instances</figcaption><span id=\"table-56\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Internal Slot\n            </th>\n            <th>\n              Description\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorState]]\n            </td>\n            <td>\n              The current execution state of the generator. The possible values are: <emu-val>undefined</emu-val>, <emu-const>suspendedStart</emu-const>, <emu-const>suspendedYield</emu-const>, <emu-const>executing</emu-const>, and <emu-const>completed</emu-const>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorContext]]\n            </td>\n            <td>\n              The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is used when executing the code of this generator.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorBrand]]\n            </td>\n            <td>\n              A brand used to distinguish different kinds of generators. The [[GeneratorBrand]] of generators declared by ECMAScript source text is always <emu-const>empty</emu-const>.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-prototype-return": {"num": "26.5.1.3", "title": "#sec-asyncgenerator-prototype-return AsyncGenerator.prototype.return ( value )", "html": "<emu-clause id=\"sec-asyncgenerator-prototype-return\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-prototype-return\">#sec-asyncgenerator-prototype-return</span> AsyncGenerator.prototype.return ( <var>value</var> )</h1>\n        <emu-alg><ol><li>Let <var>generator</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>completion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorEnqueue\"><a href=\"#sec-asyncgeneratorenqueue\">AsyncGeneratorEnqueue</a></emu-xref>(<var>generator</var>, <var>completion</var>, <emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorstart": {"num": "26.5.3.2", "title": "#sec-asyncgeneratorstart AsyncGeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-asyncgeneratorstart\" aoid=\"AsyncGeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorstart\">#sec-asyncgeneratorstart</span> AsyncGeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation AsyncGeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var>.[[AsyncGeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>If <var>generatorBody</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, then<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generatorBody</var> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters.</li><li>Let <var>result</var> be <var>generatorBody</var>().</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>If <var>result</var> is a normal completion, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>If <var>result</var>.[[Type]] is not <emu-const>return</emu-const>, then<ol><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>resultValue</var>).</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[AsyncGeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Set <var>generator</var>.[[AsyncGeneratorQueue]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-yield": {"num": "26.4.3.7", "title": "#sec-yield Yield ( value )", "html": "<emu-clause id=\"sec-yield\" aoid=\"Yield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-yield\">#sec-yield</span> Yield ( <var>value</var> )</h1>\n        <p>The abstract operation Yield takes argument <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(! <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createsetiterator": {"num": "23.2.5.1", "title": "#sec-createsetiterator CreateSetIterator ( set, kind )", "html": "<emu-clause id=\"sec-createsetiterator\" aoid=\"CreateSetIterator\" oldids=\"sec-properties-of-set-iterator-instances,table-51,table-internal-slots-of-set-iterator-instances\"><span id=\"table-internal-slots-of-set-iterator-instances\"></span><span id=\"table-51\"></span><span id=\"sec-properties-of-set-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsetiterator\">#sec-createsetiterator</span> CreateSetIterator ( <var>set</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateSetIterator takes arguments <var>set</var> and <var>kind</var>. This operation is used to create iterator objects for Set methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const> or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>set</var>, [[SetData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>set</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>index</var> be 0.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>set</var>.[[SetData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key+value</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(! <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>e</var>).</li></ol></li><li>NOTE: the number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%SetIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexp-string-iterator-objects": {"num": "21.2.7", "title": "#sec-regexp-string-iterator-objects RegExp String Iterator Objects", "html": "<emu-clause id=\"sec-regexp-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-string-iterator-objects\">#sec-regexp-string-iterator-objects</span> RegExp String Iterator Objects</h1>\n      <p>A RegExp String Iterator is an object, that represents a specific iteration over some specific String instance object, matching against some specific RegExp instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for RegExp String Iterator objects. Instead, RegExp String Iterator objects are created by calling certain methods of RegExp instance objects.</p>\n\n      <div id=\"excluded-sec-createregexpstringiterator\"><h1><span class=\"secnum\">21.2.7.1</span>#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )</h1>...</div><div id=\"excluded-sec-%regexpstringiteratorprototype%-object\"><h1><span class=\"secnum\">21.2.7.2</span>#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object</h1>...</div></emu-clause>\n  "}, "sec-%mapiteratorprototype%-object": {"num": "23.1.5.2", "title": "#sec-%mapiteratorprototype%-object The %MapIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%mapiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%-object\">#sec-%mapiteratorprototype%-object</span> The %MapIteratorPrototype% Object</h1>\n        <p>The <dfn>%MapIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Map Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%mapiteratorprototype%.next\"><h1><span class=\"secnum\">23.1.5.2.1</span>#sec-%mapiteratorprototype%.next %MapIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%mapiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">23.1.5.2.2</span>#sec-%mapiteratorprototype%-@@tostringtag %MapIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n    "}}, "figData": {"table-internal-slots-of-generator-instances": "Table 70", "table-internal-slots-of-asyncgenerator-instances": "Table 71"}}}