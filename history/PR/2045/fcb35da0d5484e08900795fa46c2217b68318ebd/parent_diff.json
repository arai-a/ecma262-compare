{"from": {"secList": ["sec-%setiteratorprototype%.next", "sec-set-iterator-objects", "sec-generatorvalidate", "sec-%mapiteratorprototype%.next", "sec-atomics.islockfree", "sec-generator.prototype.return", "sec-properties-of-map-iterator-instances", "sec-generator-function-definitions-runtime-semantics-evaluatebody", "sec-async-function-constructor-properties", "sec-generatorstart", "sec-%regexpstringiteratorprototype%.next", "sec-%mapiteratorprototype%-object", "sec-string.prototype-@@iterator", "sec-properties-of-regexp-string-iterator-instances", "sec-%regexpstringiteratorprototype%-object", "sec-regexp-string-iterator-objects", "sec-async-function-constructor", "sec-updateempty", "sec-array-iterator-objects", "sec-createstringiterator", "sec-%arrayiteratorprototype%.next", "sec-string-iterator-objects", "sec-%stringiteratorprototype%-object", "sec-createbuiltinfunction", "sec-properties-of-generator-instances", "sec-%arrayiteratorprototype%-object", "sec-createregexpstringiterator", "sec-createarrayiterator", "sec-generator-abstract-operations", "sec-properties-of-string-iterator-instances", "sec-generator.prototype.throw", "sec-properties-of-array-iterator-instances", "sec-properties-of-set-iterator-instances", "sec-%stringiteratorprototype%.next", "sec-createsetiterator", "sec-generatorresume", "sec-generator.prototype.next", "sec-completion-record-specification-type", "sec-createmapiterator", "sec-built-in-function-objects", "sec-%setiteratorprototype%-object", "sec-generatorresumeabrupt", "sec-map-iterator-objects"], "secData": {"sec-%setiteratorprototype%.next": {"num": "23.2.5.2.1", "title": "#sec-%setiteratorprototype%.next %SetIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%setiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%.next\">#sec-%setiteratorprototype%.next</span> %SetIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a Set Iterator Instance (<emu-xref href=\"#sec-properties-of-set-iterator-instances\"><a href=\"#sec-properties-of-set-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-set-iterator-instances\">#sec-properties-of-set-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>s</var> be <var>O</var>.[[IteratedSet]].</li><li>Let <var>index</var> be <var>O</var>.[[SetNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[SetIterationKind]].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>s</var> has a [[SetData]] internal slot.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>s</var>.[[SetData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>NOTE: <var>numEntries</var> must be redetermined each time this method is evaluated.</li><li>Repeat, while <var>index</var> is less than <var>numEntries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Set <var>O</var>.[[SetNextIndex]] to <var>index</var>.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>itemKind</var> is <emu-const>key+value</emu-const>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;), <emu-val>false</emu-val>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>itemKind</var> is <emu-const>value</emu-const>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>e</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set <var>O</var>.[[IteratedSet]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-set-iterator-objects": {"num": "23.2.5", "title": "#sec-set-iterator-objects Set Iterator Objects", "html": "<emu-clause id=\"sec-set-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set-iterator-objects\">#sec-set-iterator-objects</span> Set Iterator Objects</h1>\n      <p>A Set Iterator is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>, with the structure defined below, that represents a specific iteration over some specific Set instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Set Iterator objects. Instead, set iterator objects are created by calling certain methods of Set instance objects.</p>\n\n      <div id=\"excluded-sec-createsetiterator\"><h1><span class=\"secnum\">23.2.5.1</span>#sec-createsetiterator CreateSetIterator ( set, kind )</h1>...</div><div id=\"excluded-sec-%setiteratorprototype%-object\"><h1><span class=\"secnum\">23.2.5.2</span>#sec-%setiteratorprototype%-object The %SetIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-set-iterator-instances\"><h1><span class=\"secnum\">23.2.5.3</span>#sec-properties-of-set-iterator-instances Properties of Set Iterator Instances</h1>...</div></emu-clause>\n  "}, "sec-generatorvalidate": {"num": "25.4.3.2", "title": "#sec-generatorvalidate GeneratorValidate ( generator )", "html": "<emu-clause id=\"sec-generatorvalidate\" aoid=\"GeneratorValidate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorvalidate\">#sec-generatorvalidate</span> GeneratorValidate ( <var>generator</var> )</h1>\n        <p>The abstract operation GeneratorValidate takes argument <var>generator</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>generator</var>, [[GeneratorState]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> also has a [[GeneratorContext]] internal slot.</li><li>Let <var>state</var> be <var>generator</var>.[[GeneratorState]].</li><li>If <var>state</var> is <emu-const>executing</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>state</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%mapiteratorprototype%.next": {"num": "23.1.5.2.1", "title": "#sec-%mapiteratorprototype%.next %MapIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%mapiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%.next\">#sec-%mapiteratorprototype%.next</span> %MapIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a Map Iterator Instance (<emu-xref href=\"#sec-properties-of-map-iterator-instances\"><a href=\"#sec-properties-of-map-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-map-iterator-instances\">#sec-properties-of-map-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>m</var> be <var>O</var>.[[IteratedMap]].</li><li>Let <var>index</var> be <var>O</var>.[[MapNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[MapIterationKind]].</li><li>If <var>m</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var> has a [[MapData]] internal slot.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>m</var>.[[MapData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>NOTE: <var>numEntries</var> must be redetermined each time this method is evaluated.</li><li>Repeat, while <var>index</var> is less than <var>numEntries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Set <var>O</var>.[[MapNextIndex]] to <var>index</var>.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>itemKind</var> is <emu-const>key</emu-const>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>itemKind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>itemKind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>result</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set <var>O</var>.[[IteratedMap]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-atomics.islockfree": {"num": "24.4.6", "title": "#sec-atomics.islockfree Atomics.isLockFree ( size )", "html": "<emu-clause id=\"sec-atomics.islockfree\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.islockfree\">#sec-atomics.islockfree</span> Atomics.isLockFree ( <var>size</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>size</var>).</li><li>Let <var>AR</var> be the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</li><li>If <var>n</var> equals 1, return <var>AR</var>.[[IsLockFree1]].</li><li>If <var>n</var> equals 2, return <var>AR</var>.[[IsLockFree2]].</li><li>If <var>n</var> equals 4, return <emu-val>true</emu-val>.</li><li>If <var>n</var> equals 8, return <var>AR</var>.[[IsLockFree8]].</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>Atomics.isLockFree</code>() is an optimization primitive. The intuition is that if the atomic step of an atomic primitive (<code>compareExchange</code>, <code>load</code>, <code>store</code>, <code>add</code>, <code>sub</code>, <code>and</code>, <code>or</code>, <code>xor</code>, or <code>exchange</code>) on a datum of size <var>n</var> bytes will be performed without the calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> acquiring a lock outside the <var>n</var> bytes comprising the datum, then <code>Atomics.isLockFree</code>(<var>n</var>) will return <emu-val>true</emu-val>. High-performance algorithms will use <code>Atomics.isLockFree</code> to determine whether to use locks or atomic operations in critical sections. If an atomic primitive is not lock-free then it is often more efficient for an algorithm to provide its own locking.</p>\n        <p><code>Atomics.isLockFree</code>(4) always returns <emu-val>true</emu-val> as that can be supported on all known relevant hardware. Being able to assume this will generally simplify programs.</p>\n        <p>Regardless of the value of <code>Atomics.isLockFree</code>, all atomic operations are guaranteed to be atomic. For example, they will never have a visible operation take place in the middle of the operation (e.g., \"tearing\").</p>\n      </div></emu-note>\n    </emu-clause>\n    "}, "sec-generator.prototype.return": {"num": "25.4.1.3", "title": "#sec-generator.prototype.return Generator.prototype.return ( value )", "html": "<emu-clause id=\"sec-generator.prototype.return\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.return\">#sec-generator.prototype.return</span> Generator.prototype.return ( <var>value</var> )</h1>\n        <p>The <code>return</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>C</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResumeAbrupt\"><a href=\"#sec-generatorresumeabrupt\">GeneratorResumeAbrupt</a></emu-xref>(<var>g</var>, <var>C</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-map-iterator-instances": {"num": "23.1.5.3", "title": "#sec-properties-of-map-iterator-instances Properties of Map Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-map-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-map-iterator-instances\">#sec-properties-of-map-iterator-instances</span> Properties of Map Iterator Instances</h1>\n        <p>Map Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref> intrinsic object. Map Iterator instances are initially created with the internal slots described in <emu-xref href=\"#table-50\"><a href=\"#table-50\" class=\"excluded-xref\" excluded-id=\"table-50\">#table-50</a></emu-xref>.</p>\n        <emu-table id=\"table-50\" caption=\"Internal Slots of Map Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-50\">#table-50</span>: Internal Slots of Map Iterator Instances</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedMap]]\n              </td>\n              <td>\n                The Map object that is being iterated.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[MapNextIndex]]\n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next [[MapData]] element to be examined by this iterator.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[MapIterationKind]]\n              </td>\n              <td>\n                A String value that identifies what is returned for each element of the iteration. The possible values are: <emu-const>key</emu-const>, <emu-const>value</emu-const>, <emu-const>key+value</emu-const>.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-generator-function-definitions-runtime-semantics-evaluatebody": {"num": "14.4.10", "title": "#sec-generator-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluatebody\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluatebody\">#sec-generator-function-definitions-runtime-semantics-evaluatebody</span> Runtime Semantics: EvaluateBody</h1>\n      <p>With parameters <var>functionObject</var> and <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>argumentsList</var>.</p>\n      <emu-see-also-para op=\"EvaluateBody\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8aa65b90\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref>(<var>functionObject</var>, <var>argumentsList</var>).</li><li>Let <var>G</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>functionObject</var>, <emu-val>\"%Generator.prototype%\"</emu-val>, &#171; [[GeneratorState]], [[GeneratorContext]] &#187;).</li><li>Perform <emu-xref aoid=\"GeneratorStart\"><a href=\"#sec-generatorstart\">GeneratorStart</a></emu-xref>(<var>G</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>G</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-constructor-properties": {"num": "25.7.2", "title": "#sec-async-function-constructor-properties Properties of the AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor-properties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor-properties\">#sec-async-function-constructor-properties</span> Properties of the AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is a standard built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that inherits from the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-function-constructor\"><a href=\"#sec-function-constructor\">%Function%</a></emu-xref>.</li>\n        <li>has a <emu-val>\"name\"</emu-val> property whose value is <emu-val>\"AsyncFunction\"</emu-val>.</li>\n        <li>has the following properties:</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-length\"><h1><span class=\"secnum\">25.7.2.1</span>#sec-async-function-constructor-length AsyncFunction.length</h1>...</div><div id=\"excluded-sec-async-function-constructor-prototype\"><h1><span class=\"secnum\">25.7.2.2</span>#sec-async-function-constructor-prototype AsyncFunction.prototype</h1>...</div></emu-clause>\n    "}, "sec-generatorstart": {"num": "25.4.3.1", "title": "#sec-generatorstart GeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-generatorstart\" aoid=\"GeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorstart\">#sec-generatorstart</span> GeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation GeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>generator</var>.[[GeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[GeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%regexpstringiteratorprototype%.next": {"num": "21.2.7.1.1", "title": "#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%.next\">#sec-%regexpstringiteratorprototype%.next</span> %RegExpStringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a RegExp String Iterator Object Instance (see <emu-xref href=\"#sec-properties-of-regexp-string-iterator-instances\"><a href=\"#sec-properties-of-regexp-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-regexp-string-iterator-instances\">#sec-properties-of-regexp-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>R</var> be <var>O</var>.[[IteratingRegExp]].</li><li>Let <var>S</var> be <var>O</var>.[[IteratedString]].</li><li>Let <var>global</var> be <var>O</var>.[[Global]].</li><li>Let <var>fullUnicode</var> be <var>O</var>.[[Unicode]].</li><li>Let <var>match</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li><li>If <var>match</var> is <emu-val>null</emu-val>, then<ol><li>Set <var>O</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>If <var>global</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>match</var>, <emu-val>\"0\"</emu-val>)).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>)).</li><li>Let <var>nextIndex</var> be !&#160;<emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <var>nextIndex</var>, <emu-val>true</emu-val>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>match</var>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Set <var>O</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>match</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%mapiteratorprototype%-object": {"num": "23.1.5.2", "title": "#sec-%mapiteratorprototype%-object The %MapIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%mapiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%-object\">#sec-%mapiteratorprototype%-object</span> The %MapIteratorPrototype% Object</h1>\n        <p>The <dfn>%MapIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Map Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%mapiteratorprototype%.next\"><h1><span class=\"secnum\">23.1.5.2.1</span>#sec-%mapiteratorprototype%.next %MapIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%mapiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">23.1.5.2.2</span>#sec-%mapiteratorprototype%-@@tostringtag %MapIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}, "sec-string.prototype-@@iterator": {"num": "21.1.3.33", "title": "#sec-string.prototype-@@iterator String.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-string.prototype-@@iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype-@@iterator\">#sec-string.prototype-@@iterator</span> String.prototype [ @@iterator ] ( )</h1>\n        <p>When the <code>@@iterator</code> method is called it returns an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) that iterates over the code points of a String value, returning each code point as a String value. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Return <emu-xref aoid=\"CreateStringIterator\"><a href=\"#sec-createstringiterator\">CreateStringIterator</a></emu-xref>(<var>S</var>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.iterator]\"</emu-val>.</p>\n      </emu-clause>\n    "}, "sec-properties-of-regexp-string-iterator-instances": {"num": "21.2.7.2", "title": "#sec-properties-of-regexp-string-iterator-instances Properties of RegExp String Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-regexp-string-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-regexp-string-iterator-instances\">#sec-properties-of-regexp-string-iterator-instances</span> Properties of RegExp String Iterator Instances</h1>\n        <p>RegExp String Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%regexpstringiteratorprototype%-object\"><a href=\"#sec-%regexpstringiteratorprototype%-object\">%RegExpStringIteratorPrototype%</a></emu-xref> intrinsic object. RegExp String Iterator instances are initially created with the internal slots listed in <emu-xref href=\"#table-regexp-string-iterator-instance-slots\"><a href=\"#table-regexp-string-iterator-instance-slots\" class=\"excluded-xref\" excluded-id=\"table-regexp-string-iterator-instance-slots\">#table-regexp-string-iterator-instance-slots</a></emu-xref>.</p>\n        <emu-table id=\"table-regexp-string-iterator-instance-slots\" caption=\"Internal Slots of RegExp String Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-regexp-string-iterator-instance-slots\">#table-regexp-string-iterator-instance-slots</span>: Internal Slots of RegExp String Iterator Instances</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>Internal Slot</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td>[[IteratingRegExp]]</td>\n                <td>The regular expression used for iteration. <emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>([[IteratingRegExp]]) is initially <emu-val>true</emu-val>.</td>\n              </tr>\n              <tr>\n                <td>[[IteratedString]]</td>\n                <td>The String value being iterated upon.</td>\n              </tr>\n              <tr>\n                <td>[[Global]]</td>\n                <td>A Boolean value to indicate whether the [[IteratingRegExp]] is global or not.</td>\n              </tr>\n              <tr>\n                <td>[[Unicode]]</td>\n                <td>A Boolean value to indicate whether the [[IteratingRegExp]] is in Unicode mode or not.</td>\n              </tr>\n              <tr>\n                <td>[[Done]]</td>\n                <td>A Boolean value to indicate whether the iteration is complete or not.</td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-%regexpstringiteratorprototype%-object": {"num": "21.2.7.1", "title": "#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-object\">#sec-%regexpstringiteratorprototype%-object</span> The %RegExpStringIteratorPrototype% Object</h1>\n        <p>The <dfn>%RegExpStringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all RegExp String Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is the intrinsic object <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%regexpstringiteratorprototype%.next\"><h1><span class=\"secnum\">21.2.7.1.1</span>#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%regexpstringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.2.7.1.2</span>#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}, "sec-regexp-string-iterator-objects": {"num": "21.2.7", "title": "#sec-regexp-string-iterator-objects RegExp String Iterator Objects", "html": "<emu-clause id=\"sec-regexp-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-string-iterator-objects\">#sec-regexp-string-iterator-objects</span> RegExp String Iterator Objects</h1>\n      <p>A RegExp String Iterator is an object, that represents a specific iteration over some specific String instance object, matching against some specific RegExp instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for RegExp String Iterator objects. Instead, RegExp String Iterator objects are created by calling certain methods of RegExp instance objects.</p>\n\n      <div id=\"excluded-sec-%regexpstringiteratorprototype%-object\"><h1><span class=\"secnum\">21.2.7.1</span>#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-regexp-string-iterator-instances\"><h1><span class=\"secnum\">21.2.7.2</span>#sec-properties-of-regexp-string-iterator-instances Properties of RegExp String Iterator Instances</h1>...</div></emu-clause>\n  "}, "sec-async-function-constructor": {"num": "25.7.1", "title": "#sec-async-function-constructor The AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor\">#sec-async-function-constructor</span> The AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object <dfn>%AsyncFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new AsyncFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncFunction(&#8230;)</code> is equivalent to the object creation expression <code>new AsyncFunction(&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncFunction behaviour must include a <code>super</code> call to the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize a subclass instance with the internal slots necessary for built-in async function behaviour. All ECMAScript syntactic forms for defining async function objects create direct instances of AsyncFunction. There is no syntactic means to create instances of AsyncFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-arguments\"><h1><span class=\"secnum\">25.7.1.1</span>#sec-async-function-constructor-arguments AsyncFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n    "}, "sec-updateempty": {"num": "6.2.3.4", "title": "#sec-updateempty UpdateEmpty ( completionRecord, value )", "html": "<emu-clause id=\"sec-updateempty\" aoid=\"UpdateEmpty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-updateempty\">#sec-updateempty</span> UpdateEmpty ( <var>completionRecord</var>, <var>value</var> )</h1>\n        <p>The abstract operation UpdateEmpty takes arguments <var>completionRecord</var> and <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>completionRecord</var>.[[Type]] is either <emu-const>return</emu-const> or <emu-const>throw</emu-const>, then <var>completionRecord</var>.[[Value]] is not <emu-const>empty</emu-const>.</li><li>If <var>completionRecord</var>.[[Value]] is not <emu-const>empty</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completionRecord</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <var>completionRecord</var>.[[Type]], [[Value]]: <var>value</var>, [[Target]]: <var>completionRecord</var>.[[Target]] }.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-array-iterator-objects": {"num": "22.1.5", "title": "#sec-array-iterator-objects Array Iterator Objects", "html": "<emu-clause id=\"sec-array-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-iterator-objects\">#sec-array-iterator-objects</span> Array Iterator Objects</h1>\n      <p>An Array Iterator is an object, that represents a specific iteration over some specific Array instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Array Iterator objects. Instead, Array iterator objects are created by calling certain methods of Array instance objects.</p>\n\n      <div id=\"excluded-sec-createarrayiterator\"><h1><span class=\"secnum\">22.1.5.1</span>#sec-createarrayiterator CreateArrayIterator ( array, kind )</h1>...</div><div id=\"excluded-sec-%arrayiteratorprototype%-object\"><h1><span class=\"secnum\">22.1.5.2</span>#sec-%arrayiteratorprototype%-object The %ArrayIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-array-iterator-instances\"><h1><span class=\"secnum\">22.1.5.3</span>#sec-properties-of-array-iterator-instances Properties of Array Iterator Instances</h1>...</div></emu-clause>\n  "}, "sec-createstringiterator": {"num": "21.1.5.1", "title": "#sec-createstringiterator CreateStringIterator ( string )", "html": "<emu-clause id=\"sec-createstringiterator\" aoid=\"CreateStringIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createstringiterator\">#sec-createstringiterator</span> CreateStringIterator ( <var>string</var> )</h1>\n        <p>The abstract operation CreateStringIterator takes argument <var>string</var>. This operation is used to create iterator objects for String methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>string</var>) is String.</li><li>Let <var>iterator</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%stringiteratorprototype%-object\"><a href=\"#sec-%stringiteratorprototype%-object\">%StringIteratorPrototype%</a></emu-xref>, &#171; [[IteratedString]], [[StringNextIndex]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedString]] to <var>string</var>.</li><li>Set <var>iterator</var>.[[StringNextIndex]] to 0.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%arrayiteratorprototype%.next": {"num": "22.1.5.2.1", "title": "#sec-%arrayiteratorprototype%.next %ArrayIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%.next\">#sec-%arrayiteratorprototype%.next</span> %ArrayIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of an Array Iterator Instance (<emu-xref href=\"#sec-properties-of-array-iterator-instances\"><a href=\"#sec-properties-of-array-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-array-iterator-instances\">#sec-properties-of-array-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>a</var> be <var>O</var>.[[IteratedArrayLike]].</li><li>If <var>a</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>index</var> be <var>O</var>.[[ArrayLikeNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[ArrayLikeIterationKind]].</li><li>If <var>a</var> has a [[TypedArrayName]] internal slot, then<ol><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>a</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>a</var>.[[ArrayLength]].</li></ol></li><li>Else,<ol><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>a</var>).</li></ol></li><li>If <var>index</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedArrayLike]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>O</var>.[[ArrayLikeNextIndex]] to <var>index</var> + 1.</li><li>If <var>itemKind</var> is <emu-const>key</emu-const>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>index</var>, <emu-val>false</emu-val>).</li><li>Let <var>elementKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>elementValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>a</var>, <var>elementKey</var>).</li><li>If <var>itemKind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>elementValue</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>itemKind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>index</var>, <var>elementValue</var> &#187;).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>result</var>, <emu-val>false</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-string-iterator-objects": {"num": "21.1.5", "title": "#sec-string-iterator-objects String Iterator Objects", "html": "<emu-clause id=\"sec-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-iterator-objects\">#sec-string-iterator-objects</span> String Iterator Objects</h1>\n      <p>A String Iterator is an object, that represents a specific iteration over some specific String instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for String Iterator objects. Instead, String iterator objects are created by calling certain methods of String instance objects.</p>\n\n      <div id=\"excluded-sec-createstringiterator\"><h1><span class=\"secnum\">21.1.5.1</span>#sec-createstringiterator CreateStringIterator ( string )</h1>...</div><div id=\"excluded-sec-%stringiteratorprototype%-object\"><h1><span class=\"secnum\">21.1.5.2</span>#sec-%stringiteratorprototype%-object The %StringIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-string-iterator-instances\"><h1><span class=\"secnum\">21.1.5.3</span>#sec-properties-of-string-iterator-instances Properties of String Iterator Instances</h1>...</div></emu-clause>\n  "}, "sec-%stringiteratorprototype%-object": {"num": "21.1.5.2", "title": "#sec-%stringiteratorprototype%-object The %StringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%stringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%-object\">#sec-%stringiteratorprototype%-object</span> The %StringIteratorPrototype% Object</h1>\n        <p>The <dfn>%StringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all String Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%stringiteratorprototype%.next\"><h1><span class=\"secnum\">21.1.5.2.1</span>#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%stringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.1.5.2.2</span>#sec-%stringiteratorprototype%-@@tostringtag %StringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}, "sec-createbuiltinfunction": {"num": "9.3.3", "title": "#sec-createbuiltinfunction CreateBuiltinFunction ( steps, internalSlotsList [ , realm [ , prototype ] ] )", "html": "<emu-clause id=\"sec-createbuiltinfunction\" aoid=\"CreateBuiltinFunction\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</span> CreateBuiltinFunction ( <var>steps</var>, <var>internalSlotsList</var> [ , <var>realm</var> [ , <var>prototype</var> ] ] )</h1>\n      <p>The abstract operation CreateBuiltinFunction takes arguments <var>steps</var> and <var>internalSlotsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of names of internal slots) and optional arguments <var>realm</var> and <var>prototype</var>. <var>internalSlotsList</var> contains the names of additional internal slots that must be defined as part of the object. This operation creates a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>steps</var> is either a set of algorithm steps or other definition of a function's behaviour provided in this specification.</li><li>If <var>realm</var> is not present, set <var>realm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li><li>If <var>prototype</var> is not present, set <var>prototype</var> to <var>realm</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>]].</li><li>Let <var>func</var> be a new built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that when called performs the action described by <var>steps</var>. The new <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has internal slots whose names are the elements of <var>internalSlotsList</var>.</li><li>Set <var>func</var>.[[Realm]] to <var>realm</var>.</li><li>Set <var>func</var>.[[Prototype]] to <var>prototype</var>.</li><li>Set <var>func</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>func</var>.[[ScriptOrModule]] to <emu-val>null</emu-val>.</li><li>Return <var>func</var>.</li></ol></emu-alg>\n      <p>Each built-in function defined in this specification is created by calling the CreateBuiltinFunction abstract operation.</p>\n    </emu-clause>\n  "}, "sec-properties-of-generator-instances": {"num": "25.4.2", "title": "#sec-properties-of-generator-instances Properties of Generator Instances", "html": "<emu-clause id=\"sec-properties-of-generator-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-generator-instances\">#sec-properties-of-generator-instances</span> Properties of Generator Instances</h1>\n      <p>Generator instances are initially created with the internal slots described in <emu-xref href=\"#table-56\"><a href=\"#table-56\" class=\"excluded-xref\" excluded-id=\"table-56\">#table-56</a></emu-xref>.</p>\n      <emu-table id=\"table-56\" caption=\"Internal Slots of Generator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-56\">#table-56</span>: Internal Slots of Generator Instances</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Internal Slot\n            </th>\n            <th>\n              Description\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorState]]\n            </td>\n            <td>\n              The current execution state of the generator. The possible values are: <emu-val>undefined</emu-val>, <emu-const>suspendedStart</emu-const>, <emu-const>suspendedYield</emu-const>, <emu-const>executing</emu-const>, and <emu-const>completed</emu-const>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorContext]]\n            </td>\n            <td>\n              The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is used when executing the code of this generator.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-%arrayiteratorprototype%-object": {"num": "22.1.5.2", "title": "#sec-%arrayiteratorprototype%-object The %ArrayIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%-object\">#sec-%arrayiteratorprototype%-object</span> The %ArrayIteratorPrototype% Object</h1>\n        <p>The <dfn>%ArrayIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Array Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%arrayiteratorprototype%.next\"><h1><span class=\"secnum\">22.1.5.2.1</span>#sec-%arrayiteratorprototype%.next %ArrayIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%arrayiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">22.1.5.2.2</span>#sec-%arrayiteratorprototype%-@@tostringtag %ArrayIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}, "sec-createregexpstringiterator": {"num": "21.2.5.8.1", "title": "#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )", "html": "<emu-clause id=\"sec-createregexpstringiterator\" aoid=\"CreateRegExpStringIterator\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createregexpstringiterator\">#sec-createregexpstringiterator</span> CreateRegExpStringIterator ( <var>R</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var> )</h1>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>global</var>) is Boolean.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>fullUnicode</var>) is Boolean.</li><li>Let <var>iterator</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%regexpstringiteratorprototype%-object\"><a href=\"#sec-%regexpstringiteratorprototype%-object\">%RegExpStringIteratorPrototype%</a></emu-xref>, &#171; [[IteratingRegExp]], [[IteratedString]], [[Global]], [[Unicode]], [[Done]] &#187;).</li><li>Set <var>iterator</var>.[[IteratingRegExp]] to <var>R</var>.</li><li>Set <var>iterator</var>.[[IteratedString]] to <var>S</var>.</li><li>Set <var>iterator</var>.[[Global]] to <var>global</var>.</li><li>Set <var>iterator</var>.[[Unicode]] to <var>fullUnicode</var>.</li><li>Set <var>iterator</var>.[[Done]] to <emu-val>false</emu-val>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-createarrayiterator": {"num": "22.1.5.1", "title": "#sec-createarrayiterator CreateArrayIterator ( array, kind )", "html": "<emu-clause id=\"sec-createarrayiterator\" aoid=\"CreateArrayIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createarrayiterator\">#sec-createarrayiterator</span> CreateArrayIterator ( <var>array</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateArrayIterator takes arguments <var>array</var> and <var>kind</var>. This operation is used to create iterator objects for Array methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>array</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>.</li><li>Let <var>iterator</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%arrayiteratorprototype%-object\"><a href=\"#sec-%arrayiteratorprototype%-object\">%ArrayIteratorPrototype%</a></emu-xref>, &#171; [[IteratedArrayLike]], [[ArrayLikeNextIndex]], [[ArrayLikeIterationKind]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedArrayLike]] to <var>array</var>.</li><li>Set <var>iterator</var>.[[ArrayLikeNextIndex]] to 0.</li><li>Set <var>iterator</var>.[[ArrayLikeIterationKind]] to <var>kind</var>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generator-abstract-operations": {"num": "25.4.3", "title": "#sec-generator-abstract-operations Generator Abstract Operations", "html": "<emu-clause id=\"sec-generator-abstract-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-abstract-operations\">#sec-generator-abstract-operations</span> Generator Abstract Operations</h1>\n\n      <div id=\"excluded-sec-generatorstart\"><h1><span class=\"secnum\">25.4.3.1</span>#sec-generatorstart GeneratorStart ( generator, generatorBody )</h1>...</div><div id=\"excluded-sec-generatorvalidate\"><h1><span class=\"secnum\">25.4.3.2</span>#sec-generatorvalidate GeneratorValidate ( generator )</h1>...</div><div id=\"excluded-sec-generatorresume\"><h1><span class=\"secnum\">25.4.3.3</span>#sec-generatorresume GeneratorResume ( generator, value )</h1>...</div><div id=\"excluded-sec-generatorresumeabrupt\"><h1><span class=\"secnum\">25.4.3.4</span>#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion )</h1>...</div><div id=\"excluded-sec-getgeneratorkind\"><h1><span class=\"secnum\">25.4.3.5</span>#sec-getgeneratorkind GetGeneratorKind ( )</h1>...</div><div id=\"excluded-sec-generatoryield\"><h1><span class=\"secnum\">25.4.3.6</span>#sec-generatoryield GeneratorYield ( iterNextObj )</h1>...</div></emu-clause>\n  "}, "sec-properties-of-string-iterator-instances": {"num": "21.1.5.3", "title": "#sec-properties-of-string-iterator-instances Properties of String Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-string-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-string-iterator-instances\">#sec-properties-of-string-iterator-instances</span> Properties of String Iterator Instances</h1>\n        <p>String Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%stringiteratorprototype%-object\"><a href=\"#sec-%stringiteratorprototype%-object\">%StringIteratorPrototype%</a></emu-xref> intrinsic object. String Iterator instances are initially created with the internal slots listed in <emu-xref href=\"#table-46\"><a href=\"#table-46\" class=\"excluded-xref\" excluded-id=\"table-46\">#table-46</a></emu-xref>.</p>\n        <emu-table id=\"table-46\" caption=\"Internal Slots of String Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-46\">#table-46</span>: Internal Slots of String Iterator Instances</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedString]]\n              </td>\n              <td>\n                The String value whose code units are being iterated.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[StringNextIndex]]\n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next string element (code unit) to be examined by this iterator.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-generator.prototype.throw": {"num": "25.4.1.4", "title": "#sec-generator.prototype.throw Generator.prototype.throw ( exception )", "html": "<emu-clause id=\"sec-generator.prototype.throw\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.throw\">#sec-generator.prototype.throw</span> Generator.prototype.throw ( <var>exception</var> )</h1>\n        <p>The <code>throw</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>C</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>exception</var>).</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResumeAbrupt\"><a href=\"#sec-generatorresumeabrupt\">GeneratorResumeAbrupt</a></emu-xref>(<var>g</var>, <var>C</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-array-iterator-instances": {"num": "22.1.5.3", "title": "#sec-properties-of-array-iterator-instances Properties of Array Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-array-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-array-iterator-instances\">#sec-properties-of-array-iterator-instances</span> Properties of Array Iterator Instances</h1>\n        <p>Array Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%arrayiteratorprototype%-object\"><a href=\"#sec-%arrayiteratorprototype%-object\">%ArrayIteratorPrototype%</a></emu-xref> intrinsic object. Array Iterator instances are initially created with the internal slots listed in <emu-xref href=\"#table-48\"><a href=\"#table-48\" class=\"excluded-xref\" excluded-id=\"table-48\">#table-48</a></emu-xref>.</p>\n        <emu-table id=\"table-48\" caption=\"Internal Slots of Array Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-48\">#table-48</span>: Internal Slots of Array Iterator Instances</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedArrayLike]]\n              </td>\n              <td>\n                The <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> that is being iterated.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ArrayLikeNextIndex]]\n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next element to be examined by this iterator.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ArrayLikeIterationKind]]\n              </td>\n              <td>\n                A String value that identifies what is returned for each element of the iteration. The possible values are: <emu-const>key</emu-const>, <emu-const>value</emu-const>, <emu-const>key+value</emu-const>.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-properties-of-set-iterator-instances": {"num": "23.2.5.3", "title": "#sec-properties-of-set-iterator-instances Properties of Set Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-set-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-set-iterator-instances\">#sec-properties-of-set-iterator-instances</span> Properties of Set Iterator Instances</h1>\n        <p>Set Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref> intrinsic object. Set Iterator instances are initially created with the internal slots specified in <emu-xref href=\"#table-51\"><a href=\"#table-51\" class=\"excluded-xref\" excluded-id=\"table-51\">#table-51</a></emu-xref>.</p>\n        <emu-table id=\"table-51\" caption=\"Internal Slots of Set Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-51\">#table-51</span>: Internal Slots of Set Iterator Instances</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedSet]]\n              </td>\n              <td>\n                The Set object that is being iterated.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetNextIndex]]\n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next [[SetData]] element to be examined by this iterator.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetIterationKind]]\n              </td>\n              <td>\n                A String value that identifies what is returned for each element of the iteration. The possible values are <emu-const>value</emu-const> and <emu-const>key+value</emu-const>.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-%stringiteratorprototype%.next": {"num": "21.1.5.2.1", "title": "#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%stringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%.next\">#sec-%stringiteratorprototype%.next</span> %StringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a String Iterator Instance (<emu-xref href=\"#sec-properties-of-string-iterator-instances\"><a href=\"#sec-properties-of-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-string-iterator-instances\">#sec-properties-of-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>s</var> be <var>O</var>.[[IteratedString]].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>position</var> be <var>O</var>.[[StringNextIndex]].</li><li>Let <var>len</var> be the length of <var>s</var>.</li><li>If <var>position</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedString]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>s</var>, <var>position</var>).</li><li>Let <var>resultString</var> be the String value containing <var>cp</var>.[[CodeUnitCount]] consecutive code units from <var>s</var> beginning with the code unit at index <var>position</var>.</li><li>Set <var>O</var>.[[StringNextIndex]] to <var>position</var> + <var>cp</var>.[[CodeUnitCount]].</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultString</var>, <emu-val>false</emu-val>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createsetiterator": {"num": "23.2.5.1", "title": "#sec-createsetiterator CreateSetIterator ( set, kind )", "html": "<emu-clause id=\"sec-createsetiterator\" aoid=\"CreateSetIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsetiterator\">#sec-createsetiterator</span> CreateSetIterator ( <var>set</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateSetIterator takes arguments <var>set</var> and <var>kind</var>. This operation is used to create iterator objects for Set methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>set</var>, [[SetData]]).</li><li>Let <var>iterator</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref>, &#171; [[IteratedSet]], [[SetNextIndex]], [[SetIterationKind]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedSet]] to <var>set</var>.</li><li>Set <var>iterator</var>.[[SetNextIndex]] to 0.</li><li>Set <var>iterator</var>.[[SetIterationKind]] to <var>kind</var>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorresume": {"num": "25.4.3.3", "title": "#sec-generatorresume GeneratorResume ( generator, value )", "html": "<emu-clause id=\"sec-generatorresume\" aoid=\"GeneratorResume\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresume\">#sec-generatorresume</span> GeneratorResume ( <var>generator</var>, <var>value</var> )</h1>\n        <p>The abstract operation GeneratorResume takes arguments <var>generator</var> and <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <emu-const>completed</emu-const>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generator.prototype.next": {"num": "25.4.1.2", "title": "#sec-generator.prototype.next Generator.prototype.next ( value )", "html": "<emu-clause id=\"sec-generator.prototype.next\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.next\">#sec-generator.prototype.next</span> Generator.prototype.next ( <var>value</var> )</h1>\n        <p>The <code>next</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<var>g</var>, <var>value</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-completion-record-specification-type": {"num": "6.2.3", "title": "#sec-completion-record-specification-type The Completion Record Specification Type", "html": "<emu-clause id=\"sec-completion-record-specification-type\" aoid=\"Completion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completion-record-specification-type\">#sec-completion-record-specification-type</span> The Completion Record Specification Type</h1>\n      <p>The Completion type is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> used to explain the runtime propagation of values and control flow such as the behaviour of statements (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) that perform nonlocal transfers of control.</p>\n      <p>Values of the Completion type are <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> values whose fields are defined as by <emu-xref href=\"#table-8\"><a href=\"#table-8\" class=\"excluded-xref\" excluded-id=\"table-8\">#table-8</a></emu-xref>. Such values are referred to as <dfn>Completion Record</dfn>s.</p>\n      <emu-table id=\"table-8\" caption=\"Completion Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-8\">#table-8</span>: <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> Fields</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[Type]]\n            </td>\n            <td>\n              One of <emu-const>normal</emu-const>, <emu-const>break</emu-const>, <emu-const>continue</emu-const>, <emu-const>return</emu-const>, or <emu-const>throw</emu-const>\n            </td>\n            <td>\n              The type of completion that occurred.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Value]]\n            </td>\n            <td>\n              any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The value that was produced.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Target]]\n            </td>\n            <td>\n              any ECMAScript string or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The target label for directed control transfers.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The term &#8220;<dfn>abrupt completion</dfn>&#8221; refers to any completion with a [[Type]] value other than <emu-const>normal</emu-const>.</p>\n\n      <emu-clause id=\"await\" aoid=\"Await\">\n        <h1><span class=\"secnum\">6.2.3.1</span> Await</h1>\n\n        <p>Algorithm steps that say</p>\n\n        <emu-alg><ol><li>Let <var>completion</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n        <p>mean the same thing as:</p>\n\n        <emu-alg><ol><li>Let <var>asyncContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>value</var>).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#await-fulfilled\" title=\"\"><a href=\"#await-fulfilled\">Await Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onFulfilled</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#await-rejected\" title=\"\"><a href=\"#await-rejected\">Await Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onRejected</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>completion</var>, the following steps of the algorithm that invoked <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> will be performed, with <var>completion</var> available.</li><li>Return.</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>asyncContext</var>.</li></ol></emu-alg>\n\n        <p>where all aliases in the above steps, with the exception of <var>completion</var>, are ephemeral and visible only in the steps pertaining to Await.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Await can be combined with the <code>?</code> and <code>!</code> prefixes, so that for example</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n          <p>means the same thing as:</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        </div></emu-note>\n\n        <emu-clause id=\"await-fulfilled\">\n          <h1><span class=\"secnum\">6.2.3.1.1</span> Await Fulfilled Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise fulfillment value to the caller as a normal completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is 1.</p>\n        </emu-clause>\n\n        <emu-clause id=\"await-rejected\">\n          <h1><span class=\"secnum\">6.2.3.1.2</span> Await Rejected Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise rejection reason to the caller as an abrupt throw completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>reason</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is 1.</p>\n        </emu-clause>\n      </emu-clause>\n\n      <div id=\"excluded-sec-normalcompletion\"><h1><span class=\"secnum\">6.2.3.2</span>#sec-normalcompletion NormalCompletion</h1>...</div><div id=\"excluded-sec-throwcompletion\"><h1><span class=\"secnum\">6.2.3.3</span>#sec-throwcompletion ThrowCompletion</h1>...</div><div id=\"excluded-sec-updateempty\"><h1><span class=\"secnum\">6.2.3.4</span>#sec-updateempty UpdateEmpty ( completionRecord, value )</h1>...</div></emu-clause>\n\n    "}, "sec-createmapiterator": {"num": "23.1.5.1", "title": "#sec-createmapiterator CreateMapIterator ( map, kind )", "html": "<emu-clause id=\"sec-createmapiterator\" aoid=\"CreateMapIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmapiterator\">#sec-createmapiterator</span> CreateMapIterator ( <var>map</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateMapIterator takes arguments <var>map</var> and <var>kind</var>. This operation is used to create iterator objects for Map methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>map</var>, [[MapData]]).</li><li>Let <var>iterator</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref>, &#171; [[IteratedMap]], [[MapNextIndex]], [[MapIterationKind]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedMap]] to <var>map</var>.</li><li>Set <var>iterator</var>.[[MapNextIndex]] to 0.</li><li>Set <var>iterator</var>.[[MapIterationKind]] to <var>kind</var>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-built-in-function-objects": {"num": "9.3", "title": "#sec-built-in-function-objects Built-in Function Objects", "html": "<emu-clause id=\"sec-built-in-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</span> Built-in Function Objects</h1>\n    <p>The built-in function objects defined in this specification may be implemented as either ECMAScript function objects (<emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) whose behaviour is provided using ECMAScript code or as implementation provided function exotic objects whose behaviour is provided in some other manner. In either case, the effect of calling such functions must conform to their specifications. An implementation may also provide additional built-in function objects that are not defined in this specification.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is implemented as an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> it must have the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> behaviour specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. All such function exotic objects also have [[Prototype]], [[Extensible]], [[Realm]], and [[ScriptOrModule]] internal slots.</p>\n    <p>Unless otherwise specified every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref> object as the initial value of its [[Prototype]] internal slot.</p>\n    <p>The behaviour specified for each built-in function via algorithm steps or other means is the specification of the function body behaviour for both [[Call]] and [[Construct]] invocations of the function. However, [[Construct]] invocation is not supported by all built-in functions. For each built-in function, when invoked with [[Call]], the [[Call]] <var>thisArgument</var> provides the <emu-val>this</emu-val> value, the [[Call]] <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>. When invoked with [[Construct]], the <emu-val>this</emu-val> value is uninitialized, the [[Construct]] <var>argumentsList</var> provides the named parameters, and the [[Construct]] <var>newTarget</var> parameter provides the NewTarget value. If the built-in function is implemented as an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> then this specified behaviour must be implemented by the ECMAScript code that is the body of the function. Built-in functions that are ECMAScript function objects must be strict functions. If a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has any [[Call]] behaviour other than throwing a <emu-val>TypeError</emu-val> exception, an ECMAScript implementation of the function must be done in a manner that does not cause the function's [[IsClassConstructor]] internal slot to have the value <emu-val>true</emu-val>.</p>\n    <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function. When a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is called as part of a <code>new</code> expression the <var>argumentsList</var> parameter of the invoked [[Construct]] internal method provides the values for the built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s named parameters.</p>\n    <p>Built-in functions that are not constructors do not have a <emu-val>\"prototype\"</emu-val> property unless otherwise specified in the description of a particular function.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not implemented as an ECMAScript function it must provide [[Call]] and [[Construct]] internal methods that conform to the following definitions:</p>\n\n    <div id=\"excluded-sec-built-in-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.3.1</span>#sec-built-in-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-built-in-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.3.2</span>#sec-built-in-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-createbuiltinfunction\"><h1><span class=\"secnum\">9.3.3</span>#sec-createbuiltinfunction CreateBuiltinFunction ( steps, internalSlotsList [ , realm [ , prototype ] ] )</h1>...</div></emu-clause>\n\n  "}, "sec-%setiteratorprototype%-object": {"num": "23.2.5.2", "title": "#sec-%setiteratorprototype%-object The %SetIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%setiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%-object\">#sec-%setiteratorprototype%-object</span> The %SetIteratorPrototype% Object</h1>\n        <p>The <dfn>%SetIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Set Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%setiteratorprototype%.next\"><h1><span class=\"secnum\">23.2.5.2.1</span>#sec-%setiteratorprototype%.next %SetIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%setiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">23.2.5.2.2</span>#sec-%setiteratorprototype%-@@tostringtag %SetIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}, "sec-generatorresumeabrupt": {"num": "25.4.3.4", "title": "#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion )", "html": "<emu-clause id=\"sec-generatorresumeabrupt\" aoid=\"GeneratorResumeAbrupt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresumeabrupt\">#sec-generatorresumeabrupt</span> GeneratorResumeAbrupt ( <var>generator</var>, <var>abruptCompletion</var> )</h1>\n        <p>The abstract operation GeneratorResumeAbrupt takes arguments <var>generator</var> and <var>abruptCompletion</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>abruptCompletion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>abruptCompletion</var>.[[Value]], <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>abruptCompletion</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>abruptCompletion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map-iterator-objects": {"num": "23.1.5", "title": "#sec-map-iterator-objects Map Iterator Objects", "html": "<emu-clause id=\"sec-map-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map-iterator-objects\">#sec-map-iterator-objects</span> Map Iterator Objects</h1>\n      <p>A Map Iterator is an object, that represents a specific iteration over some specific Map instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Map Iterator objects. Instead, map iterator objects are created by calling certain methods of Map instance objects.</p>\n\n      <div id=\"excluded-sec-createmapiterator\"><h1><span class=\"secnum\">23.1.5.1</span>#sec-createmapiterator CreateMapIterator ( map, kind )</h1>...</div><div id=\"excluded-sec-%mapiteratorprototype%-object\"><h1><span class=\"secnum\">23.1.5.2</span>#sec-%mapiteratorprototype%-object The %MapIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-map-iterator-instances\"><h1><span class=\"secnum\">23.1.5.3</span>#sec-properties-of-map-iterator-instances Properties of Map Iterator Instances</h1>...</div></emu-clause>\n  "}}, "figData": {"table-5": "Table 6", "table-8": "Table 9", "table-46": "Table 53", "table-regexp-string-iterator-instance-slots": "Table 59", "table-48": "Table 60", "table-50": "Table 62", "table-51": "Table 63", "table-56": "Table 73"}}, "to": {"secList": ["sec-%setiteratorprototype%.next", "sec-set-iterator-objects", "sec-generatorvalidate", "sec-%mapiteratorprototype%.next", "sec-atomics.islockfree", "sec-generator.prototype.return", "sec-generator-function-definitions-runtime-semantics-evaluatebody", "sec-async-function-constructor-properties", "sec-generatorstart", "sec-%regexpstringiteratorprototype%.next", "sec-%mapiteratorprototype%-object", "sec-string.prototype-@@iterator", "sec-%regexpstringiteratorprototype%-object", "sec-regexp-string-iterator-objects", "sec-async-function-constructor", "sec-updateempty", "sec-array-iterator-objects", "sec-%arrayiteratorprototype%.next", "sec-string-iterator-objects", "sec-%stringiteratorprototype%-object", "sec-createbuiltinfunction", "sec-properties-of-generator-instances", "sec-%arrayiteratorprototype%-object", "sec-createregexpstringiterator", "sec-createarrayiterator", "sec-generator-abstract-operations", "sec-generator.prototype.throw", "sec-%stringiteratorprototype%.next", "sec-createsetiterator", "sec-generatorresume", "sec-generator.prototype.next", "sec-completion-record-specification-type", "sec-createmapiterator", "sec-built-in-function-objects", "sec-%setiteratorprototype%-object", "sec-generatorresumeabrupt", "sec-map-iterator-objects"], "secData": {"sec-%setiteratorprototype%.next": {"num": "23.2.5.2.1", "title": "#sec-%setiteratorprototype%.next %SetIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%setiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%.next\">#sec-%setiteratorprototype%.next</span> %SetIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<emu-val>this</emu-val> value, <emu-val>undefined</emu-val>, <emu-const>Set Iterator</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-set-iterator-objects": {"num": "23.2.5", "title": "#sec-set-iterator-objects Set Iterator Objects", "html": "<emu-clause id=\"sec-set-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set-iterator-objects\">#sec-set-iterator-objects</span> Set Iterator Objects</h1>\n      <p>A Set Iterator is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>, with the structure defined below, that represents a specific iteration over some specific Set instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Set Iterator objects. Instead, set iterator objects are created by calling certain methods of Set instance objects.</p>\n\n      <div id=\"excluded-sec-createsetiterator\"><h1><span class=\"secnum\">23.2.5.1</span>#sec-createsetiterator CreateSetIterator ( set, kind )</h1>...</div><div id=\"excluded-sec-%setiteratorprototype%-object\"><h1><span class=\"secnum\">23.2.5.2</span>#sec-%setiteratorprototype%-object The %SetIteratorPrototype% Object</h1>...</div></emu-clause>\n  "}, "sec-generatorvalidate": {"num": "25.4.3.2", "title": "#sec-generatorvalidate GeneratorValidate ( generator, generatorBrand )", "html": "<emu-clause id=\"sec-generatorvalidate\" aoid=\"GeneratorValidate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorvalidate\">#sec-generatorvalidate</span> GeneratorValidate ( <var>generator</var>, <var>generatorBrand</var> )</h1>\n        <p>The abstract operation GeneratorValidate takes arguments <var>generator</var> and <var>generatorBrand</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>generator</var>, [[GeneratorState]]).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>generator</var>, [[GeneratorBrand]]).</li><li>If <var>generator</var>.[[GeneratorBrand]] is not equal to <var>generatorBrand</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> also has a [[GeneratorContext]] internal slot.</li><li>Let <var>state</var> be <var>generator</var>.[[GeneratorState]].</li><li>If <var>state</var> is <emu-const>executing</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>state</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%mapiteratorprototype%.next": {"num": "23.1.5.2.1", "title": "#sec-%mapiteratorprototype%.next %MapIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%mapiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%.next\">#sec-%mapiteratorprototype%.next</span> %MapIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<emu-val>this</emu-val> value, <emu-val>undefined</emu-val>, <emu-const>Map Iterator</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-atomics.islockfree": {"num": "24.4.6", "title": "#sec-atomics.islockfree Atomics.isLockFree ( size )", "html": "<emu-clause id=\"sec-atomics.islockfree\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.islockfree\">#sec-atomics.islockfree</span> Atomics.isLockFree ( <var>size</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>size</var>).</li><li>Let <var>AR</var> be the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</li><li>If <var>n</var> equals 1, return <var>AR</var>.[[IsLockFree1]].</li><li>If <var>n</var> equals 2, return <var>AR</var>.[[IsLockFree2]].</li><li>If <var>n</var> equals 4, return <emu-val>true</emu-val>.</li><li>If <var>n</var> equals 8, return <var>AR</var>.[[IsLockFree8]].</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>Atomics.isLockFree</code>() is an optimization primitive. The intuition is that if the atomic step of an atomic primitive (<code>compareExchange</code>, <code>load</code>, <code>store</code>, <code>add</code>, <code>sub</code>, <code>and</code>, <code>or</code>, <code>xor</code>, or <code>exchange</code>) on a datum of size <var>n</var> bytes will be performed without the calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> acquiring a lock outside the <var>n</var> bytes comprising the datum, then <code>Atomics.isLockFree</code>(<var>n</var>) will return <emu-val>true</emu-val>. High-performance algorithms will use <code>Atomics.isLockFree</code> to determine whether to use locks or atomic operations in critical sections. If an atomic primitive is not lock-free then it is often more efficient for an algorithm to provide its own locking.</p>\n        <p><code>Atomics.isLockFree</code>(4) always returns <emu-val>true</emu-val> as that can be supported on all known relevant hardware. Being able to assume this will generally simplify programs.</p>\n        <p>Regardless of the value of <code>Atomics.isLockFree</code>, all atomic operations are guaranteed to be atomic. For example, they will never have a visible operation take place in the middle of the operation (e.g., \"tearing\").</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-generator.prototype.return": {"num": "25.4.1.3", "title": "#sec-generator.prototype.return Generator.prototype.return ( value )", "html": "<emu-clause id=\"sec-generator.prototype.return\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.return\">#sec-generator.prototype.return</span> Generator.prototype.return ( <var>value</var> )</h1>\n        <p>The <code>return</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>C</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResumeAbrupt\"><a href=\"#sec-generatorresumeabrupt\">GeneratorResumeAbrupt</a></emu-xref>(<var>g</var>, <var>C</var>, <emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generator-function-definitions-runtime-semantics-evaluatebody": {"num": "14.4.10", "title": "#sec-generator-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluatebody\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluatebody\">#sec-generator-function-definitions-runtime-semantics-evaluatebody</span> Runtime Semantics: EvaluateBody</h1>\n      <p>With parameters <var>functionObject</var> and <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>argumentsList</var>.</p>\n      <emu-see-also-para op=\"EvaluateBody\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8aa65b90\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref>(<var>functionObject</var>, <var>argumentsList</var>).</li><li>Let <var>G</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>functionObject</var>, <emu-val>\"%Generator.prototype%\"</emu-val>, &#171; [[GeneratorState]], [[GeneratorContext]], [[GeneratorBrand]] &#187;).</li><li>Set <var>G</var>.[[GeneratorBrand]] to <emu-const>empty</emu-const>.</li><li>Perform <emu-xref aoid=\"GeneratorStart\"><a href=\"#sec-generatorstart\">GeneratorStart</a></emu-xref>(<var>G</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>G</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-constructor-properties": {"num": "25.7.2", "title": "#sec-async-function-constructor-properties Properties of the AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor-properties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor-properties\">#sec-async-function-constructor-properties</span> Properties of the AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is a standard built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that inherits from the Function <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-function-constructor\"><a href=\"#sec-function-constructor\">%Function%</a></emu-xref>.</li>\n        <li>has a <emu-val>\"name\"</emu-val> property whose value is <emu-val>\"AsyncFunction\"</emu-val>.</li>\n        <li>has the following properties:</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-length\"><h1><span class=\"secnum\">25.7.2.1</span>#sec-async-function-constructor-length AsyncFunction.length</h1>...</div><div id=\"excluded-sec-async-function-constructor-prototype\"><h1><span class=\"secnum\">25.7.2.2</span>#sec-async-function-constructor-prototype AsyncFunction.prototype</h1>...</div></emu-clause>\n\n    "}, "sec-generatorstart": {"num": "25.4.3.1", "title": "#sec-generatorstart GeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-generatorstart\" aoid=\"GeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorstart\">#sec-generatorstart</span> GeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation GeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no argument). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>generator</var>.[[GeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>If <var>generatorBody</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, then<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generatorBody</var> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li><li>Let <var>result</var> be <var>generatorBody</var>().</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[GeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%regexpstringiteratorprototype%.next": {"num": "21.2.7.1.1", "title": "#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%.next\">#sec-%regexpstringiteratorprototype%.next</span> %RegExpStringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<emu-val>this</emu-val> value, <emu-val>undefined</emu-val>, <emu-const>RegExp String Iterator</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%mapiteratorprototype%-object": {"num": "23.1.5.2", "title": "#sec-%mapiteratorprototype%-object The %MapIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%mapiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%-object\">#sec-%mapiteratorprototype%-object</span> The %MapIteratorPrototype% Object</h1>\n        <p>The <dfn>%MapIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Map Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%mapiteratorprototype%.next\"><h1><span class=\"secnum\">23.1.5.2.1</span>#sec-%mapiteratorprototype%.next %MapIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%mapiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">23.1.5.2.2</span>#sec-%mapiteratorprototype%-@@tostringtag %MapIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n    "}, "sec-string.prototype-@@iterator": {"num": "21.1.3.33", "title": "#sec-string.prototype-@@iterator String.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-string.prototype-@@iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype-@@iterator\">#sec-string.prototype-@@iterator</span> String.prototype [ @@iterator ] ( )</h1>\n        <p>When the <code>@@iterator</code> method is called it returns an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) that iterates over the code points of a String value, returning each code point as a String value. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>s</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>s</var> and performs the following steps when called:<ol><li>Let <var>position</var> be 0.</li><li>Let <var>len</var> be the length of <var>s</var>.</li><li>Repeat, while <var>position</var> &#8804; <var>len</var>,<ol><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>s</var>, <var>position</var>).</li><li>Let <var>resultString</var> be the String value containing <var>cp</var>.[[CodeUnitCount]] consecutive code units from <var>s</var> beginning with the code unit at index <var>position</var>.</li><li>Set <var>position</var> to <var>position</var> + <var>cp</var>.[[CodeUnitCount]].</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>resultString</var>).</li></ol></li><li>Return <var>undefined</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"CreateBuiltinGeneratorInstance\"><a href=\"#sec-createbuiltingeneratorinstance\">CreateBuiltinGeneratorInstance</a></emu-xref>(<var>closure</var>, <emu-const>String Iterator</emu-const>, <emu-xref href=\"#sec-%stringiteratorprototype%-object\"><a href=\"#sec-%stringiteratorprototype%-object\">%StringIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.iterator]\"</emu-val>.</p>\n      </emu-clause>\n    "}, "sec-%regexpstringiteratorprototype%-object": {"num": "21.2.7.1", "title": "#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-object\">#sec-%regexpstringiteratorprototype%-object</span> The %RegExpStringIteratorPrototype% Object</h1>\n        <p>The <dfn>%RegExpStringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all RegExp String Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is the intrinsic object <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%regexpstringiteratorprototype%.next\"><h1><span class=\"secnum\">21.2.7.1.1</span>#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%regexpstringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.2.7.1.2</span>#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n    "}, "sec-regexp-string-iterator-objects": {"num": "21.2.7", "title": "#sec-regexp-string-iterator-objects RegExp String Iterator Objects", "html": "<emu-clause id=\"sec-regexp-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-string-iterator-objects\">#sec-regexp-string-iterator-objects</span> RegExp String Iterator Objects</h1>\n      <p>A RegExp String Iterator is an object, that represents a specific iteration over some specific String instance object, matching against some specific RegExp instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for RegExp String Iterator objects. Instead, RegExp String Iterator objects are created by calling certain methods of RegExp instance objects.</p>\n\n      <div id=\"excluded-sec-%regexpstringiteratorprototype%-object\"><h1><span class=\"secnum\">21.2.7.1</span>#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object</h1>...</div></emu-clause>\n  "}, "sec-async-function-constructor": {"num": "25.7.1", "title": "#sec-async-function-constructor The AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor\">#sec-async-function-constructor</span> The AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object <dfn>%AsyncFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new AsyncFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncFunction(&#8230;)</code> is equivalent to the object creation expression <code>new AsyncFunction(&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncFunction behaviour must include a <code>super</code> call to the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize a subclass instance with the internal slots necessary for built-in async function behaviour. All ECMAScript syntactic forms for defining async function objects create direct instances of AsyncFunction. There is no syntactic means to create instances of AsyncFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-arguments\"><h1><span class=\"secnum\">25.7.1.1</span>#sec-async-function-constructor-arguments AsyncFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n\n    "}, "sec-updateempty": {"num": "6.2.3.4", "title": "#sec-updateempty UpdateEmpty ( completionRecord, value )", "html": "<emu-clause id=\"sec-updateempty\" aoid=\"UpdateEmpty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-updateempty\">#sec-updateempty</span> UpdateEmpty ( <var>completionRecord</var>, <var>value</var> )</h1>\n        <p>The abstract operation UpdateEmpty takes arguments <var>completionRecord</var> and <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>completionRecord</var>.[[Type]] is either <emu-const>return</emu-const> or <emu-const>throw</emu-const>, then <var>completionRecord</var>.[[Value]] is not <emu-const>empty</emu-const>.</li><li>If <var>completionRecord</var>.[[Value]] is not <emu-const>empty</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completionRecord</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <var>completionRecord</var>.[[Type]], [[Value]]: <var>value</var>, [[Target]]: <var>completionRecord</var>.[[Target]] }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array-iterator-objects": {"num": "22.1.5", "title": "#sec-array-iterator-objects Array Iterator Objects", "html": "<emu-clause id=\"sec-array-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-iterator-objects\">#sec-array-iterator-objects</span> Array Iterator Objects</h1>\n      <p>An Array Iterator is an object, that represents a specific iteration over some specific Array instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Array Iterator objects. Instead, Array iterator objects are created by calling certain methods of Array instance objects.</p>\n\n      <div id=\"excluded-sec-createarrayiterator\"><h1><span class=\"secnum\">22.1.5.1</span>#sec-createarrayiterator CreateArrayIterator ( array, kind )</h1>...</div><div id=\"excluded-sec-%arrayiteratorprototype%-object\"><h1><span class=\"secnum\">22.1.5.2</span>#sec-%arrayiteratorprototype%-object The %ArrayIteratorPrototype% Object</h1>...</div></emu-clause>\n  "}, "sec-%arrayiteratorprototype%.next": {"num": "22.1.5.2.1", "title": "#sec-%arrayiteratorprototype%.next %ArrayIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%.next\">#sec-%arrayiteratorprototype%.next</span> %ArrayIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<emu-val>this</emu-val> value, <emu-val>undefined</emu-val>, <emu-const>Array Iterator</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-string-iterator-objects": {"num": "21.1.5", "title": "#sec-string-iterator-objects String Iterator Objects", "html": "<emu-clause id=\"sec-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-iterator-objects\">#sec-string-iterator-objects</span> String Iterator Objects</h1>\n      <p>A String Iterator is an object, that represents a specific iteration over some specific String instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for String Iterator objects. Instead, String iterator objects are created by calling certain methods of String instance objects.</p>\n\n      <div id=\"excluded-sec-%stringiteratorprototype%-object\"><h1><span class=\"secnum\">21.1.5.1</span>#sec-%stringiteratorprototype%-object The %StringIteratorPrototype% Object</h1>...</div></emu-clause>\n  "}, "sec-%stringiteratorprototype%-object": {"num": "21.1.5.1", "title": "#sec-%stringiteratorprototype%-object The %StringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%stringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%-object\">#sec-%stringiteratorprototype%-object</span> The %StringIteratorPrototype% Object</h1>\n        <p>The <dfn>%StringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all String Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%stringiteratorprototype%.next\"><h1><span class=\"secnum\">21.1.5.1.1</span>#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%stringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.1.5.1.2</span>#sec-%stringiteratorprototype%-@@tostringtag %StringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n    "}, "sec-createbuiltinfunction": {"num": "9.3.3", "title": "#sec-createbuiltinfunction CreateBuiltinFunction ( steps, internalSlotsList [ , realm [ , prototype ] ] )", "html": "<emu-clause id=\"sec-createbuiltinfunction\" aoid=\"CreateBuiltinFunction\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</span> CreateBuiltinFunction ( <var>steps</var>, <var>internalSlotsList</var> [ , <var>realm</var> [ , <var>prototype</var> ] ] )</h1>\n      <p>The abstract operation CreateBuiltinFunction takes arguments <var>steps</var> and <var>internalSlotsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of names of internal slots) and optional arguments <var>realm</var> and <var>prototype</var>. <var>internalSlotsList</var> contains the names of additional internal slots that must be defined as part of the object. This operation creates a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>steps</var> is either a set of algorithm steps or other definition of a function's behaviour provided in this specification.</li><li>If <var>realm</var> is not present, set <var>realm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li><li>If <var>prototype</var> is not present, set <var>prototype</var> to <var>realm</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>]].</li><li>Let <var>func</var> be a new built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that when called performs the action described by <var>steps</var>. The new <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has internal slots whose names are the elements of <var>internalSlotsList</var>.</li><li>Set <var>func</var>.[[Realm]] to <var>realm</var>.</li><li>Set <var>func</var>.[[Prototype]] to <var>prototype</var>.</li><li>Set <var>func</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>func</var>.[[ScriptOrModule]] to <emu-val>null</emu-val>.</li><li>Return <var>func</var>.</li></ol></emu-alg>\n      <p>Each built-in function defined in this specification is created by calling the CreateBuiltinFunction abstract operation.</p>\n    </emu-clause>\n\n    "}, "sec-properties-of-generator-instances": {"num": "25.4.2", "title": "#sec-properties-of-generator-instances Properties of Generator Instances", "html": "<emu-clause id=\"sec-properties-of-generator-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-generator-instances\">#sec-properties-of-generator-instances</span> Properties of Generator Instances</h1>\n      <p>Generator instances are initially created with the internal slots described in <emu-xref href=\"#table-56\"><a href=\"#table-56\" class=\"excluded-xref\" excluded-id=\"table-56\">#table-56</a></emu-xref>.</p>\n      <emu-table id=\"table-56\" caption=\"Internal Slots of Generator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-56\">#table-56</span>: Internal Slots of Generator Instances</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Internal Slot\n            </th>\n            <th>\n              Description\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorState]]\n            </td>\n            <td>\n              The current execution state of the generator. The possible values are: <emu-val>undefined</emu-val>, <emu-const>suspendedStart</emu-const>, <emu-const>suspendedYield</emu-const>, <emu-const>executing</emu-const>, and <emu-const>completed</emu-const>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorContext]]\n            </td>\n            <td>\n              The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is used when executing the code of this generator.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorBrand]]\n            </td>\n            <td>\n              The brand of the generator used to distinguish different type of built-in generators. [[GeneratorBrand]] of generators declared by ECMAScript source text must be <emu-const>empty</emu-const>.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-%arrayiteratorprototype%-object": {"num": "22.1.5.2", "title": "#sec-%arrayiteratorprototype%-object The %ArrayIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%-object\">#sec-%arrayiteratorprototype%-object</span> The %ArrayIteratorPrototype% Object</h1>\n        <p>The <dfn>%ArrayIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Array Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%arrayiteratorprototype%.next\"><h1><span class=\"secnum\">22.1.5.2.1</span>#sec-%arrayiteratorprototype%.next %ArrayIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%arrayiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">22.1.5.2.2</span>#sec-%arrayiteratorprototype%-@@tostringtag %ArrayIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n    "}, "sec-createregexpstringiterator": {"num": "21.2.5.8.1", "title": "#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )", "html": "<emu-clause id=\"sec-createregexpstringiterator\" aoid=\"CreateRegExpStringIterator\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createregexpstringiterator\">#sec-createregexpstringiterator</span> CreateRegExpStringIterator ( <var>R</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var> )</h1>\n          <p>The abstract operation CreateRegExpStringIterator takes arguments <var>R</var>, <var>S</var>, <var>global</var>, and <var>fullUnicode</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>global</var>) is Boolean.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>fullUnicode</var>) is Boolean.</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>S</var>, <var>global</var>, and <var>fullUnicode</var>. It performs the following steps when called:<ol><li>Repeat,<ol><li>Let <var>match</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li><li>If <var>match</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>match</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>match</var>, <emu-val>\"0\"</emu-val>)).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>)).</li><li>Let <var>nextIndex</var> be !&#160;<emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <var>nextIndex</var>, <emu-val>true</emu-val>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>match</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"CreateBuiltinGeneratorInstance\"><a href=\"#sec-createbuiltingeneratorinstance\">CreateBuiltinGeneratorInstance</a></emu-xref>(<var>closure</var>, <emu-const>RegExp String Iterator</emu-const>, <emu-xref href=\"#sec-%regexpstringiteratorprototype%-object\"><a href=\"#sec-%regexpstringiteratorprototype%-object\">%RegExpStringIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-createarrayiterator": {"num": "22.1.5.1", "title": "#sec-createarrayiterator CreateArrayIterator ( array, kind )", "html": "<emu-clause id=\"sec-createarrayiterator\" aoid=\"CreateArrayIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createarrayiterator\">#sec-createarrayiterator</span> CreateArrayIterator ( <var>array</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateArrayIterator takes arguments <var>array</var> and <var>kind</var>. This operation is used to create iterator objects for Array methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>array</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>.</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>kind</var> and <var>array</var> and performs the following steps when called:<ol><li>Let <var>index</var> be <emu-val>+0</emu-val>.</li><li>If <var>array</var> has a [[TypedArrayName]] internal slot, then<ol><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>array</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>array</var>.[[ArrayLength]].</li></ol></li><li>Else,<ol><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>array</var>).</li></ol></li><li>Repeat, while <var>index</var> &#8804; <var>len</var>,<ol><li>Let <var>i</var> be <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>kind</var> is <emu-const>key</emu-const>, perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>i</var>).</li><li>Else,<ol><li>Let <var>elementKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>i</var>).</li><li>Let <var>elementValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>array</var>, <var>elementKey</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>elementValue</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>index</var>, <var>elementValue</var> &#187;).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>result</var>).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"CreateBuiltinGeneratorInstance\"><a href=\"#sec-createbuiltingeneratorinstance\">CreateBuiltinGeneratorInstance</a></emu-xref>(<var>closure</var>, <emu-const>Array Iterator</emu-const>, <emu-xref href=\"#sec-%arrayiteratorprototype%-object\"><a href=\"#sec-%arrayiteratorprototype%-object\">%ArrayIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generator-abstract-operations": {"num": "25.4.3", "title": "#sec-generator-abstract-operations Generator Abstract Operations", "html": "<emu-clause id=\"sec-generator-abstract-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-abstract-operations\">#sec-generator-abstract-operations</span> Generator Abstract Operations</h1>\n\n      <div id=\"excluded-sec-generatorstart\"><h1><span class=\"secnum\">25.4.3.1</span>#sec-generatorstart GeneratorStart ( generator, generatorBody )</h1>...</div><div id=\"excluded-sec-generatorvalidate\"><h1><span class=\"secnum\">25.4.3.2</span>#sec-generatorvalidate GeneratorValidate ( generator, generatorBrand )</h1>...</div><div id=\"excluded-sec-generatorresume\"><h1><span class=\"secnum\">25.4.3.3</span>#sec-generatorresume GeneratorResume ( generator, value, generatorBrand )</h1>...</div><div id=\"excluded-sec-generatorresumeabrupt\"><h1><span class=\"secnum\">25.4.3.4</span>#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion, generatorBrand )</h1>...</div><div id=\"excluded-sec-getgeneratorkind\"><h1><span class=\"secnum\">25.4.3.5</span>#sec-getgeneratorkind GetGeneratorKind ( )</h1>...</div><div id=\"excluded-sec-generatoryield\"><h1><span class=\"secnum\">25.4.3.6</span>#sec-generatoryield GeneratorYield ( iterNextObj )</h1>...</div></emu-clause>\n  "}, "sec-generator.prototype.throw": {"num": "25.4.1.4", "title": "#sec-generator.prototype.throw Generator.prototype.throw ( exception )", "html": "<emu-clause id=\"sec-generator.prototype.throw\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.throw\">#sec-generator.prototype.throw</span> Generator.prototype.throw ( <var>exception</var> )</h1>\n        <p>The <code>throw</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>C</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>exception</var>).</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResumeAbrupt\"><a href=\"#sec-generatorresumeabrupt\">GeneratorResumeAbrupt</a></emu-xref>(<var>g</var>, <var>C</var>, <emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%stringiteratorprototype%.next": {"num": "21.1.5.1.1", "title": "#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%stringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%.next\">#sec-%stringiteratorprototype%.next</span> %StringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<emu-val>this</emu-val> value, <emu-val>undefined</emu-val>, <emu-const>String Iterator</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createsetiterator": {"num": "23.2.5.1", "title": "#sec-createsetiterator CreateSetIterator ( set, kind )", "html": "<emu-clause id=\"sec-createsetiterator\" aoid=\"CreateSetIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsetiterator\">#sec-createsetiterator</span> CreateSetIterator ( <var>set</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateSetIterator takes arguments <var>set</var> and <var>kind</var>. This operation is used to create iterator objects for Set methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>set</var>, [[SetData]]).</li><li>Let closure be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>set</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>index</var> be 0.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>set</var>.[[SetData]].</li><li>NOTE: the number of elements of <var>entries</var> mentioned below must be redetermined every iteration.</li><li>Repeat, while <var>index</var> is less than the number of elements of <var>entries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key+value</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>e</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"CreateBuiltinGeneratorInstance\"><a href=\"#sec-createbuiltingeneratorinstance\">CreateBuiltinGeneratorInstance</a></emu-xref>(<var>closure</var>, <emu-const>Set Iterator</emu-const>, <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorresume": {"num": "25.4.3.3", "title": "#sec-generatorresume GeneratorResume ( generator, value, generatorBrand )", "html": "<emu-clause id=\"sec-generatorresume\" aoid=\"GeneratorResume\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresume\">#sec-generatorresume</span> GeneratorResume ( <var>generator</var>, <var>value</var>, <var>generatorBrand</var> )</h1>\n        <p>The abstract operation GeneratorResume takes arguments <var>generator</var>, <var>value</var>, and <var>generatorBrand</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>, <var>generatorBrand</var>).</li><li>If <var>state</var> is <emu-const>completed</emu-const>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li id=\"step-generator-resume-resume-execution-context\">Resume the suspended evaluation of <var>genContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generator.prototype.next": {"num": "25.4.1.2", "title": "#sec-generator.prototype.next Generator.prototype.next ( value )", "html": "<emu-clause id=\"sec-generator.prototype.next\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype.next\">#sec-generator.prototype.next</span> Generator.prototype.next ( <var>value</var> )</h1>\n        <p>The <code>next</code> method performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>g</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"GeneratorResume\"><a href=\"#sec-generatorresume\">GeneratorResume</a></emu-xref>(<var>g</var>, <var>value</var>, <emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-completion-record-specification-type": {"num": "6.2.3", "title": "#sec-completion-record-specification-type The Completion Record Specification Type", "html": "<emu-clause id=\"sec-completion-record-specification-type\" aoid=\"Completion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completion-record-specification-type\">#sec-completion-record-specification-type</span> The Completion Record Specification Type</h1>\n      <p>The Completion type is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> used to explain the runtime propagation of values and control flow such as the behaviour of statements (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) that perform nonlocal transfers of control.</p>\n      <p>Values of the Completion type are <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> values whose fields are defined as by <emu-xref href=\"#table-8\"><a href=\"#table-8\" class=\"excluded-xref\" excluded-id=\"table-8\">#table-8</a></emu-xref>. Such values are referred to as <dfn>Completion Record</dfn>s.</p>\n      <emu-table id=\"table-8\" caption=\"Completion Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-8\">#table-8</span>: <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> Fields</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[Type]]\n            </td>\n            <td>\n              One of <emu-const>normal</emu-const>, <emu-const>break</emu-const>, <emu-const>continue</emu-const>, <emu-const>return</emu-const>, or <emu-const>throw</emu-const>\n            </td>\n            <td>\n              The type of completion that occurred.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Value]]\n            </td>\n            <td>\n              any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The value that was produced.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Target]]\n            </td>\n            <td>\n              any ECMAScript string or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The target label for directed control transfers.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The term &#8220;<dfn>abrupt completion</dfn>&#8221; refers to any completion with a [[Type]] value other than <emu-const>normal</emu-const>.</p>\n\n      <emu-clause id=\"await\" aoid=\"Await\">\n        <h1><span class=\"secnum\">6.2.3.1</span> Await</h1>\n\n        <p>Algorithm steps that say</p>\n\n        <emu-alg><ol><li>Let <var>completion</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n        <p>mean the same thing as:</p>\n\n        <emu-alg><ol><li>Let <var>asyncContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>value</var>).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#await-fulfilled\" title=\"\"><a href=\"#await-fulfilled\">Await Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onFulfilled</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#await-rejected\" title=\"\"><a href=\"#await-rejected\">Await Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onRejected</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>completion</var>, the following steps of the algorithm that invoked <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> will be performed, with <var>completion</var> available.</li><li>Return.</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>asyncContext</var>.</li></ol></emu-alg>\n\n        <p>where all aliases in the above steps, with the exception of <var>completion</var>, are ephemeral and visible only in the steps pertaining to Await.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Await can be combined with the <code>?</code> and <code>!</code> prefixes, so that for example</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n          <p>means the same thing as:</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        </div></emu-note>\n\n        <emu-clause id=\"await-fulfilled\">\n          <h1><span class=\"secnum\">6.2.3.1.1</span> Await Fulfilled Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise fulfillment value to the caller as a normal completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is 1.</p>\n        </emu-clause>\n\n        <emu-clause id=\"await-rejected\">\n          <h1><span class=\"secnum\">6.2.3.1.2</span> Await Rejected Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise rejection reason to the caller as an abrupt throw completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>reason</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is 1.</p>\n        </emu-clause>\n      </emu-clause>\n\n      <div id=\"excluded-sec-normalcompletion\"><h1><span class=\"secnum\">6.2.3.2</span>#sec-normalcompletion NormalCompletion</h1>...</div><div id=\"excluded-sec-throwcompletion\"><h1><span class=\"secnum\">6.2.3.3</span>#sec-throwcompletion ThrowCompletion</h1>...</div><div id=\"excluded-sec-updateempty\"><h1><span class=\"secnum\">6.2.3.4</span>#sec-updateempty UpdateEmpty ( completionRecord, value )</h1>...</div><div id=\"excluded-sec-yield\"><h1><span class=\"secnum\">6.2.3.5</span>#sec-yield Yield</h1>...</div></emu-clause>\n\n    "}, "sec-createmapiterator": {"num": "23.1.5.1", "title": "#sec-createmapiterator CreateMapIterator ( map, kind )", "html": "<emu-clause id=\"sec-createmapiterator\" aoid=\"CreateMapIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmapiterator\">#sec-createmapiterator</span> CreateMapIterator ( <var>map</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateMapIterator takes arguments <var>map</var> and <var>kind</var>. This operation is used to create iterator objects for Map methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>map</var>, [[MapData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>map</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>map</var>.[[MapData]].</li><li>Let <var>index</var> be <emu-val>+0</emu-val>.</li><li>NOTE: the number of elements of <var>entries</var> mentioned below must be redetermined every iteration.</li><li>Repeat, while <var>index</var> is less than the number of elements of <var>entries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>kind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>result</var>).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"CreateBuiltinGeneratorInstance\"><a href=\"#sec-createbuiltingeneratorinstance\">CreateBuiltinGeneratorInstance</a></emu-xref>(<var>closure</var>, <emu-const>Map Iterator</emu-const>, <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-built-in-function-objects": {"num": "9.3", "title": "#sec-built-in-function-objects Built-in Function Objects", "html": "<emu-clause id=\"sec-built-in-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</span> Built-in Function Objects</h1>\n    <p>The built-in function objects defined in this specification may be implemented as either ECMAScript function objects (<emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) whose behaviour is provided using ECMAScript code or as implementation provided function exotic objects whose behaviour is provided in some other manner. In either case, the effect of calling such functions must conform to their specifications. An implementation may also provide additional built-in function objects that are not defined in this specification.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is implemented as an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> it must have the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> behaviour specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. All such function exotic objects also have [[Prototype]], [[Extensible]], [[Realm]], and [[ScriptOrModule]] internal slots.</p>\n    <p>Unless otherwise specified every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref> object as the initial value of its [[Prototype]] internal slot.</p>\n    <p>The behaviour specified for each built-in function via algorithm steps or other means is the specification of the function body behaviour for both [[Call]] and [[Construct]] invocations of the function. However, [[Construct]] invocation is not supported by all built-in functions. For each built-in function, when invoked with [[Call]], the [[Call]] <var>thisArgument</var> provides the <emu-val>this</emu-val> value, the [[Call]] <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>. When invoked with [[Construct]], the <emu-val>this</emu-val> value is uninitialized, the [[Construct]] <var>argumentsList</var> provides the named parameters, and the [[Construct]] <var>newTarget</var> parameter provides the NewTarget value. If the built-in function is implemented as an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> then this specified behaviour must be implemented by the ECMAScript code that is the body of the function. Built-in functions that are ECMAScript function objects must be strict functions. If a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has any [[Call]] behaviour other than throwing a <emu-val>TypeError</emu-val> exception, an ECMAScript implementation of the function must be done in a manner that does not cause the function's [[IsClassConstructor]] internal slot to have the value <emu-val>true</emu-val>.</p>\n    <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function. When a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is called as part of a <code>new</code> expression the <var>argumentsList</var> parameter of the invoked [[Construct]] internal method provides the values for the built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s named parameters.</p>\n    <p>Built-in functions that are not constructors do not have a <emu-val>\"prototype\"</emu-val> property unless otherwise specified in the description of a particular function.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not implemented as an ECMAScript function it must provide [[Call]] and [[Construct]] internal methods that conform to the following definitions:</p>\n\n    <div id=\"excluded-sec-built-in-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.3.1</span>#sec-built-in-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-built-in-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.3.2</span>#sec-built-in-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-createbuiltinfunction\"><h1><span class=\"secnum\">9.3.3</span>#sec-createbuiltinfunction CreateBuiltinFunction ( steps, internalSlotsList [ , realm [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-createbuiltingeneratorinstance\"><h1><span class=\"secnum\">9.3.4</span>#sec-createbuiltingeneratorinstance CreateBuiltinGeneratorInstance ( closure [ , generatorBrand [ , generatorPrototype ] ] )</h1>...</div></emu-clause>\n\n  "}, "sec-%setiteratorprototype%-object": {"num": "23.2.5.2", "title": "#sec-%setiteratorprototype%-object The %SetIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%setiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%-object\">#sec-%setiteratorprototype%-object</span> The %SetIteratorPrototype% Object</h1>\n        <p>The <dfn>%SetIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Set Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%setiteratorprototype%.next\"><h1><span class=\"secnum\">23.2.5.2.1</span>#sec-%setiteratorprototype%.next %SetIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%setiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">23.2.5.2.2</span>#sec-%setiteratorprototype%-@@tostringtag %SetIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n    "}, "sec-generatorresumeabrupt": {"num": "25.4.3.4", "title": "#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion, generatorBrand )", "html": "<emu-clause id=\"sec-generatorresumeabrupt\" aoid=\"GeneratorResumeAbrupt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresumeabrupt\">#sec-generatorresumeabrupt</span> GeneratorResumeAbrupt ( <var>generator</var>, <var>abruptCompletion</var>, <var>generatorBrand</var> )</h1>\n        <p>The abstract operation GeneratorResumeAbrupt takes arguments <var>generator</var>, <var>abruptCompletion</var> (an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> value), and <var>generatorBrand</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>, <var>generatorBrand</var>).</li><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>abruptCompletion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>abruptCompletion</var>.[[Value]], <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>abruptCompletion</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li id=\"step-generator-abrupt-resume-execution-context\">Resume the suspended evaluation of <var>genContext</var> using <var>abruptCompletion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map-iterator-objects": {"num": "23.1.5", "title": "#sec-map-iterator-objects Map Iterator Objects", "html": "<emu-clause id=\"sec-map-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map-iterator-objects\">#sec-map-iterator-objects</span> Map Iterator Objects</h1>\n      <p>A Map Iterator is an object, that represents a specific iteration over some specific Map instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for Map Iterator objects. Instead, map iterator objects are created by calling certain methods of Map instance objects.</p>\n\n      <div id=\"excluded-sec-createmapiterator\"><h1><span class=\"secnum\">23.1.5.1</span>#sec-createmapiterator CreateMapIterator ( map, kind )</h1>...</div><div id=\"excluded-sec-%mapiteratorprototype%-object\"><h1><span class=\"secnum\">23.1.5.2</span>#sec-%mapiteratorprototype%-object The %MapIteratorPrototype% Object</h1>...</div></emu-clause>\n  "}}, "figData": {"table-5": "Table 6", "table-8": "Table 9", "table-56": "Table 68"}}}