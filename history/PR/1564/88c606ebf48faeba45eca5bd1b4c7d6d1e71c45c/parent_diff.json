{"from": {"secList": ["sec-overview-of-date-objects-and-definitions-of-abstract-operations", "sec-makedate", "sec-localtime", "sec-year-number", "sec-time-values-and-time-range", "sec-day-number-and-time-within-day", "sec-timeclip", "sec-date-number", "sec-makeday", "sec-utc-t", "sec-local-time-zone-adjustment", "sec-maketime", "sec-month-number", "sec-date-time-string-format"], "secData": {"sec-overview-of-date-objects-and-definitions-of-abstract-operations": {"num": "20.4.1", "title": "#sec-overview-of-date-objects-and-definitions-of-abstract-operations Overview of Date Objects and Definitions of Abstract Operations", "html": "<emu-clause id=\"sec-overview-of-date-objects-and-definitions-of-abstract-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-overview-of-date-objects-and-definitions-of-abstract-operations\">#sec-overview-of-date-objects-and-definitions-of-abstract-operations</span> Overview of Date Objects and Definitions of Abstract Operations</h1>\n      <p>The following functions are <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> that operate on time values (defined in  <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\" class=\"excluded-xref\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</a></emu-xref>). Note that, in every case, if any argument to one of these functions is <emu-val>NaN</emu-val>, the result will be <emu-val>NaN</emu-val>.</p>\n\n      <div id=\"excluded-sec-time-values-and-time-range\"><h1><span class=\"secnum\">20.4.1.1</span>#sec-time-values-and-time-range Time Values and Time Range</h1>...</div><div id=\"excluded-sec-day-number-and-time-within-day\"><h1><span class=\"secnum\">20.4.1.2</span>#sec-day-number-and-time-within-day Day Number and Time within Day</h1>...</div><div id=\"excluded-sec-year-number\"><h1><span class=\"secnum\">20.4.1.3</span>#sec-year-number Year Number</h1>...</div><div id=\"excluded-sec-month-number\"><h1><span class=\"secnum\">20.4.1.4</span>#sec-month-number Month Number</h1>...</div><div id=\"excluded-sec-date-number\"><h1><span class=\"secnum\">20.4.1.5</span>#sec-date-number Date Number</h1>...</div><div id=\"excluded-sec-week-day\"><h1><span class=\"secnum\">20.4.1.6</span>#sec-week-day Week Day</h1>...</div><div id=\"excluded-sec-local-time-zone-adjustment\"><h1><span class=\"secnum\">20.4.1.7</span>#sec-local-time-zone-adjustment LocalTZA ( t, isUTC )</h1>...</div><div id=\"excluded-sec-localtime\"><h1><span class=\"secnum\">20.4.1.8</span>#sec-localtime LocalTime ( t )</h1>...</div><div id=\"excluded-sec-utc-t\"><h1><span class=\"secnum\">20.4.1.9</span>#sec-utc-t UTC ( t )</h1>...</div><div id=\"excluded-sec-hours-minutes-second-and-milliseconds\"><h1><span class=\"secnum\">20.4.1.10</span>#sec-hours-minutes-second-and-milliseconds Hours, Minutes, Second, and Milliseconds</h1>...</div><div id=\"excluded-sec-maketime\"><h1><span class=\"secnum\">20.4.1.11</span>#sec-maketime MakeTime ( hour, min, sec, ms )</h1>...</div><div id=\"excluded-sec-makeday\"><h1><span class=\"secnum\">20.4.1.12</span>#sec-makeday MakeDay ( year, month, date )</h1>...</div><div id=\"excluded-sec-makedate\"><h1><span class=\"secnum\">20.4.1.13</span>#sec-makedate MakeDate ( day, time )</h1>...</div><div id=\"excluded-sec-timeclip\"><h1><span class=\"secnum\">20.4.1.14</span>#sec-timeclip TimeClip ( time )</h1>...</div><div id=\"excluded-sec-date-time-string-format\"><h1><span class=\"secnum\">20.4.1.15</span>#sec-date-time-string-format Date Time String Format</h1>...</div></emu-clause>\n\n    "}, "sec-makedate": {"num": "20.4.1.13", "title": "#sec-makedate MakeDate ( day, time )", "html": "<emu-clause id=\"sec-makedate\" aoid=\"MakeDate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makedate\">#sec-makedate</span> MakeDate ( <var>day</var>, <var>time</var> )</h1>\n        <p>The abstract operation MakeDate calculates a number of milliseconds from its two arguments, which must be ECMAScript Number values. This operator functions as follows:</p>\n        <emu-alg><ol><li>If <var>day</var> is not finite or <var>time</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Return <var>day</var> &#215; <emu-xref aoid=\"msPerDay\"><a href=\"#eqn-msPerDay\">msPerDay</a></emu-xref> + <var>time</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-localtime": {"num": "20.4.1.8", "title": "#sec-localtime LocalTime ( t )", "html": "<emu-clause id=\"sec-localtime\" aoid=\"LocalTime\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-localtime\">#sec-localtime</span> LocalTime ( <var>t</var> )</h1>\n        <p>The abstract operation LocalTime with argument <var>t</var> converts <var>t</var> from UTC to local time by performing the following steps:</p>\n        <emu-alg><ol><li>Return <var>t</var> + LocalTZA(<var>t</var>, <emu-val>true</emu-val>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Two different input time values  <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn> are converted to the same local time  <emu-eqn class=\"inline\">t<sub>local</sub></emu-eqn> at a negative time zone transition when there are repeated times (e.g. the daylight saving time ends or the time zone adjustment is decreased.).</p>\n          <p><emu-eqn class=\"inline\">LocalTime(<emu-xref aoid=\"UTC\"><a href=\"#sec-utc-t\">UTC</a></emu-xref>(<var>t</var><sub>local</sub>))</emu-eqn> is not necessarily always equal to  <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn>. Correspondingly,  <emu-eqn class=\"inline\"><emu-xref aoid=\"UTC\"><a href=\"#sec-utc-t\">UTC</a></emu-xref>(LocalTime(<var>t</var><sub>UTC</sub>))</emu-eqn> is not necessarily always equal to  <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-year-number": {"num": "20.4.1.3", "title": "#sec-year-number Year Number", "html": "<emu-clause id=\"sec-year-number\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-year-number\">#sec-year-number</span> Year Number</h1>\n        <p>ECMAScript uses a proleptic Gregorian calendar to map a day number to a year number and to determine the month and date within that year. In this calendar, leap years are precisely those which are (divisible by 4) and ((not divisible by 100) or (divisible by 400)). The number of days in year number <var>y</var> is therefore defined by</p>\n        <emu-eqn id=\"eqn-DaysInYear\" aoid=\"DaysInYear\"><div>DaysInYear(<var>y</var>)</div><div>          = 365 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 4) &#8800; 0</div><div>          = 366 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 4) = 0 and (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 100) &#8800; 0</div><div>          = 365 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 100) = 0 and (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 400) &#8800; 0</div><div>          = 366 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 400) = 0</div></emu-eqn>\n        <p>All non-leap years have 365 days with the usual number of days per month and leap years have an extra day in February. The day number of the first day of year <var>y</var> is given by:</p>\n        <emu-eqn id=\"eqn-DaysFromYear\" aoid=\"DayFromYear\"><div>DayFromYear(<var>y</var>) = 365 &#215; (<var>y</var> - 1970) + <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1969) / 4) - <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1901) / 100) + <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1601) / 400)</div></emu-eqn>\n        <p>The <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> of the start of a year is:</p>\n        <emu-eqn id=\"eqn-TimeFromYear\" aoid=\"TimeFromYear\"><div>TimeFromYear(<var>y</var>) = <emu-xref aoid=\"msPerDay\"><a href=\"#eqn-msPerDay\">msPerDay</a></emu-xref> &#215; <emu-xref aoid=\"DayFromYear\"><a href=\"#eqn-DaysFromYear\">DayFromYear</a></emu-xref>(<var>y</var>)</div></emu-eqn>\n        <p>A <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> determines a year by:</p>\n        <emu-eqn id=\"eqn-YearFromTime\" aoid=\"YearFromTime\"><div>YearFromTime(<var>t</var>) = the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>y</var> (closest to positive infinity) such that <emu-xref aoid=\"TimeFromYear\"><a href=\"#eqn-TimeFromYear\">TimeFromYear</a></emu-xref>(<var>y</var>) &#8804; <var>t</var></div></emu-eqn>\n        <p>The leap-year function is 1 for a time within a leap year and otherwise is zero:</p>\n        <emu-eqn id=\"eqn-InLeapYear\" aoid=\"InLeapYear\"><div>InLeapYear(<var>t</var>)</div><div>          = 0 if <emu-xref aoid=\"DaysInYear\"><a href=\"#eqn-DaysInYear\">DaysInYear</a></emu-xref>(<emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>t</var>)) = 365</div><div>          = 1 if <emu-xref aoid=\"DaysInYear\"><a href=\"#eqn-DaysInYear\">DaysInYear</a></emu-xref>(<emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>t</var>)) = 366</div></emu-eqn>\n      </emu-clause>\n\n      "}, "sec-time-values-and-time-range": {"num": "20.4.1.1", "title": "#sec-time-values-and-time-range Time Values and Time Range", "html": "<emu-clause id=\"sec-time-values-and-time-range\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</span> Time Values and Time Range</h1>\n        <p>A Date object contains a Number representing an instant in time with millisecond precision. Such a Number is called a  <dfn>time value</dfn>. A time value may also be <emu-val>NaN</emu-val>, indicating that the Date object does not represent a specific instant in time.</p>\n        <p>Time is measured in ECMAScript as milliseconds since midnight at the beginning of 01 January, 1970 UTC. Time in ECMAScript does not observe leap seconds; they are ignored. Time calculations assume each and every day contains exactly  <emu-eqn class=\"inline\">60 &#215; 60 &#215; 24 &#215; 1000 = 86,400,000</emu-eqn> milliseconds, to align with the POSIX specification of each and every day containing exactly 86,400 seconds.</p>\n        <p>A Number can exactly represent all integers from -9,007,199,254,740,992 to 9,007,199,254,740,992 (<emu-xref href=\"#sec-number.min_safe_integer\"><a href=\"#sec-number.min_safe_integer\" class=\"excluded-xref\" excluded-id=\"sec-number.min_safe_integer\">#sec-number.min_safe_integer</a></emu-xref> and  <emu-xref href=\"#sec-number.max_safe_integer\"><a href=\"#sec-number.max_safe_integer\" class=\"excluded-xref\" excluded-id=\"sec-number.max_safe_integer\">#sec-number.max_safe_integer</a></emu-xref>). A time value supports a slightly smaller range of exactly -100,000,000 days to 100,000,000 days measured relative to midnight at the beginning of 01 January, 1970 UTC. This yields an exact supported time value range of -8,640,000,000,000,000 to 8,640,000,000,000,000 milliseconds relative to midnight at the beginning of 01 January, 1970 UTC.</p>\n        <p>The exact moment of midnight at the beginning of 01 January, 1970 UTC is represented by the time value <emu-val>+0</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The 400 year cycle of the Gregorian calendar contains 97 leap years. This yields an average of 365.2425 days per year, or an average of 31,556,952,000 milliseconds per year under the Gregorian calendar. ECMAScript applies a proleptic Gregorian calendar for all time computations.</p>\n          <p>As specified by this section, the maximum year range a Number can represent exactly with millisecond precision is approximately -285,426 to 285,426 years relative to midnight at the beginning of 01 January, 1970 UTC.</p>\n          <p>As specified by this section, the maximum year range a time value can represent is approximately -273,790 to 273,790 years relative to midnight at the beginning of 01 January, 1970 UTC.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-day-number-and-time-within-day": {"num": "20.4.1.2", "title": "#sec-day-number-and-time-within-day Day Number and Time within Day", "html": "<emu-clause id=\"sec-day-number-and-time-within-day\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-day-number-and-time-within-day\">#sec-day-number-and-time-within-day</span> Day Number and Time within Day</h1>\n        <p>A given <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <var>t</var> belongs to day number</p>\n        <emu-eqn id=\"eqn-Day\" aoid=\"Day\"><div>Day(<var>t</var>) = <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<var>t</var> / <emu-xref aoid=\"msPerDay\"><a href=\"#eqn-msPerDay\">msPerDay</a></emu-xref>)</div></emu-eqn>\n        <p>where the number of milliseconds per day is</p>\n        <emu-eqn id=\"eqn-msPerDay\" aoid=\"msPerDay\"><div>msPerDay = 86400000</div></emu-eqn>\n        <p>The remainder is called the time within the day:</p>\n        <emu-eqn id=\"eqn-TimeWithinDay\" aoid=\"TimeWithinDay\"><div>TimeWithinDay(<var>t</var>) = <var>t</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> <emu-xref aoid=\"msPerDay\"><a href=\"#eqn-msPerDay\">msPerDay</a></emu-xref></div></emu-eqn>\n      </emu-clause>\n\n      "}, "sec-timeclip": {"num": "20.4.1.14", "title": "#sec-timeclip TimeClip ( time )", "html": "<emu-clause id=\"sec-timeclip\" aoid=\"TimeClip\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-timeclip\">#sec-timeclip</span> TimeClip ( <var>time</var> )</h1>\n        <p>The abstract operation TimeClip calculates a number of milliseconds from its argument, which must be an ECMAScript <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>. This operator functions as follows:</p>\n        <emu-alg><ol><li>If <var>time</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>time</var>) &gt; 8.64 &#215; 10<sup>15</sup>, return <emu-val>NaN</emu-val>.</li><li>Let <var>clippedTime</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>time</var>).</li><li>If <var>clippedTime</var> is <emu-val>-0</emu-val>, set <var>clippedTime</var> to <emu-val>+0</emu-val>.</li><li>Return <var>clippedTime</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The point of step 4 is that an implementation is permitted a choice of internal representations of time values, for example as a 64-bit signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or as a 64-bit floating-point value. Depending on the implementation, this internal representation may or may not distinguish <emu-val>-0</emu-val> and <emu-val>+0</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-date-number": {"num": "20.4.1.5", "title": "#sec-date-number Date Number", "html": "<emu-clause id=\"sec-date-number\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date-number\">#sec-date-number</span> Date Number</h1>\n        <p>A date number is identified by an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> in the range 1 through 31, inclusive. The mapping DateFromTime(<var>t</var>) from a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <var>t</var> to a date number is defined by:</p>\n        <emu-eqn aoid=\"DateFromTime\"><div>DateFromTime(<var>t</var>)</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) + 1 if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 0</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - 30 if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 1</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - 58 - <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 2</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - 89 - <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 3</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - 119 - <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 4</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - 150 - <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 5</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - 180 - <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 6</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - 211 - <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 7</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - 242 - <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 8</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - 272 - <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 9</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - 303 - <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 10</div><div>          = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - 333 - <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) if <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) = 11</div></emu-eqn>\n      </emu-clause>\n\n      "}, "sec-makeday": {"num": "20.4.1.12", "title": "#sec-makeday MakeDay ( year, month, date )", "html": "<emu-clause id=\"sec-makeday\" aoid=\"MakeDay\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makeday\">#sec-makeday</span> MakeDay ( <var>year</var>, <var>month</var>, <var>date</var> )</h1>\n        <p>The abstract operation MakeDay calculates a number of days from its three arguments, which must be ECMAScript Number values. This operator functions as follows:</p>\n        <emu-alg><ol><li>If <var>year</var> is not finite or <var>month</var> is not finite or <var>date</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Let <var>y</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>year</var>).</li><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>month</var>).</li><li>Let <var>dt</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>date</var>).</li><li>Let <var>ym</var> be <var>y</var> + <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<var>m</var> / 12).</li><li>Let <var>mn</var> be <var>m</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 12.</li><li>Find a value <var>t</var> such that <emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>t</var>) is <var>ym</var> and <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) is <var>mn</var> and <emu-xref aoid=\"DateFromTime\"><a href=\"#sec-date-number\">DateFromTime</a></emu-xref>(<var>t</var>) is 1; but if this is not possible (because some argument is out of range), return <emu-val>NaN</emu-val>.</li><li>Return <emu-xref aoid=\"Day\"><a href=\"#eqn-Day\">Day</a></emu-xref>(<var>t</var>) + <var>dt</var> - 1.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-utc-t": {"num": "20.4.1.9", "title": "#sec-utc-t UTC ( t )", "html": "<emu-clause id=\"sec-utc-t\" aoid=\"UTC\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-utc-t\">#sec-utc-t</span> UTC ( <var>t</var> )</h1>\n        <p>The abstract operation UTC with argument <var>t</var> converts <var>t</var> from local time to UTC by performing the following steps:</p>\n        <emu-alg><ol><li>Return <var>t</var> - LocalTZA(<var>t</var>, <emu-val>false</emu-val>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-eqn class=\"inline\">UTC(<emu-xref aoid=\"LocalTime\"><a href=\"#sec-localtime\">LocalTime</a></emu-xref>(<var>t</var><sub>UTC</sub>))</emu-eqn> is not necessarily always equal to  <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn>. Correspondingly,  <emu-eqn class=\"inline\"><emu-xref aoid=\"LocalTime\"><a href=\"#sec-localtime\">LocalTime</a></emu-xref>(UTC(<var>t</var><sub>local</sub>))</emu-eqn> is not necessarily always equal to  <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-local-time-zone-adjustment": {"num": "20.4.1.7", "title": "#sec-local-time-zone-adjustment LocalTZA ( t, isUTC )", "html": "<emu-clause id=\"sec-local-time-zone-adjustment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-local-time-zone-adjustment\">#sec-local-time-zone-adjustment</span> LocalTZA ( <var>t</var>, <var>isUTC</var> )</h1>\n        <p>LocalTZA( <var>t</var>, <var>isUTC</var> ) is an implementation-defined algorithm that returns the local time zone adjustment, or offset, in milliseconds. The local political rules for standard time and daylight saving time in effect at <var>t</var> should be used to determine the result in the way specified in this section.</p>\n        <p>When <var>isUTC</var> is true,  <emu-eqn class=\"inline\">LocalTZA( <var>t</var><sub>UTC</sub>, true )</emu-eqn> should return the offset of the local time zone from UTC measured in milliseconds at time represented by <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref>  <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn>. When the result is added to  <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn>, it should yield the corresponding Number  <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn>.</p>\n        <p>When <var>isUTC</var> is false,  <emu-eqn class=\"inline\">LocalTZA( <var>t</var><sub>local</sub>, false )</emu-eqn> should return the offset of the local time zone from UTC measured in milliseconds at local time represented by Number  <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn>. When the result is subtracted from  <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn>, it should yield the corresponding <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref>  <emu-eqn class=\"inline\"><var>t</var><sub>UTC</sub></emu-eqn>.</p>\n        <p>Input <var>t</var> is nominally a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> but may be any <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>. This can occur when <var>isUTC</var> is false and <var>t</var><sub>local</sub> represents a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> that is already offset outside of the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range at the range boundaries. The algorithm must not limit <var>t</var><sub>local</sub> to the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range, so that such inputs are supported.</p>\n        <p>When  <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn> represents local time repeating multiple times at a negative time zone transition (e.g. when the daylight saving time ends or the time zone offset is decreased due to a time zone rule change) or skipped local time at a positive time zone transitions (e.g. when the daylight saving time starts or the time zone offset is increased due to a time zone rule change),  <emu-eqn class=\"inline\"><var>t</var><sub>local</sub></emu-eqn> must be interpreted using the time zone offset before the transition.</p>\n        <p>If an implementation does not support a conversion described above or if political rules for time <var>t</var> are not available within the implementation, the result must be 0.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>It is recommended that implementations use the time zone information of the IANA Time Zone Database  <a href=\"https://www.iana.org/time-zones/\">https://www.iana.org/time-zones/</a>.</p>\n          <p>1:30 AM on November 5, 2017 in America/New_York is repeated twice (fall backward), but it must be interpreted as 1:30 AM UTC-04 instead of 1:30 AM UTC-05. LocalTZA(<emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref>(<emu-xref aoid=\"MakeDate\"><a href=\"#sec-makedate\">MakeDate</a></emu-xref>(<emu-xref aoid=\"MakeDay\"><a href=\"#sec-makeday\">MakeDay</a></emu-xref>(2017, 10, 5), <emu-xref aoid=\"MakeTime\"><a href=\"#sec-maketime\">MakeTime</a></emu-xref>(1, 30, 0, 0))), false) is  <emu-eqn class=\"inline\">-4 &#215; <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref></emu-eqn>.</p>\n          <p>2:30 AM on March 12, 2017 in America/New_York does not exist, but it must be interpreted as 2:30 AM UTC-05 (equivalent to 3:30 AM UTC-04). LocalTZA(<emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref>(<emu-xref aoid=\"MakeDate\"><a href=\"#sec-makedate\">MakeDate</a></emu-xref>(<emu-xref aoid=\"MakeDay\"><a href=\"#sec-makeday\">MakeDay</a></emu-xref>(2017, 2, 12), <emu-xref aoid=\"MakeTime\"><a href=\"#sec-maketime\">MakeTime</a></emu-xref>(2, 30, 0, 0))), false) is  <emu-eqn class=\"inline\">-5 &#215; <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref></emu-eqn>.</p>\n          <p>Local time zone offset values may be positive  <i>or</i> negative.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-maketime": {"num": "20.4.1.11", "title": "#sec-maketime MakeTime ( hour, min, sec, ms )", "html": "<emu-clause id=\"sec-maketime\" aoid=\"MakeTime\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-maketime\">#sec-maketime</span> MakeTime ( <var>hour</var>, <var>min</var>, <var>sec</var>, <var>ms</var> )</h1>\n        <p>The abstract operation MakeTime calculates a number of milliseconds from its four arguments, which must be ECMAScript Number values. This operator functions as follows:</p>\n        <emu-alg><ol><li>If <var>hour</var> is not finite or <var>min</var> is not finite or <var>sec</var> is not finite or <var>ms</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Let <var>h</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>hour</var>).</li><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>min</var>).</li><li>Let <var>s</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>sec</var>).</li><li>Let <var>milli</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>ms</var>).</li><li>Let <var>t</var> be <var>h</var> <code>*</code> <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref> <code>+</code> <var>m</var> <code>*</code> <emu-xref aoid=\"msPerMinute\"><a href=\"#eqn-msPerMinute\">msPerMinute</a></emu-xref> <code>+</code> <var>s</var> <code>*</code> <emu-xref aoid=\"msPerSecond\"><a href=\"#eqn-msPerSecond\">msPerSecond</a></emu-xref> <code>+</code> <var>milli</var>, performing the arithmetic according to IEEE 754-2008 rules (that is, as if using the ECMAScript operators <code>*</code> and <code>+</code>).</li><li>Return <var>t</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-month-number": {"num": "20.4.1.4", "title": "#sec-month-number Month Number", "html": "<emu-clause id=\"sec-month-number\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-month-number\">#sec-month-number</span> Month Number</h1>\n        <p>Months are identified by an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> in the range 0 to 11, inclusive. The mapping <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>) from a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <var>t</var> to a month number is defined by:</p>\n        <emu-eqn id=\"eqn-MonthFromTime\" aoid=\"MonthFromTime\"><div>MonthFromTime(<var>t</var>)</div><div>          = 0 if 0 &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 31</div><div>          = 1 if 31 &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 59 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>)</div><div>          = 2 if 59 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 90 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>)</div><div>          = 3 if 90 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 120 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>)</div><div>          = 4 if 120 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 151 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>)</div><div>          = 5 if 151 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 181 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>)</div><div>          = 6 if 181 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 212 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>)</div><div>          = 7 if 212 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 243 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>)</div><div>          = 8 if 243 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 273 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>)</div><div>          = 9 if 273 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 304 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>)</div><div>          = 10 if 304 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 334 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>)</div><div>          = 11 if 334 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>) &#8804; <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) &lt; 365 + <emu-xref aoid=\"InLeapYear\"><a href=\"#eqn-InLeapYear\">InLeapYear</a></emu-xref>(<var>t</var>)</div></emu-eqn>\n        <p>where</p>\n        <emu-eqn id=\"eqn-DayWithinYear\" aoid=\"DayWithinYear\"><div>DayWithinYear(<var>t</var>) = <emu-xref aoid=\"Day\"><a href=\"#eqn-Day\">Day</a></emu-xref>(<var>t</var>) - <emu-xref aoid=\"DayFromYear\"><a href=\"#eqn-DaysFromYear\">DayFromYear</a></emu-xref>(<emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>t</var>))</div></emu-eqn>\n        <p>A month value of 0 specifies January; 1 specifies February; 2 specifies March; 3 specifies April; 4 specifies May; 5 specifies June; 6 specifies July; 7 specifies August; 8 specifies September; 9 specifies October; 10 specifies November; and 11 specifies December. Note that  <emu-eqn class=\"inline\"><emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(0) = 0</emu-eqn>, corresponding to Thursday, 01 January, 1970.</p>\n      </emu-clause>\n\n      "}, "sec-date-time-string-format": {"num": "20.4.1.15", "title": "#sec-date-time-string-format Date Time String Format", "html": "<emu-clause id=\"sec-date-time-string-format\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</span> Date Time String Format</h1>\n        <p>ECMAScript defines a string interchange format for date-times based upon a simplification of the ISO 8601 calendar date extended format. The format is as follows: <code>YYYY-MM-DDTHH:mm:ss.sssZ</code></p>\n        <p>Where the elements are as follows:</p>\n        <figure>\n          <table class=\"lightweight-table\">\n            <tbody>\n            <tr>\n              <td>\n                <code>YYYY</code>\n              \n              </td>\n              <td>\n                is the year in the proleptic Gregorian calendar as four decimal digits from 0000 to 9999, or as an  <emu-xref href=\"#sec-expanded-years\"><a href=\"#sec-expanded-years\">expanded year</a></emu-xref> of <code>\"+\"</code> or <code>\"-\"</code> followed by six decimal digits.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>-</code>\n              \n              </td>\n              <td>\n                <code>\"-\"</code> (hyphen) appears literally twice in the string.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>MM</code>\n              \n              </td>\n              <td>\n                is the month of the year as two decimal digits from 01 (January) to 12 (December).\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>DD</code>\n              \n              </td>\n              <td>\n                is the day of the month as two decimal digits from 01 to 31.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>T</code>\n              \n              </td>\n              <td>\n                <code>\"T\"</code> appears literally in the string, to indicate the beginning of the time element.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>HH</code>\n              \n              </td>\n              <td>\n                is the number of complete hours that have passed since midnight as two decimal digits from 00 to 24.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>:</code>\n              \n              </td>\n              <td>\n                <code>\":\"</code> (colon) appears literally twice in the string.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>mm</code>\n              \n              </td>\n              <td>\n                is the number of complete minutes since the start of the hour as two decimal digits from 00 to 59.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>ss</code>\n              \n              </td>\n              <td>\n                is the number of complete seconds since the start of the minute as two decimal digits from 00 to 59.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>.</code>\n              \n              </td>\n              <td>\n                <code>\".\"</code> (dot) appears literally in the string.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>sss</code>\n              \n              </td>\n              <td>\n                is the number of complete milliseconds since the start of the second as three decimal digits.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>Z</code>\n              \n              </td>\n              <td>\n                is the UTC offset representation specified as <code>\"Z\"</code> (for UTC with no offset) or an offset of either <code>\"+\"</code> or <code>\"-\"</code> followed by a time expression <code>HH:mm</code> (indicating local time ahead of or behind UTC, respectively)\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure>\n        <p>This format includes date-only forms:</p>\n        <pre>YYYY\nYYYY-MM\nYYYY-MM-DD\n        </pre>\n        <p>It also includes &#8220;date-time&#8221; forms that consist of one of the above date-only forms immediately followed by one of the following time forms with an optional UTC offset representation appended:</p>\n        <pre>THH:mm\nTHH:mm:ss\nTHH:mm:ss.sss\n        </pre>\n        <p>A string containing out-of-bounds or nonconforming elements is not a valid instance of this format.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>As every day both starts and ends with midnight, the two notations <code>00:00</code> and <code>24:00</code> are available to distinguish the two midnights that can be associated with one date. This means that the following two notations refer to exactly the same point in time: <code>1995-02-04T24:00</code> and <code>1995-02-05T00:00</code>. This interpretation of the latter form as \"end of a calendar day\" is consistent with ISO 8601, even though that specification reserves it for describing time intervals and does not permit it within representations of single points in time.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>There exists no international standard that specifies abbreviations for civil time zones like CET, EST, etc. and sometimes the same abbreviation is even used for two very different time zones. For this reason, both ISO 8601 and this format specify numeric representations of time zone offsets.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-expanded-years\"><h1><span class=\"secnum\">20.4.1.15.1</span>#sec-expanded-years Expanded Years</h1>...</div></emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-MonthFromTime", "sec-overview-of-date-objects-and-definitions-of-abstract-operations", "sec-time-value-range", "sec-makedate", "sec-localtime", "sec-year-number", "sec-time-values-and-time-range", "sec-day-number-and-time-within-day", "sec-timeclip", "sec-date-number", "sec-makeday", "sec-utc-t", "sec-local-time-zone-adjustment", "sec-maketime", "sec-month-number", "sec-date-time-string-format"], "secData": {"sec-MonthFromTime": {"num": "20.4.1.4.1", "title": "#sec-MonthFromTime MonthFromTime ( t )", "html": "<emu-clause id=\"sec-MonthFromTime\" aoid=\"MonthFromTime\" oldids=\"eqn-MonthFromTime\">\n          <span id=\"eqn-MonthFromTime\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-MonthFromTime\">#sec-MonthFromTime</span> MonthFromTime ( <var>t</var> )</h1>\n          <p>The abstract operation MonthFromTime maps a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <var>t</var> to a month number. It performs the following steps:</p>\n          <emu-alg><ol><li>Let <var>day</var> be <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>).</li><li>Let <var>leapDaysInYear</var> be <emu-xref aoid=\"LeapDaysInYear\"><a href=\"#eqn-LeapDaysInYear\">LeapDaysInYear</a></emu-xref>(<emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>t</var>)).</li><li>Let <var>month</var> be 0.</li><li>Repeat, while <var>month</var> &lt; 11<ol><li>If <var>day</var> &lt; <emu-xref aoid=\"DaysWithinYearBeforeMonth\"><a href=\"#eqn-DaysWithinYearBeforeMonth\">DaysWithinYearBeforeMonth</a></emu-xref>(<var>month</var> + 1, <var>leapDaysInYear</var>), return <var>month</var>.</li><li>Set <var>month</var> to <var>month</var> + 1.</li></ol></li><li>Return 11.\n          </li></ol></emu-alg>\n        </emu-clause>\n        "}, "sec-overview-of-date-objects-and-definitions-of-abstract-operations": {"num": "20.4.1", "title": "#sec-overview-of-date-objects-and-definitions-of-abstract-operations Overview of Date Objects and Definitions of Abstract Operations", "html": "<emu-clause id=\"sec-overview-of-date-objects-and-definitions-of-abstract-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-overview-of-date-objects-and-definitions-of-abstract-operations\">#sec-overview-of-date-objects-and-definitions-of-abstract-operations</span> Overview of Date Objects and Definitions of Abstract Operations</h1>\n      <p>The following functions are <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> that operate on time values (defined in  <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\" class=\"excluded-xref\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</a></emu-xref>). Note that, in every case, if any argument to one of these functions is <emu-val>NaN</emu-val>, the result will be <emu-val>NaN</emu-val>.</p>\n\n      <div id=\"excluded-sec-time-values-and-time-range\"><h1><span class=\"secnum\">20.4.1.1</span>#sec-time-values-and-time-range Time Values</h1>...</div><div id=\"excluded-sec-day-number-and-time-within-day\"><h1><span class=\"secnum\">20.4.1.2</span>#sec-day-number-and-time-within-day Day Number and Time within Day</h1>...</div><div id=\"excluded-sec-year-number\"><h1><span class=\"secnum\">20.4.1.3</span>#sec-year-number Year Number</h1>...</div><div id=\"excluded-sec-month-number\"><h1><span class=\"secnum\">20.4.1.4</span>#sec-month-number Month Number</h1>...</div><div id=\"excluded-sec-date-number\"><h1><span class=\"secnum\">20.4.1.5</span>#sec-date-number Date Number</h1>...</div><div id=\"excluded-sec-week-day\"><h1><span class=\"secnum\">20.4.1.6</span>#sec-week-day Week Day</h1>...</div><div id=\"excluded-sec-local-time-zone-adjustment\"><h1><span class=\"secnum\">20.4.1.7</span>#sec-local-time-zone-adjustment LocalTZA ( t, isUTC )</h1>...</div><div id=\"excluded-sec-localtime\"><h1><span class=\"secnum\">20.4.1.8</span>#sec-localtime LocalTime ( t )</h1>...</div><div id=\"excluded-sec-utc-t\"><h1><span class=\"secnum\">20.4.1.9</span>#sec-utc-t UTC ( t )</h1>...</div><div id=\"excluded-sec-hours-minutes-second-and-milliseconds\"><h1><span class=\"secnum\">20.4.1.10</span>#sec-hours-minutes-second-and-milliseconds Hours, Minutes, Second, and Milliseconds</h1>...</div><div id=\"excluded-sec-maketime\"><h1><span class=\"secnum\">20.4.1.11</span>#sec-maketime MakeTime ( hour, min, sec, millisec )</h1>...</div><div id=\"excluded-sec-makeday\"><h1><span class=\"secnum\">20.4.1.12</span>#sec-makeday MakeDay ( year, month, date )</h1>...</div><div id=\"excluded-sec-makedate\"><h1><span class=\"secnum\">20.4.1.13</span>#sec-makedate MakeDate ( day, time )</h1>...</div><div id=\"excluded-sec-date-time-string-format\"><h1><span class=\"secnum\">20.4.1.14</span>#sec-date-time-string-format Date Time String Format</h1>...</div></emu-clause>\n\n    "}, "sec-time-value-range": {"num": "20.4.1.1.1", "title": "#sec-time-value-range Time Value Range", "html": "<emu-clause id=\"sec-time-value-range\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-time-value-range\">#sec-time-value-range</span> Time Value Range</h1>\n          <p>Arithmetic on time values is exact within the safe <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> range of -9,007,199,254,740,991 to 9,007,199,254,740,991 (<emu-xref href=\"#sec-number.min_safe_integer\"><a href=\"#sec-number.min_safe_integer\" class=\"excluded-xref\" excluded-id=\"sec-number.min_safe_integer\">#sec-number.min_safe_integer</a></emu-xref> and  <emu-xref href=\"#sec-number.max_safe_integer\"><a href=\"#sec-number.max_safe_integer\" class=\"excluded-xref\" excluded-id=\"sec-number.max_safe_integer\">#sec-number.max_safe_integer</a></emu-xref>). To minimize the number of situations that must step outside these bounds (even when calculating leap years, daylight saving transitions, or UTC offset conversion), a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> used for the [[DateValue]] internal slot of a Date instance supports a slightly smaller range of -8,640,000,000,000,000 to 8,640,000,000,000,000 milliseconds (exactly -100,000,000 days to 100,000,000 days relative to midnight at the beginning of 01 January, 1970 UTC).</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>The 400 year cycle of the Gregorian calendar contains 97 leap years. This yields an average of 365.2425 days per year, or an average of 31,556,952,000 milliseconds per year under the Gregorian calendar. ECMAScript applies a proleptic Gregorian calendar for all time computations.</p>\n            <p>As specified by this section, the maximum year range a Number can represent exactly with millisecond precision is approximately -285,426 to 285,426 years relative to midnight at the beginning of 01 January, 1970 UTC.</p>\n            <p>As specified by this section, the maximum year range a [[DateValue]] can represent is approximately -273,790 to 273,790 years relative to midnight at the beginning of 01 January, 1970 UTC.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-makedate": {"num": "20.4.1.13", "title": "#sec-makedate MakeDate ( day, time )", "html": "<emu-clause id=\"sec-makedate\" aoid=\"MakeDate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makedate\">#sec-makedate</span> MakeDate ( <var>day</var>, <var>time</var> )</h1>\n        <p>The abstract operation MakeDate calculates a number of milliseconds from its two arguments, which must be ECMAScript Number values. It performs the following steps:</p>\n        <emu-alg><ol><li>If <var>day</var> is not finite or <var>time</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Let <var>tv</var> be <var>day</var> <code>*</code> <emu-xref aoid=\"msPerDay\"><a href=\"#eqn-msPerDay\">msPerDay</a></emu-xref> <code>+</code> <var>time</var>, performing the arithmetic according to IEEE 754-2008 rules (that is, as if using the ECMAScript operators <code>*</code> and <code>+</code>).</li><li>If <var>tv</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Return <var>tv</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-localtime": {"num": "20.4.1.8", "title": "#sec-localtime LocalTime ( t )", "html": "<emu-clause id=\"sec-localtime\" aoid=\"LocalTime\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-localtime\">#sec-localtime</span> LocalTime ( <var>t</var> )</h1>\n        <p>The abstract operation LocalTime is used to calculate a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> with UTC date and time of day equal to the local date and time of day at its argument <var>t</var>, effectively converting <var>t</var> from representing an instant in time to representing a date and time of day. It performs the following steps:</p>\n        <emu-alg><ol><li>Return <var>t</var> + LocalTZA(<var>t</var>, <emu-val>true</emu-val>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-eqn class=\"inline\">LocalTime(<emu-xref aoid=\"UTC\"><a href=\"#sec-utc-t\">UTC</a></emu-xref>(<var>t</var>))</emu-eqn> is not necessarily always equal to  <emu-eqn class=\"inline\"><var>t</var></emu-eqn>. Correspondingly,  <emu-eqn class=\"inline\"><emu-xref aoid=\"UTC\"><a href=\"#sec-utc-t\">UTC</a></emu-xref>(LocalTime(<var>t</var>))</emu-eqn> is not necessarily always equal to  <emu-eqn class=\"inline\"><var>t</var></emu-eqn>.</p>\n          <p>In particular, LocalTime maps both members of every pair of distinct time values corresponding to the same repeated local date and time of day near a negative time zone transition (e.g. when the daylight saving time ends or the time zone adjustment is decreased due to a time zone rule change) to the same <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-year-number": {"num": "20.4.1.3", "title": "#sec-year-number Year Number", "html": "<emu-clause id=\"sec-year-number\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-year-number\">#sec-year-number</span> Year Number</h1>\n        <p>ECMAScript uses a proleptic Gregorian calendar in which common years have 365 days and leap years (those that are divisible by 4 but not divisible by 100 and those that are divisible by 400) have 366 days by means of adding a 29th day to February. The <emu-xref href=\"#sec-day-number-and-time-within-day\"><a href=\"#sec-day-number-and-time-within-day\">day number</a></emu-xref> of the first day of year <var>y</var> changes by 365 days for every year of difference between <var>y</var> and 1970 plus one day for each of those that is a leap year, and is defined as:</p>\n        <emu-eqn id=\"eqn-DaysFromYear\" aoid=\"DayFromYear\"><div>DayFromYear(<var>y</var>) = 365 &#215; (<var>y</var> - 1970) + <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1969) / 4) - <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1901) / 100) + <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1601) / 400)</div></emu-eqn>\n        <p>The <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> of the start of a year is:</p>\n        <emu-eqn id=\"eqn-TimeFromYear\" aoid=\"TimeFromYear\"><div>TimeFromYear(<var>y</var>) = <emu-xref aoid=\"msPerDay\"><a href=\"#eqn-msPerDay\">msPerDay</a></emu-xref> &#215; <emu-xref aoid=\"DayFromYear\"><a href=\"#eqn-DaysFromYear\">DayFromYear</a></emu-xref>(<var>y</var>)</div></emu-eqn>\n        <p>A <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> determines a year by:</p>\n        <emu-eqn id=\"eqn-YearFromTime\" aoid=\"YearFromTime\"><div>YearFromTime(<var>t</var>) = the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>y</var> (closest to positive infinity) such that <emu-xref aoid=\"TimeFromYear\"><a href=\"#eqn-TimeFromYear\">TimeFromYear</a></emu-xref>(<var>y</var>) &#8804; <var>t</var></div></emu-eqn>\n        <p>The leap-year function is 1 for a leap year and otherwise is zero:</p>\n        <emu-eqn id=\"eqn-LeapDaysInYear\" aoid=\"LeapDaysInYear\" oldids=\"eqn-InLeapYear\"><div>LeapDaysInYear(<var>y</var>) = <emu-xref aoid=\"DayFromYear\"><a href=\"#eqn-DaysFromYear\">DayFromYear</a></emu-xref>(<var>y</var> + 1) - <emu-xref aoid=\"DayFromYear\"><a href=\"#eqn-DaysFromYear\">DayFromYear</a></emu-xref>(<var>y</var>) - 365<span id=\"eqn-InLeapYear\"></span></div></emu-eqn>\n      </emu-clause>\n\n      "}, "sec-time-values-and-time-range": {"num": "20.4.1.1", "title": "#sec-time-values-and-time-range Time Values", "html": "<emu-clause id=\"sec-time-values-and-time-range\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</span> Time Values</h1>\n        <p>An ECMAScript  <dfn>time value</dfn> is a Number, either a finite <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> representing an instant in time to millisecond precision or <emu-val>NaN</emu-val> representing no specific instant.\n        \n        </p><p>Time is measured in ECMAScript as milliseconds since midnight at the beginning of 01 January, 1970 UTC. Time in ECMAScript does not observe leap seconds; they are ignored. Time calculations assume each and every day contains exactly  <emu-eqn id=\"eqn-msPerDay\" aoid=\"msPerDay\" class=\"inline\">msPerDay = 60 &#215; 60 &#215; 24 &#215; 1000 = 86,400,000</emu-eqn> milliseconds, to align with the POSIX specification of each and every day containing exactly 86,400 seconds.</p>\n        <p>The exact moment of midnight at the beginning of 01 January, 1970 UTC is represented by the time value <emu-val>+0</emu-val>.</p>\n\n        <div id=\"excluded-sec-time-value-range\"><h1><span class=\"secnum\">20.4.1.1.1</span>#sec-time-value-range Time Value Range</h1>...</div><div id=\"excluded-sec-timeclip\"><h1><span class=\"secnum\">20.4.1.1.2</span>#sec-timeclip TimeClip ( time )</h1>...</div></emu-clause>\n\n      "}, "sec-day-number-and-time-within-day": {"num": "20.4.1.2", "title": "#sec-day-number-and-time-within-day Day Number and Time within Day", "html": "<emu-clause id=\"sec-day-number-and-time-within-day\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-day-number-and-time-within-day\">#sec-day-number-and-time-within-day</span> Day Number and Time within Day</h1>\n        <p>A given <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <var>t</var> identifies a  <dfn>day number</dfn> and a specific time within the day.</p>\n        <emu-eqn id=\"eqn-Day\" aoid=\"Day\"><div>Day(<var>t</var>) = <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<var>t</var> / <emu-xref aoid=\"msPerDay\"><a href=\"#eqn-msPerDay\">msPerDay</a></emu-xref>)</div></emu-eqn>\n        <emu-eqn id=\"eqn-TimeWithinDay\" aoid=\"TimeWithinDay\"><div>TimeWithinDay(<var>t</var>) = <var>t</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> <emu-xref aoid=\"msPerDay\"><a href=\"#eqn-msPerDay\">msPerDay</a></emu-xref></div></emu-eqn>\n      </emu-clause>\n\n      "}, "sec-timeclip": {"num": "20.4.1.1.2", "title": "#sec-timeclip TimeClip ( time )", "html": "<emu-clause id=\"sec-timeclip\" aoid=\"TimeClip\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-timeclip\">#sec-timeclip</span> TimeClip ( <var>time</var> )</h1>\n          <p>The abstract operation TimeClip calculates a [[DateValue]]-supported <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> from its argument, which must be an ECMAScript <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>. It performs the following steps:</p>\n          <emu-alg><ol><li>If <var>time</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>time</var>) &gt; 8.64 &#215; 10<sup>15</sup>, return <emu-val>NaN</emu-val>.</li><li>Let <var>clippedTime</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>time</var>).</li><li>If <var>clippedTime</var> is <emu-val>-0</emu-val>, set <var>clippedTime</var> to <emu-val>+0</emu-val>.</li><li>Return <var>clippedTime</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>The point of step 4 is that an implementation is permitted a choice of internal representations of time values, for example as a 64-bit signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or as a 64-bit floating-point value. Depending on the implementation, this internal representation may or may not distinguish <emu-val>-0</emu-val> and <emu-val>+0</emu-val>.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-date-number": {"num": "20.4.1.5", "title": "#sec-date-number Date Number", "html": "<emu-clause id=\"sec-date-number\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date-number\">#sec-date-number</span> Date Number</h1>\n        <p>A date number is identified by an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> in the range 1 through 31, inclusive. The mapping from a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <var>t</var> to a date number is defined by:</p>\n        <emu-eqn aoid=\"DateFromTime\"><div>DateFromTime(<var>t</var>) = <emu-xref aoid=\"DayWithinYear\"><a href=\"#eqn-DayWithinYear\">DayWithinYear</a></emu-xref>(<var>t</var>) - <emu-xref aoid=\"DaysWithinYearBeforeMonth\"><a href=\"#eqn-DaysWithinYearBeforeMonth\">DaysWithinYearBeforeMonth</a></emu-xref>(<emu-xref aoid=\"MonthFromTime\"><a href=\"#sec-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>t</var>), <emu-xref aoid=\"LeapDaysInYear\"><a href=\"#eqn-LeapDaysInYear\">LeapDaysInYear</a></emu-xref>(<emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>t</var>))) + 1</div></emu-eqn>\n      </emu-clause>\n\n      "}, "sec-makeday": {"num": "20.4.1.12", "title": "#sec-makeday MakeDay ( year, month, date )", "html": "<emu-clause id=\"sec-makeday\" aoid=\"MakeDay\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makeday\">#sec-makeday</span> MakeDay ( <var>year</var>, <var>month</var>, <var>date</var> )</h1>\n        <p>The abstract operation MakeDay calculates a number of days from its three arguments, which must be ECMAScript Number values. It performs the following steps:</p>\n        <emu-alg><ol><li>If <var>year</var> is not finite or <var>month</var> is not finite or <var>date</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Let <var>y</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>year</var>).</li><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>month</var>).</li><li>Let <var>d</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>date</var>).</li><li>Let <var>wholeYears</var> be <var>y</var> <code>+</code> <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<var>m</var> / 12), performing the arithmetic according to IEEE 754-2008 rules (that is, as if using the ECMAScript <code>+</code> operator).</li><li>If <var>wholeYears</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Let <var>monthWithinYear</var> be <var>m</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 12.</li><li>Let <var>leapDaysInYear</var> be <emu-xref aoid=\"LeapDaysInYear\"><a href=\"#eqn-LeapDaysInYear\">LeapDaysInYear</a></emu-xref>(<var>wholeYears</var>).</li><li>Let <var>day</var> be <emu-xref aoid=\"DayFromYear\"><a href=\"#eqn-DaysFromYear\">DayFromYear</a></emu-xref>(<var>wholeYears</var>) <code>+</code> <emu-xref aoid=\"DaysWithinYearBeforeMonth\"><a href=\"#eqn-DaysWithinYearBeforeMonth\">DaysWithinYearBeforeMonth</a></emu-xref>(<var>monthWithinYear</var>, <var>leapDaysInYear</var>) <code>+</code> <var>d</var> <code>-</code> 1, performing the arithmetic according to IEEE 754-2008 rules (that is, as if using the ECMAScript operators <code>+</code> and <code>-</code>).</li><li>If <var>day</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Return <var>day</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-utc-t": {"num": "20.4.1.9", "title": "#sec-utc-t UTC ( t )", "html": "<emu-clause id=\"sec-utc-t\" aoid=\"UTC\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-utc-t\">#sec-utc-t</span> UTC ( <var>t</var> )</h1>\n        <p>The abstract operation UTC is used to calculate a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> with local date and time of day corresponding to the UTC date and time of day at its argument <var>t</var>, effectively converting <var>t</var> from representing a date and time of day to representing an instant in time. It performs the following steps:</p>\n        <emu-alg><ol><li>Return <var>t</var> - LocalTZA(<var>t</var>, <emu-val>false</emu-val>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-eqn class=\"inline\">UTC(<emu-xref aoid=\"LocalTime\"><a href=\"#sec-localtime\">LocalTime</a></emu-xref>(<var>t</var>))</emu-eqn> is not necessarily always equal to <var>t</var>.  <emu-eqn class=\"inline\"><emu-xref aoid=\"LocalTime\"><a href=\"#sec-localtime\">LocalTime</a></emu-xref>(UTC(<var>t</var>))</emu-eqn> is not necessarily always equal to <var>t</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-local-time-zone-adjustment": {"num": "20.4.1.7", "title": "#sec-local-time-zone-adjustment LocalTZA ( t, isUTC )", "html": "<emu-clause id=\"sec-local-time-zone-adjustment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-local-time-zone-adjustment\">#sec-local-time-zone-adjustment</span> LocalTZA ( <var>t</var>, <var>isUTC</var> )</h1>\n        <p>LocalTZA is an implementation-defined abstract operation that returns the positive or negative local time zone UTC offset (in milliseconds) at a particular instant indicated by its arguments. The result should be dependent upon political rules regarding standard time and daylight saving time in effect at that instant.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>It is recommended that implementations use the time zone information of the IANA Time Zone Database  <a href=\"https://www.iana.org/time-zones/\">https://www.iana.org/time-zones/</a>.</p>\n        </div></emu-note>\n        <p>When <var>isUTC</var> is <emu-val>true</emu-val>,  <dfn>LocalTZA( <var>t</var>, <emu-val>true</emu-val> )</dfn> interprets <var>t</var> as a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> representing an instant in time. It returns the offset of the local time zone from UTC in milliseconds at that instant. When the result is added to <var>t</var>, it should yield the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> for which UTC date and time of day are equal to the local date and time of day at <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <var>t</var>.</p>\n        <p>When <var>isUTC</var> is <emu-val>false</emu-val>,  <dfn>LocalTZA( <var>t</var>, <emu-val>false</emu-val> )</dfn> interprets <var>t</var> as a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> representing a date and time of day. It returns the offset of the local time zone from UTC in milliseconds at the smallest (closest to negative infinity) <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> <var>earliestMatch</var> for which either the local date and time of day at <var>earliestMatch</var> is equal to the UTC date and time of day at <var>t</var> or the local date and time of day at <var>earliestMatch</var> + 1 is greater than the UTC date and time of day at <var>t</var>. When the result is subtracted from <var>t</var>, it should yield the smallest <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> for which the local date and time of day are equal to the UTC date and time of day at <var>t</var>. If no such <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> exists because of local times skipped by positive time zone transitions (e.g. when the daylight saving time starts or the time zone adjustment is increased due to a time zone rule change), then subtracting the result from <var>t</var> should instead yield the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> for which local date and time of day in the UTC offset applicable before the transition are equal to the UTC date and time of day at <var>t</var>.</p>\n        <p>Input <var>t</var> is nominally a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> but may be any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. When <var>t</var> is near a boundary of the [[DateValue]] range (<emu-xref href=\"#sec-time-value-range\"><a href=\"#sec-time-value-range\" class=\"excluded-xref\" excluded-id=\"sec-time-value-range\">#sec-time-value-range</a></emu-xref>), LocalTZA( <var>t</var>, <emu-val>true</emu-val> ) can return an offset that when added to <var>t</var> results in a value that falls outside the range. The LocalTZA operation must support such values as input, and therefore must not limit <var>t</var> to the [[DateValue]] range.</p>\n        <p>If an implementation does not support a conversion described above or if political rules for time <var>t</var> are not available within the implementation, LocalTZA( <var>t</var>, <var>isUTC</var> ) must return <emu-val>0</emu-val> (equivalent to no local UTC offset).</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The above requirements ensure that ambiguities and impossibilities due to local times repeating at a negative time zone transition (e.g. when the daylight saving time ends or the time zone adjustment is decreased due to a time zone rule change) or being skipped at a positive time zone transition (e.g. when the daylight saving time starts or the time zone adjustment is increased due to a time zone rule change) are resolved by using the UTC offset in effect before the transition.</p>\n          <p>In the America/New_York time zone, 1:30 AM on November 5, 2017 is repeated (because one hour of local times starting with 1:00 AM occur once before and once after the \"fall backward\" negative daylight saving time transition from UTC-04 to UTC-05). LocalTZA(<emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref>(<emu-xref aoid=\"MakeDate\"><a href=\"#sec-makedate\">MakeDate</a></emu-xref>(<emu-xref aoid=\"MakeDay\"><a href=\"#sec-makeday\">MakeDay</a></emu-xref>(2017, 10, 5), <emu-xref aoid=\"MakeTime\"><a href=\"#sec-maketime\">MakeTime</a></emu-xref>(1, 30, 0, 0))), <emu-val>false</emu-val>) returns  <emu-eqn class=\"inline\">-4 &#215; <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref></emu-eqn>, corresponding to the pre-transition offset.</p>\n          <p>In the America/New_York time zone, 2:30 AM on March 12, 2017 in America/New_York does not exist (because one hour of local times starting with 2:00 AM are skipped by the \"spring forward\" positive daylight saving time transition from UTC-05 to UTC-04). LocalTZA(<emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref>(<emu-xref aoid=\"MakeDate\"><a href=\"#sec-makedate\">MakeDate</a></emu-xref>(<emu-xref aoid=\"MakeDay\"><a href=\"#sec-makeday\">MakeDay</a></emu-xref>(2017, 2, 12), <emu-xref aoid=\"MakeTime\"><a href=\"#sec-maketime\">MakeTime</a></emu-xref>(2, 30, 0, 0))), <emu-val>false</emu-val>) returns  <emu-eqn class=\"inline\">-5 &#215; <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref></emu-eqn>, corresponding to an interpretation of the input as representing 2:30 AM UTC-05 despite that instant following the local time zone transition to UTC-04 (in which the same instant is 3:30 AM UTC-04).</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-maketime": {"num": "20.4.1.11", "title": "#sec-maketime MakeTime ( hour, min, sec, millisec )", "html": "<emu-clause id=\"sec-maketime\" aoid=\"MakeTime\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-maketime\">#sec-maketime</span> MakeTime ( <var>hour</var>, <var>min</var>, <var>sec</var>, <var>millisec</var> )</h1>\n        <p>The abstract operation MakeTime calculates a number of milliseconds from its four arguments, which must be ECMAScript Number values. It performs the following steps:</p>\n        <emu-alg><ol><li>If <var>hour</var> is not finite or <var>min</var> is not finite or <var>sec</var> is not finite or <var>millisec</var> is not finite, return <emu-val>NaN</emu-val>.</li><li>Let <var>h</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>hour</var>).</li><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>min</var>).</li><li>Let <var>s</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>sec</var>).</li><li>Let <var>ms</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>millisec</var>).</li><li>Let <var>t</var> be <var>h</var> <code>*</code> <emu-xref aoid=\"msPerHour\"><a href=\"#eqn-msPerHour\">msPerHour</a></emu-xref> <code>+</code> <var>m</var> <code>*</code> <emu-xref aoid=\"msPerMinute\"><a href=\"#eqn-msPerMinute\">msPerMinute</a></emu-xref> <code>+</code> <var>s</var> <code>*</code> <emu-xref aoid=\"msPerSecond\"><a href=\"#eqn-msPerSecond\">msPerSecond</a></emu-xref> <code>+</code> <var>ms</var>, performing the arithmetic according to IEEE 754-2008 rules (that is, as if using the ECMAScript operators <code>*</code> and <code>+</code>).</li><li>Return <var>t</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-month-number": {"num": "20.4.1.4", "title": "#sec-month-number Month Number", "html": "<emu-clause id=\"sec-month-number\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-month-number\">#sec-month-number</span> Month Number</h1>\n        <p>Months are identified by an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> in the range 0 to 11, inclusive. A month value of 0 specifies January; 1 specifies February; 2 specifies March; 3 specifies April; 4 specifies May; 5 specifies June; 6 specifies July; 7 specifies August; 8 specifies September; 9 specifies October; 10 specifies November; and 11 specifies December.</p>\n        <p>The position of a month <var>m</var> within a year depends upon whether or not the year is a leap year:</p>\n        <emu-eqn id=\"eqn-DaysWithinYearBeforeMonth\" aoid=\"DaysWithinYearBeforeMonth\"><div>DaysWithinYearBeforeMonth(<var>m</var>, <var>leapDaysInYear</var>)</div><div>          = 0 if <var>m</var> = 0</div><div>          = 31 if <var>m</var> = 1</div><div>          = 59 + <var>leapDaysInYear</var> if <var>m</var> = 2</div><div>          = 90 + <var>leapDaysInYear</var> if <var>m</var> = 3</div><div>          = 120 + <var>leapDaysInYear</var> if <var>m</var> = 4</div><div>          = 151 + <var>leapDaysInYear</var> if <var>m</var> = 5</div><div>          = 181 + <var>leapDaysInYear</var> if <var>m</var> = 6</div><div>          = 212 + <var>leapDaysInYear</var> if <var>m</var> = 7</div><div>          = 243 + <var>leapDaysInYear</var> if <var>m</var> = 8</div><div>          = 273 + <var>leapDaysInYear</var> if <var>m</var> = 9</div><div>          = 304 + <var>leapDaysInYear</var> if <var>m</var> = 10</div><div>          = 334 + <var>leapDaysInYear</var> if <var>m</var> = 11</div></emu-eqn>\n        <div id=\"excluded-sec-MonthFromTime\"><h1><span class=\"secnum\">20.4.1.4.1</span>#sec-MonthFromTime MonthFromTime ( t )</h1>...</div><p>where</p>\n        <emu-eqn id=\"eqn-DayWithinYear\" aoid=\"DayWithinYear\"><div>DayWithinYear(<var>t</var>) = <emu-xref aoid=\"Day\"><a href=\"#eqn-Day\">Day</a></emu-xref>(<var>t</var>) - <emu-xref aoid=\"DayFromYear\"><a href=\"#eqn-DaysFromYear\">DayFromYear</a></emu-xref>(<emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>t</var>))</div></emu-eqn>\n        <p>Note that  <emu-eqn class=\"inline\"><emu-xref aoid=\"MonthFromTime\"><a href=\"#sec-MonthFromTime\">MonthFromTime</a></emu-xref>(0) = 0</emu-eqn>, corresponding to Thursday, 01 January, 1970.</p>\n      </emu-clause>\n\n      "}, "sec-date-time-string-format": {"num": "20.4.1.14", "title": "#sec-date-time-string-format Date Time String Format", "html": "<emu-clause id=\"sec-date-time-string-format\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</span> Date Time String Format</h1>\n        <p>ECMAScript defines a string interchange format for date-times based upon a simplification of the ISO 8601 calendar date extended format. The format is as follows: <code>YYYY-MM-DDTHH:mm:ss.sssZ</code></p>\n        <p>Where the elements are as follows:</p>\n        <figure>\n          <table class=\"lightweight-table\">\n            <tbody>\n            <tr>\n              <td>\n                <code>YYYY</code>\n              \n              </td>\n              <td>\n                is the year in the proleptic Gregorian calendar as four decimal digits from 0000 to 9999, or as an  <emu-xref href=\"#sec-expanded-years\"><a href=\"#sec-expanded-years\">expanded year</a></emu-xref> of <code>\"+\"</code> or <code>\"-\"</code> followed by six decimal digits.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>-</code>\n              \n              </td>\n              <td>\n                <code>\"-\"</code> (hyphen) appears literally twice in the string.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>MM</code>\n              \n              </td>\n              <td>\n                is the month of the year as two decimal digits from 01 (January) to 12 (December).\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>DD</code>\n              \n              </td>\n              <td>\n                is the day of the month as two decimal digits from 01 to 31.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>T</code>\n              \n              </td>\n              <td>\n                <code>\"T\"</code> appears literally in the string, to indicate the beginning of the time element.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>HH</code>\n              \n              </td>\n              <td>\n                is the number of complete hours that have passed since midnight as two decimal digits from 00 to 24.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>:</code>\n              \n              </td>\n              <td>\n                <code>\":\"</code> (colon) appears literally twice in the string.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>mm</code>\n              \n              </td>\n              <td>\n                is the number of complete minutes since the start of the hour as two decimal digits from 00 to 59.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>ss</code>\n              \n              </td>\n              <td>\n                is the number of complete seconds since the start of the minute as two decimal digits from 00 to 59.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>.</code>\n              \n              </td>\n              <td>\n                <code>\".\"</code> (dot) appears literally in the string.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>sss</code>\n              \n              </td>\n              <td>\n                is the number of complete milliseconds since the start of the second as three decimal digits.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>Z</code>\n              \n              </td>\n              <td>\n                is the UTC offset representation specified as <code>\"Z\"</code> (for UTC with no offset) or an offset of either <code>\"+\"</code> or <code>\"-\"</code> followed by a time expression <code>HH:mm</code> (indicating local time ahead of or behind UTC, respectively)\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure>\n        <p>This format includes date-only forms:</p>\n        <pre>YYYY\nYYYY-MM\nYYYY-MM-DD\n        </pre>\n        <p>It also includes &#8220;date-time&#8221; forms that consist of one of the above date-only forms immediately followed by one of the following time forms with an optional UTC offset representation appended:</p>\n        <pre>THH:mm\nTHH:mm:ss\nTHH:mm:ss.sss\n        </pre>\n        <p>A string containing out-of-bounds or nonconforming elements is not a valid instance of this format.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>As every day both starts and ends with midnight, the two notations <code>00:00</code> and <code>24:00</code> are available to distinguish the two midnights that can be associated with one date. This means that the following two notations refer to exactly the same point in time: <code>1995-02-04T24:00</code> and <code>1995-02-05T00:00</code>. This interpretation of the latter form as \"end of a calendar day\" is consistent with ISO 8601, even though that specification reserves it for describing time intervals and does not permit it within representations of single points in time.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>There exists no international standard that specifies abbreviations for civil time zones like CET, EST, etc. and sometimes the same abbreviation is even used for two very different time zones. For this reason, both ISO 8601 and this format specify numeric representations of time zone offsets.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-expanded-years\"><h1><span class=\"secnum\">20.4.1.14.1</span>#sec-expanded-years Expanded Years</h1>...</div></emu-clause>\n    "}}, "figData": {}}}