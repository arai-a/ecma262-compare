{"from": {"secList": ["sec-runtime-semantics-instantiateasyncfunctionobject", "sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression", "sec-runtime-semantics-instantiateasyncfunctionexpression", "sec-runtime-semantics-methoddefinitionevaluation", "sec-runtime-semantics-instantiateordinaryfunctionexpression", "sec-runtime-semantics-definemethod", "sec-runtime-semantics-instantiatearrowfunctionexpression", "sec-runtime-semantics-classdefinitionevaluation", "sec-runtime-semantics-scriptevaluation", "sec-ecmascript-function-objects", "sec-runtime-semantics-classfielddefinitionevaluation", "sec-runtime-semantics-instantiateordinaryfunctionobject", "sec-runtime-semantics-instantiateasyncgeneratorfunctionobject", "sec-runtime-semantics-instantiategeneratorfunctionobject", "sec-runtime-semantics-instantiatefunctionobject", "sec-runtime-semantics-instantiategeneratorfunctionexpression", "sec-parse-script", "sec-runtime-semantics-instantiateasyncarrowfunctionexpression", "sec-createdynamicfunction", "sec-runtime-semantics-classstaticblockdefinitionevaluation", "sec-ordinaryfunctioncreate"], "secData": {"sec-runtime-semantics-instantiateasyncfunctionobject": {"num": "15.8.2", "title": "#sec-runtime-semantics-instantiateasyncfunctionobject Runtime Semantics: InstantiateAsyncFunctionObject", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncfunctionobject\" oldids=\"sec-async-function-definitions-InstantiateFunctionObject\" type=\"sdo\" aoid=\"InstantiateAsyncFunctionObject\"><span id=\"sec-async-function-definitions-InstantiateFunctionObject\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncfunctionobject\">#sec-runtime-semantics-instantiateasyncfunctionobject</span> Runtime Semantics: InstantiateAsyncFunctionObject</h1>\n      <p>The syntax-directed operation InstantiateAsyncFunctionObject takes arguments <var>scope</var> and <var>privateScope</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-VjNDNC25\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"agdmcdye\" id=\"prod-QVYl6PrK\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression": {"num": "15.6.4", "title": "#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression Runtime Semantics: InstantiateAsyncGeneratorFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncGeneratorFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\">#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression</span> Runtime Semantics: InstantiateAsyncGeneratorFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateAsyncGeneratorFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xruu4gg0\" id=\"prod-A3m5kV04\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-7PTlQqLp\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncfunctionexpression": {"num": "15.8.3", "title": "#sec-runtime-semantics-instantiateasyncfunctionexpression Runtime Semantics: InstantiateAsyncFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncfunctionexpression\">#sec-runtime-semantics-instantiateasyncfunctionexpression</span> Runtime Semantics: InstantiateAsyncFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateAsyncFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"agdmcdye\" id=\"prod-3RN98Vrc\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-iEhgnbem\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-methoddefinitionevaluation": {"num": "15.4.5", "title": "#sec-runtime-semantics-methoddefinitionevaluation Runtime Semantics: MethodDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-methoddefinitionevaluation\" oldids=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation,sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation,sec-asyncgenerator-definitions-propertydefinitionevaluation,sec-async-function-definitions-PropertyDefinitionEvaluation\" type=\"sdo\" aoid=\"MethodDefinitionEvaluation\"><span id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\"></span><span id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\"></span><span id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\"></span><span id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-methoddefinitionevaluation\">#sec-runtime-semantics-methoddefinitionevaluation</span> Runtime Semantics: MethodDefinitionEvaluation</h1>\n      <p>The syntax-directed operation MethodDefinitionEvaluation takes arguments <var>object</var> and <var>enumerable</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-w_uDCOXP\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>methodDef</var>.[[Closure]], <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s7vk7pda\" id=\"prod-JtMhObe9\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>closure</var>, [[Set]]: <emu-val>undefined</emu-val> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lbu40xzc\" id=\"prod-tr90svxc\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <emu-val>undefined</emu-val>, [[Set]]: <var>closure</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-qDk-XFAF\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-lPECR135\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-a75_jVUN\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-runtime-semantics-instantiateordinaryfunctionexpression": {"num": "15.2.5", "title": "#sec-runtime-semantics-instantiateordinaryfunctionexpression Runtime Semantics: InstantiateOrdinaryFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateordinaryfunctionexpression\" type=\"sdo\" aoid=\"InstantiateOrdinaryFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateordinaryfunctionexpression\">#sec-runtime-semantics-instantiateordinaryfunctionexpression</span> Runtime Semantics: InstantiateOrdinaryFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateOrdinaryFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"smus6qca\" id=\"prod-M2Odxhb_\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-ZT_oXgSx\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-definemethod": {"num": "15.4.4", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\" type=\"sdo\" aoid=\"DefineMethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>The syntax-directed operation DefineMethod takes argument <var>object</var> and optional argument <var>functionPrototype</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-VntM4j0E\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>If <var>functionPrototype</var> is present, then<ol><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>prototype</var>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiatearrowfunctionexpression": {"num": "15.3.4", "title": "#sec-runtime-semantics-instantiatearrowfunctionexpression Runtime Semantics: InstantiateArrowFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiatearrowfunctionexpression\" type=\"sdo\" aoid=\"InstantiateArrowFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiatearrowfunctionexpression\">#sec-runtime-semantics-instantiatearrowfunctionexpression</span> Runtime Semantics: InstantiateArrowFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateArrowFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ieeod2mi\" id=\"prod-C8uAwDLj\">\n        <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li id=\"step-arrowfunction-evaluation-functioncreate\">Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step <emu-xref href=\"#step-arrowfunction-evaluation-functioncreate\"><a href=\"#step-arrowfunction-evaluation-functioncreate\" class=\"excluded-xref\" excluded-id=\"step-arrowfunction-evaluation-functioncreate\">#step-arrowfunction-evaluation-functioncreate</a></emu-xref> is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "15.7.14", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" oldids=\"sec-default-constructor-functions\" type=\"sdo\" aoid=\"ClassDefinitionEvaluation\"><span id=\"sec-default-constructor-functions\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>The syntax-directed operation ClassDefinitionEvaluation takes arguments <var>classBinding</var> and <var>className</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For ease of specification, private methods and accessors are included alongside private fields in the [[PrivateElements]] slot of class instances. However, any given object has either all or none of the private methods and accessors defined by a given class. This feature has been designed so that implementations may choose to implement private methods and accessors using a strategy which does not require tracking each method or accessor individually.</p>\n        <p>For example, an implementation could directly associate instance private methods with their corresponding <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> and track, for each object, which class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> have run with that object as their <code>this</code> value. Looking up an instance private method on an object then consists of checking that the class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> which defines the method has been used to initialize the object, then returning the method associated with the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>.</p>\n        <p>This differs from private fields: because field initializers can throw during class instantiation, an individual object may have some proper subset of the private fields of a given class, and so private fields must in general be tracked individually.</p>\n      </div></emu-note>\n      <p>It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uopqpdqx\" id=\"prod-AcPtObVs\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>outerPrivateEnvironment</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>classPrivateEnvironment</var> be <emu-xref aoid=\"NewPrivateEnvironment\"><a href=\"#sec-newprivateenvironment\">NewPrivateEnvironment</a></emu-xref>(<var>outerPrivateEnvironment</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>For each String <var>dn</var> of the <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>, do<ol><li>If <var>classPrivateEnvironment</var>.[[Names]] contains a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>dn</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is only possible for getter/setter pairs.</li></ol></li><li>Else,<ol><li>Let <var>name</var> be a new <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] value is <var>dn</var>.</li><li>Append <var>name</var> to <var>classPrivateEnvironment</var>.[[Names]].</li></ol></li></ol></li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>NOTE: The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment is <var>outerPrivateEnvironment</var> when evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>classPrivateEnvironment</var>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>Let <var>defaultConstructor</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures nothing and performs the following steps when called:<ol><li>Let <var>args</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of arguments that was passed to this function by [[Call]] or [[Construct]].</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, then<ol><li>NOTE: This branch behaves similarly to <code>constructor(...args) { super(...args); }</code>. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> method on <code>%Array.prototype%</code>, this function does not.</li><li>Let <var>func</var> be ! <var>F</var>.[[GetPrototypeOf]]().</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>args</var>, NewTarget).</li></ol></li><li>Else,<ol><li>NOTE: This branch behaves similarly to <code>constructor() {}</code>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%Object.prototype%\"</emu-val>).</li></ol></li></ol></li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>defaultConstructor</var>, 0, <var>className</var>, &#171; [[ConstructorKind]], [[SourceText]] &#187;, <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>, <var>constructorParent</var>).</li></ol></li><li>Else,<ol><li>Let <var>constructorInfo</var> be ! <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform !&#160;<emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>elements</var> be <emu-xref aoid=\"NonConstructorElements\"><a href=\"#sec-static-semantics-nonconstructorelements\">NonConstructorElements</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Let <var>instancePrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticPrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>instanceFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticElements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>e</var> of <var>elements</var>, do<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>element</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with argument <var>proto</var>.</li></ol></li><li>Else,<ol><li>Let <var>element</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with argument <var>F</var>.</li></ol></li><li>If <var>element</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>element</var>).</li></ol></li><li>Set <var>element</var> to <var>element</var>.[[Value]].</li><li>If <var>element</var> is a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>element</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, let <var>container</var> be <var>instancePrivateMethods</var>.</li><li>Else, let <var>container</var> be <var>staticPrivateMethods</var>.</li><li>If <var>container</var> contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>element</var>.[[Key]], then<ol><li>Let <var>existing</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>element</var>.[[Kind]] and <var>existing</var>.[[Kind]] are both <emu-const>accessor</emu-const>.</li><li>If <var>element</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>element</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>existing</var>.[[Get]], [[Set]]: <var>element</var>.[[Set]] }.</li></ol></li><li>Else,<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>element</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>element</var>.[[Get]], [[Set]]: <var>existing</var>.[[Set]] }.</li></ol></li><li>Replace <var>existing</var> in <var>container</var> with <var>combined</var>.</li></ol></li><li>Else,<ol><li>Append <var>element</var> to <var>container</var>.</li></ol></li></ol></li><li>Else if <var>element</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, append <var>element</var> to <var>instanceFields</var>.</li><li>Else, append <var>element</var> to <var>staticElements</var>.</li></ol></li><li>Else if <var>element</var> is a <emu-xref href=\"#sec-classstaticblockdefinition-record-specification-type\"><a href=\"#sec-classstaticblockdefinition-record-specification-type\">ClassStaticBlockDefinition Record</a></emu-xref>, then<ol><li>Append <var>element</var> to <var>staticElements</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Set <var>F</var>.[[PrivateMethods]] to <var>instancePrivateMethods</var>.</li><li>Set <var>F</var>.[[Fields]] to <var>instanceFields</var>.</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>staticPrivateMethods</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>F</var>, <var>method</var>).</li></ol></li><li>For each element <var>elementRecord</var> of <var>staticElements</var>, do<ol><li>If <var>elementRecord</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>F</var>, <var>elementRecord</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>elementRecord</var> is a <emu-xref href=\"#sec-classstaticblockdefinition-record-specification-type\"><a href=\"#sec-classstaticblockdefinition-record-specification-type\">ClassStaticBlockDefinition Record</a></emu-xref>.</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>elementRecord</var>.[[BodyFunction]], <var>F</var>).</li></ol></li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>result</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-scriptevaluation": {"num": "16.1.6", "title": "#sec-runtime-semantics-scriptevaluation ScriptEvaluation ( scriptRecord )", "html": "<emu-clause id=\"sec-runtime-semantics-scriptevaluation\" type=\"abstract operation\" aoid=\"ScriptEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-scriptevaluation\">#sec-runtime-semantics-scriptevaluation</span> ScriptEvaluation ( <var>scriptRecord</var> )</h1>\n      <p>The abstract operation ScriptEvaluation takes argument <var>scriptRecord</var>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>Let <var>globalEnv</var> be <var>scriptRecord</var>.[[Realm]].[[GlobalEnv]].</li><li>Let <var>scriptContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>scriptContext</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>scriptContext</var> to <var>scriptRecord</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>scriptContext</var> to <var>scriptRecord</var>.</li><li>Set the VariableEnvironment of <var>scriptContext</var> to <var>globalEnv</var>.</li><li>Set the LexicalEnvironment of <var>scriptContext</var> to <var>globalEnv</var>.</li><li>Set the PrivateEnvironment of <var>scriptContext</var> to <emu-val>null</emu-val>.</li><li>Suspend the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Push <var>scriptContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>scriptContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>scriptBody</var> be <var>scriptRecord</var>.[[ECMAScriptCode]].</li><li>Let <var>result</var> be <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref>(<var>scriptBody</var>, <var>globalEnv</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>scriptBody</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Suspend <var>scriptContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ecmascript-function-objects": {"num": "10.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> and has the same internal slots and the same internal methods as other <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary objects</a></emu-xref>. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"strict-function\" variants=\"strict functions\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"non-strict-function\" variants=\"non-strict functions\">non-strict function</dfn>.</p>\n    <p>In addition to [[Extensible]] and [[Prototype]], ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> also have the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</p>\n    <emu-table id=\"table-internal-slots-of-ecmascript-function-objects\" caption=\"Internal Slots of ECMAScript Function Objects\" oldids=\"table-27\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</span>: Internal Slots of ECMAScript Function Objects</figcaption><span id=\"table-27\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          </th>\n          <th>\n            Type\n          </th>\n          <th>\n            Description\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PrivateEnvironment]]\n          </td>\n          <td>\n            <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> | <emu-val>null</emu-val>\n          </td>\n          <td>\n            The <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> for <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Names</a></emu-xref> that the function was closed over. <emu-val>null</emu-val> if this function is not syntactically contained within a class. Used as the outer PrivateEnvironment for inner classes when evaluating the code of the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          </td>\n          <td>\n            The script or module in which the function was created.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and any other <emu-val>this</emu-val> value is first passed to <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          </td>\n          <td>\n            Object\n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          </td>\n          <td>\n            sequence of Unicode code points\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Fields]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Records</a></emu-xref>\n          </td>\n          <td>\n            If the function is a class, this is a list of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Records</a></emu-xref> representing the non-static fields and corresponding initializers of the class.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PrivateMethods]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElements</a></emu-xref>\n          </td>\n          <td>\n            If the function is a class, this is a list representing the non-static private methods and accessors of the class.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ClassFieldInitializerName]]\n          </td>\n          <td>\n            String | Symbol | <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> | <emu-const>empty</emu-const>\n          </td>\n          <td>\n            If the function is created as the initializer of a class field, the name to use for <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of the field; <emu-const>empty</emu-const> otherwise.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> have the [[Call]] internal method defined here. ECMAScript functions that are also <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">10.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">10.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">10.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">10.2.4</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">10.2.5</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">10.2.6</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">10.2.7</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-definemethodproperty\"><h1><span class=\"secnum\">10.2.8</span>#sec-definemethodproperty DefineMethodProperty ( homeObject, key, closure, enumerable )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">10.2.9</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">10.2.10</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">10.2.11</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-classfielddefinitionevaluation": {"num": "15.7.10", "title": "#sec-runtime-semantics-classfielddefinitionevaluation Runtime Semantics: ClassFieldDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classfielddefinitionevaluation\" type=\"sdo\" aoid=\"ClassFieldDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classfielddefinitionevaluation\">#sec-runtime-semantics-classfielddefinitionevaluation</span> Runtime Semantics: ClassFieldDefinitionEvaluation</h1>\n      <p>The syntax-directed operation ClassFieldDefinitionEvaluation takes argument <var>homeObject</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-deOh_-BS\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>name</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the empty sequence of Unicode code points.</li><li>Let <var>initializer</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>initializer</var>, <var>homeObject</var>).</li><li>Set <var>initializer</var>.[[ClassFieldInitializerName]] to <var>name</var>.</li></ol></li><li>Else,<ol><li>Let <var>initializer</var> be <emu-const>empty</emu-const>.</li></ol></li><li>Return the <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref> { [[Name]]: <var>name</var>, [[Initializer]]: <var>initializer</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        The function created for <var>initializer</var> is never directly accessible to ECMAScript code.\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateordinaryfunctionobject": {"num": "15.2.4", "title": "#sec-runtime-semantics-instantiateordinaryfunctionobject Runtime Semantics: InstantiateOrdinaryFunctionObject", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateordinaryfunctionobject\" oldids=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\" type=\"sdo\" aoid=\"InstantiateOrdinaryFunctionObject\"><span id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateordinaryfunctionobject\">#sec-runtime-semantics-instantiateordinaryfunctionobject</span> Runtime Semantics: InstantiateOrdinaryFunctionObject</h1>\n      <p>The syntax-directed operation InstantiateOrdinaryFunctionObject takes arguments <var>scope</var> and <var>privateScope</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-oT86BVb2\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"smus6qca\" id=\"prod-TjR6TGOd\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncgeneratorfunctionobject": {"num": "15.6.3", "title": "#sec-runtime-semantics-instantiateasyncgeneratorfunctionobject Runtime Semantics: InstantiateAsyncGeneratorFunctionObject", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionobject\" oldids=\"sec-asyncgenerator-definitions-instantiatefunctionobject\" type=\"sdo\" aoid=\"InstantiateAsyncGeneratorFunctionObject\"><span id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionobject\">#sec-runtime-semantics-instantiateasyncgeneratorfunctionobject</span> Runtime Semantics: InstantiateAsyncGeneratorFunctionObject</h1>\n      <p>The syntax-directed operation InstantiateAsyncGeneratorFunctionObject takes arguments <var>scope</var> and <var>privateScope</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-JvNVLw_7\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xruu4gg0\" id=\"prod-G-CKcSEp\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiategeneratorfunctionobject": {"num": "15.5.3", "title": "#sec-runtime-semantics-instantiategeneratorfunctionobject Runtime Semantics: InstantiateGeneratorFunctionObject", "html": "<emu-clause id=\"sec-runtime-semantics-instantiategeneratorfunctionobject\" oldids=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\" type=\"sdo\" aoid=\"InstantiateGeneratorFunctionObject\"><span id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiategeneratorfunctionobject\">#sec-runtime-semantics-instantiategeneratorfunctionobject</span> Runtime Semantics: InstantiateGeneratorFunctionObject</h1>\n      <p>The syntax-directed operation InstantiateGeneratorFunctionObject takes arguments <var>scope</var> and <var>privateScope</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-x_w-E_WI\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dsczygsq\" id=\"prod-zyQVJwqE\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiatefunctionobject": {"num": "8.5.1", "title": "#sec-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-runtime-semantics-instantiatefunctionobject\" type=\"sdo\" aoid=\"InstantiateFunctionObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiatefunctionobject\">#sec-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>The syntax-directed operation InstantiateFunctionObject takes arguments <var>scope</var> and <var>privateScope</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-mfAdULQi\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"smus6qca\" id=\"prod-f7nt2HkW\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ? <emu-xref aoid=\"InstantiateOrdinaryFunctionObject\"><a href=\"#sec-runtime-semantics-instantiateordinaryfunctionobject\">InstantiateOrdinaryFunctionObject</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> with arguments <var>scope</var> and <var>privateScope</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-BE72OMfT\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"dsczygsq\" id=\"prod-9FriOUuY\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ? <emu-xref aoid=\"InstantiateGeneratorFunctionObject\"><a href=\"#sec-runtime-semantics-instantiategeneratorfunctionobject\">InstantiateGeneratorFunctionObject</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> with arguments <var>scope</var> and <var>privateScope</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-MBXIRXX3\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"xruu4gg0\" id=\"prod-0BnnuWOV\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ? <emu-xref aoid=\"InstantiateAsyncGeneratorFunctionObject\"><a href=\"#sec-runtime-semantics-instantiateasyncgeneratorfunctionobject\">InstantiateAsyncGeneratorFunctionObject</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> with arguments <var>scope</var> and <var>privateScope</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-cpVe0Sep\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"agdmcdye\" id=\"prod-g0-rNkU8\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ? <emu-xref aoid=\"InstantiateAsyncFunctionObject\"><a href=\"#sec-runtime-semantics-instantiateasyncfunctionobject\">InstantiateAsyncFunctionObject</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> with arguments <var>scope</var> and <var>privateScope</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiategeneratorfunctionexpression": {"num": "15.5.4", "title": "#sec-runtime-semantics-instantiategeneratorfunctionexpression Runtime Semantics: InstantiateGeneratorFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiategeneratorfunctionexpression\" type=\"sdo\" aoid=\"InstantiateGeneratorFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiategeneratorfunctionexpression\">#sec-runtime-semantics-instantiategeneratorfunctionexpression</span> Runtime Semantics: InstantiateGeneratorFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateGeneratorFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dsczygsq\" id=\"prod-FnOrbSnb\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-sxTe1ywL\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-parse-script": {"num": "16.1.5", "title": "#sec-parse-script ParseScript ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parse-script\" type=\"abstract operation\" aoid=\"ParseScript\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parse-script\">#sec-parse-script</span> ParseScript ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n      <p>The abstract operation ParseScript takes arguments <var>sourceText</var> (ECMAScript source text), <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Return <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[ECMAScriptCode]]: <var>body</var>, [[HostDefined]]: <var>hostDefined</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An implementation may parse script source text and analyse it for Early Error conditions prior to evaluation of ParseScript for that script source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseScript upon that source text.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncarrowfunctionexpression": {"num": "15.9.4", "title": "#sec-runtime-semantics-instantiateasyncarrowfunctionexpression Runtime Semantics: InstantiateAsyncArrowFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncarrowfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncArrowFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncarrowfunctionexpression\">#sec-runtime-semantics-instantiateasyncarrowfunctionexpression</span> Runtime Semantics: InstantiateAsyncArrowFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateAsyncArrowFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dqxgopsb\" id=\"prod-kBFLOl9Q\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"auwv8gbh\" id=\"prod-YQv2CZBp\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>head</var> be the <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createdynamicfunction": {"num": "20.2.1.1.1", "title": "#sec-createdynamicfunction CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" type=\"abstract operation\" oldids=\"table-dynamic-function-sourcetext-prefixes\" aoid=\"CreateDynamicFunction\"><span id=\"table-dynamic-function-sourcetext-prefixes\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (<emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language values</a></emu-xref>). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%GeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"async function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>prefix</var> be <emu-val>\"async function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1,<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Let <var>sourceText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>sourceString</var>).</li><li>Let <var>parameters</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>), <var>parameterSym</var>).</li><li>If <var>parameters</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>bodyString</var>), <var>bodySym</var>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: The parameters and body are parsed separately to ensure that each is valid alone. For example, <code>new Function(\"/*\", \"*/ ) {\")</code> is not legal.</li><li>NOTE: If this step is reached, <var>sourceText</var> must match <var>exprSym</var> (although the reverse implication does not hold). The purpose of the next two steps is to enforce any Early Error rules which apply to <var>exprSym</var> directly.</li><li>Let <var>expr</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <var>exprSym</var>).</li><li>If <var>expr</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>privateScope</var> be <emu-val>null</emu-val>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>sourceText</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Functions whose <var>kind</var> is <emu-const>async</emu-const> are not constructible and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>CreateDynamicFunction defines a <emu-val>\"prototype\"</emu-val> property on any function it creates whose <var>kind</var> is not <emu-const>async</emu-const> to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-runtime-semantics-classstaticblockdefinitionevaluation": {"num": "15.7.11", "title": "#sec-runtime-semantics-classstaticblockdefinitionevaluation Runtime Semantics: ClassStaticBlockDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classstaticblockdefinitionevaluation\" type=\"sdo\" aoid=\"ClassStaticBlockDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classstaticblockdefinitionevaluation\">#sec-runtime-semantics-classstaticblockdefinitionevaluation</span> Runtime Semantics: ClassStaticBlockDefinitionEvaluation</h1>\n      <p>The syntax-directed operation ClassStaticBlockDefinitionEvaluation takes argument <var>homeObject</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"ClassStaticBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hv6hopt7\" id=\"prod-sy-617ri\">\n        <emu-t>static</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lex</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the empty sequence of Unicode code points.</li><li>Let <var>formalParameters</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>bodyFunction</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameters</var>, <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>lex</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>bodyFunction</var>, <var>homeObject</var>).</li><li>Return the <emu-xref href=\"#sec-classstaticblockdefinition-record-specification-type\"><a href=\"#sec-classstaticblockdefinition-record-specification-type\">ClassStaticBlockDefinition Record</a></emu-xref> { [[BodyFunction]]: <var>bodyFunction</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The function <var>bodyFunction</var> is never directly accessible to ECMAScript code.</div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ordinaryfunctioncreate": {"num": "10.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" type=\"abstract operation\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\" aoid=\"OrdinaryFunctionCreate\"><span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (<emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>), and <var>PrivateScope</var> (a <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> or <emu-val>null</emu-val>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[PrivateEnvironment]] to <var>PrivateScope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[Fields]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[PrivateMethods]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[ClassFieldInitializerName]] to <emu-const>empty</emu-const>.</li><li>Let <var>len</var> be the <emu-xref aoid=\"ExpectedArgumentCount\"><a href=\"#sec-static-semantics-expectedargumentcount\">ExpectedArgumentCount</a></emu-xref> of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 34"}}, "to": {"secList": ["sec-runtime-semantics-instantiateasyncfunctionobject", "sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression", "sec-runtime-semantics-instantiateasyncfunctionexpression", "sec-runtime-semantics-methoddefinitionevaluation", "sec-runtime-semantics-instantiateordinaryfunctionexpression", "sec-runtime-semantics-definemethod", "sec-runtime-semantics-instantiatearrowfunctionexpression", "sec-runtime-semantics-classdefinitionevaluation", "sec-runtime-semantics-scriptevaluation", "sec-ecmascript-function-objects", "sec-runtime-semantics-classfielddefinitionevaluation", "sec-runtime-semantics-instantiateordinaryfunctionobject", "sec-runtime-semantics-instantiateasyncgeneratorfunctionobject", "sec-runtime-semantics-instantiategeneratorfunctionobject", "sec-runtime-semantics-instantiatefunctionobject", "sec-runtime-semantics-instantiategeneratorfunctionexpression", "sec-parse-script", "sec-runtime-semantics-instantiateasyncarrowfunctionexpression", "sec-createdynamicfunction", "sec-runtime-semantics-classstaticblockdefinitionevaluation", "sec-ordinaryfunctioncreate"], "secData": {"sec-runtime-semantics-instantiateasyncfunctionobject": {"num": "15.8.2", "title": "#sec-runtime-semantics-instantiateasyncfunctionobject Runtime Semantics: InstantiateAsyncFunctionObject", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncfunctionobject\" oldids=\"sec-async-function-definitions-InstantiateFunctionObject\" type=\"sdo\" aoid=\"InstantiateAsyncFunctionObject\"><span id=\"sec-async-function-definitions-InstantiateFunctionObject\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncfunctionobject\">#sec-runtime-semantics-instantiateasyncfunctionobject</span> Runtime Semantics: InstantiateAsyncFunctionObject</h1>\n      <p>The syntax-directed operation InstantiateAsyncFunctionObject takes arguments <var>env</var> and <var>privateEnv</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-VjNDNC25\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"agdmcdye\" id=\"prod-QVYl6PrK\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression": {"num": "15.6.4", "title": "#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression Runtime Semantics: InstantiateAsyncGeneratorFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncGeneratorFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\">#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression</span> Runtime Semantics: InstantiateAsyncGeneratorFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateAsyncGeneratorFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xruu4gg0\" id=\"prod-A3m5kV04\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-7PTlQqLp\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>outerEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>outerEnv</var>).</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncfunctionexpression": {"num": "15.8.3", "title": "#sec-runtime-semantics-instantiateasyncfunctionexpression Runtime Semantics: InstantiateAsyncFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncfunctionexpression\">#sec-runtime-semantics-instantiateasyncfunctionexpression</span> Runtime Semantics: InstantiateAsyncFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateAsyncFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"agdmcdye\" id=\"prod-3RN98Vrc\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-iEhgnbem\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>outerEnv</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>outerEnv</var>).</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-methoddefinitionevaluation": {"num": "15.4.5", "title": "#sec-runtime-semantics-methoddefinitionevaluation Runtime Semantics: MethodDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-methoddefinitionevaluation\" oldids=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation,sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation,sec-asyncgenerator-definitions-propertydefinitionevaluation,sec-async-function-definitions-PropertyDefinitionEvaluation\" type=\"sdo\" aoid=\"MethodDefinitionEvaluation\"><span id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\"></span><span id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\"></span><span id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\"></span><span id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-methoddefinitionevaluation\">#sec-runtime-semantics-methoddefinitionevaluation</span> Runtime Semantics: MethodDefinitionEvaluation</h1>\n      <p>The syntax-directed operation MethodDefinitionEvaluation takes arguments <var>object</var> and <var>enumerable</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-w_uDCOXP\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>methodDef</var>.[[Closure]], <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s7vk7pda\" id=\"prod-JtMhObe9\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>closure</var>, [[Set]]: <emu-val>undefined</emu-val> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lbu40xzc\" id=\"prod-tr90svxc\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <emu-val>undefined</emu-val>, [[Set]]: <var>closure</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-qDk-XFAF\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-lPECR135\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-a75_jVUN\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-runtime-semantics-instantiateordinaryfunctionexpression": {"num": "15.2.5", "title": "#sec-runtime-semantics-instantiateordinaryfunctionexpression Runtime Semantics: InstantiateOrdinaryFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateordinaryfunctionexpression\" type=\"sdo\" aoid=\"InstantiateOrdinaryFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateordinaryfunctionexpression\">#sec-runtime-semantics-instantiateordinaryfunctionexpression</span> Runtime Semantics: InstantiateOrdinaryFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateOrdinaryFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"smus6qca\" id=\"prod-M2Odxhb_\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-ZT_oXgSx\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>outerEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>outerEnv</var>).</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-definemethod": {"num": "15.4.4", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\" type=\"sdo\" aoid=\"DefineMethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>The syntax-directed operation DefineMethod takes argument <var>object</var> and optional argument <var>functionPrototype</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-VntM4j0E\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>If <var>functionPrototype</var> is present, then<ol><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>prototype</var>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiatearrowfunctionexpression": {"num": "15.3.4", "title": "#sec-runtime-semantics-instantiatearrowfunctionexpression Runtime Semantics: InstantiateArrowFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiatearrowfunctionexpression\" type=\"sdo\" aoid=\"InstantiateArrowFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiatearrowfunctionexpression\">#sec-runtime-semantics-instantiatearrowfunctionexpression</span> Runtime Semantics: InstantiateArrowFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateArrowFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ieeod2mi\" id=\"prod-C8uAwDLj\">\n        <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li id=\"step-arrowfunction-evaluation-functioncreate\">Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step <emu-xref href=\"#step-arrowfunction-evaluation-functioncreate\"><a href=\"#step-arrowfunction-evaluation-functioncreate\" class=\"excluded-xref\" excluded-id=\"step-arrowfunction-evaluation-functioncreate\">#step-arrowfunction-evaluation-functioncreate</a></emu-xref> is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>env</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "15.7.14", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" oldids=\"sec-default-constructor-functions\" type=\"sdo\" aoid=\"ClassDefinitionEvaluation\"><span id=\"sec-default-constructor-functions\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>The syntax-directed operation ClassDefinitionEvaluation takes arguments <var>classBinding</var> and <var>className</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For ease of specification, private methods and accessors are included alongside private fields in the [[PrivateElements]] slot of class instances. However, any given object has either all or none of the private methods and accessors defined by a given class. This feature has been designed so that implementations may choose to implement private methods and accessors using a strategy which does not require tracking each method or accessor individually.</p>\n        <p>For example, an implementation could directly associate instance private methods with their corresponding <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> and track, for each object, which class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> have run with that object as their <code>this</code> value. Looking up an instance private method on an object then consists of checking that the class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> which defines the method has been used to initialize the object, then returning the method associated with the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>.</p>\n        <p>This differs from private fields: because field initializers can throw during class instantiation, an individual object may have some proper subset of the private fields of a given class, and so private fields must in general be tracked individually.</p>\n      </div></emu-note>\n      <p>It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uopqpdqx\" id=\"prod-AcPtObVs\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classEnv</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>outerPrivateEnvironment</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>classPrivateEnvironment</var> be <emu-xref aoid=\"NewPrivateEnvironment\"><a href=\"#sec-newprivateenvironment\">NewPrivateEnvironment</a></emu-xref>(<var>outerPrivateEnvironment</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>For each String <var>dn</var> of the <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>, do<ol><li>If <var>classPrivateEnvironment</var>.[[Names]] contains a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>dn</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is only possible for getter/setter pairs.</li></ol></li><li>Else,<ol><li>Let <var>name</var> be a new <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] value is <var>dn</var>.</li><li>Append <var>name</var> to <var>classPrivateEnvironment</var>.[[Names]].</li></ol></li></ol></li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classEnv</var>.</li><li>NOTE: The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment is <var>outerPrivateEnvironment</var> when evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classEnv</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>classPrivateEnvironment</var>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>Let <var>defaultConstructor</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures nothing and performs the following steps when called:<ol><li>Let <var>args</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of arguments that was passed to this function by [[Call]] or [[Construct]].</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, then<ol><li>NOTE: This branch behaves similarly to <code>constructor(...args) { super(...args); }</code>. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> method on <code>%Array.prototype%</code>, this function does not.</li><li>Let <var>func</var> be ! <var>F</var>.[[GetPrototypeOf]]().</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>args</var>, NewTarget).</li></ol></li><li>Else,<ol><li>NOTE: This branch behaves similarly to <code>constructor() {}</code>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%Object.prototype%\"</emu-val>).</li></ol></li></ol></li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>defaultConstructor</var>, 0, <var>className</var>, &#171; [[ConstructorKind]], [[SourceText]] &#187;, <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>, <var>constructorParent</var>).</li></ol></li><li>Else,<ol><li>Let <var>constructorInfo</var> be ! <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform !&#160;<emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>elements</var> be <emu-xref aoid=\"NonConstructorElements\"><a href=\"#sec-static-semantics-nonconstructorelements\">NonConstructorElements</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Let <var>instancePrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticPrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>instanceFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticElements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>e</var> of <var>elements</var>, do<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>element</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with argument <var>proto</var>.</li></ol></li><li>Else,<ol><li>Let <var>element</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with argument <var>F</var>.</li></ol></li><li>If <var>element</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>element</var>).</li></ol></li><li>Set <var>element</var> to <var>element</var>.[[Value]].</li><li>If <var>element</var> is a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>element</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, let <var>container</var> be <var>instancePrivateMethods</var>.</li><li>Else, let <var>container</var> be <var>staticPrivateMethods</var>.</li><li>If <var>container</var> contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>element</var>.[[Key]], then<ol><li>Let <var>existing</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>element</var>.[[Kind]] and <var>existing</var>.[[Kind]] are both <emu-const>accessor</emu-const>.</li><li>If <var>element</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>element</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>existing</var>.[[Get]], [[Set]]: <var>element</var>.[[Set]] }.</li></ol></li><li>Else,<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>element</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>element</var>.[[Get]], [[Set]]: <var>existing</var>.[[Set]] }.</li></ol></li><li>Replace <var>existing</var> in <var>container</var> with <var>combined</var>.</li></ol></li><li>Else,<ol><li>Append <var>element</var> to <var>container</var>.</li></ol></li></ol></li><li>Else if <var>element</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, append <var>element</var> to <var>instanceFields</var>.</li><li>Else, append <var>element</var> to <var>staticElements</var>.</li></ol></li><li>Else if <var>element</var> is a <emu-xref href=\"#sec-classstaticblockdefinition-record-specification-type\"><a href=\"#sec-classstaticblockdefinition-record-specification-type\">ClassStaticBlockDefinition Record</a></emu-xref>, then<ol><li>Append <var>element</var> to <var>staticElements</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classEnv</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Set <var>F</var>.[[PrivateMethods]] to <var>instancePrivateMethods</var>.</li><li>Set <var>F</var>.[[Fields]] to <var>instanceFields</var>.</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>staticPrivateMethods</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>F</var>, <var>method</var>).</li></ol></li><li>For each element <var>elementRecord</var> of <var>staticElements</var>, do<ol><li>If <var>elementRecord</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>F</var>, <var>elementRecord</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>elementRecord</var> is a <emu-xref href=\"#sec-classstaticblockdefinition-record-specification-type\"><a href=\"#sec-classstaticblockdefinition-record-specification-type\">ClassStaticBlockDefinition Record</a></emu-xref>.</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>elementRecord</var>.[[BodyFunction]], <var>F</var>).</li></ol></li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>result</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-scriptevaluation": {"num": "16.1.6", "title": "#sec-runtime-semantics-scriptevaluation ScriptEvaluation ( scriptRecord )", "html": "<emu-clause id=\"sec-runtime-semantics-scriptevaluation\" type=\"abstract operation\" aoid=\"ScriptEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-scriptevaluation\">#sec-runtime-semantics-scriptevaluation</span> ScriptEvaluation ( <var>scriptRecord</var> )</h1>\n      <p>The abstract operation ScriptEvaluation takes argument <var>scriptRecord</var>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>Let <var>globalEnv</var> be <var>scriptRecord</var>.[[Realm]].[[GlobalEnv]].</li><li>Let <var>scriptContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>scriptContext</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>scriptContext</var> to <var>scriptRecord</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>scriptContext</var> to <var>scriptRecord</var>.</li><li>Set the VariableEnvironment of <var>scriptContext</var> to <var>globalEnv</var>.</li><li>Set the LexicalEnvironment of <var>scriptContext</var> to <var>globalEnv</var>.</li><li>Set the PrivateEnvironment of <var>scriptContext</var> to <emu-val>null</emu-val>.</li><li>Suspend the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Push <var>scriptContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>scriptContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>script</var> be <var>scriptRecord</var>.[[ECMAScriptCode]].</li><li>Let <var>result</var> be <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref>(<var>script</var>, <var>globalEnv</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>script</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Suspend <var>scriptContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ecmascript-function-objects": {"num": "10.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> and has the same internal slots and the same internal methods as other <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary objects</a></emu-xref>. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"strict-function\" variants=\"strict functions\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"non-strict-function\" variants=\"non-strict functions\">non-strict function</dfn>.</p>\n    <p>In addition to [[Extensible]] and [[Prototype]], ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> also have the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</p>\n    <emu-table id=\"table-internal-slots-of-ecmascript-function-objects\" caption=\"Internal Slots of ECMAScript Function Objects\" oldids=\"table-27\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</span>: Internal Slots of ECMAScript Function Objects</figcaption><span id=\"table-27\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          </th>\n          <th>\n            Type\n          </th>\n          <th>\n            Description\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PrivateEnvironment]]\n          </td>\n          <td>\n            <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> | <emu-val>null</emu-val>\n          </td>\n          <td>\n            The <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> for <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Names</a></emu-xref> that the function was closed over. <emu-val>null</emu-val> if this function is not syntactically contained within a class. Used as the outer PrivateEnvironment for inner classes when evaluating the code of the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          </td>\n          <td>\n            The script or module in which the function was created.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and any other <emu-val>this</emu-val> value is first passed to <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          </td>\n          <td>\n            Object\n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          </td>\n          <td>\n            sequence of Unicode code points\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Fields]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Records</a></emu-xref>\n          </td>\n          <td>\n            If the function is a class, this is a list of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Records</a></emu-xref> representing the non-static fields and corresponding initializers of the class.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PrivateMethods]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElements</a></emu-xref>\n          </td>\n          <td>\n            If the function is a class, this is a list representing the non-static private methods and accessors of the class.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ClassFieldInitializerName]]\n          </td>\n          <td>\n            String | Symbol | <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> | <emu-const>empty</emu-const>\n          </td>\n          <td>\n            If the function is created as the initializer of a class field, the name to use for <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of the field; <emu-const>empty</emu-const> otherwise.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> have the [[Call]] internal method defined here. ECMAScript functions that are also <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">10.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">10.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">10.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, env, privateEnv )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">10.2.4</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">10.2.5</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">10.2.6</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">10.2.7</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-definemethodproperty\"><h1><span class=\"secnum\">10.2.8</span>#sec-definemethodproperty DefineMethodProperty ( homeObject, key, closure, enumerable )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">10.2.9</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">10.2.10</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">10.2.11</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-classfielddefinitionevaluation": {"num": "15.7.10", "title": "#sec-runtime-semantics-classfielddefinitionevaluation Runtime Semantics: ClassFieldDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classfielddefinitionevaluation\" type=\"sdo\" aoid=\"ClassFieldDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classfielddefinitionevaluation\">#sec-runtime-semantics-classfielddefinitionevaluation</span> Runtime Semantics: ClassFieldDefinitionEvaluation</h1>\n      <p>The syntax-directed operation ClassFieldDefinitionEvaluation takes argument <var>homeObject</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-deOh_-BS\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>name</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the empty sequence of Unicode code points.</li><li>Let <var>initializer</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>initializer</var>, <var>homeObject</var>).</li><li>Set <var>initializer</var>.[[ClassFieldInitializerName]] to <var>name</var>.</li></ol></li><li>Else,<ol><li>Let <var>initializer</var> be <emu-const>empty</emu-const>.</li></ol></li><li>Return the <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref> { [[Name]]: <var>name</var>, [[Initializer]]: <var>initializer</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        The function created for <var>initializer</var> is never directly accessible to ECMAScript code.\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateordinaryfunctionobject": {"num": "15.2.4", "title": "#sec-runtime-semantics-instantiateordinaryfunctionobject Runtime Semantics: InstantiateOrdinaryFunctionObject", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateordinaryfunctionobject\" oldids=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\" type=\"sdo\" aoid=\"InstantiateOrdinaryFunctionObject\"><span id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateordinaryfunctionobject\">#sec-runtime-semantics-instantiateordinaryfunctionobject</span> Runtime Semantics: InstantiateOrdinaryFunctionObject</h1>\n      <p>The syntax-directed operation InstantiateOrdinaryFunctionObject takes arguments <var>env</var> and <var>privateEnv</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-oT86BVb2\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"smus6qca\" id=\"prod-TjR6TGOd\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncgeneratorfunctionobject": {"num": "15.6.3", "title": "#sec-runtime-semantics-instantiateasyncgeneratorfunctionobject Runtime Semantics: InstantiateAsyncGeneratorFunctionObject", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionobject\" oldids=\"sec-asyncgenerator-definitions-instantiatefunctionobject\" type=\"sdo\" aoid=\"InstantiateAsyncGeneratorFunctionObject\"><span id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionobject\">#sec-runtime-semantics-instantiateasyncgeneratorfunctionobject</span> Runtime Semantics: InstantiateAsyncGeneratorFunctionObject</h1>\n      <p>The syntax-directed operation InstantiateAsyncGeneratorFunctionObject takes arguments <var>env</var> and <var>privateEnv</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-JvNVLw_7\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xruu4gg0\" id=\"prod-G-CKcSEp\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiategeneratorfunctionobject": {"num": "15.5.3", "title": "#sec-runtime-semantics-instantiategeneratorfunctionobject Runtime Semantics: InstantiateGeneratorFunctionObject", "html": "<emu-clause id=\"sec-runtime-semantics-instantiategeneratorfunctionobject\" oldids=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\" type=\"sdo\" aoid=\"InstantiateGeneratorFunctionObject\"><span id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiategeneratorfunctionobject\">#sec-runtime-semantics-instantiategeneratorfunctionobject</span> Runtime Semantics: InstantiateGeneratorFunctionObject</h1>\n      <p>The syntax-directed operation InstantiateGeneratorFunctionObject takes arguments <var>env</var> and <var>privateEnv</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-x_w-E_WI\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dsczygsq\" id=\"prod-zyQVJwqE\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiatefunctionobject": {"num": "8.5.1", "title": "#sec-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-runtime-semantics-instantiatefunctionobject\" type=\"sdo\" aoid=\"InstantiateFunctionObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiatefunctionobject\">#sec-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>The syntax-directed operation InstantiateFunctionObject takes arguments <var>env</var> and <var>privateEnv</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-mfAdULQi\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"smus6qca\" id=\"prod-f7nt2HkW\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ? <emu-xref aoid=\"InstantiateOrdinaryFunctionObject\"><a href=\"#sec-runtime-semantics-instantiateordinaryfunctionobject\">InstantiateOrdinaryFunctionObject</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> with arguments <var>env</var> and <var>privateEnv</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-BE72OMfT\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"dsczygsq\" id=\"prod-9FriOUuY\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ? <emu-xref aoid=\"InstantiateGeneratorFunctionObject\"><a href=\"#sec-runtime-semantics-instantiategeneratorfunctionobject\">InstantiateGeneratorFunctionObject</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> with arguments <var>env</var> and <var>privateEnv</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-MBXIRXX3\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"xruu4gg0\" id=\"prod-0BnnuWOV\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ? <emu-xref aoid=\"InstantiateAsyncGeneratorFunctionObject\"><a href=\"#sec-runtime-semantics-instantiateasyncgeneratorfunctionobject\">InstantiateAsyncGeneratorFunctionObject</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> with arguments <var>env</var> and <var>privateEnv</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-cpVe0Sep\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"agdmcdye\" id=\"prod-g0-rNkU8\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ? <emu-xref aoid=\"InstantiateAsyncFunctionObject\"><a href=\"#sec-runtime-semantics-instantiateasyncfunctionobject\">InstantiateAsyncFunctionObject</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> with arguments <var>env</var> and <var>privateEnv</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiategeneratorfunctionexpression": {"num": "15.5.4", "title": "#sec-runtime-semantics-instantiategeneratorfunctionexpression Runtime Semantics: InstantiateGeneratorFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiategeneratorfunctionexpression\" type=\"sdo\" aoid=\"InstantiateGeneratorFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiategeneratorfunctionexpression\">#sec-runtime-semantics-instantiategeneratorfunctionexpression</span> Runtime Semantics: InstantiateGeneratorFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateGeneratorFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dsczygsq\" id=\"prod-FnOrbSnb\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-sxTe1ywL\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>outerEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>outerEnv</var>).</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-parse-script": {"num": "16.1.5", "title": "#sec-parse-script ParseScript ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parse-script\" type=\"abstract operation\" aoid=\"ParseScript\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parse-script\">#sec-parse-script</span> ParseScript ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n      <p>The abstract operation ParseScript takes arguments <var>sourceText</var> (ECMAScript source text), <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>Let <var>script</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li>If <var>script</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>script</var>.</li><li>Return <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[ECMAScriptCode]]: <var>script</var>, [[HostDefined]]: <var>hostDefined</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An implementation may parse script source text and analyse it for Early Error conditions prior to evaluation of ParseScript for that script source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseScript upon that source text.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncarrowfunctionexpression": {"num": "15.9.4", "title": "#sec-runtime-semantics-instantiateasyncarrowfunctionexpression Runtime Semantics: InstantiateAsyncArrowFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncarrowfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncArrowFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncarrowfunctionexpression\">#sec-runtime-semantics-instantiateasyncarrowfunctionexpression</span> Runtime Semantics: InstantiateAsyncArrowFunctionExpression</h1>\n      <p>The syntax-directed operation InstantiateAsyncArrowFunctionExpression takes optional argument <var>name</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dqxgopsb\" id=\"prod-kBFLOl9Q\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"auwv8gbh\" id=\"prod-YQv2CZBp\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>head</var> be the <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createdynamicfunction": {"num": "20.2.1.1.1", "title": "#sec-createdynamicfunction CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" type=\"abstract operation\" oldids=\"table-dynamic-function-sourcetext-prefixes\" aoid=\"CreateDynamicFunction\"><span id=\"table-dynamic-function-sourcetext-prefixes\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (<emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language values</a></emu-xref>). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%GeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>prefix</var> be <emu-val>\"async function\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>prefix</var> be <emu-val>\"async function*\"</emu-val>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1,<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Let <var>sourceText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>sourceString</var>).</li><li>Let <var>parameters</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>), <var>parameterSym</var>).</li><li>If <var>parameters</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>bodyString</var>), <var>bodySym</var>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: The parameters and body are parsed separately to ensure that each is valid alone. For example, <code>new Function(\"/*\", \"*/ ) {\")</code> is not legal.</li><li>NOTE: If this step is reached, <var>sourceText</var> must match <var>exprSym</var> (although the reverse implication does not hold). The purpose of the next two steps is to enforce any Early Error rules which apply to <var>exprSym</var> directly.</li><li>Let <var>expr</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <var>exprSym</var>).</li><li>If <var>expr</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>env</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>privateEnv</var> be <emu-val>null</emu-val>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>sourceText</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>env</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Functions whose <var>kind</var> is <emu-const>async</emu-const> are not constructible and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>CreateDynamicFunction defines a <emu-val>\"prototype\"</emu-val> property on any function it creates whose <var>kind</var> is not <emu-const>async</emu-const> to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-runtime-semantics-classstaticblockdefinitionevaluation": {"num": "15.7.11", "title": "#sec-runtime-semantics-classstaticblockdefinitionevaluation Runtime Semantics: ClassStaticBlockDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classstaticblockdefinitionevaluation\" type=\"sdo\" aoid=\"ClassStaticBlockDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classstaticblockdefinitionevaluation\">#sec-runtime-semantics-classstaticblockdefinitionevaluation</span> Runtime Semantics: ClassStaticBlockDefinitionEvaluation</h1>\n      <p>The syntax-directed operation ClassStaticBlockDefinitionEvaluation takes argument <var>homeObject</var>. It is defined piecewise over the following productions:</p>\n      <emu-grammar><emu-production name=\"ClassStaticBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassStaticBlock\">ClassStaticBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hv6hopt7\" id=\"prod-sy-617ri\">\n        <emu-t>static</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lex</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the empty sequence of Unicode code points.</li><li>Let <var>formalParameters</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>bodyFunction</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameters</var>, <emu-nt><a href=\"#prod-ClassStaticBlockBody\">ClassStaticBlockBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>lex</var>, <var>privateEnv</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>bodyFunction</var>, <var>homeObject</var>).</li><li>Return the <emu-xref href=\"#sec-classstaticblockdefinition-record-specification-type\"><a href=\"#sec-classstaticblockdefinition-record-specification-type\">ClassStaticBlockDefinition Record</a></emu-xref> { [[BodyFunction]]: <var>bodyFunction</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The function <var>bodyFunction</var> is never directly accessible to ECMAScript code.</div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ordinaryfunctioncreate": {"num": "10.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, env, privateEnv )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" type=\"abstract operation\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\" aoid=\"OrdinaryFunctionCreate\"><span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>env</var>, <var>privateEnv</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (<emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>), and <var>privateEnv</var> (a <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> or <emu-val>null</emu-val>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>env</var>.</li><li>Set <var>F</var>.[[PrivateEnvironment]] to <var>privateEnv</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[Fields]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[PrivateMethods]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[ClassFieldInitializerName]] to <emu-const>empty</emu-const>.</li><li>Let <var>len</var> be the <emu-xref aoid=\"ExpectedArgumentCount\"><a href=\"#sec-static-semantics-expectedargumentcount\">ExpectedArgumentCount</a></emu-xref> of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 34"}}}