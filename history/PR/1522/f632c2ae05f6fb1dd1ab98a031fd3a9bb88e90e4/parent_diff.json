{"from": {"secList": ["sec-grammar-notation"], "secData": {"sec-grammar-notation": {"num": "5.1.5", "title": "#sec-grammar-notation Grammar Notation", "html": "<emu-clause id=\"sec-grammar-notation\" namespace=\"grammar-notation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-grammar-notation\">#sec-grammar-notation</span> Grammar Notation</h1>\n      <p>Terminal symbols are shown in <code>fixed width</code> font, both in the productions of the grammars and throughout this specification whenever the text directly refers to such a terminal symbol. These are to appear in a script exactly as written. All terminal symbol code points specified in this way are to be understood as the appropriate Unicode code points from the Basic Latin range, as opposed to any similar-looking code points from other Unicode ranges. A code point in a terminal symbol cannot be expressed by a <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.</p>\n      <p>Nonterminal symbols are shown in <i>italic</i> type. The definition of a nonterminal (also called a &#8220;production&#8221;) is introduced by the name of the nonterminal being defined followed by one or more colons. (The number of colons indicates to which grammar the production belongs.) One or more alternative right-hand sides for the nonterminal then follow on succeeding lines. For example, the syntactic definition:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"WhileStatement\" id=\"prod-grammar-notation-WhileStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>states that the nonterminal <emu-nt><a href=\"#prod-grammar-notation-WhileStatement\">WhileStatement</a></emu-nt> represents the token <code>while</code>, followed by a left parenthesis token, followed by an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, followed by a right parenthesis token, followed by a <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>. The occurrences of <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> and <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> are themselves nonterminals. As another example, the syntactic definition:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ArgumentList\" id=\"prod-grammar-notation-ArgumentList\">\n    <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1px9pijq\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"f_i_7oqe\">\n        <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>states that an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> may represent either a single <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> or an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt>, followed by a comma, followed by an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>. This definition of <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> is recursive, that is, it is defined in terms of itself. The result is that an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> may contain any positive number of arguments, separated by commas, where each argument expression is an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>. Such recursive definitions of nonterminals are common.</p>\n      <p>The subscripted suffix &#8220;<sub>opt</sub>&#8221;, which may appear after a terminal or nonterminal, indicates an optional symbol. The alternative containing the optional symbol actually specifies two right-hand sides, one that omits the optional element and one that includes it. This means that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5neqctp\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ib7lg1vi\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ga1xtadp\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cs1gk7oq\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>which in turn is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ForStatement\" id=\"prod-grammar-notation-ForStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"acc913te\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"1lbcl8ka\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6nfzjduy\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"fyy9sdxo\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>so, in this example, the nonterminal <emu-nt><a href=\"#prod-grammar-notation-ForStatement\">ForStatement</a></emu-nt> actually has four alternative right-hand sides.</p>\n      <p>A production may be parameterized by a subscripted annotation of the form &#8220;<sub>[parameters]</sub>&#8221;, which may appear as a suffix to the nonterminal symbol defined by the production. &#8220;<sub>parameters</sub>&#8221; may be either a single name or a comma separated list of names. A parameterized production is shorthand for a set of productions defining all combinations of the parameter names, preceded by an underscore, appended to the parameterized nonterminal symbol. This means that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return, In\">\n    <emu-nt params=\"Return, In\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return, In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_In\" id=\"prod-grammar-notation-StatementList_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_In\">StatementList_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return_In\" id=\"prod-grammar-notation-StatementList_Return_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return_In\">StatementList_Return_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>Multiple parameters produce a combinatory number of productions, not all of which are necessarily referenced in a complete grammar.</p>\n      <p>References to nonterminals on the right-hand side of a production can also be parameterized. For example:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q7ib3n22\"><emu-nt params=\"+In\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[+In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is equivalent to saying:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"k6ggb0ke\"><emu-nt>ExpressionStatement_In</emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cbr-bcps\"><emu-nt params=\"~In\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[~In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is equivalent to:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>A nonterminal reference may have both a parameter list and an &#8220;<sub>opt</sub>&#8221; suffix. For example:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nj4iu70z\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt params=\"+In\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"atb3-ttx\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt>Initializer_In</emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>Prefixing a parameter name with &#8220;<sub>?</sub>&#8221; on a right-hand side nonterminal reference makes that parameter value dependent upon the occurrence of the parameter name on the reference to the current production's left-hand side symbol. For example:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3evhjud3\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt params=\"?In\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\" id=\"prod-grammar-notation-VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ib7lg1vi\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclaration_In\" id=\"prod-grammar-notation-VariableDeclaration_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration_In\">VariableDeclaration_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"atb3-ttx\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt>Initializer_In</emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>If a right-hand side alternative is prefixed with &#8220;[+parameter]&#8221; that alternative is only available if the named parameter was used in referencing the production's nonterminal symbol. If a right-hand side alternative is prefixed with &#8220;[~parameter]&#8221; that alternative is only available if the named parameter was <em>not</em> used in referencing the production's nonterminal symbol. This means that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pxk-qj7n\" constraints=\"+Return\"><emu-constraints>[+Return]</emu-constraints><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mr68necj\" constraints=\"~Return\"><emu-constraints>[~Return]</emu-constraints><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" id=\"prod-grammar-notation-StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\" id=\"prod-grammar-notation-StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>When the words &#8220;<b>one of</b>&#8221; follow the colon(s) in a grammar definition, they signify that each of the terminal symbols on the following line or lines is an alternative definition. For example, the lexical grammar for ECMAScript contains the production:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"NonZeroDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-grammar-notation-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>1</emu-t> <emu-t>2</emu-t> <emu-t>3</emu-t> <emu-t>4</emu-t> <emu-t>5</emu-t> <emu-t>6</emu-t> <emu-t>7</emu-t> <emu-t>8</emu-t> <emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>which is merely a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"NonZeroDigit\" type=\"lexical\" id=\"prod-grammar-notation-NonZeroDigit\">\n    <emu-nt><a href=\"#prod-grammar-notation-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n    <emu-rhs a=\"xkcxbwmk\"><emu-t>2</emu-t></emu-rhs>\n    <emu-rhs a=\"7gu2shc1\"><emu-t>3</emu-t></emu-rhs>\n    <emu-rhs a=\"woxkczx2\"><emu-t>4</emu-t></emu-rhs>\n    <emu-rhs a=\"j83vdwqk\"><emu-t>5</emu-t></emu-rhs>\n    <emu-rhs a=\"c2shfb68\"><emu-t>6</emu-t></emu-rhs>\n    <emu-rhs a=\"6l4hpim_\"><emu-t>7</emu-t></emu-rhs>\n    <emu-rhs a=\"elvyw2lo\"><emu-t>8</emu-t></emu-rhs>\n    <emu-rhs a=\"fj9dcfsf\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>If the phrase &#8220;[empty]&#8221; appears as the right-hand side of a production, it indicates that the production's right-hand side contains no terminals or nonterminals.</p>\n      <p>If the phrase &#8220;[lookahead = <var>seq</var>]&#8221; appears in the right-hand side of a production, it indicates that the production may only be used if the token sequence <var>seq</var> is a prefix of the immediately following input token sequence. Similarly, &#8220;[lookahead &#8712; <var>set</var>]&#8221;, where <var>set</var> is a finite nonempty set of token sequences, indicates that the production may only be used if some element of <var>set</var> is a prefix of the immediately following token sequence. For convenience, the set can also be written as a nonterminal, in which case it represents the set of all token sequences to which that nonterminal could expand. It is considered an editorial error if the nonterminal could expand to infinitely many distinct token sequences.</p>\n      <p>These conditions may be negated. &#8220;[lookahead &#8800; <var>seq</var>]&#8221; indicates that the containing production may only be used if <var>seq</var> is <em>not</em> a prefix of the immediately following input token sequence, and &#8220;[lookahead &#8713; <var>set</var>]&#8221; indicates that the production may only be used if <em>no</em> element of <var>set</var> is a prefix of the immediately following token sequence.</p>\n      <p>As an example, given the definitions:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"DecimalDigit\" type=\"lexical\" oneof=\"\" id=\"prod-grammar-notation-DecimalDigit\">\n    <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>0</emu-t> <emu-t>1</emu-t> <emu-t>2</emu-t> <emu-t>3</emu-t> <emu-t>4</emu-t> <emu-t>5</emu-t> <emu-t>6</emu-t> <emu-t>7</emu-t> <emu-t>8</emu-t> <emu-t>9</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"DecimalDigits\" type=\"lexical\" id=\"prod-grammar-notation-DecimalDigits\">\n    <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"s4me4hlz\"><emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"nyugv7lw\">\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>the definition:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"LookaheadExample\" type=\"lexical\" id=\"prod-grammar-notation-LookaheadExample\">\n    <emu-nt><a href=\"#prod-grammar-notation-LookaheadExample\">LookaheadExample</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"4h4szpob\">\n        <emu-t>n</emu-t>\n        <emu-gann>[lookahead &#8713; { <emu-t>1</emu-t>, <emu-t>3</emu-t>, <emu-t>5</emu-t>, <emu-t>7</emu-t>, <emu-t>9</emu-t> }]</emu-gann>\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"gvy8bhnb\">\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>\n        <emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>matches either the letter <code>n</code> followed by one or more decimal digits the first of which is even, or a decimal digit not followed by another decimal digit.</p>\n      <p>Note that when these phrases are used in the syntactic grammar, it may not be possible to unambiguously identify the immediately following token sequence because determining later tokens requires knowing which lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> to use at later positions. As such, when these are used in the syntactic grammar, it is considered an editorial error for a token sequence <var>seq</var> to appear in a lookahead restriction (including as part of a set of sequences) if the choices of lexical goal symbols to use could change whether or not <var>seq</var> would be a prefix of the resulting token sequence.</p>\n      <p>If the phrase &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221; appears in the right-hand side of a production of the syntactic grammar, it indicates that the production is <em>a restricted production</em>: it may not be used if a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs in the input stream at the indicated position. For example, the production:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ThrowStatement\" id=\"prod-grammar-notation-ThrowStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-ThrowStatement\">ThrowStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_07izqvp\">\n        <emu-t>throw</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>indicates that the production may not be used if a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs in the script between the <code>throw</code> token and the <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n      <p>Unless the presence of a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is forbidden by a restricted production, any number of occurrences of <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> may appear between any two consecutive tokens in the stream of input elements without affecting the syntactic acceptability of the script.</p>\n      <p>When an alternative in a production of the lexical grammar or the numeric string grammar appears to be a multi-code point token, it represents the sequence of code points that would make up such a token.</p>\n      <p>The right-hand side of a production may specify that certain expansions are not permitted by using the phrase &#8220;<b>but not</b>&#8221; and then indicating the expansions to be excluded. For example, the production:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"Identifier\" type=\"lexical\" id=\"prod-grammar-notation-Identifier\">\n    <emu-nt><a href=\"#prod-grammar-notation-Identifier\">Identifier</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"v6xddc2h\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> <emu-gmod>but not <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>means that the nonterminal <emu-nt><a href=\"#prod-grammar-notation-Identifier\">Identifier</a></emu-nt> may be replaced by any sequence of code points that could replace <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> provided that the same sequence of code points could not replace <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>.</p>\n      <p>Finally, a few nonterminal symbols are described by a descriptive phrase in sans-serif type in cases where it would be impractical to list all the alternatives:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"SourceCharacter\" type=\"lexical\" id=\"prod-grammar-notation-SourceCharacter\">\n    <emu-nt><a href=\"#prod-grammar-notation-SourceCharacter\">SourceCharacter</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xks4vqzw\"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>\n</emu-production>\n</emu-grammar>\n    </emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-grammar-notation"], "secData": {"sec-grammar-notation": {"num": "5.1.5", "title": "#sec-grammar-notation Grammar Notation", "html": "<emu-clause id=\"sec-grammar-notation\" namespace=\"grammar-notation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-grammar-notation\">#sec-grammar-notation</span> Grammar Notation</h1>\n      <p>In the ECMAScript grammars, some terminal symbols are shown in <code>fixed-width</code> font. These are to appear in a source text exactly as written. All terminal symbol code points specified in this way are to be understood as the appropriate Unicode code points from the Basic Latin range, as opposed to any similar-looking code points from other Unicode ranges. A code point in a terminal symbol cannot be expressed by a <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.</p>\n      <p>In grammars whose terminal symbols are individual Unicode code points (i.e., the lexical, RegExp, and numeric string grammars), a contiguous run of multiple fixed-width code points appearing in a production is a simple shorthand for the same sequence of code points, written as standalone terminal symbols.</p>\n      <p>For example, the production:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"HexIntegerLiteral\" type=\"lexical\" collapsed=\"\" id=\"prod-grammar-notation-HexIntegerLiteral\">\n    <emu-nt><a href=\"#prod-grammar-notation-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"zxvbgn4l\">\n        <emu-t>0x</emu-t>\n        <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a shorthand for:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"HexIntegerLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-grammar-notation-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"tu0pitdu\">\n        <emu-t>0</emu-t>\n        <emu-t>x</emu-t>\n        <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>In contrast, in the syntactic grammar, a contiguous run of fixed-width code points is a single terminal symbol.</p>\n      <p>Terminal symbols come in two other forms:</p>\n      <ul>\n        <li>In the lexical and RegExp grammars, Unicode code points without a conventional printed representation are instead shown in the form \"&lt;ABBREV&gt;\" where \"ABBREV\" is a mnemonic for the code point. These forms are defined in <emu-xref href=\"#sec-unicode-format-control-characters\" title=\"\"><a href=\"#sec-unicode-format-control-characters\">Unicode Format-Control Characters</a></emu-xref> and <emu-xref href=\"#sec-white-space\" title=\"\"><a href=\"#sec-white-space\">White Space</a></emu-xref>.</li>\n        <li>In the syntactic grammar, certain terminal symbols (e.g. <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> and <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>) are shown in italics, as they refer to the nonterminals of the same name in the lexical grammar.</li>\n      </ul>\n      <p>Nonterminal symbols are shown in <i>italic</i> type. The definition of a nonterminal (also called a &#8220;production&#8221;) is introduced by the name of the nonterminal being defined followed by one or more colons. (The number of colons indicates to which grammar the production belongs.) One or more alternative right-hand sides for the nonterminal then follow on succeeding lines. For example, the syntactic definition:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"WhileStatement\" id=\"prod-grammar-notation-WhileStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>states that the nonterminal <emu-nt><a href=\"#prod-grammar-notation-WhileStatement\">WhileStatement</a></emu-nt> represents the token <code>while</code>, followed by a left parenthesis token, followed by an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, followed by a right parenthesis token, followed by a <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>. The occurrences of <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> and <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> are themselves nonterminals. As another example, the syntactic definition:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ArgumentList\" id=\"prod-grammar-notation-ArgumentList\">\n    <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1px9pijq\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"f_i_7oqe\">\n        <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>states that an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> may represent either a single <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> or an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt>, followed by a comma, followed by an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>. This definition of <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> is recursive, that is, it is defined in terms of itself. The result is that an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> may contain any positive number of arguments, separated by commas, where each argument expression is an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>. Such recursive definitions of nonterminals are common.</p>\n      <p>The subscripted suffix &#8220;<sub>opt</sub>&#8221;, which may appear after a terminal or nonterminal, indicates an optional symbol. The alternative containing the optional symbol actually specifies two right-hand sides, one that omits the optional element and one that includes it. This means that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5neqctp\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ib7lg1vi\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ga1xtadp\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cs1gk7oq\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>which in turn is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ForStatement\" id=\"prod-grammar-notation-ForStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"acc913te\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"1lbcl8ka\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6nfzjduy\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"fyy9sdxo\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>so, in this example, the nonterminal <emu-nt><a href=\"#prod-grammar-notation-ForStatement\">ForStatement</a></emu-nt> actually has four alternative right-hand sides.</p>\n      <p>A production may be parameterized by a subscripted annotation of the form &#8220;<sub>[parameters]</sub>&#8221;, which may appear as a suffix to the nonterminal symbol defined by the production. &#8220;<sub>parameters</sub>&#8221; may be either a single name or a comma separated list of names. A parameterized production is shorthand for a set of productions defining all combinations of the parameter names, preceded by an underscore, appended to the parameterized nonterminal symbol. This means that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return, In\">\n    <emu-nt params=\"Return, In\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return, In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_In\" id=\"prod-grammar-notation-StatementList_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_In\">StatementList_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return_In\" id=\"prod-grammar-notation-StatementList_Return_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return_In\">StatementList_Return_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>Multiple parameters produce a combinatory number of productions, not all of which are necessarily referenced in a complete grammar.</p>\n      <p>References to nonterminals on the right-hand side of a production can also be parameterized. For example:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q7ib3n22\"><emu-nt params=\"+In\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[+In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is equivalent to saying:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"k6ggb0ke\"><emu-nt>ExpressionStatement_In</emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cbr-bcps\"><emu-nt params=\"~In\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[~In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is equivalent to:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>A nonterminal reference may have both a parameter list and an &#8220;<sub>opt</sub>&#8221; suffix. For example:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nj4iu70z\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt params=\"+In\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"atb3-ttx\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt>Initializer_In</emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>Prefixing a parameter name with &#8220;<sub>?</sub>&#8221; on a right-hand side nonterminal reference makes that parameter value dependent upon the occurrence of the parameter name on the reference to the current production's left-hand side symbol. For example:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3evhjud3\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt params=\"?In\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\" id=\"prod-grammar-notation-VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ib7lg1vi\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclaration_In\" id=\"prod-grammar-notation-VariableDeclaration_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration_In\">VariableDeclaration_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"atb3-ttx\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt>Initializer_In</emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>If a right-hand side alternative is prefixed with &#8220;[+parameter]&#8221; that alternative is only available if the named parameter was used in referencing the production's nonterminal symbol. If a right-hand side alternative is prefixed with &#8220;[~parameter]&#8221; that alternative is only available if the named parameter was <em>not</em> used in referencing the production's nonterminal symbol. This means that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pxk-qj7n\" constraints=\"+Return\"><emu-constraints>[+Return]</emu-constraints><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mr68necj\" constraints=\"~Return\"><emu-constraints>[~Return]</emu-constraints><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" id=\"prod-grammar-notation-StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qm95e4wi\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\" id=\"prod-grammar-notation-StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gsqkt2bv\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>When the words &#8220;<b>one of</b>&#8221; follow the colon(s) in a grammar definition, they signify that each of the terminal symbols on the following line or lines is an alternative definition. For example, the lexical grammar for ECMAScript contains the production:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"NonZeroDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-grammar-notation-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>1</emu-t> <emu-t>2</emu-t> <emu-t>3</emu-t> <emu-t>4</emu-t> <emu-t>5</emu-t> <emu-t>6</emu-t> <emu-t>7</emu-t> <emu-t>8</emu-t> <emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>which is merely a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"NonZeroDigit\" type=\"lexical\" id=\"prod-grammar-notation-NonZeroDigit\">\n    <emu-nt><a href=\"#prod-grammar-notation-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n    <emu-rhs a=\"xkcxbwmk\"><emu-t>2</emu-t></emu-rhs>\n    <emu-rhs a=\"7gu2shc1\"><emu-t>3</emu-t></emu-rhs>\n    <emu-rhs a=\"woxkczx2\"><emu-t>4</emu-t></emu-rhs>\n    <emu-rhs a=\"j83vdwqk\"><emu-t>5</emu-t></emu-rhs>\n    <emu-rhs a=\"c2shfb68\"><emu-t>6</emu-t></emu-rhs>\n    <emu-rhs a=\"6l4hpim_\"><emu-t>7</emu-t></emu-rhs>\n    <emu-rhs a=\"elvyw2lo\"><emu-t>8</emu-t></emu-rhs>\n    <emu-rhs a=\"fj9dcfsf\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>If the phrase &#8220;[empty]&#8221; appears as the right-hand side of a production, it indicates that the production's right-hand side contains no terminals or nonterminals.</p>\n      <p>If the phrase &#8220;[lookahead = <var>seq</var>]&#8221; appears in the right-hand side of a production, it indicates that the production may only be used if the token sequence <var>seq</var> is a prefix of the immediately following input token sequence. Similarly, &#8220;[lookahead &#8712; <var>set</var>]&#8221;, where <var>set</var> is a finite nonempty set of token sequences, indicates that the production may only be used if some element of <var>set</var> is a prefix of the immediately following token sequence. For convenience, the set can also be written as a nonterminal, in which case it represents the set of all token sequences to which that nonterminal could expand. It is considered an editorial error if the nonterminal could expand to infinitely many distinct token sequences.</p>\n      <p>These conditions may be negated. &#8220;[lookahead &#8800; <var>seq</var>]&#8221; indicates that the containing production may only be used if <var>seq</var> is <em>not</em> a prefix of the immediately following input token sequence, and &#8220;[lookahead &#8713; <var>set</var>]&#8221; indicates that the production may only be used if <em>no</em> element of <var>set</var> is a prefix of the immediately following token sequence.</p>\n      <p>As an example, given the definitions:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"DecimalDigit\" type=\"lexical\" oneof=\"\" id=\"prod-grammar-notation-DecimalDigit\">\n    <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>0</emu-t> <emu-t>1</emu-t> <emu-t>2</emu-t> <emu-t>3</emu-t> <emu-t>4</emu-t> <emu-t>5</emu-t> <emu-t>6</emu-t> <emu-t>7</emu-t> <emu-t>8</emu-t> <emu-t>9</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"DecimalDigits\" type=\"lexical\" id=\"prod-grammar-notation-DecimalDigits\">\n    <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"s4me4hlz\"><emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"nyugv7lw\">\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>the definition:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"LookaheadExample\" type=\"lexical\" id=\"prod-grammar-notation-LookaheadExample\">\n    <emu-nt><a href=\"#prod-grammar-notation-LookaheadExample\">LookaheadExample</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"4h4szpob\">\n        <emu-t>n</emu-t>\n        <emu-gann>[lookahead &#8713; { <emu-t>1</emu-t>, <emu-t>3</emu-t>, <emu-t>5</emu-t>, <emu-t>7</emu-t>, <emu-t>9</emu-t> }]</emu-gann>\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"gvy8bhnb\">\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>\n        <emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>matches either the letter <code>n</code> followed by one or more decimal digits the first of which is even, or a decimal digit not followed by another decimal digit.</p>\n      <p>Note that when these phrases are used in the syntactic grammar, it may not be possible to unambiguously identify the immediately following token sequence because determining later tokens requires knowing which lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> to use at later positions. As such, when these are used in the syntactic grammar, it is considered an editorial error for a token sequence <var>seq</var> to appear in a lookahead restriction (including as part of a set of sequences) if the choices of lexical goal symbols to use could change whether or not <var>seq</var> would be a prefix of the resulting token sequence.</p>\n      <p>If the phrase &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221; appears in the right-hand side of a production of the syntactic grammar, it indicates that the production is <em>a restricted production</em>: it may not be used if a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs in the input stream at the indicated position. For example, the production:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ThrowStatement\" id=\"prod-grammar-notation-ThrowStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-ThrowStatement\">ThrowStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_07izqvp\">\n        <emu-t>throw</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>indicates that the production may not be used if a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs in the script between the <code>throw</code> token and the <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n      <p>Unless the presence of a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is forbidden by a restricted production, any number of occurrences of <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> may appear between any two consecutive tokens in the stream of input elements without affecting the syntactic acceptability of the script.</p>\n      <p>The right-hand side of a production may specify that certain expansions are not permitted by using the phrase &#8220;<b>but not</b>&#8221; and then indicating the expansions to be excluded. For example, the production:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"Identifier\" type=\"lexical\" id=\"prod-grammar-notation-Identifier\">\n    <emu-nt><a href=\"#prod-grammar-notation-Identifier\">Identifier</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"v6xddc2h\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> <emu-gmod>but not <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>means that the nonterminal <emu-nt><a href=\"#prod-grammar-notation-Identifier\">Identifier</a></emu-nt> may be replaced by any sequence of code points that could replace <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> provided that the same sequence of code points could not replace <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>.</p>\n      <p>Finally, a few nonterminal symbols are described by a descriptive phrase in sans-serif type in cases where it would be impractical to list all the alternatives:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"SourceCharacter\" type=\"lexical\" id=\"prod-grammar-notation-SourceCharacter\">\n    <emu-nt><a href=\"#prod-grammar-notation-SourceCharacter\">SourceCharacter</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xks4vqzw\"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>\n</emu-production>\n</emu-grammar>\n    </emu-clause>\n  "}}, "figData": {}}}