{"from": {"secList": ["sec-createiteratorfromclosure"], "secData": {"sec-createiteratorfromclosure": {"num": "27.5.3.8", "title": "#sec-createiteratorfromclosure CreateIteratorFromClosure ( closure, generatorBrand, generatorPrototype )", "html": "<emu-clause id=\"sec-createiteratorfromclosure\" aoid=\"CreateIteratorFromClosure\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createiteratorfromclosure\">#sec-createiteratorfromclosure</span> CreateIteratorFromClosure ( <var>closure</var>, <var>generatorBrand</var>, <var>generatorPrototype</var> )</h1>\n        <p>The abstract operation CreateIteratorFromClosure takes arguments <var>closure</var> (an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters), <var>generatorBrand</var>, and <var>generatorPrototype</var> (an Object). It performs the following steps when called:</p>\n        <emu-alg><ol><li>NOTE: <var>closure</var> can contain uses of the <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref> shorthand to yield an IteratorResult object.</li><li>Let <var>internalSlotsList</var> be &#171; [[GeneratorState]], [[GeneratorContext]], [[GeneratorBrand]] &#187;.</li><li>Let <var>generator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>generatorPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>generator</var>.[[GeneratorBrand]] to <var>generatorBrand</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-val>undefined</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"GeneratorStart\"><a href=\"#sec-generatorstart\">GeneratorStart</a></emu-xref>(<var>generator</var>, <var>closure</var>).</li><li>Return <var>generator</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-createiteratorfromclosure"], "secData": {"sec-createiteratorfromclosure": {"num": "27.5.3.8", "title": "#sec-createiteratorfromclosure CreateIteratorFromClosure ( closure, generatorBrand, generatorPrototype )", "html": "<emu-clause id=\"sec-createiteratorfromclosure\" aoid=\"CreateIteratorFromClosure\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createiteratorfromclosure\">#sec-createiteratorfromclosure</span> CreateIteratorFromClosure ( <var>closure</var>, <var>generatorBrand</var>, <var>generatorPrototype</var> )</h1>\n        <p>The abstract operation CreateIteratorFromClosure takes arguments <var>closure</var> (an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters), <var>generatorBrand</var>, and <var>generatorPrototype</var> (an Object). It performs the following steps when called:</p>\n        <emu-alg><ol><li>NOTE: <var>closure</var> can contain uses of the <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref> shorthand to yield an IteratorResult object.</li><li>Let <var>internalSlotsList</var> be &#171; [[GeneratorState]], [[GeneratorContext]], [[GeneratorBrand]] &#187;.</li><li>Let <var>generator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>generatorPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>generator</var>.[[GeneratorBrand]] to <var>generatorBrand</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-val>undefined</emu-val>.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be a new <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>calleeContext</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>calleeContext</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set the ScriptOrModule of <var>calleeContext</var> to <var>callerContext</var>'s ScriptOrModule.</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Perform !&#160;<emu-xref aoid=\"GeneratorStart\"><a href=\"#sec-generatorstart\">GeneratorStart</a></emu-xref>(<var>generator</var>, <var>closure</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <var>generator</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}}