{"from": {"secList": ["sec-isdetachedbuffer", "sec-detacharraybuffer", "sec-clonearraybuffer", "sec-issharedarraybuffer"], "secData": {"sec-isdetachedbuffer": {"num": "25.1.2.2", "title": "#sec-isdetachedbuffer IsDetachedBuffer ( arrayBuffer )", "html": "<emu-clause id=\"sec-isdetachedbuffer\" aoid=\"IsDetachedBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isdetachedbuffer\">#sec-isdetachedbuffer</span> IsDetachedBuffer ( <var>arrayBuffer</var> )</h1>\n        <p>The abstract operation IsDetachedBuffer takes argument <var>arrayBuffer</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>arrayBuffer</var>) is Object and it has an [[ArrayBufferData]] internal slot.</li><li>If <var>arrayBuffer</var>.[[ArrayBufferData]] is <emu-val>null</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-detacharraybuffer": {"num": "25.1.2.3", "title": "#sec-detacharraybuffer DetachArrayBuffer ( arrayBuffer [ , key ] )", "html": "<emu-clause id=\"sec-detacharraybuffer\" aoid=\"DetachArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-detacharraybuffer\">#sec-detacharraybuffer</span> DetachArrayBuffer ( <var>arrayBuffer</var> [ , <var>key</var> ] )</h1>\n        <p>The abstract operation DetachArrayBuffer takes argument <var>arrayBuffer</var> and optional argument <var>key</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>arrayBuffer</var>) is Object and it has [[ArrayBufferData]], [[ArrayBufferByteLength]], and [[ArrayBufferDetachKey]] internal slots.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li>If <var>key</var> is not present, set <var>key</var> to <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>arrayBuffer</var>.[[ArrayBufferDetachKey]], <var>key</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferData]] to <emu-val>null</emu-val>.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferByteLength]] to 0.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Detaching an ArrayBuffer instance disassociates the <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref> used as its backing store from the instance and sets the byte length of the buffer to 0. No operations defined by this specification use the DetachArrayBuffer abstract operation. However, an ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> or implementation may define such operations.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-clonearraybuffer": {"num": "25.1.2.4", "title": "#sec-clonearraybuffer CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength, cloneConstructor )", "html": "<emu-clause id=\"sec-clonearraybuffer\" aoid=\"CloneArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-clonearraybuffer\">#sec-clonearraybuffer</span> CloneArrayBuffer ( <var>srcBuffer</var>, <var>srcByteOffset</var>, <var>srcLength</var>, <var>cloneConstructor</var> )</h1>\n        <p>The abstract operation CloneArrayBuffer takes arguments <var>srcBuffer</var> (an ArrayBuffer object), <var>srcByteOffset</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>srcLength</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>cloneConstructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It creates a new ArrayBuffer whose data is a copy of <var>srcBuffer</var>'s data over the range starting at <var>srcByteOffset</var> and continuing for <var>srcLength</var> bytes. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>srcBuffer</var>) is Object and it has an [[ArrayBufferData]] internal slot.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>cloneConstructor</var>) is <emu-val>true</emu-val>.</li><li>Let <var>targetBuffer</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<var>cloneConstructor</var>, <var>srcLength</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>srcBlock</var> be <var>srcBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>targetBlock</var> be <var>targetBuffer</var>.[[ArrayBufferData]].</li><li>Perform <emu-xref aoid=\"CopyDataBlockBytes\"><a href=\"#sec-copydatablockbytes\">CopyDataBlockBytes</a></emu-xref>(<var>targetBlock</var>, 0, <var>srcBlock</var>, <var>srcByteOffset</var>, <var>srcLength</var>).</li><li>Return <var>targetBuffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-issharedarraybuffer": {"num": "25.2.1.2", "title": "#sec-issharedarraybuffer IsSharedArrayBuffer ( obj )", "html": "<emu-clause id=\"sec-issharedarraybuffer\" aoid=\"IsSharedArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-issharedarraybuffer\">#sec-issharedarraybuffer</span> IsSharedArrayBuffer ( <var>obj</var> )</h1>\n        <p>The abstract operation IsSharedArrayBuffer takes argument <var>obj</var>. It tests whether an object is an ArrayBuffer, a SharedArrayBuffer, or a subtype of either. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>obj</var>) is Object and it has an [[ArrayBufferData]] internal slot.</li><li>Let <var>bufferData</var> be <var>obj</var>.[[ArrayBufferData]].</li><li>If <var>bufferData</var> is <emu-val>null</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>bufferData</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref>, return <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>bufferData</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-isdetachedbuffer", "sec-detacharraybuffer", "sec-clonearraybuffer", "sec-issharedarraybuffer"], "secData": {"sec-isdetachedbuffer": {"num": "25.1.2.2", "title": "#sec-isdetachedbuffer IsDetachedBuffer ( arrayBuffer )", "html": "<emu-clause id=\"sec-isdetachedbuffer\" aoid=\"IsDetachedBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isdetachedbuffer\">#sec-isdetachedbuffer</span> IsDetachedBuffer ( <var>arrayBuffer</var> )</h1>\n        <p>The abstract operation IsDetachedBuffer takes argument <var>arrayBuffer</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>arrayBuffer</var>) is Object and <var>arrayBuffer</var> has an [[ArrayBufferData]] internal slot.</li><li>If <var>arrayBuffer</var>.[[ArrayBufferData]] is <emu-val>null</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-detacharraybuffer": {"num": "25.1.2.3", "title": "#sec-detacharraybuffer DetachArrayBuffer ( arrayBuffer [ , key ] )", "html": "<emu-clause id=\"sec-detacharraybuffer\" aoid=\"DetachArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-detacharraybuffer\">#sec-detacharraybuffer</span> DetachArrayBuffer ( <var>arrayBuffer</var> [ , <var>key</var> ] )</h1>\n        <p>The abstract operation DetachArrayBuffer takes argument <var>arrayBuffer</var> and optional argument <var>key</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>arrayBuffer</var>) is Object and <var>arrayBuffer</var> has [[ArrayBufferData]], [[ArrayBufferByteLength]], and [[ArrayBufferDetachKey]] internal slots.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li>If <var>key</var> is not present, set <var>key</var> to <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>arrayBuffer</var>.[[ArrayBufferDetachKey]], <var>key</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferData]] to <emu-val>null</emu-val>.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferByteLength]] to 0.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Detaching an ArrayBuffer instance disassociates the <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref> used as its backing store from the instance and sets the byte length of the buffer to 0. No operations defined by this specification use the DetachArrayBuffer abstract operation. However, an ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> or implementation may define such operations.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-clonearraybuffer": {"num": "25.1.2.4", "title": "#sec-clonearraybuffer CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength, cloneConstructor )", "html": "<emu-clause id=\"sec-clonearraybuffer\" aoid=\"CloneArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-clonearraybuffer\">#sec-clonearraybuffer</span> CloneArrayBuffer ( <var>srcBuffer</var>, <var>srcByteOffset</var>, <var>srcLength</var>, <var>cloneConstructor</var> )</h1>\n        <p>The abstract operation CloneArrayBuffer takes arguments <var>srcBuffer</var> (an ArrayBuffer object), <var>srcByteOffset</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>srcLength</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>cloneConstructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It creates a new ArrayBuffer whose data is a copy of <var>srcBuffer</var>'s data over the range starting at <var>srcByteOffset</var> and continuing for <var>srcLength</var> bytes. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>srcBuffer</var>) is Object and <var>srcBuffer</var> has an [[ArrayBufferData]] internal slot.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>cloneConstructor</var>) is <emu-val>true</emu-val>.</li><li>Let <var>targetBuffer</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<var>cloneConstructor</var>, <var>srcLength</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>srcBlock</var> be <var>srcBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>targetBlock</var> be <var>targetBuffer</var>.[[ArrayBufferData]].</li><li>Perform <emu-xref aoid=\"CopyDataBlockBytes\"><a href=\"#sec-copydatablockbytes\">CopyDataBlockBytes</a></emu-xref>(<var>targetBlock</var>, 0, <var>srcBlock</var>, <var>srcByteOffset</var>, <var>srcLength</var>).</li><li>Return <var>targetBuffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-issharedarraybuffer": {"num": "25.2.1.2", "title": "#sec-issharedarraybuffer IsSharedArrayBuffer ( obj )", "html": "<emu-clause id=\"sec-issharedarraybuffer\" aoid=\"IsSharedArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-issharedarraybuffer\">#sec-issharedarraybuffer</span> IsSharedArrayBuffer ( <var>obj</var> )</h1>\n        <p>The abstract operation IsSharedArrayBuffer takes argument <var>obj</var>. It tests whether an object is an ArrayBuffer, a SharedArrayBuffer, or a subtype of either. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>obj</var>) is Object and <var>obj</var> has an [[ArrayBufferData]] internal slot.</li><li>Let <var>bufferData</var> be <var>obj</var>.[[ArrayBufferData]].</li><li>If <var>bufferData</var> is <emu-val>null</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>bufferData</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref>, return <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>bufferData</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}}