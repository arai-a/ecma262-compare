{"from": {"secList": ["sec-stringindexof"], "secData": {"sec-stringindexof": {"num": "6.1.4.1", "title": "#sec-stringindexof StringIndexOf ( string, searchValue, fromIndex )", "html": "<emu-clause id=\"sec-stringindexof\" aoid=\"StringIndexOf\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringindexof\">#sec-stringindexof</span> StringIndexOf ( <var>string</var>, <var>searchValue</var>, <var>fromIndex</var> )</h1>\n        <p>The abstract operation StringIndexOf takes arguments <var>string</var> (a String), <var>searchValue</var> (a String), and <var>fromIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>string</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>searchValue</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromIndex</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.</li><li>Let <var>len</var> be the length of <var>string</var>.</li><li>If <var>searchValue</var> is the empty String and <var>fromIndex</var> &#8804; <var>len</var>, return <var>fromIndex</var>.</li><li>Let <var>searchLen</var> be the length of <var>searchValue</var>.</li><li>If there exists any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> such that <var>fromIndex</var> &#8804; <var>k</var> &#8804; <var>len</var> - <var>searchLen</var> and for all non-negative integers <var>j</var> such that <var>j</var> &lt; <var>searchLen</var>, the code unit at index <var>k</var> + <var>j</var> within <var>string</var> is the same as the code unit at index <var>j</var> within <var>searchValue</var>, let <var>pos</var> be the smallest (closest to -&#8734;) such <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Otherwise, let <var>pos</var> be -1.</li><li>Return <var>pos</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchValue</var> is the empty String and <var>fromIndex</var> is less than or equal to the length of <var>string</var>, this algorithm returns <var>fromIndex</var>. The empty String is effectively found at every position within a string, including after the last code unit.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>This algorithm always returns -1 if <var>fromIndex</var> &gt; the length of <var>string</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-stringindexof"], "secData": {"sec-stringindexof": {"num": "6.1.4.1", "title": "#sec-stringindexof StringIndexOf ( string, searchValue, fromIndex )", "html": "<emu-clause id=\"sec-stringindexof\" aoid=\"StringIndexOf\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringindexof\">#sec-stringindexof</span> StringIndexOf ( <var>string</var>, <var>searchValue</var>, <var>fromIndex</var> )</h1>\n        <p>The abstract operation StringIndexOf takes arguments <var>string</var> (a String), <var>searchValue</var> (a String), and <var>fromIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>string</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>searchValue</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromIndex</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.</li><li>Let <var>len</var> be the length of <var>string</var>.</li><li>If <var>searchValue</var> is the empty String and <var>fromIndex</var> &#8804; <var>len</var>, return <var>fromIndex</var>.</li><li>Let <var>searchLen</var> be the length of <var>searchValue</var>.</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> starting with <var>fromIndex</var> such that <var>i</var> &#8804; <var>len</var> - <var>searchLen</var>, in ascending order, do<ol><li>Let <var>candidate</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>i</var> to <var>i</var> + <var>searchLen</var>.</li><li>If <var>candidate</var> is the same sequence of code units as <var>searchValue</var>, return <var>i</var>.</li></ol></li><li>Return -1.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchValue</var> is the empty String and <var>fromIndex</var> is less than or equal to the length of <var>string</var>, this algorithm returns <var>fromIndex</var>. The empty String is effectively found at every position within a string, including after the last code unit.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>This algorithm always returns -1 if <var>fromIndex</var> &gt; the length of <var>string</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {}}}