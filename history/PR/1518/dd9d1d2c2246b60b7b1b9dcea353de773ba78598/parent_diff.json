{"from": {"secList": ["sec-array.prototype.join"], "secData": {"sec-array.prototype.join": {"num": "22.1.3.15", "title": "#sec-array.prototype.join Array.prototype.join ( separator )", "html": "<emu-clause id=\"sec-array.prototype.join\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.join\">#sec-array.prototype.join</span> Array.prototype.join ( <var>separator</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The elements of the array are converted to Strings, and these Strings are then concatenated, separated by occurrences of the <var>separator</var>. If no separator is provided, a single comma is used as the separator.</p>\n        </div></emu-note>\n        <p>The <code>join</code> method takes one argument, <var>separator</var>, and performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <code>\"length\"</code>)).</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, let <var>sep</var> be the single-element String <code>\",\"</code>.</li><li>Else, let <var>sep</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>If <var>k</var> &gt; 0, set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>R</var> and <var>sep</var>.</li><li>Let <var>element</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>If <var>element</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, let <var>next</var> be the empty String; otherwise, let <var>next</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>element</var>).</li><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>R</var> and <var>next</var>.</li><li>Increase <var>k</var> by 1.</li></ol></li><li>Return <var>R</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>join</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-array.prototype.join"], "secData": {"sec-array.prototype.join": {"num": "22.1.3.15", "title": "#sec-array.prototype.join Array.prototype.join ( separator )", "html": "<emu-clause id=\"sec-array.prototype.join\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.join\">#sec-array.prototype.join</span> Array.prototype.join ( <var>separator</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The elements of the array are converted to Strings, and these Strings are then concatenated, separated by occurrences of the <var>separator</var>. If no separator is provided, a single comma is used as the separator.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          The <code>join</code> method has a [[SeenObjects]] internal slot whose value is a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n        \n        </div></emu-note>\n        <p>The <code>join</code> method takes one argument, <var>separator</var>, and performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <code>\"length\"</code>)).</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, let <var>sep</var> be the single-element String <code>\",\"</code>.</li><li>Else, let <var>sep</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Let <var>seen</var> be %Array.prototype.join%.[[SeenObjects]].</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>If <var>k</var> &gt; 0, set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>R</var> and <var>sep</var>.</li><li>Let <var>element</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>element</var>) is Object and <var>seen</var> contains <var>element</var>, then<ol><li>Let <var>next</var> be the empty String.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>element</var>) is Object, append <var>element</var> to <var>seen</var>.</li><li>If <var>element</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, let <var>next</var> be the empty String; otherwise, let <var>next</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>element</var>).</li></ol></li><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>R</var> and <var>next</var>.</li><li>Increase <var>k</var> by 1.</li></ol></li><li>Set %Array.prototype.join%.[[SeenObjects]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <var>R</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>join</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}