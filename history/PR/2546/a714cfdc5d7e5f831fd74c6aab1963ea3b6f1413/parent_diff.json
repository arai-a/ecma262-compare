{"from": {"secList": ["sec-postfix-decrement-operator-runtime-semantics-evaluation", "sec-islessthan", "sec-samevalue", "sec-ecmascript-language-types-number-type", "sec-atomics.sub", "sec-postfix-increment-operator-runtime-semantics-evaluation", "sec-numeric-types", "sec-bitwise-not-operator-runtime-semantics-evaluation", "sec-prefix-decrement-operator-runtime-semantics-evaluation", "sec-atomics.add", "sec-samevaluezero", "sec-applystringornumericbinaryoperator", "sec-isstrictlyequal", "sec-unary-minus-operator-runtime-semantics-evaluation", "sec-prefix-increment-operator-runtime-semantics-evaluation", "sec-ecmascript-language-types-bigint-type"], "secData": {"sec-postfix-decrement-operator-runtime-semantics-evaluation": {"num": "13.4.3.1", "title": "#sec-postfix-decrement-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-postfix-decrement-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-postfix-decrement-operator-runtime-semantics-evaluation\">#sec-postfix-decrement-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jr0tcoqg\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>--</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lhs</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::subtract(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>newValue</var>).</li><li>Return <var>oldValue</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-islessthan": {"num": "7.2.13", "title": "#sec-islessthan IsLessThan ( x, y, LeftFirst )", "html": "<emu-clause id=\"sec-islessthan\" type=\"abstract operation\" oldids=\"sec-abstract-relational-comparison\" aoid=\"IsLessThan\"><span id=\"sec-abstract-relational-comparison\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-islessthan\">#sec-islessthan</span> IsLessThan ( <var>x</var>, <var>y</var>, <var>LeftFirst</var> )</h1>\n      <p>The abstract operation IsLessThan takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>LeftFirst</var> (a Boolean). It provides the semantics for the comparison <var>x</var> &lt; <var>y</var>, returning <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). The <var>LeftFirst</var> flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. If <var>LeftFirst</var> is <emu-val>true</emu-val>, the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), return <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>)::lessThan(<var>nx</var>, <var>ny</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>nx</var>) &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>ny</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-samevalue": {"num": "7.2.10", "title": "#sec-samevalue SameValue ( x, y )", "html": "<emu-clause id=\"sec-samevalue\" type=\"abstract operation\" aoid=\"SameValue\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevalue\">#sec-samevalue</span> SameValue ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValue takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean indicating whether or not the two arguments are the same value. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number or BigInt, then<ol><li>Return !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>)::sameValue(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This algorithm differs from the <emu-xref aoid=\"IsStrictlyEqual\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual</a></emu-xref> Algorithm by treating all <emu-val>NaN</emu-val> values as equivalent and by differentiating <emu-val>+0</emu-val><sub>&#120125;</sub> from <emu-val>-0</emu-val><sub>&#120125;</sub>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ecmascript-language-types-number-type": {"num": "6.1.6.1", "title": "#sec-ecmascript-language-types-number-type The Number Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-number-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</span> The Number Type</h1>\n        <p>The Number type has exactly 18,437,736,874,454,810,627 (that is, <emu-eqn class=\"inline\">2<sup>64</sup> - 2<sup>53</sup> + 3</emu-eqn>) values, representing the double-precision 64-bit format <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9,007,199,254,740,990 (that is, <emu-eqn class=\"inline\">2<sup>53</sup> - 2</emu-eqn>) distinct &#8220;Not-a-Number&#8221; values of the IEEE Standard are represented in ECMAScript as a single special <emu-val>NaN</emu-val> value. (Note that the <emu-val>NaN</emu-val> value is produced by the program expression <code>NaN</code>.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>; to ECMAScript code, all <emu-val>NaN</emu-val> values are indistinguishable from each other.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The bit pattern that might be observed in an ArrayBuffer (see <emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>) or a SharedArrayBuffer (see <emu-xref href=\"#sec-sharedarraybuffer-objects\"><a href=\"#sec-sharedarraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-sharedarraybuffer-objects\">#sec-sharedarraybuffer-objects</a></emu-xref>) after a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> has been stored into it is not necessarily the same as the internal representation of that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> used by the ECMAScript implementation.</p>\n        </div></emu-note>\n        <p>There are two other special values, called <emu-val>positive Infinity</emu-val> and <emu-val>negative Infinity</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, respectively. (Note that these two infinite Number values are produced by the program expressions <code>+Infinity</code> (or simply <code>Infinity</code>) and <code>-Infinity</code>.)</p>\n        <p>The other 18,437,736,874,454,810,624 (that is, <emu-eqn class=\"inline\">2<sup>64</sup> - 2<sup>53</sup></emu-eqn>) values are called the finite numbers. Half of these are positive numbers and half are negative numbers; for every finite positive <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> there is a corresponding negative value having the same magnitude.</p>\n        <p>Note that there is both a <emu-val>positive zero</emu-val> and a <emu-val>negative zero</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub>, respectively. (Note that these two different zero Number values are produced by the program expressions <code>+0</code> (or simply <code>0</code>) and <code>-0</code>.)</p>\n        <p>The 18,437,736,874,454,810,622 (that is, <emu-eqn class=\"inline\">2<sup>64</sup> - 2<sup>53</sup> - 2</emu-eqn>) finite non-zero values are of two kinds:</p>\n        <p>18,428,729,675,200,069,632 (that is, <emu-eqn class=\"inline\">2<sup>64</sup> - 2<sup>54</sup></emu-eqn>) of them are normalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is 1 or -1, <var>m</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that 2<sup>52</sup> &#8804; <var>m</var> &lt; 2<sup>53</sup>, and <var>e</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that -1074 &#8804; <var>e</var> &#8804; 971.</p>\n        <p>The remaining 9,007,199,254,740,990 (that is, <emu-eqn class=\"inline\">2<sup>53</sup> - 2</emu-eqn>) values are denormalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is 1 or -1, <var>m</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that 0 &lt; <var>m</var> &lt; 2<sup>52</sup>, and <var>e</var> is -1074.</p>\n        <p>Note that all the positive and negative <emu-xref href=\"#integer\"><a href=\"#integer\">integers</a></emu-xref> whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type. The <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> 0 has two representations in the Number type: <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub>.</p>\n        <p>A finite number has an <em>odd significand</em> if it is non-zero and the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>m</var> used to express it (in one of the two forms shown above) is odd. Otherwise, it has an <em>even significand</em>.</p>\n        <p>In this specification, the phrase &#8220;the <dfn id=\"number-value\">Number value</dfn> for <var>x</var>&#8221; where <var>x</var> represents an exact real mathematical quantity (which might even be an irrational number such as &#960;) means a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> chosen in the following manner. Consider the set of all finite values of the Number type, with <emu-val>-0</emu-val><sub>&#120125;</sub> removed and with two additional values added to it that are not representable in the Number type, namely 2<sup>1024</sup> (which is <emu-eqn class=\"inline\">+1 &#215; 2<sup>53</sup> &#215; 2<sup>971</sup></emu-eqn>) and <emu-eqn class=\"inline\">-2<sup>1024</sup></emu-eqn> (which is <emu-eqn class=\"inline\">-1 &#215; 2<sup>53</sup> &#215; 2<sup>971</sup></emu-eqn>). Choose the member of this set that is closest in value to <var>x</var>. If two values of the set are equally close, then the one with an even significand is chosen; for this purpose, the two extra values 2<sup>1024</sup> and <emu-eqn class=\"inline\">-2<sup>1024</sup></emu-eqn> are considered to have even significands. Finally, if 2<sup>1024</sup> was chosen, replace it with <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>; if <emu-eqn class=\"inline\">-2<sup>1024</sup></emu-eqn> was chosen, replace it with <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>; if <emu-val>+0</emu-val><sub>&#120125;</sub> was chosen, replace it with <emu-val>-0</emu-val><sub>&#120125;</sub> if and only if <var>x</var> &lt; 0; any other chosen value is used unchanged. The result is the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>. (This procedure corresponds exactly to the behaviour of the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode.)</p>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for +&#8734; is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, and the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for -&#8734; is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>.</p>\n        <p>Some ECMAScript operators deal only with <emu-xref href=\"#integer\"><a href=\"#integer\">integers</a></emu-xref> in specific ranges such as <emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn> through <emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>, inclusive, or in the range 0 through <emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>, inclusive. These operators accept any value of the Number type but first convert each such value to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the expected range. See the descriptions of the numeric conversion operations in <emu-xref href=\"#sec-type-conversion\"><a href=\"#sec-type-conversion\" class=\"excluded-xref\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</a></emu-xref>.</p>\n\n        <p>The Number::unit value is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n\n        <div id=\"excluded-sec-numeric-types-number-unaryMinus\"><h1><span class=\"secnum\">6.1.6.1.1</span>#sec-numeric-types-number-unaryMinus Number::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.1.2</span>#sec-numeric-types-number-bitwiseNOT Number::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-exponentiate\"><h1><span class=\"secnum\">6.1.6.1.3</span>#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-number-multiply\"><h1><span class=\"secnum\">6.1.6.1.4</span>#sec-numeric-types-number-multiply Number::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-divide\"><h1><span class=\"secnum\">6.1.6.1.5</span>#sec-numeric-types-number-divide Number::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-remainder\"><h1><span class=\"secnum\">6.1.6.1.6</span>#sec-numeric-types-number-remainder Number::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-number-add\"><h1><span class=\"secnum\">6.1.6.1.7</span>#sec-numeric-types-number-add Number::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-subtract\"><h1><span class=\"secnum\">6.1.6.1.8</span>#sec-numeric-types-number-subtract Number::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-leftShift\"><h1><span class=\"secnum\">6.1.6.1.9</span>#sec-numeric-types-number-leftShift Number::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-signedRightShift\"><h1><span class=\"secnum\">6.1.6.1.10</span>#sec-numeric-types-number-signedRightShift Number::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.1.11</span>#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-lessThan\"><h1><span class=\"secnum\">6.1.6.1.12</span>#sec-numeric-types-number-lessThan Number::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-equal\"><h1><span class=\"secnum\">6.1.6.1.13</span>#sec-numeric-types-number-equal Number::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValue\"><h1><span class=\"secnum\">6.1.6.1.14</span>#sec-numeric-types-number-sameValue Number::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValueZero\"><h1><span class=\"secnum\">6.1.6.1.15</span>#sec-numeric-types-number-sameValueZero Number::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-numberbitwiseop\"><h1><span class=\"secnum\">6.1.6.1.16</span>#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.1.17</span>#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.1.18</span>#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.1.19</span>#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-tostring\"><h1><span class=\"secnum\">6.1.6.1.20</span>#sec-numeric-types-number-tostring Number::toString ( x )</h1>...</div></emu-clause>\n\n      "}, "sec-atomics.sub": {"num": "25.4.11", "title": "#sec-atomics.sub Atomics.sub ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.sub\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.sub\">#sec-atomics.sub</span> Atomics.sub ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>isLittleEndian</var> be the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>subtract</var> be a new <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref> with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures <var>type</var> and <var>isLittleEndian</var> and performs the following steps atomically when called:<ol><li>Let <var>x</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>xBytes</var>, <var>isLittleEndian</var>).</li><li>Let <var>y</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>yBytes</var>, <var>isLittleEndian</var>).</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>).</li><li>Let <var>difference</var> be <var>T</var>::subtract(<var>x</var>, <var>y</var>).</li><li>Let <var>differenceBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>difference</var>, <var>isLittleEndian</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>differenceBytes</var>, <var>xBytes</var>, and <var>yBytes</var> have the same number of elements.</li><li>Return <var>differenceBytes</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>subtract</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-postfix-increment-operator-runtime-semantics-evaluation": {"num": "13.4.2.1", "title": "#sec-postfix-increment-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-postfix-increment-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-postfix-increment-operator-runtime-semantics-evaluation\">#sec-postfix-increment-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i_jjg0ex\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>++</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lhs</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::add(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>newValue</var>).</li><li>Return <var>oldValue</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-numeric-types": {"num": "6.1.6", "title": "#sec-numeric-types Numeric Types", "html": "<emu-clause id=\"sec-numeric-types\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types\">#sec-numeric-types</span> Numeric Types</h1>\n      <p>ECMAScript has two built-in numeric types: Number and BigInt. In this specification, every numeric type <var>T</var> contains a multiplicative identity value denoted <var>T</var>::unit. The specification types also have the following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>, likewise denoted <var>T</var>::<i>op</i> for a given operation with specification name <i>op</i>. All argument types are <var>T</var>. The \"Result\" column shows the return type, along with an indication if it is possible for some invocations of the operation to return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-table id=\"table-numeric-type-ops\" caption=\"Numeric Type Operations\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-numeric-type-ops\">#table-numeric-type-ops</span>: Numeric Type Operations</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Invocation Synopsis\n            </th>\n            <th>\n              Example source\n            </th>\n            <th>\n              Invoked by the Evaluation semantics of ...\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unaryMinus(x)\n            </td>\n            <td>\n              <code>-x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unary-minus-operator\" title=\"\"><a href=\"#sec-unary-minus-operator\">Unary <code>-</code> Operator</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseNOT(x)\n            </td>\n            <td>\n              <code>~x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-bitwise-not-operator\" title=\"\"><a href=\"#sec-bitwise-not-operator\">Bitwise NOT Operator ( <code>~</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::exponentiate(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;**&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-exp-operator\" title=\"\"><a href=\"#sec-exp-operator\">Exponentiation Operator</a></emu-xref>\n              and <emu-xref href=\"#sec-math.pow\" title=\"\"><a href=\"#sec-math.pow\">Math.pow ( <var>base</var>, <var>exponent</var> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::multiply(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;*&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::divide(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;/&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::remainder(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;%&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::add(x,&#160;y)\n            </td>\n            <td>\n              <code>x ++</code><br><code>++ x</code><br><code>x&#160;+&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-increment-operator\" title=\"\"><a href=\"#sec-postfix-increment-operator\">Postfix Increment Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-increment-operator\" title=\"\"><a href=\"#sec-prefix-increment-operator\">Prefix Increment Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-addition-operator-plus\" title=\"\"><a href=\"#sec-addition-operator-plus\">The Addition Operator ( <code>+</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::subtract(x,&#160;y)\n            </td>\n            <td>\n              <code>x --</code><br><code>-- x</code><br><code>x&#160;-&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-decrement-operator\" title=\"\"><a href=\"#sec-postfix-decrement-operator\">Postfix Decrement Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-decrement-operator\" title=\"\"><a href=\"#sec-prefix-decrement-operator\">Prefix Decrement Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-subtraction-operator-minus\" title=\"\"><a href=\"#sec-subtraction-operator-minus\">The Subtraction Operator ( <code>-</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::leftShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&lt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-left-shift-operator\" title=\"\"><a href=\"#sec-left-shift-operator\">The Left Shift Operator ( <code>&lt;&lt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::signedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-signed-right-shift-operator\" title=\"\"><a href=\"#sec-signed-right-shift-operator\">The Signed Right Shift Operator ( <code>&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unsignedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unsigned-right-shift-operator\" title=\"\"><a href=\"#sec-unsigned-right-shift-operator\">The Unsigned Right Shift Operator ( <code>&gt;&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>TypeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::lessThan(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&#160;y</code><br><code>x&#160;&gt;&#160;y</code><br><code>x&#160;&lt;=&#160;y</code><br><code>x&#160;&gt;=&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-relational-operators\" title=\"\"><a href=\"#sec-relational-operators\">Relational Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-islessthan\" title=\"\"><a href=\"#sec-islessthan\">IsLessThan ( <var>x</var>, <var>y</var>, <var>LeftFirst</var> )</a></emu-xref>\n            </td>\n            <td>\n              Boolean or <emu-val>undefined</emu-val> (for unordered inputs)\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::equal(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;==&#160;y</code><br><code>x&#160;!=&#160;y</code><br><code>x&#160;===&#160;y</code><br><code>x&#160;!==&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-equality-operators\" title=\"\"><a href=\"#sec-equality-operators\">Equality Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-isstrictlyequal\" title=\"\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual ( <var>x</var>, <var>y</var> )</a></emu-xref>\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValue(x,&#160;y)\n            </td>\n            <td>\n              <code>Object.is(x, y)</code>\n            </td>\n            <td>\n              Object internal methods,\n              via <emu-xref href=\"#sec-samevalue\" title=\"\"><a href=\"#sec-samevalue\">SameValue ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test exact value equality\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValueZero(x,&#160;y)\n            </td>\n            <td>\n              <code>[x].includes(y)</code>\n            </td>\n            <td>\n              Array, Map, and Set methods,\n              via <emu-xref href=\"#sec-samevaluezero\" title=\"\"><a href=\"#sec-samevaluezero\">SameValueZero ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test value equality ignoring differences between Numbers in the zero cohort (i.e., <emu-val>-0</emu-val><sub>&#120125;</sub> and <emu-val>+0</emu-val><sub>&#120125;</sub>)\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseAND(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&amp;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseXOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;^&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;|&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::toString(x)\n            </td>\n            <td>\n              <code>String(x)</code>\n            </td>\n            <td>\n              Many expressions and built-in functions, via <emu-xref href=\"#sec-tostring\" title=\"\"><a href=\"#sec-tostring\">ToString ( <var>argument</var> )</a></emu-xref>\n            </td>\n            <td>\n              String\n            </td>\n\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The <var>T</var>::unit value and <var>T</var>::<var>op</var> operations are not a part of the ECMAScript language; they are defined here solely to aid the specification of the semantics of the ECMAScript language. Other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are defined throughout this specification.</p>\n      <p>Because the numeric types are in general not convertible without loss of precision or truncation, the ECMAScript language provides no implicit conversion among these types. Programmers must explicitly call <code>Number</code> and <code>BigInt</code> functions to convert among types when calling a function which requires another type.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The first and subsequent editions of ECMAScript have provided, for certain operators, implicit numeric conversions that could lose precision or truncate. These legacy implicit conversions are maintained for backward compatibility, but not provided for BigInt in order to minimize opportunity for programmer error, and to leave open the option of generalized <em>value types</em> in a future edition.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ecmascript-language-types-number-type\"><h1><span class=\"secnum\">6.1.6.1</span>#sec-ecmascript-language-types-number-type The Number Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-bigint-type\"><h1><span class=\"secnum\">6.1.6.2</span>#sec-ecmascript-language-types-bigint-type The BigInt Type</h1>...</div></emu-clause>\n\n    "}, "sec-bitwise-not-operator-runtime-semantics-evaluation": {"num": "13.5.6.1", "title": "#sec-bitwise-not-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-bitwise-not-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bitwise-not-operator-runtime-semantics-evaluation\">#sec-bitwise-not-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b9nqec7b\">\n        <emu-t>~</emu-t>\n        <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>).</li><li>Return ! <var>T</var>::bitwiseNOT(<var>oldValue</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-prefix-decrement-operator-runtime-semantics-evaluation": {"num": "13.4.5.1", "title": "#sec-prefix-decrement-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">#sec-prefix-decrement-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"onrvwudi\">\n        <emu-t>--</emu-t>\n        <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::subtract(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-atomics.add": {"num": "25.4.3", "title": "#sec-atomics.add Atomics.add ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.add\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.add\">#sec-atomics.add</span> Atomics.add ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>isLittleEndian</var> be the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>add</var> be a new <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref> with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures <var>type</var> and <var>isLittleEndian</var> and performs the following steps atomically when called:<ol><li>Let <var>x</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>xBytes</var>, <var>isLittleEndian</var>).</li><li>Let <var>y</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>yBytes</var>, <var>isLittleEndian</var>).</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>).</li><li>Let <var>sum</var> be <var>T</var>::add(<var>x</var>, <var>y</var>).</li><li>Let <var>sumBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>sum</var>, <var>isLittleEndian</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sumBytes</var>, <var>xBytes</var>, and <var>yBytes</var> have the same number of elements.</li><li>Return <var>sumBytes</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>add</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-samevaluezero": {"num": "7.2.11", "title": "#sec-samevaluezero SameValueZero ( x, y )", "html": "<emu-clause id=\"sec-samevaluezero\" type=\"abstract operation\" aoid=\"SameValueZero\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevaluezero\">#sec-samevaluezero</span> SameValueZero ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValueZero takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean indicating whether or not the two arguments are the same value (ignoring the difference between <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number or BigInt, then<ol><li>Return !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>)::sameValueZero(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>SameValueZero differs from <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> only in that it treats <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub> as equivalent.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-applystringornumericbinaryoperator": {"num": "13.15.3", "title": "#sec-applystringornumericbinaryoperator ApplyStringOrNumericBinaryOperator ( lval, opText, rval )", "html": "<emu-clause id=\"sec-applystringornumericbinaryoperator\" type=\"abstract operation\" aoid=\"ApplyStringOrNumericBinaryOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</span> ApplyStringOrNumericBinaryOperator ( <var>lval</var>, <var>opText</var>, <var>rval</var> )</h1>\n      <p>The abstract operation ApplyStringOrNumericBinaryOperator takes arguments <var>lval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>opText</var> (a sequence of Unicode code points), and <var>rval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>opText</var> is present in the table in step <emu-xref href=\"#step-applystringornumericbinaryoperator-operations-table\"><a href=\"#step-applystringornumericbinaryoperator-operations-table\" class=\"excluded-xref\" excluded-id=\"step-applystringornumericbinaryoperator-operations-table\">#step-applystringornumericbinaryoperator-operations-table</a></emu-xref>.</li><li>If <var>opText</var> is <code>+</code>, then<ol><li id=\"step-binary-op-toprimitive-lval\">Let <var>lprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>lval</var>).</li><li id=\"step-binary-op-toprimitive-rval\">Let <var>rprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>rval</var>).</li><li id=\"step-binary-op-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lprim</var>) is String or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rprim</var>) is String, then<ol><li>Let <var>lstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>rprim</var>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>lstr</var> and <var>rstr</var>.</li></ol></li><li>Set <var>lval</var> to <var>lprim</var>.</li><li>Set <var>rval</var> to <var>rprim</var>.</li></ol></li><li>NOTE: At this point, it must be a numeric operation.</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li id=\"step-applystringornumericbinaryoperator-operations-table\">Let <var>operation</var> be the abstract operation associated with <var>opText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>opText</var>       </th><th> <var>operation</var>             </th></tr>\n                <tr><td> <code>**</code>           </td><td> <var>T</var>::exponentiate       </td></tr>\n                <tr><td> <code>*</code>            </td><td> <var>T</var>::multiply           </td></tr>\n                <tr><td> <code>/</code>            </td><td> <var>T</var>::divide             </td></tr>\n                <tr><td> <code>%</code>            </td><td> <var>T</var>::remainder          </td></tr>\n                <tr><td> <code>+</code>            </td><td> <var>T</var>::add                </td></tr>\n                <tr><td> <code>-</code>            </td><td> <var>T</var>::subtract           </td></tr>\n                <tr><td> <code>&lt;&lt;</code>     </td><td> <var>T</var>::leftShift          </td></tr>\n                <tr><td> <code>&gt;&gt;</code>     </td><td> <var>T</var>::signedRightShift   </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;</code> </td><td> <var>T</var>::unsignedRightShift </td></tr>\n                <tr><td> <code>&amp;</code>        </td><td> <var>T</var>::bitwiseAND         </td></tr>\n                <tr><td> <code>^</code>            </td><td> <var>T</var>::bitwiseXOR         </td></tr>\n                <tr><td> <code>|</code>            </td><td> <var>T</var>::bitwiseOR          </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Return ? <var>operation</var>(<var>lnum</var>, <var>rnum</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>No hint is provided in the calls to <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref> in steps <emu-xref href=\"#step-binary-op-toprimitive-lval\"><a href=\"#step-binary-op-toprimitive-lval\">2.a</a></emu-xref> and <emu-xref href=\"#step-binary-op-toprimitive-rval\"><a href=\"#step-binary-op-toprimitive-rval\">2.b</a></emu-xref>. All standard objects except Dates handle the absence of a hint as if <emu-const>number</emu-const> were given; Dates handle the absence of a hint as if <emu-const>string</emu-const> were given. <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">Exotic objects</a></emu-xref> may handle the absence of a hint in some other manner.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> differs from step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> of the <emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref> algorithm, by using the logical-or operation instead of the logical-and operation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-isstrictlyequal": {"num": "7.2.15", "title": "#sec-isstrictlyequal IsStrictlyEqual ( x, y )", "html": "<emu-clause id=\"sec-isstrictlyequal\" type=\"abstract operation\" oldids=\"sec-strict-equality-comparison\" aoid=\"IsStrictlyEqual\"><span id=\"sec-strict-equality-comparison\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isstrictlyequal\">#sec-isstrictlyequal</span> IsStrictlyEqual ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation IsStrictlyEqual takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It provides the semantics for the comparison <var>x</var> === <var>y</var>, returning <emu-val>true</emu-val> or <emu-val>false</emu-val>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number or BigInt, then<ol><li>Return !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>)::equal(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This algorithm differs from the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> Algorithm in its treatment of signed zeroes and NaNs.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-unary-minus-operator-runtime-semantics-evaluation": {"num": "13.5.5.1", "title": "#sec-unary-minus-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-unary-minus-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-unary-minus-operator-runtime-semantics-evaluation\">#sec-unary-minus-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"odzkxnu5\">\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>).</li><li>Return ! <var>T</var>::unaryMinus(<var>oldValue</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-prefix-increment-operator-runtime-semantics-evaluation": {"num": "13.4.4.1", "title": "#sec-prefix-increment-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-prefix-increment-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prefix-increment-operator-runtime-semantics-evaluation\">#sec-prefix-increment-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vwgxygda\">\n        <emu-t>++</emu-t>\n        <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::add(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ecmascript-language-types-bigint-type": {"num": "6.1.6.2", "title": "#sec-ecmascript-language-types-bigint-type The BigInt Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-bigint-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-bigint-type\">#sec-ecmascript-language-types-bigint-type</span> The BigInt Type</h1>\n        <p>The BigInt type represents an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value. The value may be any size and is not limited to a particular bit-width. Generally, where not otherwise noted, operations are designed to return exact mathematically-based answers. For binary operations, BigInts act as two's complement binary strings, with negative numbers treated as having bits set infinitely to the left.</p>\n\n        <p>The BigInt::unit value is <emu-val>1</emu-val><sub>&#8484;</sub>.</p>\n\n        <div id=\"excluded-sec-numeric-types-bigint-unaryMinus\"><h1><span class=\"secnum\">6.1.6.2.1</span>#sec-numeric-types-bigint-unaryMinus BigInt::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.2.2</span>#sec-numeric-types-bigint-bitwiseNOT BigInt::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-exponentiate\"><h1><span class=\"secnum\">6.1.6.2.3</span>#sec-numeric-types-bigint-exponentiate BigInt::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-multiply\"><h1><span class=\"secnum\">6.1.6.2.4</span>#sec-numeric-types-bigint-multiply BigInt::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-divide\"><h1><span class=\"secnum\">6.1.6.2.5</span>#sec-numeric-types-bigint-divide BigInt::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-remainder\"><h1><span class=\"secnum\">6.1.6.2.6</span>#sec-numeric-types-bigint-remainder BigInt::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-add\"><h1><span class=\"secnum\">6.1.6.2.7</span>#sec-numeric-types-bigint-add BigInt::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-subtract\"><h1><span class=\"secnum\">6.1.6.2.8</span>#sec-numeric-types-bigint-subtract BigInt::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-leftShift\"><h1><span class=\"secnum\">6.1.6.2.9</span>#sec-numeric-types-bigint-leftShift BigInt::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-signedRightShift\"><h1><span class=\"secnum\">6.1.6.2.10</span>#sec-numeric-types-bigint-signedRightShift BigInt::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.2.11</span>#sec-numeric-types-bigint-unsignedRightShift BigInt::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-lessThan\"><h1><span class=\"secnum\">6.1.6.2.12</span>#sec-numeric-types-bigint-lessThan BigInt::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-equal\"><h1><span class=\"secnum\">6.1.6.2.13</span>#sec-numeric-types-bigint-equal BigInt::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-sameValue\"><h1><span class=\"secnum\">6.1.6.2.14</span>#sec-numeric-types-bigint-sameValue BigInt::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-sameValueZero\"><h1><span class=\"secnum\">6.1.6.2.15</span>#sec-numeric-types-bigint-sameValueZero BigInt::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-binaryand\"><h1><span class=\"secnum\">6.1.6.2.16</span>#sec-binaryand BinaryAnd ( x, y )</h1>...</div><div id=\"excluded-sec-binaryor\"><h1><span class=\"secnum\">6.1.6.2.17</span>#sec-binaryor BinaryOr ( x, y )</h1>...</div><div id=\"excluded-sec-binaryxor\"><h1><span class=\"secnum\">6.1.6.2.18</span>#sec-binaryxor BinaryXor ( x, y )</h1>...</div><div id=\"excluded-sec-bigintbitwiseop\"><h1><span class=\"secnum\">6.1.6.2.19</span>#sec-bigintbitwiseop BigIntBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.2.20</span>#sec-numeric-types-bigint-bitwiseAND BigInt::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.2.21</span>#sec-numeric-types-bigint-bitwiseXOR BigInt::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.2.22</span>#sec-numeric-types-bigint-bitwiseOR BigInt::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-tostring\"><h1><span class=\"secnum\">6.1.6.2.23</span>#sec-numeric-types-bigint-tostring BigInt::toString ( x )</h1>...</div></emu-clause>\n    "}}, "figData": {"table-numeric-type-ops": "Table 2", "table-the-typedarray-constructors": "Table 72"}}, "to": {"secList": ["sec-postfix-decrement-operator-runtime-semantics-evaluation", "sec-islessthan", "sec-samevalue", "sec-ecmascript-language-types-number-type", "sec-atomics.sub", "sec-postfix-increment-operator-runtime-semantics-evaluation", "sec-numeric-types", "sec-bitwise-not-operator-runtime-semantics-evaluation", "sec-prefix-decrement-operator-runtime-semantics-evaluation", "sec-atomics.add", "sec-samevaluezero", "sec-applystringornumericbinaryoperator", "sec-isstrictlyequal", "sec-unary-minus-operator-runtime-semantics-evaluation", "sec-prefix-increment-operator-runtime-semantics-evaluation", "sec-ecmascript-language-types-bigint-type"], "secData": {"sec-postfix-decrement-operator-runtime-semantics-evaluation": {"num": "13.4.3.1", "title": "#sec-postfix-decrement-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-postfix-decrement-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-postfix-decrement-operator-runtime-semantics-evaluation\">#sec-postfix-decrement-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jr0tcoqg\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>--</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lhs</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is Number, then<ol><li>Let <var>newValue</var> be ! <emu-xref aoid=\"Number::subtract\"><a href=\"#sec-numeric-types-number-subtract\">Number::subtract</a></emu-xref>(<var>oldValue</var>, <emu-val>1</emu-val><sub>&#120125;</sub>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is BigInt.</li><li>Let <var>newValue</var> be ! <emu-xref aoid=\"BigInt::subtract\"><a href=\"#sec-numeric-types-bigint-subtract\">BigInt::subtract</a></emu-xref>(<var>oldValue</var>, <emu-val>1</emu-val><sub>&#8484;</sub>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>newValue</var>).</li><li>Return <var>oldValue</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-islessthan": {"num": "7.2.13", "title": "#sec-islessthan IsLessThan ( x, y, LeftFirst )", "html": "<emu-clause id=\"sec-islessthan\" type=\"abstract operation\" oldids=\"sec-abstract-relational-comparison\" aoid=\"IsLessThan\"><span id=\"sec-abstract-relational-comparison\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-islessthan\">#sec-islessthan</span> IsLessThan ( <var>x</var>, <var>y</var>, <var>LeftFirst</var> )</h1>\n      <p>The abstract operation IsLessThan takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>LeftFirst</var> (a Boolean). It provides the semantics for the comparison <var>x</var> &lt; <var>y</var>, returning <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). The <var>LeftFirst</var> flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. If <var>LeftFirst</var> is <emu-val>true</emu-val>, the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number, then<ol><li>Return <emu-xref aoid=\"Number::lessThan\"><a href=\"#sec-numeric-types-number-lessThan\">Number::lessThan</a></emu-xref>(<var>nx</var>, <var>ny</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt.</li><li>Return <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>(<var>nx</var>, <var>ny</var>).</li></ol></li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>nx</var>) &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>ny</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-samevalue": {"num": "7.2.10", "title": "#sec-samevalue SameValue ( x, y )", "html": "<emu-clause id=\"sec-samevalue\" type=\"abstract operation\" aoid=\"SameValue\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevalue\">#sec-samevalue</span> SameValue ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValue takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean indicating whether or not the two arguments are the same value. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number, then<ol><li>Return ! <emu-xref aoid=\"Number::sameValue\"><a href=\"#sec-numeric-types-number-sameValue\">Number::sameValue</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt, then<ol><li>Return ! <emu-xref aoid=\"BigInt::sameValue\"><a href=\"#sec-numeric-types-bigint-sameValue\">BigInt::sameValue</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This algorithm differs from the <emu-xref aoid=\"IsStrictlyEqual\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual</a></emu-xref> Algorithm by treating all <emu-val>NaN</emu-val> values as equivalent and by differentiating <emu-val>+0</emu-val><sub>&#120125;</sub> from <emu-val>-0</emu-val><sub>&#120125;</sub>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ecmascript-language-types-number-type": {"num": "6.1.6.1", "title": "#sec-ecmascript-language-types-number-type The Number Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-number-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</span> The Number Type</h1>\n        <p>The Number type has exactly 18,437,736,874,454,810,627 (that is, <emu-eqn class=\"inline\">2<sup>64</sup> - 2<sup>53</sup> + 3</emu-eqn>) values, representing the double-precision 64-bit format <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9,007,199,254,740,990 (that is, <emu-eqn class=\"inline\">2<sup>53</sup> - 2</emu-eqn>) distinct &#8220;Not-a-Number&#8221; values of the IEEE Standard are represented in ECMAScript as a single special <emu-val>NaN</emu-val> value. (Note that the <emu-val>NaN</emu-val> value is produced by the program expression <code>NaN</code>.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>; to ECMAScript code, all <emu-val>NaN</emu-val> values are indistinguishable from each other.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The bit pattern that might be observed in an ArrayBuffer (see <emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>) or a SharedArrayBuffer (see <emu-xref href=\"#sec-sharedarraybuffer-objects\"><a href=\"#sec-sharedarraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-sharedarraybuffer-objects\">#sec-sharedarraybuffer-objects</a></emu-xref>) after a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> has been stored into it is not necessarily the same as the internal representation of that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> used by the ECMAScript implementation.</p>\n        </div></emu-note>\n        <p>There are two other special values, called <emu-val>positive Infinity</emu-val> and <emu-val>negative Infinity</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, respectively. (Note that these two infinite Number values are produced by the program expressions <code>+Infinity</code> (or simply <code>Infinity</code>) and <code>-Infinity</code>.)</p>\n        <p>The other 18,437,736,874,454,810,624 (that is, <emu-eqn class=\"inline\">2<sup>64</sup> - 2<sup>53</sup></emu-eqn>) values are called the finite numbers. Half of these are positive numbers and half are negative numbers; for every finite positive <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> there is a corresponding negative value having the same magnitude.</p>\n        <p>Note that there is both a <emu-val>positive zero</emu-val> and a <emu-val>negative zero</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub>, respectively. (Note that these two different zero Number values are produced by the program expressions <code>+0</code> (or simply <code>0</code>) and <code>-0</code>.)</p>\n        <p>The 18,437,736,874,454,810,622 (that is, <emu-eqn class=\"inline\">2<sup>64</sup> - 2<sup>53</sup> - 2</emu-eqn>) finite non-zero values are of two kinds:</p>\n        <p>18,428,729,675,200,069,632 (that is, <emu-eqn class=\"inline\">2<sup>64</sup> - 2<sup>54</sup></emu-eqn>) of them are normalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is 1 or -1, <var>m</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that 2<sup>52</sup> &#8804; <var>m</var> &lt; 2<sup>53</sup>, and <var>e</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that -1074 &#8804; <var>e</var> &#8804; 971.</p>\n        <p>The remaining 9,007,199,254,740,990 (that is, <emu-eqn class=\"inline\">2<sup>53</sup> - 2</emu-eqn>) values are denormalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is 1 or -1, <var>m</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that 0 &lt; <var>m</var> &lt; 2<sup>52</sup>, and <var>e</var> is -1074.</p>\n        <p>Note that all the positive and negative <emu-xref href=\"#integer\"><a href=\"#integer\">integers</a></emu-xref> whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type. The <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> 0 has two representations in the Number type: <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub>.</p>\n        <p>A finite number has an <em>odd significand</em> if it is non-zero and the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>m</var> used to express it (in one of the two forms shown above) is odd. Otherwise, it has an <em>even significand</em>.</p>\n        <p>In this specification, the phrase &#8220;the <dfn id=\"number-value\">Number value</dfn> for <var>x</var>&#8221; where <var>x</var> represents an exact real mathematical quantity (which might even be an irrational number such as &#960;) means a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> chosen in the following manner. Consider the set of all finite values of the Number type, with <emu-val>-0</emu-val><sub>&#120125;</sub> removed and with two additional values added to it that are not representable in the Number type, namely 2<sup>1024</sup> (which is <emu-eqn class=\"inline\">+1 &#215; 2<sup>53</sup> &#215; 2<sup>971</sup></emu-eqn>) and <emu-eqn class=\"inline\">-2<sup>1024</sup></emu-eqn> (which is <emu-eqn class=\"inline\">-1 &#215; 2<sup>53</sup> &#215; 2<sup>971</sup></emu-eqn>). Choose the member of this set that is closest in value to <var>x</var>. If two values of the set are equally close, then the one with an even significand is chosen; for this purpose, the two extra values 2<sup>1024</sup> and <emu-eqn class=\"inline\">-2<sup>1024</sup></emu-eqn> are considered to have even significands. Finally, if 2<sup>1024</sup> was chosen, replace it with <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>; if <emu-eqn class=\"inline\">-2<sup>1024</sup></emu-eqn> was chosen, replace it with <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>; if <emu-val>+0</emu-val><sub>&#120125;</sub> was chosen, replace it with <emu-val>-0</emu-val><sub>&#120125;</sub> if and only if <var>x</var> &lt; 0; any other chosen value is used unchanged. The result is the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>. (This procedure corresponds exactly to the behaviour of the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode.)</p>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for +&#8734; is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, and the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for -&#8734; is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>.</p>\n        <p>Some ECMAScript operators deal only with <emu-xref href=\"#integer\"><a href=\"#integer\">integers</a></emu-xref> in specific ranges such as <emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn> through <emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>, inclusive, or in the range 0 through <emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>, inclusive. These operators accept any value of the Number type but first convert each such value to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the expected range. See the descriptions of the numeric conversion operations in <emu-xref href=\"#sec-type-conversion\"><a href=\"#sec-type-conversion\" class=\"excluded-xref\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</a></emu-xref>.</p>\n\n        <div id=\"excluded-sec-numeric-types-number-unaryMinus\"><h1><span class=\"secnum\">6.1.6.1.1</span>#sec-numeric-types-number-unaryMinus Number::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.1.2</span>#sec-numeric-types-number-bitwiseNOT Number::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-exponentiate\"><h1><span class=\"secnum\">6.1.6.1.3</span>#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-number-multiply\"><h1><span class=\"secnum\">6.1.6.1.4</span>#sec-numeric-types-number-multiply Number::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-divide\"><h1><span class=\"secnum\">6.1.6.1.5</span>#sec-numeric-types-number-divide Number::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-remainder\"><h1><span class=\"secnum\">6.1.6.1.6</span>#sec-numeric-types-number-remainder Number::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-number-add\"><h1><span class=\"secnum\">6.1.6.1.7</span>#sec-numeric-types-number-add Number::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-subtract\"><h1><span class=\"secnum\">6.1.6.1.8</span>#sec-numeric-types-number-subtract Number::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-leftShift\"><h1><span class=\"secnum\">6.1.6.1.9</span>#sec-numeric-types-number-leftShift Number::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-signedRightShift\"><h1><span class=\"secnum\">6.1.6.1.10</span>#sec-numeric-types-number-signedRightShift Number::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.1.11</span>#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-lessThan\"><h1><span class=\"secnum\">6.1.6.1.12</span>#sec-numeric-types-number-lessThan Number::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-equal\"><h1><span class=\"secnum\">6.1.6.1.13</span>#sec-numeric-types-number-equal Number::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValue\"><h1><span class=\"secnum\">6.1.6.1.14</span>#sec-numeric-types-number-sameValue Number::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValueZero\"><h1><span class=\"secnum\">6.1.6.1.15</span>#sec-numeric-types-number-sameValueZero Number::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-numberbitwiseop\"><h1><span class=\"secnum\">6.1.6.1.16</span>#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.1.17</span>#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.1.18</span>#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.1.19</span>#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-tostring\"><h1><span class=\"secnum\">6.1.6.1.20</span>#sec-numeric-types-number-tostring Number::toString ( x )</h1>...</div></emu-clause>\n\n      "}, "sec-atomics.sub": {"num": "25.4.11", "title": "#sec-atomics.sub Atomics.sub ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.sub\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.sub\">#sec-atomics.sub</span> Atomics.sub ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>isLittleEndian</var> be the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>subtract</var> be a new <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref> with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures <var>type</var> and <var>isLittleEndian</var> and performs the following steps atomically when called:<ol><li>Let <var>x</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>xBytes</var>, <var>isLittleEndian</var>).</li><li>Let <var>y</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>yBytes</var>, <var>isLittleEndian</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number, then<ol><li>Let <var>difference</var> be <emu-xref aoid=\"Number::subtract\"><a href=\"#sec-numeric-types-number-subtract\">Number::subtract</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt.</li><li>Let <var>difference</var> be <emu-xref aoid=\"BigInt::subtract\"><a href=\"#sec-numeric-types-bigint-subtract\">BigInt::subtract</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>Let <var>differenceBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>difference</var>, <var>isLittleEndian</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>differenceBytes</var>, <var>xBytes</var>, and <var>yBytes</var> have the same number of elements.</li><li>Return <var>differenceBytes</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>subtract</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-postfix-increment-operator-runtime-semantics-evaluation": {"num": "13.4.2.1", "title": "#sec-postfix-increment-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-postfix-increment-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-postfix-increment-operator-runtime-semantics-evaluation\">#sec-postfix-increment-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i_jjg0ex\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>++</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lhs</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is Number, then<ol><li>Let <var>newValue</var> be ! <emu-xref aoid=\"Number::add\"><a href=\"#sec-numeric-types-number-add\">Number::add</a></emu-xref>(<var>oldValue</var>, <emu-val>1</emu-val><sub>&#120125;</sub>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is BigInt.</li><li>Let <var>newValue</var> be ! <emu-xref aoid=\"BigInt::add\"><a href=\"#sec-numeric-types-bigint-add\">BigInt::add</a></emu-xref>(<var>oldValue</var>, <emu-val>1</emu-val><sub>&#8484;</sub>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>newValue</var>).</li><li>Return <var>oldValue</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-numeric-types": {"num": "6.1.6", "title": "#sec-numeric-types Numeric Types", "html": "<emu-clause id=\"sec-numeric-types\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types\">#sec-numeric-types</span> Numeric Types</h1>\n      <p>ECMAScript has two built-in numeric types: Number and BigInt. The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are defined over these numeric types. The \"Result\" column shows the return type, along with an indication if it is possible for some invocations of the operation to return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-table id=\"table-numeric-type-ops\" caption=\"Numeric Type Operations\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-numeric-type-ops\">#table-numeric-type-ops</span>: Numeric Type Operations</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Operation\n            </th>\n            <th>\n              Example source\n            </th>\n            <th>\n              Invoked by the Evaluation semantics of ...\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::unaryMinus\"><a href=\"#sec-numeric-types-number-unaryMinus\">Number::unaryMinus</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>-x</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-unary-minus-operator\" title=\"\"><a href=\"#sec-unary-minus-operator\">Unary <code>-</code> Operator</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::unaryMinus\"><a href=\"#sec-numeric-types-bigint-unaryMinus\">BigInt::unaryMinus</a></emu-xref>\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::bitwiseNOT\"><a href=\"#sec-numeric-types-number-bitwiseNOT\">Number::bitwiseNOT</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>~x</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-bitwise-not-operator\" title=\"\"><a href=\"#sec-bitwise-not-operator\">Bitwise NOT Operator ( <code>~</code> )</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::bitwiseNOT\"><a href=\"#sec-numeric-types-bigint-bitwiseNOT\">BigInt::bitwiseNOT</a></emu-xref>\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::exponentiate\"><a href=\"#sec-numeric-types-number-exponentiate\">Number::exponentiate</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;**&#160;y</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-exp-operator\" title=\"\"><a href=\"#sec-exp-operator\">Exponentiation Operator</a></emu-xref>\n              and <emu-xref href=\"#sec-math.pow\" title=\"\"><a href=\"#sec-math.pow\">Math.pow ( <var>base</var>, <var>exponent</var> )</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::exponentiate\"><a href=\"#sec-numeric-types-bigint-exponentiate\">BigInt::exponentiate</a></emu-xref>\n            </td>\n            <td>\n              BigInt; may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::multiply\"><a href=\"#sec-numeric-types-number-multiply\">Number::multiply</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;*&#160;y</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::multiply\"><a href=\"#sec-numeric-types-bigint-multiply\">BigInt::multiply</a></emu-xref>\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::divide\"><a href=\"#sec-numeric-types-number-divide\">Number::divide</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;/&#160;y</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::divide\"><a href=\"#sec-numeric-types-bigint-divide\">BigInt::divide</a></emu-xref>\n            </td>\n            <td>\n              BigInt; may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::remainder\"><a href=\"#sec-numeric-types-number-remainder\">Number::remainder</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;%&#160;y</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::remainder\"><a href=\"#sec-numeric-types-bigint-remainder\">BigInt::remainder</a></emu-xref>\n            </td>\n            <td>\n              BigInt; may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::add\"><a href=\"#sec-numeric-types-number-add\">Number::add</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x ++</code><br><code>++ x</code><br><code>x&#160;+&#160;y</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-postfix-increment-operator\" title=\"\"><a href=\"#sec-postfix-increment-operator\">Postfix Increment Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-increment-operator\" title=\"\"><a href=\"#sec-prefix-increment-operator\">Prefix Increment Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-addition-operator-plus\" title=\"\"><a href=\"#sec-addition-operator-plus\">The Addition Operator ( <code>+</code> )</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::add\"><a href=\"#sec-numeric-types-bigint-add\">BigInt::add</a></emu-xref>\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::subtract\"><a href=\"#sec-numeric-types-number-subtract\">Number::subtract</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x --</code><br><code>-- x</code><br><code>x&#160;-&#160;y</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-postfix-decrement-operator\" title=\"\"><a href=\"#sec-postfix-decrement-operator\">Postfix Decrement Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-decrement-operator\" title=\"\"><a href=\"#sec-prefix-decrement-operator\">Prefix Decrement Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-subtraction-operator-minus\" title=\"\"><a href=\"#sec-subtraction-operator-minus\">The Subtraction Operator ( <code>-</code> )</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::subtract\"><a href=\"#sec-numeric-types-bigint-subtract\">BigInt::subtract</a></emu-xref>\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::leftShift\"><a href=\"#sec-numeric-types-number-leftShift\">Number::leftShift</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;&lt;&lt;&#160;y</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-left-shift-operator\" title=\"\"><a href=\"#sec-left-shift-operator\">The Left Shift Operator ( <code>&lt;&lt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::leftShift\"><a href=\"#sec-numeric-types-bigint-leftShift\">BigInt::leftShift</a></emu-xref>\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::signedRightShift\"><a href=\"#sec-numeric-types-number-signedRightShift\">Number::signedRightShift</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;&gt;&gt;&#160;y</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-signed-right-shift-operator\" title=\"\"><a href=\"#sec-signed-right-shift-operator\">The Signed Right Shift Operator ( <code>&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::signedRightShift\"><a href=\"#sec-numeric-types-bigint-signedRightShift\">BigInt::signedRightShift</a></emu-xref>\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::unsignedRightShift\"><a href=\"#sec-numeric-types-number-unsignedRightShift\">Number::unsignedRightShift</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;&gt;&gt;&gt;&#160;y</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-unsigned-right-shift-operator\" title=\"\"><a href=\"#sec-unsigned-right-shift-operator\">The Unsigned Right Shift Operator ( <code>&gt;&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::unsignedRightShift\"><a href=\"#sec-numeric-types-bigint-unsignedRightShift\">BigInt::unsignedRightShift</a></emu-xref>\n            </td>\n            <td>\n              always throws a <emu-val>TypeError</emu-val>\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::lessThan\"><a href=\"#sec-numeric-types-number-lessThan\">Number::lessThan</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;&lt;&#160;y</code><br><code>x&#160;&gt;&#160;y</code><br><code>x&#160;&lt;=&#160;y</code><br><code>x&#160;&gt;=&#160;y</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-relational-operators\" title=\"\"><a href=\"#sec-relational-operators\">Relational Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-islessthan\" title=\"\"><a href=\"#sec-islessthan\">IsLessThan ( <var>x</var>, <var>y</var>, <var>LeftFirst</var> )</a></emu-xref>\n            </td>\n            <td>\n              Boolean or <emu-val>undefined</emu-val> (for unordered inputs)\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::equal\"><a href=\"#sec-numeric-types-number-equal\">Number::equal</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;==&#160;y</code><br><code>x&#160;!=&#160;y</code><br><code>x&#160;===&#160;y</code><br><code>x&#160;!==&#160;y</code>\n            </td>\n            <td rowspan=\"2\">\n              <emu-xref href=\"#sec-equality-operators\" title=\"\"><a href=\"#sec-equality-operators\">Equality Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-isstrictlyequal\" title=\"\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual ( <var>x</var>, <var>y</var> )</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::equal\"><a href=\"#sec-numeric-types-bigint-equal\">BigInt::equal</a></emu-xref>\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::sameValue\"><a href=\"#sec-numeric-types-number-sameValue\">Number::sameValue</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>Object.is(x, y)</code>\n            </td>\n            <td rowspan=\"2\">\n              Object internal methods,\n              via <emu-xref href=\"#sec-samevalue\" title=\"\"><a href=\"#sec-samevalue\">SameValue ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test exact value equality\n            </td>\n            <td rowspan=\"2\">\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::sameValue\"><a href=\"#sec-numeric-types-bigint-sameValue\">BigInt::sameValue</a></emu-xref>\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::sameValueZero\"><a href=\"#sec-numeric-types-number-sameValueZero\">Number::sameValueZero</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>[x].includes(y)</code>\n            </td>\n            <td rowspan=\"2\">\n              Array, Map, and Set methods,\n              via <emu-xref href=\"#sec-samevaluezero\" title=\"\"><a href=\"#sec-samevaluezero\">SameValueZero ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test value equality, ignoring the difference between <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub>\n            </td>\n            <td rowspan=\"2\">\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::sameValueZero\"><a href=\"#sec-numeric-types-bigint-sameValueZero\">BigInt::sameValueZero</a></emu-xref>\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::bitwiseAND\"><a href=\"#sec-numeric-types-number-bitwiseAND\">Number::bitwiseAND</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;&amp;&#160;y</code>\n            </td>\n            <td rowspan=\"6\">\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::bitwiseAND\"><a href=\"#sec-numeric-types-bigint-bitwiseAND\">BigInt::bitwiseAND</a></emu-xref>\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::bitwiseXOR\"><a href=\"#sec-numeric-types-number-bitwiseXOR\">Number::bitwiseXOR</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;^&#160;y</code>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::bitwiseXOR\"><a href=\"#sec-numeric-types-bigint-bitwiseXOR\">BigInt::bitwiseXOR</a></emu-xref>\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::bitwiseOR\"><a href=\"#sec-numeric-types-number-bitwiseOR\">Number::bitwiseOR</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>x&#160;|&#160;y</code>\n            </td>\n            <td>\n              Number\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::bitwiseOR\"><a href=\"#sec-numeric-types-bigint-bitwiseOR\">BigInt::bitwiseOR</a></emu-xref>\n            </td>\n            <td>\n              BigInt\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              <code>String(x)</code>\n            </td>\n            <td rowspan=\"2\">\n              Many expressions and built-in functions, via <emu-xref href=\"#sec-tostring\" title=\"\"><a href=\"#sec-tostring\">ToString ( <var>argument</var> )</a></emu-xref>\n            </td>\n            <td rowspan=\"2\">\n              String\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <emu-xref aoid=\"BigInt::toString\"><a href=\"#sec-numeric-types-bigint-tostring\">BigInt::toString</a></emu-xref>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>Because the numeric types are in general not convertible without loss of precision or truncation, the ECMAScript language provides no implicit conversion among these types. Programmers must explicitly call <code>Number</code> and <code>BigInt</code> functions to convert among types when calling a function which requires another type.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The first and subsequent editions of ECMAScript have provided, for certain operators, implicit numeric conversions that could lose precision or truncate. These legacy implicit conversions are maintained for backward compatibility, but not provided for BigInt in order to minimize opportunity for programmer error, and to leave open the option of generalized <em>value types</em> in a future edition.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ecmascript-language-types-number-type\"><h1><span class=\"secnum\">6.1.6.1</span>#sec-ecmascript-language-types-number-type The Number Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-bigint-type\"><h1><span class=\"secnum\">6.1.6.2</span>#sec-ecmascript-language-types-bigint-type The BigInt Type</h1>...</div></emu-clause>\n\n    "}, "sec-bitwise-not-operator-runtime-semantics-evaluation": {"num": "13.5.6.1", "title": "#sec-bitwise-not-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-bitwise-not-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bitwise-not-operator-runtime-semantics-evaluation\">#sec-bitwise-not-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b9nqec7b\">\n        <emu-t>~</emu-t>\n        <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is Number, then<ol><li>Return ! <emu-xref aoid=\"Number::bitwiseNOT\"><a href=\"#sec-numeric-types-number-bitwiseNOT\">Number::bitwiseNOT</a></emu-xref>(<var>oldValue</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is BigInt.</li><li>Return ! <emu-xref aoid=\"BigInt::bitwiseNOT\"><a href=\"#sec-numeric-types-bigint-bitwiseNOT\">BigInt::bitwiseNOT</a></emu-xref>(<var>oldValue</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-prefix-decrement-operator-runtime-semantics-evaluation": {"num": "13.4.5.1", "title": "#sec-prefix-decrement-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">#sec-prefix-decrement-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"onrvwudi\">\n        <emu-t>--</emu-t>\n        <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is Number, then<ol><li>Let <var>newValue</var> be ! <emu-xref aoid=\"Number::subtract\"><a href=\"#sec-numeric-types-number-subtract\">Number::subtract</a></emu-xref>(<var>oldValue</var>, <emu-val>1</emu-val><sub>&#120125;</sub>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is BigInt.</li><li>Let <var>newValue</var> be ! <emu-xref aoid=\"BigInt::subtract\"><a href=\"#sec-numeric-types-bigint-subtract\">BigInt::subtract</a></emu-xref>(<var>oldValue</var>, <emu-val>1</emu-val><sub>&#8484;</sub>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-atomics.add": {"num": "25.4.3", "title": "#sec-atomics.add Atomics.add ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.add\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.add\">#sec-atomics.add</span> Atomics.add ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>isLittleEndian</var> be the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>add</var> be a new <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref> with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures <var>type</var> and <var>isLittleEndian</var> and performs the following steps atomically when called:<ol><li>Let <var>x</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>xBytes</var>, <var>isLittleEndian</var>).</li><li>Let <var>y</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>yBytes</var>, <var>isLittleEndian</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number, then<ol><li>Let <var>sum</var> be <emu-xref aoid=\"Number::add\"><a href=\"#sec-numeric-types-number-add\">Number::add</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt.</li><li>Let <var>sum</var> be <emu-xref aoid=\"BigInt::add\"><a href=\"#sec-numeric-types-bigint-add\">BigInt::add</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>Let <var>sumBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>sum</var>, <var>isLittleEndian</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sumBytes</var>, <var>xBytes</var>, and <var>yBytes</var> have the same number of elements.</li><li>Return <var>sumBytes</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>add</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-samevaluezero": {"num": "7.2.11", "title": "#sec-samevaluezero SameValueZero ( x, y )", "html": "<emu-clause id=\"sec-samevaluezero\" type=\"abstract operation\" aoid=\"SameValueZero\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevaluezero\">#sec-samevaluezero</span> SameValueZero ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValueZero takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean indicating whether or not the two arguments are the same value (ignoring the difference between <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number, then<ol><li>Return ! <emu-xref aoid=\"Number::sameValueZero\"><a href=\"#sec-numeric-types-number-sameValueZero\">Number::sameValueZero</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt, then<ol><li>Return ! <emu-xref aoid=\"BigInt::sameValueZero\"><a href=\"#sec-numeric-types-bigint-sameValueZero\">BigInt::sameValueZero</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>SameValueZero differs from <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> only in that it treats <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub> as equivalent.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-applystringornumericbinaryoperator": {"num": "13.15.3", "title": "#sec-applystringornumericbinaryoperator ApplyStringOrNumericBinaryOperator ( lval, opText, rval )", "html": "<emu-clause id=\"sec-applystringornumericbinaryoperator\" type=\"abstract operation\" aoid=\"ApplyStringOrNumericBinaryOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</span> ApplyStringOrNumericBinaryOperator ( <var>lval</var>, <var>opText</var>, <var>rval</var> )</h1>\n      <p>The abstract operation ApplyStringOrNumericBinaryOperator takes arguments <var>lval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>opText</var> (a sequence of Unicode code points), and <var>rval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>opText</var> is present in the table in step <emu-xref href=\"#step-applystringornumericbinaryoperator-operations-table\"><a href=\"#step-applystringornumericbinaryoperator-operations-table\" class=\"excluded-xref\" excluded-id=\"step-applystringornumericbinaryoperator-operations-table\">#step-applystringornumericbinaryoperator-operations-table</a></emu-xref>.</li><li>If <var>opText</var> is <code>+</code>, then<ol><li id=\"step-binary-op-toprimitive-lval\">Let <var>lprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>lval</var>).</li><li id=\"step-binary-op-toprimitive-rval\">Let <var>rprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>rval</var>).</li><li id=\"step-binary-op-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lprim</var>) is String or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rprim</var>) is String, then<ol><li>Let <var>lstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>rprim</var>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>lstr</var> and <var>rstr</var>.</li></ol></li><li>Set <var>lval</var> to <var>lprim</var>.</li><li>Set <var>rval</var> to <var>rprim</var>.</li></ol></li><li>NOTE: At this point, it must be a numeric operation.</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li id=\"step-applystringornumericbinaryoperator-operations-table\">Let <var>operation</var> be the abstract operation associated with <var>opText</var> and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>opText</var>       </th><th> <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) </th><th> <var>operation</var>                </th></tr>\n                <tr><td> <code>**</code>           </td><td> Number       </td><td> <emu-xref aoid=\"Number::exponentiate\"><a href=\"#sec-numeric-types-number-exponentiate\">Number::exponentiate</a></emu-xref>       </td></tr>\n                <tr><td> <code>**</code>           </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::exponentiate\"><a href=\"#sec-numeric-types-bigint-exponentiate\">BigInt::exponentiate</a></emu-xref>       </td></tr>\n                <tr><td> <code>*</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::multiply\"><a href=\"#sec-numeric-types-number-multiply\">Number::multiply</a></emu-xref>           </td></tr>\n                <tr><td> <code>*</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::multiply\"><a href=\"#sec-numeric-types-bigint-multiply\">BigInt::multiply</a></emu-xref>           </td></tr>\n                <tr><td> <code>/</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::divide\"><a href=\"#sec-numeric-types-number-divide\">Number::divide</a></emu-xref>             </td></tr>\n                <tr><td> <code>/</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::divide\"><a href=\"#sec-numeric-types-bigint-divide\">BigInt::divide</a></emu-xref>             </td></tr>\n                <tr><td> <code>%</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::remainder\"><a href=\"#sec-numeric-types-number-remainder\">Number::remainder</a></emu-xref>          </td></tr>\n                <tr><td> <code>%</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::remainder\"><a href=\"#sec-numeric-types-bigint-remainder\">BigInt::remainder</a></emu-xref>          </td></tr>\n                <tr><td> <code>+</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::add\"><a href=\"#sec-numeric-types-number-add\">Number::add</a></emu-xref>                </td></tr>\n                <tr><td> <code>+</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::add\"><a href=\"#sec-numeric-types-bigint-add\">BigInt::add</a></emu-xref>                </td></tr>\n                <tr><td> <code>-</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::subtract\"><a href=\"#sec-numeric-types-number-subtract\">Number::subtract</a></emu-xref>           </td></tr>\n                <tr><td> <code>-</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::subtract\"><a href=\"#sec-numeric-types-bigint-subtract\">BigInt::subtract</a></emu-xref>           </td></tr>\n                <tr><td> <code>&lt;&lt;</code>     </td><td> Number       </td><td> <emu-xref aoid=\"Number::leftShift\"><a href=\"#sec-numeric-types-number-leftShift\">Number::leftShift</a></emu-xref>          </td></tr>\n                <tr><td> <code>&lt;&lt;</code>     </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::leftShift\"><a href=\"#sec-numeric-types-bigint-leftShift\">BigInt::leftShift</a></emu-xref>          </td></tr>\n                <tr><td> <code>&gt;&gt;</code>     </td><td> Number       </td><td> <emu-xref aoid=\"Number::signedRightShift\"><a href=\"#sec-numeric-types-number-signedRightShift\">Number::signedRightShift</a></emu-xref>   </td></tr>\n                <tr><td> <code>&gt;&gt;</code>     </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::signedRightShift\"><a href=\"#sec-numeric-types-bigint-signedRightShift\">BigInt::signedRightShift</a></emu-xref>   </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;</code> </td><td> Number       </td><td> <emu-xref aoid=\"Number::unsignedRightShift\"><a href=\"#sec-numeric-types-number-unsignedRightShift\">Number::unsignedRightShift</a></emu-xref> </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;</code> </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::unsignedRightShift\"><a href=\"#sec-numeric-types-bigint-unsignedRightShift\">BigInt::unsignedRightShift</a></emu-xref> </td></tr>\n                <tr><td> <code>&amp;</code>        </td><td> Number       </td><td> <emu-xref aoid=\"Number::bitwiseAND\"><a href=\"#sec-numeric-types-number-bitwiseAND\">Number::bitwiseAND</a></emu-xref>         </td></tr>\n                <tr><td> <code>&amp;</code>        </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::bitwiseAND\"><a href=\"#sec-numeric-types-bigint-bitwiseAND\">BigInt::bitwiseAND</a></emu-xref>         </td></tr>\n                <tr><td> <code>^</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::bitwiseXOR\"><a href=\"#sec-numeric-types-number-bitwiseXOR\">Number::bitwiseXOR</a></emu-xref>         </td></tr>\n                <tr><td> <code>^</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::bitwiseXOR\"><a href=\"#sec-numeric-types-bigint-bitwiseXOR\">BigInt::bitwiseXOR</a></emu-xref>         </td></tr>\n                <tr><td> <code>|</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::bitwiseOR\"><a href=\"#sec-numeric-types-number-bitwiseOR\">Number::bitwiseOR</a></emu-xref>          </td></tr>\n                <tr><td> <code>|</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::bitwiseOR\"><a href=\"#sec-numeric-types-bigint-bitwiseOR\">BigInt::bitwiseOR</a></emu-xref>          </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Return ? <var>operation</var>(<var>lnum</var>, <var>rnum</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>No hint is provided in the calls to <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref> in steps <emu-xref href=\"#step-binary-op-toprimitive-lval\"><a href=\"#step-binary-op-toprimitive-lval\">2.a</a></emu-xref> and <emu-xref href=\"#step-binary-op-toprimitive-rval\"><a href=\"#step-binary-op-toprimitive-rval\">2.b</a></emu-xref>. All standard objects except Dates handle the absence of a hint as if <emu-const>number</emu-const> were given; Dates handle the absence of a hint as if <emu-const>string</emu-const> were given. <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">Exotic objects</a></emu-xref> may handle the absence of a hint in some other manner.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> differs from step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> of the <emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref> algorithm, by using the logical-or operation instead of the logical-and operation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-isstrictlyequal": {"num": "7.2.15", "title": "#sec-isstrictlyequal IsStrictlyEqual ( x, y )", "html": "<emu-clause id=\"sec-isstrictlyequal\" type=\"abstract operation\" oldids=\"sec-strict-equality-comparison\" aoid=\"IsStrictlyEqual\"><span id=\"sec-strict-equality-comparison\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isstrictlyequal\">#sec-isstrictlyequal</span> IsStrictlyEqual ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation IsStrictlyEqual takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It provides the semantics for the comparison <var>x</var> === <var>y</var>, returning <emu-val>true</emu-val> or <emu-val>false</emu-val>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number, then<ol><li>Return ! <emu-xref aoid=\"Number::equal\"><a href=\"#sec-numeric-types-number-equal\">Number::equal</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt, then<ol><li>Return ! <emu-xref aoid=\"BigInt::equal\"><a href=\"#sec-numeric-types-bigint-equal\">BigInt::equal</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This algorithm differs from the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> Algorithm in its treatment of signed zeroes and NaNs.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-unary-minus-operator-runtime-semantics-evaluation": {"num": "13.5.5.1", "title": "#sec-unary-minus-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-unary-minus-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-unary-minus-operator-runtime-semantics-evaluation\">#sec-unary-minus-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"odzkxnu5\">\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is Number, then<ol><li>Return ! <emu-xref aoid=\"Number::unaryMinus\"><a href=\"#sec-numeric-types-number-unaryMinus\">Number::unaryMinus</a></emu-xref>(<var>oldValue</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is BigInt.</li><li>Return ! <emu-xref aoid=\"BigInt::unaryMinus\"><a href=\"#sec-numeric-types-bigint-unaryMinus\">BigInt::unaryMinus</a></emu-xref>(<var>oldValue</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-prefix-increment-operator-runtime-semantics-evaluation": {"num": "13.4.4.1", "title": "#sec-prefix-increment-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-prefix-increment-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prefix-increment-operator-runtime-semantics-evaluation\">#sec-prefix-increment-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vwgxygda\">\n        <emu-t>++</emu-t>\n        <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is Number, then<ol><li>Let <var>newValue</var> be ! <emu-xref aoid=\"Number::add\"><a href=\"#sec-numeric-types-number-add\">Number::add</a></emu-xref>(<var>oldValue</var>, <emu-val>1</emu-val><sub>&#120125;</sub>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>) is BigInt.</li><li>Let <var>newValue</var> be ! <emu-xref aoid=\"BigInt::add\"><a href=\"#sec-numeric-types-bigint-add\">BigInt::add</a></emu-xref>(<var>oldValue</var>, <emu-val>1</emu-val><sub>&#8484;</sub>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ecmascript-language-types-bigint-type": {"num": "6.1.6.2", "title": "#sec-ecmascript-language-types-bigint-type The BigInt Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-bigint-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-bigint-type\">#sec-ecmascript-language-types-bigint-type</span> The BigInt Type</h1>\n        <p>The BigInt type represents an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value. The value may be any size and is not limited to a particular bit-width. Generally, where not otherwise noted, operations are designed to return exact mathematically-based answers. For binary operations, BigInts act as two's complement binary strings, with negative numbers treated as having bits set infinitely to the left.</p>\n\n        <div id=\"excluded-sec-numeric-types-bigint-unaryMinus\"><h1><span class=\"secnum\">6.1.6.2.1</span>#sec-numeric-types-bigint-unaryMinus BigInt::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.2.2</span>#sec-numeric-types-bigint-bitwiseNOT BigInt::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-exponentiate\"><h1><span class=\"secnum\">6.1.6.2.3</span>#sec-numeric-types-bigint-exponentiate BigInt::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-multiply\"><h1><span class=\"secnum\">6.1.6.2.4</span>#sec-numeric-types-bigint-multiply BigInt::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-divide\"><h1><span class=\"secnum\">6.1.6.2.5</span>#sec-numeric-types-bigint-divide BigInt::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-remainder\"><h1><span class=\"secnum\">6.1.6.2.6</span>#sec-numeric-types-bigint-remainder BigInt::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-add\"><h1><span class=\"secnum\">6.1.6.2.7</span>#sec-numeric-types-bigint-add BigInt::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-subtract\"><h1><span class=\"secnum\">6.1.6.2.8</span>#sec-numeric-types-bigint-subtract BigInt::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-leftShift\"><h1><span class=\"secnum\">6.1.6.2.9</span>#sec-numeric-types-bigint-leftShift BigInt::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-signedRightShift\"><h1><span class=\"secnum\">6.1.6.2.10</span>#sec-numeric-types-bigint-signedRightShift BigInt::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.2.11</span>#sec-numeric-types-bigint-unsignedRightShift BigInt::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-lessThan\"><h1><span class=\"secnum\">6.1.6.2.12</span>#sec-numeric-types-bigint-lessThan BigInt::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-equal\"><h1><span class=\"secnum\">6.1.6.2.13</span>#sec-numeric-types-bigint-equal BigInt::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-sameValue\"><h1><span class=\"secnum\">6.1.6.2.14</span>#sec-numeric-types-bigint-sameValue BigInt::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-sameValueZero\"><h1><span class=\"secnum\">6.1.6.2.15</span>#sec-numeric-types-bigint-sameValueZero BigInt::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-binaryand\"><h1><span class=\"secnum\">6.1.6.2.16</span>#sec-binaryand BinaryAnd ( x, y )</h1>...</div><div id=\"excluded-sec-binaryor\"><h1><span class=\"secnum\">6.1.6.2.17</span>#sec-binaryor BinaryOr ( x, y )</h1>...</div><div id=\"excluded-sec-binaryxor\"><h1><span class=\"secnum\">6.1.6.2.18</span>#sec-binaryxor BinaryXor ( x, y )</h1>...</div><div id=\"excluded-sec-bigintbitwiseop\"><h1><span class=\"secnum\">6.1.6.2.19</span>#sec-bigintbitwiseop BigIntBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.2.20</span>#sec-numeric-types-bigint-bitwiseAND BigInt::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.2.21</span>#sec-numeric-types-bigint-bitwiseXOR BigInt::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.2.22</span>#sec-numeric-types-bigint-bitwiseOR BigInt::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-bigint-tostring\"><h1><span class=\"secnum\">6.1.6.2.23</span>#sec-numeric-types-bigint-tostring BigInt::toString ( x )</h1>...</div></emu-clause>\n    "}}, "figData": {"table-numeric-type-ops": "Table 2", "table-the-typedarray-constructors": "Table 72"}}}