{"from": {"secList": ["sec-candidate-executions", "sec-arraybuffer-constructor", "sec-composewriteeventbytes", "sec-atomics.exchange", "sec-properties-of-the-arraybuffer-prototype-object", "sec-atomics.wait", "sec-reads-bytes-from", "sec-arraybuffer-objects", "sec-atomics.store", "sec-atomicreadmodifywrite", "sec-atomics.sub", "sec-atomicload", "sec-properties-of-the-arraybuffer-constructor", "sec-abstract-operations-for-atomics", "sec-data-blocks", "sec-memory-model-fundamentals", "sec-atomics.add", "sec-atomics.xor", "sec-getmodifysetvalueinbuffer", "sec-atomics.or", "sec-atomics.and", "sec-atomics.notify", "sec-atomics.compareexchange", "sec-validatesharedintegertypedarray", "sec-abstract-operations-for-arraybuffer-objects"], "secData": {"sec-candidate-executions": {"num": "27.4", "title": "#sec-candidate-executions Candidate Executions", "html": "<emu-clause id=\"sec-candidate-executions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candidate-executions\">#sec-candidate-executions</span> Candidate Executions</h1>\n    <p>A  <dfn>candidate execution</dfn> of the evaluation of an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> with the following fields.</p>\n    <emu-table id=\"table-candidate-execution-records\" caption=\"Candidate Execution Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-candidate-execution-records\">#table-candidate-execution-records</span>: Candidate Execution <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[EventsRecords]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#agent\"><a href=\"#agent\">Agent</a></emu-xref> Events Records.</td>\n            <td>Maps an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to Lists of events appended during the evaluation.</td>\n          </tr>\n          <tr>\n            <td>[[ChosenValues]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Chosen Value Records.</td>\n            <td>Maps <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events to the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values chosen during the evaluation.</td>\n          </tr>\n          <tr>\n            <td>[[AgentOrder]]</td>\n            <td>An <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[ReadsBytesFrom]]</td>\n            <td>A <emu-xref aoid=\"reads-bytes-from\"><a href=\"#sec-reads-bytes-from\">reads-bytes-from</a></emu-xref> semantic function.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[ReadsFrom]]</td>\n            <td>A <emu-xref aoid=\"reads-from\"><a href=\"#sec-reads-from\">reads-from</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[HostSynchronizesWith]]</td>\n            <td>A <emu-xref aoid=\"host-synchronizes-with\"><a href=\"#sec-host-synchronizes-with\">host-synchronizes-with</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[SynchronizesWith]]</td>\n            <td>A <emu-xref aoid=\"synchronizes-with\"><a href=\"#sec-synchronizes-with\">synchronizes-with</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[HappensBefore]]</td>\n            <td>A <emu-xref aoid=\"happens-before\"><a href=\"#sec-happens-before\">happens-before</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>An  <dfn>empty candidate execution</dfn> is a candidate execution <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose fields are empty Lists and Relations.</p>\n  </emu-clause>\n\n  "}, "sec-arraybuffer-constructor": {"num": "24.1.2", "title": "#sec-arraybuffer-constructor The ArrayBuffer Constructor", "html": "<emu-clause id=\"sec-arraybuffer-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraybuffer-constructor\">#sec-arraybuffer-constructor</span> The ArrayBuffer Constructor</h1>\n      <p>The ArrayBuffer <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%ArrayBuffer%</dfn>.</li>\n        <li>is the initial value of the <emu-val>\"ArrayBuffer\"</emu-val> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li>\n        <li>creates and initializes a new ArrayBuffer object when called as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li>\n        <li>is not intended to be called as a function and will throw an exception when called in that manner.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified <code>ArrayBuffer</code> behaviour must include a <code>super</code> call to the <code>ArrayBuffer</code> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal state necessary to support the <code>ArrayBuffer.prototype</code> built-in methods.</li>\n      </ul>\n\n      <div id=\"excluded-sec-arraybuffer-length\"><h1><span class=\"secnum\">24.1.2.1</span>#sec-arraybuffer-length ArrayBuffer ( length )</h1>...</div></emu-clause>\n\n    "}, "sec-composewriteeventbytes": {"num": "27.5.4", "title": "#sec-composewriteeventbytes ComposeWriteEventBytes ( execution, byteIndex, Ws )", "html": "<emu-clause id=\"sec-composewriteeventbytes\" aoid=\"ComposeWriteEventBytes\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-composewriteeventbytes\">#sec-composewriteeventbytes</span> ComposeWriteEventBytes ( <var>execution</var>, <var>byteIndex</var>, <var>Ws</var> )</h1>\n      <p>The abstract operation ComposeWriteEventBytes takes four arguments, a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, and a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>Ws</var> of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events. It performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>byteLocation</var> be <var>byteIndex</var>.</li><li>Let <var>bytesRead</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>W</var> of <var>Ws</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> has <var>byteLocation</var> in its range.</li><li>Let <var>payloadIndex</var> be <var>byteLocation</var> - <var>W</var>.[[ByteIndex]].</li><li>If <var>W</var> is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> event, then<ol><li>Let <var>byte</var> be <var>W</var>.[[Payload]][<var>payloadIndex</var>].</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event.</li><li>Let <var>bytes</var> be <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref>(<var>execution</var>, <var>W</var>).</li><li>Let <var>bytesModified</var> be <var>W</var>.[[ModifyOp]](<var>bytes</var>, <var>W</var>.[[Payload]]).</li><li>Let <var>byte</var> be <var>bytesModified</var>[<var>payloadIndex</var>].</li></ol></li><li>Append <var>byte</var> to <var>bytesRead</var>.</li><li>Set <var>byteLocation</var> to <var>byteLocation</var> + 1.</li></ol></li><li>Return <var>bytesRead</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>The semantic function [[ModifyOp]] is given by the function properties on the Atomics object that introduce <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>This abstract operation composes a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of write events into a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. It is used in the event semantics of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-atomics.exchange": {"num": "24.4.5", "title": "#sec-atomics.exchange Atomics.exchange ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.exchange\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.exchange\">#sec-atomics.exchange</span> Atomics.exchange ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>Let <code>second</code> denote a semantic function of two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments that returns its second argument.</p>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <code>second</code>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-properties-of-the-arraybuffer-prototype-object": {"num": "24.1.4", "title": "#sec-properties-of-the-arraybuffer-prototype-object Properties of the ArrayBuffer Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-arraybuffer-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-arraybuffer-prototype-object\">#sec-properties-of-the-arraybuffer-prototype-object</span> Properties of the ArrayBuffer Prototype Object</h1>\n      <p>The ArrayBuffer prototype object:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%ArrayBufferPrototype%</dfn>.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>does not have an [[ArrayBufferData]] or [[ArrayBufferByteLength]] internal slot.</li>\n      </ul>\n\n      <div id=\"excluded-sec-get-arraybuffer.prototype.bytelength\"><h1><span class=\"secnum\">24.1.4.1</span>#sec-get-arraybuffer.prototype.bytelength get ArrayBuffer.prototype.byteLength</h1>...</div><div id=\"excluded-sec-arraybuffer.prototype.constructor\"><h1><span class=\"secnum\">24.1.4.2</span>#sec-arraybuffer.prototype.constructor ArrayBuffer.prototype.constructor</h1>...</div><div id=\"excluded-sec-arraybuffer.prototype.slice\"><h1><span class=\"secnum\">24.1.4.3</span>#sec-arraybuffer.prototype.slice ArrayBuffer.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-arraybuffer.prototype-@@tostringtag\"><h1><span class=\"secnum\">24.1.4.4</span>#sec-arraybuffer.prototype-@@tostringtag ArrayBuffer.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n\n    "}, "sec-atomics.wait": {"num": "24.4.11", "title": "#sec-atomics.wait Atomics.wait ( typedArray, index, value, timeout )", "html": "<emu-clause id=\"sec-atomics.wait\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.wait\">#sec-atomics.wait</span> Atomics.wait ( <var>typedArray</var>, <var>index</var>, <var>value</var>, <var>timeout</var> )</h1>\n      <p><code>Atomics.wait</code> puts the calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in a wait queue and puts it to sleep until it is notified or the sleep times out. The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>arrayTypeName</var> is <emu-val>\"BigInt64Array\"</emu-val>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt64\"><a href=\"#sec-tobigint64\">ToBigInt64</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>value</var>).</li><li>Let <var>q</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>timeout</var>).</li><li>If <var>q</var> is <emu-val>NaN</emu-val>, let <var>t</var> be <emu-val>+&#8734;</emu-val>; else let <var>t</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>q</var>, 0).</li><li>Let <var>B</var> be <emu-xref aoid=\"AgentCanSuspend\"><a href=\"#sec-agentcansuspend\">AgentCanSuspend</a></emu-xref>().</li><li>If <var>B</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>w</var> be !&#160;<emu-xref aoid=\"AtomicLoad\"><a href=\"#sec-atomicload\">AtomicLoad</a></emu-xref>(<var>typedArray</var>, <var>i</var>).</li><li>If <var>v</var> is not equal to <var>w</var>, then<ol><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return the String <emu-val>\"not-equal\"</emu-val>.</li></ol></li><li>Let <var>W</var> be <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Perform <emu-xref aoid=\"AddWaiter\"><a href=\"#sec-addwaiter\">AddWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Let <var>notified</var> be <emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref>(<var>WL</var>, <var>W</var>, <var>t</var>).</li><li>If <var>notified</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is not on the list of waiters in <var>WL</var>.</li></ol></li><li>Else,<ol><li>Perform <emu-xref aoid=\"RemoveWaiter\"><a href=\"#sec-removewaiter\">RemoveWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>If <var>notified</var> is <emu-val>true</emu-val>, return the String <emu-val>\"ok\"</emu-val>.</li><li>Return the String <emu-val>\"timed-out\"</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-reads-bytes-from": {"num": "27.6.2", "title": "#sec-reads-bytes-from reads-bytes-from", "html": "<emu-clause id=\"sec-reads-bytes-from\" aoid=\"reads-bytes-from\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-reads-bytes-from\">#sec-reads-bytes-from</span> reads-bytes-from</h1>\n      <p>For a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, <var>execution</var>.[[ReadsBytesFrom]] is a semantic function from events in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) to Lists of events in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) that satisfies the following conditions.</p>\n      <ul>\n        <li>\n          <p>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), <var>execution</var>.[[ReadsBytesFrom]](<var>R</var>) is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length equal to <var>R</var>.[[ElementSize]] of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events <var>Ws</var> such that all of the following are true.</p>\n          <ul>\n            <li>Each event <var>W</var> with index <var>i</var> in <var>Ws</var> has <var>R</var>.[[ByteIndex]] + <var>i</var> in its range.</li>\n            <li><var>R</var> is not in <var>Ws</var>.</li>\n          </ul>\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-arraybuffer-objects": {"num": "24.1", "title": "#sec-arraybuffer-objects ArrayBuffer Objects", "html": "<emu-clause id=\"sec-arraybuffer-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</span> ArrayBuffer Objects</h1>\n\n    <div id=\"excluded-sec-abstract-operations-for-arraybuffer-objects\"><h1><span class=\"secnum\">24.1.1</span>#sec-abstract-operations-for-arraybuffer-objects Abstract Operations For ArrayBuffer Objects</h1>...</div><div id=\"excluded-sec-arraybuffer-constructor\"><h1><span class=\"secnum\">24.1.2</span>#sec-arraybuffer-constructor The ArrayBuffer Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-arraybuffer-constructor\"><h1><span class=\"secnum\">24.1.3</span>#sec-properties-of-the-arraybuffer-constructor Properties of the ArrayBuffer Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-arraybuffer-prototype-object\"><h1><span class=\"secnum\">24.1.4</span>#sec-properties-of-the-arraybuffer-prototype-object Properties of the ArrayBuffer Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-the-arraybuffer-instances\"><h1><span class=\"secnum\">24.1.5</span>#sec-properties-of-the-arraybuffer-instances Properties of ArrayBuffer Instances</h1>...</div></emu-clause>\n\n  "}, "sec-atomics.store": {"num": "24.4.9", "title": "#sec-atomics.store Atomics.store ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.store\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.store\">#sec-atomics.store</span> Atomics.store ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>arrayTypeName</var> is <emu-val>\"BigUint64Array\"</emu-val> or <emu-val>\"BigInt64Array\"</emu-val>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <emu-val>true</emu-val>, <emu-const>SeqCst</emu-const>).</li><li>Return <var>v</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomicreadmodifywrite": {"num": "24.4.1.11", "title": "#sec-atomicreadmodifywrite AtomicReadModifyWrite ( typedArray, index, value, op )", "html": "<emu-clause id=\"sec-atomicreadmodifywrite\" aoid=\"AtomicReadModifyWrite\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomicreadmodifywrite\">#sec-atomicreadmodifywrite</span> AtomicReadModifyWrite ( <var>typedArray</var>, <var>index</var>, <var>value</var>, <var>op</var> )</h1>\n        <p>The abstract operation AtomicReadModifyWrite takes four arguments, <var>typedArray</var>, <var>index</var>, <var>value</var>, and a pure combining operation <var>op</var>. The pure combining operation <var>op</var> takes two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. The operation atomically loads a value, combines it with another value, and stores the result of the combination. It returns the loaded value. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>typedArray</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Return <emu-xref aoid=\"GetModifySetValueInBuffer\"><a href=\"#sec-getmodifysetvalueinbuffer\">GetModifySetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <var>op</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-atomics.sub": {"num": "24.4.10", "title": "#sec-atomics.sub Atomics.sub ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.sub\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.sub\">#sec-atomics.sub</span> Atomics.sub ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>Let <code>subtract</code> denote a semantic function of two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments that applies the subtraction operation to the Number values corresponding to the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values corresponding to the result of that operation.</p>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <code>subtract</code>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomicload": {"num": "24.4.1.12", "title": "#sec-atomicload AtomicLoad ( typedArray, index )", "html": "<emu-clause id=\"sec-atomicload\" aoid=\"AtomicLoad\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomicload\">#sec-atomicload</span> AtomicLoad ( <var>typedArray</var>, <var>index</var> )</h1>\n        <p>The abstract operation AtomicLoad takes two arguments, <var>typedArray</var>, <var>index</var>. The operation atomically loads a value and returns the loaded value. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Return <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <emu-val>true</emu-val>, <emu-const>SeqCst</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-properties-of-the-arraybuffer-constructor": {"num": "24.1.3", "title": "#sec-properties-of-the-arraybuffer-constructor Properties of the ArrayBuffer Constructor", "html": "<emu-clause id=\"sec-properties-of-the-arraybuffer-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-arraybuffer-constructor\">#sec-properties-of-the-arraybuffer-constructor</span> Properties of the ArrayBuffer Constructor</h1>\n      <p>The ArrayBuffer <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li>\n        <li>has the following properties:</li>\n      </ul>\n\n      <div id=\"excluded-sec-arraybuffer.isview\"><h1><span class=\"secnum\">24.1.3.1</span>#sec-arraybuffer.isview ArrayBuffer.isView ( arg )</h1>...</div><div id=\"excluded-sec-arraybuffer.prototype\"><h1><span class=\"secnum\">24.1.3.2</span>#sec-arraybuffer.prototype ArrayBuffer.prototype</h1>...</div><div id=\"excluded-sec-get-arraybuffer-@@species\"><h1><span class=\"secnum\">24.1.3.3</span>#sec-get-arraybuffer-@@species get ArrayBuffer [ @@species ]</h1>...</div></emu-clause>\n\n    "}, "sec-abstract-operations-for-atomics": {"num": "24.4.1", "title": "#sec-abstract-operations-for-atomics Abstract Operations for Atomics", "html": "<emu-clause id=\"sec-abstract-operations-for-atomics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-operations-for-atomics\">#sec-abstract-operations-for-atomics</span> Abstract Operations for Atomics</h1>\n\n      <div id=\"excluded-sec-validatesharedintegertypedarray\"><h1><span class=\"secnum\">24.4.1.1</span>#sec-validatesharedintegertypedarray ValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )</h1>...</div><div id=\"excluded-sec-validateatomicaccess\"><h1><span class=\"secnum\">24.4.1.2</span>#sec-validateatomicaccess ValidateAtomicAccess ( typedArray, requestIndex )</h1>...</div><div id=\"excluded-sec-getwaiterlist\"><h1><span class=\"secnum\">24.4.1.3</span>#sec-getwaiterlist GetWaiterList ( block, i )</h1>...</div><div id=\"excluded-sec-entercriticalsection\"><h1><span class=\"secnum\">24.4.1.4</span>#sec-entercriticalsection EnterCriticalSection ( WL )</h1>...</div><div id=\"excluded-sec-leavecriticalsection\"><h1><span class=\"secnum\">24.4.1.5</span>#sec-leavecriticalsection LeaveCriticalSection ( WL )</h1>...</div><div id=\"excluded-sec-addwaiter\"><h1><span class=\"secnum\">24.4.1.6</span>#sec-addwaiter AddWaiter ( WL, W )</h1>...</div><div id=\"excluded-sec-removewaiter\"><h1><span class=\"secnum\">24.4.1.7</span>#sec-removewaiter RemoveWaiter ( WL, W )</h1>...</div><div id=\"excluded-sec-removewaiters\"><h1><span class=\"secnum\">24.4.1.8</span>#sec-removewaiters RemoveWaiters ( WL, c )</h1>...</div><div id=\"excluded-sec-suspend\"><h1><span class=\"secnum\">24.4.1.9</span>#sec-suspend Suspend ( WL, W, timeout )</h1>...</div><div id=\"excluded-sec-notifywaiter\"><h1><span class=\"secnum\">24.4.1.10</span>#sec-notifywaiter NotifyWaiter ( WL, W )</h1>...</div><div id=\"excluded-sec-atomicreadmodifywrite\"><h1><span class=\"secnum\">24.4.1.11</span>#sec-atomicreadmodifywrite AtomicReadModifyWrite ( typedArray, index, value, op )</h1>...</div><div id=\"excluded-sec-atomicload\"><h1><span class=\"secnum\">24.4.1.12</span>#sec-atomicload AtomicLoad ( typedArray, index )</h1>...</div></emu-clause>\n\n    "}, "sec-data-blocks": {"num": "6.2.8", "title": "#sec-data-blocks Data Blocks", "html": "<emu-clause id=\"sec-data-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-data-blocks\">#sec-data-blocks</span> Data Blocks</h1>\n      <p>The  <dfn>Data Block</dfn> specification type is used to describe a distinct and mutable sequence of byte-sized (8 bit) numeric values. A Data Block value is created with a fixed number of bytes that each have the initial value 0.</p>\n      <p>For notational convenience within this specification, an array-like syntax can be used to access the individual bytes of a Data Block value. This notation presents a Data Block value as a 0-origined <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed sequence of bytes. For example, if <var>db</var> is a 5 byte Data Block value then <var>db</var>[2] can be used to access its 3<sup>rd</sup> byte.</p>\n      <p>A data block that resides in memory that can be referenced from multiple agents concurrently is designated a  <dfn>Shared Data Block</dfn>. A Shared Data Block has an identity (for the purposes of equality testing Shared Data Block values) that is  <em>address-free</em>: it is tied not to the virtual addresses the block is mapped to in any process, but to the set of locations in memory that the block represents. Two data blocks are equal only if the sets of the locations they contain are equal; otherwise, they are not equal and the intersection of the sets of locations they contain is empty.  Finally, Shared Data Blocks can be distinguished from Data Blocks.</p>\n      <p>The semantics of Shared Data Blocks is defined using Shared Data Block events by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> below introduce Shared Data Block events and act as the interface between evaluation semantics and the event semantics of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. The events form a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>, on which the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> acts as a filter. Please consult the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for full semantics.</p>\n      <p>Shared Data Block events are modeled by Records, defined in the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Data Block values:</p>\n\n      <div id=\"excluded-sec-createbytedatablock\"><h1><span class=\"secnum\">6.2.8.1</span>#sec-createbytedatablock CreateByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-createsharedbytedatablock\"><h1><span class=\"secnum\">6.2.8.2</span>#sec-createsharedbytedatablock CreateSharedByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-copydatablockbytes\"><h1><span class=\"secnum\">6.2.8.3</span>#sec-copydatablockbytes CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )</h1>...</div></emu-clause>\n  "}, "sec-memory-model-fundamentals": {"num": "27.1", "title": "#sec-memory-model-fundamentals Memory Model Fundamentals", "html": "<emu-clause id=\"sec-memory-model-fundamentals\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-memory-model-fundamentals\">#sec-memory-model-fundamentals</span> Memory Model Fundamentals</h1>\n    <p>Shared memory accesses (reads and writes) are divided into two groups, atomic accesses and data accesses, defined below. Atomic accesses are sequentially consistent, i.e., there is a strict total ordering of events agreed upon by all agents in an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>. Non-atomic accesses do not have a strict total ordering agreed upon by all agents, i.e., unordered.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>No orderings weaker than sequentially consistent and stronger than unordered, such as release-acquire, are supported.</p>\n    </div></emu-note>\n    <p>A  <dfn>Shared Data Block event</dfn> is either a  <dfn>ReadSharedMemory</dfn>,  <dfn>WriteSharedMemory</dfn>, or  <dfn>ReadModifyWriteSharedMemory</dfn> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</p>\n\n    <emu-table id=\"table-readsharedmemory-fields\" caption=\"ReadSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-readsharedmemory-fields\">#table-readsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to read from multiple write events on equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-writesharedmemory-fields\" caption=\"WriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-writesharedmemory-fields\">#table-writesharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const> | <emu-const>Init</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to be read from multiple read events with equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be read by other events.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-rmwsharedmemory-fields\" caption=\"ReadModifyWriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-rmwsharedmemory-fields\">#table-rmwsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const></td>\n            <td>Read-modify-write events are always sequentially consistent.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td><emu-val>true</emu-val></td>\n            <td>Read-modify-write events cannot tear.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read-modify-write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read-modify-write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be passed to [[ModifyOp]].</td>\n          </tr>\n          <tr>\n            <td>[[ModifyOp]]</td>\n            <td>A semantic function</td>\n            <td>A pure semantic function that returns a modified <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values from a read <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values and [[Payload]].</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>These events are introduced by <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> or by methods on the Atomics object.</p>\n    <p>Some operations may also introduce  <dfn>Synchronize</dfn> events. A  <dfn>Synchronize event</dfn> has no fields, and exists purely to directly constrain the permitted orderings of other events.</p>\n    <p>In addition to <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and Synchronize events, there are host-specific events.</p>\n    <p>Let the range of a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event be the Set of contiguous integers from its [[ByteIndex]] to [[ByteIndex]] + [[ElementSize]] - 1. Two events' ranges are equal when the events have the same [[Block]], and the ranges are element-wise equal. Two events' ranges are overlapping when the events have the same [[Block]], the ranges are not equal and their intersection is non-empty. Two events' ranges are disjoint when the events do not have the same [[Block]] or their ranges are neither equal nor overlapping.</p>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Examples of host-specific synchronizing events that should be accounted for are: sending a SharedArrayBuffer from one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to another (e.g., by <code>postMessage</code> in a browser), starting and stopping agents, and communicating within the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> via channels other than shared memory. It is assumed those events are appended to <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> during evaluation like the other SharedArrayBuffer events.</p>\n    </div></emu-note>\n    <p>Events are ordered within candidate executions by the relations defined below.</p>\n  </emu-clause>\n\n  "}, "sec-atomics.add": {"num": "24.4.2", "title": "#sec-atomics.add Atomics.add ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.add\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.add\">#sec-atomics.add</span> Atomics.add ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>Let <code>add</code> denote a semantic function of two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments that applies the addition operation to the Number values corresponding to the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values corresponding to the result of that operation.</p>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <code>add</code>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomics.xor": {"num": "24.4.13", "title": "#sec-atomics.xor Atomics.xor ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.xor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.xor\">#sec-atomics.xor</span> Atomics.xor ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>Let <code>xor</code> denote a semantic function of two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments that applies the bitwise-xor operation element-wise to the two arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values corresponding to the result of that operation.</p>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <code>xor</code>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getmodifysetvalueinbuffer": {"num": "24.1.1.13", "title": "#sec-getmodifysetvalueinbuffer GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getmodifysetvalueinbuffer\" aoid=\"GetModifySetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodifysetvalueinbuffer\">#sec-getmodifysetvalueinbuffer</span> GetModifySetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>op</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetModifySetValueInBuffer takes six parameters, a SharedArrayBuffer <var>arrayBuffer</var>, a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a TypedArray element type <var>type</var>, a Number or BigInt <var>value</var>, a semantic function <var>op</var>, and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>byteIndex</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>rawBytesRead</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> of nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawBytesRead</var> is the result of a load-link, of a load-exclusive, or of an operand of a read-modify-write instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>rmwEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> { [[Order]]: <emu-const>SeqCst</emu-const>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var>, [[ModifyOp]]: <var>op</var> }.</li><li>Append <var>rmwEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>rmwEvent</var>, [[ChosenValue]]: <var>rawBytesRead</var> } to <var>execution</var>.[[ChosenValues]].</li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawBytesRead</var>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-atomics.or": {"num": "24.4.8", "title": "#sec-atomics.or Atomics.or ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.or\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.or\">#sec-atomics.or</span> Atomics.or ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>Let <code>or</code> denote a semantic function of two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments that applies the bitwise-or operation element-wise to the two arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values corresponding to the result of that operation.</p>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <code>or</code>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomics.and": {"num": "24.4.3", "title": "#sec-atomics.and Atomics.and ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.and\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.and\">#sec-atomics.and</span> Atomics.and ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>Let <code>and</code> denote a semantic function of two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments that applies the bitwise-and operation element-wise to the two arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values corresponding to the result of that operation.</p>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <code>and</code>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomics.notify": {"num": "24.4.12", "title": "#sec-atomics.notify Atomics.notify ( typedArray, index, count )", "html": "<emu-clause id=\"sec-atomics.notify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</span> Atomics.notify ( <var>typedArray</var>, <var>index</var>, <var>count</var> )</h1>\n      <p><code>Atomics.notify</code> notifies some agents that are sleeping in the wait queue.  The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>If <var>count</var> is <emu-val>undefined</emu-val>, let <var>c</var> be <emu-val>+&#8734;</emu-val>.</li><li>Else,<ol><li>Let <var>intCount</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>Let <var>c</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>intCount</var>, 0).</li></ol></li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Let <var>n</var> be 0.</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>S</var> be <emu-xref aoid=\"RemoveWaiters\"><a href=\"#sec-removewaiters\">RemoveWaiters</a></emu-xref>(<var>WL</var>, <var>c</var>).</li><li>Repeat, while <var>S</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>,<ol><li>Let <var>W</var> be the first <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in <var>S</var>.</li><li>Remove <var>W</var> from the front of <var>S</var>.</li><li>Perform <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return <var>n</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomics.compareexchange": {"num": "24.4.4", "title": "#sec-atomics.compareexchange Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )", "html": "<emu-clause id=\"sec-atomics.compareexchange\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.compareexchange\">#sec-atomics.compareexchange</span> Atomics.compareExchange ( <var>typedArray</var>, <var>index</var>, <var>expectedValue</var>, <var>replacementValue</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>typedArray</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, then<ol><li>Let <var>expected</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>expectedValue</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>replacementValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>expected</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>expectedValue</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>replacementValue</var>).</li></ol></li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>isLittleEndian</var> be the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>expectedBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>elementType</var>, <var>expected</var>, <var>isLittleEndian</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <code>compareExchange</code> denote a semantic function of two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments that returns the second argument if the first argument is element-wise equal to <var>expectedBytes</var>.</li><li>Return <emu-xref aoid=\"GetModifySetValueInBuffer\"><a href=\"#sec-getmodifysetvalueinbuffer\">GetModifySetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>replacement</var>, <code>compareExchange</code>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-validatesharedintegertypedarray": {"num": "24.4.1.1", "title": "#sec-validatesharedintegertypedarray ValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )", "html": "<emu-clause id=\"sec-validatesharedintegertypedarray\" aoid=\"ValidateSharedIntegerTypedArray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validatesharedintegertypedarray\">#sec-validatesharedintegertypedarray</span> ValidateSharedIntegerTypedArray ( <var>typedArray</var> [ , <var>waitable</var> ] )</h1>\n        <p>The abstract operation ValidateSharedIntegerTypedArray takes one argument <var>typedArray</var> and an optional Boolean <var>waitable</var>. It performs the following steps:</p>\n        <emu-alg><ol><li>If <var>waitable</var> is not present, set <var>waitable</var> to <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>typedArray</var>, [[TypedArrayName]]).</li><li>Let <var>typeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>typeName</var>.</li><li>If <var>waitable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>typeName</var> is not <emu-val>\"Int32Array\"</emu-val> or <emu-val>\"BigInt64Array\"</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>If !&#160;<emu-xref aoid=\"IsUnclampedIntegerElementType\"><a href=\"#sec-isunclampedintegerelementtype\">IsUnclampedIntegerElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val> and !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>typedArray</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>typedArray</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>buffer</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-abstract-operations-for-arraybuffer-objects": {"num": "24.1.1", "title": "#sec-abstract-operations-for-arraybuffer-objects Abstract Operations For ArrayBuffer Objects", "html": "<emu-clause id=\"sec-abstract-operations-for-arraybuffer-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-operations-for-arraybuffer-objects\">#sec-abstract-operations-for-arraybuffer-objects</span> Abstract Operations For ArrayBuffer Objects</h1>\n\n      <div id=\"excluded-sec-allocatearraybuffer\"><h1><span class=\"secnum\">24.1.1.1</span>#sec-allocatearraybuffer AllocateArrayBuffer ( constructor, byteLength )</h1>...</div><div id=\"excluded-sec-isdetachedbuffer\"><h1><span class=\"secnum\">24.1.1.2</span>#sec-isdetachedbuffer IsDetachedBuffer ( arrayBuffer )</h1>...</div><div id=\"excluded-sec-detacharraybuffer\"><h1><span class=\"secnum\">24.1.1.3</span>#sec-detacharraybuffer DetachArrayBuffer ( arrayBuffer [ , key ] )</h1>...</div><div id=\"excluded-sec-clonearraybuffer\"><h1><span class=\"secnum\">24.1.1.4</span>#sec-clonearraybuffer CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength, cloneConstructor )</h1>...</div><div id=\"excluded-sec-isunsignedelementtype\"><h1><span class=\"secnum\">24.1.1.5</span>#sec-isunsignedelementtype IsUnsignedElementType ( type )</h1>...</div><div id=\"excluded-sec-isunclampedintegerelementtype\"><h1><span class=\"secnum\">24.1.1.6</span>#sec-isunclampedintegerelementtype IsUnclampedIntegerElementType ( type )</h1>...</div><div id=\"excluded-sec-isbigintelementtype\"><h1><span class=\"secnum\">24.1.1.7</span>#sec-isbigintelementtype IsBigIntElementType ( type )</h1>...</div><div id=\"excluded-sec-isnotearconfiguration\"><h1><span class=\"secnum\">24.1.1.8</span>#sec-isnotearconfiguration IsNoTearConfiguration ( type, order )</h1>...</div><div id=\"excluded-sec-rawbytestonumeric\"><h1><span class=\"secnum\">24.1.1.9</span>#sec-rawbytestonumeric RawBytesToNumeric ( type, rawBytes, isLittleEndian )</h1>...</div><div id=\"excluded-sec-getvaluefrombuffer\"><h1><span class=\"secnum\">24.1.1.10</span>#sec-getvaluefrombuffer GetValueFromBuffer ( arrayBuffer, byteIndex, type, isTypedArray, order [ , isLittleEndian ] )</h1>...</div><div id=\"excluded-sec-numerictorawbytes\"><h1><span class=\"secnum\">24.1.1.11</span>#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )</h1>...</div><div id=\"excluded-sec-setvalueinbuffer\"><h1><span class=\"secnum\">24.1.1.12</span>#sec-setvalueinbuffer SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )</h1>...</div><div id=\"excluded-sec-getmodifysetvalueinbuffer\"><h1><span class=\"secnum\">24.1.1.13</span>#sec-getmodifysetvalueinbuffer GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )</h1>...</div></emu-clause>\n\n    "}}, "figData": {"table-the-typedarray-constructors": "Table 61", "table-readsharedmemory-fields": "Table 79", "table-writesharedmemory-fields": "Table 80", "table-rmwsharedmemory-fields": "Table 81", "table-candidate-execution-records": "Table 84"}}, "to": {"secList": ["sec-candidate-executions", "sec-arraybuffer-constructor", "sec-composewriteeventbytes", "sec-atomics.exchange", "sec-properties-of-the-arraybuffer-prototype-object", "sec-atomics.wait", "sec-reads-bytes-from", "sec-arraybuffer-objects", "sec-atomics.store", "sec-atomicreadmodifywrite", "sec-atomics.sub", "sec-atomicload", "sec-properties-of-the-arraybuffer-constructor", "sec-abstract-operations-for-atomics", "sec-data-blocks", "sec-memory-model-fundamentals", "sec-atomics.add", "sec-atomics.xor", "sec-getmodifysetvalueinbuffer", "sec-atomics.or", "sec-atomics.and", "sec-atomics.notify", "sec-atomics.compareexchange", "sec-abstract-operations-for-arraybuffer-objects"], "secData": {"sec-candidate-executions": {"num": "27.4", "title": "#sec-candidate-executions Candidate Executions", "html": "<emu-clause id=\"sec-candidate-executions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candidate-executions\">#sec-candidate-executions</span> Candidate Executions</h1>\n    <p>A  <dfn>candidate execution</dfn> of the evaluation of an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> with the following fields.</p>\n    <emu-table id=\"table-candidate-execution-records\" caption=\"Candidate Execution Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-candidate-execution-records\">#table-candidate-execution-records</span>: Candidate Execution <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[EventsRecords]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#agent\"><a href=\"#agent\">Agent</a></emu-xref> Events Records.</td>\n            <td>Maps an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to Lists of events appended during the evaluation.</td>\n          </tr>\n          <tr>\n            <td>[[ChosenValues]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Chosen Value Records.</td>\n            <td>Maps <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events to the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values chosen during the evaluation.</td>\n          </tr>\n          <tr>\n            <td>[[AgentOrder]]</td>\n            <td>An <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[ReadsBytesFrom]]</td>\n            <td>A <emu-xref aoid=\"reads-bytes-from\"><a href=\"#sec-reads-bytes-from\">reads-bytes-from</a></emu-xref> mathematical function.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[ReadsFrom]]</td>\n            <td>A <emu-xref aoid=\"reads-from\"><a href=\"#sec-reads-from\">reads-from</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[HostSynchronizesWith]]</td>\n            <td>A <emu-xref aoid=\"host-synchronizes-with\"><a href=\"#sec-host-synchronizes-with\">host-synchronizes-with</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[SynchronizesWith]]</td>\n            <td>A <emu-xref aoid=\"synchronizes-with\"><a href=\"#sec-synchronizes-with\">synchronizes-with</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[HappensBefore]]</td>\n            <td>A <emu-xref aoid=\"happens-before\"><a href=\"#sec-happens-before\">happens-before</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>An  <dfn>empty candidate execution</dfn> is a candidate execution <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose fields are empty Lists and Relations.</p>\n  </emu-clause>\n\n  "}, "sec-arraybuffer-constructor": {"num": "24.1.3", "title": "#sec-arraybuffer-constructor The ArrayBuffer Constructor", "html": "<emu-clause id=\"sec-arraybuffer-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraybuffer-constructor\">#sec-arraybuffer-constructor</span> The ArrayBuffer Constructor</h1>\n      <p>The ArrayBuffer <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%ArrayBuffer%</dfn>.</li>\n        <li>is the initial value of the <emu-val>\"ArrayBuffer\"</emu-val> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li>\n        <li>creates and initializes a new ArrayBuffer object when called as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li>\n        <li>is not intended to be called as a function and will throw an exception when called in that manner.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified <code>ArrayBuffer</code> behaviour must include a <code>super</code> call to the <code>ArrayBuffer</code> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal state necessary to support the <code>ArrayBuffer.prototype</code> built-in methods.</li>\n      </ul>\n\n      <div id=\"excluded-sec-arraybuffer-length\"><h1><span class=\"secnum\">24.1.3.1</span>#sec-arraybuffer-length ArrayBuffer ( length )</h1>...</div></emu-clause>\n\n    "}, "sec-composewriteeventbytes": {"num": "27.5.4", "title": "#sec-composewriteeventbytes ComposeWriteEventBytes ( execution, byteIndex, Ws )", "html": "<emu-clause id=\"sec-composewriteeventbytes\" aoid=\"ComposeWriteEventBytes\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-composewriteeventbytes\">#sec-composewriteeventbytes</span> ComposeWriteEventBytes ( <var>execution</var>, <var>byteIndex</var>, <var>Ws</var> )</h1>\n      <p>The abstract operation ComposeWriteEventBytes takes four arguments, a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, and a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>Ws</var> of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events. It performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>byteLocation</var> be <var>byteIndex</var>.</li><li>Let <var>bytesRead</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>W</var> of <var>Ws</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> has <var>byteLocation</var> in its range.</li><li>Let <var>payloadIndex</var> be <var>byteLocation</var> - <var>W</var>.[[ByteIndex]].</li><li>If <var>W</var> is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> event, then<ol><li>Let <var>byte</var> be <var>W</var>.[[Payload]][<var>payloadIndex</var>].</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event.</li><li>Let <var>bytes</var> be <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref>(<var>execution</var>, <var>W</var>).</li><li>Let <var>bytesModified</var> be <var>W</var>.[[ModifyOp]](<var>bytes</var>, <var>W</var>.[[Payload]]).</li><li>Let <var>byte</var> be <var>bytesModified</var>[<var>payloadIndex</var>].</li></ol></li><li>Append <var>byte</var> to <var>bytesRead</var>.</li><li>Set <var>byteLocation</var> to <var>byteLocation</var> + 1.</li></ol></li><li>Return <var>bytesRead</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>The read-modify-write modification [[ModifyOp]] is given by the function properties on the Atomics object that introduce <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>This abstract operation composes a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of write events into a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. It is used in the event semantics of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-atomics.exchange": {"num": "24.4.5", "title": "#sec-atomics.exchange Atomics.exchange ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.exchange\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.exchange\">#sec-atomics.exchange</span> Atomics.exchange ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>second</var> be a new read-modify-write modification function with parameters (<var>oldBytes</var>, <var>newBytes</var>) that captures nothing and performs the following steps atomically when called:<ol><li>Return <var>newBytes</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>second</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-properties-of-the-arraybuffer-prototype-object": {"num": "24.1.5", "title": "#sec-properties-of-the-arraybuffer-prototype-object Properties of the ArrayBuffer Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-arraybuffer-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-arraybuffer-prototype-object\">#sec-properties-of-the-arraybuffer-prototype-object</span> Properties of the ArrayBuffer Prototype Object</h1>\n      <p>The ArrayBuffer prototype object:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%ArrayBufferPrototype%</dfn>.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>does not have an [[ArrayBufferData]] or [[ArrayBufferByteLength]] internal slot.</li>\n      </ul>\n\n      <div id=\"excluded-sec-get-arraybuffer.prototype.bytelength\"><h1><span class=\"secnum\">24.1.5.1</span>#sec-get-arraybuffer.prototype.bytelength get ArrayBuffer.prototype.byteLength</h1>...</div><div id=\"excluded-sec-arraybuffer.prototype.constructor\"><h1><span class=\"secnum\">24.1.5.2</span>#sec-arraybuffer.prototype.constructor ArrayBuffer.prototype.constructor</h1>...</div><div id=\"excluded-sec-arraybuffer.prototype.slice\"><h1><span class=\"secnum\">24.1.5.3</span>#sec-arraybuffer.prototype.slice ArrayBuffer.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-arraybuffer.prototype-@@tostringtag\"><h1><span class=\"secnum\">24.1.5.4</span>#sec-arraybuffer.prototype-@@tostringtag ArrayBuffer.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n\n    "}, "sec-atomics.wait": {"num": "24.4.11", "title": "#sec-atomics.wait Atomics.wait ( typedArray, index, value, timeout )", "html": "<emu-clause id=\"sec-atomics.wait\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.wait\">#sec-atomics.wait</span> Atomics.wait ( <var>typedArray</var>, <var>index</var>, <var>value</var>, <var>timeout</var> )</h1>\n      <p><code>Atomics.wait</code> puts the calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in a wait queue and puts it to sleep until it is notified or the sleep times out. The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateIntegerTypedArray\"><a href=\"#sec-validateintegertypedarray\">ValidateIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>arrayTypeName</var> is <emu-val>\"BigInt64Array\"</emu-val>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt64\"><a href=\"#sec-tobigint64\">ToBigInt64</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>value</var>).</li><li>Let <var>q</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>timeout</var>).</li><li>If <var>q</var> is <emu-val>NaN</emu-val>, let <var>t</var> be <emu-val>+&#8734;</emu-val>; else let <var>t</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>q</var>, 0).</li><li>Let <var>B</var> be <emu-xref aoid=\"AgentCanSuspend\"><a href=\"#sec-agentcansuspend\">AgentCanSuspend</a></emu-xref>().</li><li>If <var>B</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>w</var> be !&#160;<emu-xref aoid=\"AtomicLoad\"><a href=\"#sec-atomicload\">AtomicLoad</a></emu-xref>(<var>typedArray</var>, <var>i</var>).</li><li>If <var>v</var> is not equal to <var>w</var>, then<ol><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return the String <emu-val>\"not-equal\"</emu-val>.</li></ol></li><li>Let <var>W</var> be <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Perform <emu-xref aoid=\"AddWaiter\"><a href=\"#sec-addwaiter\">AddWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Let <var>notified</var> be <emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref>(<var>WL</var>, <var>W</var>, <var>t</var>).</li><li>If <var>notified</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is not on the list of waiters in <var>WL</var>.</li></ol></li><li>Else,<ol><li>Perform <emu-xref aoid=\"RemoveWaiter\"><a href=\"#sec-removewaiter\">RemoveWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>If <var>notified</var> is <emu-val>true</emu-val>, return the String <emu-val>\"ok\"</emu-val>.</li><li>Return the String <emu-val>\"timed-out\"</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-reads-bytes-from": {"num": "27.6.2", "title": "#sec-reads-bytes-from reads-bytes-from", "html": "<emu-clause id=\"sec-reads-bytes-from\" aoid=\"reads-bytes-from\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-reads-bytes-from\">#sec-reads-bytes-from</span> reads-bytes-from</h1>\n      <p>For a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, <var>execution</var>.[[ReadsBytesFrom]] is a mathematical function mapping events in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) to Lists of events in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) that satisfies the following conditions.</p>\n      <ul>\n        <li>\n          <p>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), <var>execution</var>.[[ReadsBytesFrom]](<var>R</var>) is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length equal to <var>R</var>.[[ElementSize]] of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events <var>Ws</var> such that all of the following are true.</p>\n          <ul>\n            <li>Each event <var>W</var> with index <var>i</var> in <var>Ws</var> has <var>R</var>.[[ByteIndex]] + <var>i</var> in its range.</li>\n            <li><var>R</var> is not in <var>Ws</var>.</li>\n          </ul>\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-arraybuffer-objects": {"num": "24.1", "title": "#sec-arraybuffer-objects ArrayBuffer Objects", "html": "<emu-clause id=\"sec-arraybuffer-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</span> ArrayBuffer Objects</h1>\n\n    <div id=\"excluded-sec-arraybuffer-notation\"><h1><span class=\"secnum\">24.1.1</span>#sec-arraybuffer-notation Notation</h1>...</div><div id=\"excluded-sec-abstract-operations-for-arraybuffer-objects\"><h1><span class=\"secnum\">24.1.2</span>#sec-abstract-operations-for-arraybuffer-objects Abstract Operations For ArrayBuffer Objects</h1>...</div><div id=\"excluded-sec-arraybuffer-constructor\"><h1><span class=\"secnum\">24.1.3</span>#sec-arraybuffer-constructor The ArrayBuffer Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-arraybuffer-constructor\"><h1><span class=\"secnum\">24.1.4</span>#sec-properties-of-the-arraybuffer-constructor Properties of the ArrayBuffer Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-arraybuffer-prototype-object\"><h1><span class=\"secnum\">24.1.5</span>#sec-properties-of-the-arraybuffer-prototype-object Properties of the ArrayBuffer Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-the-arraybuffer-instances\"><h1><span class=\"secnum\">24.1.6</span>#sec-properties-of-the-arraybuffer-instances Properties of ArrayBuffer Instances</h1>...</div></emu-clause>\n\n  "}, "sec-atomics.store": {"num": "24.4.9", "title": "#sec-atomics.store Atomics.store ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.store\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.store\">#sec-atomics.store</span> Atomics.store ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateIntegerTypedArray\"><a href=\"#sec-validateintegertypedarray\">ValidateIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>arrayTypeName</var> is <emu-val>\"BigUint64Array\"</emu-val> or <emu-val>\"BigInt64Array\"</emu-val>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <emu-val>true</emu-val>, <emu-const>SeqCst</emu-const>).</li><li>Return <var>v</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomicreadmodifywrite": {"num": "24.4.1.11", "title": "#sec-atomicreadmodifywrite AtomicReadModifyWrite ( typedArray, index, value, op )", "html": "<emu-clause id=\"sec-atomicreadmodifywrite\" aoid=\"AtomicReadModifyWrite\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomicreadmodifywrite\">#sec-atomicreadmodifywrite</span> AtomicReadModifyWrite ( <var>typedArray</var>, <var>index</var>, <var>value</var>, <var>op</var> )</h1>\n        <p>The abstract operation AtomicReadModifyWrite takes four arguments, <var>typedArray</var>, <var>index</var>, <var>value</var>, and a pure combining operation <var>op</var>. The pure combining operation <var>op</var> takes two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. The operation atomically loads a value, combines it with another value, and stores the result of the combination. It returns the loaded value. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateIntegerTypedArray\"><a href=\"#sec-validateintegertypedarray\">ValidateIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>typedArray</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Return <emu-xref aoid=\"GetModifySetValueInBuffer\"><a href=\"#sec-getmodifysetvalueinbuffer\">GetModifySetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <var>op</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-atomics.sub": {"num": "24.4.10", "title": "#sec-atomics.sub Atomics.sub ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.sub\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.sub\">#sec-atomics.sub</span> Atomics.sub ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>isLittleEndian</var> be the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>subtract</var> be a new read-modify-write modification function with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures <var>type</var> and <var>isLittleEndian</var> and performs the following steps atomically when called:<ol><li>Let <var>x</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>xBytes</var>, <var>isLittleEndian</var>).</li><li>Let <var>y</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>yBytes</var>, <var>isLittleEndian</var>).</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>).</li><li>Let <var>difference</var> be <var>T</var>::subtract(<var>x</var>, <var>y</var>).</li><li>Let <var>differenceBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>difference</var>, <var>isLittleEndian</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>differenceBytes</var>, <var>xBytes</var>, and <var>yBytes</var> have the same number of elements.</li><li>Return <var>differenceBytes</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>subtract</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomicload": {"num": "24.4.1.12", "title": "#sec-atomicload AtomicLoad ( typedArray, index )", "html": "<emu-clause id=\"sec-atomicload\" aoid=\"AtomicLoad\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomicload\">#sec-atomicload</span> AtomicLoad ( <var>typedArray</var>, <var>index</var> )</h1>\n        <p>The abstract operation AtomicLoad takes two arguments, <var>typedArray</var>, <var>index</var>. The operation atomically loads a value and returns the loaded value. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateIntegerTypedArray\"><a href=\"#sec-validateintegertypedarray\">ValidateIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Return <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <emu-val>true</emu-val>, <emu-const>SeqCst</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-arraybuffer-constructor": {"num": "24.1.4", "title": "#sec-properties-of-the-arraybuffer-constructor Properties of the ArrayBuffer Constructor", "html": "<emu-clause id=\"sec-properties-of-the-arraybuffer-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-arraybuffer-constructor\">#sec-properties-of-the-arraybuffer-constructor</span> Properties of the ArrayBuffer Constructor</h1>\n      <p>The ArrayBuffer <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li>\n        <li>has the following properties:</li>\n      </ul>\n\n      <div id=\"excluded-sec-arraybuffer.isview\"><h1><span class=\"secnum\">24.1.4.1</span>#sec-arraybuffer.isview ArrayBuffer.isView ( arg )</h1>...</div><div id=\"excluded-sec-arraybuffer.prototype\"><h1><span class=\"secnum\">24.1.4.2</span>#sec-arraybuffer.prototype ArrayBuffer.prototype</h1>...</div><div id=\"excluded-sec-get-arraybuffer-@@species\"><h1><span class=\"secnum\">24.1.4.3</span>#sec-get-arraybuffer-@@species get ArrayBuffer [ @@species ]</h1>...</div></emu-clause>\n\n    "}, "sec-abstract-operations-for-atomics": {"num": "24.4.1", "title": "#sec-abstract-operations-for-atomics Abstract Operations for Atomics", "html": "<emu-clause id=\"sec-abstract-operations-for-atomics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-operations-for-atomics\">#sec-abstract-operations-for-atomics</span> Abstract Operations for Atomics</h1>\n\n      <div id=\"excluded-sec-validateintegertypedarray\"><h1><span class=\"secnum\">24.4.1.1</span>#sec-validateintegertypedarray ValidateIntegerTypedArray ( typedArray [ , waitable ] )</h1>...</div><div id=\"excluded-sec-validateatomicaccess\"><h1><span class=\"secnum\">24.4.1.2</span>#sec-validateatomicaccess ValidateAtomicAccess ( typedArray, requestIndex )</h1>...</div><div id=\"excluded-sec-getwaiterlist\"><h1><span class=\"secnum\">24.4.1.3</span>#sec-getwaiterlist GetWaiterList ( block, i )</h1>...</div><div id=\"excluded-sec-entercriticalsection\"><h1><span class=\"secnum\">24.4.1.4</span>#sec-entercriticalsection EnterCriticalSection ( WL )</h1>...</div><div id=\"excluded-sec-leavecriticalsection\"><h1><span class=\"secnum\">24.4.1.5</span>#sec-leavecriticalsection LeaveCriticalSection ( WL )</h1>...</div><div id=\"excluded-sec-addwaiter\"><h1><span class=\"secnum\">24.4.1.6</span>#sec-addwaiter AddWaiter ( WL, W )</h1>...</div><div id=\"excluded-sec-removewaiter\"><h1><span class=\"secnum\">24.4.1.7</span>#sec-removewaiter RemoveWaiter ( WL, W )</h1>...</div><div id=\"excluded-sec-removewaiters\"><h1><span class=\"secnum\">24.4.1.8</span>#sec-removewaiters RemoveWaiters ( WL, c )</h1>...</div><div id=\"excluded-sec-suspend\"><h1><span class=\"secnum\">24.4.1.9</span>#sec-suspend Suspend ( WL, W, timeout )</h1>...</div><div id=\"excluded-sec-notifywaiter\"><h1><span class=\"secnum\">24.4.1.10</span>#sec-notifywaiter NotifyWaiter ( WL, W )</h1>...</div><div id=\"excluded-sec-atomicreadmodifywrite\"><h1><span class=\"secnum\">24.4.1.11</span>#sec-atomicreadmodifywrite AtomicReadModifyWrite ( typedArray, index, value, op )</h1>...</div><div id=\"excluded-sec-atomicload\"><h1><span class=\"secnum\">24.4.1.12</span>#sec-atomicload AtomicLoad ( typedArray, index )</h1>...</div><div id=\"excluded-sec-bytelistbitwiseop\"><h1><span class=\"secnum\">24.4.1.13</span>#sec-bytelistbitwiseop ByteListBitwiseOp( op, xBytes, yBytes )</h1>...</div><div id=\"excluded-sec-bytelistequal\"><h1><span class=\"secnum\">24.4.1.14</span>#sec-bytelistequal ByteListEqual( xBytes, yBytes )</h1>...</div></emu-clause>\n\n    "}, "sec-data-blocks": {"num": "6.2.8", "title": "#sec-data-blocks Data Blocks", "html": "<emu-clause id=\"sec-data-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-data-blocks\">#sec-data-blocks</span> Data Blocks</h1>\n      <p>The  <dfn>Data Block</dfn> specification type is used to describe a distinct and mutable sequence of byte-sized (8 bit) numeric values. A  <em>byte</em> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the range 0 through 255, inclusive. A Data Block value is created with a fixed number of bytes that each have the initial value 0.</p>\n      <p>For notational convenience within this specification, an array-like syntax can be used to access the individual bytes of a Data Block value. This notation presents a Data Block value as a 0-origined <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed sequence of bytes. For example, if <var>db</var> is a 5 byte Data Block value then <var>db</var>[2] can be used to access its 3<sup>rd</sup> byte.</p>\n      <p>A data block that resides in memory that can be referenced from multiple agents concurrently is designated a  <dfn>Shared Data Block</dfn>. A Shared Data Block has an identity (for the purposes of equality testing Shared Data Block values) that is  <em>address-free</em>: it is tied not to the virtual addresses the block is mapped to in any process, but to the set of locations in memory that the block represents. Two data blocks are equal only if the sets of the locations they contain are equal; otherwise, they are not equal and the intersection of the sets of locations they contain is empty.  Finally, Shared Data Blocks can be distinguished from Data Blocks.</p>\n      <p>The semantics of Shared Data Blocks is defined using Shared Data Block events by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> below introduce Shared Data Block events and act as the interface between evaluation semantics and the event semantics of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. The events form a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>, on which the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> acts as a filter. Please consult the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for full semantics.</p>\n      <p>Shared Data Block events are modeled by Records, defined in the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Data Block values:</p>\n\n      <div id=\"excluded-sec-createbytedatablock\"><h1><span class=\"secnum\">6.2.8.1</span>#sec-createbytedatablock CreateByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-createsharedbytedatablock\"><h1><span class=\"secnum\">6.2.8.2</span>#sec-createsharedbytedatablock CreateSharedByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-copydatablockbytes\"><h1><span class=\"secnum\">6.2.8.3</span>#sec-copydatablockbytes CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )</h1>...</div></emu-clause>\n  "}, "sec-memory-model-fundamentals": {"num": "27.1", "title": "#sec-memory-model-fundamentals Memory Model Fundamentals", "html": "<emu-clause id=\"sec-memory-model-fundamentals\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-memory-model-fundamentals\">#sec-memory-model-fundamentals</span> Memory Model Fundamentals</h1>\n    <p>Shared memory accesses (reads and writes) are divided into two groups, atomic accesses and data accesses, defined below. Atomic accesses are sequentially consistent, i.e., there is a strict total ordering of events agreed upon by all agents in an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>. Non-atomic accesses do not have a strict total ordering agreed upon by all agents, i.e., unordered.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>No orderings weaker than sequentially consistent and stronger than unordered, such as release-acquire, are supported.</p>\n    </div></emu-note>\n    <p>A  <dfn>Shared Data Block event</dfn> is either a  <dfn>ReadSharedMemory</dfn>,  <dfn>WriteSharedMemory</dfn>, or  <dfn>ReadModifyWriteSharedMemory</dfn> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</p>\n\n    <emu-table id=\"table-readsharedmemory-fields\" caption=\"ReadSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-readsharedmemory-fields\">#table-readsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to read from multiple write events on equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-writesharedmemory-fields\" caption=\"WriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-writesharedmemory-fields\">#table-writesharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const> | <emu-const>Init</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to be read from multiple read events with equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be read by other events.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-rmwsharedmemory-fields\" caption=\"ReadModifyWriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-rmwsharedmemory-fields\">#table-rmwsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const></td>\n            <td>Read-modify-write events are always sequentially consistent.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td><emu-val>true</emu-val></td>\n            <td>Read-modify-write events cannot tear.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read-modify-write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read-modify-write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be passed to [[ModifyOp]].</td>\n          </tr>\n          <tr>\n            <td>[[ModifyOp]]</td>\n            <td>A read-modify-write modification function</td>\n            <td>An <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">abstract closure</a></emu-xref> that returns a modified <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values from a read <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values and [[Payload]].</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>These events are introduced by <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> or by methods on the Atomics object.</p>\n    <p>Some operations may also introduce  <dfn>Synchronize</dfn> events. A  <dfn>Synchronize event</dfn> has no fields, and exists purely to directly constrain the permitted orderings of other events.</p>\n    <p>In addition to <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and Synchronize events, there are host-specific events.</p>\n    <p>Let the range of a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event be the Set of contiguous integers from its [[ByteIndex]] to [[ByteIndex]] + [[ElementSize]] - 1. Two events' ranges are equal when the events have the same [[Block]], and the ranges are element-wise equal. Two events' ranges are overlapping when the events have the same [[Block]], the ranges are not equal and their intersection is non-empty. Two events' ranges are disjoint when the events do not have the same [[Block]] or their ranges are neither equal nor overlapping.</p>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Examples of host-specific synchronizing events that should be accounted for are: sending a SharedArrayBuffer from one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to another (e.g., by <code>postMessage</code> in a browser), starting and stopping agents, and communicating within the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> via channels other than shared memory. It is assumed those events are appended to <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> during evaluation like the other SharedArrayBuffer events.</p>\n    </div></emu-note>\n    <p>Events are ordered within candidate executions by the relations defined below.</p>\n  </emu-clause>\n\n  "}, "sec-atomics.add": {"num": "24.4.2", "title": "#sec-atomics.add Atomics.add ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.add\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.add\">#sec-atomics.add</span> Atomics.add ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>isLittleEndian</var> be the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>add</var> be a new read-modify-write modification function with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures <var>type</var> and <var>isLittleEndian</var> and performs the following steps atomically when called:<ol><li>Let <var>x</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>xBytes</var>, <var>isLittleEndian</var>).</li><li>Let <var>y</var> be <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>yBytes</var>, <var>isLittleEndian</var>).</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>).</li><li>Let <var>sum</var> be <var>T</var>::add(<var>x</var>, <var>y</var>).</li><li>Let <var>sumBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>sum</var>, <var>isLittleEndian</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sumBytes</var>, <var>xBytes</var>, and <var>yBytes</var> have the same number of elements.</li><li>Return <var>sumBytes</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>add</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomics.xor": {"num": "24.4.13", "title": "#sec-atomics.xor Atomics.xor ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.xor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.xor\">#sec-atomics.xor</span> Atomics.xor ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>xor</var> be a new read-modify-write modification function with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures nothing and performs the following steps atomically when called:<ol><li>Return <emu-xref aoid=\"ByteListBitwiseOp\"><a href=\"#sec-bytelistbitwiseop\">ByteListBitwiseOp</a></emu-xref>(<code>^</code>, <var>xBytes</var>, <var>yBytes</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>xor</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getmodifysetvalueinbuffer": {"num": "24.1.2.13", "title": "#sec-getmodifysetvalueinbuffer GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getmodifysetvalueinbuffer\" aoid=\"GetModifySetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodifysetvalueinbuffer\">#sec-getmodifysetvalueinbuffer</span> GetModifySetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>op</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetModifySetValueInBuffer takes six parameters, an ArrayBuffer or SharedArrayBuffer <var>arrayBuffer</var>, a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a TypedArray element type <var>type</var>, a Number or BigInt <var>value</var>, a read-modify-write modification function <var>op</var>, and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>byteIndex</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>rawBytesRead</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> of nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawBytesRead</var> is the result of a load-link, of a load-exclusive, or of an operand of a read-modify-write instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>rmwEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> { [[Order]]: <emu-const>SeqCst</emu-const>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var>, [[ModifyOp]]: <var>op</var> }.</li><li>Append <var>rmwEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>rmwEvent</var>, [[ChosenValue]]: <var>rawBytesRead</var> } to <var>execution</var>.[[ChosenValues]].</li></ol></li><li>Else,<ol><li>Let <var>rawBytesAtIndex</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>elementSize</var> containing, in order, the <var>elementSize</var> sequence of bytes starting with <var>block</var>[<var>byteIndex</var>].</li><li>Let <var>rawBytesRead</var> be <var>op</var>(<var>rawBytesAtIndex</var>, <var>rawBytes</var>).</li></ol></li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawBytesRead</var>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-atomics.or": {"num": "24.4.8", "title": "#sec-atomics.or Atomics.or ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.or\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.or\">#sec-atomics.or</span> Atomics.or ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>or</var> be a new read-modify-write modification function with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures nothing and performs the following steps atomically when called:<ol><li>Return <emu-xref aoid=\"ByteListBitwiseOp\"><a href=\"#sec-bytelistbitwiseop\">ByteListBitwiseOp</a></emu-xref>(<code>|</code>, <var>xBytes</var>, <var>yBytes</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>or</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomics.and": {"num": "24.4.3", "title": "#sec-atomics.and Atomics.and ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.and\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.and\">#sec-atomics.and</span> Atomics.and ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>and</var> be a new read-modify-write modification function with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures nothing and performs the following steps atomically when called:<ol><li>Return <emu-xref aoid=\"ByteListBitwiseOp\"><a href=\"#sec-bytelistbitwiseop\">ByteListBitwiseOp</a></emu-xref>(<code>&amp;</code>, <var>xBytes</var>, <var>yBytes</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>and</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomics.notify": {"num": "24.4.12", "title": "#sec-atomics.notify Atomics.notify ( typedArray, index, count )", "html": "<emu-clause id=\"sec-atomics.notify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</span> Atomics.notify ( <var>typedArray</var>, <var>index</var>, <var>count</var> )</h1>\n      <p><code>Atomics.notify</code> notifies some agents that are sleeping in the wait queue.  The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateIntegerTypedArray\"><a href=\"#sec-validateintegertypedarray\">ValidateIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>If <var>count</var> is <emu-val>undefined</emu-val>, let <var>c</var> be <emu-val>+&#8734;</emu-val>.</li><li>Else,<ol><li>Let <var>intCount</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>Let <var>c</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>intCount</var>, 0).</li></ol></li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>false</emu-val>, return 0.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Let <var>n</var> be 0.</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>S</var> be <emu-xref aoid=\"RemoveWaiters\"><a href=\"#sec-removewaiters\">RemoveWaiters</a></emu-xref>(<var>WL</var>, <var>c</var>).</li><li>Repeat, while <var>S</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>,<ol><li>Let <var>W</var> be the first <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in <var>S</var>.</li><li>Remove <var>W</var> from the front of <var>S</var>.</li><li>Perform <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return <var>n</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomics.compareexchange": {"num": "24.4.4", "title": "#sec-atomics.compareexchange Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )", "html": "<emu-clause id=\"sec-atomics.compareexchange\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.compareexchange\">#sec-atomics.compareexchange</span> Atomics.compareExchange ( <var>typedArray</var>, <var>index</var>, <var>expectedValue</var>, <var>replacementValue</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateIntegerTypedArray\"><a href=\"#sec-validateintegertypedarray\">ValidateIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>typedArray</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, then<ol><li>Let <var>expected</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>expectedValue</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>replacementValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>expected</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>expectedValue</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>replacementValue</var>).</li></ol></li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>isLittleEndian</var> be the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>expectedBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>elementType</var>, <var>expected</var>, <var>isLittleEndian</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>compareExchange</var> be a new read-modify-write modification function with parameters (<var>oldBytes</var>, <var>newBytes</var>) that captures <var>expectedBytes</var> and performs the following steps atomically when called:<ol><li>If <emu-xref aoid=\"ByteListEqual\"><a href=\"#sec-bytelistequal\">ByteListEqual</a></emu-xref>(<var>oldBytes</var>, <var>expectedBytes</var>) is <emu-val>true</emu-val>, return <var>newBytes</var>.</li><li>Return <var>oldBytes</var>.</li></ol></li><li>Return <emu-xref aoid=\"GetModifySetValueInBuffer\"><a href=\"#sec-getmodifysetvalueinbuffer\">GetModifySetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>replacement</var>, <var>compareExchange</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-abstract-operations-for-arraybuffer-objects": {"num": "24.1.2", "title": "#sec-abstract-operations-for-arraybuffer-objects Abstract Operations For ArrayBuffer Objects", "html": "<emu-clause id=\"sec-abstract-operations-for-arraybuffer-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-operations-for-arraybuffer-objects\">#sec-abstract-operations-for-arraybuffer-objects</span> Abstract Operations For ArrayBuffer Objects</h1>\n\n      <div id=\"excluded-sec-allocatearraybuffer\"><h1><span class=\"secnum\">24.1.2.1</span>#sec-allocatearraybuffer AllocateArrayBuffer ( constructor, byteLength )</h1>...</div><div id=\"excluded-sec-isdetachedbuffer\"><h1><span class=\"secnum\">24.1.2.2</span>#sec-isdetachedbuffer IsDetachedBuffer ( arrayBuffer )</h1>...</div><div id=\"excluded-sec-detacharraybuffer\"><h1><span class=\"secnum\">24.1.2.3</span>#sec-detacharraybuffer DetachArrayBuffer ( arrayBuffer [ , key ] )</h1>...</div><div id=\"excluded-sec-clonearraybuffer\"><h1><span class=\"secnum\">24.1.2.4</span>#sec-clonearraybuffer CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength, cloneConstructor )</h1>...</div><div id=\"excluded-sec-isunsignedelementtype\"><h1><span class=\"secnum\">24.1.2.5</span>#sec-isunsignedelementtype IsUnsignedElementType ( type )</h1>...</div><div id=\"excluded-sec-isunclampedintegerelementtype\"><h1><span class=\"secnum\">24.1.2.6</span>#sec-isunclampedintegerelementtype IsUnclampedIntegerElementType ( type )</h1>...</div><div id=\"excluded-sec-isbigintelementtype\"><h1><span class=\"secnum\">24.1.2.7</span>#sec-isbigintelementtype IsBigIntElementType ( type )</h1>...</div><div id=\"excluded-sec-isnotearconfiguration\"><h1><span class=\"secnum\">24.1.2.8</span>#sec-isnotearconfiguration IsNoTearConfiguration ( type, order )</h1>...</div><div id=\"excluded-sec-rawbytestonumeric\"><h1><span class=\"secnum\">24.1.2.9</span>#sec-rawbytestonumeric RawBytesToNumeric ( type, rawBytes, isLittleEndian )</h1>...</div><div id=\"excluded-sec-getvaluefrombuffer\"><h1><span class=\"secnum\">24.1.2.10</span>#sec-getvaluefrombuffer GetValueFromBuffer ( arrayBuffer, byteIndex, type, isTypedArray, order [ , isLittleEndian ] )</h1>...</div><div id=\"excluded-sec-numerictorawbytes\"><h1><span class=\"secnum\">24.1.2.11</span>#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )</h1>...</div><div id=\"excluded-sec-setvalueinbuffer\"><h1><span class=\"secnum\">24.1.2.12</span>#sec-setvalueinbuffer SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )</h1>...</div><div id=\"excluded-sec-getmodifysetvalueinbuffer\"><h1><span class=\"secnum\">24.1.2.13</span>#sec-getmodifysetvalueinbuffer GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )</h1>...</div></emu-clause>\n\n    "}}, "figData": {"table-the-typedarray-constructors": "Table 61", "table-readsharedmemory-fields": "Table 79", "table-writesharedmemory-fields": "Table 80", "table-rmwsharedmemory-fields": "Table 81", "table-candidate-execution-records": "Table 84"}}}