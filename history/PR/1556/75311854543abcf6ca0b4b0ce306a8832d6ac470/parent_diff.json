{"from": {"secList": ["sec-integer-indexed-exotic-objects-set-p-v-receiver", "sec-integerindexedelementset"], "secData": {"sec-integer-indexed-exotic-objects-set-p-v-receiver": {"num": "10.4.5.5", "title": "#sec-integer-indexed-exotic-objects-set-p-v-receiver [[Set]] ( P, V, Receiver )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-set-p-v-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-set-p-v-receiver\">#sec-integer-indexed-exotic-objects-set-p-v-receiver</span> [[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h1>\n        <p>The [[Set]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"IntegerIndexedElementSet\"><a href=\"#sec-integerindexedelementset\">IntegerIndexedElementSet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>, <var>V</var>).</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"OrdinarySet\"><a href=\"#sec-ordinaryset\">OrdinarySet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-integerindexedelementset": {"num": "10.4.5.11", "title": "#sec-integerindexedelementset IntegerIndexedElementSet ( O, index, value )", "html": "<emu-clause id=\"sec-integerindexedelementset\" aoid=\"IntegerIndexedElementSet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integerindexedelementset\">#sec-integerindexedelementset</span> IntegerIndexedElementSet ( <var>O</var>, <var>index</var>, <var>value</var> )</h1>\n        <p>The abstract operation IntegerIndexedElementSet takes arguments <var>O</var>, <var>index</var> (a Number), and <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li>If <var>O</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>If !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>index</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]], <var>indexedPosition</var>, <var>elementType</var>, <var>numValue</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This operation always appears to succeed, but it has no effect when attempting to write past the end of a TypedArray or to a TypedArray which is backed by a detached ArrayBuffer.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {"table-the-typedarray-constructors": "Table 60"}}, "to": {"secList": ["sec-integer-indexed-exotic-objects-set-p-v-receiver", "sec-integerindexedelementset"], "secData": {"sec-integer-indexed-exotic-objects-set-p-v-receiver": {"num": "10.4.5.5", "title": "#sec-integer-indexed-exotic-objects-set-p-v-receiver [[Set]] ( P, V, Receiver )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-set-p-v-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-set-p-v-receiver\">#sec-integer-indexed-exotic-objects-set-p-v-receiver</span> [[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h1>\n        <p>The [[Set]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>If !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>numericIndex</var>) is <emu-val>false</emu-val>, return <emu-val>true</emu-val>.</li><li>If !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>O</var>, <var>Receiver</var>) is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"IntegerIndexedElementSet\"><a href=\"#sec-integerindexedelementset\">IntegerIndexedElementSet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>, <var>V</var>).</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"OrdinarySet\"><a href=\"#sec-ordinaryset\">OrdinarySet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-integerindexedelementset": {"num": "10.4.5.11", "title": "#sec-integerindexedelementset IntegerIndexedElementSet ( O, index, value )", "html": "<emu-clause id=\"sec-integerindexedelementset\" aoid=\"IntegerIndexedElementSet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integerindexedelementset\">#sec-integerindexedelementset</span> IntegerIndexedElementSet ( <var>O</var>, <var>index</var>, <var>value</var> )</h1>\n        <p>The abstract operation IntegerIndexedElementSet takes arguments <var>O</var>, <var>index</var> (a Number), and <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>index</var>) is <emu-val>true</emu-val>.</li><li>If <var>O</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]], <var>indexedPosition</var>, <var>elementType</var>, <var>numValue</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This operation always appears to succeed, but it has no effect when attempting to write past the end of a TypedArray or to a TypedArray which is backed by a detached ArrayBuffer.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {"table-the-typedarray-constructors": "Table 60"}}}