{"from": {"secList": ["sec-asyncgeneratorresolve", "sec-number.prototype.toprecision", "sec-array.prototype.concat", "sec-%foriniteratorprototype%.next", "sec-asyncgeneratorreject", "sec-array.prototype.unshift", "sec-array.prototype.splice", "sec-number.prototype.toexponential", "sec-string.prototype.concat", "sec-number.prototype.tofixed", "sec-array.prototype.push"], "secData": {"sec-asyncgeneratorresolve": {"num": "26.5.3.3", "title": "#sec-asyncgeneratorresolve AsyncGeneratorResolve ( generator, value, done )", "html": "<emu-clause id=\"sec-asyncgeneratorresolve\" aoid=\"AsyncGeneratorResolve\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorresolve\">#sec-asyncgeneratorresolve</span> AsyncGeneratorResolve ( <var>generator</var>, <var>value</var>, <var>done</var> )</h1>\n        <p>The abstract operation AsyncGeneratorResolve takes arguments <var>generator</var>, <var>value</var>, and <var>done</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>queue</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Remove the first element from <var>queue</var> and let <var>next</var> be the value of that element.</li><li>Let <var>promiseCapability</var> be <var>next</var>.[[Capability]].</li><li>Let <var>iteratorResult</var> be !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <var>done</var>).</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>iteratorResult</var> &#187;).</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref>(<var>generator</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-number.prototype.toprecision": {"num": "20.1.3.5", "title": "#sec-number.prototype.toprecision Number.prototype.toPrecision ( precision )", "html": "<emu-clause id=\"sec-number.prototype.toprecision\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.toprecision\">#sec-number.prototype.toprecision</span> Number.prototype.toPrecision ( <var>precision</var> )</h1>\n        <p>Return a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented either in decimal exponential notation with one digit before the significand's decimal point and <emu-eqn class=\"inline\"><var>precision</var> - 1</emu-eqn> digits after the significand's decimal point or in decimal fixed notation with <var>precision</var> significant digits. If <var>precision</var> is <emu-val>undefined</emu-val>, call <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> instead. Specifically, perform the following steps:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>precision</var> is <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Let <var>p</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>precision</var>).</li><li>If <var>x</var> is not finite, return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>x</var>).</li><li>If <var>p</var> &lt; 1 or <var>p</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> = 0, then<ol><li>Let <var>m</var> be the String value consisting of <var>p</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Let <var>e</var> be 0.</li></ol></li><li>Else,<ol><li>Let <var>e</var> and <var>n</var> be integers such that 10<sup><var>p</var> - 1</sup> &#8804; <var>n</var> &lt; 10<sup><var>p</var></sup> and for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>p</var>) + 1<sub>&#8477;</sub></sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such sets of <var>e</var> and <var>n</var>, pick the <var>e</var> and <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>p</var>) + 1<sub>&#8477;</sub></sup> is larger.</li><li>Let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li>If <var>e</var> &lt; -6 or <var>e</var> &#8805; <var>p</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &#8800; 0.</li><li>If <var>p</var> &#8800; 1, then<ol><li>Let <var>a</var> be the first code unit of <var>m</var>, and let <var>b</var> be the remaining <var>p</var> - 1 code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li><li>If <var>e</var> &gt; 0, then<ol><li>Let <var>c</var> be the code unit 0x002B (PLUS SIGN).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &lt; 0.</li><li>Let <var>c</var> be the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>e</var> to -<var>e</var>.</li></ol></li><li>Let <var>d</var> be the String value consisting of the digits of the decimal representation of <var>e</var> (in order, with no leading zeroes).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var>, <var>m</var>, the code unit 0x0065 (LATIN SMALL LETTER E), <var>c</var>, and <var>d</var>.</li></ol></li></ol></li><li>If <var>e</var> = <var>p</var> - 1, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li><li>If <var>e</var> &#8805; 0, then<ol><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of the first <var>e</var> + 1 code units of <var>m</var>, the code unit 0x002E (FULL STOP), and the remaining <var>p</var> - (<var>e</var> + 1) code units of <var>m</var>.</li></ol></li><li>Else,<ol><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(<var>e</var> + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String <var>m</var>.</li></ol></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.concat": {"num": "22.1.3.1", "title": "#sec-array.prototype.concat Array.prototype.concat ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.concat\">#sec-array.prototype.concat</span> Array.prototype.concat ( ...<var>items</var> )</h1>\n        <p>When the <code>concat</code> method is called with zero or more arguments, it returns an array containing the array elements of the object followed by the array elements of each argument in order.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Let <var>n</var> be 0.</li><li>Prepend <var>O</var> to <var>items</var>.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of the element.</li><li>Let <var>spreadable</var> be ?&#160;<emu-xref aoid=\"IsConcatSpreadable\"><a href=\"#sec-isconcatspreadable\">IsConcatSpreadable</a></emu-xref>(<var>E</var>).</li><li>If <var>spreadable</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>k</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>E</var>).</li><li>If <var>n</var> + <var>len</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>P</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>exists</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>subElement</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>subElement</var>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>NOTE: <var>E</var> is added as a single item rather than spread.</li><li>If <var>n</var> &#8805; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>E</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li id=\"step-array-proto-concat-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>n</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property in step <emu-xref href=\"#step-array-proto-concat-set-length\"><a href=\"#step-array-proto-concat-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-concat-set-length\">#step-array-proto-concat-set-length</a></emu-xref> is necessary to ensure that its value is correct in situations where the trailing elements of the result Array are not present.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-isconcatspreadable\"><h1><span class=\"secnum\">22.1.3.1.1</span>#sec-isconcatspreadable Runtime Semantics: IsConcatSpreadable ( O )</h1>...</div></emu-clause>\n\n      "}, "sec-%foriniteratorprototype%.next": {"num": "13.7.5.16.2.1", "title": "#sec-%foriniteratorprototype%.next %ForInIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%foriniteratorprototype%.next\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</span> %ForInIteratorPrototype%.next ( )</h1>\n            <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has all of the internal slots of a For-In Iterator Instance (<emu-xref href=\"#sec-properties-of-for-in-iterator-instances\"><a href=\"#sec-properties-of-for-in-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-for-in-iterator-instances\">#sec-properties-of-for-in-iterator-instances</a></emu-xref>).</li><li>Let <var>object</var> be <var>O</var>.[[Object]].</li><li>Let <var>visited</var> be <var>O</var>.[[VisitedKeys]].</li><li>Let <var>remaining</var> be <var>O</var>.[[RemainingKeys]].</li><li>Repeat,<ol><li>If <var>O</var>.[[ObjectWasVisited]] is <emu-val>false</emu-val>, then<ol><li>Let <var>keys</var> be ? <var>object</var>.[[OwnPropertyKeys]]().</li><li>For each <var>key</var> of <var>keys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Append <var>key</var> to <var>remaining</var>.</li></ol></li></ol></li><li>Set <var>O</var>.[[ObjectWasVisited]] to <emu-val>true</emu-val>.</li></ol></li><li>Repeat, while <var>remaining</var> is not empty,<ol><li>Remove the first element from <var>remaining</var> and let <var>r</var> be the value of the element.</li><li>If there does not exist an element <var>v</var> of <var>visited</var> such that <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>r</var>, <var>v</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>object</var>.[[GetOwnProperty]](<var>r</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val>, then<ol><li>Append <var>r</var> to <var>visited</var>.</li><li>If <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>r</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>Set <var>object</var> to ? <var>object</var>.[[GetPrototypeOf]]().</li><li>Set <var>O</var>.[[Object]] to <var>object</var>.</li><li>Set <var>O</var>.[[ObjectWasVisited]] to <emu-val>false</emu-val>.</li><li>If <var>object</var> is <emu-val>null</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-asyncgeneratorreject": {"num": "26.5.3.4", "title": "#sec-asyncgeneratorreject AsyncGeneratorReject ( generator, exception )", "html": "<emu-clause id=\"sec-asyncgeneratorreject\" aoid=\"AsyncGeneratorReject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorreject\">#sec-asyncgeneratorreject</span> AsyncGeneratorReject ( <var>generator</var>, <var>exception</var> )</h1>\n        <p>The abstract operation AsyncGeneratorReject takes arguments <var>generator</var> and <var>exception</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>queue</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Remove the first element from <var>queue</var> and let <var>next</var> be the value of that element.</li><li>Let <var>promiseCapability</var> be <var>next</var>.[[Capability]].</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>exception</var> &#187;).</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref>(<var>generator</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.unshift": {"num": "22.1.3.31", "title": "#sec-array.prototype.unshift Array.prototype.unshift ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.unshift\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.unshift\">#sec-array.prototype.unshift</span> Array.prototype.unshift ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are prepended to the start of the array, such that their order within the array is the same as the order in which they appear in the argument list.</p>\n        </div></emu-note>\n        <p>When the <code>unshift</code> method is called with zero or more arguments <var>item1</var>, <var>item2</var>, etc., the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>argCount</var> be the number of elements in <var>items</var>.</li><li>If <var>argCount</var> &gt; 0, then<ol><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; 0,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>argCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Let <var>j</var> be 0.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of that element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>j</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> + <var>argCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var> + <var>argCount</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>unshift</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>unshift</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.splice": {"num": "22.1.3.28", "title": "#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )", "html": "<emu-clause id=\"sec-array.prototype.splice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.splice\">#sec-array.prototype.splice</span> Array.prototype.splice ( <var>start</var>, <var>deleteCount</var>, ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>splice</code> method is called with two or more arguments <var>start</var>, <var>deleteCount</var> and zero or more <var>items</var>, the <var>deleteCount</var> elements of the array starting at <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> <var>start</var> are replaced by the elements of <var>items</var>. An Array object containing the deleted elements (if any) is returned.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>actualStart</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>actualStart</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>start</var> is not present, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be 0.</li></ol></li><li>Else if <var>deleteCount</var> is not present, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be <var>len</var> - <var>actualStart</var>.</li></ol></li><li>Else,<ol><li>Let <var>insertCount</var> be the number of elements in <var>items</var>.</li><li>Let <var>dc</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>deleteCount</var>).</li><li>Let <var>actualDeleteCount</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>dc</var>, 0), <var>len</var> - <var>actualStart</var>).</li></ol></li><li>If <var>len</var> + <var>insertCount</var> - <var>actualDeleteCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>actualDeleteCount</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>actualDeleteCount</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>actualStart</var> + <var>k</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>fromValue</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>actualDeleteCount</var>, <emu-val>true</emu-val>).</li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li>If <var>itemCount</var> &lt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>k</var> &lt; (<var>len</var> - <var>actualDeleteCount</var>),<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var>).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Set <var>k</var> to <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; (<var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>),<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1)).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Else if <var>itemCount</var> &gt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to (<var>len</var> - <var>actualDeleteCount</var>).</li><li>Repeat, while <var>k</var> &gt; <var>actualStart</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of that element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li id=\"step-array-proto-splice-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property of the result Array in step <emu-xref href=\"#step-array-proto-splice-set-length\"><a href=\"#step-array-proto-splice-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-splice-set-length\">#step-array-proto-splice-set-length</a></emu-xref> was necessary in previous editions of ECMAScript to ensure that its length was correct in situations where the trailing elements of the result Array were not present. Setting <emu-val>\"length\"</emu-val> became unnecessary starting in ES2015 when the result Array was initialized to its proper length rather than an empty Array but is carried forward to preserve backward compatibility.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>splice</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.toexponential": {"num": "20.1.3.2", "title": "#sec-number.prototype.toexponential Number.prototype.toExponential ( fractionDigits )", "html": "<emu-clause id=\"sec-number.prototype.toexponential\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.toexponential\">#sec-number.prototype.toexponential</span> Number.prototype.toExponential ( <var>fractionDigits</var> )</h1>\n        <p>Return a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented in decimal exponential notation with one digit before the significand's decimal point and <var>fractionDigits</var> digits after the significand's decimal point. If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, include as many significand digits as necessary to uniquely specify the Number (just like in <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> except that in this case the Number is always output in exponential notation). Specifically, perform the following steps:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>f</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fractionDigits</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, then <var>f</var> is 0.</li><li>If <var>x</var> is not finite, return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>x</var>).</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to <emu-val>\"-\"</emu-val>.</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> = 0, then<ol><li>Let <var>m</var> be the String value consisting of <var>f</var> + 1 occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Let <var>e</var> be 0.</li></ol></li><li>Else,<ol><li>If <var>fractionDigits</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>e</var> and <var>n</var> be integers such that 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup> and for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>)</sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such sets of <var>e</var> and <var>n</var>, pick the <var>e</var> and <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is larger.</li></ol></li><li>Else,<ol><li id=\"step-number-proto-toexponential-intermediate-values\">Let <var>e</var>, <var>n</var>, and <var>f</var> be integers such that <var>f</var> &#8805; 0, 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is <var>x</var>, and <var>f</var> is as small as possible. Note that the decimal representation of <var>n</var> has <var>f</var> + 1<sub>&#8477;</sub> digits, <var>n</var> is not divisible by 10, and the least significant digit of <var>n</var> is not necessarily uniquely determined by these criteria.</li></ol></li><li>Let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li></ol></li><li>If <var>f</var> &#8800; 0, then<ol><li>Let <var>a</var> be the first code unit of <var>m</var>, and let <var>b</var> be the remaining <var>f</var> code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li><li>If <var>e</var> = 0, then<ol><li>Let <var>c</var> be <emu-val>\"+\"</emu-val>.</li><li>Let <var>d</var> be <emu-val>\"0\"</emu-val>.</li></ol></li><li>Else,<ol><li>If <var>e</var> &gt; 0, let <var>c</var> be <emu-val>\"+\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &lt; 0.</li><li>Let <var>c</var> be <emu-val>\"-\"</emu-val>.</li><li>Set <var>e</var> to -<var>e</var>.</li></ol></li><li>Let <var>d</var> be the String value consisting of the digits of the decimal representation of <var>e</var> (in order, with no leading zeroes).</li></ol></li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>m</var>, <emu-val>\"e\"</emu-val>, <var>c</var>, and <var>d</var>.</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step <emu-xref href=\"#step-number-proto-toexponential-intermediate-values\"><a href=\"#step-number-proto-toexponential-intermediate-values\">9.b.i</a></emu-xref> be used as a guideline:</p>\n          <emu-alg replaces-step=\"step-number-proto-toexponential-intermediate-values\"><ol start=\"1\" class=\"nested-twice\"><li>Let <var>e</var>, <var>n</var>, and <var>f</var> be integers such that <var>f</var> &#8805; 0, 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is <var>x</var>, and <var>f</var> is as small as possible. If there are multiple possibilities for <var>n</var>, choose the value of <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is closest in value to <var>x</var>. If there are two such possible values of <var>n</var>, choose the one that is even.</li></ol></emu-alg>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.concat": {"num": "21.1.3.4", "title": "#sec-string.prototype.concat String.prototype.concat ( ...args )", "html": "<emu-clause id=\"sec-string.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.concat\">#sec-string.prototype.concat</span> String.prototype.concat ( ...<var>args</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>concat</code> method is called it returns the String value consisting of the code units of the <emu-val>this</emu-val> value (converted to a String) followed by the code units of each of the arguments converted to a String. The result is a String value, not a String object.</p>\n        </div></emu-note>\n        <p>When the <code>concat</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>R</var> be <var>S</var>.</li><li>Repeat, while <var>args</var> is not empty,<ol><li>Remove the first element from <var>args</var> and let <var>next</var> be the value of that element.</li><li>Let <var>nextString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>next</var>).</li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>nextString</var>.</li></ol></li><li>Return <var>R</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.tofixed": {"num": "20.1.3.3", "title": "#sec-number.prototype.tofixed Number.prototype.toFixed ( fractionDigits )", "html": "<emu-clause id=\"sec-number.prototype.tofixed\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.tofixed\">#sec-number.prototype.tofixed</span> Number.prototype.toFixed ( <var>fractionDigits</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>toFixed</code> returns a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented in decimal fixed-point notation with <var>fractionDigits</var> digits after the decimal point. If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, 0 is assumed.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>f</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fractionDigits</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, then <var>f</var> is 0.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>x</var> is not finite, return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>x</var>).</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to <emu-val>\"-\"</emu-val>.</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> &#8805; 10<sup>21</sup>, then<ol><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li></ol></li><li>Else,<ol><li>Let <var>n</var> be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#247; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such <var>n</var>, pick the larger <var>n</var>.</li><li>If <var>n</var> = 0, let <var>m</var> be the String <emu-val>\"0\"</emu-val>. Otherwise, let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li>If <var>f</var> &#8800; 0, then<ol><li>Let <var>k</var> be the length of <var>m</var>.</li><li>If <var>k</var> &#8804; <var>f</var>, then<ol><li>Let <var>z</var> be the String value consisting of <var>f</var> + 1 - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>z</var> and <var>m</var>.</li><li>Set <var>k</var> to <var>f</var> + 1.</li></ol></li><li>Let <var>a</var> be the first <var>k</var> - <var>f</var> code units of <var>m</var>, and let <var>b</var> be the remaining <var>f</var> code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li></ol></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The output of <code>toFixed</code> may be more precise than <code>toString</code> for some values because toString only prints enough significant digits to distinguish the number from adjacent number values. For example,</p>\n          <p><code>(1000000000000000128).toString()</code> returns <emu-val>\"1000000000000000100\"</emu-val>, while\n            <br>\n            <code>(1000000000000000128).toFixed(0)</code> returns <emu-val>\"1000000000000000128\"</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.push": {"num": "22.1.3.20", "title": "#sec-array.prototype.push Array.prototype.push ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.push\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.push\">#sec-array.prototype.push</span> Array.prototype.push ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are appended to the end of the array, in the order in which they appear. The new length of the array is returned as the result of the call.</p>\n        </div></emu-note>\n        <p>When the <code>push</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>argCount</var> be the number of elements in <var>items</var>.</li><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of the element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>len</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>len</var> to <var>len</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>push</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>push</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-asyncgeneratorresolve", "sec-number.prototype.toprecision", "sec-array.prototype.concat", "sec-%foriniteratorprototype%.next", "sec-asyncgeneratorreject", "sec-array.prototype.unshift", "sec-array.prototype.splice", "sec-number.prototype.toexponential", "sec-string.prototype.concat", "sec-number.prototype.tofixed", "sec-array.prototype.push"], "secData": {"sec-asyncgeneratorresolve": {"num": "26.5.3.3", "title": "#sec-asyncgeneratorresolve AsyncGeneratorResolve ( generator, value, done )", "html": "<emu-clause id=\"sec-asyncgeneratorresolve\" aoid=\"AsyncGeneratorResolve\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorresolve\">#sec-asyncgeneratorresolve</span> AsyncGeneratorResolve ( <var>generator</var>, <var>value</var>, <var>done</var> )</h1>\n        <p>The abstract operation AsyncGeneratorResolve takes arguments <var>generator</var>, <var>value</var>, and <var>done</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>queue</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>next</var> be the first element of <var>queue</var>.</li><li>Remove the first element from <var>queue</var>.</li><li>Let <var>promiseCapability</var> be <var>next</var>.[[Capability]].</li><li>Let <var>iteratorResult</var> be !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <var>done</var>).</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>iteratorResult</var> &#187;).</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref>(<var>generator</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-number.prototype.toprecision": {"num": "20.1.3.5", "title": "#sec-number.prototype.toprecision Number.prototype.toPrecision ( precision )", "html": "<emu-clause id=\"sec-number.prototype.toprecision\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.toprecision\">#sec-number.prototype.toprecision</span> Number.prototype.toPrecision ( <var>precision</var> )</h1>\n        <p>Return a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented either in decimal exponential notation with one digit before the significand's decimal point and <emu-eqn class=\"inline\"><var>precision</var> - 1</emu-eqn> digits after the significand's decimal point or in decimal fixed notation with <var>precision</var> significant digits. If <var>precision</var> is <emu-val>undefined</emu-val>, call <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> instead. Specifically, perform the following steps:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>precision</var> is <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Let <var>p</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>precision</var>).</li><li>If <var>x</var> is not finite, return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>x</var>).</li><li>If <var>p</var> &lt; 1 or <var>p</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> = 0, then<ol><li>Let <var>m</var> be the String value consisting of <var>p</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Let <var>e</var> be 0.</li></ol></li><li>Else,<ol><li>Let <var>e</var> and <var>n</var> be integers such that 10<sup><var>p</var> - 1</sup> &#8804; <var>n</var> &lt; 10<sup><var>p</var></sup> and for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>p</var>) + 1<sub>&#8477;</sub></sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such sets of <var>e</var> and <var>n</var>, pick the <var>e</var> and <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>p</var>) + 1<sub>&#8477;</sub></sup> is larger.</li><li>Let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li>If <var>e</var> &lt; -6 or <var>e</var> &#8805; <var>p</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &#8800; 0.</li><li>If <var>p</var> &#8800; 1, then<ol><li>Let <var>a</var> be the first code unit of <var>m</var>.</li><li>Let <var>b</var> be the other <var>p</var> - 1 code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li><li>If <var>e</var> &gt; 0, then<ol><li>Let <var>c</var> be the code unit 0x002B (PLUS SIGN).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &lt; 0.</li><li>Let <var>c</var> be the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>e</var> to -<var>e</var>.</li></ol></li><li>Let <var>d</var> be the String value consisting of the digits of the decimal representation of <var>e</var> (in order, with no leading zeroes).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var>, <var>m</var>, the code unit 0x0065 (LATIN SMALL LETTER E), <var>c</var>, and <var>d</var>.</li></ol></li></ol></li><li>If <var>e</var> = <var>p</var> - 1, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li><li>If <var>e</var> &#8805; 0, then<ol><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of the first <var>e</var> + 1 code units of <var>m</var>, the code unit 0x002E (FULL STOP), and the remaining <var>p</var> - (<var>e</var> + 1) code units of <var>m</var>.</li></ol></li><li>Else,<ol><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(<var>e</var> + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String <var>m</var>.</li></ol></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.concat": {"num": "22.1.3.1", "title": "#sec-array.prototype.concat Array.prototype.concat ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.concat\">#sec-array.prototype.concat</span> Array.prototype.concat ( ...<var>items</var> )</h1>\n        <p>When the <code>concat</code> method is called with zero or more arguments, it returns an array containing the array elements of the object followed by the array elements of each argument in order.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Let <var>n</var> be 0.</li><li>Prepend <var>O</var> to <var>items</var>.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Let <var>E</var> be the first element of <var>items</var>.</li><li>Remove the first element from <var>items</var>.</li><li>Let <var>spreadable</var> be ?&#160;<emu-xref aoid=\"IsConcatSpreadable\"><a href=\"#sec-isconcatspreadable\">IsConcatSpreadable</a></emu-xref>(<var>E</var>).</li><li>If <var>spreadable</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>k</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>E</var>).</li><li>If <var>n</var> + <var>len</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>P</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>exists</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>subElement</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>subElement</var>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>NOTE: <var>E</var> is added as a single item rather than spread.</li><li>If <var>n</var> &#8805; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>E</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li id=\"step-array-proto-concat-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>n</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property in step <emu-xref href=\"#step-array-proto-concat-set-length\"><a href=\"#step-array-proto-concat-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-concat-set-length\">#step-array-proto-concat-set-length</a></emu-xref> is necessary to ensure that its value is correct in situations where the trailing elements of the result Array are not present.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-isconcatspreadable\"><h1><span class=\"secnum\">22.1.3.1.1</span>#sec-isconcatspreadable Runtime Semantics: IsConcatSpreadable ( O )</h1>...</div></emu-clause>\n\n      "}, "sec-%foriniteratorprototype%.next": {"num": "13.7.5.16.2.1", "title": "#sec-%foriniteratorprototype%.next %ForInIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%foriniteratorprototype%.next\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</span> %ForInIteratorPrototype%.next ( )</h1>\n            <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has all of the internal slots of a For-In Iterator Instance (<emu-xref href=\"#sec-properties-of-for-in-iterator-instances\"><a href=\"#sec-properties-of-for-in-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-for-in-iterator-instances\">#sec-properties-of-for-in-iterator-instances</a></emu-xref>).</li><li>Let <var>object</var> be <var>O</var>.[[Object]].</li><li>Let <var>visited</var> be <var>O</var>.[[VisitedKeys]].</li><li>Let <var>remaining</var> be <var>O</var>.[[RemainingKeys]].</li><li>Repeat,<ol><li>If <var>O</var>.[[ObjectWasVisited]] is <emu-val>false</emu-val>, then<ol><li>Let <var>keys</var> be ? <var>object</var>.[[OwnPropertyKeys]]().</li><li>For each <var>key</var> of <var>keys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Append <var>key</var> to <var>remaining</var>.</li></ol></li></ol></li><li>Set <var>O</var>.[[ObjectWasVisited]] to <emu-val>true</emu-val>.</li></ol></li><li>Repeat, while <var>remaining</var> is not empty,<ol><li>Let <var>r</var> be the first element of <var>remaining</var>.</li><li>Remove the first element from <var>remaining</var>.</li><li>If there does not exist an element <var>v</var> of <var>visited</var> such that <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>r</var>, <var>v</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>object</var>.[[GetOwnProperty]](<var>r</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val>, then<ol><li>Append <var>r</var> to <var>visited</var>.</li><li>If <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>r</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>Set <var>object</var> to ? <var>object</var>.[[GetPrototypeOf]]().</li><li>Set <var>O</var>.[[Object]] to <var>object</var>.</li><li>Set <var>O</var>.[[ObjectWasVisited]] to <emu-val>false</emu-val>.</li><li>If <var>object</var> is <emu-val>null</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-asyncgeneratorreject": {"num": "26.5.3.4", "title": "#sec-asyncgeneratorreject AsyncGeneratorReject ( generator, exception )", "html": "<emu-clause id=\"sec-asyncgeneratorreject\" aoid=\"AsyncGeneratorReject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorreject\">#sec-asyncgeneratorreject</span> AsyncGeneratorReject ( <var>generator</var>, <var>exception</var> )</h1>\n        <p>The abstract operation AsyncGeneratorReject takes arguments <var>generator</var> and <var>exception</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>queue</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>next</var> be the first element of <var>queue</var>.</li><li>Remove the first element from <var>queue</var>.</li><li>Let <var>promiseCapability</var> be <var>next</var>.[[Capability]].</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>exception</var> &#187;).</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref>(<var>generator</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.unshift": {"num": "22.1.3.31", "title": "#sec-array.prototype.unshift Array.prototype.unshift ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.unshift\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.unshift\">#sec-array.prototype.unshift</span> Array.prototype.unshift ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are prepended to the start of the array, such that their order within the array is the same as the order in which they appear in the argument list.</p>\n        </div></emu-note>\n        <p>When the <code>unshift</code> method is called with zero or more arguments <var>item1</var>, <var>item2</var>, etc., the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>argCount</var> be the number of elements in <var>items</var>.</li><li>If <var>argCount</var> &gt; 0, then<ol><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; 0,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>argCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Let <var>j</var> be 0.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Let <var>E</var> be the first element of <var>items</var>.</li><li>Remove the first element from <var>items</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>j</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> + <var>argCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var> + <var>argCount</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>unshift</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>unshift</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.splice": {"num": "22.1.3.28", "title": "#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )", "html": "<emu-clause id=\"sec-array.prototype.splice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.splice\">#sec-array.prototype.splice</span> Array.prototype.splice ( <var>start</var>, <var>deleteCount</var>, ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>splice</code> method is called with two or more arguments <var>start</var>, <var>deleteCount</var> and zero or more <var>items</var>, the <var>deleteCount</var> elements of the array starting at <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> <var>start</var> are replaced by the elements of <var>items</var>. An Array object containing the deleted elements (if any) is returned.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>actualStart</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>actualStart</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>start</var> is not present, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be 0.</li></ol></li><li>Else if <var>deleteCount</var> is not present, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be <var>len</var> - <var>actualStart</var>.</li></ol></li><li>Else,<ol><li>Let <var>insertCount</var> be the number of elements in <var>items</var>.</li><li>Let <var>dc</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>deleteCount</var>).</li><li>Let <var>actualDeleteCount</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>dc</var>, 0), <var>len</var> - <var>actualStart</var>).</li></ol></li><li>If <var>len</var> + <var>insertCount</var> - <var>actualDeleteCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>actualDeleteCount</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>actualDeleteCount</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>actualStart</var> + <var>k</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>fromValue</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>actualDeleteCount</var>, <emu-val>true</emu-val>).</li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li>If <var>itemCount</var> &lt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>k</var> &lt; (<var>len</var> - <var>actualDeleteCount</var>),<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var>).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Set <var>k</var> to <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; (<var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>),<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1)).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Else if <var>itemCount</var> &gt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to (<var>len</var> - <var>actualDeleteCount</var>).</li><li>Repeat, while <var>k</var> &gt; <var>actualStart</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Let <var>E</var> be the first element of <var>items</var>.</li><li>Remove the first element from <var>items</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li id=\"step-array-proto-splice-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property of the result Array in step <emu-xref href=\"#step-array-proto-splice-set-length\"><a href=\"#step-array-proto-splice-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-splice-set-length\">#step-array-proto-splice-set-length</a></emu-xref> was necessary in previous editions of ECMAScript to ensure that its length was correct in situations where the trailing elements of the result Array were not present. Setting <emu-val>\"length\"</emu-val> became unnecessary starting in ES2015 when the result Array was initialized to its proper length rather than an empty Array but is carried forward to preserve backward compatibility.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>splice</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.toexponential": {"num": "20.1.3.2", "title": "#sec-number.prototype.toexponential Number.prototype.toExponential ( fractionDigits )", "html": "<emu-clause id=\"sec-number.prototype.toexponential\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.toexponential\">#sec-number.prototype.toexponential</span> Number.prototype.toExponential ( <var>fractionDigits</var> )</h1>\n        <p>Return a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented in decimal exponential notation with one digit before the significand's decimal point and <var>fractionDigits</var> digits after the significand's decimal point. If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, include as many significand digits as necessary to uniquely specify the Number (just like in <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> except that in this case the Number is always output in exponential notation). Specifically, perform the following steps:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>f</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fractionDigits</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, then <var>f</var> is 0.</li><li>If <var>x</var> is not finite, return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>x</var>).</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to <emu-val>\"-\"</emu-val>.</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> = 0, then<ol><li>Let <var>m</var> be the String value consisting of <var>f</var> + 1 occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Let <var>e</var> be 0.</li></ol></li><li>Else,<ol><li>If <var>fractionDigits</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>e</var> and <var>n</var> be integers such that 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup> and for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>)</sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such sets of <var>e</var> and <var>n</var>, pick the <var>e</var> and <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is larger.</li></ol></li><li>Else,<ol><li id=\"step-number-proto-toexponential-intermediate-values\">Let <var>e</var>, <var>n</var>, and <var>f</var> be integers such that <var>f</var> &#8805; 0, 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is <var>x</var>, and <var>f</var> is as small as possible. Note that the decimal representation of <var>n</var> has <var>f</var> + 1<sub>&#8477;</sub> digits, <var>n</var> is not divisible by 10, and the least significant digit of <var>n</var> is not necessarily uniquely determined by these criteria.</li></ol></li><li>Let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li></ol></li><li>If <var>f</var> &#8800; 0, then<ol><li>Let <var>a</var> be the first code unit of <var>m</var>.</li><li>Let <var>b</var> be the other <var>f</var> code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li><li>If <var>e</var> = 0, then<ol><li>Let <var>c</var> be <emu-val>\"+\"</emu-val>.</li><li>Let <var>d</var> be <emu-val>\"0\"</emu-val>.</li></ol></li><li>Else,<ol><li>If <var>e</var> &gt; 0, let <var>c</var> be <emu-val>\"+\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &lt; 0.</li><li>Let <var>c</var> be <emu-val>\"-\"</emu-val>.</li><li>Set <var>e</var> to -<var>e</var>.</li></ol></li><li>Let <var>d</var> be the String value consisting of the digits of the decimal representation of <var>e</var> (in order, with no leading zeroes).</li></ol></li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>m</var>, <emu-val>\"e\"</emu-val>, <var>c</var>, and <var>d</var>.</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step <emu-xref href=\"#step-number-proto-toexponential-intermediate-values\"><a href=\"#step-number-proto-toexponential-intermediate-values\">9.b.i</a></emu-xref> be used as a guideline:</p>\n          <emu-alg replaces-step=\"step-number-proto-toexponential-intermediate-values\"><ol start=\"1\" class=\"nested-twice\"><li>Let <var>e</var>, <var>n</var>, and <var>f</var> be integers such that <var>f</var> &#8805; 0, 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is <var>x</var>, and <var>f</var> is as small as possible. If there are multiple possibilities for <var>n</var>, choose the value of <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is closest in value to <var>x</var>. If there are two such possible values of <var>n</var>, choose the one that is even.</li></ol></emu-alg>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.concat": {"num": "21.1.3.4", "title": "#sec-string.prototype.concat String.prototype.concat ( ...args )", "html": "<emu-clause id=\"sec-string.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.concat\">#sec-string.prototype.concat</span> String.prototype.concat ( ...<var>args</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>concat</code> method is called it returns the String value consisting of the code units of the <emu-val>this</emu-val> value (converted to a String) followed by the code units of each of the arguments converted to a String. The result is a String value, not a String object.</p>\n        </div></emu-note>\n        <p>When the <code>concat</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>R</var> be <var>S</var>.</li><li>Repeat, while <var>args</var> is not empty,<ol><li>Let <var>next</var> be the first element of <var>args</var>.</li><li>Remove the first element from <var>args</var>.</li><li>Let <var>nextString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>next</var>).</li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>nextString</var>.</li></ol></li><li>Return <var>R</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.tofixed": {"num": "20.1.3.3", "title": "#sec-number.prototype.tofixed Number.prototype.toFixed ( fractionDigits )", "html": "<emu-clause id=\"sec-number.prototype.tofixed\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.tofixed\">#sec-number.prototype.tofixed</span> Number.prototype.toFixed ( <var>fractionDigits</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>toFixed</code> returns a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented in decimal fixed-point notation with <var>fractionDigits</var> digits after the decimal point. If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, 0 is assumed.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>f</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fractionDigits</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, then <var>f</var> is 0.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>x</var> is not finite, return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>x</var>).</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to <emu-val>\"-\"</emu-val>.</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> &#8805; 10<sup>21</sup>, then<ol><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li></ol></li><li>Else,<ol><li>Let <var>n</var> be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#247; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such <var>n</var>, pick the larger <var>n</var>.</li><li>If <var>n</var> = 0, let <var>m</var> be the String <emu-val>\"0\"</emu-val>. Otherwise, let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li>If <var>f</var> &#8800; 0, then<ol><li>Let <var>k</var> be the length of <var>m</var>.</li><li>If <var>k</var> &#8804; <var>f</var>, then<ol><li>Let <var>z</var> be the String value consisting of <var>f</var> + 1 - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>z</var> and <var>m</var>.</li><li>Set <var>k</var> to <var>f</var> + 1.</li></ol></li><li>Let <var>a</var> be the first <var>k</var> - <var>f</var> code units of <var>m</var>.</li><li>Let <var>b</var> be the other <var>f</var> code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li></ol></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The output of <code>toFixed</code> may be more precise than <code>toString</code> for some values because toString only prints enough significant digits to distinguish the number from adjacent number values. For example,</p>\n          <p><code>(1000000000000000128).toString()</code> returns <emu-val>\"1000000000000000100\"</emu-val>, while\n            <br>\n            <code>(1000000000000000128).toFixed(0)</code> returns <emu-val>\"1000000000000000128\"</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.push": {"num": "22.1.3.20", "title": "#sec-array.prototype.push Array.prototype.push ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.push\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.push\">#sec-array.prototype.push</span> Array.prototype.push ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are appended to the end of the array, in the order in which they appear. The new length of the array is returned as the result of the call.</p>\n        </div></emu-note>\n        <p>When the <code>push</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>argCount</var> be the number of elements in <var>items</var>.</li><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Let <var>E</var> be the first element of <var>items</var>.</li><li>Remove the first element from <var>items</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>len</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>len</var> to <var>len</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>push</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>push</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}