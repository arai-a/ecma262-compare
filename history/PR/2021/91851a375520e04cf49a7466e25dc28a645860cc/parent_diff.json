{"from": {"secList": ["sec-string.prototype.replace", "sec-parseint-string-radix", "sec-getsubstitution", "sec-decode", "sec-string.prototype.slice", "sec-string.prototype.substr", "sec-regexp.prototype-@@replace", "sec-%stringiteratorprototype%.next"], "secData": {"sec-string.prototype.replace": {"num": "21.1.3.17", "title": "#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )", "html": "<emu-clause id=\"sec-string.prototype.replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.replace\">#sec-string.prototype.replace</span> String.prototype.replace ( <var>searchValue</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>replace</code> method is called with arguments <var>searchValue</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>searchValue</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>replacer</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>searchValue</var>, @@replace).</li><li>If <var>replacer</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replacer</var>, <var>searchValue</var>, &#171; <var>O</var>, <var>replaceValue</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchValue</var>).</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Search <var>string</var> for the first occurrence of <var>searchString</var> and let <var>pos</var> be the index within <var>string</var> of the first code unit of the matched substring and let <var>matched</var> be <var>searchString</var>. If no occurrences of <var>searchString</var> were found, return <var>string</var>.</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, &#171; <var>matched</var>, <var>pos</var>, <var>string</var> &#187;).</li><li>Let <var>replStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>replStr</var> be !&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>matched</var>, <var>string</var>, <var>pos</var>, <var>captures</var>, <emu-val>undefined</emu-val>, <var>replaceValue</var>).</li></ol></li><li>Let <var>tailPos</var> be <var>pos</var> + the number of code units in <var>matched</var>.</li><li>Let <var>newString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the first <var>pos</var> code units of <var>string</var>, <var>replStr</var>, and the trailing substring of <var>string</var> starting at index <var>tailPos</var>. If <var>pos</var> is 0, the first element of the concatenation will be the empty String.</li><li>Return <var>newString</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>replace</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-getsubstitution\"><h1><span class=\"secnum\">21.1.3.17.1</span>#sec-getsubstitution Runtime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )</h1>...</div></emu-clause>\n\n      "}, "sec-parseint-string-radix": {"num": "18.2.5", "title": "#sec-parseint-string-radix parseInt ( string, radix )", "html": "<emu-clause id=\"sec-parseint-string-radix\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parseint-string-radix\">#sec-parseint-string-radix</span> parseInt ( <var>string</var>, <var>radix</var> )</h1>\n      <p>The <code>parseInt</code> function produces an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value dictated by interpretation of the contents of the <var>string</var> argument according to the specified <var>radix</var>. Leading white space in <var>string</var> is ignored. If <var>radix</var> is <emu-val>undefined</emu-val> or 0, it is assumed to be 10 except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of 16 is assumed. If <var>radix</var> is 16, the number may also optionally begin with the code unit pairs <code>0x</code> or <code>0X</code>.</p>\n      <p>The <code>parseInt</code> function is the  <dfn>%parseInt%</dfn> intrinsic object. When the <code>parseInt</code> function is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <emu-const>start</emu-const>).</li><li>Let <var>sign</var> be 1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002D (HYPHEN-MINUS), set <var>sign</var> to -1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from <var>S</var>.</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>radix</var>).</li><li>Let <var>stripPrefix</var> be <emu-val>true</emu-val>.</li><li>If <var>R</var> &#8800; 0, then<ol><li>If <var>R</var> &lt; 2 or <var>R</var> &gt; 36, return <emu-val>NaN</emu-val>.</li><li>If <var>R</var> &#8800; 16, set <var>stripPrefix</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Set <var>R</var> to 10.</li></ol></li><li>If <var>stripPrefix</var> is <emu-val>true</emu-val>, then<ol><li>If the length of <var>S</var> is at least 2 and the first two code units of <var>S</var> are either <emu-val>\"0x\"</emu-val> or <emu-val>\"0X\"</emu-val>, then<ol><li>Remove the first two code units from <var>S</var>.</li><li>Set <var>R</var> to 16.</li></ol></li></ol></li><li>If <var>S</var> contains a code unit that is not a radix-<var>R</var> digit, let <var>Z</var> be the substring of <var>S</var> consisting of all code units before the first such code unit; otherwise, let <var>Z</var> be <var>S</var>.</li><li>If <var>Z</var> is empty, return <emu-val>NaN</emu-val>.</li><li>Let <var>mathInt</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation, using the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if <var>R</var> is 10 and <var>Z</var> contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if <var>R</var> is not 2, 4, 8, 10, 16, or 32, then <var>mathInt</var> may be an implementation-dependent approximation to the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation.)</li><li>If <var>mathInt</var> = 0<sub>&#8477;</sub>, then<ol><li>If <var>sign</var> = -1, return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Let <var>number</var> be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathInt</var>.</li><li>Return <var>sign</var> &#215; <var>number</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseInt</code> may interpret only a leading portion of <var>string</var> as an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value; it ignores any code units that cannot be interpreted as part of the notation of an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getsubstitution": {"num": "21.1.3.17.1", "title": "#sec-getsubstitution Runtime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )", "html": "<emu-clause id=\"sec-getsubstitution\" aoid=\"GetSubstitution\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getsubstitution\">#sec-getsubstitution</span> Runtime Semantics: GetSubstitution ( <var>matched</var>, <var>str</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, <var>replacement</var> )</h1>\n          <p>The abstract operation GetSubstitution takes arguments <var>matched</var>, <var>str</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, and <var>replacement</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>matched</var>) is String.</li><li>Let <var>matchLength</var> be the number of code units in <var>matched</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>stringLength</var> be the number of code units in <var>str</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>position</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>position</var> &#8804; <var>stringLength</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captures</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replacement</var>) is String.</li><li>Let <var>tailPos</var> be <var>position</var> + <var>matchLength</var>.</li><li>Let <var>m</var> be the number of elements in <var>captures</var>.</li><li>Let <var>result</var> be the String value derived from <var>replacement</var> by copying code unit elements from <var>replacement</var> to <var>result</var> while performing replacements as specified in <emu-xref href=\"#table-45\"><a href=\"#table-45\" class=\"excluded-xref\" excluded-id=\"table-45\">#table-45</a></emu-xref>. These <code>$</code> replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.</li><li>Return <var>result</var>.\n          </li></ol></emu-alg>\n          <emu-table id=\"table-45\" caption=\"Replacement Text Symbol Substitutions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-45\">#table-45</span>: Replacement Text Symbol Substitutions</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Code units\n                \n                </th>\n                <th>\n                  Unicode Characters\n                \n                </th>\n                <th>\n                  Replacement text\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0024\n                \n                </td>\n                <td>\n                  <code>$$</code>\n                \n                </td>\n                <td>\n                  <code>$</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0026\n                \n                </td>\n                <td>\n                  <code>$&amp;</code>\n                \n                </td>\n                <td>\n                  <var>matched</var>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0060\n                \n                </td>\n                <td>\n                  <code>$`</code>\n                </td>\n                <td>\n                  If <var>position</var> is 0, the replacement is the empty String. Otherwise the replacement is the substring of <var>str</var> that starts at index 0 and whose last code unit is at index <var>position</var> - 1.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0027\n                \n                </td>\n                <td>\n                  <code>$'</code>\n                \n                </td>\n                <td>\n                  If <var>tailPos</var> &#8805; <var>stringLength</var>, the replacement is the empty String. Otherwise the replacement is the substring of <var>str</var> that starts at index <var>tailPos</var> and continues to the end of <var>str</var>.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N\n                  \n                  <br>\n                  Where\n                  \n                  <br>\n                  0x0031 &#8804; N &#8804; 0x0039\n                \n                </td>\n                <td>\n                  <code>$n</code> where\n                  \n                  <br>\n                  <code>n</code> is one of <code>1 2 3 4 5 6 7 8 9</code> and <code>$n</code> is not followed by a decimal digit\n                \n                </td>\n                <td>\n                  The <var>n</var><sup>th</sup> element of <var>captures</var>, where <var>n</var> is a single digit in the range 1 to 9. If <var>n</var> &#8804; <var>m</var> and the <var>n</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>n</var> &gt; <var>m</var>, no replacement is done.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N, N\n                  \n                  <br>\n                  Where\n                  \n                  <br>\n                  0x0030 &#8804; N &#8804; 0x0039\n                \n                </td>\n                <td>\n                  <code>$nn</code> where\n                  \n                  <br>\n                  <code>n</code> is one of <code>0 1 2 3 4 5 6 7 8 9</code>\n                \n                </td>\n                <td>\n                  The <var>nn</var><sup>th</sup> element of <var>captures</var>, where <var>nn</var> is a two-digit decimal number in the range 01 to 99. If <var>nn</var> &#8804; <var>m</var> and the <var>nn</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>nn</var> is 00 or <var>nn</var> &gt; <var>m</var>, no replacement is done.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x003C\n                \n                </td>\n                <td>\n                  <code>$&lt;</code>\n                \n                </td>\n                <td>\n                  <emu-alg><ol><li>If <var>namedCaptures</var> is <emu-val>undefined</emu-val>, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>namedCaptures</var>) is Object.</li><li>Scan until the next <code>&gt;</code> U+003E (GREATER-THAN SIGN).</li><li>If none is found, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li>Let <var>groupName</var> be the enclosed substring.</li><li>Let <var>capture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>namedCaptures</var>, <var>groupName</var>).</li><li>If <var>capture</var> is <emu-val>undefined</emu-val>, replace the text through <code>&gt;</code> with the empty String.</li><li>Otherwise, replace the text through <code>&gt;</code> with ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>capture</var>).\n                  </li></ol></li></ol></li></ol></emu-alg>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024\n                \n                </td>\n                <td>\n                  <code>$</code> in any context that does not match any of the above.\n                \n                </td>\n                <td>\n                  <code>$</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-decode": {"num": "18.2.6.1.2", "title": "#sec-decode Runtime Semantics: Decode ( string, reservedSet )", "html": "<emu-clause id=\"sec-decode\" aoid=\"Decode\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-decode\">#sec-decode</span> Runtime Semantics: Decode ( <var>string</var>, <var>reservedSet</var> )</h1>\n          <p>The abstract operation Decode takes arguments <var>string</var> (a String) and <var>reservedSet</var> (a String). It performs URI unescaping and decoding. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>strLen</var> be the number of code units in <var>string</var>.</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> equals <var>strLen</var>, return <var>R</var>.</li><li>Let <var>C</var> be the code unit at index <var>k</var> within <var>string</var>.</li><li>If <var>C</var> is not the code unit 0x0025 (PERCENT SIGN), then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>start</var> be <var>k</var>.</li><li>If <var>k</var> + 2 is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>If the most significant bit in <var>B</var> is 0, then<ol><li>Let <var>C</var> be the code unit whose value is <var>B</var>.</li><li>If <var>C</var> is not in <var>reservedSet</var>, then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>S</var> be the substring of <var>string</var> from index <var>start</var> to index <var>k</var> inclusive.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: the most significant bit in <var>B</var> is 1.</li><li>Let <var>n</var> be the smallest nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that (<var>B</var> &lt;&lt; <var>n</var>) &amp; 0x80 is equal to 0.</li><li>If <var>n</var> equals 1 or <var>n</var> is greater than 4, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>Octets</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of 8-bit integers of size <var>n</var>.</li><li>Set <var>Octets</var>[0] to <var>B</var>.</li><li>If <var>k</var> + (3 &#215; (<var>n</var> - 1)) is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>j</var> be 1.</li><li>Repeat, while <var>j</var> &lt; <var>n</var><ol><li>Set <var>k</var> to <var>k</var> + 1.</li><li>If the code unit at index <var>k</var> within <var>string</var> is not the code unit 0x0025 (PERCENT SIGN), throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>If the two most significant bits in <var>B</var> are not 10, throw a <emu-val>URIError</emu-val> exception.</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>Set <var>Octets</var>[<var>j</var>] to <var>B</var>.</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li>If <var>Octets</var> does not contain a valid UTF-8 encoding of a Unicode code point, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>V</var> be the value obtained by applying the UTF-8 transformation to <var>Octets</var>, that is, from a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of octets into a 21-bit value.</li><li>Let <var>S</var> be the String value whose code units are, in order, the elements in <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref>(<var>V</var>).</li></ol></li></ol></li><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>R</var> and <var>S</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.\n          </li></ol></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>This syntax of Uniform Resource Identifiers is based upon RFC 2396 and does not reflect the more recent RFC 3986 which replaces RFC 2396. A formal description and implementation of UTF-8 is given in RFC 3629.</p>\n            <p>In UTF-8, characters are encoded using sequences of 1 to 6 octets. The only octet of a sequence of one has the higher-order bit set to 0, the remaining 7 bits being used to encode the character value. In a sequence of n octets, n &gt; 1, the initial octet has the n higher-order bits set to 1, followed by a bit set to 0. The remaining bits of that octet contain bits from the value of the character to be encoded. The following octets all have the higher-order bit set to 1 and the following bit set to 0, leaving 6 bits in each to contain bits from the character to be encoded. The possible UTF-8 encodings of ECMAScript characters are specified in  <emu-xref href=\"#table-43\"><a href=\"#table-43\" class=\"excluded-xref\" excluded-id=\"table-43\">#table-43</a></emu-xref>.</p>\n            <emu-table id=\"table-43\" caption=\"UTF-8 Encodings\" informative=\"\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-43\">#table-43</span> (Informative): UTF-8 Encodings</figcaption>\n              <table>\n                <tbody>\n                <tr>\n                  <th>\n                    Code Unit Value\n                  \n                  </th>\n                  <th>\n                    Representation\n                  \n                  </th>\n                  <th>\n                    1<sup>st</sup> Octet\n                  \n                  </th>\n                  <th>\n                    2<sup>nd</sup> Octet\n                  \n                  </th>\n                  <th>\n                    3<sup>rd</sup> Octet\n                  \n                  </th>\n                  <th>\n                    4<sup>th</sup> Octet\n                  \n                  </th>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0000 - 0x007F</code>\n                  \n                  </td>\n                  <td>\n                    <code>00000000 0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0080 - 0x07FF</code>\n                  \n                  </td>\n                  <td>\n                    <code>00000<i>yyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>110<i>yyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0800 - 0xD7FF</code>\n                  \n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    \n                    <br>\n                    followed by\n                    \n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  \n                  </td>\n                  <td>\n                    <code>110110<i>vv vvwwwwxx</i></code>\n                    <br>\n                    followed by\n                    \n                    <br>\n                    <code>110111<i>yy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>11110<i>uuu</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>uuwwww</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>xxyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    \n                    <br>\n                    not followed by\n                    \n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  \n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  \n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xDC00 - 0xDFFF</code>\n                  \n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  \n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xE000 - 0xFFFF</code>\n                  \n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                </tbody>\n              </table>\n            </figure></emu-table>\n            <p>Where\n              \n              <br>\n                <var>uuuuu</var> = <var>vvvv</var> + 1\n              \n              <br>\n              to account for the addition of 0x10000 as in section 3.8 of the Unicode Standard (Surrogates).</p>\n            <p>The above transformation combines each  <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> (for which code unit values in the inclusive range 0xD800 to 0xDFFF are reserved) into a UTF-32 representation and encodes the resulting 21-bit value into UTF-8. Decoding reconstructs the <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref>.</p>\n            <p>RFC 3629 prohibits the decoding of invalid UTF-8 octet sequences. For example, the invalid sequence C0 80 must not decode into the code unit 0x0000. Implementations of the Decode algorithm are required to throw a <emu-val>URIError</emu-val> when encountering such invalid sequences.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-string.prototype.slice": {"num": "21.1.3.19", "title": "#sec-string.prototype.slice String.prototype.slice ( start, end )", "html": "<emu-clause id=\"sec-string.prototype.slice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.slice\">#sec-string.prototype.slice</span> String.prototype.slice ( <var>start</var>, <var>end</var> )</h1>\n        <p>The <code>slice</code> method takes two arguments, <var>start</var> and <var>end</var>, and returns a substring of the result of converting this object to a String, starting from index <var>start</var> and running to, but not including, index <var>end</var> (or through the end of the String if <var>end</var> is <emu-val>undefined</emu-val>). If <var>start</var> is negative, it is treated as  <emu-eqn class=\"inline\"><var>sourceLength</var> + <var>start</var></emu-eqn> where <var>sourceLength</var> is the length of the String. If <var>end</var> is negative, it is treated as  <emu-eqn class=\"inline\"><var>sourceLength</var> + <var>end</var></emu-eqn> where <var>sourceLength</var> is the length of the String. The result is a String value, not a String object. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>intStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>intEnd</var> be <var>len</var>; else let <var>intEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>intStart</var> &lt; 0, let <var>from</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>intStart</var>, 0); otherwise let <var>from</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>intStart</var>, <var>len</var>).</li><li>If <var>intEnd</var> &lt; 0, let <var>to</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>intEnd</var>, 0); otherwise let <var>to</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>intEnd</var>, <var>len</var>).</li><li>Let <var>span</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>to</var> - <var>from</var>, 0).</li><li>Return the String value containing <var>span</var> consecutive code units from <var>S</var> beginning with the code unit at index <var>from</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>slice</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.substr": {"num": "B.2.3.1", "title": "#sec-string.prototype.substr String.prototype.substr ( start, length )", "html": "<emu-annex id=\"sec-string.prototype.substr\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.substr\">#sec-string.prototype.substr</span> String.prototype.substr ( <var>start</var>, <var>length</var> )</h1>\n        <p>The <code>substr</code> method takes two arguments, <var>start</var> and <var>length</var>, and returns a substring of the result of converting the <emu-val>this</emu-val> object to a String, starting from index <var>start</var> and running for <var>length</var> code units (or through the end of the String if <var>length</var> is <emu-val>undefined</emu-val>). If <var>start</var> is negative, it is treated as  <emu-eqn class=\"inline\"><var>sourceLength</var> + <var>start</var></emu-eqn> where <var>sourceLength</var> is the length of the String. The result is a String value, not a String object. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>intStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>length</var> is <emu-val>undefined</emu-val>, let <var>end</var> be <emu-val>+&#8734;</emu-val>; otherwise let <var>end</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>length</var>).</li><li>Let <var>size</var> be the number of code units in <var>S</var>.</li><li>If <var>intStart</var> &lt; 0, set <var>intStart</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>size</var> + <var>intStart</var>, 0).</li><li>Let <var>resultLength</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>end</var>, 0), <var>size</var> - <var>intStart</var>).</li><li>If <var>resultLength</var> &#8804; 0, return the empty String.</li><li>Return the String value containing <var>resultLength</var> consecutive code units from <var>S</var> beginning with the code unit at index <var>intStart</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>substr</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-annex>\n\n      "}, "sec-regexp.prototype-@@replace": {"num": "21.2.5.10", "title": "#sec-regexp.prototype-@@replace RegExp.prototype [ @@replace ] ( string, replaceValue )", "html": "<emu-clause id=\"sec-regexp.prototype-@@replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@replace\">#sec-regexp.prototype-@@replace</span> RegExp.prototype [ @@replace ] ( <var>string</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>@@replace</code> method is called with arguments <var>string</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>lengthS</var> be the number of code unit elements in <var>S</var>.</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fullUnicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, 0, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>results</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val><ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li><li>If <var>result</var> is <emu-val>null</emu-val>, set <var>done</var> to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Append <var>result</var> to the end of <var>results</var>.</li><li>If <var>global</var> is <emu-val>false</emu-val>, set <var>done</var> to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>)).</li><li>Let <var>nextIndex</var> be <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, <var>nextIndex</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li></ol></li></ol></li><li>Let <var>accumulatedResult</var> be the empty String value.</li><li>Let <var>nextSourcePosition</var> be 0.</li><li>For each <var>result</var> in <var>results</var>, do<ol><li>Let <var>nCaptures</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>result</var>).</li><li>Set <var>nCaptures</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>nCaptures</var> - 1, 0).</li><li>Let <var>matched</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>Let <var>matchLength</var> be the number of code units in <var>matched</var>.</li><li>Let <var>position</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"index\"</emu-val>)).</li><li>Set <var>position</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>position</var>, <var>lengthS</var>), 0).</li><li>Let <var>n</var> be 1.</li><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Repeat, while <var>n</var> &#8804; <var>nCaptures</var><ol><li>Let <var>capN</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>)).</li><li>If <var>capN</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>capN</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>capN</var>).</li></ol></li><li>Append <var>capN</var> as the last element of <var>captures</var>.</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Let <var>namedCaptures</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"groups\"</emu-val>).</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replacerArgs</var> be &#171; <var>matched</var> &#187;.</li><li>Append in list order the elements of <var>captures</var> to the end of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>replacerArgs</var>.</li><li>Append <var>position</var> and <var>S</var> to <var>replacerArgs</var>.</li><li>If <var>namedCaptures</var> is not <emu-val>undefined</emu-val>, then<ol><li>Append <var>namedCaptures</var> as the last element of <var>replacerArgs</var>.</li></ol></li><li>Let <var>replValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, <var>replacerArgs</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replValue</var>).</li></ol></li><li>Else,<ol><li>If <var>namedCaptures</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>namedCaptures</var> to ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>namedCaptures</var>).</li></ol></li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>matched</var>, <var>S</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, <var>replaceValue</var>).</li></ol></li><li>If <var>position</var> &#8805; <var>nextSourcePosition</var>, then<ol><li>NOTE: <var>position</var> should not normally move backwards. If it does, it is an indication of an ill-behaving RegExp subclass or use of an access triggered side-effect to change the global flag or other characteristics of <var>rx</var>. In such cases, the corresponding substitution is ignored.</li><li>Set <var>accumulatedResult</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the current value of <var>accumulatedResult</var>, the substring of <var>S</var> consisting of the code units from <var>nextSourcePosition</var> (inclusive) up to <var>position</var> (exclusive), and <var>replacement</var>.</li><li>Set <var>nextSourcePosition</var> to <var>position</var> + <var>matchLength</var>.</li></ol></li></ol></li><li>If <var>nextSourcePosition</var> &#8805; <var>lengthS</var>, return <var>accumulatedResult</var>.</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>accumulatedResult</var> and the substring of <var>S</var> consisting of the code units from <var>nextSourcePosition</var> (inclusive) up through the final code unit of <var>S</var> (inclusive).\n        </li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.replace]\"</emu-val>.</p>\n      </emu-clause>\n\n      "}, "sec-%stringiteratorprototype%.next": {"num": "21.1.5.2.1", "title": "#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%stringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%.next\">#sec-%stringiteratorprototype%.next</span> %StringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a String Iterator Instance (<emu-xref href=\"#sec-properties-of-string-iterator-instances\"><a href=\"#sec-properties-of-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-string-iterator-instances\">#sec-properties-of-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>s</var> be <var>O</var>.[[IteratedString]].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>position</var> be <var>O</var>.[[StringNextIndex]].</li><li>Let <var>len</var> be the length of <var>s</var>.</li><li>If <var>position</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedString]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>s</var>, <var>position</var>).</li><li>Let <var>resultString</var> be the String value containing <var>cp</var>.[[CodeUnitCount]] consecutive code units from <var>s</var> beginning with the code unit at index <var>position</var>.</li><li>Set <var>O</var>.[[StringNextIndex]] to <var>position</var> + <var>cp</var>.[[CodeUnitCount]].</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultString</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-43": "Table 47", "table-45": "Table 52"}}, "to": {"secList": ["sec-string.prototype.replace", "sec-parseint-string-radix", "sec-getsubstitution", "sec-decode", "sec-string.prototype.slice", "sec-string.prototype.substr", "sec-regexp.prototype-@@replace", "sec-%stringiteratorprototype%.next"], "secData": {"sec-string.prototype.replace": {"num": "21.1.3.17", "title": "#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )", "html": "<emu-clause id=\"sec-string.prototype.replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.replace\">#sec-string.prototype.replace</span> String.prototype.replace ( <var>searchValue</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>replace</code> method is called with arguments <var>searchValue</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>searchValue</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>replacer</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>searchValue</var>, @@replace).</li><li>If <var>replacer</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replacer</var>, <var>searchValue</var>, &#171; <var>O</var>, <var>replaceValue</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchValue</var>).</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Search <var>string</var> for the first occurrence of <var>searchString</var> and let <var>pos</var> be the index within <var>string</var> of the first code unit of the matched substring and let <var>matched</var> be <var>searchString</var>. If no occurrences of <var>searchString</var> were found, return <var>string</var>.</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, &#171; <var>matched</var>, <var>pos</var>, <var>string</var> &#187;).</li><li>Let <var>replStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>replStr</var> be !&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>matched</var>, <var>string</var>, <var>pos</var>, <var>captures</var>, <emu-val>undefined</emu-val>, <var>replaceValue</var>).</li></ol></li><li>Let <var>tailPos</var> be <var>pos</var> + the number of code units in <var>matched</var>.</li><li>Let <var>newString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the first <var>pos</var> code units of <var>string</var>, <var>replStr</var>, and the trailing code units of <var>string</var> starting at index <var>tailPos</var> (inclusive). If <var>pos</var> is 0, the first element of the concatenation will be the empty String.</li><li>Return <var>newString</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>replace</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-getsubstitution\"><h1><span class=\"secnum\">21.1.3.17.1</span>#sec-getsubstitution Runtime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )</h1>...</div></emu-clause>\n\n      "}, "sec-parseint-string-radix": {"num": "18.2.5", "title": "#sec-parseint-string-radix parseInt ( string, radix )", "html": "<emu-clause id=\"sec-parseint-string-radix\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parseint-string-radix\">#sec-parseint-string-radix</span> parseInt ( <var>string</var>, <var>radix</var> )</h1>\n      <p>The <code>parseInt</code> function produces an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value dictated by interpretation of the contents of the <var>string</var> argument according to the specified <var>radix</var>. Leading white space in <var>string</var> is ignored. If <var>radix</var> is <emu-val>undefined</emu-val> or 0, it is assumed to be 10 except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of 16 is assumed. If <var>radix</var> is 16, the number may also optionally begin with the code unit pairs <code>0x</code> or <code>0X</code>.</p>\n      <p>The <code>parseInt</code> function is the  <dfn>%parseInt%</dfn> intrinsic object. When the <code>parseInt</code> function is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <emu-const>start</emu-const>).</li><li>Let <var>sign</var> be 1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002D (HYPHEN-MINUS), set <var>sign</var> to -1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from <var>S</var>.</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>radix</var>).</li><li>Let <var>stripPrefix</var> be <emu-val>true</emu-val>.</li><li>If <var>R</var> &#8800; 0, then<ol><li>If <var>R</var> &lt; 2 or <var>R</var> &gt; 36, return <emu-val>NaN</emu-val>.</li><li>If <var>R</var> &#8800; 16, set <var>stripPrefix</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Set <var>R</var> to 10.</li></ol></li><li>If <var>stripPrefix</var> is <emu-val>true</emu-val>, then<ol><li>If the length of <var>S</var> is at least 2 and the first two code units of <var>S</var> are either <emu-val>\"0x\"</emu-val> or <emu-val>\"0X\"</emu-val>, then<ol><li>Remove the first two code units from <var>S</var>.</li><li>Set <var>R</var> to 16.</li></ol></li></ol></li><li>If <var>S</var> contains a code unit that is not a radix-<var>R</var> digit, let <var>Z</var> be the String value equal to the substring of <var>S</var> consisting of all code units before the first such code unit; otherwise, let <var>Z</var> be <var>S</var>.</li><li>If <var>Z</var> is empty, return <emu-val>NaN</emu-val>.</li><li>Let <var>mathInt</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation, using the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if <var>R</var> is 10 and <var>Z</var> contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if <var>R</var> is not 2, 4, 8, 10, 16, or 32, then <var>mathInt</var> may be an implementation-dependent approximation to the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation.)</li><li>If <var>mathInt</var> = 0<sub>&#8477;</sub>, then<ol><li>If <var>sign</var> = -1, return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Let <var>number</var> be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathInt</var>.</li><li>Return <var>sign</var> &#215; <var>number</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseInt</code> may interpret only a leading portion of <var>string</var> as an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value; it ignores any code units that cannot be interpreted as part of the notation of an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getsubstitution": {"num": "21.1.3.17.1", "title": "#sec-getsubstitution Runtime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )", "html": "<emu-clause id=\"sec-getsubstitution\" aoid=\"GetSubstitution\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getsubstitution\">#sec-getsubstitution</span> Runtime Semantics: GetSubstitution ( <var>matched</var>, <var>str</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, <var>replacement</var> )</h1>\n          <p>The abstract operation GetSubstitution takes arguments <var>matched</var>, <var>str</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, and <var>replacement</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>matched</var>) is String.</li><li>Let <var>matchLength</var> be the number of code units in <var>matched</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>stringLength</var> be the number of code units in <var>str</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>position</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>position</var> &#8804; <var>stringLength</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captures</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replacement</var>) is String.</li><li>Let <var>tailPos</var> be <var>position</var> + <var>matchLength</var>.</li><li>Let <var>m</var> be the number of elements in <var>captures</var>.</li><li>Let <var>result</var> be the String value derived from <var>replacement</var> by copying code unit elements from <var>replacement</var> to <var>result</var> while performing replacements as specified in <emu-xref href=\"#table-45\"><a href=\"#table-45\" class=\"excluded-xref\" excluded-id=\"table-45\">#table-45</a></emu-xref>. These <code>$</code> replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.</li><li>Return <var>result</var>.\n          </li></ol></emu-alg>\n          <emu-table id=\"table-45\" caption=\"Replacement Text Symbol Substitutions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-45\">#table-45</span>: Replacement Text Symbol Substitutions</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Code units\n                \n                </th>\n                <th>\n                  Unicode Characters\n                \n                </th>\n                <th>\n                  Replacement text\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0024\n                \n                </td>\n                <td>\n                  <code>$$</code>\n                \n                </td>\n                <td>\n                  <code>$</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0026\n                \n                </td>\n                <td>\n                  <code>$&amp;</code>\n                \n                </td>\n                <td>\n                  <var>matched</var>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0060\n                \n                </td>\n                <td>\n                  <code>$`</code>\n                </td>\n                <td>\n                  If <var>position</var> is 0, the replacement is the empty String. Otherwise the replacement is the String value equal to the substring of <var>str</var> consisting of the code units at indices 0 (inclusive) through <var>position</var> (exclusive).\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0027\n                \n                </td>\n                <td>\n                  <code>$'</code>\n                \n                </td>\n                <td>\n                  If <var>tailPos</var> &#8805; <var>stringLength</var>, the replacement is the empty String. Otherwise the replacement is the String value equal to the trailing code units of <var>str</var> starting at index <var>tailPos</var> (inclusive).\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N\n                  \n                  <br>\n                  Where\n                  \n                  <br>\n                  0x0031 &#8804; N &#8804; 0x0039\n                \n                </td>\n                <td>\n                  <code>$n</code> where\n                  \n                  <br>\n                  <code>n</code> is one of <code>1 2 3 4 5 6 7 8 9</code> and <code>$n</code> is not followed by a decimal digit\n                \n                </td>\n                <td>\n                  The <var>n</var><sup>th</sup> element of <var>captures</var>, where <var>n</var> is a single digit in the range 1 to 9. If <var>n</var> &#8804; <var>m</var> and the <var>n</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>n</var> &gt; <var>m</var>, no replacement is done.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N, N\n                  \n                  <br>\n                  Where\n                  \n                  <br>\n                  0x0030 &#8804; N &#8804; 0x0039\n                \n                </td>\n                <td>\n                  <code>$nn</code> where\n                  \n                  <br>\n                  <code>n</code> is one of <code>0 1 2 3 4 5 6 7 8 9</code>\n                \n                </td>\n                <td>\n                  The <var>nn</var><sup>th</sup> element of <var>captures</var>, where <var>nn</var> is a two-digit decimal number in the range 01 to 99. If <var>nn</var> &#8804; <var>m</var> and the <var>nn</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>nn</var> is 00 or <var>nn</var> &gt; <var>m</var>, no replacement is done.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x003C\n                \n                </td>\n                <td>\n                  <code>$&lt;</code>\n                \n                </td>\n                <td>\n                  <emu-alg><ol><li>If <var>namedCaptures</var> is <emu-val>undefined</emu-val>, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>namedCaptures</var>) is Object.</li><li>Scan until the next <code>&gt;</code> U+003E (GREATER-THAN SIGN).</li><li>If none is found, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li>Let <var>groupName</var> be the enclosed substring.</li><li>Let <var>capture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>namedCaptures</var>, <var>groupName</var>).</li><li>If <var>capture</var> is <emu-val>undefined</emu-val>, replace the text through <code>&gt;</code> with the empty String.</li><li>Otherwise, replace the text through <code>&gt;</code> with ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>capture</var>).\n                  </li></ol></li></ol></li></ol></emu-alg>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024\n                \n                </td>\n                <td>\n                  <code>$</code> in any context that does not match any of the above.\n                \n                </td>\n                <td>\n                  <code>$</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-decode": {"num": "18.2.6.1.2", "title": "#sec-decode Runtime Semantics: Decode ( string, reservedSet )", "html": "<emu-clause id=\"sec-decode\" aoid=\"Decode\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-decode\">#sec-decode</span> Runtime Semantics: Decode ( <var>string</var>, <var>reservedSet</var> )</h1>\n          <p>The abstract operation Decode takes arguments <var>string</var> (a String) and <var>reservedSet</var> (a String). It performs URI unescaping and decoding. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>strLen</var> be the number of code units in <var>string</var>.</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> equals <var>strLen</var>, return <var>R</var>.</li><li>Let <var>C</var> be the code unit at index <var>k</var> within <var>string</var>.</li><li>If <var>C</var> is not the code unit 0x0025 (PERCENT SIGN), then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>start</var> be <var>k</var>.</li><li>If <var>k</var> + 2 is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>If the most significant bit in <var>B</var> is 0, then<ol><li>Let <var>C</var> be the code unit whose value is <var>B</var>.</li><li>If <var>C</var> is not in <var>reservedSet</var>, then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>S</var> be the String value equal to the substring of <var>string</var> consisting of the code units at indices <var>start</var> (inclusive) through <var>k</var> (inclusive).</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: the most significant bit in <var>B</var> is 1.</li><li>Let <var>n</var> be the smallest nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that (<var>B</var> &lt;&lt; <var>n</var>) &amp; 0x80 is equal to 0.</li><li>If <var>n</var> equals 1 or <var>n</var> is greater than 4, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>Octets</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of 8-bit integers of size <var>n</var>.</li><li>Set <var>Octets</var>[0] to <var>B</var>.</li><li>If <var>k</var> + (3 &#215; (<var>n</var> - 1)) is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>j</var> be 1.</li><li>Repeat, while <var>j</var> &lt; <var>n</var><ol><li>Set <var>k</var> to <var>k</var> + 1.</li><li>If the code unit at index <var>k</var> within <var>string</var> is not the code unit 0x0025 (PERCENT SIGN), throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>If the two most significant bits in <var>B</var> are not 10, throw a <emu-val>URIError</emu-val> exception.</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>Set <var>Octets</var>[<var>j</var>] to <var>B</var>.</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li>If <var>Octets</var> does not contain a valid UTF-8 encoding of a Unicode code point, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>V</var> be the value obtained by applying the UTF-8 transformation to <var>Octets</var>, that is, from a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of octets into a 21-bit value.</li><li>Let <var>S</var> be the String value whose code units are, in order, the elements in <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref>(<var>V</var>).</li></ol></li></ol></li><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>R</var> and <var>S</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.\n          </li></ol></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>This syntax of Uniform Resource Identifiers is based upon RFC 2396 and does not reflect the more recent RFC 3986 which replaces RFC 2396. A formal description and implementation of UTF-8 is given in RFC 3629.</p>\n            <p>In UTF-8, characters are encoded using sequences of 1 to 6 octets. The only octet of a sequence of one has the higher-order bit set to 0, the remaining 7 bits being used to encode the character value. In a sequence of n octets, n &gt; 1, the initial octet has the n higher-order bits set to 1, followed by a bit set to 0. The remaining bits of that octet contain bits from the value of the character to be encoded. The following octets all have the higher-order bit set to 1 and the following bit set to 0, leaving 6 bits in each to contain bits from the character to be encoded. The possible UTF-8 encodings of ECMAScript characters are specified in  <emu-xref href=\"#table-43\"><a href=\"#table-43\" class=\"excluded-xref\" excluded-id=\"table-43\">#table-43</a></emu-xref>.</p>\n            <emu-table id=\"table-43\" caption=\"UTF-8 Encodings\" informative=\"\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-43\">#table-43</span> (Informative): UTF-8 Encodings</figcaption>\n              <table>\n                <tbody>\n                <tr>\n                  <th>\n                    Code Unit Value\n                  \n                  </th>\n                  <th>\n                    Representation\n                  \n                  </th>\n                  <th>\n                    1<sup>st</sup> Octet\n                  \n                  </th>\n                  <th>\n                    2<sup>nd</sup> Octet\n                  \n                  </th>\n                  <th>\n                    3<sup>rd</sup> Octet\n                  \n                  </th>\n                  <th>\n                    4<sup>th</sup> Octet\n                  \n                  </th>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0000 - 0x007F</code>\n                  \n                  </td>\n                  <td>\n                    <code>00000000 0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0080 - 0x07FF</code>\n                  \n                  </td>\n                  <td>\n                    <code>00000<i>yyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>110<i>yyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0800 - 0xD7FF</code>\n                  \n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    \n                    <br>\n                    followed by\n                    \n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  \n                  </td>\n                  <td>\n                    <code>110110<i>vv vvwwwwxx</i></code>\n                    <br>\n                    followed by\n                    \n                    <br>\n                    <code>110111<i>yy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>11110<i>uuu</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>uuwwww</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>xxyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    \n                    <br>\n                    not followed by\n                    \n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  \n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  \n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xDC00 - 0xDFFF</code>\n                  \n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  \n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xE000 - 0xFFFF</code>\n                  \n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                </tbody>\n              </table>\n            </figure></emu-table>\n            <p>Where\n              \n              <br>\n                <var>uuuuu</var> = <var>vvvv</var> + 1\n              \n              <br>\n              to account for the addition of 0x10000 as in section 3.8 of the Unicode Standard (Surrogates).</p>\n            <p>The above transformation combines each  <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> (for which code unit values in the inclusive range 0xD800 to 0xDFFF are reserved) into a UTF-32 representation and encodes the resulting 21-bit value into UTF-8. Decoding reconstructs the <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref>.</p>\n            <p>RFC 3629 prohibits the decoding of invalid UTF-8 octet sequences. For example, the invalid sequence C0 80 must not decode into the code unit 0x0000. Implementations of the Decode algorithm are required to throw a <emu-val>URIError</emu-val> when encountering such invalid sequences.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-string.prototype.slice": {"num": "21.1.3.19", "title": "#sec-string.prototype.slice String.prototype.slice ( start, end )", "html": "<emu-clause id=\"sec-string.prototype.slice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.slice\">#sec-string.prototype.slice</span> String.prototype.slice ( <var>start</var>, <var>end</var> )</h1>\n        <p>The <code>slice</code> method takes two arguments, <var>start</var> and <var>end</var>, and returns a substring of the result of converting this object to a String, starting from index <var>start</var> and running to, but not including, index <var>end</var> (or through the end of the String if <var>end</var> is <emu-val>undefined</emu-val>). If <var>start</var> is negative, it is treated as  <emu-eqn class=\"inline\"><var>sourceLength</var> + <var>start</var></emu-eqn> where <var>sourceLength</var> is the length of the String. If <var>end</var> is negative, it is treated as  <emu-eqn class=\"inline\"><var>sourceLength</var> + <var>end</var></emu-eqn> where <var>sourceLength</var> is the length of the String. The result is a String value, not a String object. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>intStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>intEnd</var> be <var>len</var>; else let <var>intEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>intStart</var> &lt; 0, let <var>from</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>intStart</var>, 0); otherwise let <var>from</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>intStart</var>, <var>len</var>).</li><li>If <var>intEnd</var> &lt; 0, let <var>to</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>intEnd</var>, 0); otherwise let <var>to</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>intEnd</var>, <var>len</var>).</li><li>If <var>from</var> &#8805; <var>to</var>, return the empty String.</li><li>Return the String value equal to the substring of <var>S</var> consisting of the code units at indices <var>from</var> (inclusive) through <var>to</var> (exclusive).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>slice</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.substr": {"num": "B.2.3.1", "title": "#sec-string.prototype.substr String.prototype.substr ( start, length )", "html": "<emu-annex id=\"sec-string.prototype.substr\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.substr\">#sec-string.prototype.substr</span> String.prototype.substr ( <var>start</var>, <var>length</var> )</h1>\n        <p>The <code>substr</code> method takes two arguments, <var>start</var> and <var>length</var>, and returns a substring of the result of converting the <emu-val>this</emu-val> object to a String, starting from index <var>start</var> and running for <var>length</var> code units (or through the end of the String if <var>length</var> is <emu-val>undefined</emu-val>). If <var>start</var> is negative, it is treated as  <emu-eqn class=\"inline\"><var>sourceLength</var> + <var>start</var></emu-eqn> where <var>sourceLength</var> is the length of the String. The result is a String value, not a String object. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>Let <var>intStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>intStart</var> &lt; 0, set <var>intStart</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>size</var> + <var>intStart</var>, 0).</li><li>If <var>length</var> is <emu-val>undefined</emu-val>, let <var>intLength</var> be <var>size</var>; otherwise let <var>intLength</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>length</var>).</li><li>If <var>intLength</var> &#8804; 0, return the empty String.</li><li>Let <var>intEnd</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>intStart</var> + <var>intLength</var>, <var>size</var>).</li><li>If <var>intStart</var> &#8805; <var>intEnd</var>, return the empty String.</li><li>Return the String value equal to the substring of <var>S</var> consisting of the code units at indices <var>intStart</var> (inclusive) through <var>intEnd</var> (exclusive).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>substr</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-annex>\n\n      "}, "sec-regexp.prototype-@@replace": {"num": "21.2.5.10", "title": "#sec-regexp.prototype-@@replace RegExp.prototype [ @@replace ] ( string, replaceValue )", "html": "<emu-clause id=\"sec-regexp.prototype-@@replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@replace\">#sec-regexp.prototype-@@replace</span> RegExp.prototype [ @@replace ] ( <var>string</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>@@replace</code> method is called with arguments <var>string</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>lengthS</var> be the number of code unit elements in <var>S</var>.</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fullUnicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, 0, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>results</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val><ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li><li>If <var>result</var> is <emu-val>null</emu-val>, set <var>done</var> to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Append <var>result</var> to the end of <var>results</var>.</li><li>If <var>global</var> is <emu-val>false</emu-val>, set <var>done</var> to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>)).</li><li>Let <var>nextIndex</var> be <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, <var>nextIndex</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li></ol></li></ol></li><li>Let <var>accumulatedResult</var> be the empty String value.</li><li>Let <var>nextSourcePosition</var> be 0.</li><li>For each <var>result</var> in <var>results</var>, do<ol><li>Let <var>nCaptures</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>result</var>).</li><li>Set <var>nCaptures</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>nCaptures</var> - 1, 0).</li><li>Let <var>matched</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>Let <var>matchLength</var> be the number of code units in <var>matched</var>.</li><li>Let <var>position</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"index\"</emu-val>)).</li><li>Set <var>position</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>position</var>, <var>lengthS</var>), 0).</li><li>Let <var>n</var> be 1.</li><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Repeat, while <var>n</var> &#8804; <var>nCaptures</var><ol><li>Let <var>capN</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>)).</li><li>If <var>capN</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>capN</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>capN</var>).</li></ol></li><li>Append <var>capN</var> as the last element of <var>captures</var>.</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Let <var>namedCaptures</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"groups\"</emu-val>).</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replacerArgs</var> be &#171; <var>matched</var> &#187;.</li><li>Append in list order the elements of <var>captures</var> to the end of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>replacerArgs</var>.</li><li>Append <var>position</var> and <var>S</var> to <var>replacerArgs</var>.</li><li>If <var>namedCaptures</var> is not <emu-val>undefined</emu-val>, then<ol><li>Append <var>namedCaptures</var> as the last element of <var>replacerArgs</var>.</li></ol></li><li>Let <var>replValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, <var>replacerArgs</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replValue</var>).</li></ol></li><li>Else,<ol><li>If <var>namedCaptures</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>namedCaptures</var> to ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>namedCaptures</var>).</li></ol></li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>matched</var>, <var>S</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, <var>replaceValue</var>).</li></ol></li><li>If <var>position</var> &#8805; <var>nextSourcePosition</var>, then<ol><li>NOTE: <var>position</var> should not normally move backwards. If it does, it is an indication of an ill-behaving RegExp subclass or use of an access triggered side-effect to change the global flag or other characteristics of <var>rx</var>. In such cases, the corresponding substitution is ignored.</li><li>Set <var>accumulatedResult</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the current value of <var>accumulatedResult</var>, the substring of <var>S</var> consisting of the code units at indices <var>nextSourcePosition</var> (inclusive) through <var>position</var> (exclusive), and <var>replacement</var>.</li><li>Set <var>nextSourcePosition</var> to <var>position</var> + <var>matchLength</var>.</li></ol></li></ol></li><li>If <var>nextSourcePosition</var> &#8805; <var>lengthS</var>, return <var>accumulatedResult</var>.</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>accumulatedResult</var> and the trailing code units of <var>S</var> starting at index <var>nextSourcePosition</var> (inclusive).\n        </li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.replace]\"</emu-val>.</p>\n      </emu-clause>\n\n      "}, "sec-%stringiteratorprototype%.next": {"num": "21.1.5.2.1", "title": "#sec-%stringiteratorprototype%.next %StringIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%stringiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%.next\">#sec-%stringiteratorprototype%.next</span> %StringIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a String Iterator Instance (<emu-xref href=\"#sec-properties-of-string-iterator-instances\"><a href=\"#sec-properties-of-string-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-string-iterator-instances\">#sec-properties-of-string-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>s</var> be <var>O</var>.[[IteratedString]].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>position</var> be <var>O</var>.[[StringNextIndex]].</li><li>Let <var>len</var> be the length of <var>s</var>.</li><li>If <var>position</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedString]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>s</var>, <var>position</var>).</li><li>Let <var>nextIndex</var> be <var>position</var> + <var>cp</var>.[[CodeUnitCount]].</li><li>Let <var>resultString</var> be the String value equal to the substring of <var>s</var> consisting of the code units at indices <var>position</var> (inclusive) through <var>nextIndex</var> (exclusive).</li><li>Set <var>O</var>.[[StringNextIndex]] to <var>nextIndex</var>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultString</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-43": "Table 47", "table-45": "Table 52"}}}