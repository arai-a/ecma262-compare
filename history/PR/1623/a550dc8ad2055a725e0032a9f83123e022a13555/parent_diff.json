{"from": {"secList": ["sec-%typedarray%.prototype.tolocalestring", "sec-%typedarray%.prototype.reduceright", "sec-ordinaryownpropertykeys", "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact", "sec-integer-indexed-exotic-objects", "sec-%typedarray%.prototype.every", "sec-integer-indexed-exotic-objects-ownpropertykeys", "sec-array.prototype.sort", "sec-arguments-exotic-objects", "sec-%typedarray%.prototype.findindex", "sec-array-exotic-objects-defineownproperty-p-desc", "sec-%typedarray%.prototype.foreach", "sec-properties-of-array-instances-length", "sec-%typedarray%.prototype.lastindexof", "sec-object-type", "sec-%typedarray%.prototype.find", "sec-%typedarray%.prototype.indexof", "sec-%typedarray%.prototype.join", "sec-%typedarray%.prototype.includes", "sec-array-exotic-objects", "sec-properties-of-array-instances", "sec-%typedarray%.prototype.some", "sec-%typedarray%.prototype.reduce", "sec-string-exotic-objects-ownpropertykeys", "sec-string-exotic-objects", "sec-strict-mode-of-ecmascript", "sec-%typedarray%.prototype.reverse", "sec-toindex", "sec-arraysetlength", "sec-serializejsonarray", "sec-%typedarray%.prototype.sort", "sec-properties-of-string-instances"], "secData": {"sec-%typedarray%.prototype.tolocalestring": {"num": "22.2.3.28", "title": "#sec-%typedarray%.prototype.tolocalestring %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.tolocalestring\">#sec-%typedarray%.prototype.tolocalestring</span> %TypedArray%.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.toLocaleString</code> is a distinct function that implements the same algorithm as <code>Array.prototype.toLocaleString</code> as defined in <emu-xref href=\"#sec-array.prototype.tolocalestring\"><a href=\"#sec-array.prototype.tolocalestring\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.tolocalestring\">#sec-array.prototype.tolocalestring</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the ECMAScript implementation includes the ECMA-402 Internationalization API this function is based upon the algorithm for <code>Array.prototype.toLocaleString</code> that is in the ECMA-402 specification.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reduceright": {"num": "22.2.3.21", "title": "#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduceright\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduceright\">#sec-%typedarray%.prototype.reduceright</span> %TypedArray%.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduceRight</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reduceRight</code> as defined in <emu-xref href=\"#sec-array.prototype.reduceright\"><a href=\"#sec-array.prototype.reduceright\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduceright\">#sec-array.prototype.reduceright</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-ordinaryownpropertykeys": {"num": "9.1.11.1", "title": "#sec-ordinaryownpropertykeys OrdinaryOwnPropertyKeys ( O )", "html": "<emu-clause id=\"sec-ordinaryownpropertykeys\" aoid=\"OrdinaryOwnPropertyKeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryownpropertykeys\">#sec-ordinaryownpropertykeys</span> OrdinaryOwnPropertyKeys ( <var>O</var> )</h1>\n        <p>The abstract operation OrdinaryOwnPropertyKeys takes argument <var>O</var> (an Object). It performs the following steps when called:</p>\n\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each own property key <var>P</var> of <var>O</var> such that <var>P</var> is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, in ascending numeric index order, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact": {"num": "D", "title": "#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact", "html": "<emu-annex id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact</span> Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact</h1>\n  <p><emu-xref href=\"#sec-candeclareglobalvar\"><a href=\"#sec-candeclareglobalvar\" class=\"excluded-xref\" excluded-id=\"sec-candeclareglobalvar\">#sec-candeclareglobalvar</a></emu-xref>-<emu-xref href=\"#sec-createglobalfunctionbinding\"><a href=\"#sec-createglobalfunctionbinding\" class=\"excluded-xref\" excluded-id=\"sec-createglobalfunctionbinding\">#sec-createglobalfunctionbinding</a></emu-xref> Edition 5 and 5.1 used a property existence test to determine whether a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property corresponding to a new global declaration already existed. ECMAScript 2015 uses an own property existence test. This corresponds to what has been most commonly implemented by web browsers.</p>\n  <p><emu-xref href=\"#sec-array-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-array-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</a></emu-xref>: The 5<sup>th</sup> Edition moved the capture of the current array length prior to the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> conversion of the <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> or new length value. However, the captured length value could become invalid if the conversion process has the side-effect of changing the array length. ECMAScript 2015 specifies that the current array length must be captured after the possible occurrence of such side-effects.</p>\n  <p><emu-xref href=\"#sec-timeclip\"><a href=\"#sec-timeclip\" class=\"excluded-xref\" excluded-id=\"sec-timeclip\">#sec-timeclip</a></emu-xref>: Previous editions permitted the <emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref> abstract operation to return either <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as the representation of a 0 <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref>. ECMAScript 2015 specifies that <emu-val>+0</emu-val> always returned. This means that for ECMAScript 2015 the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> of a Date object is never observably <emu-val>-0</emu-val> and methods that return time values never return <emu-val>-0</emu-val>.</p>\n  <p><emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>: If a UTC offset representation is not present, the local time zone is used. Edition 5.1 incorrectly stated that a missing time zone should be interpreted as <emu-val>\"z\"</emu-val>.</p>\n  <p><emu-xref href=\"#sec-date.prototype.toisostring\"><a href=\"#sec-date.prototype.toisostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.toisostring\">#sec-date.prototype.toisostring</a></emu-xref>: If the year cannot be represented using the Date Time String Format specified in <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref> a RangeError exception is thrown. Previous editions did not specify the behaviour for that case.</p>\n  <p><emu-xref href=\"#sec-date.prototype.tostring\"><a href=\"#sec-date.prototype.tostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.tostring\">#sec-date.prototype.tostring</a></emu-xref>: Previous editions did not specify the value returned by <code>Date.prototype.toString</code> when <emu-xref href=\"#this-time-value\"><a href=\"#this-time-value\">this time value</a></emu-xref> is <emu-val>NaN</emu-val>. ECMAScript 2015 specifies the result to be the String value <emu-val>\"Invalid Date\"</emu-val>.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref>, <emu-xref href=\"#sec-escaperegexppattern\"><a href=\"#sec-escaperegexppattern\" class=\"excluded-xref\" excluded-id=\"sec-escaperegexppattern\">#sec-escaperegexppattern</a></emu-xref>: Any LineTerminator code points in the value of the <emu-val>\"source\"</emu-val> property of a RegExp instance must be expressed using an escape sequence. Edition 5.1 only required the escaping of <code>/</code>.</p>\n  <p><emu-xref href=\"#sec-regexp.prototype-@@match\"><a href=\"#sec-regexp.prototype-@@match\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@match\">#sec-regexp.prototype-@@match</a></emu-xref>, <emu-xref href=\"#sec-regexp.prototype-@@replace\"><a href=\"#sec-regexp.prototype-@@replace\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@replace\">#sec-regexp.prototype-@@replace</a></emu-xref>: In previous editions, the specifications for <code>String.prototype.match</code> and <code>String.prototype.replace</code> was incorrect for cases where the pattern argument was a RegExp value whose <code>global</code> flag is set. The previous specifications stated that for each attempt to match the pattern, if <code>lastIndex</code> did not change it should be incremented by 1. The correct behaviour is that <code>lastIndex</code> should be incremented by one only if the pattern matched the empty String.</p>\n  <p><emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>, <emu-xref href=\"#sec-sortcompare\"><a href=\"#sec-sortcompare\" class=\"excluded-xref\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</a></emu-xref>: Previous editions did not specify how a <emu-val>NaN</emu-val> value returned by a <var>comparefn</var> was interpreted by <code>Array.prototype.sort</code>. ECMAScript 2015 specifies that such as value is treated as if <emu-val>+0</emu-val> was returned from the <var>comparefn</var>. ECMAScript 2015 also specifies that <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> is applied to the result returned by a <var>comparefn</var>. In previous editions, the effect of a <var>comparefn</var> result that is not a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> was implementation-dependent. In practice, implementations call <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>.</p>\n</emu-annex>\n\n"}, "sec-integer-indexed-exotic-objects": {"num": "9.4.5", "title": "#sec-integer-indexed-exotic-objects Integer-Indexed Exotic Objects", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects\">#sec-integer-indexed-exotic-objects</span> Integer-Indexed Exotic Objects</h1>\n      <p>An <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> that performs special handling of <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> property keys.</p>\n      <p><emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic objects</a></emu-xref> have the same internal slots as ordinary objects and additionally [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], [[ContentType]], and [[TypedArrayName]] internal slots.</p>\n      <p>An object is an <dfn id=\"integer-indexed-exotic-object\">Integer-Indexed exotic object</dfn> if its [[GetOwnProperty]], [[HasProperty]], [[DefineOwnProperty]], [[Get]], [[Set]], and [[OwnPropertyKeys]] internal methods use the definitions in this section, and its other essential internal methods use the definitions found in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. These methods are installed by <emu-xref aoid=\"IntegerIndexedObjectCreate\"><a href=\"#sec-integerindexedobjectcreate\">IntegerIndexedObjectCreate</a></emu-xref>.</p>\n\n      <div id=\"excluded-sec-integer-indexed-exotic-objects-getownproperty-p\"><h1><span class=\"secnum\">9.4.5.1</span>#sec-integer-indexed-exotic-objects-getownproperty-p [[GetOwnProperty]] ( P )</h1>...</div><div id=\"excluded-sec-integer-indexed-exotic-objects-hasproperty-p\"><h1><span class=\"secnum\">9.4.5.2</span>#sec-integer-indexed-exotic-objects-hasproperty-p [[HasProperty]] ( P )</h1>...</div><div id=\"excluded-sec-integer-indexed-exotic-objects-defineownproperty-p-desc\"><h1><span class=\"secnum\">9.4.5.3</span>#sec-integer-indexed-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )</h1>...</div><div id=\"excluded-sec-integer-indexed-exotic-objects-get-p-receiver\"><h1><span class=\"secnum\">9.4.5.4</span>#sec-integer-indexed-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )</h1>...</div><div id=\"excluded-sec-integer-indexed-exotic-objects-set-p-v-receiver\"><h1><span class=\"secnum\">9.4.5.5</span>#sec-integer-indexed-exotic-objects-set-p-v-receiver [[Set]] ( P, V, Receiver )</h1>...</div><div id=\"excluded-sec-integer-indexed-exotic-objects-ownpropertykeys\"><h1><span class=\"secnum\">9.4.5.6</span>#sec-integer-indexed-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )</h1>...</div><div id=\"excluded-sec-integerindexedobjectcreate\"><h1><span class=\"secnum\">9.4.5.7</span>#sec-integerindexedobjectcreate IntegerIndexedObjectCreate ( prototype )</h1>...</div><div id=\"excluded-sec-isvalidintegerindex\"><h1><span class=\"secnum\">9.4.5.8</span>#sec-isvalidintegerindex IsValidIntegerIndex ( O, index )</h1>...</div><div id=\"excluded-sec-integerindexedelementget\"><h1><span class=\"secnum\">9.4.5.9</span>#sec-integerindexedelementget IntegerIndexedElementGet ( O, index )</h1>...</div><div id=\"excluded-sec-integerindexedelementset\"><h1><span class=\"secnum\">9.4.5.10</span>#sec-integerindexedelementset IntegerIndexedElementSet ( O, index, value )</h1>...</div></emu-clause>\n\n    "}, "sec-%typedarray%.prototype.every": {"num": "22.2.3.7", "title": "#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.every\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.every\">#sec-%typedarray%.prototype.every</span> %TypedArray%.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.every</code> is a distinct function that implements the same algorithm as <code>Array.prototype.every</code> as defined in <emu-xref href=\"#sec-array.prototype.every\"><a href=\"#sec-array.prototype.every\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.every\">#sec-array.prototype.every</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-integer-indexed-exotic-objects-ownpropertykeys": {"num": "9.4.5.6", "title": "#sec-integer-indexed-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-ownpropertykeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-ownpropertykeys\">#sec-integer-indexed-exotic-objects-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n        <p>When the [[OwnPropertyKeys]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> starting with 0 such that <var>i</var> &lt; <var>len</var>, in ascending order, do<ol><li>Add !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>i</var>) as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.sort": {"num": "22.1.3.27", "title": "#sec-array.prototype.sort Array.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-array.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</span> Array.prototype.sort ( <var>comparefn</var> )</h1>\n        <p>The elements of this array are sorted. The sort must be stable (that is, elements that compare equal must remain in their original order). If <var>comparefn</var> is not <emu-val>undefined</emu-val>, it should be a function that accepts two arguments <var>x</var> and <var>y</var> and returns a negative value if <var>x</var> &lt; <var>y</var>, zero if <var>x</var> = <var>y</var>, or a positive value if <var>x</var> &gt; <var>y</var>.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>obj</var>).</li></ol></emu-alg>\n        <p>Within this specification of the <code>sort</code> method, an object, <var>obj</var>, is said to be <em>sparse</em> if the following algorithm returns <emu-val>true</emu-val>:</p>\n        <emu-alg><ol><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> in the range 0 &#8804; <var>i</var> &lt; <var>len</var>, do<ol><li>Let <var>elem</var> be <var>obj</var>.[[GetOwnProperty]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>i</var>)).</li><li>If <var>elem</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <p>The <em>sort order</em> is the ordering, after completion of this function, of the <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> property values of <var>obj</var> whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> indexes are less than <var>len</var>. The result of the <code>sort</code> function is then determined as follows:</p>\n        <p>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and is not a consistent comparison function for the elements of this array (see below), the sort order is implementation-defined. The sort order is also implementation-defined if <var>comparefn</var> is <emu-val>undefined</emu-val> and <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> does not act as a consistent comparison function.</p>\n        <p>Let <var>proto</var> be <var>obj</var>.[[GetPrototypeOf]](). If <var>proto</var> is not <emu-val>null</emu-val> and there exists an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> such that all of the conditions below are satisfied then the sort order is implementation-defined:</p>\n        <ul>\n          <li>\n            <var>obj</var> is sparse\n          </li>\n          <li>\n            0 &#8804; <var>j</var> &lt; <var>len</var>\n          </li>\n          <li>\n            <emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>proto</var>, <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>j</var>)) is <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>The sort order is also implementation-defined if <var>obj</var> is sparse and any of the following conditions are true:</p>\n        <ul>\n          <li>\n            <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>obj</var>) is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            Any <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> property of <var>obj</var> whose name is a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var> is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> whose [[Configurable]] attribute is <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <p>The sort order is also implementation-defined if any of the following conditions are true:</p>\n        <ul>\n          <li>\n            If <var>obj</var> is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> (including Proxy exotic objects) whose behaviour for [[Get]], [[Set]], [[Delete]], and [[GetOwnProperty]] is not the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> implementation of these internal methods.\n          </li>\n          <li>\n            If any index property of <var>obj</var> whose name is a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> or is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> whose [[Writable]] attribute is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and the application of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> to any value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> modifies <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and all applications of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, to any specific value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>, do not produce the same result.\n          </li>\n        </ul>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Perform an implementation-dependent sequence of calls to the <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>, <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>, <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>, and <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref> abstract operation with <var>obj</var> as the first argument, and to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> (described below), such that:<ul><li>The property key argument for each call to <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>, <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>, <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>, or <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref> is the string representation of a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var>.</li><li>The <code>Throw</code> argument for every call to <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref> is <emu-val>true</emu-val>.</li><li>The arguments for calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> are values returned by a previous call to the <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref> abstract operation, unless the properties accessed by those previous calls did not exist according to <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>. If both prospective arguments to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> correspond to non-existent properties, use <emu-val>+0</emu-val> instead of calling <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>. If only the first prospective argument is non-existent use +1. If only the second prospective argument is non-existent use -1.</li><li>If <var>obj</var> is not sparse then <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref> must not be called.</li><li>If an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> is returned from any of these operations, it is immediately returned as the value of this function.</li></ul></li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        <p>Unless the sort order is specified above to be implementation-defined, the returned object must have the following two characteristics:</p>\n        <ul>\n          <li>\n            There must be some mathematical permutation &#960; of the nonnegative integers less than <var>len</var>, such that for every nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> less than <var>len</var>, if property <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> existed, then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn> is exactly the same value as <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn>. But if property <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> did not exist, then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn> does not exist.\n          </li>\n          <li>\n            Then for all nonnegative integers <var>j</var> and <var>k</var>, each less than <var>len</var>, if <emu-eqn class=\"inline\"><emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>(old[<var>j</var>], old[<var>k</var>]) &lt; 0</emu-eqn> (see <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> below), then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)] &lt; new[&#960;(<var>k</var>)]</emu-eqn>.\n          </li>\n        </ul>\n        <p>Here the notation <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is used to refer to the hypothetical result of calling <emu-eqn class=\"inline\"><emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>j</var>)</emu-eqn> before this function is executed, and the notation <emu-eqn class=\"inline\">new[<var>j</var>]</emu-eqn> to refer to the hypothetical result of calling <emu-eqn class=\"inline\"><emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>j</var>)</emu-eqn> after this function has been executed.</p>\n        <p>A function <var>comparefn</var> is a consistent comparison function for a set of values <var>S</var> if all of the requirements below are met for all values <var>a</var>, <var>b</var>, and <var>c</var> (possibly the same value) in the set <var>S</var>: The notation <emu-eqn class=\"inline\"><var>a</var> &lt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &lt; 0</emu-eqn>; <emu-eqn class=\"inline\"><var>a</var> =<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) = 0</emu-eqn> (of either sign); and <emu-eqn class=\"inline\"><var>a</var> &gt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &gt; 0</emu-eqn>.</p>\n        <ul>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) always returns the same value <var>v</var> when given a specific pair of values <var>a</var> and <var>b</var> as its two arguments. Furthermore, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, and <var>v</var> is not <emu-val>NaN</emu-val>. Note that this implies that exactly one of <var>a</var> &lt;<sub>CF</sub> <var>b</var>, <var>a</var> =<sub>CF</sub> <var>b</var>, and <var>a</var> &gt;<sub>CF</sub> <var>b</var> will be true for a given pair of <var>a</var> and <var>b</var>.\n          </li>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) does not modify <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            <var>a</var> =<sub>CF</sub> <var>a</var> (reflexivity)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var>, then <var>b</var> =<sub>CF</sub> <var>a</var> (symmetry)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var> and <var>b</var> =<sub>CF</sub> <var>c</var>, then <var>a</var> =<sub>CF</sub> <var>c</var> (transitivity of =<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &lt;<sub>CF</sub> <var>b</var> and <var>b</var> &lt;<sub>CF</sub> <var>c</var>, then <var>a</var> &lt;<sub>CF</sub> <var>c</var> (transitivity of &lt;<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &gt;<sub>CF</sub> <var>b</var> and <var>b</var> &gt;<sub>CF</sub> <var>c</var>, then <var>a</var> &gt;<sub>CF</sub> <var>c</var> (transitivity of &gt;<sub>CF</sub>)\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The above conditions are necessary and sufficient to ensure that <var>comparefn</var> divides the set <var>S</var> into equivalence classes and that these equivalence classes are totally ordered.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>sort</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-sortcompare\"><h1><span class=\"secnum\">22.1.3.27.1</span>#sec-sortcompare Runtime Semantics: SortCompare ( x, y )</h1>...</div></emu-clause>\n\n      "}, "sec-arguments-exotic-objects": {"num": "9.4.4", "title": "#sec-arguments-exotic-objects Arguments Exotic Objects", "html": "<emu-clause id=\"sec-arguments-exotic-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</span> Arguments Exotic Objects</h1>\n\n      <p>Most ECMAScript functions make an arguments object available to their code. Depending upon the characteristics of the function definition, its arguments object is either an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> or an <emu-xref href=\"#arguments-exotic-object\"><a href=\"#arguments-exotic-object\">arguments exotic object</a></emu-xref>. An <emu-xref href=\"#arguments-exotic-object\"><a href=\"#arguments-exotic-object\">arguments exotic object</a></emu-xref> is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> whose <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> properties map to the formal parameters bindings of an invocation of its associated ECMAScript function.</p>\n\n      <p>An object is an <dfn id=\"arguments-exotic-object\">arguments exotic object</dfn> if its internal methods use the following implementations, with the ones not specified here using those found in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. These methods are installed in <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>.</p>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>While <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref> is grouped into this clause, it creates an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>, not an <emu-xref href=\"#arguments-exotic-object\"><a href=\"#arguments-exotic-object\">arguments exotic object</a></emu-xref>.</p>\n      </div></emu-note>\n\n      <p>Arguments exotic objects have the same internal slots as ordinary objects. They also have a [[ParameterMap]] internal slot. Ordinary arguments objects also have a [[ParameterMap]] internal slot whose value is always undefined. For ordinary argument objects the [[ParameterMap]] internal slot is only used by <code>Object.prototype.toString</code> (<emu-xref href=\"#sec-object.prototype.tostring\"><a href=\"#sec-object.prototype.tostring\" class=\"excluded-xref\" excluded-id=\"sec-object.prototype.tostring\">#sec-object.prototype.tostring</a></emu-xref>) to identify them as such.</p>\n\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed data properties of an <emu-xref href=\"#arguments-exotic-object\"><a href=\"#arguments-exotic-object\">arguments exotic object</a></emu-xref> whose numeric name values are less than the number of formal parameters of the corresponding <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> initially share their values with the corresponding argument bindings in the function's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>. This means that changing the property changes the corresponding value of the argument binding and vice-versa. This correspondence is broken if such a property is deleted and then redefined or if the property is changed into an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>. If the arguments object is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>, the values of its properties are simply a copy of the arguments passed to the function and there is no dynamic linkage between the property values and the formal parameter values.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>The ParameterMap object and its property values are used as a device for specifying the arguments object correspondence to argument bindings. The ParameterMap object and the objects that are the values of its properties are not directly observable from ECMAScript code. An ECMAScript implementation does not need to actually create or use such objects to implement the specified semantics.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Ordinary arguments objects define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> named <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access. The <emu-val>\"callee\"</emu-val> property has a more specific meaning for arguments exotic objects, which are created only for some class of non-strict functions. The definition of this property in the ordinary variant exists to ensure that it is not defined in any other manner by conforming ECMAScript implementations.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n        <p>ECMAScript implementations of arguments exotic objects have historically contained an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> named <emu-val>\"caller\"</emu-val>. Prior to ECMAScript 2017, this specification included the definition of a throwing <emu-val>\"caller\"</emu-val> property on ordinary arguments objects. Since implementations do not contain this extension any longer, ECMAScript 2017 dropped the requirement for a throwing <emu-val>\"caller\"</emu-val> accessor.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-arguments-exotic-objects-getownproperty-p\"><h1><span class=\"secnum\">9.4.4.1</span>#sec-arguments-exotic-objects-getownproperty-p [[GetOwnProperty]] ( P )</h1>...</div><div id=\"excluded-sec-arguments-exotic-objects-defineownproperty-p-desc\"><h1><span class=\"secnum\">9.4.4.2</span>#sec-arguments-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )</h1>...</div><div id=\"excluded-sec-arguments-exotic-objects-get-p-receiver\"><h1><span class=\"secnum\">9.4.4.3</span>#sec-arguments-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )</h1>...</div><div id=\"excluded-sec-arguments-exotic-objects-set-p-v-receiver\"><h1><span class=\"secnum\">9.4.4.4</span>#sec-arguments-exotic-objects-set-p-v-receiver [[Set]] ( P, V, Receiver )</h1>...</div><div id=\"excluded-sec-arguments-exotic-objects-delete-p\"><h1><span class=\"secnum\">9.4.4.5</span>#sec-arguments-exotic-objects-delete-p [[Delete]] ( P )</h1>...</div><div id=\"excluded-sec-createunmappedargumentsobject\"><h1><span class=\"secnum\">9.4.4.6</span>#sec-createunmappedargumentsobject CreateUnmappedArgumentsObject ( argumentsList )</h1>...</div><div id=\"excluded-sec-createmappedargumentsobject\"><h1><span class=\"secnum\">9.4.4.7</span>#sec-createmappedargumentsobject CreateMappedArgumentsObject ( func, formals, argumentsList, env )</h1>...</div></emu-clause>\n\n    "}, "sec-%typedarray%.prototype.findindex": {"num": "22.2.3.11", "title": "#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.findindex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.findindex\">#sec-%typedarray%.prototype.findindex</span> %TypedArray%.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.findIndex</code> is a distinct function that implements the same algorithm as <code>Array.prototype.findIndex</code> as defined in <emu-xref href=\"#sec-array.prototype.findindex\"><a href=\"#sec-array.prototype.findindex\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.findindex\">#sec-array.prototype.findindex</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-array-exotic-objects-defineownproperty-p-desc": {"num": "9.4.2.1", "title": "#sec-array-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )", "html": "<emu-clause id=\"sec-array-exotic-objects-defineownproperty-p-desc\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h1>\n        <p>When the [[DefineOwnProperty]] internal method of an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> <var>A</var> is called with property key <var>P</var>, and <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>P</var> is <emu-val>\"length\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"ArraySetLength\"><a href=\"#sec-arraysetlength\">ArraySetLength</a></emu-xref>(<var>A</var>, <var>Desc</var>).</li></ol></li><li>Else if <var>P</var> is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, then<ol><li>Let <var>oldLenDesc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>oldLenDesc</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLenDesc</var>.[[Configurable]] is <emu-val>false</emu-val>.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>oldLen</var>) is <emu-val>true</emu-val>.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> &#8805; <var>oldLen</var> and <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <var>P</var>, <var>Desc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>index</var> &#8805; <var>oldLen</var>, then<ol><li>Set <var>oldLenDesc</var>.[[Value]] to <var>index</var> + 1.</li><li>Let <var>succeeded</var> be <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>oldLenDesc</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>succeeded</var> is <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <var>P</var>, <var>Desc</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.foreach": {"num": "22.2.3.12", "title": "#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.foreach\">#sec-%typedarray%.prototype.foreach</span> %TypedArray%.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.forEach</code> is a distinct function that implements the same algorithm as <code>Array.prototype.forEach</code> as defined in <emu-xref href=\"#sec-array.prototype.foreach\"><a href=\"#sec-array.prototype.foreach\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.foreach\">#sec-array.prototype.foreach</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-properties-of-array-instances-length": {"num": "22.1.4.1", "title": "#sec-properties-of-array-instances-length length", "html": "<emu-clause id=\"sec-properties-of-array-instances-length\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-array-instances-length\">#sec-properties-of-array-instances-length</span> length</h1>\n        <p>The <emu-val>\"length\"</emu-val> property of an Array instance is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> whose value is always numerically greater than the name of every configurable own property whose name is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>.</p>\n        <p>The <emu-val>\"length\"</emu-val> property initially has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Reducing the value of the <emu-val>\"length\"</emu-val> property has the side-effect of deleting own array elements whose <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> is between the old and new length values. However, non-configurable properties can not be deleted. Attempting to set the <emu-val>\"length\"</emu-val> property of an Array object to a value that is numerically less than or equal to the largest numeric own <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> of an existing non-configurable <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property of the array will result in the length being set to a numeric value that is one greater than that non-configurable numeric own <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>. See <emu-xref href=\"#sec-array-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-array-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.lastindexof": {"num": "22.2.3.17", "title": "#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.lastindexof\">#sec-%typedarray%.prototype.lastindexof</span> %TypedArray%.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.lastIndexOf</code> is a distinct function that implements the same algorithm as <code>Array.prototype.lastIndexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.lastindexof\"><a href=\"#sec-array.prototype.lastindexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-object-type": {"num": "6.1.7", "title": "#sec-object-type The Object Type", "html": "<emu-clause id=\"sec-object-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-type\">#sec-object-type</span> The Object Type</h1>\n      <p>An Object is logically a collection of properties. Each property is either a data property, or an accessor property:</p>\n      <ul>\n        <li>\n          A <dfn>data property</dfn> associates a key value with an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> and a set of Boolean attributes.\n        </li>\n        <li>\n          An <dfn>accessor property</dfn> associates a key value with one or two accessor functions, and a set of Boolean attributes. The accessor functions are used to store or retrieve an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> that is associated with the property.\n        </li>\n      </ul>\n      <p>Properties are identified using key values. A property key value is either an ECMAScript String value or a Symbol value. All String and Symbol values, including the empty String, are valid as property keys. A <dfn id=\"property-name\">property name</dfn> is a property key that is a String value.</p>\n      <p>An <dfn id=\"integer-index\">integer index</dfn> is a String-valued property key that is a canonical numeric String (see <emu-xref href=\"#sec-canonicalnumericindexstring\"><a href=\"#sec-canonicalnumericindexstring\" class=\"excluded-xref\" excluded-id=\"sec-canonicalnumericindexstring\">#sec-canonicalnumericindexstring</a></emu-xref>) and whose numeric value is either <emu-val>+0</emu-val> or a positive <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> &#8804; 2<sup>53</sup> - 1. An <dfn id=\"array-index\">array index</dfn> is an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> whose numeric value <var>i</var> is in the range <emu-eqn class=\"inline\">+0 &#8804; <var>i</var> &lt; 2<sup>32</sup> - 1</emu-eqn>.</p>\n      <p>Property keys are used to access properties and their values. There are two kinds of access for properties: <em>get</em> and <em>set</em>, corresponding to value retrieval and assignment, respectively. The properties accessible via get and set access includes both <em>own properties</em> that are a direct part of an object and <em>inherited properties</em> which are provided by another associated object via a property inheritance relationship. Inherited properties may be either own or inherited properties of the associated object. Each own property of an object must each have a key value that is distinct from the key values of the other own properties of that object.</p>\n      <p>All objects are logically collections of properties, but there are multiple forms of objects that differ in their semantics for accessing and manipulating their properties. Please see <emu-xref href=\"#sec-object-internal-methods-and-internal-slots\"><a href=\"#sec-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-object-internal-methods-and-internal-slots\">#sec-object-internal-methods-and-internal-slots</a></emu-xref> for definitions of the multiple forms of objects.</p>\n\n      <div id=\"excluded-sec-property-attributes\"><h1><span class=\"secnum\">6.1.7.1</span>#sec-property-attributes Property Attributes</h1>...</div><div id=\"excluded-sec-object-internal-methods-and-internal-slots\"><h1><span class=\"secnum\">6.1.7.2</span>#sec-object-internal-methods-and-internal-slots Object Internal Methods and Internal Slots</h1>...</div><div id=\"excluded-sec-invariants-of-the-essential-internal-methods\"><h1><span class=\"secnum\">6.1.7.3</span>#sec-invariants-of-the-essential-internal-methods Invariants of the Essential Internal Methods</h1>...</div><div id=\"excluded-sec-well-known-intrinsic-objects\"><h1><span class=\"secnum\">6.1.7.4</span>#sec-well-known-intrinsic-objects Well-Known Intrinsic Objects</h1>...</div></emu-clause>\n  "}, "sec-%typedarray%.prototype.find": {"num": "22.2.3.10", "title": "#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.find\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.find\">#sec-%typedarray%.prototype.find</span> %TypedArray%.prototype.find ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.find</code> is a distinct function that implements the same algorithm as <code>Array.prototype.find</code> as defined in <emu-xref href=\"#sec-array.prototype.find\"><a href=\"#sec-array.prototype.find\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.find\">#sec-array.prototype.find</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.indexof": {"num": "22.2.3.14", "title": "#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.indexof\">#sec-%typedarray%.prototype.indexof</span> %TypedArray%.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.indexOf</code> is a distinct function that implements the same algorithm as <code>Array.prototype.indexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.indexof\"><a href=\"#sec-array.prototype.indexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.join": {"num": "22.2.3.15", "title": "#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.join\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.join\">#sec-%typedarray%.prototype.join</span> %TypedArray%.prototype.join ( <var>separator</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.join</code> is a distinct function that implements the same algorithm as <code>Array.prototype.join</code> as defined in <emu-xref href=\"#sec-array.prototype.join\"><a href=\"#sec-array.prototype.join\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.join\">#sec-array.prototype.join</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.includes": {"num": "22.2.3.13", "title": "#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.includes\">#sec-%typedarray%.prototype.includes</span> %TypedArray%.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.includes</code> is a distinct function that implements the same algorithm as <code>Array.prototype.includes</code> as defined in <emu-xref href=\"#sec-array.prototype.includes\"><a href=\"#sec-array.prototype.includes\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.includes\">#sec-array.prototype.includes</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-array-exotic-objects": {"num": "9.4.2", "title": "#sec-array-exotic-objects Array Exotic Objects", "html": "<emu-clause id=\"sec-array-exotic-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-exotic-objects\">#sec-array-exotic-objects</span> Array Exotic Objects</h1>\n      <p>An Array object is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> that gives special treatment to <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> property keys (see <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\" class=\"excluded-xref\" excluded-id=\"sec-object-type\">#sec-object-type</a></emu-xref>). A property whose <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> is also called an <em>element</em>. Every Array object has a non-configurable <emu-val>\"length\"</emu-val> property whose value is always a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than 2<sup>32</sup>. The value of the <emu-val>\"length\"</emu-val> property is numerically greater than the name of every own property whose name is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>; whenever an own property of an Array object is created or changed, other properties are adjusted as necessary to maintain this invariant. Specifically, whenever an own property is added whose name is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, the value of the <emu-val>\"length\"</emu-val> property is changed, if necessary, to be one more than the numeric value of that <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>; and whenever the value of the <emu-val>\"length\"</emu-val> property is changed, every own property whose name is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> whose value is not smaller than the new length is deleted. This constraint applies only to own properties of an Array object and is unaffected by <emu-val>\"length\"</emu-val> or <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> properties that may be inherited from its prototypes.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A String <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> <var>P</var> is an <em><emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref></em> if and only if <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>)) is equal to <var>P</var> and <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>) is not equal to <emu-eqn class=\"inline\">2<sup>32</sup> - 1</emu-eqn>.</p>\n      </div></emu-note>\n\n      <p>An object is an <dfn id=\"array-exotic-object\">Array exotic object</dfn> (or simply, an Array object) if its [[DefineOwnProperty]] internal method uses the following implementation, and its other essential internal methods use the definitions found in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. These methods are installed in <emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>.</p>\n\n      <div id=\"excluded-sec-array-exotic-objects-defineownproperty-p-desc\"><h1><span class=\"secnum\">9.4.2.1</span>#sec-array-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )</h1>...</div><div id=\"excluded-sec-arraycreate\"><h1><span class=\"secnum\">9.4.2.2</span>#sec-arraycreate ArrayCreate ( length [ , proto ] )</h1>...</div><div id=\"excluded-sec-arrayspeciescreate\"><h1><span class=\"secnum\">9.4.2.3</span>#sec-arrayspeciescreate ArraySpeciesCreate ( originalArray, length )</h1>...</div><div id=\"excluded-sec-arraysetlength\"><h1><span class=\"secnum\">9.4.2.4</span>#sec-arraysetlength ArraySetLength ( A, Desc )</h1>...</div></emu-clause>\n\n    "}, "sec-properties-of-array-instances": {"num": "22.1.4", "title": "#sec-properties-of-array-instances Properties of Array Instances", "html": "<emu-clause id=\"sec-properties-of-array-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-array-instances\">#sec-properties-of-array-instances</span> Properties of Array Instances</h1>\n      <p>Array instances are Array exotic objects and have the internal methods specified for such objects. Array instances inherit properties from the Array prototype object.</p>\n      <p>Array instances have a <emu-val>\"length\"</emu-val> property, and a set of enumerable properties with <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> names.</p>\n\n      <div id=\"excluded-sec-properties-of-array-instances-length\"><h1><span class=\"secnum\">22.1.4.1</span>#sec-properties-of-array-instances-length length</h1>...</div></emu-clause>\n\n    "}, "sec-%typedarray%.prototype.some": {"num": "22.2.3.25", "title": "#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.some\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.some\">#sec-%typedarray%.prototype.some</span> %TypedArray%.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.some</code> is a distinct function that implements the same algorithm as <code>Array.prototype.some</code> as defined in <emu-xref href=\"#sec-array.prototype.some\"><a href=\"#sec-array.prototype.some\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.some\">#sec-array.prototype.some</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reduce": {"num": "22.2.3.20", "title": "#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduce\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduce\">#sec-%typedarray%.prototype.reduce</span> %TypedArray%.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduce</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reduce</code> as defined in <emu-xref href=\"#sec-array.prototype.reduce\"><a href=\"#sec-array.prototype.reduce\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduce\">#sec-array.prototype.reduce</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-string-exotic-objects-ownpropertykeys": {"num": "9.4.3.3", "title": "#sec-string-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-string-exotic-objects-ownpropertykeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-exotic-objects-ownpropertykeys\">#sec-string-exotic-objects-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n        <p>When the [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> <var>O</var> is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>str</var> be <var>O</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>len</var> be the length of <var>str</var>.</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> starting with 0 such that <var>i</var> &lt; <var>len</var>, in ascending order, do<ol><li>Add !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>i</var>) as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <var>P</var> is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> and <emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>P</var>) &#8805; <var>len</var>, in ascending numeric index order, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string-exotic-objects": {"num": "9.4.3", "title": "#sec-string-exotic-objects String Exotic Objects", "html": "<emu-clause id=\"sec-string-exotic-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-exotic-objects\">#sec-string-exotic-objects</span> String Exotic Objects</h1>\n      <p>A String object is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> that encapsulates a String value and exposes virtual <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed data properties corresponding to the individual code unit elements of the String value. String exotic objects always have a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> named <emu-val>\"length\"</emu-val> whose value is the number of code unit elements in the encapsulated String value. Both the code unit data properties and the <emu-val>\"length\"</emu-val> property are non-writable and non-configurable.</p>\n\n      <p>An object is a <dfn id=\"string-exotic-object\">String exotic object</dfn> (or simply, a String object) if its [[GetOwnProperty]], [[DefineOwnProperty]], and [[OwnPropertyKeys]] internal methods use the following implementations, and its other essential internal methods use the definitions found in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. These methods are installed in <emu-xref aoid=\"StringCreate\"><a href=\"#sec-stringcreate\">StringCreate</a></emu-xref>.</p>\n\n      <p>String exotic objects have the same internal slots as ordinary objects. They also have a [[StringData]] internal slot.</p>\n\n      <div id=\"excluded-sec-string-exotic-objects-getownproperty-p\"><h1><span class=\"secnum\">9.4.3.1</span>#sec-string-exotic-objects-getownproperty-p [[GetOwnProperty]] ( P )</h1>...</div><div id=\"excluded-sec-string-exotic-objects-defineownproperty-p-desc\"><h1><span class=\"secnum\">9.4.3.2</span>#sec-string-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )</h1>...</div><div id=\"excluded-sec-string-exotic-objects-ownpropertykeys\"><h1><span class=\"secnum\">9.4.3.3</span>#sec-string-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )</h1>...</div><div id=\"excluded-sec-stringcreate\"><h1><span class=\"secnum\">9.4.3.4</span>#sec-stringcreate StringCreate ( value, prototype )</h1>...</div><div id=\"excluded-sec-stringgetownproperty\"><h1><span class=\"secnum\">9.4.3.5</span>#sec-stringgetownproperty StringGetOwnProperty ( S, P )</h1>...</div></emu-clause>\n\n    "}, "sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are reserved words within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must not extend, as described in <emu-xref href=\"#sec-additional-syntax-numeric-literals\"><a href=\"#sec-additional-syntax-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-numeric-literals\">#sec-additional-syntax-numeric-literals</a></emu-xref>, the syntax of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt>, nor extend the syntax of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt>.\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, may not extend the syntax of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> as described in <emu-xref href=\"#sec-additional-syntax-string-literals\"><a href=\"#sec-additional-syntax-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</a></emu-xref>.\n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot has the value <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the StringValue <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    </li>\n    <li>\n      Arguments objects for strict functions define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    </li>\n    <li>\n      Arguments objects for strict functions do not dynamically share their <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property values with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    </li>\n    <li>\n      For strict functions, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the StringValue of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a Function, Generator, or AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-%typedarray%.prototype.reverse": {"num": "22.2.3.22", "title": "#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reverse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reverse\">#sec-%typedarray%.prototype.reverse</span> %TypedArray%.prototype.reverse ( )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reverse</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reverse</code> as defined in <emu-xref href=\"#sec-array.prototype.reverse\"><a href=\"#sec-array.prototype.reverse\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reverse\">#sec-array.prototype.reverse</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-toindex": {"num": "7.1.22", "title": "#sec-toindex ToIndex ( value )", "html": "<emu-clause id=\"sec-toindex\" aoid=\"ToIndex\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toindex\">#sec-toindex</span> ToIndex ( <var>value</var> )</h1>\n      <p>The abstract operation ToIndex takes argument <var>value</var>. It returns <var>value</var> argument converted to a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> if it is a valid <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> value. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>index</var> be 0.</li></ol></li><li>Else,<ol><li>Let <var>integerIndex</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>If <var>integerIndex</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<var>integerIndex</var>).</li><li>If !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>integerIndex</var>, <var>index</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-arraysetlength": {"num": "9.4.2.4", "title": "#sec-arraysetlength ArraySetLength ( A, Desc )", "html": "<emu-clause id=\"sec-arraysetlength\" aoid=\"ArraySetLength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraysetlength\">#sec-arraysetlength</span> ArraySetLength ( <var>A</var>, <var>Desc</var> )</h1>\n        <p>The abstract operation ArraySetLength takes arguments <var>A</var> (an Array object) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>Desc</var>.[[Value]] is absent, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>Desc</var>).</li></ol></li><li>Let <var>newLenDesc</var> be a copy of <var>Desc</var>.</li><li>Let <var>newLen</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li>Let <var>numberLen</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li>If <var>newLen</var> &#8800; <var>numberLen</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Set <var>newLenDesc</var>.[[Value]] to <var>newLen</var>.</li><li>Let <var>oldLenDesc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>oldLenDesc</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLenDesc</var>.[[Configurable]] is <emu-val>false</emu-val>.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li>If <var>newLen</var> &#8805; <var>oldLen</var>, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li></ol></li><li>If <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>newLenDesc</var>.[[Writable]] is absent or has the value <emu-val>true</emu-val>, let <var>newWritable</var> be <emu-val>true</emu-val>.</li><li>Else,<ol><li>NOTE: Setting the [[Writable]] attribute to <emu-val>false</emu-val> is deferred in case any elements cannot be deleted.</li><li>Let <var>newWritable</var> be <emu-val>false</emu-val>.</li><li>Set <var>newLenDesc</var>.[[Writable]] to <emu-val>true</emu-val>.</li></ol></li><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>For each own property key <var>P</var> of <var>A</var> that is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, whose numeric value is greater than or equal to <var>newLen</var>, in descending numeric index order, do<ol><li>Let <var>deleteSucceeded</var> be ! <var>A</var>.[[Delete]](<var>P</var>).</li><li>If <var>deleteSucceeded</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>newLenDesc</var>.[[Value]] to !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>) + 1.</li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, set <var>newLenDesc</var>.[[Writable]] to <emu-val>false</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Writable]]: <emu-val>false</emu-val> }).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>succeeded</var> is <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>In steps 3 and 4, if <var>Desc</var>.[[Value]] is an object then its <code>valueOf</code> method is called twice. This is legacy behaviour that was specified with this effect starting with the 2<sup>nd</sup> Edition of this specification.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-serializejsonarray": {"num": "24.5.2.5", "title": "#sec-serializejsonarray Runtime Semantics: SerializeJSONArray ( state, value )", "html": "<emu-clause id=\"sec-serializejsonarray\" aoid=\"SerializeJSONArray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonarray\">#sec-serializejsonarray</span> Runtime Semantics: SerializeJSONArray ( <var>state</var>, <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONArray takes arguments <var>state</var> and <var>value</var>. It serializes an array. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>state</var>.[[Stack]] contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>state</var>.[[Stack]].</li><li>Let <var>stepback</var> be <var>state</var>.[[Indent]].</li><li>Set <var>state</var>.[[Indent]] to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>state</var>.[[Indent]] and <var>state</var>.[[Gap]].</li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>value</var>).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>state</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>), <var>value</var>).</li><li>If <var>strP</var> is <emu-val>undefined</emu-val>, then<ol><li>Append <emu-val>\"null\"</emu-val> to <var>partial</var>.</li></ol></li><li>Else,<ol><li>Append <var>strP</var> to <var>partial</var>.</li></ol></li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <emu-val>\"[]\"</emu-val>.</li></ol></li><li>Else,<ol><li>If <var>state</var>.[[Gap]] is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"[\"</emu-val>, <var>properties</var>, and <emu-val>\"]\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>state</var>.[[Indent]].</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"[\"</emu-val>, the code unit 0x000A (LINE FEED), <var>state</var>.[[Indent]], <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <emu-val>\"]\"</emu-val>.</li></ol></li></ol></li><li>Remove the last element of <var>state</var>.[[Stack]].</li><li>Set <var>state</var>.[[Indent]] to <var>stepback</var>.</li><li>Return <var>final</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The representation of arrays includes only the elements between zero and <emu-eqn class=\"inline\"><code>array.length</code> - 1</emu-eqn> inclusive. Properties whose keys are not <emu-xref href=\"#array-index\"><a href=\"#array-index\">array indexes</a></emu-xref> are excluded from the stringification. An array is stringified as an opening LEFT SQUARE BRACKET, elements separated by COMMA, and a closing RIGHT SQUARE BRACKET.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.sort": {"num": "22.2.3.26", "title": "#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.sort\">#sec-%typedarray%.prototype.sort</span> %TypedArray%.prototype.sort ( <var>comparefn</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> is a distinct function that, except as described below, implements the same requirements as those of <code>Array.prototype.sort</code> as defined in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>. The implementation of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> specification may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. The only internal methods of the <emu-val>this</emu-val> value that the algorithm may call are [[Get]] and [[Set]].</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function. These steps are used instead of the entry steps in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>obj</var>).</li><li>Let <var>len</var> be <var>obj</var>.[[ArrayLength]].</li></ol></emu-alg>\n        <p>The implementation-defined sort order condition for exotic objects is not applied by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>.</p>\n        <p>The following version of <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> is used by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>. It performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>.</p>\n        <p>The abstract operation TypedArraySortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> and <var>buffer</var> values of the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Both <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) are Number or both are BigInt.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>Return <var>v</var>.</li></ol></li><li>If <var>x</var> and <var>y</var> are both <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return 1.</li><li>If <var>y</var> is <emu-val>NaN</emu-val>, return -1.</li><li>If <var>x</var> &lt; <var>y</var>, return -1.</li><li>If <var>x</var> &gt; <var>y</var>, return 1.</li><li>If <var>x</var> is <emu-val>-0</emu-val> and <var>y</var> is <emu-val>+0</emu-val>, return -1.</li><li>If <var>x</var> is <emu-val>+0</emu-val> and <var>y</var> is <emu-val>-0</emu-val>, return 1.</li><li>Return <emu-val>+0</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Because <emu-val>NaN</emu-val> always compares greater than any other value, <emu-val>NaN</emu-val> property values always sort to the end of the result when <var>comparefn</var> is not provided.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-properties-of-string-instances": {"num": "21.1.4", "title": "#sec-properties-of-string-instances Properties of String Instances", "html": "<emu-clause id=\"sec-properties-of-string-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-string-instances\">#sec-properties-of-string-instances</span> Properties of String Instances</h1>\n      <p>String instances are String exotic objects and have the internal methods specified for such objects. String instances inherit properties from the String prototype object. String instances also have a [[StringData]] internal slot.</p>\n      <p>String instances have a <emu-val>\"length\"</emu-val> property, and a set of enumerable properties with <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed names.</p>\n\n      <div id=\"excluded-sec-properties-of-string-instances-length\"><h1><span class=\"secnum\">21.1.4.1</span>#sec-properties-of-string-instances-length length</h1>...</div></emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-%typedarray%.prototype.tolocalestring", "sec-%typedarray%.prototype.reduceright", "sec-ordinaryownpropertykeys", "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact", "sec-integer-indexed-exotic-objects", "sec-%typedarray%.prototype.every", "sec-integer-indexed-exotic-objects-ownpropertykeys", "sec-array.prototype.sort", "sec-arguments-exotic-objects", "sec-%typedarray%.prototype.findindex", "sec-array-exotic-objects-defineownproperty-p-desc", "sec-%typedarray%.prototype.foreach", "sec-properties-of-array-instances-length", "sec-%typedarray%.prototype.lastindexof", "sec-object-type", "sec-%typedarray%.prototype.find", "sec-%typedarray%.prototype.indexof", "sec-%typedarray%.prototype.join", "sec-%typedarray%.prototype.includes", "sec-array-exotic-objects", "sec-properties-of-array-instances", "sec-%typedarray%.prototype.some", "sec-%typedarray%.prototype.reduce", "sec-string-exotic-objects-ownpropertykeys", "sec-string-exotic-objects", "sec-strict-mode-of-ecmascript", "sec-%typedarray%.prototype.reverse", "sec-toindex", "sec-arraysetlength", "sec-serializejsonarray", "sec-%typedarray%.prototype.sort", "sec-properties-of-string-instances"], "secData": {"sec-%typedarray%.prototype.tolocalestring": {"num": "22.2.3.28", "title": "#sec-%typedarray%.prototype.tolocalestring %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.tolocalestring\">#sec-%typedarray%.prototype.tolocalestring</span> %TypedArray%.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.toLocaleString</code> is a distinct function that implements the same algorithm as <code>Array.prototype.toLocaleString</code> as defined in <emu-xref href=\"#sec-array.prototype.tolocalestring\"><a href=\"#sec-array.prototype.tolocalestring\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.tolocalestring\">#sec-array.prototype.tolocalestring</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the ECMAScript implementation includes the ECMA-402 Internationalization API this function is based upon the algorithm for <code>Array.prototype.toLocaleString</code> that is in the ECMA-402 specification.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reduceright": {"num": "22.2.3.21", "title": "#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduceright\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduceright\">#sec-%typedarray%.prototype.reduceright</span> %TypedArray%.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduceRight</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reduceRight</code> as defined in <emu-xref href=\"#sec-array.prototype.reduceright\"><a href=\"#sec-array.prototype.reduceright\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduceright\">#sec-array.prototype.reduceright</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-ordinaryownpropertykeys": {"num": "9.1.11.1", "title": "#sec-ordinaryownpropertykeys OrdinaryOwnPropertyKeys ( O )", "html": "<emu-clause id=\"sec-ordinaryownpropertykeys\" aoid=\"OrdinaryOwnPropertyKeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryownpropertykeys\">#sec-ordinaryownpropertykeys</span> OrdinaryOwnPropertyKeys ( <var>O</var> )</h1>\n        <p>The abstract operation OrdinaryOwnPropertyKeys takes argument <var>O</var> (an Object). It performs the following steps when called:</p>\n\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each own property key <var>P</var> of <var>O</var> such that <var>P</var> is a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref>, in ascending numeric index order, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact": {"num": "D", "title": "#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact", "html": "<emu-annex id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact</span> Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact</h1>\n  <p><emu-xref href=\"#sec-candeclareglobalvar\"><a href=\"#sec-candeclareglobalvar\" class=\"excluded-xref\" excluded-id=\"sec-candeclareglobalvar\">#sec-candeclareglobalvar</a></emu-xref>-<emu-xref href=\"#sec-createglobalfunctionbinding\"><a href=\"#sec-createglobalfunctionbinding\" class=\"excluded-xref\" excluded-id=\"sec-createglobalfunctionbinding\">#sec-createglobalfunctionbinding</a></emu-xref> Edition 5 and 5.1 used a property existence test to determine whether a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property corresponding to a new global declaration already existed. ECMAScript 2015 uses an own property existence test. This corresponds to what has been most commonly implemented by web browsers.</p>\n  <p><emu-xref href=\"#sec-array-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-array-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</a></emu-xref>: The 5<sup>th</sup> Edition moved the capture of the current array length prior to the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> conversion of the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> or new length value. However, the captured length value could become invalid if the conversion process has the side-effect of changing the array length. ECMAScript 2015 specifies that the current array length must be captured after the possible occurrence of such side-effects.</p>\n  <p><emu-xref href=\"#sec-timeclip\"><a href=\"#sec-timeclip\" class=\"excluded-xref\" excluded-id=\"sec-timeclip\">#sec-timeclip</a></emu-xref>: Previous editions permitted the <emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref> abstract operation to return either <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as the representation of a 0 <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref>. ECMAScript 2015 specifies that <emu-val>+0</emu-val> always returned. This means that for ECMAScript 2015 the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> of a Date object is never observably <emu-val>-0</emu-val> and methods that return time values never return <emu-val>-0</emu-val>.</p>\n  <p><emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>: If a UTC offset representation is not present, the local time zone is used. Edition 5.1 incorrectly stated that a missing time zone should be interpreted as <emu-val>\"z\"</emu-val>.</p>\n  <p><emu-xref href=\"#sec-date.prototype.toisostring\"><a href=\"#sec-date.prototype.toisostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.toisostring\">#sec-date.prototype.toisostring</a></emu-xref>: If the year cannot be represented using the Date Time String Format specified in <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref> a RangeError exception is thrown. Previous editions did not specify the behaviour for that case.</p>\n  <p><emu-xref href=\"#sec-date.prototype.tostring\"><a href=\"#sec-date.prototype.tostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.tostring\">#sec-date.prototype.tostring</a></emu-xref>: Previous editions did not specify the value returned by <code>Date.prototype.toString</code> when <emu-xref href=\"#this-time-value\"><a href=\"#this-time-value\">this time value</a></emu-xref> is <emu-val>NaN</emu-val>. ECMAScript 2015 specifies the result to be the String value <emu-val>\"Invalid Date\"</emu-val>.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref>, <emu-xref href=\"#sec-escaperegexppattern\"><a href=\"#sec-escaperegexppattern\" class=\"excluded-xref\" excluded-id=\"sec-escaperegexppattern\">#sec-escaperegexppattern</a></emu-xref>: Any LineTerminator code points in the value of the <emu-val>\"source\"</emu-val> property of a RegExp instance must be expressed using an escape sequence. Edition 5.1 only required the escaping of <code>/</code>.</p>\n  <p><emu-xref href=\"#sec-regexp.prototype-@@match\"><a href=\"#sec-regexp.prototype-@@match\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@match\">#sec-regexp.prototype-@@match</a></emu-xref>, <emu-xref href=\"#sec-regexp.prototype-@@replace\"><a href=\"#sec-regexp.prototype-@@replace\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@replace\">#sec-regexp.prototype-@@replace</a></emu-xref>: In previous editions, the specifications for <code>String.prototype.match</code> and <code>String.prototype.replace</code> was incorrect for cases where the pattern argument was a RegExp value whose <code>global</code> flag is set. The previous specifications stated that for each attempt to match the pattern, if <code>lastIndex</code> did not change it should be incremented by 1. The correct behaviour is that <code>lastIndex</code> should be incremented by one only if the pattern matched the empty String.</p>\n  <p><emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>, <emu-xref href=\"#sec-sortcompare\"><a href=\"#sec-sortcompare\" class=\"excluded-xref\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</a></emu-xref>: Previous editions did not specify how a <emu-val>NaN</emu-val> value returned by a <var>comparefn</var> was interpreted by <code>Array.prototype.sort</code>. ECMAScript 2015 specifies that such as value is treated as if <emu-val>+0</emu-val> was returned from the <var>comparefn</var>. ECMAScript 2015 also specifies that <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> is applied to the result returned by a <var>comparefn</var>. In previous editions, the effect of a <var>comparefn</var> result that is not a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> was implementation-dependent. In practice, implementations call <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>.</p>\n</emu-annex>\n\n"}, "sec-integer-indexed-exotic-objects": {"num": "9.4.5", "title": "#sec-integer-indexed-exotic-objects Integer-Indexed Exotic Objects", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects\">#sec-integer-indexed-exotic-objects</span> Integer-Indexed Exotic Objects</h1>\n      <p>An <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> that performs special handling of <emu-xref href=\"#uint53-string\"><a href=\"#uint53-string\">Uint53-string</a></emu-xref> property keys.</p>\n      <p><emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic objects</a></emu-xref> have the same internal slots as ordinary objects and additionally [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], [[ContentType]], and [[TypedArrayName]] internal slots.</p>\n      <p>An object is an <dfn id=\"integer-indexed-exotic-object\">Integer-Indexed exotic object</dfn> if its [[GetOwnProperty]], [[HasProperty]], [[DefineOwnProperty]], [[Get]], [[Set]], and [[OwnPropertyKeys]] internal methods use the definitions in this section, and its other essential internal methods use the definitions found in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. These methods are installed by <emu-xref aoid=\"IntegerIndexedObjectCreate\"><a href=\"#sec-integerindexedobjectcreate\">IntegerIndexedObjectCreate</a></emu-xref>.</p>\n\n      <div id=\"excluded-sec-integer-indexed-exotic-objects-getownproperty-p\"><h1><span class=\"secnum\">9.4.5.1</span>#sec-integer-indexed-exotic-objects-getownproperty-p [[GetOwnProperty]] ( P )</h1>...</div><div id=\"excluded-sec-integer-indexed-exotic-objects-hasproperty-p\"><h1><span class=\"secnum\">9.4.5.2</span>#sec-integer-indexed-exotic-objects-hasproperty-p [[HasProperty]] ( P )</h1>...</div><div id=\"excluded-sec-integer-indexed-exotic-objects-defineownproperty-p-desc\"><h1><span class=\"secnum\">9.4.5.3</span>#sec-integer-indexed-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )</h1>...</div><div id=\"excluded-sec-integer-indexed-exotic-objects-get-p-receiver\"><h1><span class=\"secnum\">9.4.5.4</span>#sec-integer-indexed-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )</h1>...</div><div id=\"excluded-sec-integer-indexed-exotic-objects-set-p-v-receiver\"><h1><span class=\"secnum\">9.4.5.5</span>#sec-integer-indexed-exotic-objects-set-p-v-receiver [[Set]] ( P, V, Receiver )</h1>...</div><div id=\"excluded-sec-integer-indexed-exotic-objects-ownpropertykeys\"><h1><span class=\"secnum\">9.4.5.6</span>#sec-integer-indexed-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )</h1>...</div><div id=\"excluded-sec-integerindexedobjectcreate\"><h1><span class=\"secnum\">9.4.5.7</span>#sec-integerindexedobjectcreate IntegerIndexedObjectCreate ( prototype )</h1>...</div><div id=\"excluded-sec-isvalidintegerindex\"><h1><span class=\"secnum\">9.4.5.8</span>#sec-isvalidintegerindex IsValidIntegerIndex ( O, index )</h1>...</div><div id=\"excluded-sec-integerindexedelementget\"><h1><span class=\"secnum\">9.4.5.9</span>#sec-integerindexedelementget IntegerIndexedElementGet ( O, index )</h1>...</div><div id=\"excluded-sec-integerindexedelementset\"><h1><span class=\"secnum\">9.4.5.10</span>#sec-integerindexedelementset IntegerIndexedElementSet ( O, index, value )</h1>...</div></emu-clause>\n\n    "}, "sec-%typedarray%.prototype.every": {"num": "22.2.3.7", "title": "#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.every\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.every\">#sec-%typedarray%.prototype.every</span> %TypedArray%.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.every</code> is a distinct function that implements the same algorithm as <code>Array.prototype.every</code> as defined in <emu-xref href=\"#sec-array.prototype.every\"><a href=\"#sec-array.prototype.every\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.every\">#sec-array.prototype.every</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-integer-indexed-exotic-objects-ownpropertykeys": {"num": "9.4.5.6", "title": "#sec-integer-indexed-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-ownpropertykeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-ownpropertykeys\">#sec-integer-indexed-exotic-objects-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n        <p>When the [[OwnPropertyKeys]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> starting with 0 such that <var>i</var> &lt; <var>len</var>, in ascending order, do<ol><li>Add !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>i</var>) as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not a <emu-xref href=\"#uint53-string\"><a href=\"#uint53-string\">Uint53-string</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.sort": {"num": "22.1.3.27", "title": "#sec-array.prototype.sort Array.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-array.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</span> Array.prototype.sort ( <var>comparefn</var> )</h1>\n        <p>The elements of this array are sorted. The sort must be stable (that is, elements that compare equal must remain in their original order). If <var>comparefn</var> is not <emu-val>undefined</emu-val>, it should be a function that accepts two arguments <var>x</var> and <var>y</var> and returns a negative value if <var>x</var> &lt; <var>y</var>, zero if <var>x</var> = <var>y</var>, or a positive value if <var>x</var> &gt; <var>y</var>.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>obj</var>).</li></ol></emu-alg>\n        <p>Within this specification of the <code>sort</code> method, an object, <var>obj</var>, is said to be <em>sparse</em> if the following algorithm returns <emu-val>true</emu-val>:</p>\n        <emu-alg><ol><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> in the range 0 &#8804; <var>i</var> &lt; <var>len</var>, do<ol><li>Let <var>elem</var> be <var>obj</var>.[[GetOwnProperty]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>i</var>)).</li><li>If <var>elem</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <p>The <em>sort order</em> is the ordering, after completion of this function, of the values of the <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties of <var>obj</var> whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> indexes are less than <var>len</var>. The result of the <code>sort</code> function is then determined as follows:</p>\n        <p>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and is not a consistent comparison function for the elements of this array (see below), the sort order is implementation-defined. The sort order is also implementation-defined if <var>comparefn</var> is <emu-val>undefined</emu-val> and <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> does not act as a consistent comparison function.</p>\n        <p>Let <var>proto</var> be <var>obj</var>.[[GetPrototypeOf]](). If <var>proto</var> is not <emu-val>null</emu-val> and there exists an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> such that all of the conditions below are satisfied then the sort order is implementation-defined:</p>\n        <ul>\n          <li>\n            <var>obj</var> is sparse\n          </li>\n          <li>\n            0 &#8804; <var>j</var> &lt; <var>len</var>\n          </li>\n          <li>\n            <emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>proto</var>, <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>j</var>)) is <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>The sort order is also implementation-defined if <var>obj</var> is sparse and any of the following conditions are true:</p>\n        <ul>\n          <li>\n            <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>obj</var>) is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            Any <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> property of <var>obj</var> whose name is a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var> is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> whose [[Configurable]] attribute is <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <p>The sort order is also implementation-defined if any of the following conditions are true:</p>\n        <ul>\n          <li>\n            If <var>obj</var> is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> (including Proxy exotic objects) whose behaviour for [[Get]], [[Set]], [[Delete]], and [[GetOwnProperty]] is not the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> implementation of these internal methods.\n          </li>\n          <li>\n            If any index property of <var>obj</var> whose name is a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> or is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> whose [[Writable]] attribute is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and the application of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> to any value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> modifies <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and all applications of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, to any specific value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>, do not produce the same result.\n          </li>\n        </ul>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Perform an implementation-dependent sequence of calls to the <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>, <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>, <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>, and <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref> abstract operation with <var>obj</var> as the first argument, and to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> (described below), such that:<ul><li>The property key argument for each call to <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>, <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>, <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>, or <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref> is the string representation of a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than <var>len</var>.</li><li>The <code>Throw</code> argument for every call to <emu-xref href=\"#sec-set-o-p-v-throw\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref> is <emu-val>true</emu-val>.</li><li>The arguments for calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> are values returned by a previous call to the <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref> abstract operation, unless the properties accessed by those previous calls did not exist according to <emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>. If both prospective arguments to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> correspond to non-existent properties, use <emu-val>+0</emu-val> instead of calling <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>. If only the first prospective argument is non-existent use +1. If only the second prospective argument is non-existent use -1.</li><li>If <var>obj</var> is not sparse then <emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref> must not be called.</li><li>If an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> is returned from any of these operations, it is immediately returned as the value of this function.</li></ul></li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        <p>Unless the sort order is specified above to be implementation-defined, the returned object must have the following two characteristics:</p>\n        <ul>\n          <li>\n            There must be some mathematical permutation &#960; of the nonnegative integers less than <var>len</var>, such that for every nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> less than <var>len</var>, if property <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> existed, then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn> is exactly the same value as <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn>. But if property <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> did not exist, then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn> does not exist.\n          </li>\n          <li>\n            Then for all nonnegative integers <var>j</var> and <var>k</var>, each less than <var>len</var>, if <emu-eqn class=\"inline\"><emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>(old[<var>j</var>], old[<var>k</var>]) &lt; 0</emu-eqn> (see <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> below), then <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)] &lt; new[&#960;(<var>k</var>)]</emu-eqn>.\n          </li>\n        </ul>\n        <p>Here the notation <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is used to refer to the hypothetical result of calling <emu-eqn class=\"inline\"><emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>j</var>)</emu-eqn> before this function is executed, and the notation <emu-eqn class=\"inline\">new[<var>j</var>]</emu-eqn> to refer to the hypothetical result of calling <emu-eqn class=\"inline\"><emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>j</var>)</emu-eqn> after this function has been executed.</p>\n        <p>A function <var>comparefn</var> is a consistent comparison function for a set of values <var>S</var> if all of the requirements below are met for all values <var>a</var>, <var>b</var>, and <var>c</var> (possibly the same value) in the set <var>S</var>: The notation <emu-eqn class=\"inline\"><var>a</var> &lt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &lt; 0</emu-eqn>; <emu-eqn class=\"inline\"><var>a</var> =<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) = 0</emu-eqn> (of either sign); and <emu-eqn class=\"inline\"><var>a</var> &gt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &gt; 0</emu-eqn>.</p>\n        <ul>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) always returns the same value <var>v</var> when given a specific pair of values <var>a</var> and <var>b</var> as its two arguments. Furthermore, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, and <var>v</var> is not <emu-val>NaN</emu-val>. Note that this implies that exactly one of <var>a</var> &lt;<sub>CF</sub> <var>b</var>, <var>a</var> =<sub>CF</sub> <var>b</var>, and <var>a</var> &gt;<sub>CF</sub> <var>b</var> will be true for a given pair of <var>a</var> and <var>b</var>.\n          </li>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) does not modify <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            <var>a</var> =<sub>CF</sub> <var>a</var> (reflexivity)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var>, then <var>b</var> =<sub>CF</sub> <var>a</var> (symmetry)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var> and <var>b</var> =<sub>CF</sub> <var>c</var>, then <var>a</var> =<sub>CF</sub> <var>c</var> (transitivity of =<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &lt;<sub>CF</sub> <var>b</var> and <var>b</var> &lt;<sub>CF</sub> <var>c</var>, then <var>a</var> &lt;<sub>CF</sub> <var>c</var> (transitivity of &lt;<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &gt;<sub>CF</sub> <var>b</var> and <var>b</var> &gt;<sub>CF</sub> <var>c</var>, then <var>a</var> &gt;<sub>CF</sub> <var>c</var> (transitivity of &gt;<sub>CF</sub>)\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The above conditions are necessary and sufficient to ensure that <var>comparefn</var> divides the set <var>S</var> into equivalence classes and that these equivalence classes are totally ordered.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>sort</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-sortcompare\"><h1><span class=\"secnum\">22.1.3.27.1</span>#sec-sortcompare Runtime Semantics: SortCompare ( x, y )</h1>...</div></emu-clause>\n\n      "}, "sec-arguments-exotic-objects": {"num": "9.4.4", "title": "#sec-arguments-exotic-objects Arguments Exotic Objects", "html": "<emu-clause id=\"sec-arguments-exotic-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</span> Arguments Exotic Objects</h1>\n\n      <p>Most ECMAScript functions make an arguments object available to their code. Depending upon the characteristics of the function definition, its arguments object is either an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> or an <emu-xref href=\"#arguments-exotic-object\"><a href=\"#arguments-exotic-object\">arguments exotic object</a></emu-xref>. An <emu-xref href=\"#arguments-exotic-object\"><a href=\"#arguments-exotic-object\">arguments exotic object</a></emu-xref> is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint32-indexed</a></emu-xref> properties map to the formal parameters bindings of an invocation of its associated ECMAScript function.</p>\n\n      <p>An object is an <dfn id=\"arguments-exotic-object\">arguments exotic object</dfn> if its internal methods use the following implementations, with the ones not specified here using those found in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. These methods are installed in <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>.</p>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>While <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref> is grouped into this clause, it creates an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>, not an <emu-xref href=\"#arguments-exotic-object\"><a href=\"#arguments-exotic-object\">arguments exotic object</a></emu-xref>.</p>\n      </div></emu-note>\n\n      <p>Arguments exotic objects have the same internal slots as ordinary objects. They also have a [[ParameterMap]] internal slot. Ordinary arguments objects also have a [[ParameterMap]] internal slot whose value is always undefined. For ordinary argument objects the [[ParameterMap]] internal slot is only used by <code>Object.prototype.toString</code> (<emu-xref href=\"#sec-object.prototype.tostring\"><a href=\"#sec-object.prototype.tostring\" class=\"excluded-xref\" excluded-id=\"sec-object.prototype.tostring\">#sec-object.prototype.tostring</a></emu-xref>) to identify them as such.</p>\n\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint32-indexed</a></emu-xref> data properties of an <emu-xref href=\"#arguments-exotic-object\"><a href=\"#arguments-exotic-object\">arguments exotic object</a></emu-xref> whose numeric name values are less than the number of formal parameters of the corresponding <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> initially share their values with the corresponding argument bindings in the function's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>. This means that changing the property changes the corresponding value of the argument binding and vice-versa. This correspondence is broken if such a property is deleted and then redefined or if the property is changed into an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>. If the arguments object is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>, the values of its properties are simply a copy of the arguments passed to the function and there is no dynamic linkage between the property values and the formal parameter values.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>The ParameterMap object and its property values are used as a device for specifying the arguments object correspondence to argument bindings. The ParameterMap object and the objects that are the values of its properties are not directly observable from ECMAScript code. An ECMAScript implementation does not need to actually create or use such objects to implement the specified semantics.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Ordinary arguments objects define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> named <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access. The <emu-val>\"callee\"</emu-val> property has a more specific meaning for arguments exotic objects, which are created only for some class of non-strict functions. The definition of this property in the ordinary variant exists to ensure that it is not defined in any other manner by conforming ECMAScript implementations.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n        <p>ECMAScript implementations of arguments exotic objects have historically contained an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> named <emu-val>\"caller\"</emu-val>. Prior to ECMAScript 2017, this specification included the definition of a throwing <emu-val>\"caller\"</emu-val> property on ordinary arguments objects. Since implementations do not contain this extension any longer, ECMAScript 2017 dropped the requirement for a throwing <emu-val>\"caller\"</emu-val> accessor.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-arguments-exotic-objects-getownproperty-p\"><h1><span class=\"secnum\">9.4.4.1</span>#sec-arguments-exotic-objects-getownproperty-p [[GetOwnProperty]] ( P )</h1>...</div><div id=\"excluded-sec-arguments-exotic-objects-defineownproperty-p-desc\"><h1><span class=\"secnum\">9.4.4.2</span>#sec-arguments-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )</h1>...</div><div id=\"excluded-sec-arguments-exotic-objects-get-p-receiver\"><h1><span class=\"secnum\">9.4.4.3</span>#sec-arguments-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )</h1>...</div><div id=\"excluded-sec-arguments-exotic-objects-set-p-v-receiver\"><h1><span class=\"secnum\">9.4.4.4</span>#sec-arguments-exotic-objects-set-p-v-receiver [[Set]] ( P, V, Receiver )</h1>...</div><div id=\"excluded-sec-arguments-exotic-objects-delete-p\"><h1><span class=\"secnum\">9.4.4.5</span>#sec-arguments-exotic-objects-delete-p [[Delete]] ( P )</h1>...</div><div id=\"excluded-sec-createunmappedargumentsobject\"><h1><span class=\"secnum\">9.4.4.6</span>#sec-createunmappedargumentsobject CreateUnmappedArgumentsObject ( argumentsList )</h1>...</div><div id=\"excluded-sec-createmappedargumentsobject\"><h1><span class=\"secnum\">9.4.4.7</span>#sec-createmappedargumentsobject CreateMappedArgumentsObject ( func, formals, argumentsList, env )</h1>...</div></emu-clause>\n\n    "}, "sec-%typedarray%.prototype.findindex": {"num": "22.2.3.11", "title": "#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.findindex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.findindex\">#sec-%typedarray%.prototype.findindex</span> %TypedArray%.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.findIndex</code> is a distinct function that implements the same algorithm as <code>Array.prototype.findIndex</code> as defined in <emu-xref href=\"#sec-array.prototype.findindex\"><a href=\"#sec-array.prototype.findindex\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.findindex\">#sec-array.prototype.findindex</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-array-exotic-objects-defineownproperty-p-desc": {"num": "9.4.2.1", "title": "#sec-array-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )", "html": "<emu-clause id=\"sec-array-exotic-objects-defineownproperty-p-desc\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h1>\n        <p>When the [[DefineOwnProperty]] internal method of an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> <var>A</var> is called with property key <var>P</var>, and <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>P</var> is <emu-val>\"length\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"ArraySetLength\"><a href=\"#sec-arraysetlength\">ArraySetLength</a></emu-xref>(<var>A</var>, <var>Desc</var>).</li></ol></li><li>Else if <var>P</var> is a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref>, then<ol><li>Let <var>oldLenDesc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>oldLenDesc</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLenDesc</var>.[[Configurable]] is <emu-val>false</emu-val>.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>oldLen</var>) is <emu-val>true</emu-val>.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> &#8805; <var>oldLen</var> and <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <var>P</var>, <var>Desc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>index</var> &#8805; <var>oldLen</var>, then<ol><li>Set <var>oldLenDesc</var>.[[Value]] to <var>index</var> + 1.</li><li>Let <var>succeeded</var> be <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>oldLenDesc</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>succeeded</var> is <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <var>P</var>, <var>Desc</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.foreach": {"num": "22.2.3.12", "title": "#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.foreach\">#sec-%typedarray%.prototype.foreach</span> %TypedArray%.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.forEach</code> is a distinct function that implements the same algorithm as <code>Array.prototype.forEach</code> as defined in <emu-xref href=\"#sec-array.prototype.foreach\"><a href=\"#sec-array.prototype.foreach\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.foreach\">#sec-array.prototype.foreach</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-properties-of-array-instances-length": {"num": "22.1.4.1", "title": "#sec-properties-of-array-instances-length length", "html": "<emu-clause id=\"sec-properties-of-array-instances-length\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-array-instances-length\">#sec-properties-of-array-instances-length</span> length</h1>\n        <p>The <emu-val>\"length\"</emu-val> property of an Array instance is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> whose value is always numerically greater than the name of every configurable own property whose name is a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref>.</p>\n        <p>The <emu-val>\"length\"</emu-val> property initially has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Reducing the value of the <emu-val>\"length\"</emu-val> property has the side-effect of deleting own array elements whose index is between the old and new length values. However, non-configurable properties can not be deleted. Attempting to set the <emu-val>\"length\"</emu-val> property of an Array object to a value that is numerically less than or equal to the largest numeric own <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> of an existing non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint32-indexed</a></emu-xref> property of the array will result in the length being set to a numeric value that is one greater than that non-configurable numeric own <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>. See <emu-xref href=\"#sec-array-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-array-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.lastindexof": {"num": "22.2.3.17", "title": "#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.lastindexof\">#sec-%typedarray%.prototype.lastindexof</span> %TypedArray%.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.lastIndexOf</code> is a distinct function that implements the same algorithm as <code>Array.prototype.lastIndexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.lastindexof\"><a href=\"#sec-array.prototype.lastindexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-object-type": {"num": "6.1.7", "title": "#sec-object-type The Object Type", "html": "<emu-clause id=\"sec-object-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-type\">#sec-object-type</span> The Object Type</h1>\n      <p>An Object is logically a collection of properties. Each property is either a data property, or an accessor property:</p>\n      <ul>\n        <li>\n          A <dfn>data property</dfn> associates a key value with an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> and a set of Boolean attributes.\n        </li>\n        <li>\n          An <dfn>accessor property</dfn> associates a key value with one or two accessor functions, and a set of Boolean attributes. The accessor functions are used to store or retrieve an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> that is associated with the property.\n        </li>\n      </ul>\n      <p>Properties are identified using key values. A property key value is either an ECMAScript String value or a Symbol value. All String and Symbol values, including the empty String, are valid as property keys. A <dfn id=\"property-name\">property name</dfn> is a property key that is a String value.</p>\n      <p>A <dfn id=\"uint53-string\" oldids=\"integer-index\">Uint53-string<span id=\"integer-index\"></span></dfn> is a String-valued property key that is a canonical numeric String (see <emu-xref href=\"#sec-canonicalnumericindexstring\"><a href=\"#sec-canonicalnumericindexstring\" class=\"excluded-xref\" excluded-id=\"sec-canonicalnumericindexstring\">#sec-canonicalnumericindexstring</a></emu-xref>) and whose numeric value is either <emu-val>+0</emu-val> or a positive <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> &#8804; 2<sup>53</sup> - 1. A <dfn id=\"uint32-string\" oldids=\"array-index\">Uint32-string<span id=\"array-index\"></span></dfn> is a <emu-xref href=\"#uint53-string\"><a href=\"#uint53-string\">Uint53-string</a></emu-xref> whose numeric value <var>i</var> is in the range <emu-eqn class=\"inline\">+0 &#8804; <var>i</var> &lt; 2<sup>32</sup> - 1</emu-eqn>.</p>\n      <p>A <dfn>Uint53-indexed</dfn> property is one whose property key is a <emu-xref href=\"#uint53-string\"><a href=\"#uint53-string\">Uint53-string</a></emu-xref>. Similarly, a <dfn>Uint32-indexed</dfn> property is one whose property key is a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref>.</p>\n      <p>Property keys are used to access properties and their values. There are two kinds of access for properties: <em>get</em> and <em>set</em>, corresponding to value retrieval and assignment, respectively. The properties accessible via get and set access includes both <em>own properties</em> that are a direct part of an object and <em>inherited properties</em> which are provided by another associated object via a property inheritance relationship. Inherited properties may be either own or inherited properties of the associated object. Each own property of an object must each have a key value that is distinct from the key values of the other own properties of that object.</p>\n      <p>All objects are logically collections of properties, but there are multiple forms of objects that differ in their semantics for accessing and manipulating their properties. Please see <emu-xref href=\"#sec-object-internal-methods-and-internal-slots\"><a href=\"#sec-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-object-internal-methods-and-internal-slots\">#sec-object-internal-methods-and-internal-slots</a></emu-xref> for definitions of the multiple forms of objects.</p>\n\n      <div id=\"excluded-sec-property-attributes\"><h1><span class=\"secnum\">6.1.7.1</span>#sec-property-attributes Property Attributes</h1>...</div><div id=\"excluded-sec-object-internal-methods-and-internal-slots\"><h1><span class=\"secnum\">6.1.7.2</span>#sec-object-internal-methods-and-internal-slots Object Internal Methods and Internal Slots</h1>...</div><div id=\"excluded-sec-invariants-of-the-essential-internal-methods\"><h1><span class=\"secnum\">6.1.7.3</span>#sec-invariants-of-the-essential-internal-methods Invariants of the Essential Internal Methods</h1>...</div><div id=\"excluded-sec-well-known-intrinsic-objects\"><h1><span class=\"secnum\">6.1.7.4</span>#sec-well-known-intrinsic-objects Well-Known Intrinsic Objects</h1>...</div></emu-clause>\n  "}, "sec-%typedarray%.prototype.find": {"num": "22.2.3.10", "title": "#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.find\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.find\">#sec-%typedarray%.prototype.find</span> %TypedArray%.prototype.find ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.find</code> is a distinct function that implements the same algorithm as <code>Array.prototype.find</code> as defined in <emu-xref href=\"#sec-array.prototype.find\"><a href=\"#sec-array.prototype.find\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.find\">#sec-array.prototype.find</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.indexof": {"num": "22.2.3.14", "title": "#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.indexof\">#sec-%typedarray%.prototype.indexof</span> %TypedArray%.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.indexOf</code> is a distinct function that implements the same algorithm as <code>Array.prototype.indexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.indexof\"><a href=\"#sec-array.prototype.indexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.join": {"num": "22.2.3.15", "title": "#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.join\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.join\">#sec-%typedarray%.prototype.join</span> %TypedArray%.prototype.join ( <var>separator</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.join</code> is a distinct function that implements the same algorithm as <code>Array.prototype.join</code> as defined in <emu-xref href=\"#sec-array.prototype.join\"><a href=\"#sec-array.prototype.join\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.join\">#sec-array.prototype.join</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.includes": {"num": "22.2.3.13", "title": "#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.includes\">#sec-%typedarray%.prototype.includes</span> %TypedArray%.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.includes</code> is a distinct function that implements the same algorithm as <code>Array.prototype.includes</code> as defined in <emu-xref href=\"#sec-array.prototype.includes\"><a href=\"#sec-array.prototype.includes\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.includes\">#sec-array.prototype.includes</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-array-exotic-objects": {"num": "9.4.2", "title": "#sec-array-exotic-objects Array Exotic Objects", "html": "<emu-clause id=\"sec-array-exotic-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-exotic-objects\">#sec-array-exotic-objects</span> Array Exotic Objects</h1>\n      <p>An Array object is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> that gives special treatment to <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref> property keys (see <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\" class=\"excluded-xref\" excluded-id=\"sec-object-type\">#sec-object-type</a></emu-xref>). A property whose <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> is a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref> is also called an <em>element</em>. Every Array object has a non-configurable <emu-val>\"length\"</emu-val> property whose value is always a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> less than 2<sup>32</sup>. The value of the <emu-val>\"length\"</emu-val> property is numerically greater than the name of every own property whose name is a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref>; whenever an own property of an Array object is created or changed, other properties are adjusted as necessary to maintain this invariant. Specifically, whenever an own property is added whose name is a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref>, the value of the <emu-val>\"length\"</emu-val> property is changed, if necessary, to be one more than the numeric value of that <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref>; and whenever the value of the <emu-val>\"length\"</emu-val> property is changed, every own property whose name is a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref> whose value is not smaller than the new length is deleted. This constraint applies only to own properties of an Array object and is unaffected by <emu-val>\"length\"</emu-val> or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint32-indexed</a></emu-xref> properties that may be inherited from its prototypes.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A String <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> <var>P</var> is a <em><emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref></em> if and only if <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>)) is equal to <var>P</var> and <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>) is not equal to <emu-eqn class=\"inline\">2<sup>32</sup> - 1</emu-eqn>.</p>\n      </div></emu-note>\n\n      <p>An object is an <dfn id=\"array-exotic-object\">Array exotic object</dfn> (or simply, an Array object) if its [[DefineOwnProperty]] internal method uses the following implementation, and its other essential internal methods use the definitions found in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. These methods are installed in <emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>.</p>\n\n      <div id=\"excluded-sec-array-exotic-objects-defineownproperty-p-desc\"><h1><span class=\"secnum\">9.4.2.1</span>#sec-array-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )</h1>...</div><div id=\"excluded-sec-arraycreate\"><h1><span class=\"secnum\">9.4.2.2</span>#sec-arraycreate ArrayCreate ( length [ , proto ] )</h1>...</div><div id=\"excluded-sec-arrayspeciescreate\"><h1><span class=\"secnum\">9.4.2.3</span>#sec-arrayspeciescreate ArraySpeciesCreate ( originalArray, length )</h1>...</div><div id=\"excluded-sec-arraysetlength\"><h1><span class=\"secnum\">9.4.2.4</span>#sec-arraysetlength ArraySetLength ( A, Desc )</h1>...</div></emu-clause>\n\n    "}, "sec-properties-of-array-instances": {"num": "22.1.4", "title": "#sec-properties-of-array-instances Properties of Array Instances", "html": "<emu-clause id=\"sec-properties-of-array-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-array-instances\">#sec-properties-of-array-instances</span> Properties of Array Instances</h1>\n      <p>Array instances are Array exotic objects and have the internal methods specified for such objects. Array instances inherit properties from the Array prototype object.</p>\n      <p>Array instances have a <emu-val>\"length\"</emu-val> property, and a set of enumerable properties with <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref> names.</p>\n\n      <div id=\"excluded-sec-properties-of-array-instances-length\"><h1><span class=\"secnum\">22.1.4.1</span>#sec-properties-of-array-instances-length length</h1>...</div></emu-clause>\n\n    "}, "sec-%typedarray%.prototype.some": {"num": "22.2.3.25", "title": "#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.some\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.some\">#sec-%typedarray%.prototype.some</span> %TypedArray%.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.some</code> is a distinct function that implements the same algorithm as <code>Array.prototype.some</code> as defined in <emu-xref href=\"#sec-array.prototype.some\"><a href=\"#sec-array.prototype.some\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.some\">#sec-array.prototype.some</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reduce": {"num": "22.2.3.20", "title": "#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduce\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduce\">#sec-%typedarray%.prototype.reduce</span> %TypedArray%.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduce</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reduce</code> as defined in <emu-xref href=\"#sec-array.prototype.reduce\"><a href=\"#sec-array.prototype.reduce\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduce\">#sec-array.prototype.reduce</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-string-exotic-objects-ownpropertykeys": {"num": "9.4.3.3", "title": "#sec-string-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-string-exotic-objects-ownpropertykeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-exotic-objects-ownpropertykeys\">#sec-string-exotic-objects-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n        <p>When the [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> <var>O</var> is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>str</var> be <var>O</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>len</var> be the length of <var>str</var>.</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> starting with 0 such that <var>i</var> &lt; <var>len</var>, in ascending order, do<ol><li>Add !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>i</var>) as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <var>P</var> is a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref> and <emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>P</var>) &#8805; <var>len</var>, in ascending numeric index order, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string-exotic-objects": {"num": "9.4.3", "title": "#sec-string-exotic-objects String Exotic Objects", "html": "<emu-clause id=\"sec-string-exotic-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-exotic-objects\">#sec-string-exotic-objects</span> String Exotic Objects</h1>\n      <p>A String object is an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> that encapsulates a String value and exposes virtual <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> data properties corresponding to the individual code unit elements of the String value. String exotic objects always have a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> named <emu-val>\"length\"</emu-val> whose value is the number of code unit elements in the encapsulated String value. Both the code unit data properties and the <emu-val>\"length\"</emu-val> property are non-writable and non-configurable.</p>\n\n      <p>An object is a <dfn id=\"string-exotic-object\">String exotic object</dfn> (or simply, a String object) if its [[GetOwnProperty]], [[DefineOwnProperty]], and [[OwnPropertyKeys]] internal methods use the following implementations, and its other essential internal methods use the definitions found in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. These methods are installed in <emu-xref aoid=\"StringCreate\"><a href=\"#sec-stringcreate\">StringCreate</a></emu-xref>.</p>\n\n      <p>String exotic objects have the same internal slots as ordinary objects. They also have a [[StringData]] internal slot.</p>\n\n      <div id=\"excluded-sec-string-exotic-objects-getownproperty-p\"><h1><span class=\"secnum\">9.4.3.1</span>#sec-string-exotic-objects-getownproperty-p [[GetOwnProperty]] ( P )</h1>...</div><div id=\"excluded-sec-string-exotic-objects-defineownproperty-p-desc\"><h1><span class=\"secnum\">9.4.3.2</span>#sec-string-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )</h1>...</div><div id=\"excluded-sec-string-exotic-objects-ownpropertykeys\"><h1><span class=\"secnum\">9.4.3.3</span>#sec-string-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )</h1>...</div><div id=\"excluded-sec-stringcreate\"><h1><span class=\"secnum\">9.4.3.4</span>#sec-stringcreate StringCreate ( value, prototype )</h1>...</div><div id=\"excluded-sec-stringgetownproperty\"><h1><span class=\"secnum\">9.4.3.5</span>#sec-stringgetownproperty StringGetOwnProperty ( S, P )</h1>...</div></emu-clause>\n\n    "}, "sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are reserved words within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must not extend, as described in <emu-xref href=\"#sec-additional-syntax-numeric-literals\"><a href=\"#sec-additional-syntax-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-numeric-literals\">#sec-additional-syntax-numeric-literals</a></emu-xref>, the syntax of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt>, nor extend the syntax of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt>.\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, may not extend the syntax of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> as described in <emu-xref href=\"#sec-additional-syntax-string-literals\"><a href=\"#sec-additional-syntax-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</a></emu-xref>.\n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot has the value <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the StringValue <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    </li>\n    <li>\n      Arguments objects for strict functions define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    </li>\n    <li>\n      Arguments objects for strict functions do not dynamically share the values of their <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint32-indexed</a></emu-xref> properties with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    </li>\n    <li>\n      For strict functions, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the StringValue of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a Function, Generator, or AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-%typedarray%.prototype.reverse": {"num": "22.2.3.22", "title": "#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reverse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reverse\">#sec-%typedarray%.prototype.reverse</span> %TypedArray%.prototype.reverse ( )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reverse</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reverse</code> as defined in <emu-xref href=\"#sec-array.prototype.reverse\"><a href=\"#sec-array.prototype.reverse\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reverse\">#sec-array.prototype.reverse</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-toindex": {"num": "7.1.22", "title": "#sec-toindex ToIndex ( value )", "html": "<emu-clause id=\"sec-toindex\" aoid=\"ToIndex\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toindex\">#sec-toindex</span> ToIndex ( <var>value</var> )</h1>\n      <p>The abstract operation ToIndex takes argument <var>value</var>. It returns <var>value</var> argument converted to a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> if it is a valid <emu-xref href=\"#uint53-string\"><a href=\"#uint53-string\">Uint53-string</a></emu-xref> value. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>index</var> be 0.</li></ol></li><li>Else,<ol><li>Let <var>integerIndex</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>If <var>integerIndex</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<var>integerIndex</var>).</li><li>If !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>integerIndex</var>, <var>index</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-arraysetlength": {"num": "9.4.2.4", "title": "#sec-arraysetlength ArraySetLength ( A, Desc )", "html": "<emu-clause id=\"sec-arraysetlength\" aoid=\"ArraySetLength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraysetlength\">#sec-arraysetlength</span> ArraySetLength ( <var>A</var>, <var>Desc</var> )</h1>\n        <p>The abstract operation ArraySetLength takes arguments <var>A</var> (an Array object) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>Desc</var>.[[Value]] is absent, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>Desc</var>).</li></ol></li><li>Let <var>newLenDesc</var> be a copy of <var>Desc</var>.</li><li>Let <var>newLen</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li>Let <var>numberLen</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li>If <var>newLen</var> &#8800; <var>numberLen</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Set <var>newLenDesc</var>.[[Value]] to <var>newLen</var>.</li><li>Let <var>oldLenDesc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>oldLenDesc</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLenDesc</var>.[[Configurable]] is <emu-val>false</emu-val>.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li>If <var>newLen</var> &#8805; <var>oldLen</var>, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li></ol></li><li>If <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>newLenDesc</var>.[[Writable]] is absent or has the value <emu-val>true</emu-val>, let <var>newWritable</var> be <emu-val>true</emu-val>.</li><li>Else,<ol><li>NOTE: Setting the [[Writable]] attribute to <emu-val>false</emu-val> is deferred in case any elements cannot be deleted.</li><li>Let <var>newWritable</var> be <emu-val>false</emu-val>.</li><li>Set <var>newLenDesc</var>.[[Writable]] to <emu-val>true</emu-val>.</li></ol></li><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>For each own property key <var>P</var> of <var>A</var> that is a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref>, whose numeric value is greater than or equal to <var>newLen</var>, in descending numeric index order, do<ol><li>Let <var>deleteSucceeded</var> be ! <var>A</var>.[[Delete]](<var>P</var>).</li><li>If <var>deleteSucceeded</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>newLenDesc</var>.[[Value]] to !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>) + 1.</li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, set <var>newLenDesc</var>.[[Writable]] to <emu-val>false</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Writable]]: <emu-val>false</emu-val> }).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>succeeded</var> is <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>In steps 3 and 4, if <var>Desc</var>.[[Value]] is an object then its <code>valueOf</code> method is called twice. This is legacy behaviour that was specified with this effect starting with the 2<sup>nd</sup> Edition of this specification.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-serializejsonarray": {"num": "24.5.2.5", "title": "#sec-serializejsonarray Runtime Semantics: SerializeJSONArray ( state, value )", "html": "<emu-clause id=\"sec-serializejsonarray\" aoid=\"SerializeJSONArray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonarray\">#sec-serializejsonarray</span> Runtime Semantics: SerializeJSONArray ( <var>state</var>, <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONArray takes arguments <var>state</var> and <var>value</var>. It serializes an array. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>state</var>.[[Stack]] contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>state</var>.[[Stack]].</li><li>Let <var>stepback</var> be <var>state</var>.[[Indent]].</li><li>Set <var>state</var>.[[Indent]] to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>state</var>.[[Indent]] and <var>state</var>.[[Gap]].</li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>value</var>).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>state</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>), <var>value</var>).</li><li>If <var>strP</var> is <emu-val>undefined</emu-val>, then<ol><li>Append <emu-val>\"null\"</emu-val> to <var>partial</var>.</li></ol></li><li>Else,<ol><li>Append <var>strP</var> to <var>partial</var>.</li></ol></li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <emu-val>\"[]\"</emu-val>.</li></ol></li><li>Else,<ol><li>If <var>state</var>.[[Gap]] is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"[\"</emu-val>, <var>properties</var>, and <emu-val>\"]\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>state</var>.[[Indent]].</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"[\"</emu-val>, the code unit 0x000A (LINE FEED), <var>state</var>.[[Indent]], <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <emu-val>\"]\"</emu-val>.</li></ol></li></ol></li><li>Remove the last element of <var>state</var>.[[Stack]].</li><li>Set <var>state</var>.[[Indent]] to <var>stepback</var>.</li><li>Return <var>final</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The representation of arrays includes only the elements between zero and <emu-eqn class=\"inline\"><code>array.length</code> - 1</emu-eqn> inclusive. Any property whose key is not a <emu-xref href=\"#uint32-string\"><a href=\"#uint32-string\">Uint32-string</a></emu-xref> is excluded from the stringification. An array is stringified as an opening LEFT SQUARE BRACKET, elements separated by COMMA, and a closing RIGHT SQUARE BRACKET.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.sort": {"num": "22.2.3.26", "title": "#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.sort\">#sec-%typedarray%.prototype.sort</span> %TypedArray%.prototype.sort ( <var>comparefn</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> is a distinct function that, except as described below, implements the same requirements as those of <code>Array.prototype.sort</code> as defined in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>. The implementation of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> specification may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">Uint53-indexed</a></emu-xref> properties are not sparse. The only internal methods of the <emu-val>this</emu-val> value that the algorithm may call are [[Get]] and [[Set]].</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function. These steps are used instead of the entry steps in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>obj</var>).</li><li>Let <var>len</var> be <var>obj</var>.[[ArrayLength]].</li></ol></emu-alg>\n        <p>The implementation-defined sort order condition for exotic objects is not applied by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>.</p>\n        <p>The following version of <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> is used by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>. It performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>.</p>\n        <p>The abstract operation TypedArraySortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> and <var>buffer</var> values of the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Both <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) are Number or both are BigInt.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>Return <var>v</var>.</li></ol></li><li>If <var>x</var> and <var>y</var> are both <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return 1.</li><li>If <var>y</var> is <emu-val>NaN</emu-val>, return -1.</li><li>If <var>x</var> &lt; <var>y</var>, return -1.</li><li>If <var>x</var> &gt; <var>y</var>, return 1.</li><li>If <var>x</var> is <emu-val>-0</emu-val> and <var>y</var> is <emu-val>+0</emu-val>, return -1.</li><li>If <var>x</var> is <emu-val>+0</emu-val> and <var>y</var> is <emu-val>-0</emu-val>, return 1.</li><li>Return <emu-val>+0</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Because <emu-val>NaN</emu-val> always compares greater than any other value, <emu-val>NaN</emu-val> property values always sort to the end of the result when <var>comparefn</var> is not provided.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-properties-of-string-instances": {"num": "21.1.4", "title": "#sec-properties-of-string-instances Properties of String Instances", "html": "<emu-clause id=\"sec-properties-of-string-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-string-instances\">#sec-properties-of-string-instances</span> Properties of String Instances</h1>\n      <p>String instances are String exotic objects and have the internal methods specified for such objects. String instances inherit properties from the String prototype object. String instances also have a [[StringData]] internal slot.</p>\n      <p>String instances have a <emu-val>\"length\"</emu-val> property, and a set of enumerable properties with <emu-xref href=\"#uint53-string\"><a href=\"#uint53-string\">Uint53-string</a></emu-xref> names.</p>\n\n      <div id=\"excluded-sec-properties-of-string-instances-length\"><h1><span class=\"secnum\">21.1.4.1</span>#sec-properties-of-string-instances-length length</h1>...</div></emu-clause>\n\n    "}}, "figData": {}}}