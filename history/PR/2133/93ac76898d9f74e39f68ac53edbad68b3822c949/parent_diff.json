{"from": {"secList": ["sec-ecmascript-standard-built-in-objects", "sec-block-level-function-declarations-web-legacy-compatibility-semantics", "sec-organization-of-this-specification", "sec-type", "sec-createintrinsics", "sec-syntactic-grammar"], "secData": {"sec-ecmascript-standard-built-in-objects": {"num": "17", "title": "#sec-ecmascript-standard-built-in-objects ECMAScript Standard Built-in Objects", "html": "<emu-clause id=\"sec-ecmascript-standard-built-in-objects\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-standard-built-in-objects\">#sec-ecmascript-standard-built-in-objects</span> ECMAScript Standard Built-in Objects</h1>\n  <p>There are certain built-in objects available whenever an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> begins execution. One, the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, is part of the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> of the executing program. Others are accessible as initial properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> or indirectly as properties of accessible built-in objects.</p>\n  <p>Unless specified otherwise, a built-in object that is callable as a function is a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the characteristics described in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>. Unless specified otherwise, the [[Extensible]] internal slot of a built-in object initially has the value <emu-val>true</emu-val>. Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has a [[Realm]] internal slot whose value is the <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> of the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> for which the object was initially created.</p>\n  <p>Many built-in objects are functions: they can be invoked with arguments. Some of them furthermore are constructors: they are functions intended for use with the <code>new</code> operator. For each built-in function, this specification describes the arguments required by that function and the properties of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. For each built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, this specification furthermore describes properties of the prototype object of that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and properties of specific object instances returned by a <code>new</code> expression that invokes that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is given fewer arguments than the function is specified to require, the function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> shall behave exactly as if it had been given sufficient additional arguments, each such argument being the <emu-val>undefined</emu-val> value. Such missing arguments are considered to be &#8220;not present&#8221; and may be identified in that manner by specification algorithms. In the description of a particular function, the terms &#8220;<emu-val>this</emu-val> value&#8221; and &#8220;NewTarget&#8221; have the meanings given in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> described is given more arguments than the function is specified to allow, the extra arguments are evaluated by the call and then ignored by the function. However, an implementation may define implementation specific behaviour relating to such arguments as long as the behaviour is not the throwing of a <emu-val>TypeError</emu-val> exception that is predicated simply on the presence of an extra argument.</p>\n  <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n    <p>Implementations that add additional capabilities to the set of built-in functions are encouraged to do so by adding new functions rather than adding new parameters to existing functions.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified every built-in function and every built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has the Function prototype object, which is the initial value of the expression <code>Function.prototype</code> (<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-function-prototype-object\">#sec-properties-of-the-function-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot.</p>\n  <p>Unless otherwise specified every built-in prototype object has the Object prototype object, which is the initial value of the expression <code>Object.prototype</code> (<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-object-prototype-object\">#sec-properties-of-the-object-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot, except the Object prototype object itself.</p>\n  <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function.</p>\n  <p>Each built-in function defined in this specification is created by calling the <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref> abstract operation (<emu-xref href=\"#sec-createbuiltinfunction\"><a href=\"#sec-createbuiltinfunction\" class=\"excluded-xref\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</a></emu-xref>).</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"length\"</emu-val> property whose value is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: <code>[</code> <code>]</code>) or rest parameters (which are shown using the form &#171;...name&#187;) are not included in the default argument count.</p>\n  <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n    <p>For example, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that is the initial value of the <emu-val>\"map\"</emu-val> property of the Array prototype object is described under the subclause heading &#171;Array.prototype.map (callbackFn [ , thisArg])&#187; which shows the two named arguments callbackFn and thisArg, the latter being optional; therefore the value of the <emu-val>\"length\"</emu-val> property of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is 1.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified, the <emu-val>\"length\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"name\"</emu-val> property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are identified as anonymous functions use the empty String as the value of the <emu-val>\"name\"</emu-val> property. For functions that are specified as properties of objects, the name value is the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string used to access the function. Functions that are specified as get or set accessor functions of built-in properties have <emu-val>\"get \"</emu-val> or <emu-val>\"set \"</emu-val> prepended to the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string. The value of the <emu-val>\"name\"</emu-val> property is explicitly specified for each built-in functions whose property key is a Symbol value. The <emu-val>\"name\"</emu-val> property is set using <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>.</p>\n  <p>Unless otherwise specified, the <emu-val>\"name\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every other <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> described in clauses 18 through 26 and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified.</p>\n  <p>Every <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> described in clauses 18 through 26 and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, <emu-val>undefined</emu-val>. If only a set accessor is described the get accessor is the default value, <emu-val>undefined</emu-val>.</p>\n</emu-clause>\n\n"}, "sec-block-level-function-declarations-web-legacy-compatibility-semantics": {"num": "B.3.3", "title": "#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics", "html": "<emu-annex id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</span> Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>\n      <p>Prior to ECMAScript 2015, the ECMAScript specification did not define the occurrence of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as an element of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> statement's <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>. However, support for that form of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension and most browser-hosted ECMAScript implementations permitted them. Unfortunately, the semantics of such declarations differ among those implementations. Because of these semantic differences, existing web ECMAScript code that uses <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations is only portable among browser implementation if the usage only depends upon the semantic intersection of all of the browser implementations for such declarations. The following are the use cases that fall within that intersection semantics:</p>\n      <ol>\n        <li>\n          <p>A function is declared and only referenced within a single block</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              All occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> are within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> but also referenced by an inner function definition that is not contained within that same <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within another function <var>h</var> that is nested within <var>g</var> and no other declaration of <var>f</var> shadows the references to <var>f</var> from within <var>h</var>.\n            </li>\n            <li>\n              All invocations of <var>h</var> occur after the declaration of <var>f</var> has been evaluated.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single block but also referenced within subsequent blocks.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the function code of <var>g</var> that lexically follows the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n      </ol>\n      <p>The first use case is interoperable with the semantics of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations provided by ECMAScript 2015. Any pre-existing ECMAScript code that employs that use case will operate using the Block level function declarations semantics defined by clauses 9, 13, and 14 of this specification.</p>\n      <p>ECMAScript 2015 interoperability for the second and third use cases requires the following extensions to the clause <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, clause <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>, clause <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref> and clause <emu-xref href=\"#sec-globaldeclarationinstantiation\"><a href=\"#sec-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</a></emu-xref> semantics.</p>\n      <p>If an ECMAScript implementation has a mechanism for reporting diagnostic warning messages, a warning should be produced when code contains a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> for which these compatibility semantics are applied and introduce observable differences from non-compatibility semantics. For example, if a var binding is not introduced because its introduction would create an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>, a warning message should not be produced.</p>\n      <div id=\"excluded-sec-web-compat-functiondeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.1</span>#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-globaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.2</span>#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-evaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.3</span>#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-block-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.4</span>#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-switch-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.5</span>#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-web-compat-blockdeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.6</span>#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation</h1>...</div></emu-annex>\n\n    "}, "sec-organization-of-this-specification": {"num": "4.5", "title": "#sec-organization-of-this-specification Organization of This Specification", "html": "<emu-clause id=\"sec-organization-of-this-specification\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-organization-of-this-specification\">#sec-organization-of-this-specification</span> Organization of This Specification</h1>\n    <p>The remainder of this specification is organized as follows:</p>\n    <p>Clause 5 defines the notational conventions used throughout the specification.</p>\n    <p>Clauses 6-9 define the execution environment within which ECMAScript programs operate.</p>\n    <p>Clauses 10-16 define the actual ECMAScript programming language including its syntactic encoding and the execution semantics of all language features.</p>\n    <p>Clauses 17-26 define the ECMAScript standard library. They include the definitions of all of the standard objects that are available for use by ECMAScript programs as they execute.</p>\n    <p>Clause 27 describes the memory consistency model of accesses on SharedArrayBuffer-backed memory and methods of the Atomics object.</p>\n  </emu-clause>\n"}, "sec-type": {"num": "4.4.4", "title": "#sec-type type", "html": "<emu-clause id=\"sec-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-type\">#sec-type</span> type</h1>\n      <p>set of data values as defined in clause <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref> of this specification</p>\n    </emu-clause>\n\n    "}, "sec-createintrinsics": {"num": "8.2.2", "title": "#sec-createintrinsics CreateIntrinsics ( realmRec )", "html": "<emu-clause id=\"sec-createintrinsics\" aoid=\"CreateIntrinsics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createintrinsics\">#sec-createintrinsics</span> CreateIntrinsics ( <var>realmRec</var> )</h1>\n      <p>The abstract operation CreateIntrinsics takes argument <var>realmRec</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>intrinsics</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Set <var>realmRec</var>.[[Intrinsics]] to <var>intrinsics</var>.</li><li>Set fields of <var>intrinsics</var> with the values listed in <emu-xref href=\"#table-7\"><a href=\"#table-7\" class=\"excluded-xref\" excluded-id=\"table-7\">#table-7</a></emu-xref>. The field names are the names listed in column one of the table. The value of each field is a new object value fully and recursively populated with property values as defined by the specification of each object in clauses 18-26. All object property values are newly created object values. All values that are built-in function objects are created by performing <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, <var>slots</var>, <var>realmRec</var>, <var>prototype</var>) where <var>steps</var> is the definition of that function provided by this specification, <var>slots</var> is a list of the names, if any, of the function's specified internal slots, and <var>prototype</var> is the specified value of the function's [[Prototype]] internal slot. The creation of the intrinsics and their properties must be ordered to avoid any dependencies upon objects that have not yet been created.</li><li>Perform <emu-xref aoid=\"AddRestrictedFunctionProperties\"><a href=\"#sec-addrestrictedfunctionproperties\">AddRestrictedFunctionProperties</a></emu-xref>(<var>intrinsics</var>.[[<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>]], <var>realmRec</var>).</li><li>Return <var>intrinsics</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-syntactic-grammar": {"num": "5.1.4", "title": "#sec-syntactic-grammar The Syntactic Grammar", "html": "<emu-clause id=\"sec-syntactic-grammar\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntactic-grammar\">#sec-syntactic-grammar</span> The Syntactic Grammar</h1>\n      <p>The <em>syntactic grammar</em> for ECMAScript is given in clauses 11, 12, 13, 14, and 15. This grammar has ECMAScript tokens defined by the lexical grammar as its terminal symbols (<emu-xref href=\"#sec-lexical-and-regexp-grammars\"><a href=\"#sec-lexical-and-regexp-grammars\" class=\"excluded-xref\" excluded-id=\"sec-lexical-and-regexp-grammars\">#sec-lexical-and-regexp-grammars</a></emu-xref>). It defines a set of productions, starting from two alternative goal symbols <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> and <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, that describe how sequences of tokens form syntactically correct independent components of ECMAScript programs.</p>\n      <p>When a stream of code points is to be parsed as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, it is first converted to a stream of input elements by repeated application of the lexical grammar; this stream of input elements is then parsed by a single application of the syntactic grammar. The input stream is syntactically in error if the tokens in the stream of input elements cannot be parsed as a single instance of the goal nonterminal (<emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>), with no tokens left over.</p>\n      <p>When a parse is successful, it constructs a <em>parse tree</em>, a rooted tree structure in which each node is a <dfn>Parse Node</dfn>. Each Parse Node is an <em>instance</em> of a symbol in the grammar; it represents a span of the source text that can be derived from that symbol. The root node of the parse tree, representing the whole of the source text, is an instance of the parse's <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. When a Parse Node is an instance of a nonterminal, it is also an instance of some production that has that nonterminal as its left-hand side. Moreover, it has zero or more <em>children</em>, one for each symbol on the production's right-hand side: each child is a Parse Node that is an instance of the corresponding symbol.</p>\n      <p>New Parse Nodes are instantiated for each invocation of the parser and never reused between parses even of identical source text. Parse Nodes are considered <dfn>the same Parse Node</dfn> if and only if they represent the same span of source text, are instances of the same grammar symbol, and resulted from the same parser invocation.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Parsing the same String multiple times will lead to different Parse Nodes. For example, consider:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">\"1 + 1;\"</span>;\n<span class=\"hljs-built_in\">eval</span>(str);\n<span class=\"hljs-built_in\">eval</span>(str);</code></pre>\n        <p>Each call to <code>eval</code> converts the value of <code>str</code> into an ECMAScript source text and performs an independent parse that creates its own separate tree of Parse Nodes. The trees are distinct even though each parse operates upon a source text that was derived from the same String value.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">Parse Nodes are specification artefacts, and implementations are not required to use an analogous data structure.</div></emu-note>\n      <p>Productions of the syntactic grammar are distinguished by having just one colon &#8220;<b>:</b>&#8221; as punctuation.</p>\n      <p>The syntactic grammar as presented in clauses 12, 13, 14 and 15 is not a complete account of which token sequences are accepted as a correct ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Certain additional token sequences are also accepted, namely, those that would be described by the grammar if only semicolons were added to the sequence in certain places (such as before line terminator characters). Furthermore, certain token sequences that are described by the grammar are not considered acceptable if a line terminator character appears in certain &#8220;awkward&#8221; places.</p>\n      <p>In certain cases, in order to avoid ambiguities, the syntactic grammar uses generalized productions that permit token sequences that do not form a valid ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. For example, this technique is used for object literals and object destructuring patterns. In such cases a more restrictive <em>supplemental grammar</em> is provided that further restricts the acceptable token sequences. Typically, an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule will then define an error condition if \"<var>P</var> is not <dfn>covering</dfn> an <var>N</var>\", where <var>P</var> is a Parse Node (an instance of the generalized production) and <var>N</var> is a nonterminal from the supplemental grammar. Here, the sequence of tokens originally matched by <var>P</var> is parsed again using <var>N</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. (If <var>N</var> takes grammatical parameters, then they are set to the same values used when <var>P</var> was originally parsed.) An error occurs if the sequence of tokens cannot be parsed as a single instance of <var>N</var>, with no tokens left over. Subsequently, algorithms access the result of the parse using a phrase of the form \"the <var>N</var> that is <dfn>covered</dfn> by <var>P</var>\". This will always be a Parse Node (an instance of <var>N</var>, unique for a given <var>P</var>), since any parsing failure would have been detected by an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule.</p>\n    </emu-clause>\n\n    "}}, "figData": {"table-7": "Table 8"}}, "to": {"secList": ["sec-ecmascript-standard-built-in-objects", "sec-block-level-function-declarations-web-legacy-compatibility-semantics", "sec-organization-of-this-specification", "sec-type", "sec-createintrinsics", "sec-syntactic-grammar"], "secData": {"sec-ecmascript-standard-built-in-objects": {"num": "17", "title": "#sec-ecmascript-standard-built-in-objects ECMAScript Standard Built-in Objects", "html": "<emu-clause id=\"sec-ecmascript-standard-built-in-objects\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-standard-built-in-objects\">#sec-ecmascript-standard-built-in-objects</span> ECMAScript Standard Built-in Objects</h1>\n  <p>There are certain built-in objects available whenever an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> begins execution. One, the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, is part of the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> of the executing program. Others are accessible as initial properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> or indirectly as properties of accessible built-in objects.</p>\n  <p>Unless specified otherwise, a built-in object that is callable as a function is a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the characteristics described in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>. Unless specified otherwise, the [[Extensible]] internal slot of a built-in object initially has the value <emu-val>true</emu-val>. Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has a [[Realm]] internal slot whose value is the <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> of the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> for which the object was initially created.</p>\n  <p>Many built-in objects are functions: they can be invoked with arguments. Some of them furthermore are constructors: they are functions intended for use with the <code>new</code> operator. For each built-in function, this specification describes the arguments required by that function and the properties of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. For each built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, this specification furthermore describes properties of the prototype object of that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and properties of specific object instances returned by a <code>new</code> expression that invokes that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is given fewer arguments than the function is specified to require, the function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> shall behave exactly as if it had been given sufficient additional arguments, each such argument being the <emu-val>undefined</emu-val> value. Such missing arguments are considered to be &#8220;not present&#8221; and may be identified in that manner by specification algorithms. In the description of a particular function, the terms &#8220;<emu-val>this</emu-val> value&#8221; and &#8220;NewTarget&#8221; have the meanings given in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> described is given more arguments than the function is specified to allow, the extra arguments are evaluated by the call and then ignored by the function. However, an implementation may define implementation specific behaviour relating to such arguments as long as the behaviour is not the throwing of a <emu-val>TypeError</emu-val> exception that is predicated simply on the presence of an extra argument.</p>\n  <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n    <p>Implementations that add additional capabilities to the set of built-in functions are encouraged to do so by adding new functions rather than adding new parameters to existing functions.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified every built-in function and every built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has the Function prototype object, which is the initial value of the expression <code>Function.prototype</code> (<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-function-prototype-object\">#sec-properties-of-the-function-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot.</p>\n  <p>Unless otherwise specified every built-in prototype object has the Object prototype object, which is the initial value of the expression <code>Object.prototype</code> (<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-object-prototype-object\">#sec-properties-of-the-object-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot, except the Object prototype object itself.</p>\n  <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function.</p>\n  <p>Each built-in function defined in this specification is created by calling the <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref> abstract operation (<emu-xref href=\"#sec-createbuiltinfunction\"><a href=\"#sec-createbuiltinfunction\" class=\"excluded-xref\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</a></emu-xref>).</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"length\"</emu-val> property whose value is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: <code>[</code> <code>]</code>) or rest parameters (which are shown using the form &#171;...name&#187;) are not included in the default argument count.</p>\n  <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n    <p>For example, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that is the initial value of the <emu-val>\"map\"</emu-val> property of the Array prototype object is described under the subclause heading &#171;Array.prototype.map (callbackFn [ , thisArg])&#187; which shows the two named arguments callbackFn and thisArg, the latter being optional; therefore the value of the <emu-val>\"length\"</emu-val> property of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is 1.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified, the <emu-val>\"length\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"name\"</emu-val> property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are identified as anonymous functions use the empty String as the value of the <emu-val>\"name\"</emu-val> property. For functions that are specified as properties of objects, the name value is the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string used to access the function. Functions that are specified as get or set accessor functions of built-in properties have <emu-val>\"get \"</emu-val> or <emu-val>\"set \"</emu-val> prepended to the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string. The value of the <emu-val>\"name\"</emu-val> property is explicitly specified for each built-in functions whose property key is a Symbol value. The <emu-val>\"name\"</emu-val> property is set using <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>.</p>\n  <p>Unless otherwise specified, the <emu-val>\"name\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every other <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> described in clauses <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref> and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified.</p>\n  <p>Every <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> described in clauses <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref> and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, <emu-val>undefined</emu-val>. If only a set accessor is described the get accessor is the default value, <emu-val>undefined</emu-val>.</p>\n</emu-clause>\n\n"}, "sec-block-level-function-declarations-web-legacy-compatibility-semantics": {"num": "B.3.3", "title": "#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics", "html": "<emu-annex id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</span> Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>\n      <p>Prior to ECMAScript 2015, the ECMAScript specification did not define the occurrence of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as an element of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> statement's <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>. However, support for that form of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension and most browser-hosted ECMAScript implementations permitted them. Unfortunately, the semantics of such declarations differ among those implementations. Because of these semantic differences, existing web ECMAScript code that uses <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations is only portable among browser implementation if the usage only depends upon the semantic intersection of all of the browser implementations for such declarations. The following are the use cases that fall within that intersection semantics:</p>\n      <ol>\n        <li>\n          <p>A function is declared and only referenced within a single block</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              All occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> are within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> but also referenced by an inner function definition that is not contained within that same <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within another function <var>h</var> that is nested within <var>g</var> and no other declaration of <var>f</var> shadows the references to <var>f</var> from within <var>h</var>.\n            </li>\n            <li>\n              All invocations of <var>h</var> occur after the declaration of <var>f</var> has been evaluated.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single block but also referenced within subsequent blocks.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the function code of <var>g</var> that lexically follows the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n      </ol>\n      <p>The first use case is interoperable with the semantics of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations provided by ECMAScript 2015. Any pre-existing ECMAScript code that employs that use case will operate using the Block level function declarations semantics defined by clauses <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, <emu-xref href=\"#sec-ecmascript-language-statements-and-declarations\"><a href=\"#sec-ecmascript-language-statements-and-declarations\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-statements-and-declarations\">#sec-ecmascript-language-statements-and-declarations</a></emu-xref>, and <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>.</p>\n      <p>ECMAScript 2015 interoperability for the second and third use cases requires the following extensions to the clause <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, clause <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>, clause <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref> and clause <emu-xref href=\"#sec-globaldeclarationinstantiation\"><a href=\"#sec-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</a></emu-xref> semantics.</p>\n      <p>If an ECMAScript implementation has a mechanism for reporting diagnostic warning messages, a warning should be produced when code contains a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> for which these compatibility semantics are applied and introduce observable differences from non-compatibility semantics. For example, if a var binding is not introduced because its introduction would create an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>, a warning message should not be produced.</p>\n      <div id=\"excluded-sec-web-compat-functiondeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.1</span>#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-globaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.2</span>#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-evaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.3</span>#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-block-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.4</span>#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-switch-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.5</span>#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-web-compat-blockdeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.6</span>#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation</h1>...</div></emu-annex>\n\n    "}, "sec-organization-of-this-specification": {"num": "4.5", "title": "#sec-organization-of-this-specification Organization of This Specification", "html": "<emu-clause id=\"sec-organization-of-this-specification\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-organization-of-this-specification\">#sec-organization-of-this-specification</span> Organization of This Specification</h1>\n    <p>The remainder of this specification is organized as follows:</p>\n    <p>Clause <emu-xref href=\"#sec-notational-conventions\"><a href=\"#sec-notational-conventions\" class=\"excluded-xref\" excluded-id=\"sec-notational-conventions\">#sec-notational-conventions</a></emu-xref> defines the notational conventions used throughout the specification.</p>\n    <p>Clauses <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref> through <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref> define the execution environment within which ECMAScript programs operate.</p>\n    <p>Clauses <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref> through <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref> define the actual ECMAScript programming language including its syntactic encoding and the execution semantics of all language features.</p>\n    <p>Clauses <emu-xref href=\"#sec-ecmascript-standard-built-in-objects\"><a href=\"#sec-ecmascript-standard-built-in-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-standard-built-in-objects\">#sec-ecmascript-standard-built-in-objects</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref> define the ECMAScript standard library. They include the definitions of all of the standard objects that are available for use by ECMAScript programs as they execute.</p>\n    <p>Clause <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\" class=\"excluded-xref\" excluded-id=\"sec-memory-model\">#sec-memory-model</a></emu-xref> describes the memory consistency model of accesses on SharedArrayBuffer-backed memory and methods of the Atomics object.</p>\n  </emu-clause>\n"}, "sec-type": {"num": "4.4.4", "title": "#sec-type type", "html": "<emu-clause id=\"sec-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-type\">#sec-type</span> type</h1>\n      <p>set of data values as defined in clause <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref></p>\n    </emu-clause>\n\n    "}, "sec-createintrinsics": {"num": "8.2.2", "title": "#sec-createintrinsics CreateIntrinsics ( realmRec )", "html": "<emu-clause id=\"sec-createintrinsics\" aoid=\"CreateIntrinsics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createintrinsics\">#sec-createintrinsics</span> CreateIntrinsics ( <var>realmRec</var> )</h1>\n      <p>The abstract operation CreateIntrinsics takes argument <var>realmRec</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>intrinsics</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Set <var>realmRec</var>.[[Intrinsics]] to <var>intrinsics</var>.</li><li>Set fields of <var>intrinsics</var> with the values listed in <emu-xref href=\"#table-7\"><a href=\"#table-7\" class=\"excluded-xref\" excluded-id=\"table-7\">#table-7</a></emu-xref>. The field names are the names listed in column one of the table. The value of each field is a new object value fully and recursively populated with property values as defined by the specification of each object in clauses <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref>. All object property values are newly created object values. All values that are built-in function objects are created by performing <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, <var>slots</var>, <var>realmRec</var>, <var>prototype</var>) where <var>steps</var> is the definition of that function provided by this specification, <var>slots</var> is a list of the names, if any, of the function's specified internal slots, and <var>prototype</var> is the specified value of the function's [[Prototype]] internal slot. The creation of the intrinsics and their properties must be ordered to avoid any dependencies upon objects that have not yet been created.</li><li>Perform <emu-xref aoid=\"AddRestrictedFunctionProperties\"><a href=\"#sec-addrestrictedfunctionproperties\">AddRestrictedFunctionProperties</a></emu-xref>(<var>intrinsics</var>.[[<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>]], <var>realmRec</var>).</li><li>Return <var>intrinsics</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-syntactic-grammar": {"num": "5.1.4", "title": "#sec-syntactic-grammar The Syntactic Grammar", "html": "<emu-clause id=\"sec-syntactic-grammar\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntactic-grammar\">#sec-syntactic-grammar</span> The Syntactic Grammar</h1>\n      <p>The <em>syntactic grammar</em> for ECMAScript is given in clauses <emu-xref href=\"#sec-ecmascript-language-expressions\"><a href=\"#sec-ecmascript-language-expressions\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-expressions\">#sec-ecmascript-language-expressions</a></emu-xref> through <emu-xref href=\"#sec-ecmascript-language-scripts-and-modules\"><a href=\"#sec-ecmascript-language-scripts-and-modules\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-scripts-and-modules\">#sec-ecmascript-language-scripts-and-modules</a></emu-xref>. This grammar has ECMAScript tokens defined by the lexical grammar as its terminal symbols (<emu-xref href=\"#sec-lexical-and-regexp-grammars\"><a href=\"#sec-lexical-and-regexp-grammars\" class=\"excluded-xref\" excluded-id=\"sec-lexical-and-regexp-grammars\">#sec-lexical-and-regexp-grammars</a></emu-xref>). It defines a set of productions, starting from two alternative goal symbols <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> and <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, that describe how sequences of tokens form syntactically correct independent components of ECMAScript programs.</p>\n      <p>When a stream of code points is to be parsed as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, it is first converted to a stream of input elements by repeated application of the lexical grammar; this stream of input elements is then parsed by a single application of the syntactic grammar. The input stream is syntactically in error if the tokens in the stream of input elements cannot be parsed as a single instance of the goal nonterminal (<emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>), with no tokens left over.</p>\n      <p>When a parse is successful, it constructs a <em>parse tree</em>, a rooted tree structure in which each node is a <dfn>Parse Node</dfn>. Each Parse Node is an <em>instance</em> of a symbol in the grammar; it represents a span of the source text that can be derived from that symbol. The root node of the parse tree, representing the whole of the source text, is an instance of the parse's <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. When a Parse Node is an instance of a nonterminal, it is also an instance of some production that has that nonterminal as its left-hand side. Moreover, it has zero or more <em>children</em>, one for each symbol on the production's right-hand side: each child is a Parse Node that is an instance of the corresponding symbol.</p>\n      <p>New Parse Nodes are instantiated for each invocation of the parser and never reused between parses even of identical source text. Parse Nodes are considered <dfn>the same Parse Node</dfn> if and only if they represent the same span of source text, are instances of the same grammar symbol, and resulted from the same parser invocation.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Parsing the same String multiple times will lead to different Parse Nodes. For example, consider:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">\"1 + 1;\"</span>;\n<span class=\"hljs-built_in\">eval</span>(str);\n<span class=\"hljs-built_in\">eval</span>(str);</code></pre>\n        <p>Each call to <code>eval</code> converts the value of <code>str</code> into an ECMAScript source text and performs an independent parse that creates its own separate tree of Parse Nodes. The trees are distinct even though each parse operates upon a source text that was derived from the same String value.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">Parse Nodes are specification artefacts, and implementations are not required to use an analogous data structure.</div></emu-note>\n      <p>Productions of the syntactic grammar are distinguished by having just one colon &#8220;<b>:</b>&#8221; as punctuation.</p>\n      <p>The syntactic grammar as presented in clauses <emu-xref href=\"#sec-ecmascript-language-expressions\"><a href=\"#sec-ecmascript-language-expressions\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-expressions\">#sec-ecmascript-language-expressions</a></emu-xref> through <emu-xref href=\"#sec-ecmascript-language-scripts-and-modules\"><a href=\"#sec-ecmascript-language-scripts-and-modules\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-scripts-and-modules\">#sec-ecmascript-language-scripts-and-modules</a></emu-xref> is not a complete account of which token sequences are accepted as a correct ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Certain additional token sequences are also accepted, namely, those that would be described by the grammar if only semicolons were added to the sequence in certain places (such as before line terminator characters). Furthermore, certain token sequences that are described by the grammar are not considered acceptable if a line terminator character appears in certain &#8220;awkward&#8221; places.</p>\n      <p>In certain cases, in order to avoid ambiguities, the syntactic grammar uses generalized productions that permit token sequences that do not form a valid ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. For example, this technique is used for object literals and object destructuring patterns. In such cases a more restrictive <em>supplemental grammar</em> is provided that further restricts the acceptable token sequences. Typically, an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule will then define an error condition if \"<var>P</var> is not <dfn>covering</dfn> an <var>N</var>\", where <var>P</var> is a Parse Node (an instance of the generalized production) and <var>N</var> is a nonterminal from the supplemental grammar. Here, the sequence of tokens originally matched by <var>P</var> is parsed again using <var>N</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. (If <var>N</var> takes grammatical parameters, then they are set to the same values used when <var>P</var> was originally parsed.) An error occurs if the sequence of tokens cannot be parsed as a single instance of <var>N</var>, with no tokens left over. Subsequently, algorithms access the result of the parse using a phrase of the form \"the <var>N</var> that is <dfn>covered</dfn> by <var>P</var>\". This will always be a Parse Node (an instance of <var>N</var>, unique for a given <var>P</var>), since any parsing failure would have been detected by an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule.</p>\n    </emu-clause>\n\n    "}}, "figData": {"table-7": "Table 8"}}}