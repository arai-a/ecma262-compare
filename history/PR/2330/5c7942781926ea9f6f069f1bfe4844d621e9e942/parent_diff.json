{"from": {"secList": ["sec-runtime-semantics-repeatmatcher-abstract-operation", "sec-string-exotic-objects-ownpropertykeys", "sec-map.prototype.foreach", "sec-set.prototype.foreach", "sec-triggerpromisereactions"], "secData": {"sec-runtime-semantics-repeatmatcher-abstract-operation": {"num": "22.2.2.5.1", "title": "#sec-runtime-semantics-repeatmatcher-abstract-operation RepeatMatcher ( m, min, max, greedy, x, c, parenIndex, parenCount )", "html": "<emu-clause id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\" aoid=\"RepeatMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\">#sec-runtime-semantics-repeatmatcher-abstract-operation</span> RepeatMatcher ( <var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>x</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var> )</h1>\n          <p>The abstract operation RepeatMatcher takes arguments <var>m</var> (a Matcher), <var>min</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>max</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;), <var>greedy</var> (a Boolean), <var>x</var> (a State), <var>c</var> (a Continuation), <var>parenIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>parenCount</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>max</var> = 0, return <var>c</var>(<var>x</var>).</li><li>Let <var>d</var> be a new Continuation with parameters (<var>y</var>) that captures <var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>x</var>, <var>c</var>, <var>parenIndex</var>, and <var>parenCount</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li id=\"step-repeatmatcher-done\">If <var>min</var> = 0 and <var>y</var>'s <var>endIndex</var> = <var>x</var>'s <var>endIndex</var>, return <emu-const>failure</emu-const>.</li><li>If <var>min</var> = 0, let <var>min2</var> be 0; otherwise let <var>min2</var> be <var>min</var> - 1.</li><li>If <var>max</var> is +&#8734;, let <var>max2</var> be +&#8734;; otherwise let <var>max2</var> be <var>max</var> - 1.</li><li>Return !&#160;<emu-xref aoid=\"RepeatMatcher\"><a href=\"#sec-runtime-semantics-repeatmatcher-abstract-operation\">RepeatMatcher</a></emu-xref>(<var>m</var>, <var>min2</var>, <var>max2</var>, <var>greedy</var>, <var>y</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var>).</li></ol></li><li>Let <var>cap</var> be a copy of <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li id=\"step-repeatmatcher-clear-captures\">For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> that satisfies <var>parenIndex</var> &lt; <var>k</var> and <var>k</var> &#8804; <var>parenIndex</var> + <var>parenCount</var>, set <var>cap</var>[<var>k</var>] to <emu-val>undefined</emu-val>.</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>xr</var> be the State (<var>e</var>, <var>cap</var>).</li><li>If <var>min</var> &#8800; 0, return <var>m</var>(<var>xr</var>, <var>d</var>).</li><li>If <var>greedy</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>z</var> be <var>c</var>(<var>x</var>).</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Return <var>m</var>(<var>xr</var>, <var>d</var>).</li></ol></li><li>Let <var>z</var> be <var>m</var>(<var>xr</var>, <var>d</var>).</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Return <var>c</var>(<var>x</var>).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>An <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> followed by a <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> is repeated the number of times specified by the <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>. A <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> can be non-greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as few times as possible while still matching the sequel, or it can be greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as many times as possible while still matching the sequel. The <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated rather than the input character sequence that it matches, so different repetitions of the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> can match different input substrings.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>If the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and the sequel of the regular expression all have choice points, the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is first matched as many (or as few, if non-greedy) times as possible. All choices in the sequel are tried before moving on to the next choice in the last repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. All choices in the last (n<sup>th</sup>) repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are tried before moving on to the next choice in the next-to-last (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>; at which point it may turn out that more or fewer repetitions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are now possible; these are exhausted (again, starting with either as few or as many as possible) before moving on to the next choice in the (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and so on.</p>\n            <p>Compare</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}/.exec(<span class=\"hljs-string\">\"abcdefghi\"</span>)</code></pre>\n            <p>which returns <emu-val>\"abcde\"</emu-val> with</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}?/.exec(<span class=\"hljs-string\">\"abcdefghi\"</span>)</code></pre>\n            <p>which returns <emu-val>\"abc\"</emu-val>.</p>\n            <p>Consider also</p>\n            <pre><code class=\"javascript hljs\">/(aa|aabaac|ba|b|c)*/.exec(<span class=\"hljs-string\">\"aabaac\"</span>)</code></pre>\n            <p>which, by the choice point ordering above, returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaba\"</span>, <span class=\"hljs-string\">\"ba\"</span>]</code></pre>\n            <p>and not any of:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"aabaac\"</span>]\n[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>The above ordering of choice points can be used to write a regular expression that calculates the greatest common divisor of two numbers (represented in unary notation). The following example calculates the gcd of 10 and 15:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-string\">\"aaaaaaaaaa,aaaaaaaaaaaaaaa\"</span>.replace(<span class=\"hljs-regexp\">/^(a+)\\1*,\\1+$/</span>, <span class=\"hljs-string\">\"$1\"</span>)</code></pre>\n            <p>which returns the gcd in unary notation <emu-val>\"aaaaa\"</emu-val>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Step <emu-xref href=\"#step-repeatmatcher-clear-captures\"><a href=\"#step-repeatmatcher-clear-captures\" class=\"excluded-xref\" excluded-id=\"step-repeatmatcher-clear-captures\">#step-repeatmatcher-clear-captures</a></emu-xref> of the RepeatMatcher clears <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>'s captures each time <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is repeated. We can see its behaviour in the regular expression</p>\n            <pre><code class=\"javascript hljs\">/(z)((a+)?(b+)?(c))*/.exec(<span class=\"hljs-string\">\"zaacbbbcac\"</span>)</code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>and not</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"bbb\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>because each iteration of the outermost <code>*</code> clears all captured Strings contained in the quantified <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>, which in this case includes capture Strings numbered 2, 3, 4, and 5.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>Step <emu-xref href=\"#step-repeatmatcher-done\"><a href=\"#step-repeatmatcher-done\">2.b</a></emu-xref> of the RepeatMatcher states that once the minimum number of repetitions has been satisfied, any more expansions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> that match the empty character sequence are not considered for further repetitions. This prevents the regular expression engine from falling into an infinite loop on patterns such as:</p>\n            <pre><code class=\"javascript hljs\">/(a*)*/.exec(<span class=\"hljs-string\">\"b\"</span>)</code></pre>\n            <p>or the slightly more complicated:</p>\n            <pre><code class=\"javascript hljs\">/(a*)b\\<span class=\"hljs-number\">1</span>+/.exec(<span class=\"hljs-string\">\"baaaac\"</span>)</code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-string-exotic-objects-ownpropertykeys": {"num": "10.4.3.3", "title": "#sec-string-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-string-exotic-objects-ownpropertykeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-exotic-objects-ownpropertykeys\">#sec-string-exotic-objects-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n        <p>The [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> <var>O</var> takes no arguments. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>str</var> be <var>O</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>len</var> be the length of <var>str</var>.</li><li>For each non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> starting with 0 such that <var>i</var> &lt; <var>len</var>, in ascending order, do<ol><li>Add !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>)) as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <var>P</var> is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> and !&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>P</var>) &#8805; <var>len</var>, in ascending numeric index order, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.foreach": {"num": "24.1.3.5", "title": "#sec-map.prototype.foreach Map.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-map.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.foreach\">#sec-map.prototype.foreach</span> Map.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>e</var> of <var>entries</var>, in original key insertion order, do<ol><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>.[[Value]], <var>e</var>.[[Key]], <var>M</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each key/value pair present in the map object, in key insertion order. <var>callbackfn</var> is called only for keys of the map which actually exist; it is not called for keys that have been deleted from the map.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the item, the key of the item, and the Map object being traversed.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>. Each entry of a map's [[MapData]] is only visited once. New keys added after the call to <code>forEach</code> begins are visited. A key will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Keys that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the key is added again before the <code>forEach</code> call completes.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-set.prototype.foreach": {"num": "24.2.3.6", "title": "#sec-set.prototype.foreach Set.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-set.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.foreach\">#sec-set.prototype.foreach</span> Set.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, in original insertion order, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>, <var>e</var>, <var>S</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each value present in the set object, in value insertion order. <var>callbackfn</var> is called only for values of the Set which actually exist; it is not called for keys that have been deleted from the set.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the first two arguments are a value contained in the Set. The same value is passed for both arguments. The Set object being traversed is passed as the third argument.</p>\n          <p>The <var>callbackfn</var> is called with three arguments to be consistent with the call back functions used by <code>forEach</code> methods for Map and Array. For Sets, each item value is considered to be both the key and the value.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>Each value is normally visited only once. However, a value will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Values that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the value is added again before the <code>forEach</code> call completes. New values added after the call to <code>forEach</code> begins are visited.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-triggerpromisereactions": {"num": "27.2.1.8", "title": "#sec-triggerpromisereactions TriggerPromiseReactions ( reactions, argument )", "html": "<emu-clause id=\"sec-triggerpromisereactions\" aoid=\"TriggerPromiseReactions\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-triggerpromisereactions\">#sec-triggerpromisereactions</span> TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )</h1>\n        <p>The abstract operation TriggerPromiseReactions takes arguments <var>reactions</var> (a collection of PromiseReaction Records) and <var>argument</var>. It enqueues a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> for each record in <var>reactions</var>. Each such <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> processes the [[Type]] and [[Handler]] of the PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, and if the [[Handler]] is not <emu-const>empty</emu-const>, calls it passing the given argument. If the [[Handler]] is <emu-const>empty</emu-const>, the behaviour is determined by the [[Type]]. It performs the following steps when called:</p>\n        <emu-alg><ol><li>For each element <var>reaction</var> of <var>reactions</var>, in original insertion order, do<ol><li>Let <var>job</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>reaction</var>, <var>argument</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>job</var>.[[Job]], <var>job</var>.[[Realm]]).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-runtime-semantics-repeatmatcher-abstract-operation", "sec-string-exotic-objects-ownpropertykeys", "sec-map.prototype.foreach", "sec-set.prototype.foreach", "sec-triggerpromisereactions"], "secData": {"sec-runtime-semantics-repeatmatcher-abstract-operation": {"num": "22.2.2.5.1", "title": "#sec-runtime-semantics-repeatmatcher-abstract-operation RepeatMatcher ( m, min, max, greedy, x, c, parenIndex, parenCount )", "html": "<emu-clause id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\" aoid=\"RepeatMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\">#sec-runtime-semantics-repeatmatcher-abstract-operation</span> RepeatMatcher ( <var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>x</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var> )</h1>\n          <p>The abstract operation RepeatMatcher takes arguments <var>m</var> (a Matcher), <var>min</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>max</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;), <var>greedy</var> (a Boolean), <var>x</var> (a State), <var>c</var> (a Continuation), <var>parenIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>parenCount</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>max</var> = 0, return <var>c</var>(<var>x</var>).</li><li>Let <var>d</var> be a new Continuation with parameters (<var>y</var>) that captures <var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>x</var>, <var>c</var>, <var>parenIndex</var>, and <var>parenCount</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li id=\"step-repeatmatcher-done\">If <var>min</var> = 0 and <var>y</var>'s <var>endIndex</var> = <var>x</var>'s <var>endIndex</var>, return <emu-const>failure</emu-const>.</li><li>If <var>min</var> = 0, let <var>min2</var> be 0; otherwise let <var>min2</var> be <var>min</var> - 1.</li><li>If <var>max</var> is +&#8734;, let <var>max2</var> be +&#8734;; otherwise let <var>max2</var> be <var>max</var> - 1.</li><li>Return !&#160;<emu-xref aoid=\"RepeatMatcher\"><a href=\"#sec-runtime-semantics-repeatmatcher-abstract-operation\">RepeatMatcher</a></emu-xref>(<var>m</var>, <var>min2</var>, <var>max2</var>, <var>greedy</var>, <var>y</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var>).</li></ol></li><li>Let <var>cap</var> be a copy of <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li id=\"step-repeatmatcher-clear-captures\">For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> such that <var>parenIndex</var> &lt; <var>k</var> and <var>k</var> &#8804; <var>parenIndex</var> + <var>parenCount</var>, set <var>cap</var>[<var>k</var>] to <emu-val>undefined</emu-val>.</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>xr</var> be the State (<var>e</var>, <var>cap</var>).</li><li>If <var>min</var> &#8800; 0, return <var>m</var>(<var>xr</var>, <var>d</var>).</li><li>If <var>greedy</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>z</var> be <var>c</var>(<var>x</var>).</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Return <var>m</var>(<var>xr</var>, <var>d</var>).</li></ol></li><li>Let <var>z</var> be <var>m</var>(<var>xr</var>, <var>d</var>).</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Return <var>c</var>(<var>x</var>).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>An <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> followed by a <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> is repeated the number of times specified by the <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>. A <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> can be non-greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as few times as possible while still matching the sequel, or it can be greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as many times as possible while still matching the sequel. The <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated rather than the input character sequence that it matches, so different repetitions of the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> can match different input substrings.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>If the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and the sequel of the regular expression all have choice points, the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is first matched as many (or as few, if non-greedy) times as possible. All choices in the sequel are tried before moving on to the next choice in the last repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. All choices in the last (n<sup>th</sup>) repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are tried before moving on to the next choice in the next-to-last (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>; at which point it may turn out that more or fewer repetitions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are now possible; these are exhausted (again, starting with either as few or as many as possible) before moving on to the next choice in the (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and so on.</p>\n            <p>Compare</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}/.exec(<span class=\"hljs-string\">\"abcdefghi\"</span>)</code></pre>\n            <p>which returns <emu-val>\"abcde\"</emu-val> with</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}?/.exec(<span class=\"hljs-string\">\"abcdefghi\"</span>)</code></pre>\n            <p>which returns <emu-val>\"abc\"</emu-val>.</p>\n            <p>Consider also</p>\n            <pre><code class=\"javascript hljs\">/(aa|aabaac|ba|b|c)*/.exec(<span class=\"hljs-string\">\"aabaac\"</span>)</code></pre>\n            <p>which, by the choice point ordering above, returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaba\"</span>, <span class=\"hljs-string\">\"ba\"</span>]</code></pre>\n            <p>and not any of:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"aabaac\"</span>]\n[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>The above ordering of choice points can be used to write a regular expression that calculates the greatest common divisor of two numbers (represented in unary notation). The following example calculates the gcd of 10 and 15:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-string\">\"aaaaaaaaaa,aaaaaaaaaaaaaaa\"</span>.replace(<span class=\"hljs-regexp\">/^(a+)\\1*,\\1+$/</span>, <span class=\"hljs-string\">\"$1\"</span>)</code></pre>\n            <p>which returns the gcd in unary notation <emu-val>\"aaaaa\"</emu-val>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Step <emu-xref href=\"#step-repeatmatcher-clear-captures\"><a href=\"#step-repeatmatcher-clear-captures\" class=\"excluded-xref\" excluded-id=\"step-repeatmatcher-clear-captures\">#step-repeatmatcher-clear-captures</a></emu-xref> of the RepeatMatcher clears <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>'s captures each time <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is repeated. We can see its behaviour in the regular expression</p>\n            <pre><code class=\"javascript hljs\">/(z)((a+)?(b+)?(c))*/.exec(<span class=\"hljs-string\">\"zaacbbbcac\"</span>)</code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>and not</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"bbb\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>because each iteration of the outermost <code>*</code> clears all captured Strings contained in the quantified <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>, which in this case includes capture Strings numbered 2, 3, 4, and 5.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>Step <emu-xref href=\"#step-repeatmatcher-done\"><a href=\"#step-repeatmatcher-done\">2.b</a></emu-xref> of the RepeatMatcher states that once the minimum number of repetitions has been satisfied, any more expansions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> that match the empty character sequence are not considered for further repetitions. This prevents the regular expression engine from falling into an infinite loop on patterns such as:</p>\n            <pre><code class=\"javascript hljs\">/(a*)*/.exec(<span class=\"hljs-string\">\"b\"</span>)</code></pre>\n            <p>or the slightly more complicated:</p>\n            <pre><code class=\"javascript hljs\">/(a*)b\\<span class=\"hljs-number\">1</span>+/.exec(<span class=\"hljs-string\">\"baaaac\"</span>)</code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-string-exotic-objects-ownpropertykeys": {"num": "10.4.3.3", "title": "#sec-string-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-string-exotic-objects-ownpropertykeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-exotic-objects-ownpropertykeys\">#sec-string-exotic-objects-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n        <p>The [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> <var>O</var> takes no arguments. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>str</var> be <var>O</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>len</var> be the length of <var>str</var>.</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> starting with 0 such that <var>i</var> &lt; <var>len</var>, in ascending order, do<ol><li>Add !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>)) as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <var>P</var> is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> and !&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>P</var>) &#8805; <var>len</var>, in ascending numeric index order, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.foreach": {"num": "24.1.3.5", "title": "#sec-map.prototype.foreach Map.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-map.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.foreach\">#sec-map.prototype.foreach</span> Map.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>.[[Value]], <var>e</var>.[[Key]], <var>M</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each key/value pair present in the map object, in key insertion order. <var>callbackfn</var> is called only for keys of the map which actually exist; it is not called for keys that have been deleted from the map.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the item, the key of the item, and the Map object being traversed.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>. Each entry of a map's [[MapData]] is only visited once. New keys added after the call to <code>forEach</code> begins are visited. A key will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Keys that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the key is added again before the <code>forEach</code> call completes.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-set.prototype.foreach": {"num": "24.2.3.6", "title": "#sec-set.prototype.foreach Set.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-set.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.foreach\">#sec-set.prototype.foreach</span> Set.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>, <var>e</var>, <var>S</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each value present in the set object, in value insertion order. <var>callbackfn</var> is called only for values of the Set which actually exist; it is not called for keys that have been deleted from the set.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the first two arguments are a value contained in the Set. The same value is passed for both arguments. The Set object being traversed is passed as the third argument.</p>\n          <p>The <var>callbackfn</var> is called with three arguments to be consistent with the call back functions used by <code>forEach</code> methods for Map and Array. For Sets, each item value is considered to be both the key and the value.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>Each value is normally visited only once. However, a value will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Values that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the value is added again before the <code>forEach</code> call completes. New values added after the call to <code>forEach</code> begins are visited.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-triggerpromisereactions": {"num": "27.2.1.8", "title": "#sec-triggerpromisereactions TriggerPromiseReactions ( reactions, argument )", "html": "<emu-clause id=\"sec-triggerpromisereactions\" aoid=\"TriggerPromiseReactions\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-triggerpromisereactions\">#sec-triggerpromisereactions</span> TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )</h1>\n        <p>The abstract operation TriggerPromiseReactions takes arguments <var>reactions</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of PromiseReaction Records) and <var>argument</var>. It enqueues a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> for each record in <var>reactions</var>. Each such <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> processes the [[Type]] and [[Handler]] of the PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, and if the [[Handler]] is not <emu-const>empty</emu-const>, calls it passing the given argument. If the [[Handler]] is <emu-const>empty</emu-const>, the behaviour is determined by the [[Type]]. It performs the following steps when called:</p>\n        <emu-alg><ol><li>For each element <var>reaction</var> of <var>reactions</var>, do<ol><li>Let <var>job</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>reaction</var>, <var>argument</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>job</var>.[[Job]], <var>job</var>.[[Realm]]).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}