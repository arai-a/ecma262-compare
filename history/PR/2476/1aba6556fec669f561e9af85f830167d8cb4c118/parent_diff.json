{"from": {"secList": ["sec-properties-of-the-%typedarrayprototype%-object", "sec-array.prototype-@@unscopables", "sec-properties-of-the-array-prototype-object", "sec-%typedarray%.prototype.set", "sec-array.prototype.flat", "sec-array.prototype.sort"], "secData": {"sec-properties-of-the-%typedarrayprototype%-object": {"num": "23.2.3", "title": "#sec-properties-of-the-%typedarrayprototype%-object Properties of the %TypedArray% Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-%typedarrayprototype%-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-%typedarrayprototype%-object\">#sec-properties-of-the-%typedarrayprototype%-object</span> Properties of the %TypedArray% Prototype Object</h1>\n      <p>The <dfn>%TypedArray% prototype object</dfn>:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n        <li>is <dfn>%TypedArray.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>does not have a [[ViewedArrayBuffer]] or any other of the internal slots that are specific to <var>TypedArray</var> instance objects.</li>\n      </ul>\n\n      <div id=\"excluded-sec-get-%typedarray%.prototype.buffer\"><h1><span class=\"secnum\">23.2.3.1</span>#sec-get-%typedarray%.prototype.buffer get %TypedArray%.prototype.buffer</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.bytelength\"><h1><span class=\"secnum\">23.2.3.2</span>#sec-get-%typedarray%.prototype.bytelength get %TypedArray%.prototype.byteLength</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.byteoffset\"><h1><span class=\"secnum\">23.2.3.3</span>#sec-get-%typedarray%.prototype.byteoffset get %TypedArray%.prototype.byteOffset</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.constructor\"><h1><span class=\"secnum\">23.2.3.4</span>#sec-%typedarray%.prototype.constructor %TypedArray%.prototype.constructor</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.copywithin\"><h1><span class=\"secnum\">23.2.3.5</span>#sec-%typedarray%.prototype.copywithin %TypedArray%.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.entries\"><h1><span class=\"secnum\">23.2.3.6</span>#sec-%typedarray%.prototype.entries %TypedArray%.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.every\"><h1><span class=\"secnum\">23.2.3.7</span>#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.fill\"><h1><span class=\"secnum\">23.2.3.8</span>#sec-%typedarray%.prototype.fill %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.filter\"><h1><span class=\"secnum\">23.2.3.9</span>#sec-%typedarray%.prototype.filter %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.find\"><h1><span class=\"secnum\">23.2.3.10</span>#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.findindex\"><h1><span class=\"secnum\">23.2.3.11</span>#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.foreach\"><h1><span class=\"secnum\">23.2.3.12</span>#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.includes\"><h1><span class=\"secnum\">23.2.3.13</span>#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.indexof\"><h1><span class=\"secnum\">23.2.3.14</span>#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.join\"><h1><span class=\"secnum\">23.2.3.15</span>#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.keys\"><h1><span class=\"secnum\">23.2.3.16</span>#sec-%typedarray%.prototype.keys %TypedArray%.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.lastindexof\"><h1><span class=\"secnum\">23.2.3.17</span>#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.length\"><h1><span class=\"secnum\">23.2.3.18</span>#sec-get-%typedarray%.prototype.length get %TypedArray%.prototype.length</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.map\"><h1><span class=\"secnum\">23.2.3.19</span>#sec-%typedarray%.prototype.map %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduce\"><h1><span class=\"secnum\">23.2.3.20</span>#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduceright\"><h1><span class=\"secnum\">23.2.3.21</span>#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reverse\"><h1><span class=\"secnum\">23.2.3.22</span>#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.set\"><h1><span class=\"secnum\">23.2.3.23</span>#sec-%typedarray%.prototype.set %TypedArray%.prototype.set ( source [ , offset ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.slice\"><h1><span class=\"secnum\">23.2.3.24</span>#sec-%typedarray%.prototype.slice %TypedArray%.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.some\"><h1><span class=\"secnum\">23.2.3.25</span>#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.sort\"><h1><span class=\"secnum\">23.2.3.26</span>#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.subarray\"><h1><span class=\"secnum\">23.2.3.27</span>#sec-%typedarray%.prototype.subarray %TypedArray%.prototype.subarray ( begin, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tolocalestring\"><h1><span class=\"secnum\">23.2.3.28</span>#sec-%typedarray%.prototype.tolocalestring %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tostring\"><h1><span class=\"secnum\">23.2.3.29</span>#sec-%typedarray%.prototype.tostring %TypedArray%.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.values\"><h1><span class=\"secnum\">23.2.3.30</span>#sec-%typedarray%.prototype.values %TypedArray%.prototype.values ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype-@@iterator\"><h1><span class=\"secnum\">23.2.3.31</span>#sec-%typedarray%.prototype-@@iterator %TypedArray%.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype-@@tostringtag\"><h1><span class=\"secnum\">23.2.3.32</span>#sec-get-%typedarray%.prototype-@@tostringtag get %TypedArray%.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n\n    "}, "sec-array.prototype-@@unscopables": {"num": "23.1.3.34", "title": "#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]", "html": "<emu-clause id=\"sec-array.prototype-@@unscopables\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype-@@unscopables\">#sec-array.prototype-@@unscopables</span> Array.prototype [ @@unscopables ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@unscopables</a></emu-xref> <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> is an object created by the following steps:</p>\n        <emu-alg><ol><li>Let <var>unscopableList</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"copyWithin\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"entries\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"fill\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"find\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"findIndex\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flat\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flatMap\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"includes\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"keys\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"values\"</emu-val>, <emu-val>true</emu-val>).</li><li>Return <var>unscopableList</var>.</li></ol></emu-alg>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The own property names of this object are property names that were not included as standard properties of <code>Array.prototype</code> prior to the ECMAScript 2015 specification. These names are ignored for <code>with</code> statement binding purposes in order to preserve the behaviour of existing code that might use one of these names as a binding in an outer scope that is shadowed by a <code>with</code> statement whose binding object is an Array object.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-properties-of-the-array-prototype-object": {"num": "23.1.3", "title": "#sec-properties-of-the-array-prototype-object Properties of the Array Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-array-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-array-prototype-object\">#sec-properties-of-the-array-prototype-object</span> Properties of the Array Prototype Object</h1>\n      <p>The <dfn>Array prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%Array.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is <emu-val>+0</emu-val><sub>&#120125;</sub> and whose attributes are { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Array prototype object is specified to be an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-array.prototype.concat\"><h1><span class=\"secnum\">23.1.3.1</span>#sec-array.prototype.concat Array.prototype.concat ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.constructor\"><h1><span class=\"secnum\">23.1.3.2</span>#sec-array.prototype.constructor Array.prototype.constructor</h1>...</div><div id=\"excluded-sec-array.prototype.copywithin\"><h1><span class=\"secnum\">23.1.3.3</span>#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-array.prototype.entries\"><h1><span class=\"secnum\">23.1.3.4</span>#sec-array.prototype.entries Array.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-array.prototype.every\"><h1><span class=\"secnum\">23.1.3.5</span>#sec-array.prototype.every Array.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.fill\"><h1><span class=\"secnum\">23.1.3.6</span>#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.filter\"><h1><span class=\"secnum\">23.1.3.7</span>#sec-array.prototype.filter Array.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.find\"><h1><span class=\"secnum\">23.1.3.8</span>#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findindex\"><h1><span class=\"secnum\">23.1.3.9</span>#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flat\"><h1><span class=\"secnum\">23.1.3.10</span>#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flatmap\"><h1><span class=\"secnum\">23.1.3.11</span>#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.foreach\"><h1><span class=\"secnum\">23.1.3.12</span>#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.includes\"><h1><span class=\"secnum\">23.1.3.13</span>#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.indexof\"><h1><span class=\"secnum\">23.1.3.14</span>#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.join\"><h1><span class=\"secnum\">23.1.3.15</span>#sec-array.prototype.join Array.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-array.prototype.keys\"><h1><span class=\"secnum\">23.1.3.16</span>#sec-array.prototype.keys Array.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-array.prototype.lastindexof\"><h1><span class=\"secnum\">23.1.3.17</span>#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.map\"><h1><span class=\"secnum\">23.1.3.18</span>#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.pop\"><h1><span class=\"secnum\">23.1.3.19</span>#sec-array.prototype.pop Array.prototype.pop ( )</h1>...</div><div id=\"excluded-sec-array.prototype.push\"><h1><span class=\"secnum\">23.1.3.20</span>#sec-array.prototype.push Array.prototype.push ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.reduce\"><h1><span class=\"secnum\">23.1.3.21</span>#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reduceright\"><h1><span class=\"secnum\">23.1.3.22</span>#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reverse\"><h1><span class=\"secnum\">23.1.3.23</span>#sec-array.prototype.reverse Array.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-array.prototype.shift\"><h1><span class=\"secnum\">23.1.3.24</span>#sec-array.prototype.shift Array.prototype.shift ( )</h1>...</div><div id=\"excluded-sec-array.prototype.slice\"><h1><span class=\"secnum\">23.1.3.25</span>#sec-array.prototype.slice Array.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-array.prototype.some\"><h1><span class=\"secnum\">23.1.3.26</span>#sec-array.prototype.some Array.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.sort\"><h1><span class=\"secnum\">23.1.3.27</span>#sec-array.prototype.sort Array.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-array.prototype.splice\"><h1><span class=\"secnum\">23.1.3.28</span>#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.tolocalestring\"><h1><span class=\"secnum\">23.1.3.29</span>#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.tostring\"><h1><span class=\"secnum\">23.1.3.30</span>#sec-array.prototype.tostring Array.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-array.prototype.unshift\"><h1><span class=\"secnum\">23.1.3.31</span>#sec-array.prototype.unshift Array.prototype.unshift ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.values\"><h1><span class=\"secnum\">23.1.3.32</span>#sec-array.prototype.values Array.prototype.values ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@iterator\"><h1><span class=\"secnum\">23.1.3.33</span>#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@unscopables\"><h1><span class=\"secnum\">23.1.3.34</span>#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]</h1>...</div></emu-clause>\n\n    "}, "sec-%typedarray%.prototype.set": {"num": "23.2.3.23", "title": "#sec-%typedarray%.prototype.set %TypedArray%.prototype.set ( source [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set\" oldids=\"sec-%typedarray%.prototype.set-overloaded-offset\"><span id=\"sec-%typedarray%.prototype.set-overloaded-offset\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set\">#sec-%typedarray%.prototype.set</span> %TypedArray%.prototype.set ( <var>source</var> [ , <var>offset</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.set</code> is a function whose behaviour differs based upon the type of its first argument.</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Sets multiple values in this <var>TypedArray</var>, reading the values from <var>source</var>. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n        <p>When the <code>set</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>target</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>target</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>source</var> is an Object that has a [[TypedArrayName]] internal slot, then<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromTypedArray\"><a href=\"#sec-settypedarrayfromtypedarray\">SetTypedArrayFromTypedArray</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromArrayLike\"><a href=\"#sec-settypedarrayfromarraylike\">SetTypedArrayFromArrayLike</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-settypedarrayfromtypedarray\"><h1><span class=\"secnum\">23.2.3.23.1</span>#sec-settypedarrayfromtypedarray SetTypedArrayFromTypedArray ( target, targetOffset, source )</h1>...</div><div id=\"excluded-sec-settypedarrayfromarraylike\"><h1><span class=\"secnum\">23.2.3.23.2</span>#sec-settypedarrayfromarraylike SetTypedArrayFromArrayLike ( target, targetOffset, source )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype.flat": {"num": "23.1.3.10", "title": "#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )", "html": "<emu-clause id=\"sec-array.prototype.flat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.flat\">#sec-array.prototype.flat</span> Array.prototype.flat ( [ <var>depth</var> ] )</h1>\n        <p>When the <code>flat</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>sourceLen</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>depthNum</var> be 1.</li><li>If <var>depth</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>depthNum</var> to ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>depth</var>).</li><li>If <var>depthNum</var> &lt; 0, set <var>depthNum</var> to 0.</li></ol></li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Perform ?&#160;<emu-xref aoid=\"FlattenIntoArray\"><a href=\"#sec-flattenintoarray\">FlattenIntoArray</a></emu-xref>(<var>A</var>, <var>O</var>, <var>sourceLen</var>, 0, <var>depthNum</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-flattenintoarray\"><h1><span class=\"secnum\">23.1.3.10.1</span>#sec-flattenintoarray FlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction [ , thisArg ] ] )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype.sort": {"num": "23.1.3.27", "title": "#sec-array.prototype.sort Array.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-array.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</span> Array.prototype.sort ( <var>comparefn</var> )</h1>\n        <p>The elements of this array are sorted. The sort must be stable (that is, elements that compare equal must remain in their original order). If <var>comparefn</var> is not <emu-val>undefined</emu-val>, it should be a function that accepts two arguments <var>x</var> and <var>y</var> and returns a negative Number if <var>x</var> &lt; <var>y</var>, a positive Number if <var>x</var> &gt; <var>y</var>, or a zero otherwise.</p>\n        <p>When the <code>sort</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li id=\"step-array-sort-comparefn\">If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li id=\"step-array-sort-len\">Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>obj</var>).</li><li>Let <var>items</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>obj</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>Pk</var>).</li><li>Append <var>kValue</var> to <var>items</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li id=\"step-array-sort\">Sort <var>items</var> using an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> sequence of calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>. If any such call returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, stop before performing any further calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> or steps in this algorithm and return that completion.</li><li>Let <var>j</var> be 0.</li><li>Repeat, while <var>j</var> &lt; <var>itemCount</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>j</var>)), <var>items</var>[<var>j</var>], <emu-val>true</emu-val>).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li>Repeat, while <var>j</var> &lt; <var>len</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>j</var>))).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        <p>The <em>sort order</em> is the ordering, after completion of this function, of the <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> property values of <var>obj</var> whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> indexes are less than <var>len</var>. The result of the <code>sort</code> function is then determined as follows:</p>\n        <p>The sort order is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> if any of the following conditions is true:</p>\n        <ul>\n          <li>\n            If <var>comparefn</var> is not <emu-val>undefined</emu-val> and is not a consistent comparison function for the elements of <var>items</var> (see below).\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> does not act as a consistent comparison function.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and all applications of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, to any specific value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>, do not produce the same result.\n          </li>\n        </ul>\n        <p>Unless the sort order is specified above to be <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>, <var>items</var> must satisfy all of the following conditions after executing step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> of the algorithm above:</p>\n        <ul>\n          <li>\n            There must be some mathematical permutation &#960; of the non-negative integers less than <var>itemCount</var>, such that for every non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> less than <var>itemCount</var>, the element <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is exactly the same as <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn>.\n          </li>\n          <li>\n            Then for all non-negative integers <var>j</var> and <var>k</var>, each less than <var>itemCount</var>, if <emu-eqn class=\"inline\"><emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>(old[<var>j</var>], old[<var>k</var>]) &lt; 0</emu-eqn> (see <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> below), then <emu-eqn class=\"inline\">&#960;(<var>j</var>) &lt; &#960;(<var>k</var>)</emu-eqn>.\n          </li>\n        </ul>\n        <p>Here the notation <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is used to refer to <emu-eqn class=\"inline\"><var>items</var>[<var>j</var>]</emu-eqn> before step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> is executed, and the notation <emu-eqn class=\"inline\">new[<var>j</var>]</emu-eqn> to refer to <emu-eqn class=\"inline\"><var>items</var>[<var>j</var>]</emu-eqn> after step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> has been executed.</p>\n        <p>A function <var>comparefn</var> is a consistent comparison function for a set of values <var>S</var> if all of the requirements below are met for all values <var>a</var>, <var>b</var>, and <var>c</var> (possibly the same value) in the set <var>S</var>: The notation <emu-eqn class=\"inline\"><var>a</var> &lt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &lt; 0</emu-eqn>; <emu-eqn class=\"inline\"><var>a</var> =<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) = 0</emu-eqn> (of either sign); and <emu-eqn class=\"inline\"><var>a</var> &gt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &gt; 0</emu-eqn>.</p>\n        <ul>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) always returns the same value <var>v</var> when given a specific pair of values <var>a</var> and <var>b</var> as its two arguments. Furthermore, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, and <var>v</var> is not <emu-val>NaN</emu-val>. Note that this implies that exactly one of <var>a</var> &lt;<sub>CF</sub> <var>b</var>, <var>a</var> =<sub>CF</sub> <var>b</var>, and <var>a</var> &gt;<sub>CF</sub> <var>b</var> will be true for a given pair of <var>a</var> and <var>b</var>.\n          </li>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) does not modify <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            <var>a</var> =<sub>CF</sub> <var>a</var> (reflexivity)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var>, then <var>b</var> =<sub>CF</sub> <var>a</var> (symmetry)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var> and <var>b</var> =<sub>CF</sub> <var>c</var>, then <var>a</var> =<sub>CF</sub> <var>c</var> (transitivity of =<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &lt;<sub>CF</sub> <var>b</var> and <var>b</var> &lt;<sub>CF</sub> <var>c</var>, then <var>a</var> &lt;<sub>CF</sub> <var>c</var> (transitivity of &lt;<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &gt;<sub>CF</sub> <var>b</var> and <var>b</var> &gt;<sub>CF</sub> <var>c</var>, then <var>a</var> &gt;<sub>CF</sub> <var>c</var> (transitivity of &gt;<sub>CF</sub>)\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The above conditions are necessary and sufficient to ensure that <var>comparefn</var> divides the set <var>S</var> into equivalence classes and that these equivalence classes are totally ordered.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>sort</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-sortcompare\"><h1><span class=\"secnum\">23.1.3.27.1</span>#sec-sortcompare SortCompare ( x, y )</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-%typedarray%.prototype.findlastindex", "sec-properties-of-the-%typedarrayprototype%-object", "sec-array.prototype-@@unscopables", "sec-properties-of-the-array-prototype-object", "sec-%typedarray%.prototype.set", "sec-array.prototype.findlastindex", "sec-%typedarray%.prototype.findlast", "sec-array.prototype.flat", "sec-array.prototype.sort", "sec-array.prototype.findlast"], "secData": {"sec-%typedarray%.prototype.findlastindex": {"num": "23.2.3.13", "title": "#sec-%typedarray%.prototype.findlastindex %TypedArray%.prototype.findLastIndex ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.findlastindex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.findlastindex\">#sec-%typedarray%.prototype.findlastindex</span> %TypedArray%.prototype.findLastIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.findLastIndex</code> are the same as for <code>Array.prototype.findLastIndex</code> as defined in <emu-xref href=\"#sec-array.prototype.findlastindex\"><a href=\"#sec-array.prototype.findlastindex\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.findlastindex\">#sec-array.prototype.findlastindex</a></emu-xref>.</p>\n        <p>When the <code>findLastIndex</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var> - 1.</li><li>Repeat, while <var>k</var> &#8805; 0,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>), <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-%typedarrayprototype%-object": {"num": "23.2.3", "title": "#sec-properties-of-the-%typedarrayprototype%-object Properties of the %TypedArray% Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-%typedarrayprototype%-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-%typedarrayprototype%-object\">#sec-properties-of-the-%typedarrayprototype%-object</span> Properties of the %TypedArray% Prototype Object</h1>\n      <p>The <dfn>%TypedArray% prototype object</dfn>:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n        <li>is <dfn>%TypedArray.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>does not have a [[ViewedArrayBuffer]] or any other of the internal slots that are specific to <var>TypedArray</var> instance objects.</li>\n      </ul>\n\n      <div id=\"excluded-sec-get-%typedarray%.prototype.buffer\"><h1><span class=\"secnum\">23.2.3.1</span>#sec-get-%typedarray%.prototype.buffer get %TypedArray%.prototype.buffer</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.bytelength\"><h1><span class=\"secnum\">23.2.3.2</span>#sec-get-%typedarray%.prototype.bytelength get %TypedArray%.prototype.byteLength</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.byteoffset\"><h1><span class=\"secnum\">23.2.3.3</span>#sec-get-%typedarray%.prototype.byteoffset get %TypedArray%.prototype.byteOffset</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.constructor\"><h1><span class=\"secnum\">23.2.3.4</span>#sec-%typedarray%.prototype.constructor %TypedArray%.prototype.constructor</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.copywithin\"><h1><span class=\"secnum\">23.2.3.5</span>#sec-%typedarray%.prototype.copywithin %TypedArray%.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.entries\"><h1><span class=\"secnum\">23.2.3.6</span>#sec-%typedarray%.prototype.entries %TypedArray%.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.every\"><h1><span class=\"secnum\">23.2.3.7</span>#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.fill\"><h1><span class=\"secnum\">23.2.3.8</span>#sec-%typedarray%.prototype.fill %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.filter\"><h1><span class=\"secnum\">23.2.3.9</span>#sec-%typedarray%.prototype.filter %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.find\"><h1><span class=\"secnum\">23.2.3.10</span>#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.findindex\"><h1><span class=\"secnum\">23.2.3.11</span>#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.findlast\"><h1><span class=\"secnum\">23.2.3.12</span>#sec-%typedarray%.prototype.findlast %TypedArray%.prototype.findLast ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.findlastindex\"><h1><span class=\"secnum\">23.2.3.13</span>#sec-%typedarray%.prototype.findlastindex %TypedArray%.prototype.findLastIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.foreach\"><h1><span class=\"secnum\">23.2.3.14</span>#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.includes\"><h1><span class=\"secnum\">23.2.3.15</span>#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.indexof\"><h1><span class=\"secnum\">23.2.3.16</span>#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.join\"><h1><span class=\"secnum\">23.2.3.17</span>#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.keys\"><h1><span class=\"secnum\">23.2.3.18</span>#sec-%typedarray%.prototype.keys %TypedArray%.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.lastindexof\"><h1><span class=\"secnum\">23.2.3.19</span>#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.length\"><h1><span class=\"secnum\">23.2.3.20</span>#sec-get-%typedarray%.prototype.length get %TypedArray%.prototype.length</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.map\"><h1><span class=\"secnum\">23.2.3.21</span>#sec-%typedarray%.prototype.map %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduce\"><h1><span class=\"secnum\">23.2.3.22</span>#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduceright\"><h1><span class=\"secnum\">23.2.3.23</span>#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reverse\"><h1><span class=\"secnum\">23.2.3.24</span>#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.set\"><h1><span class=\"secnum\">23.2.3.25</span>#sec-%typedarray%.prototype.set %TypedArray%.prototype.set ( source [ , offset ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.slice\"><h1><span class=\"secnum\">23.2.3.26</span>#sec-%typedarray%.prototype.slice %TypedArray%.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.some\"><h1><span class=\"secnum\">23.2.3.27</span>#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.sort\"><h1><span class=\"secnum\">23.2.3.28</span>#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.subarray\"><h1><span class=\"secnum\">23.2.3.29</span>#sec-%typedarray%.prototype.subarray %TypedArray%.prototype.subarray ( begin, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tolocalestring\"><h1><span class=\"secnum\">23.2.3.30</span>#sec-%typedarray%.prototype.tolocalestring %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tostring\"><h1><span class=\"secnum\">23.2.3.31</span>#sec-%typedarray%.prototype.tostring %TypedArray%.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.values\"><h1><span class=\"secnum\">23.2.3.32</span>#sec-%typedarray%.prototype.values %TypedArray%.prototype.values ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype-@@iterator\"><h1><span class=\"secnum\">23.2.3.33</span>#sec-%typedarray%.prototype-@@iterator %TypedArray%.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype-@@tostringtag\"><h1><span class=\"secnum\">23.2.3.34</span>#sec-get-%typedarray%.prototype-@@tostringtag get %TypedArray%.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n\n    "}, "sec-array.prototype-@@unscopables": {"num": "23.1.3.36", "title": "#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]", "html": "<emu-clause id=\"sec-array.prototype-@@unscopables\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype-@@unscopables\">#sec-array.prototype-@@unscopables</span> Array.prototype [ @@unscopables ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@unscopables</a></emu-xref> <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> is an object created by the following steps:</p>\n        <emu-alg><ol><li>Let <var>unscopableList</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"copyWithin\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"entries\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"fill\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"find\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"findIndex\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"findLast\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"findLastIndex\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flat\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flatMap\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"includes\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"keys\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"values\"</emu-val>, <emu-val>true</emu-val>).</li><li>Return <var>unscopableList</var>.</li></ol></emu-alg>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The own property names of this object are property names that were not included as standard properties of <code>Array.prototype</code> prior to the ECMAScript 2015 specification. These names are ignored for <code>with</code> statement binding purposes in order to preserve the behaviour of existing code that might use one of these names as a binding in an outer scope that is shadowed by a <code>with</code> statement whose binding object is an Array object.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-properties-of-the-array-prototype-object": {"num": "23.1.3", "title": "#sec-properties-of-the-array-prototype-object Properties of the Array Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-array-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-array-prototype-object\">#sec-properties-of-the-array-prototype-object</span> Properties of the Array Prototype Object</h1>\n      <p>The <dfn>Array prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%Array.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is <emu-val>+0</emu-val><sub>&#120125;</sub> and whose attributes are { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Array prototype object is specified to be an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-array.prototype.concat\"><h1><span class=\"secnum\">23.1.3.1</span>#sec-array.prototype.concat Array.prototype.concat ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.constructor\"><h1><span class=\"secnum\">23.1.3.2</span>#sec-array.prototype.constructor Array.prototype.constructor</h1>...</div><div id=\"excluded-sec-array.prototype.copywithin\"><h1><span class=\"secnum\">23.1.3.3</span>#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-array.prototype.entries\"><h1><span class=\"secnum\">23.1.3.4</span>#sec-array.prototype.entries Array.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-array.prototype.every\"><h1><span class=\"secnum\">23.1.3.5</span>#sec-array.prototype.every Array.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.fill\"><h1><span class=\"secnum\">23.1.3.6</span>#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.filter\"><h1><span class=\"secnum\">23.1.3.7</span>#sec-array.prototype.filter Array.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.find\"><h1><span class=\"secnum\">23.1.3.8</span>#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findindex\"><h1><span class=\"secnum\">23.1.3.9</span>#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findlast\"><h1><span class=\"secnum\">23.1.3.10</span>#sec-array.prototype.findlast Array.prototype.findLast ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findlastindex\"><h1><span class=\"secnum\">23.1.3.11</span>#sec-array.prototype.findlastindex Array.prototype.findLastIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flat\"><h1><span class=\"secnum\">23.1.3.12</span>#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flatmap\"><h1><span class=\"secnum\">23.1.3.13</span>#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.foreach\"><h1><span class=\"secnum\">23.1.3.14</span>#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.includes\"><h1><span class=\"secnum\">23.1.3.15</span>#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.indexof\"><h1><span class=\"secnum\">23.1.3.16</span>#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.join\"><h1><span class=\"secnum\">23.1.3.17</span>#sec-array.prototype.join Array.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-array.prototype.keys\"><h1><span class=\"secnum\">23.1.3.18</span>#sec-array.prototype.keys Array.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-array.prototype.lastindexof\"><h1><span class=\"secnum\">23.1.3.19</span>#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.map\"><h1><span class=\"secnum\">23.1.3.20</span>#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.pop\"><h1><span class=\"secnum\">23.1.3.21</span>#sec-array.prototype.pop Array.prototype.pop ( )</h1>...</div><div id=\"excluded-sec-array.prototype.push\"><h1><span class=\"secnum\">23.1.3.22</span>#sec-array.prototype.push Array.prototype.push ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.reduce\"><h1><span class=\"secnum\">23.1.3.23</span>#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reduceright\"><h1><span class=\"secnum\">23.1.3.24</span>#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reverse\"><h1><span class=\"secnum\">23.1.3.25</span>#sec-array.prototype.reverse Array.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-array.prototype.shift\"><h1><span class=\"secnum\">23.1.3.26</span>#sec-array.prototype.shift Array.prototype.shift ( )</h1>...</div><div id=\"excluded-sec-array.prototype.slice\"><h1><span class=\"secnum\">23.1.3.27</span>#sec-array.prototype.slice Array.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-array.prototype.some\"><h1><span class=\"secnum\">23.1.3.28</span>#sec-array.prototype.some Array.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.sort\"><h1><span class=\"secnum\">23.1.3.29</span>#sec-array.prototype.sort Array.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-array.prototype.splice\"><h1><span class=\"secnum\">23.1.3.30</span>#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.tolocalestring\"><h1><span class=\"secnum\">23.1.3.31</span>#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.tostring\"><h1><span class=\"secnum\">23.1.3.32</span>#sec-array.prototype.tostring Array.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-array.prototype.unshift\"><h1><span class=\"secnum\">23.1.3.33</span>#sec-array.prototype.unshift Array.prototype.unshift ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.values\"><h1><span class=\"secnum\">23.1.3.34</span>#sec-array.prototype.values Array.prototype.values ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@iterator\"><h1><span class=\"secnum\">23.1.3.35</span>#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@unscopables\"><h1><span class=\"secnum\">23.1.3.36</span>#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]</h1>...</div></emu-clause>\n\n    "}, "sec-%typedarray%.prototype.set": {"num": "23.2.3.25", "title": "#sec-%typedarray%.prototype.set %TypedArray%.prototype.set ( source [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set\" oldids=\"sec-%typedarray%.prototype.set-overloaded-offset\"><span id=\"sec-%typedarray%.prototype.set-overloaded-offset\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set\">#sec-%typedarray%.prototype.set</span> %TypedArray%.prototype.set ( <var>source</var> [ , <var>offset</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.set</code> is a function whose behaviour differs based upon the type of its first argument.</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Sets multiple values in this <var>TypedArray</var>, reading the values from <var>source</var>. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n        <p>When the <code>set</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>target</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>target</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>source</var> is an Object that has a [[TypedArrayName]] internal slot, then<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromTypedArray\"><a href=\"#sec-settypedarrayfromtypedarray\">SetTypedArrayFromTypedArray</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromArrayLike\"><a href=\"#sec-settypedarrayfromarraylike\">SetTypedArrayFromArrayLike</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-settypedarrayfromtypedarray\"><h1><span class=\"secnum\">23.2.3.25.1</span>#sec-settypedarrayfromtypedarray SetTypedArrayFromTypedArray ( target, targetOffset, source )</h1>...</div><div id=\"excluded-sec-settypedarrayfromarraylike\"><h1><span class=\"secnum\">23.2.3.25.2</span>#sec-settypedarrayfromarraylike SetTypedArrayFromArrayLike ( target, targetOffset, source )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype.findlastindex": {"num": "23.1.3.11", "title": "#sec-array.prototype.findlastindex Array.prototype.findLastIndex ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.findlastindex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.findlastindex\">#sec-array.prototype.findlastindex</span> Array.prototype.findLastIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>predicate</var> should be a function that accepts three arguments and returns a value that is coercible to a Boolean value. <code>findLastIndex</code> calls <var>predicate</var> once for each element of the array, in descending index order, until it finds one where <var>predicate</var> returns <emu-val>true</emu-val>. If such an element is found, <code>findLastIndex</code> immediately returns the index of that element value. Otherwise, <code>findLastIndex</code> returns -1.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>predicate</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>predicate</var> is called with three arguments: the element, the index of the element in the array, and the object being traversed.</p>\n          <p><code>findLastIndex</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>predicate</var>.</p>\n          <p>The range of elements processed by <code>findLastIndex</code> is set before the first call to <var>predicate</var>. Elements that are appended to the array after the call to <code>findLastIndex</code> begins will not be visited by <var>predicate</var>. If existing elements of the array are changed, their value as passed to <var>predicate</var> will be the value at the time that <code>findLastIndex</code> visits them.</p>\n        </div></emu-note>\n        <p>When the <code>findLastIndex</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var> - 1.</li><li>Repeat, while <var>k</var> &#8805; 0,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>), <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>findLastIndex</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.findlast": {"num": "23.2.3.12", "title": "#sec-%typedarray%.prototype.findlast %TypedArray%.prototype.findLast ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.findlast\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.findlast\">#sec-%typedarray%.prototype.findlast</span> %TypedArray%.prototype.findLast ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.findLast</code> are the same as for <code>Array.prototype.findLast</code> as defined in <emu-xref href=\"#sec-array.prototype.findlast\"><a href=\"#sec-array.prototype.findlast\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.findlast\">#sec-array.prototype.findlast</a></emu-xref>.</p>\n        <p>When the <code>findLast</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var> - 1.</li><li>Repeat, while <var>k</var> &#8805; 0,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>), <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <var>kValue</var>.</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype.flat": {"num": "23.1.3.12", "title": "#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )", "html": "<emu-clause id=\"sec-array.prototype.flat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.flat\">#sec-array.prototype.flat</span> Array.prototype.flat ( [ <var>depth</var> ] )</h1>\n        <p>When the <code>flat</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>sourceLen</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>depthNum</var> be 1.</li><li>If <var>depth</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>depthNum</var> to ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>depth</var>).</li><li>If <var>depthNum</var> &lt; 0, set <var>depthNum</var> to 0.</li></ol></li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Perform ?&#160;<emu-xref aoid=\"FlattenIntoArray\"><a href=\"#sec-flattenintoarray\">FlattenIntoArray</a></emu-xref>(<var>A</var>, <var>O</var>, <var>sourceLen</var>, 0, <var>depthNum</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-flattenintoarray\"><h1><span class=\"secnum\">23.1.3.12.1</span>#sec-flattenintoarray FlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction [ , thisArg ] ] )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype.sort": {"num": "23.1.3.29", "title": "#sec-array.prototype.sort Array.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-array.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</span> Array.prototype.sort ( <var>comparefn</var> )</h1>\n        <p>The elements of this array are sorted. The sort must be stable (that is, elements that compare equal must remain in their original order). If <var>comparefn</var> is not <emu-val>undefined</emu-val>, it should be a function that accepts two arguments <var>x</var> and <var>y</var> and returns a negative Number if <var>x</var> &lt; <var>y</var>, a positive Number if <var>x</var> &gt; <var>y</var>, or a zero otherwise.</p>\n        <p>When the <code>sort</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li id=\"step-array-sort-comparefn\">If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li id=\"step-array-sort-len\">Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>obj</var>).</li><li>Let <var>items</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>obj</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>Pk</var>).</li><li>Append <var>kValue</var> to <var>items</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li id=\"step-array-sort\">Sort <var>items</var> using an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> sequence of calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>. If any such call returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, stop before performing any further calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> or steps in this algorithm and return that completion.</li><li>Let <var>j</var> be 0.</li><li>Repeat, while <var>j</var> &lt; <var>itemCount</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>j</var>)), <var>items</var>[<var>j</var>], <emu-val>true</emu-val>).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li>Repeat, while <var>j</var> &lt; <var>len</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>j</var>))).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        <p>The <em>sort order</em> is the ordering, after completion of this function, of the <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> property values of <var>obj</var> whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> indexes are less than <var>len</var>. The result of the <code>sort</code> function is then determined as follows:</p>\n        <p>The sort order is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> if any of the following conditions is true:</p>\n        <ul>\n          <li>\n            If <var>comparefn</var> is not <emu-val>undefined</emu-val> and is not a consistent comparison function for the elements of <var>items</var> (see below).\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> does not act as a consistent comparison function.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and all applications of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, to any specific value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>, do not produce the same result.\n          </li>\n        </ul>\n        <p>Unless the sort order is specified above to be <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>, <var>items</var> must satisfy all of the following conditions after executing step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> of the algorithm above:</p>\n        <ul>\n          <li>\n            There must be some mathematical permutation &#960; of the non-negative integers less than <var>itemCount</var>, such that for every non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> less than <var>itemCount</var>, the element <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is exactly the same as <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn>.\n          </li>\n          <li>\n            Then for all non-negative integers <var>j</var> and <var>k</var>, each less than <var>itemCount</var>, if <emu-eqn class=\"inline\"><emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>(old[<var>j</var>], old[<var>k</var>]) &lt; 0</emu-eqn> (see <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> below), then <emu-eqn class=\"inline\">&#960;(<var>j</var>) &lt; &#960;(<var>k</var>)</emu-eqn>.\n          </li>\n        </ul>\n        <p>Here the notation <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is used to refer to <emu-eqn class=\"inline\"><var>items</var>[<var>j</var>]</emu-eqn> before step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> is executed, and the notation <emu-eqn class=\"inline\">new[<var>j</var>]</emu-eqn> to refer to <emu-eqn class=\"inline\"><var>items</var>[<var>j</var>]</emu-eqn> after step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> has been executed.</p>\n        <p>A function <var>comparefn</var> is a consistent comparison function for a set of values <var>S</var> if all of the requirements below are met for all values <var>a</var>, <var>b</var>, and <var>c</var> (possibly the same value) in the set <var>S</var>: The notation <emu-eqn class=\"inline\"><var>a</var> &lt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &lt; 0</emu-eqn>; <emu-eqn class=\"inline\"><var>a</var> =<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) = 0</emu-eqn> (of either sign); and <emu-eqn class=\"inline\"><var>a</var> &gt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &gt; 0</emu-eqn>.</p>\n        <ul>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) always returns the same value <var>v</var> when given a specific pair of values <var>a</var> and <var>b</var> as its two arguments. Furthermore, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, and <var>v</var> is not <emu-val>NaN</emu-val>. Note that this implies that exactly one of <var>a</var> &lt;<sub>CF</sub> <var>b</var>, <var>a</var> =<sub>CF</sub> <var>b</var>, and <var>a</var> &gt;<sub>CF</sub> <var>b</var> will be true for a given pair of <var>a</var> and <var>b</var>.\n          </li>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) does not modify <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            <var>a</var> =<sub>CF</sub> <var>a</var> (reflexivity)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var>, then <var>b</var> =<sub>CF</sub> <var>a</var> (symmetry)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var> and <var>b</var> =<sub>CF</sub> <var>c</var>, then <var>a</var> =<sub>CF</sub> <var>c</var> (transitivity of =<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &lt;<sub>CF</sub> <var>b</var> and <var>b</var> &lt;<sub>CF</sub> <var>c</var>, then <var>a</var> &lt;<sub>CF</sub> <var>c</var> (transitivity of &lt;<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &gt;<sub>CF</sub> <var>b</var> and <var>b</var> &gt;<sub>CF</sub> <var>c</var>, then <var>a</var> &gt;<sub>CF</sub> <var>c</var> (transitivity of &gt;<sub>CF</sub>)\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The above conditions are necessary and sufficient to ensure that <var>comparefn</var> divides the set <var>S</var> into equivalence classes and that these equivalence classes are totally ordered.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>sort</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-sortcompare\"><h1><span class=\"secnum\">23.1.3.29.1</span>#sec-sortcompare SortCompare ( x, y )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype.findlast": {"num": "23.1.3.10", "title": "#sec-array.prototype.findlast Array.prototype.findLast ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.findlast\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.findlast\">#sec-array.prototype.findlast</span> Array.prototype.findLast ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>predicate</var> should be a function that accepts three arguments and returns a value that is coercible to a Boolean value. <code>findLast</code> calls <var>predicate</var> once for each element of the array, in descending index order, until it finds one where <var>predicate</var> returns <emu-val>true</emu-val>. If such an element is found, <code>findLast</code> immediately returns that element value. Otherwise, <code>findLast</code> returns <emu-val>undefined</emu-val>.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>predicate</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>predicate</var> is called with three arguments: the element, the index of the element in the array, and the object being traversed.</p>\n          <p><code>findLast</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>predicate</var>.</p>\n          <p>The range of elements processed by <code>findLast</code> is set before the first call to <var>predicate</var>. Elements that are appended to the array after the call to <code>findLast</code> begins will not be visited by <var>predicate</var>. If existing elements of the array are changed, their value as passed to <var>predicate</var> will be the value at the time that <code>findLast</code> visits them.</p>\n        </div></emu-note>\n        <p>When the <code>findLast</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var> - 1.</li><li>Repeat, while <var>k</var> &#8805; 0,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>), <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <var>kValue</var>.</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>findLast</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}