{"from": {"secList": ["sec-declarative-environment-records-createimmutablebinding-n-s", "sec-declarative-environment-records-createmutablebinding-n-d", "sec-strict-mode-of-ecmascript", "sec-object-environment-records", "sec-function-environment-records-hassuperbinding", "sec-getsuperbase", "sec-global-environment-records-createmutablebinding-n-d", "sec-arraysetlength", "sec-object-environment-records-createmutablebinding-n-d", "sec-global-environment-records-createimmutablebinding-n-s"], "secData": {"sec-declarative-environment-records-createimmutablebinding-n-s": {"num": "9.1.1.1.3", "title": "#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-createimmutablebinding-n-s\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">#sec-declarative-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The CreateImmutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If <var>S</var> has the value <emu-val>true</emu-val>, the new binding is marked as a strict binding. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create an immutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>S</var> is <emu-val>true</emu-val>, record that the newly created binding is a strict binding.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-createmutablebinding-n-d": {"num": "9.1.1.1.2", "title": "#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-declarative-environment-records-createmutablebinding-n-d\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createmutablebinding-n-d\">#sec-declarative-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The CreateMutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>D</var> (a Boolean). It creates a new mutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If <var>D</var> has the value <emu-val>true</emu-val>, the new binding is marked as being subject to deletion. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create a mutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>D</var> is <emu-val>true</emu-val>, record that the newly created binding may be deleted by a subsequent DeleteBinding call.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">reserved words</a></emu-xref> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must disallow instances of the productions <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"8n96hykg\"><emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> and <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xvklurnl\"><emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>.\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must disallow instances of the productions <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6mwrfc1u\"><emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> and <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nv0ui3q7\"><emu-nt><a href=\"#prod-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>.\n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable Reference. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot has the value <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    </li>\n    <li>\n      Arguments objects for <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref> define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    </li>\n    <li>\n      Arguments objects for <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref> do not dynamically share their <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property values with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    </li>\n    <li>\n      For <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref>, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } or otherwise cannot be deleted (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a Function, Generator, or AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref> of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-object-environment-records": {"num": "9.1.1.2", "title": "#sec-object-environment-records Object Environment Records", "html": "<emu-clause id=\"sec-object-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records\">#sec-object-environment-records</span> Object Environment Records</h1>\n        <p>Each <dfn variants=\"object Environment Records\">object Environment Record</dfn> is associated with an object called its <em>binding object</em>. An object Environment Record binds the set of string identifier names that directly correspond to the property names of its binding object. Property keys that are not strings in the form of an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are not included in the set of bound identifiers. Both own and inherited properties are included in the set regardless of the setting of their [[Enumerable]] attribute. Because properties can be dynamically added and deleted from objects, the set of identifiers bound by an object Environment Record may potentially change as a side-effect of any operation that adds or deletes properties. Any bindings that are created as a result of such a side-effect are considered to be a mutable binding even if the Writable attribute of the corresponding property has the value <emu-val>false</emu-val>. Immutable bindings do not exist for object Environment Records.</p>\n        <p>Object Environment Records created for <code>with</code> statements (<emu-xref href=\"#sec-with-statement\"><a href=\"#sec-with-statement\" class=\"excluded-xref\" excluded-id=\"sec-with-statement\">#sec-with-statement</a></emu-xref>) can provide their binding object as an implicit <emu-val>this</emu-val> value for use in function calls. The capability is controlled by a Boolean [[IsWithEnvironment]] field.</p>\n        <p>Object Environment Records have the additional state fields listed in <emu-xref href=\"#table-additional-fields-of-object-environment-records\"><a href=\"#table-additional-fields-of-object-environment-records\" class=\"excluded-xref\" excluded-id=\"table-additional-fields-of-object-environment-records\">#table-additional-fields-of-object-environment-records</a></emu-xref>.</p>\n        <emu-table id=\"table-additional-fields-of-object-environment-records\" caption=\"Additional Fields of Object Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-fields-of-object-environment-records\">#table-additional-fields-of-object-environment-records</span>: Additional Fields of <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">Object Environment Records</a></emu-xref></figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[BindingObject]]\n              </td>\n              <td>\n                Object\n              </td>\n              <td>\n                The binding object of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsWithEnvironment]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                Indicates whether this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for a <code>with</code> statement.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the concrete specification methods for object Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-object-environment-records-hasbinding-n\"><h1><span class=\"secnum\">9.1.1.2.1</span>#sec-object-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">9.1.1.2.2</span>#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-object-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">9.1.1.2.3</span>#sec-object-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">9.1.1.2.4</span>#sec-object-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-object-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">9.1.1.2.5</span>#sec-object-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">9.1.1.2.6</span>#sec-object-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-deletebinding-n\"><h1><span class=\"secnum\">9.1.1.2.7</span>#sec-object-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-hasthisbinding\"><h1><span class=\"secnum\">9.1.1.2.8</span>#sec-object-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-hassuperbinding\"><h1><span class=\"secnum\">9.1.1.2.9</span>#sec-object-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-withbaseobject\"><h1><span class=\"secnum\">9.1.1.2.10</span>#sec-object-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-function-environment-records-hassuperbinding": {"num": "9.1.1.3.3", "title": "#sec-function-environment-records-hassuperbinding HasSuperBinding ( )", "html": "<emu-clause id=\"sec-function-environment-records-hassuperbinding\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records-hassuperbinding\">#sec-function-environment-records-hassuperbinding</span> HasSuperBinding ( )</h1>\n          <p>The HasSuperBinding concrete method of a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> <var>envRec</var> takes no arguments. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>envRec</var>.[[ThisBindingStatus]] is <emu-const>lexical</emu-const>, return <emu-val>false</emu-val>.</li><li>If <var>envRec</var>.[[FunctionObject]].[[HomeObject]] has the value <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>; otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-getsuperbase": {"num": "9.1.1.3.5", "title": "#sec-getsuperbase GetSuperBase ( )", "html": "<emu-clause id=\"sec-getsuperbase\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getsuperbase\">#sec-getsuperbase</span> GetSuperBase ( )</h1>\n          <p>The GetSuperBase concrete method of a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> <var>envRec</var> takes no arguments. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>home</var> be <var>envRec</var>.[[FunctionObject]].[[HomeObject]].</li><li>If <var>home</var> has the value <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>home</var>) is Object.</li><li>Return ? <var>home</var>.[[GetPrototypeOf]]().</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-global-environment-records-createmutablebinding-n-d": {"num": "9.1.1.4.2", "title": "#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-global-environment-records-createmutablebinding-n-d\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createmutablebinding-n-d\">#sec-global-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The CreateMutableBinding concrete method of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>D</var> (a Boolean). It creates a new mutable binding for the name <var>N</var> that is uninitialized. The binding is created in the associated DeclarativeRecord. A binding for <var>N</var> must not already exist in the DeclarativeRecord. If <var>D</var> has the value <emu-val>true</emu-val>, the new binding is marked as being subject to deletion. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-arraysetlength": {"num": "10.4.2.4", "title": "#sec-arraysetlength ArraySetLength ( A, Desc )", "html": "<emu-clause id=\"sec-arraysetlength\" type=\"abstract operation\" aoid=\"ArraySetLength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraysetlength\">#sec-arraysetlength</span> ArraySetLength ( <var>A</var>, <var>Desc</var> )</h1>\n        <p>The abstract operation ArraySetLength takes arguments <var>A</var> (an Array) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>Desc</var>.[[Value]] is absent, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>Desc</var>).</li></ol></li><li>Let <var>newLenDesc</var> be a copy of <var>Desc</var>.</li><li id=\"step-arraysetlength-newlen\">Let <var>newLen</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li id=\"step-arraysetlength-numberlen\">Let <var>numberLen</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li>If <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>newLen</var>, <var>numberLen</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Set <var>newLenDesc</var>.[[Value]] to <var>newLen</var>.</li><li>Let <var>oldLenDesc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>oldLenDesc</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLenDesc</var>.[[Configurable]] is <emu-val>false</emu-val>.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li>If <var>newLen</var> &#8805; <var>oldLen</var>, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li></ol></li><li>If <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>newLenDesc</var>.[[Writable]] is absent or has the value <emu-val>true</emu-val>, let <var>newWritable</var> be <emu-val>true</emu-val>.</li><li>Else,<ol><li>NOTE: Setting the [[Writable]] attribute to <emu-val>false</emu-val> is deferred in case any elements cannot be deleted.</li><li>Let <var>newWritable</var> be <emu-val>false</emu-val>.</li><li>Set <var>newLenDesc</var>.[[Writable]] to <emu-val>true</emu-val>.</li></ol></li><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>For each own property key <var>P</var> of <var>A</var> that is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, whose numeric value is greater than or equal to <var>newLen</var>, in descending numeric index order, do<ol><li>Let <var>deleteSucceeded</var> be ! <var>A</var>.[[Delete]](<var>P</var>).</li><li>If <var>deleteSucceeded</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>newLenDesc</var>.[[Value]] to !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>) + <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, set <var>newLenDesc</var>.[[Writable]] to <emu-val>false</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>succeeded</var> to !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Writable]]: <emu-val>false</emu-val> }).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>succeeded</var> is <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>In steps <emu-xref href=\"#step-arraysetlength-newlen\"><a href=\"#step-arraysetlength-newlen\" class=\"excluded-xref\" excluded-id=\"step-arraysetlength-newlen\">#step-arraysetlength-newlen</a></emu-xref> and <emu-xref href=\"#step-arraysetlength-numberlen\"><a href=\"#step-arraysetlength-numberlen\" class=\"excluded-xref\" excluded-id=\"step-arraysetlength-numberlen\">#step-arraysetlength-numberlen</a></emu-xref>, if <var>Desc</var>.[[Value]] is an object then its <code>valueOf</code> method is called twice. This is legacy behaviour that was specified with this effect starting with the 2<sup>nd</sup> Edition of this specification.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-object-environment-records-createmutablebinding-n-d": {"num": "9.1.1.2.2", "title": "#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-object-environment-records-createmutablebinding-n-d\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-createmutablebinding-n-d\">#sec-object-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The CreateMutableBinding concrete method of an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>D</var> (a Boolean). It creates in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s associated binding object a property whose name is the String value and initializes it to the value <emu-val>undefined</emu-val>. If <var>D</var> has the value <emu-val>true</emu-val>, the new property's [[Configurable]] attribute is set to <emu-val>true</emu-val>; otherwise it is set to <emu-val>false</emu-val>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>bindingObject</var> be <var>envRec</var>.[[BindingObject]].</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>bindingObject</var>, <var>N</var>, PropertyDescriptor { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>D</var> }).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Normally <var>envRec</var> will not have a binding for <var>N</var> but if it does, the semantics of <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref> may result in an existing binding being replaced or shadowed or cause an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> to be returned.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-createimmutablebinding-n-s": {"num": "9.1.1.4.3", "title": "#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-global-environment-records-createimmutablebinding-n-s\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createimmutablebinding-n-s\">#sec-global-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The CreateImmutableBinding concrete method of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If <var>S</var> has the value <emu-val>true</emu-val>, the new binding is marked as a strict binding. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateImmutableBinding(<var>N</var>, <var>S</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-additional-fields-of-object-environment-records": "Table 21"}}, "to": {"secList": ["sec-declarative-environment-records-createimmutablebinding-n-s", "sec-declarative-environment-records-createmutablebinding-n-d", "sec-strict-mode-of-ecmascript", "sec-object-environment-records", "sec-function-environment-records-hassuperbinding", "sec-getsuperbase", "sec-global-environment-records-createmutablebinding-n-d", "sec-arraysetlength", "sec-object-environment-records-createmutablebinding-n-d", "sec-global-environment-records-createimmutablebinding-n-s"], "secData": {"sec-declarative-environment-records-createimmutablebinding-n-s": {"num": "9.1.1.1.3", "title": "#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-createimmutablebinding-n-s\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">#sec-declarative-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The CreateImmutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If <var>S</var> is <emu-val>true</emu-val>, the new binding is marked as a strict binding. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create an immutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>S</var> is <emu-val>true</emu-val>, record that the newly created binding is a strict binding.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-createmutablebinding-n-d": {"num": "9.1.1.1.2", "title": "#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-declarative-environment-records-createmutablebinding-n-d\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createmutablebinding-n-d\">#sec-declarative-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The CreateMutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>D</var> (a Boolean). It creates a new mutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If <var>D</var> is <emu-val>true</emu-val>, the new binding is marked as being subject to deletion. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create a mutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>D</var> is <emu-val>true</emu-val>, record that the newly created binding may be deleted by a subsequent DeleteBinding call.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">reserved words</a></emu-xref> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must disallow instances of the productions <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"8n96hykg\"><emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> and <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xvklurnl\"><emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>.\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must disallow instances of the productions <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6mwrfc1u\"><emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> and <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nv0ui3q7\"><emu-nt><a href=\"#prod-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>.\n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable Reference. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot is <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    </li>\n    <li>\n      Arguments objects for <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref> define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    </li>\n    <li>\n      Arguments objects for <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref> do not dynamically share their <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property values with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    </li>\n    <li>\n      For <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref>, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } or otherwise cannot be deleted (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a Function, Generator, or AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict functions</a></emu-xref> of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-object-environment-records": {"num": "9.1.1.2", "title": "#sec-object-environment-records Object Environment Records", "html": "<emu-clause id=\"sec-object-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records\">#sec-object-environment-records</span> Object Environment Records</h1>\n        <p>Each <dfn variants=\"object Environment Records\">object Environment Record</dfn> is associated with an object called its <em>binding object</em>. An object Environment Record binds the set of string identifier names that directly correspond to the property names of its binding object. Property keys that are not strings in the form of an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are not included in the set of bound identifiers. Both own and inherited properties are included in the set regardless of the setting of their [[Enumerable]] attribute. Because properties can be dynamically added and deleted from objects, the set of identifiers bound by an object Environment Record may potentially change as a side-effect of any operation that adds or deletes properties. Any bindings that are created as a result of such a side-effect are considered to be a mutable binding even if the Writable attribute of the corresponding property is <emu-val>false</emu-val>. Immutable bindings do not exist for object Environment Records.</p>\n        <p>Object Environment Records created for <code>with</code> statements (<emu-xref href=\"#sec-with-statement\"><a href=\"#sec-with-statement\" class=\"excluded-xref\" excluded-id=\"sec-with-statement\">#sec-with-statement</a></emu-xref>) can provide their binding object as an implicit <emu-val>this</emu-val> value for use in function calls. The capability is controlled by a Boolean [[IsWithEnvironment]] field.</p>\n        <p>Object Environment Records have the additional state fields listed in <emu-xref href=\"#table-additional-fields-of-object-environment-records\"><a href=\"#table-additional-fields-of-object-environment-records\" class=\"excluded-xref\" excluded-id=\"table-additional-fields-of-object-environment-records\">#table-additional-fields-of-object-environment-records</a></emu-xref>.</p>\n        <emu-table id=\"table-additional-fields-of-object-environment-records\" caption=\"Additional Fields of Object Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-fields-of-object-environment-records\">#table-additional-fields-of-object-environment-records</span>: Additional Fields of <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">Object Environment Records</a></emu-xref></figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[BindingObject]]\n              </td>\n              <td>\n                Object\n              </td>\n              <td>\n                The binding object of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsWithEnvironment]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                Indicates whether this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for a <code>with</code> statement.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the concrete specification methods for object Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-object-environment-records-hasbinding-n\"><h1><span class=\"secnum\">9.1.1.2.1</span>#sec-object-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">9.1.1.2.2</span>#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-object-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">9.1.1.2.3</span>#sec-object-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">9.1.1.2.4</span>#sec-object-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-object-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">9.1.1.2.5</span>#sec-object-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">9.1.1.2.6</span>#sec-object-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-deletebinding-n\"><h1><span class=\"secnum\">9.1.1.2.7</span>#sec-object-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-hasthisbinding\"><h1><span class=\"secnum\">9.1.1.2.8</span>#sec-object-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-hassuperbinding\"><h1><span class=\"secnum\">9.1.1.2.9</span>#sec-object-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-withbaseobject\"><h1><span class=\"secnum\">9.1.1.2.10</span>#sec-object-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-function-environment-records-hassuperbinding": {"num": "9.1.1.3.3", "title": "#sec-function-environment-records-hassuperbinding HasSuperBinding ( )", "html": "<emu-clause id=\"sec-function-environment-records-hassuperbinding\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records-hassuperbinding\">#sec-function-environment-records-hassuperbinding</span> HasSuperBinding ( )</h1>\n          <p>The HasSuperBinding concrete method of a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> <var>envRec</var> takes no arguments. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>envRec</var>.[[ThisBindingStatus]] is <emu-const>lexical</emu-const>, return <emu-val>false</emu-val>.</li><li>If <var>envRec</var>.[[FunctionObject]].[[HomeObject]] is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>; otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-getsuperbase": {"num": "9.1.1.3.5", "title": "#sec-getsuperbase GetSuperBase ( )", "html": "<emu-clause id=\"sec-getsuperbase\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getsuperbase\">#sec-getsuperbase</span> GetSuperBase ( )</h1>\n          <p>The GetSuperBase concrete method of a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> <var>envRec</var> takes no arguments. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>home</var> be <var>envRec</var>.[[FunctionObject]].[[HomeObject]].</li><li>If <var>home</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>home</var>) is Object.</li><li>Return ? <var>home</var>.[[GetPrototypeOf]]().</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-global-environment-records-createmutablebinding-n-d": {"num": "9.1.1.4.2", "title": "#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-global-environment-records-createmutablebinding-n-d\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createmutablebinding-n-d\">#sec-global-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The CreateMutableBinding concrete method of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>D</var> (a Boolean). It creates a new mutable binding for the name <var>N</var> that is uninitialized. The binding is created in the associated DeclarativeRecord. A binding for <var>N</var> must not already exist in the DeclarativeRecord. If <var>D</var> is <emu-val>true</emu-val>, the new binding is marked as being subject to deletion. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-arraysetlength": {"num": "10.4.2.4", "title": "#sec-arraysetlength ArraySetLength ( A, Desc )", "html": "<emu-clause id=\"sec-arraysetlength\" type=\"abstract operation\" aoid=\"ArraySetLength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraysetlength\">#sec-arraysetlength</span> ArraySetLength ( <var>A</var>, <var>Desc</var> )</h1>\n        <p>The abstract operation ArraySetLength takes arguments <var>A</var> (an Array) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>Desc</var>.[[Value]] is absent, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>Desc</var>).</li></ol></li><li>Let <var>newLenDesc</var> be a copy of <var>Desc</var>.</li><li id=\"step-arraysetlength-newlen\">Let <var>newLen</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li id=\"step-arraysetlength-numberlen\">Let <var>numberLen</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li>If <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>newLen</var>, <var>numberLen</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Set <var>newLenDesc</var>.[[Value]] to <var>newLen</var>.</li><li>Let <var>oldLenDesc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>oldLenDesc</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLenDesc</var>.[[Configurable]] is <emu-val>false</emu-val>.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li>If <var>newLen</var> &#8805; <var>oldLen</var>, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li></ol></li><li>If <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>newLenDesc</var>.[[Writable]] is absent or is <emu-val>true</emu-val>, let <var>newWritable</var> be <emu-val>true</emu-val>.</li><li>Else,<ol><li>NOTE: Setting the [[Writable]] attribute to <emu-val>false</emu-val> is deferred in case any elements cannot be deleted.</li><li>Let <var>newWritable</var> be <emu-val>false</emu-val>.</li><li>Set <var>newLenDesc</var>.[[Writable]] to <emu-val>true</emu-val>.</li></ol></li><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>For each own property key <var>P</var> of <var>A</var> that is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, whose numeric value is greater than or equal to <var>newLen</var>, in descending numeric index order, do<ol><li>Let <var>deleteSucceeded</var> be ! <var>A</var>.[[Delete]](<var>P</var>).</li><li>If <var>deleteSucceeded</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>newLenDesc</var>.[[Value]] to !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>) + <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, set <var>newLenDesc</var>.[[Writable]] to <emu-val>false</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>succeeded</var> to !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Writable]]: <emu-val>false</emu-val> }).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>succeeded</var> is <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>In steps <emu-xref href=\"#step-arraysetlength-newlen\"><a href=\"#step-arraysetlength-newlen\" class=\"excluded-xref\" excluded-id=\"step-arraysetlength-newlen\">#step-arraysetlength-newlen</a></emu-xref> and <emu-xref href=\"#step-arraysetlength-numberlen\"><a href=\"#step-arraysetlength-numberlen\" class=\"excluded-xref\" excluded-id=\"step-arraysetlength-numberlen\">#step-arraysetlength-numberlen</a></emu-xref>, if <var>Desc</var>.[[Value]] is an object then its <code>valueOf</code> method is called twice. This is legacy behaviour that was specified with this effect starting with the 2<sup>nd</sup> Edition of this specification.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-object-environment-records-createmutablebinding-n-d": {"num": "9.1.1.2.2", "title": "#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-object-environment-records-createmutablebinding-n-d\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-createmutablebinding-n-d\">#sec-object-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The CreateMutableBinding concrete method of an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>D</var> (a Boolean). It creates in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s associated binding object a property whose name is the String value and initializes it to the value <emu-val>undefined</emu-val>. If <var>D</var> is <emu-val>true</emu-val>, the new property's [[Configurable]] attribute is set to <emu-val>true</emu-val>; otherwise it is set to <emu-val>false</emu-val>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>bindingObject</var> be <var>envRec</var>.[[BindingObject]].</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>bindingObject</var>, <var>N</var>, PropertyDescriptor { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>D</var> }).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Normally <var>envRec</var> will not have a binding for <var>N</var> but if it does, the semantics of <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref> may result in an existing binding being replaced or shadowed or cause an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> to be returned.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-global-environment-records-createimmutablebinding-n-s": {"num": "9.1.1.4.3", "title": "#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-global-environment-records-createimmutablebinding-n-s\" type=\"concrete method\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createimmutablebinding-n-s\">#sec-global-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The CreateImmutableBinding concrete method of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If <var>S</var> is <emu-val>true</emu-val>, the new binding is marked as a strict binding. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateImmutableBinding(<var>N</var>, <var>S</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-additional-fields-of-object-environment-records": "Table 21"}}}