{"from": {"secList": ["sec-advancestringindex", "sec-ecmascript-language-types-string-type"], "secData": {"sec-advancestringindex": {"num": "21.2.5.2.3", "title": "#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )", "html": "<emu-clause id=\"sec-advancestringindex\" aoid=\"AdvanceStringIndex\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-advancestringindex\">#sec-advancestringindex</span> AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )</h1>\n          <p>The abstract operation AdvanceStringIndex with arguments <var>S</var>, <var>index</var>, and <var>unicode</var> performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> is an <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref> such that 0&#8804;<var>index</var>&#8804;2<sup>53</sup>-1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unicode</var>) is Boolean.</li><li>If <var>unicode</var> is <emu-val>false</emu-val>, return <var>index</var>+1.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>If <var>index</var>+1 &#8805; <var>length</var>, return <var>index</var>+1.</li><li>Let <var>first</var> be the code unit value at index <var>index</var> in <var>S</var>.</li><li>If <var>first</var> &lt; 0xD800 or <var>first</var> &gt; 0xDBFF, return <var>index</var>+1.</li><li>Let <var>second</var> be the code unit value at index <var>index</var>+1 in <var>S</var>.</li><li>If <var>second</var> &lt; 0xDC00 or <var>second</var> &gt; 0xDFFF, return <var>index</var>+1.</li><li>Return <var>index</var>+2.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-ecmascript-language-types-string-type": {"num": "6.1.4", "title": "#sec-ecmascript-language-types-string-type The String Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-string-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</span> The String Type</h1>\n      <p>The String type is the set of all ordered sequences of zero or more 16-bit unsigned <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref> values (&#8220;elements&#8221;) up to a maximum length of 2<sup>53</sup>-1 elements. The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value. Each element is regarded as occupying a position within the sequence. These positions are indexed with nonnegative integers. The first element (if any) is at index 0, the next element (if any) at index 1, and so on. The length of a String is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore contains no elements.</p>\n      <p>Where ECMAScript operations interpret String values, each element is interpreted as a single UTF-16 code unit. However, ECMAScript does not place any restrictions or requirements on the sequence of code units in a String value, so they may be ill-formed when interpreted as UTF-16 code unit sequences. Operations that do not interpret String contents treat them as sequences of undifferentiated 16-bit unsigned integers. The function <code>String.prototype.normalize</code> (see  <emu-xref href=\"#sec-string.prototype.normalize\"><a href=\"#sec-string.prototype.normalize\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.normalize\">#sec-string.prototype.normalize</a></emu-xref>) can be used to explicitly normalize a String value. <code>String.prototype.localeCompare</code> (see  <emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref>) internally normalizes String values, but no other operations implicitly normalize the strings upon which they operate. Only operations that are explicitly specified to be language or locale sensitive produce language-sensitive results.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The rationale behind this design was to keep the implementation of Strings as simple and high-performing as possible. If ECMAScript source text is in Normalized Form C, string literals are guaranteed to also be normalized, as long as they do not contain any Unicode escape sequences.</p>\n      </div></emu-note>\n      <p>Some operations interpret String contents as UTF-16 encoded Unicode code points. In that case the interpretation is:</p>\n      <ul>\n        <li>\n          A code unit in the range 0 to 0xD7FF or in the range 0xE000 to 0xFFFF is interpreted as a code point with the same value.\n        \n        </li>\n        <li>\n          A sequence of two code units, where the first code unit <var>c1</var> is in the range 0xD800 to 0xDBFF and the second code unit <var>c2</var> is in the range 0xDC00 to 0xDFFF, is a <emu-xref href=\"#surrogate-pair\"><a href=\"https://tc39.es/ecma262/#surrogate-pair\">surrogate pair</a></emu-xref> and is interpreted as a code point with the value (<var>c1</var> - 0xD800) &#215; 0x400 + (<var>c2</var> - 0xDC00) + 0x10000. (See  <emu-xref href=\"#sec-utf16decode\"><a href=\"#sec-utf16decode\" class=\"excluded-xref\" excluded-id=\"sec-utf16decode\">#sec-utf16decode</a></emu-xref>)\n        \n        </li>\n        <li>\n          A code unit that is in the range 0xD800 to 0xDFFF, but is not part of a <emu-xref href=\"#surrogate-pair\"><a href=\"https://tc39.es/ecma262/#surrogate-pair\">surrogate pair</a></emu-xref>, is interpreted as a code point with the same value.\n        \n        </li>\n      </ul>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-advancestringindex", "sec-ecmascript-language-types-string-type"], "secData": {"sec-advancestringindex": {"num": "21.2.5.2.3", "title": "#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )", "html": "<emu-clause id=\"sec-advancestringindex\" aoid=\"AdvanceStringIndex\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-advancestringindex\">#sec-advancestringindex</span> AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )</h1>\n          <p>The abstract operation AdvanceStringIndex with arguments <var>S</var>, <var>index</var>, and <var>unicode</var> performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> is an <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref> such that 0&#8804;<var>index</var>&#8804;2<sup>32</sup>-1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unicode</var>) is Boolean.</li><li>If <var>unicode</var> is <emu-val>false</emu-val>, return <var>index</var>+1.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>If <var>index</var>+1 &#8805; <var>length</var>, return <var>index</var>+1.</li><li>Let <var>first</var> be the code unit value at index <var>index</var> in <var>S</var>.</li><li>If <var>first</var> &lt; 0xD800 or <var>first</var> &gt; 0xDBFF, return <var>index</var>+1.</li><li>Let <var>second</var> be the code unit value at index <var>index</var>+1 in <var>S</var>.</li><li>If <var>second</var> &lt; 0xDC00 or <var>second</var> &gt; 0xDFFF, return <var>index</var>+1.</li><li>Return <var>index</var>+2.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-ecmascript-language-types-string-type": {"num": "6.1.4", "title": "#sec-ecmascript-language-types-string-type The String Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-string-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</span> The String Type</h1>\n      <p>The String type is the set of all ordered sequences of zero or more 16-bit unsigned <emu-xref href=\"#integer\"><a href=\"https://tc39.es/ecma262/#integer\">integer</a></emu-xref> values (&#8220;elements&#8221;) up to a maximum length of 2<sup>32</sup>-1 elements. The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value. Each element is regarded as occupying a position within the sequence. These positions are indexed with nonnegative integers. The first element (if any) is at index 0, the next element (if any) at index 1, and so on. The length of a String is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore contains no elements.</p>\n      <p>Where ECMAScript operations interpret String values, each element is interpreted as a single UTF-16 code unit. However, ECMAScript does not place any restrictions or requirements on the sequence of code units in a String value, so they may be ill-formed when interpreted as UTF-16 code unit sequences. Operations that do not interpret String contents treat them as sequences of undifferentiated 16-bit unsigned integers. The function <code>String.prototype.normalize</code> (see  <emu-xref href=\"#sec-string.prototype.normalize\"><a href=\"#sec-string.prototype.normalize\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.normalize\">#sec-string.prototype.normalize</a></emu-xref>) can be used to explicitly normalize a String value. <code>String.prototype.localeCompare</code> (see  <emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref>) internally normalizes String values, but no other operations implicitly normalize the strings upon which they operate. Only operations that are explicitly specified to be language or locale sensitive produce language-sensitive results.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The rationale behind this design was to keep the implementation of Strings as simple and high-performing as possible. If ECMAScript source text is in Normalized Form C, string literals are guaranteed to also be normalized, as long as they do not contain any Unicode escape sequences.</p>\n      </div></emu-note>\n      <p>Some operations interpret String contents as UTF-16 encoded Unicode code points. In that case the interpretation is:</p>\n      <ul>\n        <li>\n          A code unit in the range 0 to 0xD7FF or in the range 0xE000 to 0xFFFF is interpreted as a code point with the same value.\n        \n        </li>\n        <li>\n          A sequence of two code units, where the first code unit <var>c1</var> is in the range 0xD800 to 0xDBFF and the second code unit <var>c2</var> is in the range 0xDC00 to 0xDFFF, is a <emu-xref href=\"#surrogate-pair\"><a href=\"https://tc39.es/ecma262/#surrogate-pair\">surrogate pair</a></emu-xref> and is interpreted as a code point with the value (<var>c1</var> - 0xD800) &#215; 0x400 + (<var>c2</var> - 0xDC00) + 0x10000. (See  <emu-xref href=\"#sec-utf16decode\"><a href=\"#sec-utf16decode\" class=\"excluded-xref\" excluded-id=\"sec-utf16decode\">#sec-utf16decode</a></emu-xref>)\n        \n        </li>\n        <li>\n          A code unit that is in the range 0xD800 to 0xDFFF, but is not part of a <emu-xref href=\"#surrogate-pair\"><a href=\"https://tc39.es/ecma262/#surrogate-pair\">surrogate pair</a></emu-xref>, is interpreted as a code point with the same value.\n        \n        </li>\n      </ul>\n    </emu-clause>\n\n    "}}, "figData": {}}}