{"from": {"secList": ["sec-super-keyword-runtime-semantics-evaluation"], "secData": {"sec-super-keyword-runtime-semantics-evaluation": {"num": "12.3.5.1", "title": "#sec-super-keyword-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-super-keyword-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-super-keyword-runtime-semantics-evaluation\">#sec-super-keyword-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b698f30f\"><emu-t>super</emu-t><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the code matched by the syntactic production that is being evaluated is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>, else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>propertyKey</var>, <var>strict</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f690ec4a\"><emu-t>super</emu-t><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>propertyKey</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If the code matched by the syntactic production that is being evaluated is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>, else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>propertyKey</var>, <var>strict</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperCall\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a833032f\"><emu-t>super</emu-t><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>newTarget</var> be <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetSuperConstructor\"><a href=\"#sec-getsuperconstructor\">GetSuperConstructor</a></emu-xref>().</li><li>Let <var>argList</var> be ArgumentListEvaluation of <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>argList</var>).</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>argList</var>, <var>newTarget</var>).</li><li>Let <var>thisER</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>( ).</li><li>Return ? <var>thisER</var>.BindThisValue(<var>result</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-super-keyword-runtime-semantics-evaluation"], "secData": {"sec-super-keyword-runtime-semantics-evaluation": {"num": "12.3.5.1", "title": "#sec-super-keyword-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-super-keyword-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-super-keyword-runtime-semantics-evaluation\">#sec-super-keyword-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b698f30f\"><emu-t>super</emu-t><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the code matched by the syntactic production that is being evaluated is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>, else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>propertyKey</var>, <var>strict</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f690ec4a\"><emu-t>super</emu-t><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>propertyKey</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If the code matched by the syntactic production that is being evaluated is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>, else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>propertyKey</var>, <var>strict</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperCall\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a833032f\"><emu-t>super</emu-t><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>newTarget</var> be <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetSuperConstructor\"><a href=\"#sec-getsuperconstructor\">GetSuperConstructor</a></emu-xref>().</li><li>Let <var>argList</var> be ArgumentListEvaluation of <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>argList</var>).</li><li>Let <var>thisER</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>( ).</li><li>If <var>thisER</var>.[[ThisBindingStatus]] is \"initialized\", throw a <emu-val>ReferenceError</emu-val>.</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>argList</var>, <var>newTarget</var>).</li><li>Return ? <var>thisER</var>.BindThisValue(<var>result</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}