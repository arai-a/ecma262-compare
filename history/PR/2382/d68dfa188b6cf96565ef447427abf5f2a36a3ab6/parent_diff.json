{"from": {"secList": ["sec-static-semantics-allprivateidentifiersvalid", "sec-static-semantics-containsundefinedbreaktarget", "sec-static-semantics-importentriesformodule", "sec-runtime-semantics-substitutionevaluation", "sec-static-semantics-prototypepropertynamelist", "sec-static-semantics-boundnames", "sec-static-semantics-templatestrings", "sec-initializers-in-forin-statement-heads", "sec-static-semantics-toplevelvarscopeddeclarations", "sec-list-and-record-specification-type", "sec-runtime-semantics-propertydestructuringassignmentevaluation", "sec-module-namespace-exotic-objects-ownpropertykeys", "sec-variablestatements-in-catch-blocks", "sec-static-semantics-vardeclarednames", "sec-web-compat-evaldeclarationinstantiation", "sec-static-semantics-toplevelvardeclarednames", "sec-static-semantics-privateboundidentifiers", "sec-static-semantics-exportentriesformodule", "sec-static-semantics-varscopeddeclarations", "sec-functiondeclarationinstantiation", "sec-web-compat-globaldeclarationinstantiation", "sec-static-semantics-containsduplicatelabels", "sec-static-semantics-toplevellexicallydeclarednames", "sec-static-semantics-lexicallydeclarednames", "sec-static-semantics-lexicallyscopeddeclarations", "sec-static-semantics-exportentries", "sec-static-semantics-containsundefinedcontinuetarget", "sec-static-semantics-referencedbindings", "sec-runtime-semantics-argumentlistevaluation", "sec-static-semantics-exportedbindings", "sec-static-semantics-propertynamelist", "sec-bound-function-exotic-objects-call-thisargument-argumentslist", "sec-static-semantics-importentries", "sec-bound-function-exotic-objects-construct-argumentslist-newtarget", "sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization", "sec-runtime-semantics-labelledevaluation", "sec-static-semantics-exportednames", "sec-static-semantics-toplevellexicallyscopeddeclarations"], "secData": {"sec-static-semantics-allprivateidentifiersvalid": {"num": "15.7.7", "title": "#sec-static-semantics-allprivateidentifiersvalid Static Semantics: AllPrivateIdentifiersValid", "html": "<emu-clause id=\"sec-static-semantics-allprivateidentifiersvalid\" type=\"sdo\" aoid=\"AllPrivateIdentifiersValid\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-allprivateidentifiersvalid\">#sec-static-semantics-allprivateidentifiersvalid</span> Static Semantics: AllPrivateIdentifiersValid</h1>\n      <p>With parameter <var>names</var>.</p>\n\n      <p>Every grammar production alternative in this specification which is not listed below implicitly has the following default definition of AllPrivateIdentifiersValid:</p>\n      <emu-alg><ol><li>For each child node <var>child</var> of this <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, do<ol><li>If <var>child</var> is an instance of a nonterminal, then<ol><li>If <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <var>child</var> with argument <var>names</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0uk9afbi\" id=\"prod-hH1hyF7o\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>names</var> contains the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>, then<ol><li>Return <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> with argument <var>names</var>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cysjk9wh\" id=\"prod-9EwGAkEl\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>names</var> contains the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>, then<ol><li>Return <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> with argument <var>names</var>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0xlnjlpz\" id=\"prod-GLUsMLG4\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>names</var> contains the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dnp-fbqk\" id=\"prod-LZl0sxgi\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>names</var> contains the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>, then<ol><li>Return <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> with argument <var>names</var>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1y1dunax\" id=\"prod-7rm6mrow\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>newNames</var> be a copy of <var>names</var>.</li><li>Append to <var>newNames</var> the elements of <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Return <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> with argument <var>newNames</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-containsundefinedbreaktarget": {"num": "8.2.2", "title": "#sec-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-static-semantics-containsundefinedbreaktarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget,sec-block-static-semantics-containsundefinedbreaktarget,sec-if-statement-static-semantics-containsundefinedbreaktarget,sec-do-while-statement-static-semantics-containsundefinedbreaktarget,sec-while-statement-static-semantics-containsundefinedbreaktarget,sec-for-statement-static-semantics-containsundefinedbreaktarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget,sec-break-statement-static-semantics-containsundefinedbreaktarget,sec-with-statement-static-semantics-containsundefinedbreaktarget,sec-switch-statement-static-semantics-containsundefinedbreaktarget,sec-labelled-statements-static-semantics-containsundefinedbreaktarget,sec-try-statement-static-semantics-containsundefinedbreaktarget,sec-function-definitions-static-semantics-containsundefinedbreaktarget,sec-module-semantics-static-semantics-containsundefinedbreaktarget\" type=\"sdo\" aoid=\"ContainsUndefinedBreakTarget\"><span id=\"sec-module-semantics-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-function-definitions-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-try-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-labelled-statements-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-switch-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-with-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-break-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-for-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-while-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-do-while-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-if-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-block-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-fZ1-o-5P\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-T0wQwLQ_\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-kUTRcwOP\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-LpKI1NOa\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-s5sTXkkT\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-CeDAPMUu\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-81RguExk\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-YsZID3li\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-ndTQ-Fse\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-v3tH_xWo\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-OZMT2LO1\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-kiVPWNCJ\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-JiuempzE\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-NfepJ8d-\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-_bYykgU2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-0RGYYYa8\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-gRSHgUm2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-mui4tXHs\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-tYmMbbAK\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-xkRBC0p_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-3FISwBIz\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-3UTSN7Q_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-0EPuBRtw\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-bxXqpHGf\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-DVohExfz\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-eDdhr4db\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlip5zkt\" id=\"prod-YN_w7WcD\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcg-yy3r\" id=\"prod-sVlKX7KO\">\n        <emu-t>break</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-wq9kNHey\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-zEFnXzdo\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-MxUCmZej\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-a3dtTxDp\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-mWAyGNz1\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-xKDcEL_e\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-WyF-LUeK\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-zsR5iLZH\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-Mu3VhVjD\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-Yr89pOXp\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-3_4iLynl\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-KaiFSIRm\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-_CFhQEhr\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-fN52Tgzf\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-gDhjMfCK\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-T8hjI_vu\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-SLqg0yKr\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-importentriesformodule": {"num": "16.2.2.3", "title": "#sec-static-semantics-importentriesformodule Static Semantics: ImportEntriesForModule", "html": "<emu-clause id=\"sec-static-semantics-importentriesformodule\" type=\"sdo\" aoid=\"ImportEntriesForModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-importentriesformodule\">#sec-static-semantics-importentriesformodule</span> Static Semantics: ImportEntriesForModule</h1>\n        <p>With parameter <var>module</var>.</p>\n        <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"y9r1l58g\" id=\"prod-ejkMSdRd\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>entries</var> the elements of the <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ih8rgsdx\" id=\"prod-0jSzNM4w\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>entries</var> the elements of the <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportedDefaultBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-8iON-ECl\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>defaultEntry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"default\"</emu-val>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>defaultEntry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NameSpaceImport\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t2qf80pb\" id=\"prod-UUrB05kM\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedImports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-Cg-QzVAj\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ggcfvgot\" id=\"prod-nXrDLJR0\">\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>specs</var> be the <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>specs</var> the elements of the <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>specs</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-EknrR_3b\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>localName</var>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"onppcdhk\" id=\"prod-Qq5Ok86W\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>importName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>localName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-substitutionevaluation": {"num": "13.2.8.4", "title": "#sec-runtime-semantics-substitutionevaluation Runtime Semantics: SubstitutionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-substitutionevaluation\" type=\"sdo\" aoid=\"SubstitutionEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-substitutionevaluation\">#sec-runtime-semantics-substitutionevaluation</span> Runtime Semantics: SubstitutionEvaluation</h1>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v_5hijma\" id=\"prod-h8M7VnrX\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"slt0jvdm\" id=\"prod-0ukbbNyO\">\n        <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of <emu-xref aoid=\"SubstitutionEvaluation\"><a href=\"#sec-runtime-semantics-substitutionevaluation\">SubstitutionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3h7jyz9j\" id=\"prod-oOPfrahZ\">\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>subRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>sub</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>subRef</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>sub</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"r6zwqruv\" id=\"prod-Jm_C6N1j\">\n        <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>preceding</var> be ? <emu-xref aoid=\"SubstitutionEvaluation\"><a href=\"#sec-runtime-semantics-substitutionevaluation\">SubstitutionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>.</li><li>Let <var>nextRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>nextRef</var>).</li><li>Append <var>next</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>preceding</var>.</li><li>Return <var>preceding</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-prototypepropertynamelist": {"num": "15.7.6", "title": "#sec-static-semantics-prototypepropertynamelist Static Semantics: PrototypePropertyNameList", "html": "<emu-clause id=\"sec-static-semantics-prototypepropertynamelist\" type=\"sdo\" aoid=\"PrototypePropertyNameList\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-prototypepropertynamelist\">#sec-static-semantics-prototypepropertynamelist</span> Static Semantics: PrototypePropertyNameList</h1>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"crvluhmw\" id=\"prod-A14zfyT4\"><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>empty</emu-const>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"msulavvt\" id=\"prod-yD4OjNLB\">\n        <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>list</var> be <emu-xref aoid=\"PrototypePropertyNameList\"><a href=\"#sec-static-semantics-prototypepropertynamelist\">PrototypePropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>.</li><li>If <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>empty</emu-const>, return <var>list</var>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return <var>list</var>.</li><li>Append <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> to the end of <var>list</var>.</li><li>Return <var>list</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-boundnames": {"num": "8.1.1", "title": "#sec-static-semantics-boundnames Static Semantics: BoundNames", "html": "<emu-clause id=\"sec-static-semantics-boundnames\" oldids=\"sec-identifiers-static-semantics-boundnames,sec-let-and-const-declarations-static-semantics-boundnames,sec-variable-statement-static-semantics-boundnames,sec-destructuring-binding-patterns-static-semantics-boundnames,sec-for-in-and-for-of-statements-static-semantics-boundnames,sec-function-definitions-static-semantics-boundnames,sec-arrow-function-definitions-static-semantics-boundnames,sec-generator-function-definitions-static-semantics-boundnames,sec-async-generator-function-definitions-static-semantics-boundnames,sec-class-definitions-static-semantics-boundnames,sec-async-function-definitions-static-semantics-BoundNames,sec-async-arrow-function-definitions-static-semantics-BoundNames,sec-imports-static-semantics-boundnames,sec-exports-static-semantics-boundnames\" type=\"sdo\" aoid=\"BoundNames\"><span id=\"sec-exports-static-semantics-boundnames\"></span><span id=\"sec-imports-static-semantics-boundnames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-BoundNames\"></span><span id=\"sec-async-function-definitions-static-semantics-BoundNames\"></span><span id=\"sec-class-definitions-static-semantics-boundnames\"></span><span id=\"sec-async-generator-function-definitions-static-semantics-boundnames\"></span><span id=\"sec-generator-function-definitions-static-semantics-boundnames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-boundnames\"></span><span id=\"sec-function-definitions-static-semantics-boundnames\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-boundnames\"></span><span id=\"sec-destructuring-binding-patterns-static-semantics-boundnames\"></span><span id=\"sec-variable-statement-static-semantics-boundnames\"></span><span id=\"sec-let-and-const-declarations-static-semantics-boundnames\"></span><span id=\"sec-identifiers-static-semantics-boundnames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-boundnames\">#sec-static-semantics-boundnames</span> Static Semantics: BoundNames</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-val>\"*default*\"</emu-val> is used within this specification as a synthetic name for hoistable anonymous functions that are defined using export declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\" id=\"prod-Yc3dQCIS\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\" id=\"prod-0oRvH9Oa\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-val>\"yield\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hx1dvlrw\" id=\"prod-eP6tRBFI\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-val>\"await\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LexicalDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"deqecbrp\" id=\"prod-WhUrx1KG\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dt40zeyt\" id=\"prod-pdmM8758\">\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5neqctp\" id=\"prod-SIbbs3t0\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd1t5ekf\" id=\"prod-WfIK7IbR\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oavweevb\" id=\"prod-PvG06doO\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5neqctp\" id=\"prod-TRoL9A8A\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd1t5ekf\" id=\"prod-uemJBnZk\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ObjectBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectBindingPattern\">ObjectBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-HmBRwRUL\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ObjectBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectBindingPattern\">ObjectBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ullzxsua\" id=\"prod-VrgiRc7B\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingRestProperty\">BindingRestProperty</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingRestProperty\">BindingRestProperty</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kg5ha7xc\" id=\"prod-e52_ta72\">\n        <emu-t>[</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dev8fspa\" id=\"prod-gapTHhxd\">\n        <emu-t>[</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jxqgfqnk\" id=\"prod-uQApgi98\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7lkdseap\" id=\"prod-UADb9W1C\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bzdeo9zt\" id=\"prod-hRHC-ltw\">\n        <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hiwampap\" id=\"prod-HS4vlt-j\">\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"wo9nasvo\" id=\"prod-C9gIgbxU\">\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mhvrwluk\" id=\"prod-MJIzQe4_\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SingleNameBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5neqctp\" id=\"prod-T0DsYQHz\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahx6lm0w\" id=\"prod-XX1yN-l7\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0y1vvm1x\" id=\"prod-Wj-eaJJJ\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-AAggAe5k\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"smus6qca\" id=\"prod-rmB8ZP2j\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-NuuiWZ7v\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uqeba6gz\" id=\"prod-po75ZBLy\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>.</li><li>Append to <var>names</var> the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameterList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ijrjejbs\" id=\"prod-dSRi9b3k\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>.</li><li>Append to <var>names</var> the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yrb110hm\" id=\"prod-B1jl1kwZ\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>formals</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>formals</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-t6vQVPUG\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dsczygsq\" id=\"prod-qJNJRowC\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-D36uGDV1\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xruu4gg0\" id=\"prod-Fiyc5-gj\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tusuwhcv\" id=\"prod-_x3zvham\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ghyizwr\" id=\"prod-0u78ulHy\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-G-h1FrC4\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"agdmcdye\" id=\"prod-NaC_U8xV\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vks-z6n3\" id=\"prod-kRyJKqmR\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>head</var> be the <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>head</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"glhuxxec\" id=\"prod-jZE2c8MZ\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"odcuzpbi\" id=\"prod-me1fjwho\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"y9r1l58g\" id=\"prod-gnkPkMbr\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ih8rgsdx\" id=\"prod-WTIt04mh\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"NamedImports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-2q0gunUG\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ggcfvgot\" id=\"prod-phtlO1Je\">\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"onppcdhk\" id=\"prod-QscPeL5E\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-OyREyUBO\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod-sOWb3AM5\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bg3oaw2m\" id=\"prod-wpPb0--4\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-yl8Kvf8S\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-oqm8ado6\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarationNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>If <var>declarationNames</var> does not include the element <emu-val>\"*default*\"</emu-val>, append <emu-val>\"*default*\"</emu-val> to <var>declarationNames</var>.</li><li>Return <var>declarationNames</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\" id=\"prod-pmSnaEkm\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarationNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>If <var>declarationNames</var> does not include the element <emu-val>\"*default*\"</emu-val>, append <emu-val>\"*default*\"</emu-val> to <var>declarationNames</var>.</li><li>Return <var>declarationNames</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\" id=\"prod-fy8WSBrE\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-templatestrings": {"num": "13.2.8.2", "title": "#sec-static-semantics-templatestrings Static Semantics: TemplateStrings", "html": "<emu-clause id=\"sec-static-semantics-templatestrings\" type=\"sdo\" aoid=\"TemplateStrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-templatestrings\">#sec-static-semantics-templatestrings</span> Static Semantics: TemplateStrings</h1>\n        <p>With parameter <var>raw</var>.</p>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e_otk8es\" id=\"prod-wUHw6ReH\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>string</var> be the TV of <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>string</var> be the TRV of <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>string</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vpxmqc6d\" id=\"prod-AfRnt93a\">\n        <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>head</var> be the TV of <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>head</var> be the TRV of <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>.</li></ol></li><li>Let <var>tail</var> be <emu-xref aoid=\"TemplateStrings\"><a href=\"#sec-static-semantics-templatestrings\">TemplateStrings</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> with argument <var>raw</var>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are <var>head</var> followed by the elements of <var>tail</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v_5hijma\" id=\"prod-SXp_0Muf\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>tail</var> be the TV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>tail</var> be the TRV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>tail</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"slt0jvdm\" id=\"prod-fValkc1v\">\n        <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>middle</var> be <emu-xref aoid=\"TemplateStrings\"><a href=\"#sec-static-semantics-templatestrings\">TemplateStrings</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> with argument <var>raw</var>.</li><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>tail</var> be the TV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>tail</var> be the TRV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>middle</var> followed by <var>tail</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3h7jyz9j\" id=\"prod-sExxMRoA\">\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>string</var> be the TV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>string</var> be the TRV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>string</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"r6zwqruv\" id=\"prod-oVK_xc-L\">\n        <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>front</var> be <emu-xref aoid=\"TemplateStrings\"><a href=\"#sec-static-semantics-templatestrings\">TemplateStrings</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> with argument <var>raw</var>.</li><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>last</var> be the TV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>last</var> be the TRV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Append <var>last</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>front</var>.</li><li>Return <var>front</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> production in <emu-xref href=\"#sec-for-in-and-for-of-statements\"><a href=\"#sec-for-in-and-for-of-statements\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"ForInOfStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-ForInOfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ouav8kzt\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsduplicatelabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"IsDestructuring\"><a href=\"#sec-static-semantics-isdestructuring\">IsDestructuring</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-isdestructuring\"><a href=\"#sec-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-isdestructuring\">#sec-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-vardeclarednames\"><a href=\"#sec-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-varscopeddeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"ForInOfLoopEvaluation\"><a href=\"#sec-runtime-semantics-forinofloopevaluation\">ForInOfLoopEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-forinofloopevaluation\"><a href=\"#sec-runtime-semantics-forinofloopevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-forinofloopevaluation\">#sec-runtime-semantics-forinofloopevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-static-semantics-toplevelvarscopeddeclarations": {"num": "8.1.11", "title": "#sec-static-semantics-toplevelvarscopeddeclarations Static Semantics: TopLevelVarScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-toplevelvarscopeddeclarations\" oldids=\"sec-block-static-semantics-toplevelvarscopeddeclarations,sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\" type=\"sdo\" aoid=\"TopLevelVarScopedDeclarations\"><span id=\"sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\"></span><span id=\"sec-block-static-semantics-toplevelvarscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevelvarscopeddeclarations\">#sec-static-semantics-toplevelvarscopeddeclarations</span> Static Semantics: TopLevelVarScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-ELUpDRIL\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-MxUpZ-t-\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-wmlLZdyg\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-OvMm0IpZ\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Let <var>declaration</var> be <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>Return &#171; <var>declaration</var> &#187;.</li></ol></li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-sPvwm3DB\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-h55yOiCC\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-aZ77pE36\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-list-and-record-specification-type": {"num": "6.2.1", "title": "#sec-list-and-record-specification-type The List and Record Specification Types", "html": "<emu-clause id=\"sec-list-and-record-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-list-and-record-specification-type\">#sec-list-and-record-specification-type</span> The List and Record Specification Types</h1>\n      <p>The <dfn>List</dfn> type is used to explain the evaluation of argument lists (see <emu-xref href=\"#sec-argument-lists\"><a href=\"#sec-argument-lists\" class=\"excluded-xref\" excluded-id=\"sec-argument-lists\">#sec-argument-lists</a></emu-xref>) in <code>new</code> expressions, in function calls, and in other algorithms where a simple ordered list of values is needed. Values of the List type are simply ordered sequences of list elements containing the individual values. These sequences may be of any length. The elements of a list may be randomly accessed using 0-origin indices. For notational convenience an array-like syntax can be used to access List elements. For example, <var>arguments</var>[2] is shorthand for saying the 3<sup>rd</sup> element of the List <var>arguments</var>.</p>\n      <p>When an algorithm iterates over the elements of a List without specifying an order, the order used is the order of the elements in the List.</p>\n      <p>For notational convenience within this specification, a literal syntax can be used to express a new List value. For example, &#171; 1, 2 &#187; defines a List value that has two elements each of which is initialized to a specific value. A new empty List can be expressed as &#171; &#187;.</p>\n      <p>The <dfn>Record</dfn> type is used to describe data aggregations within the algorithms of this specification. A Record type value consists of one or more named fields. The value of each field is either an ECMAScript value or an abstract value represented by a name associated with the Record type. Field names are always enclosed in double brackets, for example [[Value]].</p>\n      <p>For notational convenience within this specification, an object literal-like syntax can be used to express a Record value. For example, { [[Field1]]: 42, [[Field2]]: <emu-val>false</emu-val>, [[Field3]]: <emu-const>empty</emu-const> } defines a Record value that has three fields, each of which is initialized to a specific value. Field name order is not significant. Any fields that are not explicitly listed are considered to be absent.</p>\n      <p>In specification text and algorithms, dot notation may be used to refer to a specific field of a Record value. For example, if R is the record shown in the previous paragraph then R.[[Field2]] is shorthand for &#8220;the field of R named [[Field2]]&#8221;.</p>\n      <p>Schema for commonly used Record field combinations may be named, and that name may be used as a prefix to a literal Record value to identify the specific kind of aggregations that is being described. For example: PropertyDescriptor { [[Value]]: 42, [[Writable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-propertydestructuringassignmentevaluation": {"num": "13.15.5.3", "title": "#sec-runtime-semantics-propertydestructuringassignmentevaluation Runtime Semantics: PropertyDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\" type=\"sdo\" aoid=\"PropertyDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\">#sec-runtime-semantics-propertydestructuringassignmentevaluation</span> Runtime Semantics: PropertyDestructuringAssignmentEvaluation</h1>\n        <p>With parameter <var>value</var>.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The following operations collect a list of all destructured property names.</div></emu-note>\n\n        <emu-grammar><emu-production name=\"AssignmentPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w2gewbq6\" id=\"prod-ysaEPEoc\">\n        <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propertyNames</var> be ? <emu-xref aoid=\"PropertyDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-propertydestructuringassignmentevaluation\">PropertyDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt> with argument <var>value</var>.</li><li>Let <var>nextNames</var> be ? <emu-xref aoid=\"PropertyDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-propertydestructuringassignmentevaluation\">PropertyDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> with argument <var>value</var>.</li><li>Append each item in <var>nextNames</var> to the end of <var>propertyNames</var>.</li><li>Return <var>propertyNames</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xv93cfyb\" id=\"prod-yhW4Xo3o\">\n        <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>P</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>lref</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>P</var>).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>P</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>P</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>P</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yayigkhd\" id=\"prod-P2UQDIgF\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>name</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>name</var>).</li><li>Perform ? <emu-xref aoid=\"KeyedDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-keyeddestructuringassignmentevaluation\">KeyedDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>value</var> and <var>name</var> as the arguments.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>name</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-module-namespace-exotic-objects-ownpropertykeys": {"num": "10.4.6.10", "title": "#sec-module-namespace-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-ownpropertykeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-ownpropertykeys\">#sec-module-namespace-exotic-objects-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n        <p>The [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref> <var>O</var> takes no arguments. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>exports</var> be a copy of <var>O</var>.[[Exports]].</li><li>Let <var>symbolKeys</var> be !&#160;<emu-xref aoid=\"OrdinaryOwnPropertyKeys\"><a href=\"#sec-ordinaryownpropertykeys\">OrdinaryOwnPropertyKeys</a></emu-xref>(<var>O</var>).</li><li>Append all the entries of <var>symbolKeys</var> to the end of <var>exports</var>.</li><li>Return <var>exports</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-variablestatements-in-catch-blocks": {"num": "B.3.5", "title": "#sec-variablestatements-in-catch-blocks VariableStatements in Catch Blocks", "html": "<emu-annex id=\"sec-variablestatements-in-catch-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</span> VariableStatements in Catch Blocks</h1>\n      <p>The content of subclause <emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref> is replaced with the following:</p>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains any duplicate elements.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> unless <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> is <emu-grammar><emu-production name=\"CatchParameter\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause may contain <code>var</code> declarations that bind a name that is also bound by the <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>. At runtime, such bindings are instantiated in the VariableDeclarationEnvironment. They do not shadow the same-named bindings introduced by the <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> and hence the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> for such <code>var</code> declarations will assign to the corresponding catch parameter rather than the <code>var</code> binding.</p>\n      </div></emu-note>\n      <p>This modified behaviour also applies to <code>var</code> and <code>function</code> declarations introduced by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls contained within the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause. This change is accomplished by modifying the algorithm of <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref> as follows:</p>\n      <p>Step <emu-xref href=\"#step-evaldeclarationinstantiation-throw-duplicate-binding\"><a href=\"#step-evaldeclarationinstantiation-throw-duplicate-binding\">3.d.i.2.a.i</a></emu-xref> is replaced by:</p>\n      <emu-alg replaces-step=\"step-evaldeclarationinstantiation-throw-duplicate-binding\"><ol start=\"1\" class=\"nested-lots\"><li>If <var>thisEnv</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></emu-alg>\n      <p>Step <emu-xref href=\"#step-evaldeclarationinstantiation-web-compat-bindingexists\"><a href=\"#step-evaldeclarationinstantiation-web-compat-bindingexists\">11.d.ii.4.a.i.i</a></emu-xref> is replaced by:</p>\n      <emu-alg replaces-step=\"step-evaldeclarationinstantiation-web-compat-bindingexists\"><ol start=\"1\" class=\"nested-lots\"><li>If <var>thisEnv</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause, let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-static-semantics-vardeclarednames": {"num": "8.1.6", "title": "#sec-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-vardeclarednames\" oldids=\"sec-statement-semantics-static-semantics-vardeclarednames,sec-block-static-semantics-vardeclarednames,sec-variable-statement-static-semantics-vardeclarednames,sec-if-statement-static-semantics-vardeclarednames,sec-do-while-statement-static-semantics-vardeclarednames,sec-while-statement-static-semantics-vardeclarednames,sec-for-statement-static-semantics-vardeclarednames,sec-for-in-and-for-of-statements-static-semantics-vardeclarednames,sec-with-statement-static-semantics-vardeclarednames,sec-switch-statement-static-semantics-vardeclarednames,sec-labelled-statements-static-semantics-vardeclarednames,sec-try-statement-static-semantics-vardeclarednames,sec-function-definitions-static-semantics-vardeclarednames,sec-arrow-function-definitions-static-semantics-vardeclarednames,sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames,sec-scripts-static-semantics-vardeclarednames,sec-module-semantics-static-semantics-vardeclarednames\" type=\"sdo\" aoid=\"VarDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-vardeclarednames\"></span><span id=\"sec-scripts-static-semantics-vardeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-try-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-with-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-for-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-do-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-if-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-variable-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-block-static-semantics-vardeclarednames\"></span><span id=\"sec-statement-semantics-static-semantics-vardeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</span> Static Semantics: VarDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-TvRo0Jzz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-x3WiVh1X\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-cXTIOEn1\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-PhLm_cqX\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-bMjWoX52\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-OPyZZ0FU\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-6wmxzhRC\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-4f3fXSme\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ikslLJyV\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-mb72lTih\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"m0ehvb8m\" id=\"prod-_o07UyGN\">\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-5Ab4YMrd\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-Jj9iNkQT\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-MQNHAeo7\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-6MiGg7LY\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-22bMsY8a\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-iNfrCk_F\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-N2GkbzwH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-polenv5I\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-cQmWs6F4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-6rXrz7RR\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-LH0otfP0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-UE8msfiB\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-Xl42xW5D\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-eiN5tOgj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-dkeW5WMH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-dXd3oD1j\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-kf6BzwpI\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-lB_U5kUv\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-DTgBd2wQ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-e2BPI-N_\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>names</var>.</li><li>Return the result of appending to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-_zisH9m7\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-Gdv5Uzyo\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ocDhl-eB\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-xypmC2Rc\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-TKnUh23n\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-K6wLfAiN\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-naQihl7z\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-F1kslF5t\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-1jr14zqX\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-ic6_wi6x\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-Fovz-BpD\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-kKbHUs1e\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-IDrLWHWU\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-_GPKA3Cb\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-YneO94W1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-WMKjW5iz\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-lGybrnks\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-5uRXjJj7\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-web-compat-evaldeclarationinstantiation": {"num": "B.3.3.3", "title": "#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-evaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</span> Changes to EvalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-evaldeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-evaldeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-evaldeclarationinstantiation-web-compat-insertion-point\">#step-evaldeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-evaldeclarationinstantiation-web-compat-insertion-point\"><ol start=\"11\"><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>body</var>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>body</var>, then<ol><li>Let <var>bindingExists</var> be <emu-val>false</emu-val>.</li><li>Let <var>thisEnv</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisEnv</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisEnv</var> is not an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then<ol><li>If <var>thisEnv</var>.HasBinding(<var>F</var>) is <emu-val>true</emu-val>, then<ol><li id=\"step-evaldeclarationinstantiation-web-compat-bindingexists\">Let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Set <var>thisEnv</var> to <var>thisEnv</var>.[[OuterEnv]].</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>F</var>).</li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>true</emu-val>.</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>F</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>F</var>, <emu-val>true</emu-val>).</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-static-semantics-toplevelvardeclarednames": {"num": "8.1.10", "title": "#sec-static-semantics-toplevelvardeclarednames Static Semantics: TopLevelVarDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-toplevelvardeclarednames\" oldids=\"sec-block-static-semantics-toplevelvardeclarednames,sec-labelled-statements-static-semantics-toplevelvardeclarednames\" type=\"sdo\" aoid=\"TopLevelVarDeclaredNames\"><span id=\"sec-labelled-statements-static-semantics-toplevelvardeclarednames\"></span><span id=\"sec-block-static-semantics-toplevelvardeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevelvardeclarednames\">#sec-static-semantics-toplevelvardeclarednames</span> Static Semantics: TopLevelVarDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-ie-RAx6L\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-_Kx3fMtB\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-l-2kGEcB\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-CxIyq9Kn\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>At the top level of a function or script, inner function declarations are treated like var declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-gviukyGv\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-jtk1iKc9\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-5RFYGz0t\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-privateboundidentifiers": {"num": "15.7.8", "title": "#sec-static-semantics-privateboundidentifiers Static Semantics: PrivateBoundIdentifiers", "html": "<emu-clause id=\"sec-static-semantics-privateboundidentifiers\" type=\"sdo\" aoid=\"PrivateBoundIdentifiers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-privateboundidentifiers\">#sec-static-semantics-privateboundidentifiers</span> Static Semantics: PrivateBoundIdentifiers</h1>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-QQ9gR7rA\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\" id=\"prod-3FDawUhc\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bmyo-0oj\" id=\"prod-sMaEe0uD\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-dExs5jCW\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"msulavvt\" id=\"prod-PTQtTdvS\">\n        <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-pxy6kYq7\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"s7vk7pda\" id=\"prod-axmlrr3F\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"lbu40xzc\" id=\"prod-9-TzGQnW\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorMethod\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-Qvq1cmEs\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-zTa8Ph70\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorMethod\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-1nK7U43p\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-exportentriesformodule": {"num": "16.2.3.5", "title": "#sec-static-semantics-exportentriesformodule Static Semantics: ExportEntriesForModule", "html": "<emu-clause id=\"sec-static-semantics-exportentriesformodule\" type=\"sdo\" aoid=\"ExportEntriesForModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-exportentriesformodule\">#sec-static-semantics-exportentriesformodule</span> Static Semantics: ExportEntriesForModule</h1>\n        <p>With parameter <var>module</var>.</p>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sb5ztei-\" id=\"prod-Xa_xAKMV\"><emu-t>*</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <emu-val>null</emu-val> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dtcd7req\" id=\"prod-eEU1GKNj\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exportName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>exportName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-mzZ83dVi\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gqfndot_\" id=\"prod-zadzACBk\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>specs</var> be the <emu-xref aoid=\"ExportEntriesForModule\"><a href=\"#sec-static-semantics-exportentriesformodule\">ExportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> with argument <var>module</var>.</li><li>Append to <var>specs</var> the elements of the <emu-xref aoid=\"ExportEntriesForModule\"><a href=\"#sec-static-semantics-exportentriesformodule\">ExportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> with argument <var>module</var>.</li><li>Return <var>specs</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-sRdxtKYQ\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>sourceName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If <var>module</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>localName</var> be <var>sourceName</var>.</li><li>Let <var>importName</var> be <emu-val>null</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>localName</var> be <emu-val>null</emu-val>.</li><li>Let <var>importName</var> be <var>sourceName</var>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <var>sourceName</var> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvusrr4h\" id=\"prod-kMIeNwJo\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>sourceName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>exportName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the second <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If <var>module</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>localName</var> be <var>sourceName</var>.</li><li>Let <var>importName</var> be <emu-val>null</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>localName</var> be <emu-val>null</emu-val>.</li><li>Let <var>importName</var> be <var>sourceName</var>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <var>exportName</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-varscopeddeclarations": {"num": "8.1.7", "title": "#sec-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-varscopeddeclarations\" oldids=\"sec-statement-semantics-static-semantics-varscopeddeclarations,sec-block-static-semantics-varscopeddeclarations,sec-variable-statement-static-semantics-varscopeddeclarations,sec-if-statement-static-semantics-varscopeddeclarations,sec-do-while-statement-static-semantics-varscopeddeclarations,sec-while-statement-static-semantics-varscopeddeclarations,sec-for-statement-static-semantics-varscopeddeclarations,sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations,sec-with-statement-static-semantics-varscopeddeclarations,sec-switch-statement-static-semantics-varscopeddeclarations,sec-labelled-statements-static-semantics-varscopeddeclarations,sec-try-statement-static-semantics-varscopeddeclarations,sec-function-definitions-static-semantics-varscopeddeclarations,sec-arrow-function-definitions-static-semantics-varscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations,sec-scripts-static-semantics-varscopeddeclarations,sec-module-semantics-static-semantics-varscopeddeclarations\" type=\"sdo\" aoid=\"VarScopedDeclarations\"><span id=\"sec-module-semantics-static-semantics-varscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-varscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-try-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-with-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-do-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-if-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-variable-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-block-static-semantics-varscopeddeclarations\"></span><span id=\"sec-statement-semantics-static-semantics-varscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</span> Static Semantics: VarScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-CXBIcQtz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-4cf8z78V\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-UIiAeivR\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-R2NCFAfM\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-8C3zNXp6\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-QgvbQ6qN\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-nkERSk1r\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--ycd0kFi\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-r8z3UV58\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-zHpAsUUQ\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n3piepmh\" id=\"prod-r4VwMPwM\"><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oavweevb\" id=\"prod-HsuXutdb\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> to <var>declarations</var>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-B7KHfByo\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-yyIeKAQ3\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-QkEPe1CC\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-jrq4eHFJ\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-5lKKTAkN\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-13ohOiCm\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-eqKiNSk1\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-KgxDtGf4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-AWnFzjE8\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-5TY9-yea\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-t9Ps-Sf3\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-IEEeV8La\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-WOgH08rb\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-SyVO6l8T\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-o2HaUKnD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-kZcYMT8d\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-otI6GMSS\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-FjNXiCI7\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-BX82yRxg\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-aW8QiumN\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>declarations</var>.</li><li>Return the result of appending to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-nuKGUlOU\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-mzP2If-y\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ZPHZRUV6\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-i-A4iWeY\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-ntkJlgei\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-RhYCwWQZ\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-0GInHInm\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-pi8GJ951\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-H8Sf_rsN\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-vvqmH-2l\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-x8eD4P1T\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-UWG_9qGM\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-VllrABp8\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-MCeJZE_U\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-g_wYfia1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-oVpqQZka\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-TBDbISuB\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-f75VYPkN\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-functiondeclarationinstantiation": {"num": "10.2.11", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>The abstract operation FunctionDeclarationInstantiation takes arguments <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be <emu-xref aoid=\"ContainsExpression\"><a href=\"#sec-static-semantics-containsexpression\">ContainsExpression</a></emu-xref> of <var>formals</var>.</li><li>Let <var>varNames</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <emu-val>\"arguments\"</emu-val> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <emu-val>\"arguments\"</emu-val> is an element of <var>functionNames</var> or if <emu-val>\"arguments\"</emu-val> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that bindings created by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls in the formal parameter list are outside the environment where parameters are declared.</li><li>Let <var>calleeEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>calleeEnv</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The VariableEnvironment of <var>calleeContext</var> is <var>calleeEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>env</var>.</li></ol></li><li>For each String <var>paramName</var> of <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>env</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>env</var>.InitializeBinding(<emu-val>\"arguments\"</emu-val>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>parameterNames</var>, followed by <emu-val>\"arguments\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>env</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>env</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnv</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li id=\"step-functiondeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>Let <var>privateEnv</var> be the PrivateEnvironment of <var>calleeContext</var>.</li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>f</var>.</li><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>f</var> with arguments <var>lexEnv</var> and <var>privateEnv</var>.</li><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in <emu-xref href=\"#sec-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-iteratorbindinginitialization\">#sec-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-web-compat-globaldeclarationinstantiation": {"num": "B.3.3.2", "title": "#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-globaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</span> Changes to GlobalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">#step-globaldeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-globaldeclarationinstantiation-web-compat-insertion-point\"><ol start=\"13\"><li>Let <var>strict</var> be <emu-xref aoid=\"IsStrict\"><a href=\"#sec-static-semantics-isstrict\">IsStrict</a></emu-xref> of <var>script</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>script</var>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>script</var>, then<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>F</var>).</li><li>If <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName nor the name of another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-static-semantics-containsduplicatelabels": {"num": "8.2.1", "title": "#sec-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-static-semantics-containsduplicatelabels\" oldids=\"sec-statement-semantics-static-semantics-containsduplicatelabels,sec-block-static-semantics-containsduplicatelabels,sec-if-statement-static-semantics-containsduplicatelabels,sec-do-while-statement-static-semantics-containsduplicatelabels,sec-while-statement-static-semantics-containsduplicatelabels,sec-for-statement-static-semantics-containsduplicatelabels,sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels,sec-with-statement-static-semantics-containsduplicatelabels,sec-switch-statement-static-semantics-containsduplicatelabels,sec-labelled-statements-static-semantics-containsduplicatelabels,sec-try-statement-static-semantics-containsduplicatelabels,sec-function-definitions-static-semantics-containsduplicatelabels,sec-module-semantics-static-semantics-containsduplicatelabels\" type=\"sdo\" aoid=\"ContainsDuplicateLabels\"><span id=\"sec-module-semantics-static-semantics-containsduplicatelabels\"></span><span id=\"sec-function-definitions-static-semantics-containsduplicatelabels\"></span><span id=\"sec-try-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-labelled-statements-static-semantics-containsduplicatelabels\"></span><span id=\"sec-switch-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-with-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"></span><span id=\"sec-for-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-while-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-do-while-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-if-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-block-static-semantics-containsduplicatelabels\"></span><span id=\"sec-statement-semantics-static-semantics-containsduplicatelabels\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-5segouA8\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-X3W5RktU\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-tPl3NUyn\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-5amcoTln\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-SRoeq51F\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-sjee5Pog\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-iv3GJbNA\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-VdiHdMbL\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-SpvJf5dZ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-OH037R2P\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-IG220ePF\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-iIi7e4Mv\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicate</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicate</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-M7d89bkQ\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-CSwsyonC\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-UWs53aWN\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-GgLrXaaO\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-di1-cm7_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-zOnkGPoB\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-rNKuYq6q\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-jKYdRg__\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-zBPUdTbl\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-zoCqTANq\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-zqf8dZti\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-dRwtb2-L\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-kCZrLuMF\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-1mQl-EgZ\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-SKvXy5l6\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-92qu0ILT\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-OMSfPp_0\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-8Uz0YNaN\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-UcaBQzki\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-yJHneCFO\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-YbPvJc_D\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-__iQJPEb\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-UiQoMdIo\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>If <var>label</var> is an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-j-zK1vJK\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-iFqlj7Lz\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-DkNjzLGB\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-Aa8IOm4z\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-K0PcnMLw\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-cn79vCHf\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-FlDPQVjo\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-hjcOowKc\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-OcbYq9se\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-toplevellexicallydeclarednames": {"num": "8.1.8", "title": "#sec-static-semantics-toplevellexicallydeclarednames Static Semantics: TopLevelLexicallyDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-toplevellexicallydeclarednames\" oldids=\"sec-block-static-semantics-toplevellexicallydeclarednames,sec-labelled-statements-static-semantics-toplevellexicallydeclarednames\" type=\"sdo\" aoid=\"TopLevelLexicallyDeclaredNames\"><span id=\"sec-labelled-statements-static-semantics-toplevellexicallydeclarednames\"></span><span id=\"sec-block-static-semantics-toplevellexicallydeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevellexicallydeclarednames\">#sec-static-semantics-toplevellexicallydeclarednames</span> Static Semantics: TopLevelLexicallyDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-s6Vb3QUL\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-DWksqgz-\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-ReRATT6e\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return &#171; &#187;.</li></ol></li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>At the top level of a function, or script, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-vPjzf01U\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-lexicallydeclarednames": {"num": "8.1.4", "title": "#sec-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-lexicallydeclarednames\" oldids=\"sec-block-static-semantics-lexicallydeclarednames,sec-switch-statement-static-semantics-lexicallydeclarednames,sec-labelled-statements-static-semantics-lexicallydeclarednames,sec-function-definitions-static-semantics-lexicallydeclarednames,sec-arrow-function-definitions-static-semantics-lexicallydeclarednames,sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames,sec-scripts-static-semantics-lexicallydeclarednames,sec-module-semantics-static-semantics-lexicallydeclarednames\" type=\"sdo\" aoid=\"LexicallyDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-scripts-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-block-static-semantics-lexicallydeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallydeclarednames\">#sec-static-semantics-lexicallydeclarednames</span> Static Semantics: LexicallyDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-mPEvRR9d\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ZFtxhsq0\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-Rrf-OST4\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-9AEMspNg\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--_BgAjEq\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-mSnfTK7z\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>names</var>.</li><li>Return the result of appending to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-7Gkp_Ikd\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-LyDmmUT5\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-JWPhP_ev\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-BptUBlCG\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-FwgSl19M\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-_jhHTL9Z\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-8YrmfaA1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-yRWpcHmG\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-2xZloP4O\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-tdMR5_9c\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-m6bh3GpA\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The LexicallyDeclaredNames of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> includes the names of all of its imported bindings.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-t-OtLQL7\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-vXiSx9wh\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-v-PqD2SJ\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"15hryu6r\" id=\"prod-XYalkd2A\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, function declarations are treated like lexical declarations rather than like var declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-static-semantics-lexicallyscopeddeclarations": {"num": "8.1.5", "title": "#sec-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-lexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-lexicallyscopeddeclarations,sec-switch-statement-static-semantics-lexicallyscopeddeclarations,sec-labelled-statements-static-semantics-lexicallyscopeddeclarations,sec-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations,sec-scripts-static-semantics-lexicallyscopeddeclarations,sec-module-semantics-static-semantics-lexicallyscopeddeclarations,sec-exports-static-semantics-lexicallyscopeddeclarations\" type=\"sdo\" aoid=\"LexicallyScopedDeclarations\"><span id=\"sec-exports-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-module-semantics-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-block-static-semantics-lexicallyscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallyscopeddeclarations\">#sec-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-dqBS0eQw\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-MlufDCPG\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-IYBZJ2CF\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-bhogjJ1W\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-am_Z4H66\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <var>declarations</var>.</li><li>Return the result of appending to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-LxvbRJKF\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-tORmzQQv\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-84xBBiJA\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-V7zVpmtw\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-3Vc5meav\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-nL_6JlM9\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-gtaAB-x7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-aKFk9Ijn\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-4B0l6Nwq\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-0qrVz5hX\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-1WkoNRM_\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-eWnfpwM7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-rZF3AogZ\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-zqmuSkfM\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-IxEr0QE9\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod-DEMJzdJ7\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"bg3oaw2m\" id=\"prod-cMreMYU5\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-xsgJyOoQ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-cRTDqnfl\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\" id=\"prod-4yMGuqEs\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\" id=\"prod-XTfiw-G1\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-exportentries": {"num": "16.2.3.4", "title": "#sec-static-semantics-exportentries Static Semantics: ExportEntries", "html": "<emu-clause id=\"sec-static-semantics-exportentries\" oldids=\"sec-module-semantics-static-semantics-exportentries,sec-exports-static-semantics-exportentries\" type=\"sdo\" aoid=\"ExportEntries\"><span id=\"sec-exports-static-semantics-exportentries\"></span><span id=\"sec-module-semantics-static-semantics-exportentries\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-exportentries\">#sec-static-semantics-exportentries</span> Static Semantics: ExportEntries</h1>\n        <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-VtH9KIhP\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-paVpIqc4\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be <emu-xref aoid=\"ExportEntries\"><a href=\"#sec-static-semantics-exportentries\">ExportEntries</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>entries</var> the elements of the <emu-xref aoid=\"ExportEntries\"><a href=\"#sec-static-semantics-exportentries\">ExportEntries</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-lSM0kaNt\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"15hryu6r\" id=\"prod-TW56DY7O\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-Pw78KQtD\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be the sole element of <emu-xref aoid=\"ModuleRequests\"><a href=\"#sec-static-semantics-modulerequests\">ModuleRequests</a></emu-xref> of <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>.</li><li>Return <emu-xref aoid=\"ExportEntriesForModule\"><a href=\"#sec-static-semantics-exportentriesformodule\">ExportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> with argument <var>module</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"j2lh_kda\" id=\"prod-VQKcYkbx\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"ExportEntriesForModule\"><a href=\"#sec-static-semantics-exportentriesformodule\">ExportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> with argument <emu-val>null</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bg3oaw2m\" id=\"prod-vHJuGFG0\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>For each element <var>name</var> of <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-7BCAocpR\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li><li>For each element <var>name</var> of <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-rg_YnEcS\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\" id=\"prod-A54_tyTm\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\" id=\"prod-04PQQ9j2\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <emu-val>\"*default*\"</emu-val>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-val>\"*default*\"</emu-val> is used within this specification as a synthetic name for anonymous default export values.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-static-semantics-containsundefinedcontinuetarget": {"num": "8.2.3", "title": "#sec-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-static-semantics-containsundefinedcontinuetarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget,sec-block-static-semantics-containsundefinedcontinuetarget,sec-if-statement-static-semantics-containsundefinedcontinuetarget,sec-do-while-statement-static-semantics-containsundefinedcontinuetarget,sec-while-statement-static-semantics-containsundefinedcontinuetarget,sec-for-statement-static-semantics-containsundefinedcontinuetarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget,sec-continue-statement-static-semantics-containsundefinedcontinuetarget,sec-with-statement-static-semantics-containsundefinedcontinuetarget,sec-switch-statement-static-semantics-containsundefinedcontinuetarget,sec-labelled-statements-static-semantics-containsundefinedcontinuetarget,sec-try-statement-static-semantics-containsundefinedcontinuetarget,sec-function-definitions-static-semantics-containsundefinedcontinuetarget,sec-module-semantics-static-semantics-containsundefinedcontinuetarget\" type=\"sdo\" aoid=\"ContainsUndefinedContinueTarget\"><span id=\"sec-module-semantics-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-function-definitions-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-try-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-labelled-statements-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-switch-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-with-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-continue-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-for-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-while-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-do-while-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-if-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-block-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-HhlDWDz1\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-NBGwhRuE\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-E6M7T9Em\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-V2tQVOUI\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-jJUZqLJS\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-BNxhQmvf\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-B3-Yz0aF\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-eptReca1\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-QrxFmsVC\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kmxl4yum\" id=\"prod-PptGj0zd\"><emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>newIterationSet</var> be a copy of <var>iterationSet</var> with all the elements of <var>labelSet</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> with arguments <var>newIterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-Vrq9L4TL\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-MYTRO2yV\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-idT2m0fR\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-1k-PvIQ6\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-nqE7jDen\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-sdOZ0OVe\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-38R1spHk\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-GQ9tF3ug\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-ilROtw6r\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-RXKTOvxD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-mKAcS051\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-MPaED8xy\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-SLsBgk8L\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-G_08fu0g\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-xuMzWdW7\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-xVs7Y4Vv\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-Ii0_W2zX\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6qppgxyk\" id=\"prod-P3ParQAP\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"wh7qddgu\" id=\"prod-ngwxJt1P\">\n        <emu-t>continue</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>iterationSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-qti0YV4g\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-yGASkGus\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-wESl6-va\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-L1SF9WLb\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-Mf-FlzJR\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-YLBmIA_U\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ycWJ_ozd\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-8au0KFQe\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with arguments <var>iterationSet</var> and <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-I9dzHyBf\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-bHqvfllk\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-MPDlN7RI\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-fYVcY74b\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-WfIkG4rU\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-zb1__ND8\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-9GocAvXy\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-GeitVMt4\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-JQIpAjs-\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-referencedbindings": {"num": "16.2.3.6", "title": "#sec-static-semantics-referencedbindings Static Semantics: ReferencedBindings", "html": "<emu-clause id=\"sec-static-semantics-referencedbindings\" type=\"sdo\" aoid=\"ReferencedBindings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-referencedbindings\">#sec-static-semantics-referencedbindings</span> Static Semantics: ReferencedBindings</h1>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-SuOfrU8K\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gqfndot_\" id=\"prod-eGw90zQ9\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"ReferencedBindings\"><a href=\"#sec-static-semantics-referencedbindings\">ReferencedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"ReferencedBindings\"><a href=\"#sec-static-semantics-referencedbindings\">ReferencedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-T6LrnWgA\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvusrr4h\" id=\"prod-iOxB68Nd\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-argumentlistevaluation": {"num": "13.3.8.1", "title": "#sec-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-argumentlistevaluation\" oldids=\"sec-template-literals-runtime-semantics-argumentlistevaluation,sec-argument-lists-runtime-semantics-argumentlistevaluation\" type=\"sdo\" aoid=\"ArgumentListEvaluation\"><span id=\"sec-argument-lists-runtime-semantics-argumentlistevaluation\"></span><span id=\"sec-template-literals-runtime-semantics-argumentlistevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-argumentlistevaluation\">#sec-runtime-semantics-argumentlistevaluation</span> Runtime Semantics: ArgumentListEvaluation</h1>\n        <emu-grammar><emu-production name=\"Arguments\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eormm5tk\" id=\"prod-qXYYcvIK\">\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1px9pijq\" id=\"prod-6LIBrAp-\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>arg</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w7ifpmpd\" id=\"prod-9NFeGQ82\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>list</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>list</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>list</var>.</li></ol></li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f_i_7oqe\" id=\"prod-avUGM8aa\">\n        <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Append <var>arg</var> to the end of <var>precedingArgs</var>.</li><li>Return <var>precedingArgs</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4rq-va3\" id=\"prod-Au9Wi9yT\">\n        <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>)).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>precedingArgs</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>precedingArgs</var>.</li></ol></li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e_otk8es\" id=\"prod-EUsfaoKE\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>siteObj</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"haut9ebi\" id=\"prod-_obYKRXG\"><emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Let <var>remaining</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose first element is <var>siteObj</var> and whose subsequent elements are the elements of <var>remaining</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vpxmqc6d\" id=\"prod-RX4K7HKv\">\n        <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>firstSubRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>firstSub</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>firstSubRef</var>).</li><li>Let <var>restSub</var> be ? <emu-xref aoid=\"SubstitutionEvaluation\"><a href=\"#sec-runtime-semantics-substitutionevaluation\">SubstitutionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>restSub</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose first element is <var>firstSub</var> and whose subsequent elements are the elements of <var>restSub</var>. <var>restSub</var> may contain no elements.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-static-semantics-exportedbindings": {"num": "16.2.3.2", "title": "#sec-static-semantics-exportedbindings Static Semantics: ExportedBindings", "html": "<emu-clause id=\"sec-static-semantics-exportedbindings\" oldids=\"sec-module-semantics-static-semantics-exportedbindings,sec-exports-static-semantics-exportedbindings\" type=\"sdo\" aoid=\"ExportedBindings\"><span id=\"sec-exports-static-semantics-exportedbindings\"></span><span id=\"sec-module-semantics-static-semantics-exportedbindings\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-exportedbindings\">#sec-static-semantics-exportedbindings</span> Static Semantics: ExportedBindings</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ExportedBindings are the locally bound names that are explicitly associated with a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>'s <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-hxF0P9sA\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"ExportedBindings\"><a href=\"#sec-static-semantics-exportedbindings\">ExportedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"ExportedBindings\"><a href=\"#sec-static-semantics-exportedbindings\">ExportedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-_KDGI2fs\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"15hryu6r\" id=\"prod-ExniQRjB\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-V3c4HtRK\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"j2lh_kda\" id=\"prod-OFghu2j_\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"ExportedBindings\"><a href=\"#sec-static-semantics-exportedbindings\">ExportedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bg3oaw2m\" id=\"prod-IJxf-Cdm\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-PahxJv8L\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-Ltk1AbDn\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"w8pljwgc\" id=\"prod-kSrXZybF\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4f6ct71n\" id=\"prod-tftEFTtX\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-TQTcajTg\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gqfndot_\" id=\"prod-2N5gUMor\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"ExportedBindings\"><a href=\"#sec-static-semantics-exportedbindings\">ExportedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"ExportedBindings\"><a href=\"#sec-static-semantics-exportedbindings\">ExportedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-PXy6OYfk\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvusrr4h\" id=\"prod-yE_sj4Qx\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-propertynamelist": {"num": "13.2.5.3", "title": "#sec-static-semantics-propertynamelist Static Semantics: PropertyNameList", "html": "<emu-clause id=\"sec-static-semantics-propertynamelist\" type=\"sdo\" aoid=\"PropertyNameList\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-propertynamelist\">#sec-static-semantics-propertynamelist</span> Static Semantics: PropertyNameList</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zxofg8tg\" id=\"prod-ojv3z_1M\"><emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is <emu-const>empty</emu-const>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mvlwazei\" id=\"prod-arjQ9VdV\">\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>list</var> be <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>.</li><li>If <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is <emu-const>empty</emu-const>, return <var>list</var>.</li><li>Append <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> to the end of <var>list</var>.</li><li>Return <var>list</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-bound-function-exotic-objects-call-thisargument-argumentslist": {"num": "10.4.1.1", "title": "#sec-bound-function-exotic-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">#sec-bound-function-exotic-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n        <p>The [[Call]] internal method of a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref> <var>F</var> takes arguments <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>target</var> be <var>F</var>.[[BoundTargetFunction]].</li><li>Let <var>boundThis</var> be <var>F</var>.[[BoundThis]].</li><li>Let <var>boundArgs</var> be <var>F</var>.[[BoundArguments]].</li><li>Let <var>args</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>boundArgs</var>, followed by the elements of <var>argumentsList</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>target</var>, <var>boundThis</var>, <var>args</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-importentries": {"num": "16.2.2.2", "title": "#sec-static-semantics-importentries Static Semantics: ImportEntries", "html": "<emu-clause id=\"sec-static-semantics-importentries\" oldids=\"sec-module-semantics-static-semantics-importentries,sec-imports-static-semantics-importentries\" type=\"sdo\" aoid=\"ImportEntries\"><span id=\"sec-imports-static-semantics-importentries\"></span><span id=\"sec-module-semantics-static-semantics-importentries\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-importentries\">#sec-static-semantics-importentries</span> Static Semantics: ImportEntries</h1>\n        <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-65kV3a3C\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-8cqfbQ1C\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be <emu-xref aoid=\"ImportEntries\"><a href=\"#sec-static-semantics-importentries\">ImportEntries</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>entries</var> the elements of the <emu-xref aoid=\"ImportEntries\"><a href=\"#sec-static-semantics-importentries\">ImportEntries</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-haUIYXQl\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"15hryu6r\" id=\"prod-hUPyQqYi\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"glhuxxec\" id=\"prod-4FL2ok6-\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be the sole element of <emu-xref aoid=\"ModuleRequests\"><a href=\"#sec-static-semantics-modulerequests\">ModuleRequests</a></emu-xref> of <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>.</li><li>Return <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> with argument <var>module</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"odcuzpbi\" id=\"prod--ST7ch2j\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-bound-function-exotic-objects-construct-argumentslist-newtarget": {"num": "10.4.1.2", "title": "#sec-bound-function-exotic-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">#sec-bound-function-exotic-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n        <p>The [[Construct]] internal method of a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref> <var>F</var> takes arguments <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values) and <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>target</var> be <var>F</var>.[[BoundTargetFunction]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>target</var>) is <emu-val>true</emu-val>.</li><li>Let <var>boundArgs</var> be <var>F</var>.[[BoundArguments]].</li><li>Let <var>args</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>boundArgs</var>, followed by the elements of <var>argumentsList</var>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>F</var>, <var>newTarget</var>) is <emu-val>true</emu-val>, set <var>newTarget</var> to <var>target</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>target</var>, <var>args</var>, <var>newTarget</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization": {"num": "14.3.3.1", "title": "#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization Runtime Semantics: PropertyBindingInitialization", "html": "<emu-clause id=\"sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\" type=\"sdo\" aoid=\"PropertyBindingInitialization\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\">#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization</span> Runtime Semantics: PropertyBindingInitialization</h1>\n        <p>With parameters <var>value</var> and <var>environment</var>.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">These collect a list of all bound property names rather than just empty completion.</div></emu-note>\n\n        <emu-grammar><emu-production name=\"BindingPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bzdeo9zt\" id=\"prod-jhtKd-Y5\">\n        <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>boundNames</var> be ? <emu-xref aoid=\"PropertyBindingInitialization\"><a href=\"#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\">PropertyBindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt> with arguments <var>value</var> and <var>environment</var>.</li><li>Let <var>nextNames</var> be ? <emu-xref aoid=\"PropertyBindingInitialization\"><a href=\"#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\">PropertyBindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt> with arguments <var>value</var> and <var>environment</var>.</li><li>Append each item in <var>nextNames</var> to the end of <var>boundNames</var>.</li><li>Return <var>boundNames</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"BindingProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lof8ala-\" id=\"prod--5EhKk0m\"><emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>name</var> be the string that is the only element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt>.</li><li>Perform ? <emu-xref aoid=\"KeyedBindingInitialization\"><a href=\"#sec-runtime-semantics-keyedbindinginitialization\">KeyedBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> using <var>value</var>, <var>environment</var>, and <var>name</var> as the arguments.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>name</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"BindingProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mhvrwluk\" id=\"prod-1euONYQ-\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>P</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>P</var>).</li><li>Perform ? <emu-xref aoid=\"KeyedBindingInitialization\"><a href=\"#sec-runtime-semantics-keyedbindinginitialization\">KeyedBindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> with <var>value</var>, <var>environment</var>, and <var>P</var> as the arguments.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>P</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-labelledevaluation": {"num": "14.13.4", "title": "#sec-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-labelledevaluation\" oldids=\"sec-statement-semantics-runtime-semantics-labelledevaluation,sec-labelled-statements-runtime-semantics-labelledevaluation\" type=\"sdo\" aoid=\"LabelledEvaluation\"><span id=\"sec-labelled-statements-runtime-semantics-labelledevaluation\"></span><span id=\"sec-statement-semantics-runtime-semantics-labelledevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-labelledevaluation\">#sec-runtime-semantics-labelledevaluation</span> Runtime Semantics: LabelledEvaluation</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kmxl4yum\" id=\"prod-pR7DNQsN\"><emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>stmtResult</var> be <emu-xref aoid=\"LoopEvaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\">LoopEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Target]] is <emu-const>empty</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Value]] is <emu-const>empty</emu-const>, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Else, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nuio-xfp\" id=\"prod-FSHcHfYw\"><emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>stmtResult</var> be the result of evaluating <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Target]] is <emu-const>empty</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Value]] is <emu-const>empty</emu-const>, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Else, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>A <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> is one that can be exited via an unlabelled <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-GnWrgP5w\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Append <var>label</var> as an element of <var>labelSet</var>.</li><li>Let <var>stmtResult</var> be <emu-xref aoid=\"LabelledEvaluation\"><a href=\"#sec-runtime-semantics-labelledevaluation\">LabelledEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>stmtResult</var>.[[Target]], <var>label</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-3whCJM4e\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gre9qn6e\" id=\"prod-yNvNX8se\"><emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iwwn8atx\" id=\"prod-nGqcJdt_\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-E9WZy4XN\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-JaqknT0A\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"skawbrez\" id=\"prod-WDFeNdWY\"><emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-OTAMsoQb\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-7zXkEnhZ\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-P_sTorcs\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ye6wwgts\" id=\"prod--R2pJplF\"><emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-UhENwxgv\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ex_crokj\" id=\"prod-nKo_YY6H\"><emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-TbDRWisB\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The only two productions of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> which have special semantics for LabelledEvaluation are <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> and <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-static-semantics-exportednames": {"num": "16.2.3.3", "title": "#sec-static-semantics-exportednames Static Semantics: ExportedNames", "html": "<emu-clause id=\"sec-static-semantics-exportednames\" oldids=\"sec-module-semantics-static-semantics-exportednames,sec-exports-static-semantics-exportednames\" type=\"sdo\" aoid=\"ExportedNames\"><span id=\"sec-exports-static-semantics-exportednames\"></span><span id=\"sec-module-semantics-static-semantics-exportednames\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-exportednames\">#sec-static-semantics-exportednames</span> Static Semantics: ExportedNames</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ExportedNames are the externally visible names that a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> explicitly maps to one of its local name bindings.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-Td0h-qi5\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-ebSwvFft\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-HgfJHgi9\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"15hryu6r\" id=\"prod-TCq0u4jM\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-Upv45R4X\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sb5ztei-\" id=\"prod-H38kB23_\"><emu-t>*</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dtcd7req\" id=\"prod-cZdtFWyT\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_xs5tuve\" id=\"prod-zlltzYPM\"><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bg3oaw2m\" id=\"prod-n6JkNQnf\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-NjdAgwQZ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-iOoR-XLv\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"w8pljwgc\" id=\"prod-BuNuTBV9\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4f6ct71n\" id=\"prod-fWfjxGVB\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return &#171; <emu-val>\"default\"</emu-val> &#187;.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-tyOEKkRB\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gqfndot_\" id=\"prod-VeE5fiYD\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-pHxySdXg\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvusrr4h\" id=\"prod-GRhLFzm0\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the second <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-toplevellexicallyscopeddeclarations": {"num": "8.1.9", "title": "#sec-static-semantics-toplevellexicallyscopeddeclarations Static Semantics: TopLevelLexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-toplevellexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations,sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations\" type=\"sdo\" aoid=\"TopLevelLexicallyScopedDeclarations\"><span id=\"sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations\"></span><span id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevellexicallyscopeddeclarations\">#sec-static-semantics-toplevellexicallyscopeddeclarations</span> Static Semantics: TopLevelLexicallyScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-ZOlGIUjg\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-fSl8sbck\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-68OgfJw9\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod--BAI6AhR\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return &#171; &#187;.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-VoYdAOt3\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-static-semantics-allprivateidentifiersvalid", "sec-static-semantics-containsundefinedbreaktarget", "sec-static-semantics-importentriesformodule", "sec-runtime-semantics-substitutionevaluation", "sec-static-semantics-prototypepropertynamelist", "sec-static-semantics-boundnames", "sec-static-semantics-templatestrings", "sec-initializers-in-forin-statement-heads", "sec-static-semantics-toplevelvarscopeddeclarations", "sec-list-and-record-specification-type", "sec-runtime-semantics-propertydestructuringassignmentevaluation", "sec-module-namespace-exotic-objects-ownpropertykeys", "sec-variablestatements-in-catch-blocks", "sec-static-semantics-vardeclarednames", "sec-web-compat-evaldeclarationinstantiation", "sec-static-semantics-toplevelvardeclarednames", "sec-static-semantics-privateboundidentifiers", "sec-static-semantics-exportentriesformodule", "sec-static-semantics-varscopeddeclarations", "sec-functiondeclarationinstantiation", "sec-web-compat-globaldeclarationinstantiation", "sec-static-semantics-containsduplicatelabels", "sec-static-semantics-toplevellexicallydeclarednames", "sec-static-semantics-lexicallydeclarednames", "sec-static-semantics-lexicallyscopeddeclarations", "sec-static-semantics-exportentries", "sec-static-semantics-containsundefinedcontinuetarget", "sec-static-semantics-referencedbindings", "sec-runtime-semantics-argumentlistevaluation", "sec-static-semantics-exportedbindings", "sec-static-semantics-propertynamelist", "sec-bound-function-exotic-objects-call-thisargument-argumentslist", "sec-static-semantics-importentries", "sec-bound-function-exotic-objects-construct-argumentslist-newtarget", "sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization", "sec-runtime-semantics-labelledevaluation", "sec-static-semantics-exportednames", "sec-static-semantics-toplevellexicallyscopeddeclarations"], "secData": {"sec-static-semantics-allprivateidentifiersvalid": {"num": "15.7.7", "title": "#sec-static-semantics-allprivateidentifiersvalid Static Semantics: AllPrivateIdentifiersValid", "html": "<emu-clause id=\"sec-static-semantics-allprivateidentifiersvalid\" type=\"sdo\" aoid=\"AllPrivateIdentifiersValid\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-allprivateidentifiersvalid\">#sec-static-semantics-allprivateidentifiersvalid</span> Static Semantics: AllPrivateIdentifiersValid</h1>\n      <p>With parameter <var>names</var>.</p>\n\n      <p>Every grammar production alternative in this specification which is not listed below implicitly has the following default definition of AllPrivateIdentifiersValid:</p>\n      <emu-alg><ol><li>For each child node <var>child</var> of this <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, do<ol><li>If <var>child</var> is an instance of a nonterminal, then<ol><li>If <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <var>child</var> with argument <var>names</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0uk9afbi\" id=\"prod-hH1hyF7o\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>names</var> contains the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>, then<ol><li>Return <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> with argument <var>names</var>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cysjk9wh\" id=\"prod-9EwGAkEl\">\n        <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>names</var> contains the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>, then<ol><li>Return <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> with argument <var>names</var>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0xlnjlpz\" id=\"prod-GLUsMLG4\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>names</var> contains the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"OptionalChain\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dnp-fbqk\" id=\"prod-LZl0sxgi\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>names</var> contains the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>, then<ol><li>Return <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> with argument <var>names</var>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1y1dunax\" id=\"prod-7rm6mrow\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>newNames</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Return <emu-xref aoid=\"AllPrivateIdentifiersValid\"><a href=\"#sec-static-semantics-allprivateidentifiersvalid\">AllPrivateIdentifiersValid</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> with argument <var>newNames</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-containsundefinedbreaktarget": {"num": "8.2.2", "title": "#sec-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-static-semantics-containsundefinedbreaktarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget,sec-block-static-semantics-containsundefinedbreaktarget,sec-if-statement-static-semantics-containsundefinedbreaktarget,sec-do-while-statement-static-semantics-containsundefinedbreaktarget,sec-while-statement-static-semantics-containsundefinedbreaktarget,sec-for-statement-static-semantics-containsundefinedbreaktarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget,sec-break-statement-static-semantics-containsundefinedbreaktarget,sec-with-statement-static-semantics-containsundefinedbreaktarget,sec-switch-statement-static-semantics-containsundefinedbreaktarget,sec-labelled-statements-static-semantics-containsundefinedbreaktarget,sec-try-statement-static-semantics-containsundefinedbreaktarget,sec-function-definitions-static-semantics-containsundefinedbreaktarget,sec-module-semantics-static-semantics-containsundefinedbreaktarget\" type=\"sdo\" aoid=\"ContainsUndefinedBreakTarget\"><span id=\"sec-module-semantics-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-function-definitions-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-try-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-labelled-statements-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-switch-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-with-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-break-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-for-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-while-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-do-while-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-if-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-block-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-fZ1-o-5P\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-T0wQwLQ_\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-kUTRcwOP\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-LpKI1NOa\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-s5sTXkkT\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-CeDAPMUu\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-81RguExk\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-YsZID3li\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-ndTQ-Fse\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-v3tH_xWo\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-OZMT2LO1\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-kiVPWNCJ\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-JiuempzE\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-NfepJ8d-\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-_bYykgU2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-0RGYYYa8\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-gRSHgUm2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-mui4tXHs\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-tYmMbbAK\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-xkRBC0p_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-3FISwBIz\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-3UTSN7Q_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-0EPuBRtw\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-bxXqpHGf\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-DVohExfz\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-eDdhr4db\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlip5zkt\" id=\"prod-YN_w7WcD\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcg-yy3r\" id=\"prod-sVlKX7KO\">\n        <emu-t>break</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-wq9kNHey\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-zEFnXzdo\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-MxUCmZej\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-a3dtTxDp\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-mWAyGNz1\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-xKDcEL_e\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-WyF-LUeK\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-zsR5iLZH\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>labelSet</var> and &#171; <var>label</var> &#187;.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-Mu3VhVjD\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-Yr89pOXp\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-3_4iLynl\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-KaiFSIRm\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-_CFhQEhr\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-fN52Tgzf\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-gDhjMfCK\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-T8hjI_vu\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-SLqg0yKr\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-importentriesformodule": {"num": "16.2.2.3", "title": "#sec-static-semantics-importentriesformodule Static Semantics: ImportEntriesForModule", "html": "<emu-clause id=\"sec-static-semantics-importentriesformodule\" type=\"sdo\" aoid=\"ImportEntriesForModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-importentriesformodule\">#sec-static-semantics-importentriesformodule</span> Static Semantics: ImportEntriesForModule</h1>\n        <p>With parameter <var>module</var>.</p>\n        <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"y9r1l58g\" id=\"prod-ejkMSdRd\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> with argument <var>module</var>.</li><li>Let <var>entries2</var> be <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt> with argument <var>module</var>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>entries</var> and <var>entries2</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ih8rgsdx\" id=\"prod-0jSzNM4w\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> with argument <var>module</var>.</li><li>Let <var>entries2</var> be <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> with argument <var>module</var>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>entries</var> and <var>entries2</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportedDefaultBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-8iON-ECl\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>defaultEntry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"default\"</emu-val>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>defaultEntry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NameSpaceImport\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t2qf80pb\" id=\"prod-UUrB05kM\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedImports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-Cg-QzVAj\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ggcfvgot\" id=\"prod-nXrDLJR0\">\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>specs</var> be the <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> with argument <var>module</var>.</li><li>Let <var>specs2</var> be the <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> with argument <var>module</var>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>specs</var> and <var>specs2</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-EknrR_3b\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>localName</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>localName</var>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"onppcdhk\" id=\"prod-Qq5Ok86W\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>importName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>localName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-substitutionevaluation": {"num": "13.2.8.4", "title": "#sec-runtime-semantics-substitutionevaluation Runtime Semantics: SubstitutionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-substitutionevaluation\" type=\"sdo\" aoid=\"SubstitutionEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-substitutionevaluation\">#sec-runtime-semantics-substitutionevaluation</span> Runtime Semantics: SubstitutionEvaluation</h1>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v_5hijma\" id=\"prod-h8M7VnrX\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"slt0jvdm\" id=\"prod-0ukbbNyO\">\n        <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of <emu-xref aoid=\"SubstitutionEvaluation\"><a href=\"#sec-runtime-semantics-substitutionevaluation\">SubstitutionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3h7jyz9j\" id=\"prod-oOPfrahZ\">\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>subRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>sub</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>subRef</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>sub</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"r6zwqruv\" id=\"prod-Jm_C6N1j\">\n        <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>preceding</var> be ? <emu-xref aoid=\"SubstitutionEvaluation\"><a href=\"#sec-runtime-semantics-substitutionevaluation\">SubstitutionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>.</li><li>Let <var>nextRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>nextRef</var>).</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>preceding</var> and &#171; <var>next</var> &#187;.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-prototypepropertynamelist": {"num": "15.7.6", "title": "#sec-static-semantics-prototypepropertynamelist Static Semantics: PrototypePropertyNameList", "html": "<emu-clause id=\"sec-static-semantics-prototypepropertynamelist\" type=\"sdo\" aoid=\"PrototypePropertyNameList\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-prototypepropertynamelist\">#sec-static-semantics-prototypepropertynamelist</span> Static Semantics: PrototypePropertyNameList</h1>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"crvluhmw\" id=\"prod-A14zfyT4\"><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>empty</emu-const>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"msulavvt\" id=\"prod-yD4OjNLB\">\n        <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>list</var> be <emu-xref aoid=\"PrototypePropertyNameList\"><a href=\"#sec-static-semantics-prototypepropertynamelist\">PrototypePropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>.</li><li>If <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-const>empty</emu-const>, return <var>list</var>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return <var>list</var>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>list</var> and &#171; <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> &#187;.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-boundnames": {"num": "8.1.1", "title": "#sec-static-semantics-boundnames Static Semantics: BoundNames", "html": "<emu-clause id=\"sec-static-semantics-boundnames\" oldids=\"sec-identifiers-static-semantics-boundnames,sec-let-and-const-declarations-static-semantics-boundnames,sec-variable-statement-static-semantics-boundnames,sec-destructuring-binding-patterns-static-semantics-boundnames,sec-for-in-and-for-of-statements-static-semantics-boundnames,sec-function-definitions-static-semantics-boundnames,sec-arrow-function-definitions-static-semantics-boundnames,sec-generator-function-definitions-static-semantics-boundnames,sec-async-generator-function-definitions-static-semantics-boundnames,sec-class-definitions-static-semantics-boundnames,sec-async-function-definitions-static-semantics-BoundNames,sec-async-arrow-function-definitions-static-semantics-BoundNames,sec-imports-static-semantics-boundnames,sec-exports-static-semantics-boundnames\" type=\"sdo\" aoid=\"BoundNames\"><span id=\"sec-exports-static-semantics-boundnames\"></span><span id=\"sec-imports-static-semantics-boundnames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-BoundNames\"></span><span id=\"sec-async-function-definitions-static-semantics-BoundNames\"></span><span id=\"sec-class-definitions-static-semantics-boundnames\"></span><span id=\"sec-async-generator-function-definitions-static-semantics-boundnames\"></span><span id=\"sec-generator-function-definitions-static-semantics-boundnames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-boundnames\"></span><span id=\"sec-function-definitions-static-semantics-boundnames\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-boundnames\"></span><span id=\"sec-destructuring-binding-patterns-static-semantics-boundnames\"></span><span id=\"sec-variable-statement-static-semantics-boundnames\"></span><span id=\"sec-let-and-const-declarations-static-semantics-boundnames\"></span><span id=\"sec-identifiers-static-semantics-boundnames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-boundnames\">#sec-static-semantics-boundnames</span> Static Semantics: BoundNames</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-val>\"*default*\"</emu-val> is used within this specification as a synthetic name for hoistable anonymous functions that are defined using export declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\" id=\"prod-Yc3dQCIS\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0d8zyjn8\" id=\"prod-0oRvH9Oa\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-val>\"yield\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hx1dvlrw\" id=\"prod-eP6tRBFI\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-val>\"await\"</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LexicalDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"deqecbrp\" id=\"prod-WhUrx1KG\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dt40zeyt\" id=\"prod-pdmM8758\">\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5neqctp\" id=\"prod-SIbbs3t0\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd1t5ekf\" id=\"prod-WfIK7IbR\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oavweevb\" id=\"prod-PvG06doO\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5neqctp\" id=\"prod-TRoL9A8A\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd1t5ekf\" id=\"prod-uemJBnZk\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ObjectBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectBindingPattern\">ObjectBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-HmBRwRUL\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ObjectBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectBindingPattern\">ObjectBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ullzxsua\" id=\"prod-VrgiRc7B\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingRestProperty\">BindingRestProperty</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingRestProperty\">BindingRestProperty</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kg5ha7xc\" id=\"prod-e52_ta72\">\n        <emu-t>[</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dev8fspa\" id=\"prod-gapTHhxd\">\n        <emu-t>[</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jxqgfqnk\" id=\"prod-uQApgi98\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrayBindingPattern\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7lkdseap\" id=\"prod-UADb9W1C\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingRestElement\">BindingRestElement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bzdeo9zt\" id=\"prod-hRHC-ltw\">\n        <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hiwampap\" id=\"prod-HS4vlt-j\">\n        <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElementList\">BindingElementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElisionElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"wo9nasvo\" id=\"prod-C9gIgbxU\">\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mhvrwluk\" id=\"prod-MJIzQe4_\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SingleNameBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5neqctp\" id=\"prod-T0DsYQHz\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BindingElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ahx6lm0w\" id=\"prod-XX1yN-l7\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0y1vvm1x\" id=\"prod-Wj-eaJJJ\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-AAggAe5k\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"smus6qca\" id=\"prod-rmB8ZP2j\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-NuuiWZ7v\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uqeba6gz\" id=\"prod-po75ZBLy\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FormalParameterList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ijrjejbs\" id=\"prod-dSRi9b3k\">\n        <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameterList\">FormalParameterList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameter\">FormalParameter</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yrb110hm\" id=\"prod-B1jl1kwZ\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>formals</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>formals</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-t6vQVPUG\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dsczygsq\" id=\"prod-qJNJRowC\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-D36uGDV1\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xruu4gg0\" id=\"prod-Fiyc5-gj\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tusuwhcv\" id=\"prod-_x3zvham\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ghyizwr\" id=\"prod-0u78ulHy\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-G-h1FrC4\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"agdmcdye\" id=\"prod-NaC_U8xV\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vks-z6n3\" id=\"prod-kRyJKqmR\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>head</var> be the <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>head</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"glhuxxec\" id=\"prod-jZE2c8MZ\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"odcuzpbi\" id=\"prod-me1fjwho\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"y9r1l58g\" id=\"prod-gnkPkMbr\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ih8rgsdx\" id=\"prod-WTIt04mh\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"NamedImports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-2q0gunUG\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ggcfvgot\" id=\"prod-phtlO1Je\">\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ImportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"onppcdhk\" id=\"prod-QscPeL5E\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-OyREyUBO\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod-sOWb3AM5\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bg3oaw2m\" id=\"prod-wpPb0--4\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-yl8Kvf8S\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-oqm8ado6\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarationNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>If <var>declarationNames</var> does not include the element <emu-val>\"*default*\"</emu-val>, append <emu-val>\"*default*\"</emu-val> to <var>declarationNames</var>.</li><li>Return <var>declarationNames</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\" id=\"prod-pmSnaEkm\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarationNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>If <var>declarationNames</var> does not include the element <emu-val>\"*default*\"</emu-val>, append <emu-val>\"*default*\"</emu-val> to <var>declarationNames</var>.</li><li>Return <var>declarationNames</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\" id=\"prod-fy8WSBrE\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return &#171; <emu-val>\"*default*\"</emu-val> &#187;.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-templatestrings": {"num": "13.2.8.2", "title": "#sec-static-semantics-templatestrings Static Semantics: TemplateStrings", "html": "<emu-clause id=\"sec-static-semantics-templatestrings\" type=\"sdo\" aoid=\"TemplateStrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-templatestrings\">#sec-static-semantics-templatestrings</span> Static Semantics: TemplateStrings</h1>\n        <p>With parameter <var>raw</var>.</p>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e_otk8es\" id=\"prod-wUHw6ReH\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>string</var> be the TV of <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>string</var> be the TRV of <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>string</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vpxmqc6d\" id=\"prod-AfRnt93a\">\n        <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>head</var> be the TV of <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>head</var> be the TRV of <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>.</li></ol></li><li>Let <var>tail</var> be <emu-xref aoid=\"TemplateStrings\"><a href=\"#sec-static-semantics-templatestrings\">TemplateStrings</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> with argument <var>raw</var>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of &#171; <var>head</var> &#187; and <var>tail</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v_5hijma\" id=\"prod-SXp_0Muf\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>tail</var> be the TV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>tail</var> be the TRV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>tail</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateSpans\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"slt0jvdm\" id=\"prod-fValkc1v\">\n        <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>middle</var> be <emu-xref aoid=\"TemplateStrings\"><a href=\"#sec-static-semantics-templatestrings\">TemplateStrings</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> with argument <var>raw</var>.</li><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>tail</var> be the TV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>tail</var> be the TRV of <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt>.</li></ol></li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>middle</var> and &#171; <var>tail</var> &#187;.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3h7jyz9j\" id=\"prod-sExxMRoA\">\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>string</var> be the TV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>string</var> be the TRV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>string</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"r6zwqruv\" id=\"prod-oVK_xc-L\">\n        <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>front</var> be <emu-xref aoid=\"TemplateStrings\"><a href=\"#sec-static-semantics-templatestrings\">TemplateStrings</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a></emu-nt> with argument <var>raw</var>.</li><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>last</var> be the TV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>last</var> be the TRV of <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>front</var> and &#171; <var>last</var> &#187;.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> production in <emu-xref href=\"#sec-for-in-and-for-of-statements\"><a href=\"#sec-for-in-and-for-of-statements\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"ForInOfStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-ForInOfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ouav8kzt\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsduplicatelabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"IsDestructuring\"><a href=\"#sec-static-semantics-isdestructuring\">IsDestructuring</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-isdestructuring\"><a href=\"#sec-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-isdestructuring\">#sec-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-vardeclarednames\"><a href=\"#sec-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-varscopeddeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>declarations2</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"ForInOfLoopEvaluation\"><a href=\"#sec-runtime-semantics-forinofloopevaluation\">ForInOfLoopEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-forinofloopevaluation\"><a href=\"#sec-runtime-semantics-forinofloopevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-forinofloopevaluation\">#sec-runtime-semantics-forinofloopevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-static-semantics-toplevelvarscopeddeclarations": {"num": "8.1.11", "title": "#sec-static-semantics-toplevelvarscopeddeclarations Static Semantics: TopLevelVarScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-toplevelvarscopeddeclarations\" oldids=\"sec-block-static-semantics-toplevelvarscopeddeclarations,sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\" type=\"sdo\" aoid=\"TopLevelVarScopedDeclarations\"><span id=\"sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\"></span><span id=\"sec-block-static-semantics-toplevelvarscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevelvarscopeddeclarations\">#sec-static-semantics-toplevelvarscopeddeclarations</span> Static Semantics: TopLevelVarScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-ELUpDRIL\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-MxUpZ-t-\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-wmlLZdyg\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-OvMm0IpZ\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Let <var>declaration</var> be <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>Return &#171; <var>declaration</var> &#187;.</li></ol></li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-sPvwm3DB\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-h55yOiCC\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-aZ77pE36\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-list-and-record-specification-type": {"num": "6.2.1", "title": "#sec-list-and-record-specification-type The List and Record Specification Types", "html": "<emu-clause id=\"sec-list-and-record-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-list-and-record-specification-type\">#sec-list-and-record-specification-type</span> The List and Record Specification Types</h1>\n      <p>The <dfn>List</dfn> type is used to explain the evaluation of argument lists (see <emu-xref href=\"#sec-argument-lists\"><a href=\"#sec-argument-lists\" class=\"excluded-xref\" excluded-id=\"sec-argument-lists\">#sec-argument-lists</a></emu-xref>) in <code>new</code> expressions, in function calls, and in other algorithms where a simple ordered list of values is needed. Values of the List type are simply ordered sequences of list elements containing the individual values. These sequences may be of any length. The elements of a list may be randomly accessed using 0-origin indices. For notational convenience an array-like syntax can be used to access List elements. For example, <var>arguments</var>[2] is shorthand for saying the 3<sup>rd</sup> element of the List <var>arguments</var>.</p>\n      <p>When an algorithm iterates over the elements of a List without specifying an order, the order used is the order of the elements in the List.</p>\n      <p>For notational convenience within this specification, a literal syntax can be used to express a new List value. For example, &#171; 1, 2 &#187; defines a List value that has two elements each of which is initialized to a specific value. A new empty List can be expressed as &#171; &#187;.</p>\n      <p>In this specification, the phrase \"the <dfn id=\"list-concatenation\">list-concatenation</dfn> of <var>A</var>, <var>B</var>, ...\" (where each argument is a possibly empty List) denotes a new List value whose elements are the concatenation of the elements (in order) of each of the arguments (in order).</p>\n      <p>The <dfn>Record</dfn> type is used to describe data aggregations within the algorithms of this specification. A Record type value consists of one or more named fields. The value of each field is either an ECMAScript value or an abstract value represented by a name associated with the Record type. Field names are always enclosed in double brackets, for example [[Value]].</p>\n      <p>For notational convenience within this specification, an object literal-like syntax can be used to express a Record value. For example, { [[Field1]]: 42, [[Field2]]: <emu-val>false</emu-val>, [[Field3]]: <emu-const>empty</emu-const> } defines a Record value that has three fields, each of which is initialized to a specific value. Field name order is not significant. Any fields that are not explicitly listed are considered to be absent.</p>\n      <p>In specification text and algorithms, dot notation may be used to refer to a specific field of a Record value. For example, if R is the record shown in the previous paragraph then R.[[Field2]] is shorthand for &#8220;the field of R named [[Field2]]&#8221;.</p>\n      <p>Schema for commonly used Record field combinations may be named, and that name may be used as a prefix to a literal Record value to identify the specific kind of aggregations that is being described. For example: PropertyDescriptor { [[Value]]: 42, [[Writable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-propertydestructuringassignmentevaluation": {"num": "13.15.5.3", "title": "#sec-runtime-semantics-propertydestructuringassignmentevaluation Runtime Semantics: PropertyDestructuringAssignmentEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\" type=\"sdo\" aoid=\"PropertyDestructuringAssignmentEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydestructuringassignmentevaluation\">#sec-runtime-semantics-propertydestructuringassignmentevaluation</span> Runtime Semantics: PropertyDestructuringAssignmentEvaluation</h1>\n        <p>With parameter <var>value</var>.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The following operations collect a list of all destructured property names.</div></emu-note>\n\n        <emu-grammar><emu-production name=\"AssignmentPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w2gewbq6\" id=\"prod-ysaEPEoc\">\n        <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propertyNames</var> be ? <emu-xref aoid=\"PropertyDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-propertydestructuringassignmentevaluation\">PropertyDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a></emu-nt> with argument <var>value</var>.</li><li>Let <var>nextNames</var> be ? <emu-xref aoid=\"PropertyDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-propertydestructuringassignmentevaluation\">PropertyDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> with argument <var>value</var>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>propertyNames</var> and <var>nextNames</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xv93cfyb\" id=\"prod-yhW4Xo3o\">\n        <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>P</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>lref</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>P</var>).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <var>P</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Set <var>v</var> to the result of performing <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>P</var>.</li></ol></li><li>Else,<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Set <var>v</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>P</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"AssignmentProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"yayigkhd\" id=\"prod-P2UQDIgF\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>name</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>name</var>).</li><li>Perform ? <emu-xref aoid=\"KeyedDestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-keyeddestructuringassignmentevaluation\">KeyedDestructuringAssignmentEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentElement\">AssignmentElement</a></emu-nt> with <var>value</var> and <var>name</var> as the arguments.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>name</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-module-namespace-exotic-objects-ownpropertykeys": {"num": "10.4.6.10", "title": "#sec-module-namespace-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-ownpropertykeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-ownpropertykeys\">#sec-module-namespace-exotic-objects-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n        <p>The [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref> <var>O</var> takes no arguments. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>Let <var>symbolKeys</var> be !&#160;<emu-xref aoid=\"OrdinaryOwnPropertyKeys\"><a href=\"#sec-ordinaryownpropertykeys\">OrdinaryOwnPropertyKeys</a></emu-xref>(<var>O</var>).</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>exports</var> and <var>symbolKeys</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-variablestatements-in-catch-blocks": {"num": "B.3.5", "title": "#sec-variablestatements-in-catch-blocks VariableStatements in Catch Blocks", "html": "<emu-annex id=\"sec-variablestatements-in-catch-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</span> VariableStatements in Catch Blocks</h1>\n      <p>The content of subclause <emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref> is replaced with the following:</p>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains any duplicate elements.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> unless <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> is <emu-grammar><emu-production name=\"CatchParameter\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause may contain <code>var</code> declarations that bind a name that is also bound by the <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>. At runtime, such bindings are instantiated in the VariableDeclarationEnvironment. They do not shadow the same-named bindings introduced by the <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> and hence the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> for such <code>var</code> declarations will assign to the corresponding catch parameter rather than the <code>var</code> binding.</p>\n      </div></emu-note>\n      <p>This modified behaviour also applies to <code>var</code> and <code>function</code> declarations introduced by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls contained within the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause. This change is accomplished by modifying the algorithm of <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref> as follows:</p>\n      <p>Step <emu-xref href=\"#step-evaldeclarationinstantiation-throw-duplicate-binding\"><a href=\"#step-evaldeclarationinstantiation-throw-duplicate-binding\">3.d.i.2.a.i</a></emu-xref> is replaced by:</p>\n      <emu-alg replaces-step=\"step-evaldeclarationinstantiation-throw-duplicate-binding\"><ol start=\"1\" class=\"nested-lots\"><li>If <var>thisEnv</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></emu-alg>\n      <p>Step <emu-xref href=\"#step-evaldeclarationinstantiation-web-compat-bindingexists\"><a href=\"#step-evaldeclarationinstantiation-web-compat-bindingexists\">11.b.ii.4.a.i.i</a></emu-xref> is replaced by:</p>\n      <emu-alg replaces-step=\"step-evaldeclarationinstantiation-web-compat-bindingexists\"><ol start=\"1\" class=\"nested-lots\"><li>If <var>thisEnv</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause, let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-static-semantics-vardeclarednames": {"num": "8.1.6", "title": "#sec-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-vardeclarednames\" oldids=\"sec-statement-semantics-static-semantics-vardeclarednames,sec-block-static-semantics-vardeclarednames,sec-variable-statement-static-semantics-vardeclarednames,sec-if-statement-static-semantics-vardeclarednames,sec-do-while-statement-static-semantics-vardeclarednames,sec-while-statement-static-semantics-vardeclarednames,sec-for-statement-static-semantics-vardeclarednames,sec-for-in-and-for-of-statements-static-semantics-vardeclarednames,sec-with-statement-static-semantics-vardeclarednames,sec-switch-statement-static-semantics-vardeclarednames,sec-labelled-statements-static-semantics-vardeclarednames,sec-try-statement-static-semantics-vardeclarednames,sec-function-definitions-static-semantics-vardeclarednames,sec-arrow-function-definitions-static-semantics-vardeclarednames,sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames,sec-scripts-static-semantics-vardeclarednames,sec-module-semantics-static-semantics-vardeclarednames\" type=\"sdo\" aoid=\"VarDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-vardeclarednames\"></span><span id=\"sec-scripts-static-semantics-vardeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-try-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-with-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-for-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-do-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-if-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-variable-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-block-static-semantics-vardeclarednames\"></span><span id=\"sec-statement-semantics-static-semantics-vardeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</span> Static Semantics: VarDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-TvRo0Jzz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-x3WiVh1X\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-cXTIOEn1\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-PhLm_cqX\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-bMjWoX52\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-OPyZZ0FU\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-6wmxzhRC\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-4f3fXSme\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ikslLJyV\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-mb72lTih\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"m0ehvb8m\" id=\"prod-_o07UyGN\">\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-5Ab4YMrd\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-Jj9iNkQT\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-MQNHAeo7\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-6MiGg7LY\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-22bMsY8a\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-iNfrCk_F\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-N2GkbzwH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-polenv5I\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-cQmWs6F4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-6rXrz7RR\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-LH0otfP0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-UE8msfiB\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-Xl42xW5D\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-eiN5tOgj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-dkeW5WMH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-dXd3oD1j\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-kf6BzwpI\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-lB_U5kUv\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-DTgBd2wQ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-e2BPI-N_\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names3</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var>, <var>names2</var>, and <var>names3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-_zisH9m7\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-Gdv5Uzyo\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ocDhl-eB\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-xypmC2Rc\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-TKnUh23n\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-K6wLfAiN\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-naQihl7z\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-F1kslF5t\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Let <var>names3</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var>, <var>names2</var>, and <var>names3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-1jr14zqX\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-ic6_wi6x\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-Fovz-BpD\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-kKbHUs1e\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-IDrLWHWU\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-_GPKA3Cb\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-YneO94W1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-WMKjW5iz\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-lGybrnks\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-5uRXjJj7\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-web-compat-evaldeclarationinstantiation": {"num": "B.3.3.3", "title": "#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-evaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</span> Changes to EvalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-evaldeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-evaldeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-evaldeclarationinstantiation-web-compat-insertion-point\">#step-evaldeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-evaldeclarationinstantiation-web-compat-insertion-point\"><ol start=\"11\"><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declaredFunctionNames</var> and <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>body</var>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>body</var>, then<ol><li>Let <var>bindingExists</var> be <emu-val>false</emu-val>.</li><li>Let <var>thisEnv</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisEnv</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisEnv</var> is not an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then<ol><li>If <var>thisEnv</var>.HasBinding(<var>F</var>) is <emu-val>true</emu-val>, then<ol><li id=\"step-evaldeclarationinstantiation-web-compat-bindingexists\">Let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Set <var>thisEnv</var> to <var>thisEnv</var>.[[OuterEnv]].</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>F</var>).</li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>true</emu-val>.</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>F</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>F</var>, <emu-val>true</emu-val>).</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-static-semantics-toplevelvardeclarednames": {"num": "8.1.10", "title": "#sec-static-semantics-toplevelvardeclarednames Static Semantics: TopLevelVarDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-toplevelvardeclarednames\" oldids=\"sec-block-static-semantics-toplevelvardeclarednames,sec-labelled-statements-static-semantics-toplevelvardeclarednames\" type=\"sdo\" aoid=\"TopLevelVarDeclaredNames\"><span id=\"sec-labelled-statements-static-semantics-toplevelvardeclarednames\"></span><span id=\"sec-block-static-semantics-toplevelvardeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevelvardeclarednames\">#sec-static-semantics-toplevelvardeclarednames</span> Static Semantics: TopLevelVarDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-ie-RAx6L\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-_Kx3fMtB\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-l-2kGEcB\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-CxIyq9Kn\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>At the top level of a function or script, inner function declarations are treated like var declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-gviukyGv\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-jtk1iKc9\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-5RFYGz0t\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-privateboundidentifiers": {"num": "15.7.8", "title": "#sec-static-semantics-privateboundidentifiers Static Semantics: PrivateBoundIdentifiers", "html": "<emu-clause id=\"sec-static-semantics-privateboundidentifiers\" type=\"sdo\" aoid=\"PrivateBoundIdentifiers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-privateboundidentifiers\">#sec-static-semantics-privateboundidentifiers</span> Static Semantics: PrivateBoundIdentifiers</h1>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-QQ9gR7rA\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\" id=\"prod-3FDawUhc\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bmyo-0oj\" id=\"prod-sMaEe0uD\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\" id=\"prod-dExs5jCW\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"msulavvt\" id=\"prod-PTQtTdvS\">\n        <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-pxy6kYq7\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"s7vk7pda\" id=\"prod-axmlrr3F\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"lbu40xzc\" id=\"prod-9-TzGQnW\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorMethod\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-Qvq1cmEs\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-zTa8Ph70\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorMethod\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-1nK7U43p\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-exportentriesformodule": {"num": "16.2.3.5", "title": "#sec-static-semantics-exportentriesformodule Static Semantics: ExportEntriesForModule", "html": "<emu-clause id=\"sec-static-semantics-exportentriesformodule\" type=\"sdo\" aoid=\"ExportEntriesForModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-exportentriesformodule\">#sec-static-semantics-exportentriesformodule</span> Static Semantics: ExportEntriesForModule</h1>\n        <p>With parameter <var>module</var>.</p>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sb5ztei-\" id=\"prod-Xa_xAKMV\"><emu-t>*</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <emu-val>null</emu-val> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dtcd7req\" id=\"prod-eEU1GKNj\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exportName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <emu-val>\"*\"</emu-val>, [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>exportName</var> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-mzZ83dVi\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gqfndot_\" id=\"prod-zadzACBk\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>specs</var> be the <emu-xref aoid=\"ExportEntriesForModule\"><a href=\"#sec-static-semantics-exportentriesformodule\">ExportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> with argument <var>module</var>.</li><li>Let <var>specs2</var> be the <emu-xref aoid=\"ExportEntriesForModule\"><a href=\"#sec-static-semantics-exportentriesformodule\">ExportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> with argument <var>module</var>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>specs</var> and <var>specs2</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-sRdxtKYQ\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>sourceName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If <var>module</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>localName</var> be <var>sourceName</var>.</li><li>Let <var>importName</var> be <emu-val>null</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>localName</var> be <emu-val>null</emu-val>.</li><li>Let <var>importName</var> be <var>sourceName</var>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <var>sourceName</var> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvusrr4h\" id=\"prod-kMIeNwJo\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>sourceName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>exportName</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the second <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If <var>module</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>localName</var> be <var>sourceName</var>.</li><li>Let <var>importName</var> be <emu-val>null</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>localName</var> be <emu-val>null</emu-val>.</li><li>Let <var>importName</var> be <var>sourceName</var>.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>module</var>, [[ImportName]]: <var>importName</var>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <var>exportName</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-varscopeddeclarations": {"num": "8.1.7", "title": "#sec-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-varscopeddeclarations\" oldids=\"sec-statement-semantics-static-semantics-varscopeddeclarations,sec-block-static-semantics-varscopeddeclarations,sec-variable-statement-static-semantics-varscopeddeclarations,sec-if-statement-static-semantics-varscopeddeclarations,sec-do-while-statement-static-semantics-varscopeddeclarations,sec-while-statement-static-semantics-varscopeddeclarations,sec-for-statement-static-semantics-varscopeddeclarations,sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations,sec-with-statement-static-semantics-varscopeddeclarations,sec-switch-statement-static-semantics-varscopeddeclarations,sec-labelled-statements-static-semantics-varscopeddeclarations,sec-try-statement-static-semantics-varscopeddeclarations,sec-function-definitions-static-semantics-varscopeddeclarations,sec-arrow-function-definitions-static-semantics-varscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations,sec-scripts-static-semantics-varscopeddeclarations,sec-module-semantics-static-semantics-varscopeddeclarations\" type=\"sdo\" aoid=\"VarScopedDeclarations\"><span id=\"sec-module-semantics-static-semantics-varscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-varscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-try-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-with-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-do-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-if-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-variable-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-block-static-semantics-varscopeddeclarations\"></span><span id=\"sec-statement-semantics-static-semantics-varscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</span> Static Semantics: VarScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-CXBIcQtz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-4cf8z78V\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-UIiAeivR\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-R2NCFAfM\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-8C3zNXp6\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-QgvbQ6qN\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-nkERSk1r\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--ycd0kFi\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-r8z3UV58\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-zHpAsUUQ\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n3piepmh\" id=\"prod-r4VwMPwM\"><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oavweevb\" id=\"prod-HsuXutdb\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and &#171; <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-B7KHfByo\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-yyIeKAQ3\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-QkEPe1CC\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-jrq4eHFJ\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-5lKKTAkN\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-13ohOiCm\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-eqKiNSk1\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-KgxDtGf4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-AWnFzjE8\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-5TY9-yea\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-t9Ps-Sf3\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-IEEeV8La\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-WOgH08rb\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-SyVO6l8T\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-o2HaUKnD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-kZcYMT8d\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-otI6GMSS\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-FjNXiCI7\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-BX82yRxg\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-aW8QiumN\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations3</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var>, <var>declarations2</var>, and <var>declarations3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-nuKGUlOU\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-mzP2If-y\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ZPHZRUV6\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-i-A4iWeY\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-ntkJlgei\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-RhYCwWQZ\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-0GInHInm\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-pi8GJ951\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Let <var>declarations3</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var>, <var>declarations2</var>, and <var>declarations3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-H8Sf_rsN\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-vvqmH-2l\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-x8eD4P1T\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-UWG_9qGM\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-VllrABp8\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-MCeJZE_U\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-g_wYfia1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-oVpqQZka\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-TBDbISuB\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-f75VYPkN\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-functiondeclarationinstantiation": {"num": "10.2.11", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>The abstract operation FunctionDeclarationInstantiation takes arguments <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be <emu-xref aoid=\"ContainsExpression\"><a href=\"#sec-static-semantics-containsexpression\">ContainsExpression</a></emu-xref> of <var>formals</var>.</li><li>Let <var>varNames</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <emu-val>\"arguments\"</emu-val> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <emu-val>\"arguments\"</emu-val> is an element of <var>functionNames</var> or if <emu-val>\"arguments\"</emu-val> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that bindings created by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls in the formal parameter list are outside the environment where parameters are declared.</li><li>Let <var>calleeEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>calleeEnv</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The VariableEnvironment of <var>calleeContext</var> is <var>calleeEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>env</var>.</li></ol></li><li>For each String <var>paramName</var> of <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>env</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>env</var>.InitializeBinding(<emu-val>\"arguments\"</emu-val>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>parameterNames</var> and &#171; <emu-val>\"arguments\"</emu-val> &#187;.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>env</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>env</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnv</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li id=\"step-functiondeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>Let <var>privateEnv</var> be the PrivateEnvironment of <var>calleeContext</var>.</li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>f</var>.</li><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>f</var> with arguments <var>lexEnv</var> and <var>privateEnv</var>.</li><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in <emu-xref href=\"#sec-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-iteratorbindinginitialization\">#sec-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-web-compat-globaldeclarationinstantiation": {"num": "B.3.3.2", "title": "#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-globaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</span> Changes to GlobalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">#step-globaldeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-globaldeclarationinstantiation-web-compat-insertion-point\"><ol start=\"13\"><li>Let <var>strict</var> be <emu-xref aoid=\"IsStrict\"><a href=\"#sec-static-semantics-isstrict\">IsStrict</a></emu-xref> of <var>script</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declaredFunctionNames</var> and <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>script</var>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>script</var>, then<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>F</var>).</li><li>If <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName nor the name of another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-static-semantics-containsduplicatelabels": {"num": "8.2.1", "title": "#sec-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-static-semantics-containsduplicatelabels\" oldids=\"sec-statement-semantics-static-semantics-containsduplicatelabels,sec-block-static-semantics-containsduplicatelabels,sec-if-statement-static-semantics-containsduplicatelabels,sec-do-while-statement-static-semantics-containsduplicatelabels,sec-while-statement-static-semantics-containsduplicatelabels,sec-for-statement-static-semantics-containsduplicatelabels,sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels,sec-with-statement-static-semantics-containsduplicatelabels,sec-switch-statement-static-semantics-containsduplicatelabels,sec-labelled-statements-static-semantics-containsduplicatelabels,sec-try-statement-static-semantics-containsduplicatelabels,sec-function-definitions-static-semantics-containsduplicatelabels,sec-module-semantics-static-semantics-containsduplicatelabels\" type=\"sdo\" aoid=\"ContainsDuplicateLabels\"><span id=\"sec-module-semantics-static-semantics-containsduplicatelabels\"></span><span id=\"sec-function-definitions-static-semantics-containsduplicatelabels\"></span><span id=\"sec-try-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-labelled-statements-static-semantics-containsduplicatelabels\"></span><span id=\"sec-switch-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-with-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"></span><span id=\"sec-for-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-while-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-do-while-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-if-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-block-static-semantics-containsduplicatelabels\"></span><span id=\"sec-statement-semantics-static-semantics-containsduplicatelabels\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-5segouA8\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-X3W5RktU\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-tPl3NUyn\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-5amcoTln\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-SRoeq51F\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-sjee5Pog\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-iv3GJbNA\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-VdiHdMbL\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-SpvJf5dZ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-OH037R2P\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-IG220ePF\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-iIi7e4Mv\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicate</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicate</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-M7d89bkQ\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-CSwsyonC\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-UWs53aWN\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-GgLrXaaO\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-di1-cm7_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-zOnkGPoB\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-rNKuYq6q\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-jKYdRg__\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-zBPUdTbl\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-zoCqTANq\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-zqf8dZti\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-dRwtb2-L\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-kCZrLuMF\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-1mQl-EgZ\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-SKvXy5l6\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-92qu0ILT\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-OMSfPp_0\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-8Uz0YNaN\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-UcaBQzki\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-yJHneCFO\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-YbPvJc_D\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-__iQJPEb\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-UiQoMdIo\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>If <var>label</var> is an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Let <var>newLabelSet</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>labelSet</var> and &#171; <var>label</var> &#187;.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-j-zK1vJK\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-iFqlj7Lz\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-DkNjzLGB\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-Aa8IOm4z\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-K0PcnMLw\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-cn79vCHf\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-FlDPQVjo\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-hjcOowKc\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-OcbYq9se\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-toplevellexicallydeclarednames": {"num": "8.1.8", "title": "#sec-static-semantics-toplevellexicallydeclarednames Static Semantics: TopLevelLexicallyDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-toplevellexicallydeclarednames\" oldids=\"sec-block-static-semantics-toplevellexicallydeclarednames,sec-labelled-statements-static-semantics-toplevellexicallydeclarednames\" type=\"sdo\" aoid=\"TopLevelLexicallyDeclaredNames\"><span id=\"sec-labelled-statements-static-semantics-toplevellexicallydeclarednames\"></span><span id=\"sec-block-static-semantics-toplevellexicallydeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevellexicallydeclarednames\">#sec-static-semantics-toplevellexicallydeclarednames</span> Static Semantics: TopLevelLexicallyDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-s6Vb3QUL\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-DWksqgz-\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-ReRATT6e\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return &#171; &#187;.</li></ol></li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>At the top level of a function, or script, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-vPjzf01U\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-lexicallydeclarednames": {"num": "8.1.4", "title": "#sec-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-lexicallydeclarednames\" oldids=\"sec-block-static-semantics-lexicallydeclarednames,sec-switch-statement-static-semantics-lexicallydeclarednames,sec-labelled-statements-static-semantics-lexicallydeclarednames,sec-function-definitions-static-semantics-lexicallydeclarednames,sec-arrow-function-definitions-static-semantics-lexicallydeclarednames,sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames,sec-scripts-static-semantics-lexicallydeclarednames,sec-module-semantics-static-semantics-lexicallydeclarednames\" type=\"sdo\" aoid=\"LexicallyDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-scripts-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-block-static-semantics-lexicallydeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallydeclarednames\">#sec-static-semantics-lexicallydeclarednames</span> Static Semantics: LexicallyDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-mPEvRR9d\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ZFtxhsq0\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-Rrf-OST4\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-9AEMspNg\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--_BgAjEq\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-mSnfTK7z\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names3</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var>, <var>names2</var>, and <var>names3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-7Gkp_Ikd\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-LyDmmUT5\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-JWPhP_ev\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-BptUBlCG\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-FwgSl19M\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-_jhHTL9Z\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-8YrmfaA1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-yRWpcHmG\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-2xZloP4O\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-tdMR5_9c\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-m6bh3GpA\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The LexicallyDeclaredNames of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> includes the names of all of its imported bindings.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-t-OtLQL7\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-vXiSx9wh\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-v-PqD2SJ\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"15hryu6r\" id=\"prod-XYalkd2A\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, function declarations are treated like lexical declarations rather than like var declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-static-semantics-lexicallyscopeddeclarations": {"num": "8.1.5", "title": "#sec-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-lexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-lexicallyscopeddeclarations,sec-switch-statement-static-semantics-lexicallyscopeddeclarations,sec-labelled-statements-static-semantics-lexicallyscopeddeclarations,sec-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations,sec-scripts-static-semantics-lexicallyscopeddeclarations,sec-module-semantics-static-semantics-lexicallyscopeddeclarations,sec-exports-static-semantics-lexicallyscopeddeclarations\" type=\"sdo\" aoid=\"LexicallyScopedDeclarations\"><span id=\"sec-exports-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-module-semantics-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-block-static-semantics-lexicallyscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallyscopeddeclarations\">#sec-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-dqBS0eQw\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-MlufDCPG\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-IYBZJ2CF\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-bhogjJ1W\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-am_Z4H66\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations3</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var>, <var>declarations2</var>, and <var>declarations3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-LxvbRJKF\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-tORmzQQv\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-84xBBiJA\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-V7zVpmtw\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-3Vc5meav\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-nL_6JlM9\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-gtaAB-x7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-aKFk9Ijn\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-4B0l6Nwq\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-0qrVz5hX\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-1WkoNRM_\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-eWnfpwM7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-rZF3AogZ\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-zqmuSkfM\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-IxEr0QE9\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod-DEMJzdJ7\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"bg3oaw2m\" id=\"prod-cMreMYU5\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-xsgJyOoQ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-cRTDqnfl\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\" id=\"prod-4yMGuqEs\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\" id=\"prod-XTfiw-G1\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-exportentries": {"num": "16.2.3.4", "title": "#sec-static-semantics-exportentries Static Semantics: ExportEntries", "html": "<emu-clause id=\"sec-static-semantics-exportentries\" oldids=\"sec-module-semantics-static-semantics-exportentries,sec-exports-static-semantics-exportentries\" type=\"sdo\" aoid=\"ExportEntries\"><span id=\"sec-exports-static-semantics-exportentries\"></span><span id=\"sec-module-semantics-static-semantics-exportentries\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-exportentries\">#sec-static-semantics-exportentries</span> Static Semantics: ExportEntries</h1>\n        <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-VtH9KIhP\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-paVpIqc4\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be <emu-xref aoid=\"ExportEntries\"><a href=\"#sec-static-semantics-exportentries\">ExportEntries</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>entries2</var> be <emu-xref aoid=\"ExportEntries\"><a href=\"#sec-static-semantics-exportentries\">ExportEntries</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>entries</var> and <var>entries2</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-lSM0kaNt\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"15hryu6r\" id=\"prod-TW56DY7O\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-Pw78KQtD\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be the sole element of <emu-xref aoid=\"ModuleRequests\"><a href=\"#sec-static-semantics-modulerequests\">ModuleRequests</a></emu-xref> of <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>.</li><li>Return <emu-xref aoid=\"ExportEntriesForModule\"><a href=\"#sec-static-semantics-exportentriesformodule\">ExportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> with argument <var>module</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"j2lh_kda\" id=\"prod-VQKcYkbx\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"ExportEntriesForModule\"><a href=\"#sec-static-semantics-exportentriesformodule\">ExportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> with argument <emu-val>null</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bg3oaw2m\" id=\"prod-vHJuGFG0\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>For each element <var>name</var> of <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-7BCAocpR\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li><li>For each element <var>name</var> of <var>names</var>, do<ol><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>name</var>, [[ExportName]]: <var>name</var> } to <var>entries</var>.</li></ol></li><li>Return <var>entries</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-rg_YnEcS\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\" id=\"prod-A54_tyTm\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>localName</var> be the sole element of <var>names</var>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <var>localName</var>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\" id=\"prod-04PQQ9j2\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entry</var> be the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <emu-val>null</emu-val>, [[ImportName]]: <emu-val>null</emu-val>, [[LocalName]]: <emu-val>\"*default*\"</emu-val>, [[ExportName]]: <emu-val>\"default\"</emu-val> }.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>entry</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-val>\"*default*\"</emu-val> is used within this specification as a synthetic name for anonymous default export values.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-static-semantics-containsundefinedcontinuetarget": {"num": "8.2.3", "title": "#sec-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-static-semantics-containsundefinedcontinuetarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget,sec-block-static-semantics-containsundefinedcontinuetarget,sec-if-statement-static-semantics-containsundefinedcontinuetarget,sec-do-while-statement-static-semantics-containsundefinedcontinuetarget,sec-while-statement-static-semantics-containsundefinedcontinuetarget,sec-for-statement-static-semantics-containsundefinedcontinuetarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget,sec-continue-statement-static-semantics-containsundefinedcontinuetarget,sec-with-statement-static-semantics-containsundefinedcontinuetarget,sec-switch-statement-static-semantics-containsundefinedcontinuetarget,sec-labelled-statements-static-semantics-containsundefinedcontinuetarget,sec-try-statement-static-semantics-containsundefinedcontinuetarget,sec-function-definitions-static-semantics-containsundefinedcontinuetarget,sec-module-semantics-static-semantics-containsundefinedcontinuetarget\" type=\"sdo\" aoid=\"ContainsUndefinedContinueTarget\"><span id=\"sec-module-semantics-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-function-definitions-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-try-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-labelled-statements-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-switch-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-with-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-continue-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-for-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-while-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-do-while-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-if-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-block-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iwwn8atx\" id=\"prod-HhlDWDz1\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-NBGwhRuE\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-E6M7T9Em\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-V2tQVOUI\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-jJUZqLJS\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-BNxhQmvf\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-B3-Yz0aF\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-eptReca1\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-QrxFmsVC\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kmxl4yum\" id=\"prod-PptGj0zd\"><emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>newIterationSet</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>iterationSet</var> and <var>labelSet</var>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> with arguments <var>newIterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-Vrq9L4TL\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-MYTRO2yV\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-idT2m0fR\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-1k-PvIQ6\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-nqE7jDen\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-sdOZ0OVe\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sodmtko8\" id=\"prod-38R1spHk\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"k8b-ryxj\" id=\"prod-GQ9tF3ug\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-ilROtw6r\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7pgjrcn-\" id=\"prod-RXKTOvxD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-mKAcS051\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-MPaED8xy\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-SLsBgk8L\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-G_08fu0g\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-xuMzWdW7\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-xVs7Y4Vv\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-Ii0_W2zX\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6qppgxyk\" id=\"prod-P3ParQAP\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"wh7qddgu\" id=\"prod-ngwxJt1P\">\n        <emu-t>continue</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>iterationSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-qti0YV4g\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-yGASkGus\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-wESl6-va\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-L1SF9WLb\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-Mf-FlzJR\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-YLBmIA_U\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ycWJ_ozd\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-8au0KFQe\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>labelSet</var> and &#171; <var>label</var> &#187;.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with arguments <var>iterationSet</var> and <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-I9dzHyBf\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-bHqvfllk\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-MPDlN7RI\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-fYVcY74b\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187; is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-WfIkG4rU\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-zb1__ND8\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-9GocAvXy\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-GeitVMt4\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-JQIpAjs-\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-referencedbindings": {"num": "16.2.3.6", "title": "#sec-static-semantics-referencedbindings Static Semantics: ReferencedBindings", "html": "<emu-clause id=\"sec-static-semantics-referencedbindings\" type=\"sdo\" aoid=\"ReferencedBindings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-referencedbindings\">#sec-static-semantics-referencedbindings</span> Static Semantics: ReferencedBindings</h1>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-SuOfrU8K\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gqfndot_\" id=\"prod-eGw90zQ9\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"ReferencedBindings\"><a href=\"#sec-static-semantics-referencedbindings\">ReferencedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"ReferencedBindings\"><a href=\"#sec-static-semantics-referencedbindings\">ReferencedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-T6LrnWgA\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvusrr4h\" id=\"prod-iOxB68Nd\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-argumentlistevaluation": {"num": "13.3.8.1", "title": "#sec-runtime-semantics-argumentlistevaluation Runtime Semantics: ArgumentListEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-argumentlistevaluation\" oldids=\"sec-template-literals-runtime-semantics-argumentlistevaluation,sec-argument-lists-runtime-semantics-argumentlistevaluation\" type=\"sdo\" aoid=\"ArgumentListEvaluation\"><span id=\"sec-argument-lists-runtime-semantics-argumentlistevaluation\"></span><span id=\"sec-template-literals-runtime-semantics-argumentlistevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-argumentlistevaluation\">#sec-runtime-semantics-argumentlistevaluation</span> Runtime Semantics: ArgumentListEvaluation</h1>\n        <emu-grammar><emu-production name=\"Arguments\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eormm5tk\" id=\"prod-qXYYcvIK\">\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1px9pijq\" id=\"prod-6LIBrAp-\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>arg</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w7ifpmpd\" id=\"prod-9NFeGQ82\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>list</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>list</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>list</var>.</li></ol></li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f_i_7oqe\" id=\"prod-avUGM8aa\">\n        <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>precedingArgs</var> and &#171; <var>arg</var> &#187;.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArgumentList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4rq-va3\" id=\"prod-Au9Wi9yT\">\n        <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>precedingArgs</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ArgumentList\">ArgumentList</a></emu-nt>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>)).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>precedingArgs</var>.</li><li>Let <var>nextArg</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>precedingArgs</var>.</li></ol></li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e_otk8es\" id=\"prod-EUsfaoKE\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>siteObj</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"haut9ebi\" id=\"prod-_obYKRXG\"><emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid=\"GetTemplateObject\"><a href=\"#sec-gettemplateobject\">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Let <var>remaining</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of &#171; <var>siteObj</var> &#187; and <var>remaining</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vpxmqc6d\" id=\"prod-RX4K7HKv\">\n        <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>firstSubRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>firstSub</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>firstSubRef</var>).</li><li>Let <var>restSub</var> be ? <emu-xref aoid=\"SubstitutionEvaluation\"><a href=\"#sec-runtime-semantics-substitutionevaluation\">SubstitutionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-TemplateSpans\">TemplateSpans</a></emu-nt>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>restSub</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of &#171; <var>firstSub</var> &#187; and <var>restSub</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-static-semantics-exportedbindings": {"num": "16.2.3.2", "title": "#sec-static-semantics-exportedbindings Static Semantics: ExportedBindings", "html": "<emu-clause id=\"sec-static-semantics-exportedbindings\" oldids=\"sec-module-semantics-static-semantics-exportedbindings,sec-exports-static-semantics-exportedbindings\" type=\"sdo\" aoid=\"ExportedBindings\"><span id=\"sec-exports-static-semantics-exportedbindings\"></span><span id=\"sec-module-semantics-static-semantics-exportedbindings\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-exportedbindings\">#sec-static-semantics-exportedbindings</span> Static Semantics: ExportedBindings</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ExportedBindings are the locally bound names that are explicitly associated with a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>'s <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-hxF0P9sA\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"ExportedBindings\"><a href=\"#sec-static-semantics-exportedbindings\">ExportedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"ExportedBindings\"><a href=\"#sec-static-semantics-exportedbindings\">ExportedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-_KDGI2fs\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"15hryu6r\" id=\"prod-ExniQRjB\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-V3c4HtRK\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"j2lh_kda\" id=\"prod-OFghu2j_\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"ExportedBindings\"><a href=\"#sec-static-semantics-exportedbindings\">ExportedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bg3oaw2m\" id=\"prod-IJxf-Cdm\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-PahxJv8L\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-Ltk1AbDn\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"w8pljwgc\" id=\"prod-kSrXZybF\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4f6ct71n\" id=\"prod-tftEFTtX\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-TQTcajTg\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gqfndot_\" id=\"prod-2N5gUMor\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"ExportedBindings\"><a href=\"#sec-static-semantics-exportedbindings\">ExportedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"ExportedBindings\"><a href=\"#sec-static-semantics-exportedbindings\">ExportedBindings</a></emu-xref> of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-PXy6OYfk\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvusrr4h\" id=\"prod-yE_sj4Qx\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the first <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-propertynamelist": {"num": "13.2.5.3", "title": "#sec-static-semantics-propertynamelist Static Semantics: PropertyNameList", "html": "<emu-clause id=\"sec-static-semantics-propertynamelist\" type=\"sdo\" aoid=\"PropertyNameList\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-propertynamelist\">#sec-static-semantics-propertynamelist</span> Static Semantics: PropertyNameList</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zxofg8tg\" id=\"prod-ojv3z_1M\"><emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is <emu-const>empty</emu-const>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mvlwazei\" id=\"prod-arjQ9VdV\">\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>list</var> be <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>.</li><li>If <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is <emu-const>empty</emu-const>, return <var>list</var>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>list</var> and &#171; <emu-xref aoid=\"PropName\"><a href=\"#sec-static-semantics-propname\">PropName</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> &#187;.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-bound-function-exotic-objects-call-thisargument-argumentslist": {"num": "10.4.1.1", "title": "#sec-bound-function-exotic-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">#sec-bound-function-exotic-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n        <p>The [[Call]] internal method of a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref> <var>F</var> takes arguments <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>target</var> be <var>F</var>.[[BoundTargetFunction]].</li><li>Let <var>boundThis</var> be <var>F</var>.[[BoundThis]].</li><li>Let <var>boundArgs</var> be <var>F</var>.[[BoundArguments]].</li><li>Let <var>args</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>boundArgs</var> and <var>argumentsList</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>target</var>, <var>boundThis</var>, <var>args</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-importentries": {"num": "16.2.2.2", "title": "#sec-static-semantics-importentries Static Semantics: ImportEntries", "html": "<emu-clause id=\"sec-static-semantics-importentries\" oldids=\"sec-module-semantics-static-semantics-importentries,sec-imports-static-semantics-importentries\" type=\"sdo\" aoid=\"ImportEntries\"><span id=\"sec-imports-static-semantics-importentries\"></span><span id=\"sec-module-semantics-static-semantics-importentries\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-importentries\">#sec-static-semantics-importentries</span> Static Semantics: ImportEntries</h1>\n        <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-65kV3a3C\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-8cqfbQ1C\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>entries</var> be <emu-xref aoid=\"ImportEntries\"><a href=\"#sec-static-semantics-importentries\">ImportEntries</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>entries2</var> be <emu-xref aoid=\"ImportEntries\"><a href=\"#sec-static-semantics-importentries\">ImportEntries</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>entries</var> and <var>entries2</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-haUIYXQl\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"15hryu6r\" id=\"prod-hUPyQqYi\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"glhuxxec\" id=\"prod-4FL2ok6-\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be the sole element of <emu-xref aoid=\"ModuleRequests\"><a href=\"#sec-static-semantics-modulerequests\">ModuleRequests</a></emu-xref> of <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>.</li><li>Return <emu-xref aoid=\"ImportEntriesForModule\"><a href=\"#sec-static-semantics-importentriesformodule\">ImportEntriesForModule</a></emu-xref> of <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> with argument <var>module</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ImportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"odcuzpbi\" id=\"prod--ST7ch2j\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-bound-function-exotic-objects-construct-argumentslist-newtarget": {"num": "10.4.1.2", "title": "#sec-bound-function-exotic-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">#sec-bound-function-exotic-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n        <p>The [[Construct]] internal method of a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref> <var>F</var> takes arguments <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values) and <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>target</var> be <var>F</var>.[[BoundTargetFunction]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>target</var>) is <emu-val>true</emu-val>.</li><li>Let <var>boundArgs</var> be <var>F</var>.[[BoundArguments]].</li><li>Let <var>args</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>boundArgs</var> and <var>argumentsList</var>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>F</var>, <var>newTarget</var>) is <emu-val>true</emu-val>, set <var>newTarget</var> to <var>target</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>target</var>, <var>args</var>, <var>newTarget</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization": {"num": "14.3.3.1", "title": "#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization Runtime Semantics: PropertyBindingInitialization", "html": "<emu-clause id=\"sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\" type=\"sdo\" aoid=\"PropertyBindingInitialization\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\">#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization</span> Runtime Semantics: PropertyBindingInitialization</h1>\n        <p>With parameters <var>value</var> and <var>environment</var>.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">These collect a list of all bound property names rather than just empty completion.</div></emu-note>\n\n        <emu-grammar><emu-production name=\"BindingPropertyList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bzdeo9zt\" id=\"prod-jhtKd-Y5\">\n        <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>boundNames</var> be ? <emu-xref aoid=\"PropertyBindingInitialization\"><a href=\"#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\">PropertyBindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a></emu-nt> with arguments <var>value</var> and <var>environment</var>.</li><li>Let <var>nextNames</var> be ? <emu-xref aoid=\"PropertyBindingInitialization\"><a href=\"#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization\">PropertyBindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt> with arguments <var>value</var> and <var>environment</var>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>boundNames</var> and <var>nextNames</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"BindingProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lof8ala-\" id=\"prod--5EhKk0m\"><emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>name</var> be the string that is the only element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt>.</li><li>Perform ? <emu-xref aoid=\"KeyedBindingInitialization\"><a href=\"#sec-runtime-semantics-keyedbindinginitialization\">KeyedBindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a></emu-nt> using <var>value</var>, <var>environment</var>, and <var>name</var> as the arguments.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>name</var>.</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"BindingProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingProperty\">BindingProperty</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mhvrwluk\" id=\"prod-1euONYQ-\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>P</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>P</var>).</li><li>Perform ? <emu-xref aoid=\"KeyedBindingInitialization\"><a href=\"#sec-runtime-semantics-keyedbindinginitialization\">KeyedBindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-BindingElement\">BindingElement</a></emu-nt> with <var>value</var>, <var>environment</var>, and <var>P</var> as the arguments.</li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <var>P</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-labelledevaluation": {"num": "14.13.4", "title": "#sec-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-labelledevaluation\" oldids=\"sec-statement-semantics-runtime-semantics-labelledevaluation,sec-labelled-statements-runtime-semantics-labelledevaluation\" type=\"sdo\" aoid=\"LabelledEvaluation\"><span id=\"sec-labelled-statements-runtime-semantics-labelledevaluation\"></span><span id=\"sec-statement-semantics-runtime-semantics-labelledevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-labelledevaluation\">#sec-runtime-semantics-labelledevaluation</span> Runtime Semantics: LabelledEvaluation</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kmxl4yum\" id=\"prod-pR7DNQsN\"><emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>stmtResult</var> be <emu-xref aoid=\"LoopEvaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\">LoopEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Target]] is <emu-const>empty</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Value]] is <emu-const>empty</emu-const>, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Else, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nuio-xfp\" id=\"prod-FSHcHfYw\"><emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>stmtResult</var> be the result of evaluating <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Target]] is <emu-const>empty</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Value]] is <emu-const>empty</emu-const>, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Else, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>A <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> is one that can be exited via an unlabelled <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-GnWrgP5w\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>labelSet</var> and &#171; <var>label</var> &#187;.</li><li>Let <var>stmtResult</var> be <emu-xref aoid=\"LabelledEvaluation\"><a href=\"#sec-runtime-semantics-labelledevaluation\">LabelledEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>stmtResult</var>.[[Target]], <var>label</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-3whCJM4e\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gre9qn6e\" id=\"prod-yNvNX8se\"><emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iwwn8atx\" id=\"prod-nGqcJdt_\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-E9WZy4XN\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-JaqknT0A\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"skawbrez\" id=\"prod-WDFeNdWY\"><emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-OTAMsoQb\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-7zXkEnhZ\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-P_sTorcs\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ye6wwgts\" id=\"prod--R2pJplF\"><emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-UhENwxgv\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ex_crokj\" id=\"prod-nKo_YY6H\"><emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-TbDRWisB\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The only two productions of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> which have special semantics for LabelledEvaluation are <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> and <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-static-semantics-exportednames": {"num": "16.2.3.3", "title": "#sec-static-semantics-exportednames Static Semantics: ExportedNames", "html": "<emu-clause id=\"sec-static-semantics-exportednames\" oldids=\"sec-module-semantics-static-semantics-exportednames,sec-exports-static-semantics-exportednames\" type=\"sdo\" aoid=\"ExportedNames\"><span id=\"sec-exports-static-semantics-exportednames\"></span><span id=\"sec-module-semantics-static-semantics-exportednames\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-exportednames\">#sec-static-semantics-exportednames</span> Static Semantics: ExportedNames</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ExportedNames are the externally visible names that a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> explicitly maps to one of its local name bindings.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-Td0h-qi5\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-ebSwvFft\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-HgfJHgi9\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"15hryu6r\" id=\"prod-TCq0u4jM\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-Upv45R4X\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sb5ztei-\" id=\"prod-H38kB23_\"><emu-t>*</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dtcd7req\" id=\"prod-cZdtFWyT\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportFromClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_xs5tuve\" id=\"prod-zlltzYPM\"><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bg3oaw2m\" id=\"prod-n6JkNQnf\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-NjdAgwQZ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-iOoR-XLv\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"w8pljwgc\" id=\"prod-BuNuTBV9\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4f6ct71n\" id=\"prod-fWfjxGVB\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return &#171; <emu-val>\"default\"</emu-val> &#187;.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NamedExports\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-tyOEKkRB\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportsList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gqfndot_\" id=\"prod-VeE5fiYD\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"ExportedNames\"><a href=\"#sec-static-semantics-exportednames\">ExportedNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names</var> and <var>names2</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-pHxySdXg\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportSpecifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qvusrr4h\" id=\"prod-GRhLFzm0\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the second <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-static-semantics-toplevellexicallyscopeddeclarations": {"num": "8.1.9", "title": "#sec-static-semantics-toplevellexicallyscopeddeclarations Static Semantics: TopLevelLexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-toplevellexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations,sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations\" type=\"sdo\" aoid=\"TopLevelLexicallyScopedDeclarations\"><span id=\"sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations\"></span><span id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevellexicallyscopeddeclarations\">#sec-static-semantics-toplevellexicallyscopeddeclarations</span> Static Semantics: TopLevelLexicallyScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-ZOlGIUjg\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-fSl8sbck\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-68OgfJw9\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod--BAI6AhR\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return &#171; &#187;.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-VoYdAOt3\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}}