{"from": {"secList": ["sec-%typedarray%.prototype.foreach", "sec-%typedarray%.prototype.indexof", "sec-%typedarray%.prototype.includes", "sec-%typedarray%.prototype.lastindexof", "sec-%typedarray%.prototype.find", "sec-%typedarray%.prototype.reduce", "sec-%typedarray%.prototype.some", "sec-%typedarray%.prototype.join", "sec-%typedarray%.prototype.reverse", "sec-%typedarray%.prototype.reduceright", "sec-%typedarray%.prototype.findindex", "sec-%typedarray%.prototype.every"], "secData": {"sec-%typedarray%.prototype.foreach": {"num": "22.2.3.12", "title": "#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.foreach\">#sec-%typedarray%.prototype.foreach</span> %TypedArray%.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.forEach</code> is a distinct function that implements the same algorithm as <code>Array.prototype.forEach</code> as defined in <emu-xref href=\"#sec-array.prototype.foreach\"><a href=\"#sec-array.prototype.foreach\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.foreach\">#sec-array.prototype.foreach</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.indexof": {"num": "22.2.3.14", "title": "#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.indexof\">#sec-%typedarray%.prototype.indexof</span> %TypedArray%.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.indexOf</code> is a distinct function that implements the same algorithm as <code>Array.prototype.indexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.indexof\"><a href=\"#sec-array.prototype.indexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.includes": {"num": "22.2.3.13", "title": "#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.includes\">#sec-%typedarray%.prototype.includes</span> %TypedArray%.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.includes</code> is a distinct function that implements the same algorithm as <code>Array.prototype.includes</code> as defined in <emu-xref href=\"#sec-array.prototype.includes\"><a href=\"#sec-array.prototype.includes\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.includes\">#sec-array.prototype.includes</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.lastindexof": {"num": "22.2.3.17", "title": "#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.lastindexof\">#sec-%typedarray%.prototype.lastindexof</span> %TypedArray%.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.lastIndexOf</code> is a distinct function that implements the same algorithm as <code>Array.prototype.lastIndexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.lastindexof\"><a href=\"#sec-array.prototype.lastindexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.find": {"num": "22.2.3.10", "title": "#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.find\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.find\">#sec-%typedarray%.prototype.find</span> %TypedArray%.prototype.find ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.find</code> is a distinct function that implements the same algorithm as <code>Array.prototype.find</code> as defined in <emu-xref href=\"#sec-array.prototype.find\"><a href=\"#sec-array.prototype.find\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.find\">#sec-array.prototype.find</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reduce": {"num": "22.2.3.20", "title": "#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduce\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduce\">#sec-%typedarray%.prototype.reduce</span> %TypedArray%.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduce</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reduce</code> as defined in <emu-xref href=\"#sec-array.prototype.reduce\"><a href=\"#sec-array.prototype.reduce\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduce\">#sec-array.prototype.reduce</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.some": {"num": "22.2.3.25", "title": "#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.some\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.some\">#sec-%typedarray%.prototype.some</span> %TypedArray%.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.some</code> is a distinct function that implements the same algorithm as <code>Array.prototype.some</code> as defined in <emu-xref href=\"#sec-array.prototype.some\"><a href=\"#sec-array.prototype.some\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.some\">#sec-array.prototype.some</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.join": {"num": "22.2.3.15", "title": "#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.join\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.join\">#sec-%typedarray%.prototype.join</span> %TypedArray%.prototype.join ( <var>separator</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.join</code> is a distinct function that implements the same algorithm as <code>Array.prototype.join</code> as defined in <emu-xref href=\"#sec-array.prototype.join\"><a href=\"#sec-array.prototype.join\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.join\">#sec-array.prototype.join</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reverse": {"num": "22.2.3.22", "title": "#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reverse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reverse\">#sec-%typedarray%.prototype.reverse</span> %TypedArray%.prototype.reverse ( )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reverse</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reverse</code> as defined in <emu-xref href=\"#sec-array.prototype.reverse\"><a href=\"#sec-array.prototype.reverse\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reverse\">#sec-array.prototype.reverse</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reduceright": {"num": "22.2.3.21", "title": "#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduceright\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduceright\">#sec-%typedarray%.prototype.reduceright</span> %TypedArray%.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduceRight</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reduceRight</code> as defined in <emu-xref href=\"#sec-array.prototype.reduceright\"><a href=\"#sec-array.prototype.reduceright\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduceright\">#sec-array.prototype.reduceright</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.findindex": {"num": "22.2.3.11", "title": "#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.findindex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.findindex\">#sec-%typedarray%.prototype.findindex</span> %TypedArray%.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.findIndex</code> is a distinct function that implements the same algorithm as <code>Array.prototype.findIndex</code> as defined in <emu-xref href=\"#sec-array.prototype.findindex\"><a href=\"#sec-array.prototype.findindex\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.findindex\">#sec-array.prototype.findindex</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.every": {"num": "22.2.3.7", "title": "#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.every\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.every\">#sec-%typedarray%.prototype.every</span> %TypedArray%.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.every</code> is a distinct function that implements the same algorithm as <code>Array.prototype.every</code> as defined in <emu-xref href=\"#sec-array.prototype.every\"><a href=\"#sec-array.prototype.every\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.every\">#sec-array.prototype.every</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-%typedarray%.prototype.foreach", "sec-%typedarray%.prototype.indexof", "sec-%typedarray%.prototype.includes", "sec-%typedarray%.prototype.lastindexof", "sec-%typedarray%.prototype.find", "sec-%typedarray%.prototype.reduce", "sec-%typedarray%.prototype.some", "sec-%typedarray%.prototype.join", "sec-%typedarray%.prototype.reverse", "sec-%typedarray%.prototype.reduceright", "sec-%typedarray%.prototype.findindex", "sec-%typedarray%.prototype.every"], "secData": {"sec-%typedarray%.prototype.foreach": {"num": "22.2.3.12", "title": "#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.foreach\">#sec-%typedarray%.prototype.foreach</span> %TypedArray%.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.forEach</code> are the same as for <code>Array.prototype.forEach</code> as defined in <emu-xref href=\"#sec-array.prototype.foreach\"><a href=\"#sec-array.prototype.foreach\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.foreach\">#sec-array.prototype.foreach</a></emu-xref>.</p>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>), <var>O</var> &#187;).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.indexof": {"num": "22.2.3.14", "title": "#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.indexof\">#sec-%typedarray%.prototype.indexof</span> %TypedArray%.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.indexOf</code> are the same as for <code>Array.prototype.indexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.indexof\"><a href=\"#sec-array.prototype.indexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</a></emu-xref>.</p>\n        <p>When the <code>indexOf</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>len</var> is 0, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is 0.</li><li>If <var>n</var> is +&#8734;, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Else if <var>n</var> is -&#8734;, set <var>n</var> to 0.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>kPresent</var> be !&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>Let <var>same</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>searchElement</var> === <var>elementK</var>.</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.includes": {"num": "22.2.3.13", "title": "#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.includes\">#sec-%typedarray%.prototype.includes</span> %TypedArray%.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.includes</code> are the same as for <code>Array.prototype.includes</code> as defined in <emu-xref href=\"#sec-array.prototype.includes\"><a href=\"#sec-array.prototype.includes\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.includes\">#sec-array.prototype.includes</a></emu-xref>.</p>\n        <p>When the <code>includes</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>len</var> is 0, return <emu-val>false</emu-val>.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is 0.</li><li>If <var>n</var> is +&#8734;, return <emu-val>false</emu-val>.</li><li>Else if <var>n</var> is -&#8734;, set <var>n</var> to 0.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>elementK</var> be the result of !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>searchElement</var>, <var>elementK</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.lastindexof": {"num": "22.2.3.17", "title": "#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.lastindexof\">#sec-%typedarray%.prototype.lastindexof</span> %TypedArray%.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.lastIndexOf</code> are the same as for <code>Array.prototype.lastIndexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.lastindexof\"><a href=\"#sec-array.prototype.lastindexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</a></emu-xref>.</p>\n        <p>When the <code>lastIndexOf</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>len</var> is 0, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>fromIndex</var> is present, let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>); else let <var>n</var> be <var>len</var> - 1.</li><li>If <var>n</var> is -&#8734;, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>n</var>, <var>len</var> - 1).</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li></ol></li><li>Repeat, while <var>k</var> &#8805; 0,<ol><li>Let <var>kPresent</var> be !&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>Let <var>same</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>searchElement</var> === <var>elementK</var>.</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.find": {"num": "22.2.3.10", "title": "#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.find\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.find\">#sec-%typedarray%.prototype.find</span> %TypedArray%.prototype.find ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.find</code> are the same as for <code>Array.prototype.find</code> as defined in <emu-xref href=\"#sec-array.prototype.find\"><a href=\"#sec-array.prototype.find\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.find\">#sec-array.prototype.find</a></emu-xref>.</p>\n        <p>When the <code>find</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>), <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <var>kValue</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reduce": {"num": "22.2.3.20", "title": "#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduce\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduce\">#sec-%typedarray%.prototype.reduce</span> %TypedArray%.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduce</code> are the same as for <code>Array.prototype.reduce</code> as defined in <emu-xref href=\"#sec-array.prototype.reduce\"><a href=\"#sec-array.prototype.reduce\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduce\">#sec-array.prototype.reduce</a></emu-xref>.</p>\n        <p>When the <code>reduce</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>len</var> = 0 and <var>initialValue</var> is not present, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Let <var>accumulator</var> be <emu-val>undefined</emu-val>.</li><li>If <var>initialValue</var> is present, then<ol><li>Set <var>accumulator</var> to <var>initialValue</var>.</li></ol></li><li>Else,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Set <var>accumulator</var> to !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Set <var>accumulator</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <emu-val>undefined</emu-val>, &#171; <var>accumulator</var>, <var>kValue</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>), <var>O</var> &#187;).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>accumulator</var>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.some": {"num": "22.2.3.25", "title": "#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.some\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.some\">#sec-%typedarray%.prototype.some</span> %TypedArray%.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.some</code> are the same as for <code>Array.prototype.some</code> as defined in <emu-xref href=\"#sec-array.prototype.some\"><a href=\"#sec-array.prototype.some\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.some\">#sec-array.prototype.some</a></emu-xref>.</p>\n        <p>When the <code>some</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>), <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.join": {"num": "22.2.3.15", "title": "#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.join\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.join\">#sec-%typedarray%.prototype.join</span> %TypedArray%.prototype.join ( <var>separator</var> )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.join</code> are the same as for <code>Array.prototype.join</code> as defined in <emu-xref href=\"#sec-array.prototype.join\"><a href=\"#sec-array.prototype.join\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.join\">#sec-array.prototype.join</a></emu-xref>.</p>\n        <p>When the <code>join</code> method is called with one argument <var>separator</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, let <var>sep</var> be the single-element String <emu-val>\",\"</emu-val>.</li><li>Else, let <var>sep</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>If <var>k</var> &gt; 0, set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>sep</var>.</li><li>Let <var>element</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <var>element</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, let <var>next</var> be the empty String; otherwise, let <var>next</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>element</var>).</li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>next</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>R</var>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reverse": {"num": "22.2.3.22", "title": "#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reverse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reverse\">#sec-%typedarray%.prototype.reverse</span> %TypedArray%.prototype.reverse ( )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reverse</code> are the same as for <code>Array.prototype.reverse</code> as defined in <emu-xref href=\"#sec-array.prototype.reverse\"><a href=\"#sec-array.prototype.reverse\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reverse\">#sec-array.prototype.reverse</a></emu-xref>.</p>\n        <p>When the <code>reverse</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>Let <var>middle</var> be <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<var>len</var> / 2).</li><li>Let <var>lower</var> be 0.</li><li>Repeat, while <var>lower</var> &#8800; <var>middle</var>,<ol><li>Let <var>upper</var> be <var>len</var> - <var>lower</var> - 1.</li><li>Let <var>upperP</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>upper</var>)).</li><li>Let <var>lowerP</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lower</var>)).</li><li>Let <var>lowerValue</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>lowerP</var>).</li><li>Let <var>upperValue</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>upperP</var>).</li><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>lowerP</var>, <var>upperValue</var>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>upperP</var>, <var>lowerValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>lower</var> to <var>lower</var> + 1.</li></ol></li><li>Return <var>O</var>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reduceright": {"num": "22.2.3.21", "title": "#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduceright\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduceright\">#sec-%typedarray%.prototype.reduceright</span> %TypedArray%.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduceRight</code> are the same as for <code>Array.prototype.reduceRight</code> as defined in <emu-xref href=\"#sec-array.prototype.reduceright\"><a href=\"#sec-array.prototype.reduceright\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduceright\">#sec-array.prototype.reduceright</a></emu-xref>.</p>\n        <p>When the <code>reduceRight</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>len</var> is 0 and <var>initialValue</var> is not present, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var> - 1.</li><li>Let <var>accumulator</var> be <emu-val>undefined</emu-val>.</li><li>If <var>initialValue</var> is present, then<ol><li>Set <var>accumulator</var> to <var>initialValue</var>.</li></ol></li><li>Else,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Set <var>accumulator</var> to !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Repeat, while <var>k</var> &#8805; 0,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Set <var>accumulator</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <emu-val>undefined</emu-val>, &#171; <var>accumulator</var>, <var>kValue</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>), <var>O</var> &#187;).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <var>accumulator</var>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.findindex": {"num": "22.2.3.11", "title": "#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.findindex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.findindex\">#sec-%typedarray%.prototype.findindex</span> %TypedArray%.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.findIndex</code> are the same as for <code>Array.prototype.findIndex</code> as defined in <emu-xref href=\"#sec-array.prototype.findindex\"><a href=\"#sec-array.prototype.findindex\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.findindex\">#sec-array.prototype.findindex</a></emu-xref>.</p>\n        <p>When the <code>findIndex</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>), <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.every": {"num": "22.2.3.7", "title": "#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.every\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.every\">#sec-%typedarray%.prototype.every</span> %TypedArray%.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.every</code> are the same as for <code>Array.prototype.every</code> as defined in <emu-xref href=\"#sec-array.prototype.every\"><a href=\"#sec-array.prototype.every\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.every\">#sec-array.prototype.every</a></emu-xref>.</p>\n        <p>When the <code>every</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>), <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}}, "figData": {}}}