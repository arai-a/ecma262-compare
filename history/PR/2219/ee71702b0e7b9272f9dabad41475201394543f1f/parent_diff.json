{"from": {"secList": ["sec-promise.all-resolve-element-functions", "sec-performpromiseall", "sec-performpromiseany", "sec-promise.any-reject-element-functions"], "secData": {"sec-promise.all-resolve-element-functions": {"num": "26.6.4.1.3", "title": "#sec-promise.all-resolve-element-functions Promise.all Resolve Element Functions", "html": "<emu-clause id=\"sec-promise.all-resolve-element-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise.all-resolve-element-functions\">#sec-promise.all-resolve-element-functions</span> <code>Promise.all</code> Resolve Element Functions</h1>\n          <p>A <code>Promise.all</code> resolve element function is an anonymous built-in function that is used to resolve a specific <code>Promise.all</code> element. Each <code>Promise.all</code> resolve element function has [[Index]], [[Values]], [[Capability]], [[RemainingElements]], and [[AlreadyCalled]] internal slots.</p>\n          <p>When a <code>Promise.all</code> resolve element function is called with argument <var>x</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>alreadyCalled</var> be <var>F</var>.[[AlreadyCalled]].</li><li>If <var>alreadyCalled</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>alreadyCalled</var>.[[Value]] to <emu-val>true</emu-val>.</li><li>Let <var>index</var> be <var>F</var>.[[Index]].</li><li>Let <var>values</var> be <var>F</var>.[[Values]].</li><li>Let <var>promiseCapability</var> be <var>F</var>.[[Capability]].</li><li>Let <var>remainingElementsCount</var> be <var>F</var>.[[RemainingElements]].</li><li>Set <var>values</var>[<var>index</var>] to <var>x</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>valuesArray</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>values</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>valuesArray</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a <code>Promise.all</code> resolve element function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n      "}, "sec-performpromiseall": {"num": "26.6.4.1.2", "title": "#sec-performpromiseall PerformPromiseAll ( iteratorRecord, constructor, resultCapability, promiseResolve )", "html": "<emu-clause id=\"sec-performpromiseall\" aoid=\"PerformPromiseAll\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performpromiseall\">#sec-performpromiseall</span> PerformPromiseAll ( <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var>, <var>promiseResolve</var> )</h1>\n          <p>The abstract operation PerformPromiseAll takes arguments <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>), and <var>promiseResolve</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>constructor</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>promiseResolve</var>) is <emu-val>true</emu-val>.</li><li>Let <var>values</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>remainingElementsCount</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Value]]: 1 }.</li><li>Let <var>index</var> be 0.</li><li>Repeat,<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>valuesArray</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>values</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resultCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>valuesArray</var> &#187;).</li></ol></li><li>Return <var>resultCapability</var>.[[Promise]].</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Append <emu-val>undefined</emu-val> to <var>values</var>.</li><li>Let <var>nextPromise</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseResolve</var>, <var>constructor</var>, &#171; <var>nextValue</var> &#187;).</li><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-promise.all-resolve-element-functions\" title=\"\"><a href=\"#sec-promise.all-resolve-element-functions\"><code>Promise.all</code> Resolve Element Functions</a></emu-xref>.</li><li>Let <var>resolveElement</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, &#171; [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] &#187;).</li><li>Set <var>resolveElement</var>.[[AlreadyCalled]] to the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Value]]: <emu-val>false</emu-val> }.</li><li>Set <var>resolveElement</var>.[[Index]] to <var>index</var>.</li><li>Set <var>resolveElement</var>.[[Values]] to <var>values</var>.</li><li>Set <var>resolveElement</var>.[[Capability]] to <var>resultCapability</var>.</li><li>Set <var>resolveElement</var>.[[RemainingElements]] to <var>remainingElementsCount</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] + 1.</li><li>Perform ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>nextPromise</var>, <emu-val>\"then\"</emu-val>, &#171; <var>resolveElement</var>, <var>resultCapability</var>.[[Reject]] &#187;).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-performpromiseany": {"num": "26.6.4.3.1", "title": "#sec-performpromiseany PerformPromiseAny ( iteratorRecord, constructor, resultCapability, promiseResolve )", "html": "<emu-clause id=\"sec-performpromiseany\" aoid=\"PerformPromiseAny\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performpromiseany\">#sec-performpromiseany</span> PerformPromiseAny ( <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var>, <var>promiseResolve</var> )</h1>\n          <p>The abstract operation PerformPromiseAny takes arguments <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>), and <var>promiseResolve</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>constructor</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>promiseResolve</var>) is <emu-val>true</emu-val>.</li><li>Let <var>errors</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>remainingElementsCount</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Value]]: 1 }.</li><li>Let <var>index</var> be 0.</li><li>Repeat,<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>error</var> be a newly created <code>AggregateError</code> object.</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>error</var>, <emu-val>\"errors\"</emu-val>, PropertyDescriptor { [[Configurable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Value]]: !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>errors</var>) }).</li><li>Return <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>error</var>).</li></ol></li><li>Return <var>resultCapability</var>.[[Promise]].</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Append <emu-val>undefined</emu-val> to <var>errors</var>.</li><li>Let <var>nextPromise</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseResolve</var>, <var>constructor</var>, &#171; <var>nextValue</var> &#187;).</li><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-promise.any-reject-element-functions\" title=\"\"><a href=\"#sec-promise.any-reject-element-functions\"><code>Promise.any</code> Reject Element Functions</a></emu-xref>.</li><li>Let <var>rejectElement</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, &#171; [[AlreadyCalled]], [[Index]], [[Errors]], [[Capability]], [[RemainingElements]] &#187;).</li><li>Set <var>rejectElement</var>.[[AlreadyCalled]] to the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Value]]: <emu-val>false</emu-val> }.</li><li>Set <var>rejectElement</var>.[[Index]] to <var>index</var>.</li><li>Set <var>rejectElement</var>.[[Errors]] to <var>errors</var>.</li><li>Set <var>rejectElement</var>.[[Capability]] to <var>resultCapability</var>.</li><li>Set <var>rejectElement</var>.[[RemainingElements]] to <var>remainingElementsCount</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] + 1.</li><li>Perform ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>nextPromise</var>, <emu-val>\"then\"</emu-val>, &#171; <var>resultCapability</var>.[[Resolve]], <var>rejectElement</var> &#187;).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-promise.any-reject-element-functions": {"num": "26.6.4.3.2", "title": "#sec-promise.any-reject-element-functions Promise.any Reject Element Functions", "html": "<emu-clause id=\"sec-promise.any-reject-element-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise.any-reject-element-functions\">#sec-promise.any-reject-element-functions</span> <code>Promise.any</code> Reject Element Functions</h1>\n          <p>A <code>Promise.any</code> reject element function is an anonymous built-in function that is used to reject a specific <code>Promise.any</code> element. Each <code>Promise.any</code> reject element function has [[Index]], [[Errors]], [[Capability]], [[RemainingElements]], and [[AlreadyCalled]] internal slots.</p>\n          <p>When a <code>Promise.any</code> reject element function is called with argument <var>x</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>alreadyCalled</var> be <var>F</var>.[[AlreadyCalled]].</li><li>If <var>alreadyCalled</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>alreadyCalled</var>.[[Value]] to <emu-val>true</emu-val>.</li><li>Let <var>index</var> be <var>F</var>.[[Index]].</li><li>Let <var>errors</var> be <var>F</var>.[[Errors]].</li><li>Let <var>promiseCapability</var> be <var>F</var>.[[Capability]].</li><li>Let <var>remainingElementsCount</var> be <var>F</var>.[[RemainingElements]].</li><li>Set <var>errors</var>[<var>index</var>] to <var>x</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>error</var> be a newly created <code>AggregateError</code> object.</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>error</var>, <emu-val>\"errors\"</emu-val>, PropertyDescriptor { [[Configurable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Value]]: !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>errors</var>) }).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>error</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a <code>Promise.any</code> reject element function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n      "}}, "figData": {}}, "to": {"secList": ["sec-promise.all-resolve-element-functions", "sec-performpromiseall", "sec-performpromiseany", "sec-promise.any-reject-element-functions"], "secData": {"sec-promise.all-resolve-element-functions": {"num": "26.6.4.1.3", "title": "#sec-promise.all-resolve-element-functions Promise.all Resolve Element Functions", "html": "<emu-clause id=\"sec-promise.all-resolve-element-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise.all-resolve-element-functions\">#sec-promise.all-resolve-element-functions</span> <code>Promise.all</code> Resolve Element Functions</h1>\n          <p>A <code>Promise.all</code> resolve element function is an anonymous built-in function that is used to resolve a specific <code>Promise.all</code> element. Each <code>Promise.all</code> resolve element function has [[Index]], [[Values]], [[Capability]], [[RemainingElements]], and [[AlreadyCalled]] internal slots.</p>\n          <p>When a <code>Promise.all</code> resolve element function is called with argument <var>x</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>If <var>F</var>.[[AlreadyCalled]]. is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[AlreadyCalled]] to <emu-val>true</emu-val>.</li><li>Let <var>index</var> be <var>F</var>.[[Index]].</li><li>Let <var>values</var> be <var>F</var>.[[Values]].</li><li>Let <var>promiseCapability</var> be <var>F</var>.[[Capability]].</li><li>Let <var>remainingElementsCount</var> be <var>F</var>.[[RemainingElements]].</li><li>Set <var>values</var>[<var>index</var>] to <var>x</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>valuesArray</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>values</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>valuesArray</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a <code>Promise.all</code> resolve element function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n      "}, "sec-performpromiseall": {"num": "26.6.4.1.2", "title": "#sec-performpromiseall PerformPromiseAll ( iteratorRecord, constructor, resultCapability, promiseResolve )", "html": "<emu-clause id=\"sec-performpromiseall\" aoid=\"PerformPromiseAll\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performpromiseall\">#sec-performpromiseall</span> PerformPromiseAll ( <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var>, <var>promiseResolve</var> )</h1>\n          <p>The abstract operation PerformPromiseAll takes arguments <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>), and <var>promiseResolve</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>constructor</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>promiseResolve</var>) is <emu-val>true</emu-val>.</li><li>Let <var>values</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>remainingElementsCount</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Value]]: 1 }.</li><li>Let <var>index</var> be 0.</li><li>Repeat,<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>valuesArray</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>values</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resultCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>valuesArray</var> &#187;).</li></ol></li><li>Return <var>resultCapability</var>.[[Promise]].</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Append <emu-val>undefined</emu-val> to <var>values</var>.</li><li>Let <var>nextPromise</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseResolve</var>, <var>constructor</var>, &#171; <var>nextValue</var> &#187;).</li><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-promise.all-resolve-element-functions\" title=\"\"><a href=\"#sec-promise.all-resolve-element-functions\"><code>Promise.all</code> Resolve Element Functions</a></emu-xref>.</li><li>Let <var>resolveElement</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, &#171; [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] &#187;).</li><li>Set <var>resolveElement</var>.[[AlreadyCalled]] to <emu-val>false</emu-val>.</li><li>Set <var>resolveElement</var>.[[Index]] to <var>index</var>.</li><li>Set <var>resolveElement</var>.[[Values]] to <var>values</var>.</li><li>Set <var>resolveElement</var>.[[Capability]] to <var>resultCapability</var>.</li><li>Set <var>resolveElement</var>.[[RemainingElements]] to <var>remainingElementsCount</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] + 1.</li><li>Perform ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>nextPromise</var>, <emu-val>\"then\"</emu-val>, &#171; <var>resolveElement</var>, <var>resultCapability</var>.[[Reject]] &#187;).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-performpromiseany": {"num": "26.6.4.3.1", "title": "#sec-performpromiseany PerformPromiseAny ( iteratorRecord, constructor, resultCapability, promiseResolve )", "html": "<emu-clause id=\"sec-performpromiseany\" aoid=\"PerformPromiseAny\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performpromiseany\">#sec-performpromiseany</span> PerformPromiseAny ( <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var>, <var>promiseResolve</var> )</h1>\n          <p>The abstract operation PerformPromiseAny takes arguments <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>), and <var>promiseResolve</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>constructor</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>promiseResolve</var>) is <emu-val>true</emu-val>.</li><li>Let <var>errors</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>remainingElementsCount</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Value]]: 1 }.</li><li>Let <var>index</var> be 0.</li><li>Repeat,<ol><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>error</var> be a newly created <code>AggregateError</code> object.</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>error</var>, <emu-val>\"errors\"</emu-val>, PropertyDescriptor { [[Configurable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Value]]: !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>errors</var>) }).</li><li>Return <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>error</var>).</li></ol></li><li>Return <var>resultCapability</var>.[[Promise]].</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Append <emu-val>undefined</emu-val> to <var>errors</var>.</li><li>Let <var>nextPromise</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseResolve</var>, <var>constructor</var>, &#171; <var>nextValue</var> &#187;).</li><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-promise.any-reject-element-functions\" title=\"\"><a href=\"#sec-promise.any-reject-element-functions\"><code>Promise.any</code> Reject Element Functions</a></emu-xref>.</li><li>Let <var>rejectElement</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, &#171; [[AlreadyCalled]], [[Index]], [[Errors]], [[Capability]], [[RemainingElements]] &#187;).</li><li>Set <var>rejectElement</var>.[[AlreadyCalled]] to <emu-val>false</emu-val>.</li><li>Set <var>rejectElement</var>.[[Index]] to <var>index</var>.</li><li>Set <var>rejectElement</var>.[[Errors]] to <var>errors</var>.</li><li>Set <var>rejectElement</var>.[[Capability]] to <var>resultCapability</var>.</li><li>Set <var>rejectElement</var>.[[RemainingElements]] to <var>remainingElementsCount</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] + 1.</li><li>Perform ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>nextPromise</var>, <emu-val>\"then\"</emu-val>, &#171; <var>resultCapability</var>.[[Resolve]], <var>rejectElement</var> &#187;).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-promise.any-reject-element-functions": {"num": "26.6.4.3.2", "title": "#sec-promise.any-reject-element-functions Promise.any Reject Element Functions", "html": "<emu-clause id=\"sec-promise.any-reject-element-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise.any-reject-element-functions\">#sec-promise.any-reject-element-functions</span> <code>Promise.any</code> Reject Element Functions</h1>\n          <p>A <code>Promise.any</code> reject element function is an anonymous built-in function that is used to reject a specific <code>Promise.any</code> element. Each <code>Promise.any</code> reject element function has [[Index]], [[Errors]], [[Capability]], [[RemainingElements]], and [[AlreadyCalled]] internal slots.</p>\n          <p>When a <code>Promise.any</code> reject element function is called with argument <var>x</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>If <var>F</var>.[[AlreadyCalled]] is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[AlreadyCalled]] to <emu-val>true</emu-val>.</li><li>Let <var>index</var> be <var>F</var>.[[Index]].</li><li>Let <var>errors</var> be <var>F</var>.[[Errors]].</li><li>Let <var>promiseCapability</var> be <var>F</var>.[[Capability]].</li><li>Let <var>remainingElementsCount</var> be <var>F</var>.[[RemainingElements]].</li><li>Set <var>errors</var>[<var>index</var>] to <var>x</var>.</li><li>Set <var>remainingElementsCount</var>.[[Value]] to <var>remainingElementsCount</var>.[[Value]] - 1.</li><li>If <var>remainingElementsCount</var>.[[Value]] is 0, then<ol><li>Let <var>error</var> be a newly created <code>AggregateError</code> object.</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>error</var>, <emu-val>\"errors\"</emu-val>, PropertyDescriptor { [[Configurable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Value]]: !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>errors</var>) }).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>error</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a <code>Promise.any</code> reject element function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n      "}}, "figData": {}}}