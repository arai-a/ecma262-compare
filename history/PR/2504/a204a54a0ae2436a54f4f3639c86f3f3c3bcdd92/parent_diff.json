{"from": {"secList": ["sec-definefield", "sec-privateset", "sec-privatemethodoraccessoradd", "sec-putvalue", "sec-relational-operators-runtime-semantics-evaluation", "sec-runtime-semantics-methoddefinitionevaluation", "sec-privateelementfind", "sec-getvalue", "sec-initializeinstanceelements", "sec-operations-on-objects", "sec-runtime-semantics-classdefinitionevaluation", "sec-ecmascript-function-objects", "sec-definemethodproperty", "sec-privatefieldadd", "sec-privateget"], "secData": {"sec-definefield": {"num": "7.3.31", "title": "#sec-definefield DefineField ( receiver, fieldRecord )", "html": "<emu-clause id=\"sec-definefield\" aoid=\"DefineField\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-definefield\">#sec-definefield</span> DefineField ( <var>receiver</var>, <var>fieldRecord</var> )</h1>\n      <p>The abstract operation DefineField takes arguments <var>receiver</var> (an Object) and <var>fieldRecord</var> (a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>fieldName</var> be <var>fieldRecord</var>.[[Name]].</li><li>Let <var>initializer</var> be <var>fieldRecord</var>.[[Initializer]].</li><li>If <var>initializer</var> is not <emu-const>empty</emu-const>, then<ol><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>initializer</var>, <var>receiver</var>).</li></ol></li><li>Else, let <var>initValue</var> be <emu-val>undefined</emu-val>.</li><li>If <var>fieldName</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"PrivateFieldAdd\"><a href=\"#sec-privatefieldadd\">PrivateFieldAdd</a></emu-xref>(<var>fieldName</var>, <var>receiver</var>, <var>initValue</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>fieldName</var>) is <emu-val>true</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>receiver</var>, <var>fieldName</var>, <var>initValue</var>).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privateset": {"num": "7.3.30", "title": "#sec-privateset PrivateSet ( P, O, value )", "html": "<emu-clause id=\"sec-privateset\" aoid=\"PrivateSet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateset\">#sec-privateset</span> PrivateSet ( <var>P</var>, <var>O</var>, <var>value</var> )</h1>\n      <p>The abstract operation PrivateSet takes arguments <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>), <var>O</var> (an Object), and <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>P</var>, <var>O</var>).</li><li>If <var>entry</var> is <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>entry</var>.[[Kind]] is <emu-const>field</emu-const>, then<ol><li>Set <var>entry</var>.[[Value]] to <var>value</var>.</li></ol></li><li>Else if <var>entry</var>.[[Kind]] is <emu-const>method</emu-const>, then<ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>entry</var>.[[Kind]] is <emu-const>accessor</emu-const>.</li><li>If <var>entry</var>.[[Set]] is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>setter</var> be <var>entry</var>.[[Set]].</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>setter</var>, <var>O</var>, &#171; <var>value</var> &#187;).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privatemethodoraccessoradd": {"num": "7.3.28", "title": "#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( method, O )", "html": "<emu-clause id=\"sec-privatemethodoraccessoradd\" aoid=\"PrivateMethodOrAccessorAdd\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privatemethodoraccessoradd\">#sec-privatemethodoraccessoradd</span> PrivateMethodOrAccessorAdd ( <var>method</var>, <var>O</var> )</h1>\n      <p>The abstract operation PrivateMethodOrAccessorAdd takes arguments <var>method</var> (a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>) and <var>O</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>method</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>method</var>.[[Key]], <var>O</var>).</li><li>If <var>entry</var> is not <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>method</var> to <var>O</var>.[[PrivateElements]].</li><li>NOTE: The values for private methods and accessors are shared across instances. This step does not create a new copy of the method or accessor.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-putvalue": {"num": "6.2.4.6", "title": "#sec-putvalue PutValue ( V, W )", "html": "<emu-clause id=\"sec-putvalue\" aoid=\"PutValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-putvalue\">#sec-putvalue</span> PutValue ( <var>V</var>, <var>W</var> )</h1>\n        <p>The abstract operation PutValue takes arguments <var>V</var> and <var>W</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>W</var>).</li><li>If <var>V</var> is not a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>V</var>.[[Strict]] is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>globalObj</var> be <emu-xref aoid=\"GetGlobalObject\"><a href=\"#sec-getglobalobject\">GetGlobalObject</a></emu-xref>().</li><li>Return ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>globalObj</var>, <var>V</var>.[[ReferencedName]], <var>W</var>, <emu-val>false</emu-val>).</li></ol></li><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li id=\"step-putvalue-toobject\">Let <var>baseObj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>V</var>.[[Base]]).</li><li>If <emu-xref aoid=\"IsPrivateReference\"><a href=\"#sec-isprivatereference\">IsPrivateReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"PrivateSet\"><a href=\"#sec-privateset\">PrivateSet</a></emu-xref>(<var>V</var>.[[ReferencedName]], <var>baseObj</var>, <var>W</var>).</li></ol></li><li>Let <var>succeeded</var> be ? <var>baseObj</var>.[[Set]](<var>V</var>.[[ReferencedName]], <var>W</var>, <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>V</var>)).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val> and <var>V</var>.[[Strict]] is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return.</li></ol></li><li>Else,<ol><li>Let <var>base</var> be <var>V</var>.[[Base]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>base</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Return ? <var>base</var>.SetMutableBinding(<var>V</var>.[[ReferencedName]], <var>W</var>, <var>V</var>.[[Strict]]) (see <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\" class=\"excluded-xref\" excluded-id=\"sec-environment-records\">#sec-environment-records</a></emu-xref>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The object that may be created in step <emu-xref href=\"#step-putvalue-toobject\"><a href=\"#step-putvalue-toobject\">5.a</a></emu-xref> is not accessible outside of the above abstract operation and the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> [[Set]] internal method. An implementation might choose to avoid the actual creation of that object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-relational-operators-runtime-semantics-evaluation": {"num": "13.10.1", "title": "#sec-relational-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-runtime-semantics-evaluation\">#sec-relational-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0hbjkrqw\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gziyg7ut\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcktdtrm\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3cupp_tq\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ec9rmdp\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>instanceof</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InstanceofOperator\"><a href=\"#sec-instanceofoperator\">InstanceofOperator</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9mtjpkmx\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>rval</var>, ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>lval</var>)).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bfkxjj0f\">\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>privateIdentifier</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>privateName</var> be !&#160;<emu-xref aoid=\"ResolvePrivateIdentifier\"><a href=\"#sec-resolve-private-identifier\">ResolvePrivateIdentifier</a></emu-xref>(<var>privateEnv</var>, <var>privateIdentifier</var>).</li><li>If !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>privateName</var>, <var>rval</var>) is not <emu-const>empty</emu-const>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-methoddefinitionevaluation": {"num": "15.4.5", "title": "#sec-runtime-semantics-methoddefinitionevaluation Runtime Semantics: MethodDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-methoddefinitionevaluation\" oldids=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation,sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation,sec-asyncgenerator-definitions-propertydefinitionevaluation,sec-async-function-definitions-PropertyDefinitionEvaluation\" type=\"sdo\" aoid=\"MethodDefinitionEvaluation\"><span id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\"></span><span id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\"></span><span id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\"></span><span id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-methoddefinitionevaluation\">#sec-runtime-semantics-methoddefinitionevaluation</span> Runtime Semantics: MethodDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-w_uDCOXP\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>methodDef</var>.[[Key]], <var>object</var>, <var>methodDef</var>.[[Closure]], <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s7vk7pda\" id=\"prod-JtMhObe9\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>closure</var>, [[Set]]: <emu-val>undefined</emu-val> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lbu40xzc\" id=\"prod-tr90svxc\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <emu-val>undefined</emu-val>, [[Set]]: <var>closure</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-qDk-XFAF\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>propKey</var>, <var>object</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-lPECR135\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>propKey</var>, <var>object</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-a75_jVUN\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>propKey</var>, <var>object</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-privateelementfind": {"num": "7.3.26", "title": "#sec-privateelementfind PrivateElementFind ( P, O )", "html": "<emu-clause id=\"sec-privateelementfind\" aoid=\"PrivateElementFind\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateelementfind\">#sec-privateelementfind</span> PrivateElementFind ( <var>P</var>, <var>O</var> )</h1>\n      <p>The abstract operation PrivateElementFind takes arguments <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>) and <var>O</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>O</var>.[[PrivateElements]] contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>P</var>, then<ol><li>Let <var>entry</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li>Return <var>entry</var>.</li></ol></li><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getvalue": {"num": "6.2.4.5", "title": "#sec-getvalue GetValue ( V )", "html": "<emu-clause id=\"sec-getvalue\" aoid=\"GetValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getvalue\">#sec-getvalue</span> GetValue ( <var>V</var> )</h1>\n        <p>The abstract operation GetValue takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li>If <var>V</var> is not a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, return <var>V</var>.</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li id=\"step-getvalue-toobject\">Let <var>baseObj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>V</var>.[[Base]]).</li><li>If <emu-xref aoid=\"IsPrivateReference\"><a href=\"#sec-isprivatereference\">IsPrivateReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"PrivateGet\"><a href=\"#sec-privateget\">PrivateGet</a></emu-xref>(<var>V</var>.[[ReferencedName]], <var>baseObj</var>).</li></ol></li><li>Return ? <var>baseObj</var>.[[Get]](<var>V</var>.[[ReferencedName]], <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>V</var>)).</li></ol></li><li>Else,<ol><li>Let <var>base</var> be <var>V</var>.[[Base]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>base</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Return ? <var>base</var>.GetBindingValue(<var>V</var>.[[ReferencedName]], <var>V</var>.[[Strict]]) (see <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\" class=\"excluded-xref\" excluded-id=\"sec-environment-records\">#sec-environment-records</a></emu-xref>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The object that may be created in step <emu-xref href=\"#step-getvalue-toobject\"><a href=\"#step-getvalue-toobject\">4.a</a></emu-xref> is not accessible outside of the above abstract operation and the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> [[Get]] internal method. An implementation might choose to avoid the actual creation of the object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-initializeinstanceelements": {"num": "7.3.32", "title": "#sec-initializeinstanceelements InitializeInstanceElements ( O, constructor )", "html": "<emu-clause id=\"sec-initializeinstanceelements\" aoid=\"InitializeInstanceElements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializeinstanceelements\">#sec-initializeinstanceelements</span> InitializeInstanceElements ( <var>O</var>, <var>constructor</var> )</h1>\n      <p>The abstract operation InitializeInstanceElements takes arguments <var>O</var> (an Object) and <var>constructor</var> (an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>methods</var> be the value of <var>constructor</var>.[[PrivateMethods]].</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>methods</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>method</var>, <var>O</var>).</li></ol></li><li>Let <var>fields</var> be the value of <var>constructor</var>.[[Fields]].</li><li>For each element <var>fieldRecord</var> of <var>fields</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>O</var>, <var>fieldRecord</var>).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-operations-on-objects": {"num": "7.3", "title": "#sec-operations-on-objects Operations on Objects", "html": "<emu-clause id=\"sec-operations-on-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-operations-on-objects\">#sec-operations-on-objects</span> Operations on Objects</h1>\n\n    <div id=\"excluded-sec-makebasicobject\"><h1><span class=\"secnum\">7.3.1</span>#sec-makebasicobject MakeBasicObject ( internalSlotsList )</h1>...</div><div id=\"excluded-sec-get-o-p\"><h1><span class=\"secnum\">7.3.2</span>#sec-get-o-p Get ( O, P )</h1>...</div><div id=\"excluded-sec-getv\"><h1><span class=\"secnum\">7.3.3</span>#sec-getv GetV ( V, P )</h1>...</div><div id=\"excluded-sec-set-o-p-v-throw\"><h1><span class=\"secnum\">7.3.4</span>#sec-set-o-p-v-throw Set ( O, P, V, Throw )</h1>...</div><div id=\"excluded-sec-createdataproperty\"><h1><span class=\"secnum\">7.3.5</span>#sec-createdataproperty CreateDataProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createmethodproperty\"><h1><span class=\"secnum\">7.3.6</span>#sec-createmethodproperty CreateMethodProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createdatapropertyorthrow\"><h1><span class=\"secnum\">7.3.7</span>#sec-createdatapropertyorthrow CreateDataPropertyOrThrow ( O, P, V )</h1>...</div><div id=\"excluded-sec-definepropertyorthrow\"><h1><span class=\"secnum\">7.3.8</span>#sec-definepropertyorthrow DefinePropertyOrThrow ( O, P, desc )</h1>...</div><div id=\"excluded-sec-deletepropertyorthrow\"><h1><span class=\"secnum\">7.3.9</span>#sec-deletepropertyorthrow DeletePropertyOrThrow ( O, P )</h1>...</div><div id=\"excluded-sec-getmethod\"><h1><span class=\"secnum\">7.3.10</span>#sec-getmethod GetMethod ( V, P )</h1>...</div><div id=\"excluded-sec-hasproperty\"><h1><span class=\"secnum\">7.3.11</span>#sec-hasproperty HasProperty ( O, P )</h1>...</div><div id=\"excluded-sec-hasownproperty\"><h1><span class=\"secnum\">7.3.12</span>#sec-hasownproperty HasOwnProperty ( O, P )</h1>...</div><div id=\"excluded-sec-call\"><h1><span class=\"secnum\">7.3.13</span>#sec-call Call ( F, V [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-construct\"><h1><span class=\"secnum\">7.3.14</span>#sec-construct Construct ( F [ , argumentsList [ , newTarget ] ] )</h1>...</div><div id=\"excluded-sec-setintegritylevel\"><h1><span class=\"secnum\">7.3.15</span>#sec-setintegritylevel SetIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-testintegritylevel\"><h1><span class=\"secnum\">7.3.16</span>#sec-testintegritylevel TestIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-createarrayfromlist\"><h1><span class=\"secnum\">7.3.17</span>#sec-createarrayfromlist CreateArrayFromList ( elements )</h1>...</div><div id=\"excluded-sec-lengthofarraylike\"><h1><span class=\"secnum\">7.3.18</span>#sec-lengthofarraylike LengthOfArrayLike ( obj )</h1>...</div><div id=\"excluded-sec-createlistfromarraylike\"><h1><span class=\"secnum\">7.3.19</span>#sec-createlistfromarraylike CreateListFromArrayLike ( obj [ , elementTypes ] )</h1>...</div><div id=\"excluded-sec-invoke\"><h1><span class=\"secnum\">7.3.20</span>#sec-invoke Invoke ( V, P [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-ordinaryhasinstance\"><h1><span class=\"secnum\">7.3.21</span>#sec-ordinaryhasinstance OrdinaryHasInstance ( C, O )</h1>...</div><div id=\"excluded-sec-speciesconstructor\"><h1><span class=\"secnum\">7.3.22</span>#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )</h1>...</div><div id=\"excluded-sec-enumerableownpropertynames\"><h1><span class=\"secnum\">7.3.23</span>#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )</h1>...</div><div id=\"excluded-sec-getfunctionrealm\"><h1><span class=\"secnum\">7.3.24</span>#sec-getfunctionrealm GetFunctionRealm ( obj )</h1>...</div><div id=\"excluded-sec-copydataproperties\"><h1><span class=\"secnum\">7.3.25</span>#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )</h1>...</div><div id=\"excluded-sec-privateelementfind\"><h1><span class=\"secnum\">7.3.26</span>#sec-privateelementfind PrivateElementFind ( P, O )</h1>...</div><div id=\"excluded-sec-privatefieldadd\"><h1><span class=\"secnum\">7.3.27</span>#sec-privatefieldadd PrivateFieldAdd ( P, O, value )</h1>...</div><div id=\"excluded-sec-privatemethodoraccessoradd\"><h1><span class=\"secnum\">7.3.28</span>#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( method, O )</h1>...</div><div id=\"excluded-sec-privateget\"><h1><span class=\"secnum\">7.3.29</span>#sec-privateget PrivateGet ( P, O )</h1>...</div><div id=\"excluded-sec-privateset\"><h1><span class=\"secnum\">7.3.30</span>#sec-privateset PrivateSet ( P, O, value )</h1>...</div><div id=\"excluded-sec-definefield\"><h1><span class=\"secnum\">7.3.31</span>#sec-definefield DefineField ( receiver, fieldRecord )</h1>...</div><div id=\"excluded-sec-initializeinstanceelements\"><h1><span class=\"secnum\">7.3.32</span>#sec-initializeinstanceelements InitializeInstanceElements ( O, constructor )</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "15.7.12", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" oldids=\"sec-default-constructor-functions\" type=\"sdo\" aoid=\"ClassDefinitionEvaluation\"><span id=\"sec-default-constructor-functions\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For ease of specification, private methods and accessors are included alongside private fields in the [[PrivateElements]] slot of class instances. However, any given object has either all or none of the private methods and accessors defined by a given class. This feature has been designed so that implementations may choose to implement private methods and accessors using a strategy which does not require tracking each method or accessor individually.</p>\n        <p>For example, an implementation could directly associate instance private methods with their corresponding <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> and track, for each object, which class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> have run with that object as their <code>this</code> value. Looking up an instance private method on an object then consists of checking that the class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> which defines the method has been used to initialize the object, then returning the method associated with the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>.</p>\n        <p>This differs from private fields: because field initializers can throw during class instantiation, an individual object may have some proper subset of the private fields of a given class, and so private fields must in general be tracked individually.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uopqpdqx\" id=\"prod-AcPtObVs\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>outerPrivateEnvironment</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>classPrivateEnvironment</var> be <emu-xref aoid=\"NewPrivateEnvironment\"><a href=\"#sec-newprivateenvironment\">NewPrivateEnvironment</a></emu-xref>(<var>outerPrivateEnvironment</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>For each String <var>dn</var> of the <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>, do<ol><li>If <var>classPrivateEnvironment</var>.[[Names]] contains a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>dn</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is only possible for getter/setter pairs.</li></ol></li><li>Else,<ol><li>Let <var>name</var> be a new <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] value is <var>dn</var>.</li><li>Append <var>name</var> to <var>classPrivateEnvironment</var>.[[Names]].</li></ol></li></ol></li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>NOTE: The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment is <var>outerPrivateEnvironment</var> when evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>classPrivateEnvironment</var>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>Let <var>defaultConstructor</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures nothing and performs the following steps when called:<ol><li>Let <var>args</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of arguments that was passed to this function by [[Call]] or [[Construct]].</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, then<ol><li>NOTE: This branch behaves similarly to <code>constructor(...args) { super(...args); }</code>. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> method on <code>%Array.prototype%</code>, this function does not.</li><li>Let <var>func</var> be ! <var>F</var>.[[GetPrototypeOf]]().</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>args</var>, NewTarget).</li></ol></li><li>Else,<ol><li>NOTE: This branch behaves similarly to <code>constructor() {}</code>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%Object.prototype%\"</emu-val>).</li></ol></li></ol></li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>defaultConstructor</var>, 0, <var>className</var>, &#171; [[ConstructorKind]], [[SourceText]] &#187;, <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>, <var>constructorParent</var>).</li></ol></li><li>Else,<ol><li>Let <var>constructorInfo</var> be ! <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform !&#160;<emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>elements</var> be <emu-xref aoid=\"NonConstructorElements\"><a href=\"#sec-static-semantics-nonconstructorelements\">NonConstructorElements</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Let <var>instancePrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticPrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>instanceFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>e</var> of <var>elements</var>, do<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with argument <var>proto</var>.</li></ol></li><li>Else,<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with argument <var>F</var>.</li></ol></li><li>If <var>field</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>field</var>).</li></ol></li><li>Set <var>field</var> to <var>field</var>.[[Value]].</li><li>If <var>field</var> is a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, let <var>container</var> be <var>instancePrivateMethods</var>.</li><li>Else, let <var>container</var> be <var>staticPrivateMethods</var>.</li><li>If <var>container</var> contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>field</var>.[[Key]], then<ol><li>Let <var>existing</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] and <var>existing</var>.[[Kind]] are both <emu-const>accessor</emu-const>.</li><li>If <var>field</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>existing</var>.[[Get]], [[Set]]: <var>field</var>.[[Set]] }.</li></ol></li><li>Else,<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>field</var>.[[Get]], [[Set]]: <var>existing</var>.[[Set]] }.</li></ol></li><li>Replace <var>existing</var> in <var>container</var> with <var>combined</var>.</li></ol></li><li>Else,<ol><li>Append <var>field</var> to <var>container</var>.</li></ol></li></ol></li><li>Else if <var>field</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, append <var>field</var> to <var>instanceFields</var>.</li><li>Else, append <var>field</var> to <var>staticFields</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Set <var>F</var>.[[PrivateMethods]] to <var>instancePrivateMethods</var>.</li><li>Set <var>F</var>.[[Fields]] to <var>instanceFields</var>.</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>staticPrivateMethods</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>method</var>, <var>F</var>).</li></ol></li><li>For each element <var>fieldRecord</var> of <var>staticFields</var>, do<ol><li>Let <var>result</var> be <emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>F</var>, <var>fieldRecord</var>).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>result</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ecmascript-function-objects": {"num": "10.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> and has the same internal slots and the same internal methods as other <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary objects</a></emu-xref>. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"strict-function\" variants=\"strict functions\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"non-strict-function\" variants=\"non-strict functions\">non-strict function</dfn>.</p>\n    <p>In addition to [[Extensible]] and [[Prototype]], ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> also have the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</p>\n    <emu-table id=\"table-internal-slots-of-ecmascript-function-objects\" caption=\"Internal Slots of ECMAScript Function Objects\" oldids=\"table-27\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</span>: Internal Slots of ECMAScript Function Objects</figcaption><span id=\"table-27\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          </th>\n          <th>\n            Type\n          </th>\n          <th>\n            Description\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PrivateEnvironment]]\n          </td>\n          <td>\n            <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> | <emu-val>null</emu-val>\n          </td>\n          <td>\n            The <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> for <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Names</a></emu-xref> that the function was closed over. <emu-val>null</emu-val> if this function is not syntactically contained within a class. Used as the outer PrivateEnvironment for inner classes when evaluating the code of the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          </td>\n          <td>\n            The script or module in which the function was created.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and any other <emu-val>this</emu-val> value is first passed to <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          </td>\n          <td>\n            Object\n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          </td>\n          <td>\n            sequence of Unicode code points\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Fields]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Records</a></emu-xref>\n          </td>\n          <td>\n            If the function is a class, this is a list of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Records</a></emu-xref> representing the non-static fields and corresponding initializers of the class.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PrivateMethods]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElements</a></emu-xref>\n          </td>\n          <td>\n            If the function is a class, this is a list representing the non-static private methods and accessors of the class.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ClassFieldInitializerName]]\n          </td>\n          <td>\n            String | Symbol | <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> | <emu-const>empty</emu-const>\n          </td>\n          <td>\n            If the function is created as the initializer of a class field, the name to use for <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of the field; <emu-const>empty</emu-const> otherwise.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> have the [[Call]] internal method defined here. ECMAScript functions that are also <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">10.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">10.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">10.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">10.2.4</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">10.2.5</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">10.2.6</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">10.2.7</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-definemethodproperty\"><h1><span class=\"secnum\">10.2.8</span>#sec-definemethodproperty DefineMethodProperty ( key, homeObject, closure, enumerable )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">10.2.9</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">10.2.10</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">10.2.11</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-definemethodproperty": {"num": "10.2.8", "title": "#sec-definemethodproperty DefineMethodProperty ( key, homeObject, closure, enumerable )", "html": "<emu-clause id=\"sec-definemethodproperty\" aoid=\"DefineMethodProperty\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-definemethodproperty\">#sec-definemethodproperty</span> DefineMethodProperty ( <var>key</var>, <var>homeObject</var>, <var>closure</var>, <var>enumerable</var> )</h1>\n      <p>The abstract operation DefineMethodProperty takes arguments <var>key</var> (a property key or <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>), <var>homeObject</var> (an Object), <var>closure</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>), and <var>enumerable</var> (a Boolean). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>key</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>key</var>, [[Kind]]: <emu-const>method</emu-const>, [[Value]]: <var>closure</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>homeObject</var>, <var>key</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privatefieldadd": {"num": "7.3.27", "title": "#sec-privatefieldadd PrivateFieldAdd ( P, O, value )", "html": "<emu-clause id=\"sec-privatefieldadd\" aoid=\"PrivateFieldAdd\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privatefieldadd\">#sec-privatefieldadd</span> PrivateFieldAdd ( <var>P</var>, <var>O</var>, <var>value</var> )</h1>\n      <p>The abstract operation PrivateFieldAdd takes arguments <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>), <var>O</var> (an Object), and <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>P</var>, <var>O</var>).</li><li>If <var>entry</var> is not <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>P</var>, [[Kind]]: <emu-const>field</emu-const>, [[Value]]: <var>value</var> } to <var>O</var>.[[PrivateElements]].</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privateget": {"num": "7.3.29", "title": "#sec-privateget PrivateGet ( P, O )", "html": "<emu-clause id=\"sec-privateget\" aoid=\"PrivateGet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateget\">#sec-privateget</span> PrivateGet ( <var>P</var>, <var>O</var> )</h1>\n      <p>The abstract operation PrivateGet takes arguments <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>) and <var>O</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>P</var>, <var>O</var>).</li><li>If <var>entry</var> is <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>entry</var>.[[Kind]] is <emu-const>field</emu-const> or <emu-const>method</emu-const>, then<ol><li>Return <var>entry</var>.[[Value]].</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>entry</var>.[[Kind]] is <emu-const>accessor</emu-const>.</li><li>If <var>entry</var>.[[Get]] is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>getter</var> be <var>entry</var>.[[Get]].</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>getter</var>, <var>O</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 33"}}, "to": {"secList": ["sec-definefield", "sec-privateset", "sec-privatemethodoraccessoradd", "sec-putvalue", "sec-relational-operators-runtime-semantics-evaluation", "sec-runtime-semantics-methoddefinitionevaluation", "sec-privateelementfind", "sec-getvalue", "sec-initializeinstanceelements", "sec-operations-on-objects", "sec-runtime-semantics-classdefinitionevaluation", "sec-ecmascript-function-objects", "sec-definemethodproperty", "sec-privatefieldadd", "sec-privateget"], "secData": {"sec-definefield": {"num": "7.3.31", "title": "#sec-definefield DefineField ( receiver, fieldRecord )", "html": "<emu-clause id=\"sec-definefield\" aoid=\"DefineField\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-definefield\">#sec-definefield</span> DefineField ( <var>receiver</var>, <var>fieldRecord</var> )</h1>\n      <p>The abstract operation DefineField takes arguments <var>receiver</var> (an Object) and <var>fieldRecord</var> (a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>fieldName</var> be <var>fieldRecord</var>.[[Name]].</li><li>Let <var>initializer</var> be <var>fieldRecord</var>.[[Initializer]].</li><li>If <var>initializer</var> is not <emu-const>empty</emu-const>, then<ol><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>initializer</var>, <var>receiver</var>).</li></ol></li><li>Else, let <var>initValue</var> be <emu-val>undefined</emu-val>.</li><li>If <var>fieldName</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"PrivateFieldAdd\"><a href=\"#sec-privatefieldadd\">PrivateFieldAdd</a></emu-xref>(<var>receiver</var>, <var>fieldName</var>, <var>initValue</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>fieldName</var>) is <emu-val>true</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>receiver</var>, <var>fieldName</var>, <var>initValue</var>).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privateset": {"num": "7.3.30", "title": "#sec-privateset PrivateSet ( O, P, value )", "html": "<emu-clause id=\"sec-privateset\" aoid=\"PrivateSet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateset\">#sec-privateset</span> PrivateSet ( <var>O</var>, <var>P</var>, <var>value</var> )</h1>\n      <p>The abstract operation PrivateSet takes arguments <var>O</var> (an Object), <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>), and <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>O</var>, <var>P</var>).</li><li>If <var>entry</var> is <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>entry</var>.[[Kind]] is <emu-const>field</emu-const>, then<ol><li>Set <var>entry</var>.[[Value]] to <var>value</var>.</li></ol></li><li>Else if <var>entry</var>.[[Kind]] is <emu-const>method</emu-const>, then<ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>entry</var>.[[Kind]] is <emu-const>accessor</emu-const>.</li><li>If <var>entry</var>.[[Set]] is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>setter</var> be <var>entry</var>.[[Set]].</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>setter</var>, <var>O</var>, &#171; <var>value</var> &#187;).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privatemethodoraccessoradd": {"num": "7.3.28", "title": "#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( O, method )", "html": "<emu-clause id=\"sec-privatemethodoraccessoradd\" aoid=\"PrivateMethodOrAccessorAdd\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privatemethodoraccessoradd\">#sec-privatemethodoraccessoradd</span> PrivateMethodOrAccessorAdd ( <var>O</var>, <var>method</var> )</h1>\n      <p>The abstract operation PrivateMethodOrAccessorAdd takes arguments <var>O</var> (an Object) and <var>method</var> (a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>method</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>O</var>, <var>method</var>.[[Key]]).</li><li>If <var>entry</var> is not <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>method</var> to <var>O</var>.[[PrivateElements]].</li><li>NOTE: The values for private methods and accessors are shared across instances. This step does not create a new copy of the method or accessor.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-putvalue": {"num": "6.2.4.6", "title": "#sec-putvalue PutValue ( V, W )", "html": "<emu-clause id=\"sec-putvalue\" aoid=\"PutValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-putvalue\">#sec-putvalue</span> PutValue ( <var>V</var>, <var>W</var> )</h1>\n        <p>The abstract operation PutValue takes arguments <var>V</var> and <var>W</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>W</var>).</li><li>If <var>V</var> is not a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>V</var>.[[Strict]] is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>globalObj</var> be <emu-xref aoid=\"GetGlobalObject\"><a href=\"#sec-getglobalobject\">GetGlobalObject</a></emu-xref>().</li><li>Return ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>globalObj</var>, <var>V</var>.[[ReferencedName]], <var>W</var>, <emu-val>false</emu-val>).</li></ol></li><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li id=\"step-putvalue-toobject\">Let <var>baseObj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>V</var>.[[Base]]).</li><li>If <emu-xref aoid=\"IsPrivateReference\"><a href=\"#sec-isprivatereference\">IsPrivateReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"PrivateSet\"><a href=\"#sec-privateset\">PrivateSet</a></emu-xref>(<var>baseObj</var>, <var>V</var>.[[ReferencedName]], <var>W</var>).</li></ol></li><li>Let <var>succeeded</var> be ? <var>baseObj</var>.[[Set]](<var>V</var>.[[ReferencedName]], <var>W</var>, <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>V</var>)).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val> and <var>V</var>.[[Strict]] is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return.</li></ol></li><li>Else,<ol><li>Let <var>base</var> be <var>V</var>.[[Base]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>base</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Return ? <var>base</var>.SetMutableBinding(<var>V</var>.[[ReferencedName]], <var>W</var>, <var>V</var>.[[Strict]]) (see <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\" class=\"excluded-xref\" excluded-id=\"sec-environment-records\">#sec-environment-records</a></emu-xref>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The object that may be created in step <emu-xref href=\"#step-putvalue-toobject\"><a href=\"#step-putvalue-toobject\">5.a</a></emu-xref> is not accessible outside of the above abstract operation and the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> [[Set]] internal method. An implementation might choose to avoid the actual creation of that object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-relational-operators-runtime-semantics-evaluation": {"num": "13.10.1", "title": "#sec-relational-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-runtime-semantics-evaluation\">#sec-relational-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0hbjkrqw\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gziyg7ut\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcktdtrm\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3cupp_tq\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ec9rmdp\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>instanceof</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InstanceofOperator\"><a href=\"#sec-instanceofoperator\">InstanceofOperator</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9mtjpkmx\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>rval</var>, ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>lval</var>)).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bfkxjj0f\">\n        <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>privateIdentifier</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>privateName</var> be !&#160;<emu-xref aoid=\"ResolvePrivateIdentifier\"><a href=\"#sec-resolve-private-identifier\">ResolvePrivateIdentifier</a></emu-xref>(<var>privateEnv</var>, <var>privateIdentifier</var>).</li><li>If !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>rval</var>, <var>privateName</var>) is not <emu-const>empty</emu-const>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-methoddefinitionevaluation": {"num": "15.4.5", "title": "#sec-runtime-semantics-methoddefinitionevaluation Runtime Semantics: MethodDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-methoddefinitionevaluation\" oldids=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation,sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation,sec-asyncgenerator-definitions-propertydefinitionevaluation,sec-async-function-definitions-PropertyDefinitionEvaluation\" type=\"sdo\" aoid=\"MethodDefinitionEvaluation\"><span id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\"></span><span id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\"></span><span id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\"></span><span id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-methoddefinitionevaluation\">#sec-runtime-semantics-methoddefinitionevaluation</span> Runtime Semantics: MethodDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-w_uDCOXP\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>methodDef</var>.[[Closure]], <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s7vk7pda\" id=\"prod-JtMhObe9\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>closure</var>, [[Set]]: <emu-val>undefined</emu-val> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lbu40xzc\" id=\"prod-tr90svxc\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <emu-val>undefined</emu-val>, [[Set]]: <var>closure</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-qDk-XFAF\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-lPECR135\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-a75_jVUN\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-privateelementfind": {"num": "7.3.26", "title": "#sec-privateelementfind PrivateElementFind ( O, P )", "html": "<emu-clause id=\"sec-privateelementfind\" aoid=\"PrivateElementFind\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateelementfind\">#sec-privateelementfind</span> PrivateElementFind ( <var>O</var>, <var>P</var> )</h1>\n      <p>The abstract operation PrivateElementFind takes arguments <var>O</var> (an Object) and <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>O</var>.[[PrivateElements]] contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>P</var>, then<ol><li>Let <var>entry</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li>Return <var>entry</var>.</li></ol></li><li>Return <emu-const>empty</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getvalue": {"num": "6.2.4.5", "title": "#sec-getvalue GetValue ( V )", "html": "<emu-clause id=\"sec-getvalue\" aoid=\"GetValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getvalue\">#sec-getvalue</span> GetValue ( <var>V</var> )</h1>\n        <p>The abstract operation GetValue takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li>If <var>V</var> is not a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>, return <var>V</var>.</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li id=\"step-getvalue-toobject\">Let <var>baseObj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>V</var>.[[Base]]).</li><li>If <emu-xref aoid=\"IsPrivateReference\"><a href=\"#sec-isprivatereference\">IsPrivateReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"PrivateGet\"><a href=\"#sec-privateget\">PrivateGet</a></emu-xref>(<var>baseObj</var>, <var>V</var>.[[ReferencedName]]).</li></ol></li><li>Return ? <var>baseObj</var>.[[Get]](<var>V</var>.[[ReferencedName]], <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>V</var>)).</li></ol></li><li>Else,<ol><li>Let <var>base</var> be <var>V</var>.[[Base]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>base</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Return ? <var>base</var>.GetBindingValue(<var>V</var>.[[ReferencedName]], <var>V</var>.[[Strict]]) (see <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\" class=\"excluded-xref\" excluded-id=\"sec-environment-records\">#sec-environment-records</a></emu-xref>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The object that may be created in step <emu-xref href=\"#step-getvalue-toobject\"><a href=\"#step-getvalue-toobject\">4.a</a></emu-xref> is not accessible outside of the above abstract operation and the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> [[Get]] internal method. An implementation might choose to avoid the actual creation of the object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-initializeinstanceelements": {"num": "7.3.32", "title": "#sec-initializeinstanceelements InitializeInstanceElements ( O, constructor )", "html": "<emu-clause id=\"sec-initializeinstanceelements\" aoid=\"InitializeInstanceElements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializeinstanceelements\">#sec-initializeinstanceelements</span> InitializeInstanceElements ( <var>O</var>, <var>constructor</var> )</h1>\n      <p>The abstract operation InitializeInstanceElements takes arguments <var>O</var> (an Object) and <var>constructor</var> (an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>methods</var> be the value of <var>constructor</var>.[[PrivateMethods]].</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>methods</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>O</var>, <var>method</var>).</li></ol></li><li>Let <var>fields</var> be the value of <var>constructor</var>.[[Fields]].</li><li>For each element <var>fieldRecord</var> of <var>fields</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>O</var>, <var>fieldRecord</var>).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-operations-on-objects": {"num": "7.3", "title": "#sec-operations-on-objects Operations on Objects", "html": "<emu-clause id=\"sec-operations-on-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-operations-on-objects\">#sec-operations-on-objects</span> Operations on Objects</h1>\n\n    <div id=\"excluded-sec-makebasicobject\"><h1><span class=\"secnum\">7.3.1</span>#sec-makebasicobject MakeBasicObject ( internalSlotsList )</h1>...</div><div id=\"excluded-sec-get-o-p\"><h1><span class=\"secnum\">7.3.2</span>#sec-get-o-p Get ( O, P )</h1>...</div><div id=\"excluded-sec-getv\"><h1><span class=\"secnum\">7.3.3</span>#sec-getv GetV ( V, P )</h1>...</div><div id=\"excluded-sec-set-o-p-v-throw\"><h1><span class=\"secnum\">7.3.4</span>#sec-set-o-p-v-throw Set ( O, P, V, Throw )</h1>...</div><div id=\"excluded-sec-createdataproperty\"><h1><span class=\"secnum\">7.3.5</span>#sec-createdataproperty CreateDataProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createmethodproperty\"><h1><span class=\"secnum\">7.3.6</span>#sec-createmethodproperty CreateMethodProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createdatapropertyorthrow\"><h1><span class=\"secnum\">7.3.7</span>#sec-createdatapropertyorthrow CreateDataPropertyOrThrow ( O, P, V )</h1>...</div><div id=\"excluded-sec-definepropertyorthrow\"><h1><span class=\"secnum\">7.3.8</span>#sec-definepropertyorthrow DefinePropertyOrThrow ( O, P, desc )</h1>...</div><div id=\"excluded-sec-deletepropertyorthrow\"><h1><span class=\"secnum\">7.3.9</span>#sec-deletepropertyorthrow DeletePropertyOrThrow ( O, P )</h1>...</div><div id=\"excluded-sec-getmethod\"><h1><span class=\"secnum\">7.3.10</span>#sec-getmethod GetMethod ( V, P )</h1>...</div><div id=\"excluded-sec-hasproperty\"><h1><span class=\"secnum\">7.3.11</span>#sec-hasproperty HasProperty ( O, P )</h1>...</div><div id=\"excluded-sec-hasownproperty\"><h1><span class=\"secnum\">7.3.12</span>#sec-hasownproperty HasOwnProperty ( O, P )</h1>...</div><div id=\"excluded-sec-call\"><h1><span class=\"secnum\">7.3.13</span>#sec-call Call ( F, V [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-construct\"><h1><span class=\"secnum\">7.3.14</span>#sec-construct Construct ( F [ , argumentsList [ , newTarget ] ] )</h1>...</div><div id=\"excluded-sec-setintegritylevel\"><h1><span class=\"secnum\">7.3.15</span>#sec-setintegritylevel SetIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-testintegritylevel\"><h1><span class=\"secnum\">7.3.16</span>#sec-testintegritylevel TestIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-createarrayfromlist\"><h1><span class=\"secnum\">7.3.17</span>#sec-createarrayfromlist CreateArrayFromList ( elements )</h1>...</div><div id=\"excluded-sec-lengthofarraylike\"><h1><span class=\"secnum\">7.3.18</span>#sec-lengthofarraylike LengthOfArrayLike ( obj )</h1>...</div><div id=\"excluded-sec-createlistfromarraylike\"><h1><span class=\"secnum\">7.3.19</span>#sec-createlistfromarraylike CreateListFromArrayLike ( obj [ , elementTypes ] )</h1>...</div><div id=\"excluded-sec-invoke\"><h1><span class=\"secnum\">7.3.20</span>#sec-invoke Invoke ( V, P [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-ordinaryhasinstance\"><h1><span class=\"secnum\">7.3.21</span>#sec-ordinaryhasinstance OrdinaryHasInstance ( C, O )</h1>...</div><div id=\"excluded-sec-speciesconstructor\"><h1><span class=\"secnum\">7.3.22</span>#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )</h1>...</div><div id=\"excluded-sec-enumerableownpropertynames\"><h1><span class=\"secnum\">7.3.23</span>#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )</h1>...</div><div id=\"excluded-sec-getfunctionrealm\"><h1><span class=\"secnum\">7.3.24</span>#sec-getfunctionrealm GetFunctionRealm ( obj )</h1>...</div><div id=\"excluded-sec-copydataproperties\"><h1><span class=\"secnum\">7.3.25</span>#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )</h1>...</div><div id=\"excluded-sec-privateelementfind\"><h1><span class=\"secnum\">7.3.26</span>#sec-privateelementfind PrivateElementFind ( O, P )</h1>...</div><div id=\"excluded-sec-privatefieldadd\"><h1><span class=\"secnum\">7.3.27</span>#sec-privatefieldadd PrivateFieldAdd ( O, P, value )</h1>...</div><div id=\"excluded-sec-privatemethodoraccessoradd\"><h1><span class=\"secnum\">7.3.28</span>#sec-privatemethodoraccessoradd PrivateMethodOrAccessorAdd ( O, method )</h1>...</div><div id=\"excluded-sec-privateget\"><h1><span class=\"secnum\">7.3.29</span>#sec-privateget PrivateGet ( O, P )</h1>...</div><div id=\"excluded-sec-privateset\"><h1><span class=\"secnum\">7.3.30</span>#sec-privateset PrivateSet ( O, P, value )</h1>...</div><div id=\"excluded-sec-definefield\"><h1><span class=\"secnum\">7.3.31</span>#sec-definefield DefineField ( receiver, fieldRecord )</h1>...</div><div id=\"excluded-sec-initializeinstanceelements\"><h1><span class=\"secnum\">7.3.32</span>#sec-initializeinstanceelements InitializeInstanceElements ( O, constructor )</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "15.7.12", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" oldids=\"sec-default-constructor-functions\" type=\"sdo\" aoid=\"ClassDefinitionEvaluation\"><span id=\"sec-default-constructor-functions\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For ease of specification, private methods and accessors are included alongside private fields in the [[PrivateElements]] slot of class instances. However, any given object has either all or none of the private methods and accessors defined by a given class. This feature has been designed so that implementations may choose to implement private methods and accessors using a strategy which does not require tracking each method or accessor individually.</p>\n        <p>For example, an implementation could directly associate instance private methods with their corresponding <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> and track, for each object, which class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> have run with that object as their <code>this</code> value. Looking up an instance private method on an object then consists of checking that the class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> which defines the method has been used to initialize the object, then returning the method associated with the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>.</p>\n        <p>This differs from private fields: because field initializers can throw during class instantiation, an individual object may have some proper subset of the private fields of a given class, and so private fields must in general be tracked individually.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uopqpdqx\" id=\"prod-AcPtObVs\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>outerPrivateEnvironment</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>classPrivateEnvironment</var> be <emu-xref aoid=\"NewPrivateEnvironment\"><a href=\"#sec-newprivateenvironment\">NewPrivateEnvironment</a></emu-xref>(<var>outerPrivateEnvironment</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>For each String <var>dn</var> of the <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>, do<ol><li>If <var>classPrivateEnvironment</var>.[[Names]] contains a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>dn</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is only possible for getter/setter pairs.</li></ol></li><li>Else,<ol><li>Let <var>name</var> be a new <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] value is <var>dn</var>.</li><li>Append <var>name</var> to <var>classPrivateEnvironment</var>.[[Names]].</li></ol></li></ol></li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>NOTE: The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment is <var>outerPrivateEnvironment</var> when evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>classPrivateEnvironment</var>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>Let <var>defaultConstructor</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures nothing and performs the following steps when called:<ol><li>Let <var>args</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of arguments that was passed to this function by [[Call]] or [[Construct]].</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, then<ol><li>NOTE: This branch behaves similarly to <code>constructor(...args) { super(...args); }</code>. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> method on <code>%Array.prototype%</code>, this function does not.</li><li>Let <var>func</var> be ! <var>F</var>.[[GetPrototypeOf]]().</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>args</var>, NewTarget).</li></ol></li><li>Else,<ol><li>NOTE: This branch behaves similarly to <code>constructor() {}</code>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%Object.prototype%\"</emu-val>).</li></ol></li></ol></li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>defaultConstructor</var>, 0, <var>className</var>, &#171; [[ConstructorKind]], [[SourceText]] &#187;, <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>, <var>constructorParent</var>).</li></ol></li><li>Else,<ol><li>Let <var>constructorInfo</var> be ! <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform !&#160;<emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>elements</var> be <emu-xref aoid=\"NonConstructorElements\"><a href=\"#sec-static-semantics-nonconstructorelements\">NonConstructorElements</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Let <var>instancePrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticPrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>instanceFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>e</var> of <var>elements</var>, do<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with argument <var>proto</var>.</li></ol></li><li>Else,<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with argument <var>F</var>.</li></ol></li><li>If <var>field</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>field</var>).</li></ol></li><li>Set <var>field</var> to <var>field</var>.[[Value]].</li><li>If <var>field</var> is a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, let <var>container</var> be <var>instancePrivateMethods</var>.</li><li>Else, let <var>container</var> be <var>staticPrivateMethods</var>.</li><li>If <var>container</var> contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>field</var>.[[Key]], then<ol><li>Let <var>existing</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] and <var>existing</var>.[[Kind]] are both <emu-const>accessor</emu-const>.</li><li>If <var>field</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>existing</var>.[[Get]], [[Set]]: <var>field</var>.[[Set]] }.</li></ol></li><li>Else,<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>field</var>.[[Get]], [[Set]]: <var>existing</var>.[[Set]] }.</li></ol></li><li>Replace <var>existing</var> in <var>container</var> with <var>combined</var>.</li></ol></li><li>Else,<ol><li>Append <var>field</var> to <var>container</var>.</li></ol></li></ol></li><li>Else if <var>field</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, append <var>field</var> to <var>instanceFields</var>.</li><li>Else, append <var>field</var> to <var>staticFields</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Set <var>F</var>.[[PrivateMethods]] to <var>instancePrivateMethods</var>.</li><li>Set <var>F</var>.[[Fields]] to <var>instanceFields</var>.</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>staticPrivateMethods</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>F</var>, <var>method</var>).</li></ol></li><li>For each element <var>fieldRecord</var> of <var>staticFields</var>, do<ol><li>Let <var>result</var> be <emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>F</var>, <var>fieldRecord</var>).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>result</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ecmascript-function-objects": {"num": "10.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> and has the same internal slots and the same internal methods as other <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary objects</a></emu-xref>. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"strict-function\" variants=\"strict functions\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"non-strict-function\" variants=\"non-strict functions\">non-strict function</dfn>.</p>\n    <p>In addition to [[Extensible]] and [[Prototype]], ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> also have the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</p>\n    <emu-table id=\"table-internal-slots-of-ecmascript-function-objects\" caption=\"Internal Slots of ECMAScript Function Objects\" oldids=\"table-27\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</span>: Internal Slots of ECMAScript Function Objects</figcaption><span id=\"table-27\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          </th>\n          <th>\n            Type\n          </th>\n          <th>\n            Description\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PrivateEnvironment]]\n          </td>\n          <td>\n            <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> | <emu-val>null</emu-val>\n          </td>\n          <td>\n            The <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> for <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Names</a></emu-xref> that the function was closed over. <emu-val>null</emu-val> if this function is not syntactically contained within a class. Used as the outer PrivateEnvironment for inner classes when evaluating the code of the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          </td>\n          <td>\n            The script or module in which the function was created.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and any other <emu-val>this</emu-val> value is first passed to <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          </td>\n          <td>\n            Object\n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          </td>\n          <td>\n            sequence of Unicode code points\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Fields]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Records</a></emu-xref>\n          </td>\n          <td>\n            If the function is a class, this is a list of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Records</a></emu-xref> representing the non-static fields and corresponding initializers of the class.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PrivateMethods]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElements</a></emu-xref>\n          </td>\n          <td>\n            If the function is a class, this is a list representing the non-static private methods and accessors of the class.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ClassFieldInitializerName]]\n          </td>\n          <td>\n            String | Symbol | <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> | <emu-const>empty</emu-const>\n          </td>\n          <td>\n            If the function is created as the initializer of a class field, the name to use for <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of the field; <emu-const>empty</emu-const> otherwise.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> have the [[Call]] internal method defined here. ECMAScript functions that are also <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructors</a></emu-xref> in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">10.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">10.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">10.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">10.2.4</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">10.2.5</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">10.2.6</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">10.2.7</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-definemethodproperty\"><h1><span class=\"secnum\">10.2.8</span>#sec-definemethodproperty DefineMethodProperty ( homeObject, key, closure, enumerable )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">10.2.9</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">10.2.10</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">10.2.11</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-definemethodproperty": {"num": "10.2.8", "title": "#sec-definemethodproperty DefineMethodProperty ( homeObject, key, closure, enumerable )", "html": "<emu-clause id=\"sec-definemethodproperty\" aoid=\"DefineMethodProperty\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-definemethodproperty\">#sec-definemethodproperty</span> DefineMethodProperty ( <var>homeObject</var>, <var>key</var>, <var>closure</var>, <var>enumerable</var> )</h1>\n      <p>The abstract operation DefineMethodProperty takes arguments <var>homeObject</var> (an Object), <var>key</var> (a property key or <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>), <var>closure</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>), and <var>enumerable</var> (a Boolean). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>key</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>key</var>, [[Kind]]: <emu-const>method</emu-const>, [[Value]]: <var>closure</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>homeObject</var>, <var>key</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privatefieldadd": {"num": "7.3.27", "title": "#sec-privatefieldadd PrivateFieldAdd ( O, P, value )", "html": "<emu-clause id=\"sec-privatefieldadd\" aoid=\"PrivateFieldAdd\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privatefieldadd\">#sec-privatefieldadd</span> PrivateFieldAdd ( <var>O</var>, <var>P</var>, <var>value</var> )</h1>\n      <p>The abstract operation PrivateFieldAdd takes arguments <var>O</var> (an Object), <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>), and <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>O</var>, <var>P</var>).</li><li>If <var>entry</var> is not <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>P</var>, [[Kind]]: <emu-const>field</emu-const>, [[Value]]: <var>value</var> } to <var>O</var>.[[PrivateElements]].</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-privateget": {"num": "7.3.29", "title": "#sec-privateget PrivateGet ( O, P )", "html": "<emu-clause id=\"sec-privateget\" aoid=\"PrivateGet\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-privateget\">#sec-privateget</span> PrivateGet ( <var>O</var>, <var>P</var> )</h1>\n      <p>The abstract operation PrivateGet takes arguments <var>O</var> (an Object) and <var>P</var> (a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"PrivateElementFind\"><a href=\"#sec-privateelementfind\">PrivateElementFind</a></emu-xref>(<var>O</var>, <var>P</var>).</li><li>If <var>entry</var> is <emu-const>empty</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>entry</var>.[[Kind]] is <emu-const>field</emu-const> or <emu-const>method</emu-const>, then<ol><li>Return <var>entry</var>.[[Value]].</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>entry</var>.[[Kind]] is <emu-const>accessor</emu-const>.</li><li>If <var>entry</var>.[[Get]] is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>getter</var> be <var>entry</var>.[[Get]].</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>getter</var>, <var>O</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 33"}}}