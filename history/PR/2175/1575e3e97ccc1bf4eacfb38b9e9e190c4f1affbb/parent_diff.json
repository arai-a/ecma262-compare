{"from": {"secList": ["sec-IsHTMLDDA-internal-slot", "sec-object-initializer-runtime-semantics-propertydefinitionevaluation", "sec-block-level-function-declarations-web-legacy-compatibility-semantics", "sec-other-additional-features", "sec-__proto__-property-names-in-object-initializers", "sec-object-initializer-static-semantics-early-errors", "sec-json.parse"], "secData": {"sec-IsHTMLDDA-internal-slot": {"num": "B.3.7", "title": "#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot\">#sec-IsHTMLDDA-internal-slot</span> The [[IsHTMLDDA]] Internal Slot</h1>\n      <p>An <dfn>[[IsHTMLDDA]] internal slot</dfn> may exist on <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> objects. Objects with an [[IsHTMLDDA]] internal slot behave like <emu-val>undefined</emu-val> in the <emu-xref href=\"#sec-toboolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref> and <emu-xref href=\"#sec-abstract-equality-comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and when used as an operand for the <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code> operator</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Objects with an [[IsHTMLDDA]] internal slot are never created by this specification. However, the <a href=\"https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all\"><code>document.all</code> object</a> in web browsers is a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> with this slot that exists for web compatibility purposes. There are no other known examples of this type of object and implementations should not create any with the exception of <code>document.all</code>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-IsHTMLDDA-internal-slot-to-boolean\"><h1><span class=\"secnum\">B.3.7.1</span>#sec-IsHTMLDDA-internal-slot-to-boolean Changes to ToBoolean</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-aec\"><h1><span class=\"secnum\">B.3.7.2</span>#sec-IsHTMLDDA-internal-slot-aec Changes to Abstract Equality Comparison</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-typeof\"><h1><span class=\"secnum\">B.3.7.3</span>#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator</h1>...</div></emu-annex>\n  "}, "sec-object-initializer-runtime-semantics-propertydefinitionevaluation": {"num": "12.2.6.8", "title": "#sec-object-initializer-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\">#sec-object-initializer-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n        <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n        <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3152d601\"><emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Perform ? PropertyDefinitionEvaluation of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li><li>Return the result of performing PropertyDefinitionEvaluation of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5bb8853e\"><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>excludedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"CopyDataProperties\"><a href=\"#sec-copydataproperties\">CopyDataProperties</a></emu-xref>(<var>object</var>, <var>fromValue</var>, <var>excludedNames</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>propName</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propName</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f2d90b76\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative semantics for this production is given in <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-block-level-function-declarations-web-legacy-compatibility-semantics": {"num": "B.3.3", "title": "#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics", "html": "<emu-annex id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</span> Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>\n      <p>Prior to ECMAScript 2015, the ECMAScript specification did not define the occurrence of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as an element of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> statement's <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>. However, support for that form of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension and most browser-hosted ECMAScript implementations permitted them. Unfortunately, the semantics of such declarations differ among those implementations. Because of these semantic differences, existing web ECMAScript code that uses <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations is only portable among browser implementation if the usage only depends upon the semantic intersection of all of the browser implementations for such declarations. The following are the use cases that fall within that intersection semantics:</p>\n      <ol>\n        <li>\n          <p>A function is declared and only referenced within a single block</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              All occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> are within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> but also referenced by an inner function definition that is not contained within that same <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within another function <var>h</var> that is nested within <var>g</var> and no other declaration of <var>f</var> shadows the references to <var>f</var> from within <var>h</var>.\n            </li>\n            <li>\n              All invocations of <var>h</var> occur after the declaration of <var>f</var> has been evaluated.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single block but also referenced within subsequent blocks.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the function code of <var>g</var> that lexically follows the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n      </ol>\n      <p>The first use case is interoperable with the semantics of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations provided by ECMAScript 2015. Any pre-existing ECMAScript code that employs that use case will operate using the Block level function declarations semantics defined by clauses <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, <emu-xref href=\"#sec-ecmascript-language-statements-and-declarations\"><a href=\"#sec-ecmascript-language-statements-and-declarations\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-statements-and-declarations\">#sec-ecmascript-language-statements-and-declarations</a></emu-xref>, and <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>.</p>\n      <p>ECMAScript 2015 interoperability for the second and third use cases requires the following extensions to the clause <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, clause <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>, clause <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref> and clause <emu-xref href=\"#sec-globaldeclarationinstantiation\"><a href=\"#sec-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</a></emu-xref> semantics.</p>\n      <p>If an ECMAScript implementation has a mechanism for reporting diagnostic warning messages, a warning should be produced when code contains a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> for which these compatibility semantics are applied and introduce observable differences from non-compatibility semantics. For example, if a var binding is not introduced because its introduction would create an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>, a warning message should not be produced.</p>\n      <div id=\"excluded-sec-web-compat-functiondeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.1</span>#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-globaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.2</span>#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-evaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.3</span>#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-block-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.4</span>#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-switch-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.5</span>#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-web-compat-blockdeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.6</span>#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation</h1>...</div></emu-annex>\n\n    "}, "sec-other-additional-features": {"num": "B.3", "title": "#sec-other-additional-features Other Additional Features", "html": "<emu-annex id=\"sec-other-additional-features\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-other-additional-features\">#sec-other-additional-features</span> Other Additional Features</h1>\n\n    <div id=\"excluded-sec-__proto__-property-names-in-object-initializers\"><h1><span class=\"secnum\">B.3.1</span>#sec-__proto__-property-names-in-object-initializers __proto__ Property Names in Object Initializers</h1>...</div><div id=\"excluded-sec-labelled-function-declarations\"><h1><span class=\"secnum\">B.3.2</span>#sec-labelled-function-declarations Labelled Function Declarations</h1>...</div><div id=\"excluded-sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><h1><span class=\"secnum\">B.3.3</span>#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>...</div><div id=\"excluded-sec-functiondeclarations-in-ifstatement-statement-clauses\"><h1><span class=\"secnum\">B.3.4</span>#sec-functiondeclarations-in-ifstatement-statement-clauses FunctionDeclarations in IfStatement Statement Clauses</h1>...</div><div id=\"excluded-sec-variablestatements-in-catch-blocks\"><h1><span class=\"secnum\">B.3.5</span>#sec-variablestatements-in-catch-blocks VariableStatements in Catch Blocks</h1>...</div><div id=\"excluded-sec-initializers-in-forin-statement-heads\"><h1><span class=\"secnum\">B.3.6</span>#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot\"><h1><span class=\"secnum\">B.3.7</span>#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot</h1>...</div></emu-annex>\n"}, "sec-__proto__-property-names-in-object-initializers": {"num": "B.3.1", "title": "#sec-__proto__-property-names-in-object-initializers __proto__ Property Names in Object Initializers", "html": "<emu-annex id=\"sec-__proto__-property-names-in-object-initializers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</span> __proto__ Property Names in Object Initializers</h1>\n      <p>The following Early Error rule is added to those in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>. When <emu-nt><a href=\"#prod-annexB-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required the Early Error rule is <b>not</b> applied. In addition, it is not applied when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or a <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</p>\n      <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\" id=\"prod-annexB-ObjectLiteral\">\n    <emu-nt><a href=\"#prod-annexB-ObjectLiteral\">ObjectLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1bef8ed3\"><emu-t>{</emu-t><emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ObjectLiteral\">ObjectLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8703527f\"><emu-t>{</emu-t><emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-t>,</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if PropertyNameList of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" id=\"prod-annexB-PropertyDefinition\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f2d90b76\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by PropertyNameList does not include string literal property names defined as using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n      </div></emu-note>\n      <p>In <emu-xref href=\"#sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\">#sec-object-initializer-runtime-semantics-propertydefinitionevaluation</a></emu-xref> the PropertyDefinitionEvaluation algorithm for the production\n        <br>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f2d90b76\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <br>\n        is replaced with the following definition:</p>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f2d90b76\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val> and if IsComputedPropertyKey(<emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-object-initializer-static-semantics-early-errors": {"num": "12.2.6.1", "title": "#sec-object-initializer-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-object-initializer-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4bc22514\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if HasDirectSuper of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>In addition to describing an actual object initializer the <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> productions are also used as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> and may be recognized as part of a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>. When <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required the following Early Error rules are <b>not</b> applied. In addition, they are not applied when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"df01ba41\"><emu-nt><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            Always throw a Syntax Error if code matches this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This production exists so that <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> can serve as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt>. It cannot occur in an actual object initializer.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-json.parse": {"num": "24.5.1", "title": "#sec-json.parse JSON.parse ( text [ , reviver ] )", "html": "<emu-clause id=\"sec-json.parse\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.parse\">#sec-json.parse</span> JSON.parse ( <var>text</var> [ , <var>reviver</var> ] )</h1>\n      <p>The <code>parse</code> function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON format represents literals, arrays, and objects with a syntax similar to the syntax for ECMAScript literals, Array Initializers, and Object Initializers. After parsing, JSON objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript Array instances. JSON strings, numbers, booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and <emu-val>null</emu-val>.</p>\n      <p>The optional <var>reviver</var> parameter is a function that takes two parameters, <var>key</var> and <var>value</var>. It can filter and transform the results. It is called with each of the <var>key</var>/<var>value</var> pairs produced by the parse, and its return value is used instead of the original value. If it returns what it received, the structure is not modified. If it returns <emu-val>undefined</emu-val> then the property is deleted from the result.</p>\n      <emu-alg><ol><li>Let <var>jsonString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>text</var>).</li><li id=\"step-json-parse-validate\">Parse !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>jsonString</var>) as a JSON text as specified in ECMA-404. Throw a <emu-val>SyntaxError</emu-val> exception if it is not a valid JSON text as defined in that specification.</li><li>Let <var>scriptString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"(\"</emu-val>, <var>jsonString</var>, and <emu-val>\");\"</emu-val>.</li><li id=\"step-json-parse-parse\">Let <var>completion</var> be the result of parsing and evaluating !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>scriptString</var>) as if it was the source text of an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The extended PropertyDefinitionEvaluation semantics defined in <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref> must not be used during the evaluation.</li><li>Let <var>unfiltered</var> be <var>completion</var>.[[Value]].</li><li id=\"step-json-parse-assert-type\"><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>unfiltered</var> is either a String, Number, Boolean, Null, or an Object that is defined by either an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>reviver</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>root</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Let <var>rootName</var> be the empty String.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>unfiltered</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>reviver</var>).</li></ol></li><li>Else,<ol><li>Return <var>unfiltered</var>.</li></ol></li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>parse</code> function is 2.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Valid JSON text is a subset of the ECMAScript <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> syntax as modified by step <emu-xref href=\"#step-json-parse-parse\"><a href=\"#step-json-parse-parse\" class=\"excluded-xref\" excluded-id=\"step-json-parse-parse\">#step-json-parse-parse</a></emu-xref> above. Step <emu-xref href=\"#step-json-parse-validate\"><a href=\"#step-json-parse-validate\" class=\"excluded-xref\" excluded-id=\"step-json-parse-validate\">#step-json-parse-validate</a></emu-xref> verifies that <var>jsonString</var> conforms to that subset, and step <emu-xref href=\"#step-json-parse-assert-type\"><a href=\"#step-json-parse-assert-type\" class=\"excluded-xref\" excluded-id=\"step-json-parse-assert-type\">#step-json-parse-assert-type</a></emu-xref> asserts that that parsing and evaluation returns a value of an appropriate type.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-internalizejsonproperty\"><h1><span class=\"secnum\">24.5.1.1</span>#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name, reviver )</h1>...</div></emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-IsHTMLDDA-internal-slot", "sec-object-initializer-runtime-semantics-propertydefinitionevaluation", "sec-block-level-function-declarations-web-legacy-compatibility-semantics", "sec-other-additional-features", "sec-object-initializer-static-semantics-early-errors", "sec-json.parse"], "secData": {"sec-IsHTMLDDA-internal-slot": {"num": "B.3.6", "title": "#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot\">#sec-IsHTMLDDA-internal-slot</span> The [[IsHTMLDDA]] Internal Slot</h1>\n      <p>An <dfn>[[IsHTMLDDA]] internal slot</dfn> may exist on <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> objects. Objects with an [[IsHTMLDDA]] internal slot behave like <emu-val>undefined</emu-val> in the <emu-xref href=\"#sec-toboolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref> and <emu-xref href=\"#sec-abstract-equality-comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and when used as an operand for the <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code> operator</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Objects with an [[IsHTMLDDA]] internal slot are never created by this specification. However, the <a href=\"https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all\"><code>document.all</code> object</a> in web browsers is a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> with this slot that exists for web compatibility purposes. There are no other known examples of this type of object and implementations should not create any with the exception of <code>document.all</code>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-IsHTMLDDA-internal-slot-to-boolean\"><h1><span class=\"secnum\">B.3.6.1</span>#sec-IsHTMLDDA-internal-slot-to-boolean Changes to ToBoolean</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-aec\"><h1><span class=\"secnum\">B.3.6.2</span>#sec-IsHTMLDDA-internal-slot-aec Changes to Abstract Equality Comparison</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-typeof\"><h1><span class=\"secnum\">B.3.6.3</span>#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator</h1>...</div></emu-annex>\n  "}, "sec-object-initializer-runtime-semantics-propertydefinitionevaluation": {"num": "12.2.6.8", "title": "#sec-object-initializer-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" oldids=\"sec-__proto__-property-names-in-object-initializers\"><span id=\"sec-__proto__-property-names-in-object-initializers\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\">#sec-object-initializer-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n        <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n        <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3152d601\"><emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Perform ? PropertyDefinitionEvaluation of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li><li>Return the result of performing PropertyDefinitionEvaluation of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5bb8853e\"><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>excludedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"CopyDataProperties\"><a href=\"#sec-copydataproperties\">CopyDataProperties</a></emu-xref>(<var>object</var>, <var>fromValue</var>, <var>excludedNames</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>propName</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propName</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f2d90b76\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li id=\"step-object-initializer-runtime-semantics-propertydefinitionevaluation-__proto__-property-name\">If this production is not JSON text parsed by step <emu-xref href=\"#step-json-parse-parse\" title=\"\"><a href=\"#step-json-parse-parse\" class=\"excluded-xref\" excluded-id=\"step-json-parse-parse\">#step-json-parse-parse</a></emu-xref> of <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\" class=\"excluded-xref\" excluded-id=\"sec-json.parse\">#sec-json.parse</a></emu-xref>, <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val>, and if IsComputedPropertyKey(<emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This production is not JSON text parsed by step <emu-xref href=\"#step-json-parse-parse\"><a href=\"#step-json-parse-parse\" class=\"excluded-xref\" excluded-id=\"step-json-parse-parse\">#step-json-parse-parse</a></emu-xref> of <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\" class=\"excluded-xref\" excluded-id=\"sec-json.parse\">#sec-json.parse</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-block-level-function-declarations-web-legacy-compatibility-semantics": {"num": "B.3.2", "title": "#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics", "html": "<emu-annex id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</span> Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>\n      <p>Prior to ECMAScript 2015, the ECMAScript specification did not define the occurrence of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as an element of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> statement's <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>. However, support for that form of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension and most browser-hosted ECMAScript implementations permitted them. Unfortunately, the semantics of such declarations differ among those implementations. Because of these semantic differences, existing web ECMAScript code that uses <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations is only portable among browser implementation if the usage only depends upon the semantic intersection of all of the browser implementations for such declarations. The following are the use cases that fall within that intersection semantics:</p>\n      <ol>\n        <li>\n          <p>A function is declared and only referenced within a single block</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              All occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> are within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> but also referenced by an inner function definition that is not contained within that same <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within another function <var>h</var> that is nested within <var>g</var> and no other declaration of <var>f</var> shadows the references to <var>f</var> from within <var>h</var>.\n            </li>\n            <li>\n              All invocations of <var>h</var> occur after the declaration of <var>f</var> has been evaluated.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single block but also referenced within subsequent blocks.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the function code of <var>g</var> that lexically follows the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n      </ol>\n      <p>The first use case is interoperable with the semantics of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations provided by ECMAScript 2015. Any pre-existing ECMAScript code that employs that use case will operate using the Block level function declarations semantics defined by clauses <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, <emu-xref href=\"#sec-ecmascript-language-statements-and-declarations\"><a href=\"#sec-ecmascript-language-statements-and-declarations\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-statements-and-declarations\">#sec-ecmascript-language-statements-and-declarations</a></emu-xref>, and <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>.</p>\n      <p>ECMAScript 2015 interoperability for the second and third use cases requires the following extensions to the clause <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, clause <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>, clause <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref> and clause <emu-xref href=\"#sec-globaldeclarationinstantiation\"><a href=\"#sec-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</a></emu-xref> semantics.</p>\n      <p>If an ECMAScript implementation has a mechanism for reporting diagnostic warning messages, a warning should be produced when code contains a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> for which these compatibility semantics are applied and introduce observable differences from non-compatibility semantics. For example, if a var binding is not introduced because its introduction would create an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>, a warning message should not be produced.</p>\n      <div id=\"excluded-sec-web-compat-functiondeclarationinstantiation\"><h1><span class=\"secnum\">B.3.2.1</span>#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-globaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.2.2</span>#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-evaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.2.3</span>#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-block-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.2.4</span>#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-switch-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.2.5</span>#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-web-compat-blockdeclarationinstantiation\"><h1><span class=\"secnum\">B.3.2.6</span>#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation</h1>...</div></emu-annex>\n\n    "}, "sec-other-additional-features": {"num": "B.3", "title": "#sec-other-additional-features Other Additional Features", "html": "<emu-annex id=\"sec-other-additional-features\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-other-additional-features\">#sec-other-additional-features</span> Other Additional Features</h1>\n\n    <div id=\"excluded-sec-labelled-function-declarations\"><h1><span class=\"secnum\">B.3.1</span>#sec-labelled-function-declarations Labelled Function Declarations</h1>...</div><div id=\"excluded-sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><h1><span class=\"secnum\">B.3.2</span>#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>...</div><div id=\"excluded-sec-functiondeclarations-in-ifstatement-statement-clauses\"><h1><span class=\"secnum\">B.3.3</span>#sec-functiondeclarations-in-ifstatement-statement-clauses FunctionDeclarations in IfStatement Statement Clauses</h1>...</div><div id=\"excluded-sec-variablestatements-in-catch-blocks\"><h1><span class=\"secnum\">B.3.4</span>#sec-variablestatements-in-catch-blocks VariableStatements in Catch Blocks</h1>...</div><div id=\"excluded-sec-initializers-in-forin-statement-heads\"><h1><span class=\"secnum\">B.3.5</span>#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot\"><h1><span class=\"secnum\">B.3.6</span>#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot</h1>...</div></emu-annex>\n"}, "sec-object-initializer-static-semantics-early-errors": {"num": "12.2.6.1", "title": "#sec-object-initializer-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-object-initializer-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4bc22514\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if HasDirectSuper of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>In addition to describing an actual object initializer the <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> productions are also used as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> and may be recognized as part of a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>. When <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required the following Early Error rules are <b>not</b> applied. In addition, they are not applied when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"df01ba41\"><emu-nt><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            Always throw a Syntax Error if code matches this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This production exists so that <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> can serve as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt>. It cannot occur in an actual object initializer.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1bef8ed3\"><emu-t>{</emu-t><emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8703527f\"><emu-t>{</emu-t><emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt><emu-t>,</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            When <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required the Early Error rule is <b>not</b> applied. In addition, it is not applied when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or a <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>. In addition, it is not applied when parsing JSON text in step <emu-xref href=\"#step-json-parse-parse\" title=\"\"><a href=\"#step-json-parse-parse\" class=\"excluded-xref\" excluded-id=\"step-json-parse-parse\">#step-json-parse-parse</a></emu-xref> of <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\" class=\"excluded-xref\" excluded-id=\"sec-json.parse\">#sec-json.parse</a></emu-xref>.\n          </li>\n          <li>\n            It is a Syntax Error if PropertyNameList of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f2d90b76\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-json.parse": {"num": "24.5.1", "title": "#sec-json.parse JSON.parse ( text [ , reviver ] )", "html": "<emu-clause id=\"sec-json.parse\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.parse\">#sec-json.parse</span> JSON.parse ( <var>text</var> [ , <var>reviver</var> ] )</h1>\n      <p>The <code>parse</code> function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON format represents literals, arrays, and objects with a syntax similar to the syntax for ECMAScript literals, Array Initializers, and Object Initializers. After parsing, JSON objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript Array instances. JSON strings, numbers, booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and <emu-val>null</emu-val>.</p>\n      <p>The optional <var>reviver</var> parameter is a function that takes two parameters, <var>key</var> and <var>value</var>. It can filter and transform the results. It is called with each of the <var>key</var>/<var>value</var> pairs produced by the parse, and its return value is used instead of the original value. If it returns what it received, the structure is not modified. If it returns <emu-val>undefined</emu-val> then the property is deleted from the result.</p>\n      <emu-alg><ol><li>Let <var>jsonString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>text</var>).</li><li id=\"step-json-parse-validate\">Parse !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>jsonString</var>) as a JSON text as specified in ECMA-404. Throw a <emu-val>SyntaxError</emu-val> exception if it is not a valid JSON text as defined in that specification.</li><li>Let <var>scriptString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"(\"</emu-val>, <var>jsonString</var>, and <emu-val>\");\"</emu-val>.</li><li id=\"step-json-parse-parse\">Let <var>completion</var> be the result of parsing and evaluating !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>scriptString</var>) as if it was the source text of an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. The extended <emu-xref href=\"#sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-object-initializer-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> semantics defined in step <emu-xref href=\"#step-object-initializer-runtime-semantics-propertydefinitionevaluation-__proto__-property-name\"><a href=\"#step-object-initializer-runtime-semantics-propertydefinitionevaluation-__proto__-property-name\" class=\"excluded-xref\" excluded-id=\"step-object-initializer-runtime-semantics-propertydefinitionevaluation-__proto__-property-name\">#step-object-initializer-runtime-semantics-propertydefinitionevaluation-__proto__-property-name</a></emu-xref> of <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f2d90b76\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> must not be used during the evaluation.</li><li>Let <var>unfiltered</var> be <var>completion</var>.[[Value]].</li><li id=\"step-json-parse-assert-type\"><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>unfiltered</var> is either a String, Number, Boolean, Null, or an Object that is defined by either an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>reviver</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>root</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Let <var>rootName</var> be the empty String.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>unfiltered</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>reviver</var>).</li></ol></li><li>Else,<ol><li>Return <var>unfiltered</var>.</li></ol></li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>parse</code> function is 2.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Valid JSON text is a subset of the ECMAScript <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> syntax as modified by step <emu-xref href=\"#step-json-parse-parse\"><a href=\"#step-json-parse-parse\" class=\"excluded-xref\" excluded-id=\"step-json-parse-parse\">#step-json-parse-parse</a></emu-xref> above. Step <emu-xref href=\"#step-json-parse-validate\"><a href=\"#step-json-parse-validate\" class=\"excluded-xref\" excluded-id=\"step-json-parse-validate\">#step-json-parse-validate</a></emu-xref> verifies that <var>jsonString</var> conforms to that subset, and step <emu-xref href=\"#step-json-parse-assert-type\"><a href=\"#step-json-parse-assert-type\" class=\"excluded-xref\" excluded-id=\"step-json-parse-assert-type\">#step-json-parse-assert-type</a></emu-xref> asserts that that parsing and evaluation returns a value of an appropriate type.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-internalizejsonproperty\"><h1><span class=\"secnum\">24.5.1.1</span>#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name, reviver )</h1>...</div></emu-clause>\n\n    "}}, "figData": {}}}