{"from": {"secList": ["sec-array.prototype.concat", "sec-array.prototype.push", "sec-string.raw", "sec-algorithm-conventions", "sec-array.prototype.unshift", "sec-string.prototype.concat", "sec-object.assign", "sec-array.of", "sec-%typedarray%.of", "sec-array.prototype.splice", "sec-string.fromcodepoint", "sec-properties-of-the-array-prototype-object", "sec-ecmascript-standard-built-in-objects", "sec-function.prototype.call", "sec-string.fromcharcode", "sec-array-items", "sec-function.prototype.bind"], "secData": {"sec-array.prototype.concat": {"num": "22.1.3.1", "title": "#sec-array.prototype.concat Array.prototype.concat ( ...arguments )", "html": "<emu-clause id=\"sec-array.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.concat\">#sec-array.prototype.concat</span> Array.prototype.concat ( ...<var>arguments</var> )</h1>\n        <p>When the <code>concat</code> method is called with zero or more arguments, it returns an array containing the array elements of the object followed by the array elements of each argument in order.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Let <var>n</var> be 0.</li><li>Let <var>items</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose first element is <var>O</var> and whose subsequent elements are, in left to right order, the arguments that were passed to this function invocation.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of the element.</li><li>Let <var>spreadable</var> be ?&#160;<emu-xref aoid=\"IsConcatSpreadable\"><a href=\"#sec-isconcatspreadable\">IsConcatSpreadable</a></emu-xref>(<var>E</var>).</li><li>If <var>spreadable</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>k</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>E</var>).</li><li>If <var>n</var> + <var>len</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>P</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>exists</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>subElement</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>subElement</var>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>NOTE: <var>E</var> is added as a single item rather than spread.</li><li>If <var>n</var> &#8805; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>E</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li id=\"step-array-proto-concat-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>n</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property in step <emu-xref href=\"#step-array-proto-concat-set-length\"><a href=\"#step-array-proto-concat-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-concat-set-length\">#step-array-proto-concat-set-length</a></emu-xref> is necessary to ensure that its value is correct in situations where the trailing elements of the result Array are not present.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-isconcatspreadable\"><h1><span class=\"secnum\">22.1.3.1.1</span>#sec-isconcatspreadable Runtime Semantics: IsConcatSpreadable ( O )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype.push": {"num": "22.1.3.20", "title": "#sec-array.prototype.push Array.prototype.push ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.push\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.push\">#sec-array.prototype.push</span> Array.prototype.push ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are appended to the end of the array, in the order in which they appear. The new length of the array is returned as the result of the call.</p>\n        </div></emu-note>\n        <p>When the <code>push</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>items</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are, in left to right order, the arguments that were passed to this function invocation.</li><li>Let <var>argCount</var> be the number of elements in <var>items</var>.</li><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of the element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>len</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>len</var> to <var>len</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>push</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>push</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.raw": {"num": "21.1.2.4", "title": "#sec-string.raw String.raw ( template, ...substitutions )", "html": "<emu-clause id=\"sec-string.raw\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.raw\">#sec-string.raw</span> String.raw ( <var>template</var>, ...<var>substitutions</var> )</h1>\n        <p>The <code>String.raw</code> function may be called with a variable number of arguments. The first argument is <var>template</var> and the remainder of the arguments form the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>substitutions</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>substitutions</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of all of the arguments passed to this function, starting with the second argument. If fewer than two arguments were passed, the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is empty.</li><li>Let <var>numberOfSubstitutions</var> be the number of elements in <var>substitutions</var>.</li><li>Let <var>cooked</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>template</var>).</li><li>Let <var>raw</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>cooked</var>, <emu-val>\"raw\"</emu-val>)).</li><li>Let <var>literalSegments</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>raw</var>).</li><li>If <var>literalSegments</var> &#8804; 0, return the empty String.</li><li>Let <var>stringElements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat,<ol><li>Let <var>nextKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>).</li><li>Let <var>nextSeg</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>raw</var>, <var>nextKey</var>)).</li><li>Append in order the code unit elements of <var>nextSeg</var> to the end of <var>stringElements</var>.</li><li>If <var>nextIndex</var> + 1 = <var>literalSegments</var>, then<ol><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>stringElements</var>. If <var>stringElements</var> has no elements, the empty String is returned.</li></ol></li><li>If <var>nextIndex</var> &lt; <var>numberOfSubstitutions</var>, let <var>next</var> be <var>substitutions</var>[<var>nextIndex</var>].</li><li>Else, let <var>next</var> be the empty String.</li><li>Let <var>nextSub</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>next</var>).</li><li>Append in order the code unit elements of <var>nextSub</var> to the end of <var>stringElements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>raw</code> function is intended for use as a tag function of a Tagged Template (<emu-xref href=\"#sec-tagged-templates\"><a href=\"#sec-tagged-templates\" class=\"excluded-xref\" excluded-id=\"sec-tagged-templates\">#sec-tagged-templates</a></emu-xref>). When called as such, the first argument will be a well formed template object and the rest parameter will contain the substitution values.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-algorithm-conventions": {"num": "5.2", "title": "#sec-algorithm-conventions Algorithm Conventions", "html": "<emu-clause id=\"sec-algorithm-conventions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-algorithm-conventions\">#sec-algorithm-conventions</span> Algorithm Conventions</h1>\n    <p>The specification often uses a numbered list to specify steps in an algorithm. These algorithms are used to precisely specify the required semantics of ECMAScript language constructs. The algorithms are not intended to imply the use of any specific implementation technique. In practice, there may be more efficient algorithms available to implement a given feature.</p>\n    <p>Algorithms may be explicitly parameterized, in which case the names and usage of the parameters must be provided as part of the algorithm's definition.</p>\n    <p>Algorithm steps may be subdivided into sequential substeps. Substeps are indented and may themselves be further divided into indented substeps. Outline numbering conventions are used to identify substeps with the first level of substeps labelled with lower case alphabetic characters and the second level of substeps labelled with lower case roman numerals. If more than three levels are required these rules repeat with the fourth level using numeric labels. For example:</p>\n    <emu-alg type=\"example\"><ol><li>Top-level step<ol><li>Substep.</li><li>Substep.<ol><li>Subsubstep.<ol><li>Subsubsubstep<ol><li>Subsubsubsubstep<ol><li>Subsubsubsubsubstep</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n    <p>A step or substep may be written as an &#8220;if&#8221; predicate that conditions its substeps. In this case, the substeps are only applied if the predicate is true. If a step or substep begins with the word &#8220;else&#8221;, it is a predicate that is the negation of the preceding &#8220;if&#8221; predicate step at the same level.</p>\n    <p>A step may specify the iterative application of its substeps.</p>\n    <p>A step that begins with &#8220;<dfn id=\"assert\">Assert</dfn>:&#8221; asserts an invariant condition of its algorithm. Such assertions are used to make explicit algorithmic invariants that would otherwise be implicit. Such assertions add no additional semantic requirements and hence need not be checked by an implementation. They are used simply to clarify algorithms.</p>\n    <p>Algorithm steps may declare named aliases for any value using the form &#8220;Let <var>x</var> be <var>someValue</var>&#8221;. These aliases are reference-like in that both <var>x</var> and <var>someValue</var> refer to the same underlying data and modifications to either are visible to both. Algorithm steps that want to avoid this reference-like behaviour should explicitly make a copy of the right-hand side: &#8220;Let <var>x</var> be a copy of <var>someValue</var>&#8221; creates a shallow copy of <var>someValue</var>.</p>\n    <p>Once declared, an alias may be referenced in any subsequent steps and must not be referenced from steps prior to the alias's declaration. Aliases may be modified using the form &#8220;Set <var>x</var> to <var>someOtherValue</var>&#8221;.</p>\n\n    <div id=\"excluded-sec-algorithm-conventions-abstract-operations\"><h1><span class=\"secnum\">5.2.1</span>#sec-algorithm-conventions-abstract-operations Abstract Operations</h1>...</div><div id=\"excluded-sec-algorithm-conventions-syntax-directed-operations\"><h1><span class=\"secnum\">5.2.2</span>#sec-algorithm-conventions-syntax-directed-operations Syntax-Directed Operations</h1>...</div><div id=\"excluded-sec-runtime-semantics\"><h1><span class=\"secnum\">5.2.3</span>#sec-runtime-semantics Runtime Semantics</h1>...</div><div id=\"excluded-sec-static-semantic-rules\"><h1><span class=\"secnum\">5.2.4</span>#sec-static-semantic-rules Static Semantics</h1>...</div><div id=\"excluded-sec-mathematical-operations\"><h1><span class=\"secnum\">5.2.5</span>#sec-mathematical-operations Mathematical Operations</h1>...</div><div id=\"excluded-sec-value-notation\"><h1><span class=\"secnum\">5.2.6</span>#sec-value-notation Value Notation</h1>...</div></emu-clause>\n"}, "sec-array.prototype.unshift": {"num": "22.1.3.31", "title": "#sec-array.prototype.unshift Array.prototype.unshift ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.unshift\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.unshift\">#sec-array.prototype.unshift</span> Array.prototype.unshift ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are prepended to the start of the array, such that their order within the array is the same as the order in which they appear in the argument list.</p>\n        </div></emu-note>\n        <p>When the <code>unshift</code> method is called with zero or more arguments <var>item1</var>, <var>item2</var>, etc., the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>argCount</var> be the number of actual arguments.</li><li>If <var>argCount</var> &gt; 0, then<ol><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; 0,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>argCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Let <var>j</var> be 0.</li><li>Let <var>items</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are, in left to right order, the arguments that were passed to this function invocation.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of that element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>j</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> + <var>argCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var> + <var>argCount</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>unshift</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>unshift</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.concat": {"num": "21.1.3.4", "title": "#sec-string.prototype.concat String.prototype.concat ( ...args )", "html": "<emu-clause id=\"sec-string.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.concat\">#sec-string.prototype.concat</span> String.prototype.concat ( ...<var>args</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>concat</code> method is called it returns the String value consisting of the code units of the <emu-val>this</emu-val> value (converted to a String) followed by the code units of each of the arguments converted to a String. The result is a String value, not a String object.</p>\n        </div></emu-note>\n        <p>When the <code>concat</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>args</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the arguments passed to this function.</li><li>Let <var>R</var> be <var>S</var>.</li><li>Repeat, while <var>args</var> is not empty,<ol><li>Remove the first element from <var>args</var> and let <var>next</var> be the value of that element.</li><li>Let <var>nextString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>next</var>).</li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>nextString</var>.</li></ol></li><li>Return <var>R</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-object.assign": {"num": "19.1.2.1", "title": "#sec-object.assign Object.assign ( target, ...sources )", "html": "<emu-clause id=\"sec-object.assign\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.assign\">#sec-object.assign</span> Object.assign ( <var>target</var>, ...<var>sources</var> )</h1>\n        <p>The <code>assign</code> function is used to copy the values of all of the enumerable own properties from one or more source objects to a <var>target</var> object. When the <code>assign</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>to</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>target</var>).</li><li>If only one argument was passed, return <var>to</var>.</li><li>Let <var>sources</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of argument values starting with the second argument.</li><li>For each element <var>nextSource</var> of <var>sources</var>, in ascending index order, do<ol><li>If <var>nextSource</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>nextSource</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>to</var>, <var>nextKey</var>, <var>propValue</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li></ol></li></ol></li><li>Return <var>to</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>assign</code> function is 2.</p>\n      </emu-clause>\n\n      "}, "sec-array.of": {"num": "22.1.2.3", "title": "#sec-array.of Array.of ( ...items )", "html": "<emu-clause id=\"sec-array.of\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.of\">#sec-array.of</span> Array.of ( ...<var>items</var> )</h1>\n        <p>When the <code>of</code> method is called with any number of arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>len</var> be the actual number of arguments passed to this function.</li><li>Let <var>items</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of arguments passed to this function.</li><li>Let <var>C</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>len</var>).</li></ol></li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>kValue</var> be <var>items</var>[<var>k</var>].</li><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>kValue</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>items</var> argument is assumed to be a well-formed rest argument value.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>of</code> function is an intentionally generic factory method; it does not require that its <emu-val>this</emu-val> value be the Array <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Therefore it can be transferred to or inherited by other constructors that may be called with a single numeric argument.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.of": {"num": "22.2.2.2", "title": "#sec-%typedarray%.of %TypedArray%.of ( ...items )", "html": "<emu-clause id=\"sec-%typedarray%.of\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.of\">#sec-%typedarray%.of</span> %TypedArray%.of ( ...<var>items</var> )</h1>\n        <p>When the <code>of</code> method is called with any number of arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>len</var> be the actual number of arguments passed to this function.</li><li>Let <var>items</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of arguments passed to this function.</li><li>Let <var>C</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>newObj</var> be ?&#160;<emu-xref aoid=\"TypedArrayCreate\"><a href=\"#typedarray-create\">TypedArrayCreate</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>kValue</var> be <var>items</var>[<var>k</var>].</li><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>newObj</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>newObj</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <var>items</var> argument is assumed to be a well-formed rest argument value.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.splice": {"num": "22.1.3.28", "title": "#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )", "html": "<emu-clause id=\"sec-array.prototype.splice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.splice\">#sec-array.prototype.splice</span> Array.prototype.splice ( <var>start</var>, <var>deleteCount</var>, ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>splice</code> method is called with two or more arguments <var>start</var>, <var>deleteCount</var> and zero or more <var>items</var>, the <var>deleteCount</var> elements of the array starting at <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> <var>start</var> are replaced by the elements of <var>items</var>. An Array object containing the deleted elements (if any) is returned.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>actualStart</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>actualStart</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If the number of actual arguments is 0, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be 0.</li></ol></li><li>Else if the number of actual arguments is 1, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be <var>len</var> - <var>actualStart</var>.</li></ol></li><li>Else,<ol><li>Let <var>insertCount</var> be the number of actual arguments minus 2.</li><li>Let <var>dc</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>deleteCount</var>).</li><li>Let <var>actualDeleteCount</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>dc</var>, 0), <var>len</var> - <var>actualStart</var>).</li></ol></li><li>If <var>len</var> + <var>insertCount</var> - <var>actualDeleteCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>actualDeleteCount</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>actualDeleteCount</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>actualStart</var> + <var>k</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>fromValue</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>actualDeleteCount</var>, <emu-val>true</emu-val>).</li><li>Let <var>items</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are, in left to right order, the portion of the actual argument list starting with the third argument. The list is empty if fewer than three arguments were passed.</li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li>If <var>itemCount</var> &lt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>k</var> &lt; (<var>len</var> - <var>actualDeleteCount</var>),<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var>).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Set <var>k</var> to <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; (<var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>),<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1)).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Else if <var>itemCount</var> &gt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to (<var>len</var> - <var>actualDeleteCount</var>).</li><li>Repeat, while <var>k</var> &gt; <var>actualStart</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of that element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li id=\"step-array-proto-splice-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property of the result Array in step <emu-xref href=\"#step-array-proto-splice-set-length\"><a href=\"#step-array-proto-splice-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-splice-set-length\">#step-array-proto-splice-set-length</a></emu-xref> was necessary in previous editions of ECMAScript to ensure that its length was correct in situations where the trailing elements of the result Array were not present. Setting <emu-val>\"length\"</emu-val> became unnecessary starting in ES2015 when the result Array was initialized to its proper length rather than an empty Array but is carried forward to preserve backward compatibility.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>splice</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.fromcodepoint": {"num": "21.1.2.2", "title": "#sec-string.fromcodepoint String.fromCodePoint ( ...codePoints )", "html": "<emu-clause id=\"sec-string.fromcodepoint\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcodepoint\">#sec-string.fromcodepoint</span> String.fromCodePoint ( ...<var>codePoints</var> )</h1>\n        <p>The <code>String.fromCodePoint</code> function may be called with any number of arguments which form the rest parameter <var>codePoints</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>codePoints</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the arguments passed to this function.</li><li>Let <var>length</var> be the number of elements in <var>codePoints</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var>,<ol><li>Let <var>next</var> be <var>codePoints</var>[<var>nextIndex</var>].</li><li>Let <var>nextCP</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>next</var>).</li><li>If !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>nextCP</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>nextCP</var> &lt; 0 or <var>nextCP</var> &gt; 0x10FFFF, throw a <emu-val>RangeError</emu-val> exception.</li><li>Append the elements of !&#160;<emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>nextCP</var>) to the end of <var>elements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is 0, the empty String is returned.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCodePoint</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-array-prototype-object": {"num": "22.1.3", "title": "#sec-properties-of-the-array-prototype-object Properties of the Array Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-array-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-array-prototype-object\">#sec-properties-of-the-array-prototype-object</span> Properties of the Array Prototype Object</h1>\n      <p>The Array prototype object:</p>\n      <ul>\n        <li>is <dfn>%ArrayPrototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is 0 and whose attributes are { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Array prototype object is specified to be an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-array.prototype.concat\"><h1><span class=\"secnum\">22.1.3.1</span>#sec-array.prototype.concat Array.prototype.concat ( ...arguments )</h1>...</div><div id=\"excluded-sec-array.prototype.constructor\"><h1><span class=\"secnum\">22.1.3.2</span>#sec-array.prototype.constructor Array.prototype.constructor</h1>...</div><div id=\"excluded-sec-array.prototype.copywithin\"><h1><span class=\"secnum\">22.1.3.3</span>#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-array.prototype.entries\"><h1><span class=\"secnum\">22.1.3.4</span>#sec-array.prototype.entries Array.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-array.prototype.every\"><h1><span class=\"secnum\">22.1.3.5</span>#sec-array.prototype.every Array.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.fill\"><h1><span class=\"secnum\">22.1.3.6</span>#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.filter\"><h1><span class=\"secnum\">22.1.3.7</span>#sec-array.prototype.filter Array.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.find\"><h1><span class=\"secnum\">22.1.3.8</span>#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findindex\"><h1><span class=\"secnum\">22.1.3.9</span>#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flat\"><h1><span class=\"secnum\">22.1.3.10</span>#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flatmap\"><h1><span class=\"secnum\">22.1.3.11</span>#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.foreach\"><h1><span class=\"secnum\">22.1.3.12</span>#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.includes\"><h1><span class=\"secnum\">22.1.3.13</span>#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.indexof\"><h1><span class=\"secnum\">22.1.3.14</span>#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.join\"><h1><span class=\"secnum\">22.1.3.15</span>#sec-array.prototype.join Array.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-array.prototype.keys\"><h1><span class=\"secnum\">22.1.3.16</span>#sec-array.prototype.keys Array.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-array.prototype.lastindexof\"><h1><span class=\"secnum\">22.1.3.17</span>#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.map\"><h1><span class=\"secnum\">22.1.3.18</span>#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.pop\"><h1><span class=\"secnum\">22.1.3.19</span>#sec-array.prototype.pop Array.prototype.pop ( )</h1>...</div><div id=\"excluded-sec-array.prototype.push\"><h1><span class=\"secnum\">22.1.3.20</span>#sec-array.prototype.push Array.prototype.push ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.reduce\"><h1><span class=\"secnum\">22.1.3.21</span>#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reduceright\"><h1><span class=\"secnum\">22.1.3.22</span>#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reverse\"><h1><span class=\"secnum\">22.1.3.23</span>#sec-array.prototype.reverse Array.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-array.prototype.shift\"><h1><span class=\"secnum\">22.1.3.24</span>#sec-array.prototype.shift Array.prototype.shift ( )</h1>...</div><div id=\"excluded-sec-array.prototype.slice\"><h1><span class=\"secnum\">22.1.3.25</span>#sec-array.prototype.slice Array.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-array.prototype.some\"><h1><span class=\"secnum\">22.1.3.26</span>#sec-array.prototype.some Array.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.sort\"><h1><span class=\"secnum\">22.1.3.27</span>#sec-array.prototype.sort Array.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-array.prototype.splice\"><h1><span class=\"secnum\">22.1.3.28</span>#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.tolocalestring\"><h1><span class=\"secnum\">22.1.3.29</span>#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.tostring\"><h1><span class=\"secnum\">22.1.3.30</span>#sec-array.prototype.tostring Array.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-array.prototype.unshift\"><h1><span class=\"secnum\">22.1.3.31</span>#sec-array.prototype.unshift Array.prototype.unshift ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.values\"><h1><span class=\"secnum\">22.1.3.32</span>#sec-array.prototype.values Array.prototype.values ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@iterator\"><h1><span class=\"secnum\">22.1.3.33</span>#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@unscopables\"><h1><span class=\"secnum\">22.1.3.34</span>#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]</h1>...</div></emu-clause>\n\n    "}, "sec-ecmascript-standard-built-in-objects": {"num": "17", "title": "#sec-ecmascript-standard-built-in-objects ECMAScript Standard Built-in Objects", "html": "<emu-clause id=\"sec-ecmascript-standard-built-in-objects\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-standard-built-in-objects\">#sec-ecmascript-standard-built-in-objects</span> ECMAScript Standard Built-in Objects</h1>\n  <p>There are certain built-in objects available whenever an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> begins execution. One, the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, is part of the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> of the executing program. Others are accessible as initial properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> or indirectly as properties of accessible built-in objects.</p>\n  <p>Unless specified otherwise, a built-in object that is callable as a function is a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the characteristics described in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>. Unless specified otherwise, the [[Extensible]] internal slot of a built-in object initially has the value <emu-val>true</emu-val>. Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has a [[Realm]] internal slot whose value is the <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> of the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> for which the object was initially created.</p>\n  <p>Many built-in objects are functions: they can be invoked with arguments. Some of them furthermore are constructors: they are functions intended for use with the <code>new</code> operator. For each built-in function, this specification describes the arguments required by that function and the properties of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. For each built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, this specification furthermore describes properties of the prototype object of that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and properties of specific object instances returned by a <code>new</code> expression that invokes that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is given fewer arguments than the function is specified to require, the function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> shall behave exactly as if it had been given sufficient additional arguments, each such argument being the <emu-val>undefined</emu-val> value. Such missing arguments are considered to be &#8220;not present&#8221; and may be identified in that manner by specification algorithms. In the description of a particular function, the terms &#8220;<emu-val>this</emu-val> value&#8221; and &#8220;NewTarget&#8221; have the meanings given in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> described is given more arguments than the function is specified to allow, the extra arguments are evaluated by the call and then ignored by the function. However, an implementation may define implementation specific behaviour relating to such arguments as long as the behaviour is not the throwing of a <emu-val>TypeError</emu-val> exception that is predicated simply on the presence of an extra argument.</p>\n  <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n    <p>Implementations that add additional capabilities to the set of built-in functions are encouraged to do so by adding new functions rather than adding new parameters to existing functions.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified every built-in function and every built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has the Function prototype object, which is the initial value of the expression <code>Function.prototype</code> (<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-function-prototype-object\">#sec-properties-of-the-function-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot.</p>\n  <p>Unless otherwise specified every built-in prototype object has the Object prototype object, which is the initial value of the expression <code>Object.prototype</code> (<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-object-prototype-object\">#sec-properties-of-the-object-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot, except the Object prototype object itself.</p>\n  <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function.</p>\n  <p>Each built-in function defined in this specification is created by calling the <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref> abstract operation (<emu-xref href=\"#sec-createbuiltinfunction\"><a href=\"#sec-createbuiltinfunction\" class=\"excluded-xref\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</a></emu-xref>).</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"length\"</emu-val> property whose value is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: <code>[</code> <code>]</code>) or rest parameters (which are shown using the form &#171;...name&#187;) are not included in the default argument count.</p>\n  <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n    <p>For example, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that is the initial value of the <emu-val>\"map\"</emu-val> property of the Array prototype object is described under the subclause heading &#171;Array.prototype.map (callbackFn [ , thisArg])&#187; which shows the two named arguments callbackFn and thisArg, the latter being optional; therefore the value of the <emu-val>\"length\"</emu-val> property of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is 1.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified, the <emu-val>\"length\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"name\"</emu-val> property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are identified as anonymous functions use the empty String as the value of the <emu-val>\"name\"</emu-val> property. For functions that are specified as properties of objects, the name value is the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string used to access the function. Functions that are specified as get or set accessor functions of built-in properties have <emu-val>\"get \"</emu-val> or <emu-val>\"set \"</emu-val> prepended to the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string. The value of the <emu-val>\"name\"</emu-val> property is explicitly specified for each built-in functions whose property key is a Symbol value. The <emu-val>\"name\"</emu-val> property is set using <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>.</p>\n  <p>Unless otherwise specified, the <emu-val>\"name\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every other <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> described in clauses <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref> and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified.</p>\n  <p>Every <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> described in clauses <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref> and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, <emu-val>undefined</emu-val>. If only a set accessor is described the get accessor is the default value, <emu-val>undefined</emu-val>.</p>\n</emu-clause>\n\n"}, "sec-function.prototype.call": {"num": "19.2.3.3", "title": "#sec-function.prototype.call Function.prototype.call ( thisArg, ...args )", "html": "<emu-clause id=\"sec-function.prototype.call\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</span> Function.prototype.call ( <var>thisArg</var>, ...<var>args</var> )</h1>\n        <p>When the <code>call</code> method is called with argument <var>thisArg</var> and zero or more <var>args</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>func</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>argList</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If this method was called with more than one argument, then in left to right order, starting with the second argument, append each argument as the last element of <var>argList</var>.</li><li>Perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li id=\"step-function-proto-call-call\">Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisArg</var>, <var>argList</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>thisArg</var> value is passed without modification as the <emu-val>this</emu-val> value. This is a change from Edition 3, where an <emu-val>undefined</emu-val> or <emu-val>null</emu-val> <var>thisArg</var> is replaced with the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> is applied to all other values and that result is passed as the <emu-val>this</emu-val> value. Even though the <var>thisArg</var> is passed without modification, non-strict functions still perform these transformations upon entry to the function.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>func</var> is an arrow function or a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref> then the <var>thisArg</var> will be ignored by the function [[Call]] in step <emu-xref href=\"#step-function-proto-call-call\"><a href=\"#step-function-proto-call-call\" class=\"excluded-xref\" excluded-id=\"step-function-proto-call-call\">#step-function-proto-call-call</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.fromcharcode": {"num": "21.1.2.1", "title": "#sec-string.fromcharcode String.fromCharCode ( ...codeUnits )", "html": "<emu-clause id=\"sec-string.fromcharcode\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcharcode\">#sec-string.fromcharcode</span> String.fromCharCode ( ...<var>codeUnits</var> )</h1>\n        <p>The <code>String.fromCharCode</code> function may be called with any number of arguments which form the rest parameter <var>codeUnits</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>codeUnits</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the arguments passed to this function.</li><li>Let <var>length</var> be the number of elements in <var>codeUnits</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var>,<ol><li>Let <var>next</var> be <var>codeUnits</var>[<var>nextIndex</var>].</li><li>Let <var>nextCU</var> be ?&#160;<emu-xref aoid=\"ToUint16\"><a href=\"#sec-touint16\">ToUint16</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextCU</var> to the end of <var>elements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is 0, the empty String is returned.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCharCode</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-array-items": {"num": "22.1.1.3", "title": "#sec-array-items Array ( ...items )", "html": "<emu-clause id=\"sec-array-items\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-items\">#sec-array-items</span> Array ( ...<var>items</var> )</h1>\n        <p>This description applies if and only if the Array <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is called with at least two arguments.</p>\n        <p>When the <code>Array</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>numberOfArgs</var> be the number of arguments passed to this function call.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>numberOfArgs</var> &#8805; 2.</li><li>If NewTarget is <emu-val>undefined</emu-val>, let <var>newTarget</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>; else let <var>newTarget</var> be NewTarget.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%Array.prototype%\"</emu-val>).</li><li>Let <var>array</var> be ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>numberOfArgs</var>, <var>proto</var>).</li><li>Let <var>k</var> be 0.</li><li>Let <var>items</var> be a zero-origined <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the argument items in order.</li><li>Repeat, while <var>k</var> &lt; <var>numberOfArgs</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>itemK</var> be <var>items</var>[<var>k</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, <var>Pk</var>, <var>itemK</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>array</var>'s <emu-val>\"length\"</emu-val> property is <var>numberOfArgs</var>.</li><li>Return <var>array</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-function.prototype.bind": {"num": "19.2.3.2", "title": "#sec-function.prototype.bind Function.prototype.bind ( thisArg, ...args )", "html": "<emu-clause id=\"sec-function.prototype.bind\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.bind\">#sec-function.prototype.bind</span> Function.prototype.bind ( <var>thisArg</var>, ...<var>args</var> )</h1>\n        <p>When the <code>bind</code> method is called with argument <var>thisArg</var> and zero or more <var>args</var>, it performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>Target</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>Target</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>args</var> be a new (possibly empty) <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of all of the argument values provided after <var>thisArg</var> in order.</li><li>Let <var>F</var> be ?&#160;<emu-xref aoid=\"BoundFunctionCreate\"><a href=\"#sec-boundfunctioncreate\">BoundFunctionCreate</a></emu-xref>(<var>Target</var>, <var>thisArg</var>, <var>args</var>).</li><li>Let <var>targetHasLength</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>Target</var>, <emu-val>\"length\"</emu-val>).</li><li>If <var>targetHasLength</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>targetLen</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>Target</var>, <emu-val>\"length\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>targetLen</var>) is not Number, let <var>L</var> be 0.</li><li>Else,<ol><li>Set <var>targetLen</var> to !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>targetLen</var>).</li><li>Let <var>L</var> be the larger of 0 and the result of <var>targetLen</var> minus the number of elements of <var>args</var>.</li></ol></li></ol></li><li>Else, let <var>L</var> be 0.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>L</var>).</li><li>Let <var>targetName</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>Target</var>, <emu-val>\"name\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>targetName</var>) is not String, set <var>targetName</var> to the empty String.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>targetName</var>, <emu-val>\"bound\"</emu-val>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Function objects created using <code>Function.prototype.bind</code> are exotic objects. They also do not have a <emu-val>\"prototype\"</emu-val> property.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>Target</var> is an arrow function or a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref> then the <var>thisArg</var> passed to this method will not be used by subsequent calls to <var>F</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-array.prototype.concat", "sec-array.prototype.push", "sec-string.raw", "sec-algorithm-conventions", "sec-array.prototype.unshift", "sec-string.prototype.concat", "sec-object.assign", "sec-array.of", "sec-%typedarray%.of", "sec-array.prototype.splice", "sec-string.fromcodepoint", "sec-properties-of-the-array-prototype-object", "sec-ecmascript-standard-built-in-objects", "sec-function.prototype.call", "sec-string.fromcharcode", "sec-array-items", "sec-function.prototype.bind"], "secData": {"sec-array.prototype.concat": {"num": "22.1.3.1", "title": "#sec-array.prototype.concat Array.prototype.concat ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.concat\">#sec-array.prototype.concat</span> Array.prototype.concat ( ...<var>items</var> )</h1>\n        <p>When the <code>concat</code> method is called with zero or more arguments, it returns an array containing the array elements of the object followed by the array elements of each argument in order.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Let <var>n</var> be 0.</li><li>Prepend <var>O</var> to <var>items</var>.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of the element.</li><li>Let <var>spreadable</var> be ?&#160;<emu-xref aoid=\"IsConcatSpreadable\"><a href=\"#sec-isconcatspreadable\">IsConcatSpreadable</a></emu-xref>(<var>E</var>).</li><li>If <var>spreadable</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>k</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>E</var>).</li><li>If <var>n</var> + <var>len</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>P</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>exists</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>subElement</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>subElement</var>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>NOTE: <var>E</var> is added as a single item rather than spread.</li><li>If <var>n</var> &#8805; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>E</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li id=\"step-array-proto-concat-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>n</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property in step <emu-xref href=\"#step-array-proto-concat-set-length\"><a href=\"#step-array-proto-concat-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-concat-set-length\">#step-array-proto-concat-set-length</a></emu-xref> is necessary to ensure that its value is correct in situations where the trailing elements of the result Array are not present.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-isconcatspreadable\"><h1><span class=\"secnum\">22.1.3.1.1</span>#sec-isconcatspreadable Runtime Semantics: IsConcatSpreadable ( O )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype.push": {"num": "22.1.3.20", "title": "#sec-array.prototype.push Array.prototype.push ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.push\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.push\">#sec-array.prototype.push</span> Array.prototype.push ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are appended to the end of the array, in the order in which they appear. The new length of the array is returned as the result of the call.</p>\n        </div></emu-note>\n        <p>When the <code>push</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>argCount</var> be the number of elements in <var>items</var>.</li><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of the element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>len</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>len</var> to <var>len</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>push</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>push</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.raw": {"num": "21.1.2.4", "title": "#sec-string.raw String.raw ( template, ...substitutions )", "html": "<emu-clause id=\"sec-string.raw\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.raw\">#sec-string.raw</span> String.raw ( <var>template</var>, ...<var>substitutions</var> )</h1>\n        <p>The <code>String.raw</code> function may be called with a variable number of arguments. The first argument is <var>template</var> and the remainder of the arguments form the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>substitutions</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>numberOfSubstitutions</var> be the number of elements in <var>substitutions</var>.</li><li>Let <var>cooked</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>template</var>).</li><li>Let <var>raw</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>cooked</var>, <emu-val>\"raw\"</emu-val>)).</li><li>Let <var>literalSegments</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>raw</var>).</li><li>If <var>literalSegments</var> &#8804; 0, return the empty String.</li><li>Let <var>stringElements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat,<ol><li>Let <var>nextKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>).</li><li>Let <var>nextSeg</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>raw</var>, <var>nextKey</var>)).</li><li>Append in order the code unit elements of <var>nextSeg</var> to the end of <var>stringElements</var>.</li><li>If <var>nextIndex</var> + 1 = <var>literalSegments</var>, then<ol><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>stringElements</var>. If <var>stringElements</var> has no elements, the empty String is returned.</li></ol></li><li>If <var>nextIndex</var> &lt; <var>numberOfSubstitutions</var>, let <var>next</var> be <var>substitutions</var>[<var>nextIndex</var>].</li><li>Else, let <var>next</var> be the empty String.</li><li>Let <var>nextSub</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>next</var>).</li><li>Append in order the code unit elements of <var>nextSub</var> to the end of <var>stringElements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>raw</code> function is intended for use as a tag function of a Tagged Template (<emu-xref href=\"#sec-tagged-templates\"><a href=\"#sec-tagged-templates\" class=\"excluded-xref\" excluded-id=\"sec-tagged-templates\">#sec-tagged-templates</a></emu-xref>). When called as such, the first argument will be a well formed template object and the rest parameter will contain the substitution values.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-algorithm-conventions": {"num": "5.2", "title": "#sec-algorithm-conventions Algorithm Conventions", "html": "<emu-clause id=\"sec-algorithm-conventions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-algorithm-conventions\">#sec-algorithm-conventions</span> Algorithm Conventions</h1>\n    <p>The specification often uses a numbered list to specify steps in an algorithm. These algorithms are used to precisely specify the required semantics of ECMAScript language constructs. The algorithms are not intended to imply the use of any specific implementation technique. In practice, there may be more efficient algorithms available to implement a given feature.</p>\n    <p>Algorithms may be explicitly parameterized with an ordered, comma-separated sequence of alias names which may be used within the algorithm steps to reference the argument passed in that position. Optional parameters are denoted with surrounding brackets ([ , <var>name</var> ]) and are no different from required parameters within algorithm steps. A rest parameter may appear at the end of a parameter list, denoted with leading ellipsis (, ...<var>name</var>). The rest parameter captures all of the arguments provided following the required and optional parameters into a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. If there are no such additional arguments, that <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is empty.</p>\n    <p>Algorithm steps may be subdivided into sequential substeps. Substeps are indented and may themselves be further divided into indented substeps. Outline numbering conventions are used to identify substeps with the first level of substeps labelled with lower case alphabetic characters and the second level of substeps labelled with lower case roman numerals. If more than three levels are required these rules repeat with the fourth level using numeric labels. For example:</p>\n    <emu-alg type=\"example\"><ol><li>Top-level step<ol><li>Substep.</li><li>Substep.<ol><li>Subsubstep.<ol><li>Subsubsubstep<ol><li>Subsubsubsubstep<ol><li>Subsubsubsubsubstep</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n    <p>A step or substep may be written as an &#8220;if&#8221; predicate that conditions its substeps. In this case, the substeps are only applied if the predicate is true. If a step or substep begins with the word &#8220;else&#8221;, it is a predicate that is the negation of the preceding &#8220;if&#8221; predicate step at the same level.</p>\n    <p>A step may specify the iterative application of its substeps.</p>\n    <p>A step that begins with &#8220;<dfn id=\"assert\">Assert</dfn>:&#8221; asserts an invariant condition of its algorithm. Such assertions are used to make explicit algorithmic invariants that would otherwise be implicit. Such assertions add no additional semantic requirements and hence need not be checked by an implementation. They are used simply to clarify algorithms.</p>\n    <p>Algorithm steps may declare named aliases for any value using the form &#8220;Let <var>x</var> be <var>someValue</var>&#8221;. These aliases are reference-like in that both <var>x</var> and <var>someValue</var> refer to the same underlying data and modifications to either are visible to both. Algorithm steps that want to avoid this reference-like behaviour should explicitly make a copy of the right-hand side: &#8220;Let <var>x</var> be a copy of <var>someValue</var>&#8221; creates a shallow copy of <var>someValue</var>.</p>\n    <p>Once declared, an alias may be referenced in any subsequent steps and must not be referenced from steps prior to the alias's declaration. Aliases may be modified using the form &#8220;Set <var>x</var> to <var>someOtherValue</var>&#8221;.</p>\n\n    <div id=\"excluded-sec-algorithm-conventions-abstract-operations\"><h1><span class=\"secnum\">5.2.1</span>#sec-algorithm-conventions-abstract-operations Abstract Operations</h1>...</div><div id=\"excluded-sec-algorithm-conventions-syntax-directed-operations\"><h1><span class=\"secnum\">5.2.2</span>#sec-algorithm-conventions-syntax-directed-operations Syntax-Directed Operations</h1>...</div><div id=\"excluded-sec-runtime-semantics\"><h1><span class=\"secnum\">5.2.3</span>#sec-runtime-semantics Runtime Semantics</h1>...</div><div id=\"excluded-sec-static-semantic-rules\"><h1><span class=\"secnum\">5.2.4</span>#sec-static-semantic-rules Static Semantics</h1>...</div><div id=\"excluded-sec-mathematical-operations\"><h1><span class=\"secnum\">5.2.5</span>#sec-mathematical-operations Mathematical Operations</h1>...</div><div id=\"excluded-sec-value-notation\"><h1><span class=\"secnum\">5.2.6</span>#sec-value-notation Value Notation</h1>...</div></emu-clause>\n"}, "sec-array.prototype.unshift": {"num": "22.1.3.31", "title": "#sec-array.prototype.unshift Array.prototype.unshift ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.unshift\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.unshift\">#sec-array.prototype.unshift</span> Array.prototype.unshift ( ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The arguments are prepended to the start of the array, such that their order within the array is the same as the order in which they appear in the argument list.</p>\n        </div></emu-note>\n        <p>When the <code>unshift</code> method is called with zero or more arguments <var>item1</var>, <var>item2</var>, etc., the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>argCount</var> be the number of elements in <var>items</var>.</li><li>If <var>argCount</var> &gt; 0, then<ol><li>If <var>len</var> + <var>argCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; 0,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>argCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Let <var>j</var> be 0.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of that element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>j</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> + <var>argCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>len</var> + <var>argCount</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>unshift</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>unshift</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.concat": {"num": "21.1.3.4", "title": "#sec-string.prototype.concat String.prototype.concat ( ...args )", "html": "<emu-clause id=\"sec-string.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.concat\">#sec-string.prototype.concat</span> String.prototype.concat ( ...<var>args</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>concat</code> method is called it returns the String value consisting of the code units of the <emu-val>this</emu-val> value (converted to a String) followed by the code units of each of the arguments converted to a String. The result is a String value, not a String object.</p>\n        </div></emu-note>\n        <p>When the <code>concat</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>R</var> be <var>S</var>.</li><li>Repeat, while <var>args</var> is not empty,<ol><li>Remove the first element from <var>args</var> and let <var>next</var> be the value of that element.</li><li>Let <var>nextString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>next</var>).</li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>nextString</var>.</li></ol></li><li>Return <var>R</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-object.assign": {"num": "19.1.2.1", "title": "#sec-object.assign Object.assign ( target, ...sources )", "html": "<emu-clause id=\"sec-object.assign\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.assign\">#sec-object.assign</span> Object.assign ( <var>target</var>, ...<var>sources</var> )</h1>\n        <p>The <code>assign</code> function is used to copy the values of all of the enumerable own properties from one or more source objects to a <var>target</var> object. When the <code>assign</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>to</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>target</var>).</li><li>If only one argument was passed, return <var>to</var>.</li><li>For each element <var>nextSource</var> of <var>sources</var>, in ascending index order, do<ol><li>If <var>nextSource</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>nextSource</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>to</var>, <var>nextKey</var>, <var>propValue</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li></ol></li></ol></li><li>Return <var>to</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>assign</code> function is 2.</p>\n      </emu-clause>\n\n      "}, "sec-array.of": {"num": "22.1.2.3", "title": "#sec-array.of Array.of ( ...items )", "html": "<emu-clause id=\"sec-array.of\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.of\">#sec-array.of</span> Array.of ( ...<var>items</var> )</h1>\n        <p>When the <code>of</code> method is called with any number of arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>len</var> be the number of elements in <var>items</var>.</li><li>Let <var>C</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>len</var>).</li></ol></li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>kValue</var> be <var>items</var>[<var>k</var>].</li><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>kValue</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>items</var> argument is assumed to be a well-formed rest argument value.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>of</code> function is an intentionally generic factory method; it does not require that its <emu-val>this</emu-val> value be the Array <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Therefore it can be transferred to or inherited by other constructors that may be called with a single numeric argument.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.of": {"num": "22.2.2.2", "title": "#sec-%typedarray%.of %TypedArray%.of ( ...items )", "html": "<emu-clause id=\"sec-%typedarray%.of\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.of\">#sec-%typedarray%.of</span> %TypedArray%.of ( ...<var>items</var> )</h1>\n        <p>When the <code>of</code> method is called with any number of arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>len</var> be the number of elements in <var>items</var>.</li><li>Let <var>C</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>newObj</var> be ?&#160;<emu-xref aoid=\"TypedArrayCreate\"><a href=\"#typedarray-create\">TypedArrayCreate</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>kValue</var> be <var>items</var>[<var>k</var>].</li><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>newObj</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>newObj</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <var>items</var> argument is assumed to be a well-formed rest argument value.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.splice": {"num": "22.1.3.28", "title": "#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )", "html": "<emu-clause id=\"sec-array.prototype.splice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.splice\">#sec-array.prototype.splice</span> Array.prototype.splice ( <var>start</var>, <var>deleteCount</var>, ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>splice</code> method is called with two or more arguments <var>start</var>, <var>deleteCount</var> and zero or more <var>items</var>, the <var>deleteCount</var> elements of the array starting at <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> <var>start</var> are replaced by the elements of <var>items</var>. An Array object containing the deleted elements (if any) is returned.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>actualStart</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>actualStart</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>start</var> is not present, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be 0.</li></ol></li><li>Else if <var>deleteCount</var> is not present, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be <var>len</var> - <var>actualStart</var>.</li></ol></li><li>Else,<ol><li>Let <var>insertCount</var> be the number of elements in <var>items</var>.</li><li>Let <var>dc</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>deleteCount</var>).</li><li>Let <var>actualDeleteCount</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>dc</var>, 0), <var>len</var> - <var>actualStart</var>).</li></ol></li><li>If <var>len</var> + <var>insertCount</var> - <var>actualDeleteCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>actualDeleteCount</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>actualDeleteCount</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>actualStart</var> + <var>k</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>fromValue</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>actualDeleteCount</var>, <emu-val>true</emu-val>).</li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li>If <var>itemCount</var> &lt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>k</var> &lt; (<var>len</var> - <var>actualDeleteCount</var>),<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var>).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Set <var>k</var> to <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; (<var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>),<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1)).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Else if <var>itemCount</var> &gt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to (<var>len</var> - <var>actualDeleteCount</var>).</li><li>Repeat, while <var>k</var> &gt; <var>actualStart</var>,<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>items</var> is not empty,<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of that element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li id=\"step-array-proto-splice-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property of the result Array in step <emu-xref href=\"#step-array-proto-splice-set-length\"><a href=\"#step-array-proto-splice-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-splice-set-length\">#step-array-proto-splice-set-length</a></emu-xref> was necessary in previous editions of ECMAScript to ensure that its length was correct in situations where the trailing elements of the result Array were not present. Setting <emu-val>\"length\"</emu-val> became unnecessary starting in ES2015 when the result Array was initialized to its proper length rather than an empty Array but is carried forward to preserve backward compatibility.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>splice</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.fromcodepoint": {"num": "21.1.2.2", "title": "#sec-string.fromcodepoint String.fromCodePoint ( ...codePoints )", "html": "<emu-clause id=\"sec-string.fromcodepoint\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcodepoint\">#sec-string.fromcodepoint</span> String.fromCodePoint ( ...<var>codePoints</var> )</h1>\n        <p>The <code>String.fromCodePoint</code> function may be called with any number of arguments which form the rest parameter <var>codePoints</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>length</var> be the number of elements in <var>codePoints</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var>,<ol><li>Let <var>next</var> be <var>codePoints</var>[<var>nextIndex</var>].</li><li>Let <var>nextCP</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>next</var>).</li><li>If !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>nextCP</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>nextCP</var> &lt; 0 or <var>nextCP</var> &gt; 0x10FFFF, throw a <emu-val>RangeError</emu-val> exception.</li><li>Append the elements of !&#160;<emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>nextCP</var>) to the end of <var>elements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is 0, the empty String is returned.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCodePoint</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-array-prototype-object": {"num": "22.1.3", "title": "#sec-properties-of-the-array-prototype-object Properties of the Array Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-array-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-array-prototype-object\">#sec-properties-of-the-array-prototype-object</span> Properties of the Array Prototype Object</h1>\n      <p>The Array prototype object:</p>\n      <ul>\n        <li>is <dfn>%ArrayPrototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is 0 and whose attributes are { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Array prototype object is specified to be an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-array.prototype.concat\"><h1><span class=\"secnum\">22.1.3.1</span>#sec-array.prototype.concat Array.prototype.concat ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.constructor\"><h1><span class=\"secnum\">22.1.3.2</span>#sec-array.prototype.constructor Array.prototype.constructor</h1>...</div><div id=\"excluded-sec-array.prototype.copywithin\"><h1><span class=\"secnum\">22.1.3.3</span>#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-array.prototype.entries\"><h1><span class=\"secnum\">22.1.3.4</span>#sec-array.prototype.entries Array.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-array.prototype.every\"><h1><span class=\"secnum\">22.1.3.5</span>#sec-array.prototype.every Array.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.fill\"><h1><span class=\"secnum\">22.1.3.6</span>#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.filter\"><h1><span class=\"secnum\">22.1.3.7</span>#sec-array.prototype.filter Array.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.find\"><h1><span class=\"secnum\">22.1.3.8</span>#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findindex\"><h1><span class=\"secnum\">22.1.3.9</span>#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flat\"><h1><span class=\"secnum\">22.1.3.10</span>#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flatmap\"><h1><span class=\"secnum\">22.1.3.11</span>#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.foreach\"><h1><span class=\"secnum\">22.1.3.12</span>#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.includes\"><h1><span class=\"secnum\">22.1.3.13</span>#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.indexof\"><h1><span class=\"secnum\">22.1.3.14</span>#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.join\"><h1><span class=\"secnum\">22.1.3.15</span>#sec-array.prototype.join Array.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-array.prototype.keys\"><h1><span class=\"secnum\">22.1.3.16</span>#sec-array.prototype.keys Array.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-array.prototype.lastindexof\"><h1><span class=\"secnum\">22.1.3.17</span>#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.map\"><h1><span class=\"secnum\">22.1.3.18</span>#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.pop\"><h1><span class=\"secnum\">22.1.3.19</span>#sec-array.prototype.pop Array.prototype.pop ( )</h1>...</div><div id=\"excluded-sec-array.prototype.push\"><h1><span class=\"secnum\">22.1.3.20</span>#sec-array.prototype.push Array.prototype.push ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.reduce\"><h1><span class=\"secnum\">22.1.3.21</span>#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reduceright\"><h1><span class=\"secnum\">22.1.3.22</span>#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reverse\"><h1><span class=\"secnum\">22.1.3.23</span>#sec-array.prototype.reverse Array.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-array.prototype.shift\"><h1><span class=\"secnum\">22.1.3.24</span>#sec-array.prototype.shift Array.prototype.shift ( )</h1>...</div><div id=\"excluded-sec-array.prototype.slice\"><h1><span class=\"secnum\">22.1.3.25</span>#sec-array.prototype.slice Array.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-array.prototype.some\"><h1><span class=\"secnum\">22.1.3.26</span>#sec-array.prototype.some Array.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.sort\"><h1><span class=\"secnum\">22.1.3.27</span>#sec-array.prototype.sort Array.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-array.prototype.splice\"><h1><span class=\"secnum\">22.1.3.28</span>#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.tolocalestring\"><h1><span class=\"secnum\">22.1.3.29</span>#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.tostring\"><h1><span class=\"secnum\">22.1.3.30</span>#sec-array.prototype.tostring Array.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-array.prototype.unshift\"><h1><span class=\"secnum\">22.1.3.31</span>#sec-array.prototype.unshift Array.prototype.unshift ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.values\"><h1><span class=\"secnum\">22.1.3.32</span>#sec-array.prototype.values Array.prototype.values ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@iterator\"><h1><span class=\"secnum\">22.1.3.33</span>#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@unscopables\"><h1><span class=\"secnum\">22.1.3.34</span>#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]</h1>...</div></emu-clause>\n\n    "}, "sec-ecmascript-standard-built-in-objects": {"num": "17", "title": "#sec-ecmascript-standard-built-in-objects ECMAScript Standard Built-in Objects", "html": "<emu-clause id=\"sec-ecmascript-standard-built-in-objects\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-standard-built-in-objects\">#sec-ecmascript-standard-built-in-objects</span> ECMAScript Standard Built-in Objects</h1>\n  <p>There are certain built-in objects available whenever an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> begins execution. One, the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, is part of the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> of the executing program. Others are accessible as initial properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> or indirectly as properties of accessible built-in objects.</p>\n  <p>Unless specified otherwise, a built-in object that is callable as a function is a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the characteristics described in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>. Unless specified otherwise, the [[Extensible]] internal slot of a built-in object initially has the value <emu-val>true</emu-val>. Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has a [[Realm]] internal slot whose value is the <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> of the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> for which the object was initially created.</p>\n  <p>Many built-in objects are functions: they can be invoked with arguments. Some of them furthermore are constructors: they are functions intended for use with the <code>new</code> operator. For each built-in function, this specification describes the arguments required by that function and the properties of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. For each built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, this specification furthermore describes properties of the prototype object of that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and properties of specific object instances returned by a <code>new</code> expression that invokes that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is given fewer arguments than the function is specified to require, the function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> shall behave exactly as if it had been given sufficient additional arguments, each such argument being the <emu-val>undefined</emu-val> value. Such missing arguments are considered to be &#8220;not present&#8221; and may be identified in that manner by specification algorithms. In the description of a particular function, the terms &#8220;<emu-val>this</emu-val> value&#8221; and &#8220;NewTarget&#8221; have the meanings given in <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> described is given more arguments than the function is specified to allow, the extra arguments are evaluated by the call and then ignored by the function. However, an implementation may define implementation specific behaviour relating to such arguments as long as the behaviour is not the throwing of a <emu-val>TypeError</emu-val> exception that is predicated simply on the presence of an extra argument.</p>\n  <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n    <p>Implementations that add additional capabilities to the set of built-in functions are encouraged to do so by adding new functions rather than adding new parameters to existing functions.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified every built-in function and every built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has the Function prototype object, which is the initial value of the expression <code>Function.prototype</code> (<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-function-prototype-object\">#sec-properties-of-the-function-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot.</p>\n  <p>Unless otherwise specified every built-in prototype object has the Object prototype object, which is the initial value of the expression <code>Object.prototype</code> (<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-object-prototype-object\">#sec-properties-of-the-object-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot, except the Object prototype object itself.</p>\n  <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function.</p>\n  <p>Each built-in function defined in this specification is created by calling the <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref> abstract operation (<emu-xref href=\"#sec-createbuiltinfunction\"><a href=\"#sec-createbuiltinfunction\" class=\"excluded-xref\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</a></emu-xref>).</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"length\"</emu-val> property whose value is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Unless otherwise specified, this value is equal to the number of required parameters shown in the subclause headings for the function description. Optional parameters and rest parameters are not included in the parameter count.</p>\n  <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n    <p>For example, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that is the initial value of the <emu-val>\"map\"</emu-val> property of the Array prototype object is described under the subclause heading &#171;Array.prototype.map (callbackFn [ , thisArg])&#187; which shows the two named arguments callbackFn and thisArg, the latter being optional; therefore the value of the <emu-val>\"length\"</emu-val> property of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is 1.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified, the <emu-val>\"length\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"name\"</emu-val> property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are identified as anonymous functions use the empty String as the value of the <emu-val>\"name\"</emu-val> property. For functions that are specified as properties of objects, the name value is the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string used to access the function. Functions that are specified as get or set accessor functions of built-in properties have <emu-val>\"get \"</emu-val> or <emu-val>\"set \"</emu-val> prepended to the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string. The value of the <emu-val>\"name\"</emu-val> property is explicitly specified for each built-in functions whose property key is a Symbol value. The <emu-val>\"name\"</emu-val> property is set using <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>.</p>\n  <p>Unless otherwise specified, the <emu-val>\"name\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every other <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> described in clauses <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref> and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified.</p>\n  <p>Every <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> described in clauses <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref> through <emu-xref href=\"#sec-reflection\"><a href=\"#sec-reflection\" class=\"excluded-xref\" excluded-id=\"sec-reflection\">#sec-reflection</a></emu-xref> and in Annex <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, <emu-val>undefined</emu-val>. If only a set accessor is described the get accessor is the default value, <emu-val>undefined</emu-val>.</p>\n</emu-clause>\n\n"}, "sec-function.prototype.call": {"num": "19.2.3.3", "title": "#sec-function.prototype.call Function.prototype.call ( thisArg, ...args )", "html": "<emu-clause id=\"sec-function.prototype.call\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</span> Function.prototype.call ( <var>thisArg</var>, ...<var>args</var> )</h1>\n        <p>When the <code>call</code> method is called with argument <var>thisArg</var> and zero or more <var>args</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>func</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li id=\"step-function-proto-call-call\">Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisArg</var>, <var>args</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>thisArg</var> value is passed without modification as the <emu-val>this</emu-val> value. This is a change from Edition 3, where an <emu-val>undefined</emu-val> or <emu-val>null</emu-val> <var>thisArg</var> is replaced with the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> is applied to all other values and that result is passed as the <emu-val>this</emu-val> value. Even though the <var>thisArg</var> is passed without modification, non-strict functions still perform these transformations upon entry to the function.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>func</var> is an arrow function or a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref> then the <var>thisArg</var> will be ignored by the function [[Call]] in step <emu-xref href=\"#step-function-proto-call-call\"><a href=\"#step-function-proto-call-call\" class=\"excluded-xref\" excluded-id=\"step-function-proto-call-call\">#step-function-proto-call-call</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.fromcharcode": {"num": "21.1.2.1", "title": "#sec-string.fromcharcode String.fromCharCode ( ...codeUnits )", "html": "<emu-clause id=\"sec-string.fromcharcode\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcharcode\">#sec-string.fromcharcode</span> String.fromCharCode ( ...<var>codeUnits</var> )</h1>\n        <p>The <code>String.fromCharCode</code> function may be called with any number of arguments which form the rest parameter <var>codeUnits</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>length</var> be the number of elements in <var>codeUnits</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var>,<ol><li>Let <var>next</var> be <var>codeUnits</var>[<var>nextIndex</var>].</li><li>Let <var>nextCU</var> be ?&#160;<emu-xref aoid=\"ToUint16\"><a href=\"#sec-touint16\">ToUint16</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextCU</var> to the end of <var>elements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is 0, the empty String is returned.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCharCode</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-array-items": {"num": "22.1.1.3", "title": "#sec-array-items Array ( ...items )", "html": "<emu-clause id=\"sec-array-items\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-items\">#sec-array-items</span> Array ( ...<var>items</var> )</h1>\n        <p>This description applies if and only if the Array <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is called with at least two arguments.</p>\n        <p>When the <code>Array</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>numberOfArgs</var> be the number of arguments passed to this function call.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>numberOfArgs</var> &#8805; 2.</li><li>If NewTarget is <emu-val>undefined</emu-val>, let <var>newTarget</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>; else let <var>newTarget</var> be NewTarget.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%Array.prototype%\"</emu-val>).</li><li>Let <var>array</var> be ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>numberOfArgs</var>, <var>proto</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>numberOfArgs</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>itemK</var> be <var>items</var>[<var>k</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, <var>Pk</var>, <var>itemK</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>array</var>'s <emu-val>\"length\"</emu-val> property is <var>numberOfArgs</var>.</li><li>Return <var>array</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-function.prototype.bind": {"num": "19.2.3.2", "title": "#sec-function.prototype.bind Function.prototype.bind ( thisArg, ...args )", "html": "<emu-clause id=\"sec-function.prototype.bind\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.bind\">#sec-function.prototype.bind</span> Function.prototype.bind ( <var>thisArg</var>, ...<var>args</var> )</h1>\n        <p>When the <code>bind</code> method is called with argument <var>thisArg</var> and zero or more <var>args</var>, it performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>Target</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>Target</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>F</var> be ?&#160;<emu-xref aoid=\"BoundFunctionCreate\"><a href=\"#sec-boundfunctioncreate\">BoundFunctionCreate</a></emu-xref>(<var>Target</var>, <var>thisArg</var>, <var>args</var>).</li><li>Let <var>targetHasLength</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>Target</var>, <emu-val>\"length\"</emu-val>).</li><li>If <var>targetHasLength</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>targetLen</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>Target</var>, <emu-val>\"length\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>targetLen</var>) is not Number, let <var>L</var> be 0.</li><li>Else,<ol><li>Set <var>targetLen</var> to !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>targetLen</var>).</li><li>Let <var>L</var> be the larger of 0 and the result of <var>targetLen</var> minus the number of elements of <var>args</var>.</li></ol></li></ol></li><li>Else, let <var>L</var> be 0.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>L</var>).</li><li>Let <var>targetName</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>Target</var>, <emu-val>\"name\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>targetName</var>) is not String, set <var>targetName</var> to the empty String.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>targetName</var>, <emu-val>\"bound\"</emu-val>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Function objects created using <code>Function.prototype.bind</code> are exotic objects. They also do not have a <emu-val>\"prototype\"</emu-val> property.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>Target</var> is an arrow function or a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref> then the <var>thisArg</var> passed to this method will not be used by subsequent calls to <var>F</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}