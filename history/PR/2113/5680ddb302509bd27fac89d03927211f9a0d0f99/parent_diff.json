{"from": {"secList": ["sec-array.from", "sec-operations-on-iterator-objects", "sec-add-entries-from-iterable", "sec-createlistiteratorRecord", "sec-set-iterable", "sec-weakset-iterable"], "secData": {"sec-array.from": {"num": "22.1.2.1", "title": "#sec-array.from Array.from ( items [ , mapfn [ , thisArg ] ] )", "html": "<emu-clause id=\"sec-array.from\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.from\">#sec-array.from</span> Array.from ( <var>items</var> [ , <var>mapfn</var> [ , <var>thisArg</var> ] ] )</h1>\n        <p>When the <code>from</code> method is called with argument <var>items</var> and optional arguments <var>mapfn</var> and <var>thisArg</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-val>this</emu-val> value.</li><li>If <var>mapfn</var> is <emu-val>undefined</emu-val>, let <var>mapping</var> be <emu-val>false</emu-val>.</li><li>Else,<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>mapfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>mapping</var> be <emu-val>true</emu-val>.</li></ol></li><li>Let <var>usingIterator</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>items</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>).</li><li>If <var>usingIterator</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>).</li></ol></li><li>Else,<ol><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li></ol></li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>items</var>, <emu-const>sync</emu-const>, <var>usingIterator</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> &#8805; 2<sup>53</sup> - 1, then<ol><li>Let <var>error</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(a newly created <emu-val>TypeError</emu-val> object).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>error</var>).</li></ol></li><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>k</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>nextValue</var>, <var>k</var> &#187;).</li><li>If <var>mappedValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>mappedValue</var>).</li><li>Set <var>mappedValue</var> to <var>mappedValue</var>.[[Value]].</li></ol></li><li>Else, let <var>mappedValue</var> be <var>nextValue</var>.</li><li>Let <var>defineStatus</var> be <emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>mappedValue</var>).</li><li>If <var>defineStatus</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>defineStatus</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>NOTE: <var>items</var> is not an Iterable so assume it is an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>.</li><li>Let <var>arrayLike</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>items</var>).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>len</var>).</li></ol></li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var> &#187;).</li></ol></li><li>Else, let <var>mappedValue</var> be <var>kValue</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>mappedValue</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>from</code> function is an intentionally generic factory method; it does not require that its <emu-val>this</emu-val> value be the Array <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Therefore it can be transferred to or inherited by any other constructors that may be called with a single numeric argument.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-operations-on-iterator-objects": {"num": "7.4", "title": "#sec-operations-on-iterator-objects Operations on Iterator Objects", "html": "<emu-clause id=\"sec-operations-on-iterator-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-operations-on-iterator-objects\">#sec-operations-on-iterator-objects</span> Operations on Iterator Objects</h1>\n    <p>See Common Iteration Interfaces (<emu-xref href=\"#sec-iteration\"><a href=\"#sec-iteration\" class=\"excluded-xref\" excluded-id=\"sec-iteration\">#sec-iteration</a></emu-xref>).</p>\n\n    <div id=\"excluded-sec-getiterator\"><h1><span class=\"secnum\">7.4.1</span>#sec-getiterator GetIterator ( obj [ , hint [ , method ] ] )</h1>...</div><div id=\"excluded-sec-iteratornext\"><h1><span class=\"secnum\">7.4.2</span>#sec-iteratornext IteratorNext ( iteratorRecord [ , value ] )</h1>...</div><div id=\"excluded-sec-iteratorcomplete\"><h1><span class=\"secnum\">7.4.3</span>#sec-iteratorcomplete IteratorComplete ( iterResult )</h1>...</div><div id=\"excluded-sec-iteratorvalue\"><h1><span class=\"secnum\">7.4.4</span>#sec-iteratorvalue IteratorValue ( iterResult )</h1>...</div><div id=\"excluded-sec-iteratorstep\"><h1><span class=\"secnum\">7.4.5</span>#sec-iteratorstep IteratorStep ( iteratorRecord )</h1>...</div><div id=\"excluded-sec-iteratorclose\"><h1><span class=\"secnum\">7.4.6</span>#sec-iteratorclose IteratorClose ( iteratorRecord, completion )</h1>...</div><div id=\"excluded-sec-asynciteratorclose\"><h1><span class=\"secnum\">7.4.7</span>#sec-asynciteratorclose AsyncIteratorClose ( iteratorRecord, completion )</h1>...</div><div id=\"excluded-sec-createiterresultobject\"><h1><span class=\"secnum\">7.4.8</span>#sec-createiterresultobject CreateIterResultObject ( value, done )</h1>...</div><div id=\"excluded-sec-createlistiteratorRecord\"><h1><span class=\"secnum\">7.4.9</span>#sec-createlistiteratorRecord CreateListIteratorRecord ( list )</h1>...</div><div id=\"excluded-sec-iterabletolist\"><h1><span class=\"secnum\">7.4.10</span>#sec-iterabletolist Runtime Semantics: IterableToList ( items [ , method ] )</h1>...</div></emu-clause>\n"}, "sec-add-entries-from-iterable": {"num": "23.1.1.2", "title": "#sec-add-entries-from-iterable AddEntriesFromIterable ( target, iterable, adder )", "html": "<emu-clause id=\"sec-add-entries-from-iterable\" aoid=\"AddEntriesFromIterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-add-entries-from-iterable\">#sec-add-entries-from-iterable</span> AddEntriesFromIterable ( <var>target</var>, <var>iterable</var>, <var>adder</var> )</h1>\n        <p>The abstract operation AddEntriesFromIterable takes arguments <var>target</var>, <var>iterable</var>, and <var>adder</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). <var>adder</var> will be invoked, with <var>target</var> as the receiver. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>adder</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterable</var> is present, and is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>iterable</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>target</var>.</li><li>Let <var>nextItem</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextItem</var>) is not Object, then<ol><li>Let <var>error</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(a newly created <emu-val>TypeError</emu-val> object).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>error</var>).</li></ol></li><li>Let <var>k</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"0\"</emu-val>).</li><li>If <var>k</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>k</var>).</li><li>Let <var>v</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"1\"</emu-val>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>v</var>).</li><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>adder</var>, <var>target</var>, &#171; <var>k</var>.[[Value]], <var>v</var>.[[Value]] &#187;).</li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The parameter <var>iterable</var> is expected to be an object that implements an <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> method that returns an iterator object that produces a two element <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> whose first element is a value that will be used as a Map key and whose second element is the value to associate with that key.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-createlistiteratorRecord": {"num": "7.4.9", "title": "#sec-createlistiteratorRecord CreateListIteratorRecord ( list )", "html": "<emu-clause id=\"sec-createlistiteratorRecord\" oldids=\"sec-createlistiterator\" aoid=\"CreateListIteratorRecord\">\n      <span id=\"sec-createlistiterator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createlistiteratorRecord\">#sec-createlistiteratorRecord</span> CreateListIteratorRecord ( <var>list</var> )</h1>\n      <p>The abstract operation CreateListIteratorRecord takes argument <var>list</var>. It creates an Iterator (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) object record whose next method returns the successive elements of <var>list</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>iterator</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>, &#171; [[IteratedList]], [[ListNextIndex]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedList]] to <var>list</var>.</li><li>Set <var>iterator</var>.[[ListNextIndex]] to 0.</li><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-listiteratornext-functions\" title=\"\"><a href=\"#sec-listiteratornext-functions\">ListIteratorNext Functions</a></emu-xref>.</li><li>Let <var>next</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, &#171; &#187;).</li><li>Return <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>next</var>, [[Done]]: <emu-val>false</emu-val> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The list iterator object is never directly accessible to ECMAScript code.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-listiteratornext-functions\"><h1><span class=\"secnum\">7.4.9.1</span>#sec-listiteratornext-functions ListIteratorNext Functions</h1>...</div></emu-clause>\n\n    "}, "sec-set-iterable": {"num": "23.2.1.1", "title": "#sec-set-iterable Set ( [ iterable ] )", "html": "<emu-clause id=\"sec-set-iterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set-iterable\">#sec-set-iterable</span> Set ( [ <var>iterable</var> ] )</h1>\n        <p>When the <code>Set</code> function is called with optional argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>set</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%Set.prototype%\"</emu-val>, &#171; [[SetData]] &#187;).</li><li>Set <var>set</var>.[[SetData]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>iterable</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>set</var>.</li><li>Let <var>adder</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>set</var>, <emu-val>\"add\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>adder</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>iterable</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>set</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>adder</var>, <var>set</var>, &#171; <var>nextValue</var> &#187;).</li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-weakset-iterable": {"num": "23.4.1.1", "title": "#sec-weakset-iterable WeakSet ( [ iterable ] )", "html": "<emu-clause id=\"sec-weakset-iterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset-iterable\">#sec-weakset-iterable</span> WeakSet ( [ <var>iterable</var> ] )</h1>\n        <p>When the <code>WeakSet</code> function is called with optional argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>set</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%WeakSet.prototype%\"</emu-val>, &#171; [[WeakSetData]] &#187;).</li><li>Set <var>set</var>.[[WeakSetData]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>iterable</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>set</var>.</li><li>Let <var>adder</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>set</var>, <emu-val>\"add\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>adder</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>iterable</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>set</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>adder</var>, <var>set</var>, &#171; <var>nextValue</var> &#187;).</li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-array.from", "sec-operations-on-iterator-objects", "sec-add-entries-from-iterable", "sec-createlistiteratorRecord", "sec-set-iterable", "sec-weakset-iterable"], "secData": {"sec-array.from": {"num": "22.1.2.1", "title": "#sec-array.from Array.from ( items [ , mapfn [ , thisArg ] ] )", "html": "<emu-clause id=\"sec-array.from\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.from\">#sec-array.from</span> Array.from ( <var>items</var> [ , <var>mapfn</var> [ , <var>thisArg</var> ] ] )</h1>\n        <p>When the <code>from</code> method is called with argument <var>items</var> and optional arguments <var>mapfn</var> and <var>thisArg</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-val>this</emu-val> value.</li><li>If <var>mapfn</var> is <emu-val>undefined</emu-val>, let <var>mapping</var> be <emu-val>false</emu-val>.</li><li>Else,<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>mapfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>mapping</var> be <emu-val>true</emu-val>.</li></ol></li><li>Let <var>usingIterator</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>items</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>).</li><li>If <var>usingIterator</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>).</li></ol></li><li>Else,<ol><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li></ol></li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>items</var>, <emu-const>sync</emu-const>, <var>usingIterator</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> &#8805; 2<sup>53</sup> - 1, then<ol><li>Let <var>error</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(a newly created <emu-val>TypeError</emu-val> object).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>error</var>).</li></ol></li><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>k</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>nextValue</var>, <var>k</var> &#187;).</li><li><emu-xref aoid=\"IfAbruptCloseIterator\"><a href=\"#sec-ifabruptcloseiterator\">IfAbruptCloseIterator</a></emu-xref>(<var>mappedValue</var>, <var>iteratorRecord</var>).</li></ol></li><li>Else, let <var>mappedValue</var> be <var>nextValue</var>.</li><li>Let <var>defineStatus</var> be <emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>mappedValue</var>).</li><li><emu-xref aoid=\"IfAbruptCloseIterator\"><a href=\"#sec-ifabruptcloseiterator\">IfAbruptCloseIterator</a></emu-xref>(<var>defineStatus</var>, <var>iteratorRecord</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>NOTE: <var>items</var> is not an Iterable so assume it is an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>.</li><li>Let <var>arrayLike</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>items</var>).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>len</var>).</li></ol></li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var> &#187;).</li></ol></li><li>Else, let <var>mappedValue</var> be <var>kValue</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>mappedValue</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>from</code> function is an intentionally generic factory method; it does not require that its <emu-val>this</emu-val> value be the Array <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Therefore it can be transferred to or inherited by any other constructors that may be called with a single numeric argument.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-operations-on-iterator-objects": {"num": "7.4", "title": "#sec-operations-on-iterator-objects Operations on Iterator Objects", "html": "<emu-clause id=\"sec-operations-on-iterator-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-operations-on-iterator-objects\">#sec-operations-on-iterator-objects</span> Operations on Iterator Objects</h1>\n    <p>See Common Iteration Interfaces (<emu-xref href=\"#sec-iteration\"><a href=\"#sec-iteration\" class=\"excluded-xref\" excluded-id=\"sec-iteration\">#sec-iteration</a></emu-xref>).</p>\n\n    <div id=\"excluded-sec-getiterator\"><h1><span class=\"secnum\">7.4.1</span>#sec-getiterator GetIterator ( obj [ , hint [ , method ] ] )</h1>...</div><div id=\"excluded-sec-iteratornext\"><h1><span class=\"secnum\">7.4.2</span>#sec-iteratornext IteratorNext ( iteratorRecord [ , value ] )</h1>...</div><div id=\"excluded-sec-iteratorcomplete\"><h1><span class=\"secnum\">7.4.3</span>#sec-iteratorcomplete IteratorComplete ( iterResult )</h1>...</div><div id=\"excluded-sec-iteratorvalue\"><h1><span class=\"secnum\">7.4.4</span>#sec-iteratorvalue IteratorValue ( iterResult )</h1>...</div><div id=\"excluded-sec-iteratorstep\"><h1><span class=\"secnum\">7.4.5</span>#sec-iteratorstep IteratorStep ( iteratorRecord )</h1>...</div><div id=\"excluded-sec-iteratorclose\"><h1><span class=\"secnum\">7.4.6</span>#sec-iteratorclose IteratorClose ( iteratorRecord, completion )</h1>...</div><div id=\"excluded-sec-ifabruptcloseiterator\"><h1><span class=\"secnum\">7.4.7</span>#sec-ifabruptcloseiterator IfAbruptCloseIterator ( value, iteratorRecord )</h1>...</div><div id=\"excluded-sec-asynciteratorclose\"><h1><span class=\"secnum\">7.4.8</span>#sec-asynciteratorclose AsyncIteratorClose ( iteratorRecord, completion )</h1>...</div><div id=\"excluded-sec-createiterresultobject\"><h1><span class=\"secnum\">7.4.9</span>#sec-createiterresultobject CreateIterResultObject ( value, done )</h1>...</div><div id=\"excluded-sec-createlistiteratorRecord\"><h1><span class=\"secnum\">7.4.10</span>#sec-createlistiteratorRecord CreateListIteratorRecord ( list )</h1>...</div><div id=\"excluded-sec-iterabletolist\"><h1><span class=\"secnum\">7.4.11</span>#sec-iterabletolist Runtime Semantics: IterableToList ( items [ , method ] )</h1>...</div></emu-clause>\n"}, "sec-add-entries-from-iterable": {"num": "23.1.1.2", "title": "#sec-add-entries-from-iterable AddEntriesFromIterable ( target, iterable, adder )", "html": "<emu-clause id=\"sec-add-entries-from-iterable\" aoid=\"AddEntriesFromIterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-add-entries-from-iterable\">#sec-add-entries-from-iterable</span> AddEntriesFromIterable ( <var>target</var>, <var>iterable</var>, <var>adder</var> )</h1>\n        <p>The abstract operation AddEntriesFromIterable takes arguments <var>target</var>, <var>iterable</var>, and <var>adder</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). <var>adder</var> will be invoked, with <var>target</var> as the receiver. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>adder</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterable</var> is present, and is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>iterable</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>target</var>.</li><li>Let <var>nextItem</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextItem</var>) is not Object, then<ol><li>Let <var>error</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(a newly created <emu-val>TypeError</emu-val> object).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>error</var>).</li></ol></li><li>Let <var>k</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"0\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptCloseIterator\"><a href=\"#sec-ifabruptcloseiterator\">IfAbruptCloseIterator</a></emu-xref>(<var>k</var>, <var>iteratorRecord</var>).</li><li>Let <var>v</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"1\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptCloseIterator\"><a href=\"#sec-ifabruptcloseiterator\">IfAbruptCloseIterator</a></emu-xref>(<var>v</var>, <var>iteratorRecord</var>).</li><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>adder</var>, <var>target</var>, &#171; <var>k</var>, <var>v</var> &#187;).</li><li><emu-xref aoid=\"IfAbruptCloseIterator\"><a href=\"#sec-ifabruptcloseiterator\">IfAbruptCloseIterator</a></emu-xref>(<var>status</var>, <var>iteratorRecord</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The parameter <var>iterable</var> is expected to be an object that implements an <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> method that returns an iterator object that produces a two element <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> whose first element is a value that will be used as a Map key and whose second element is the value to associate with that key.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-createlistiteratorRecord": {"num": "7.4.10", "title": "#sec-createlistiteratorRecord CreateListIteratorRecord ( list )", "html": "<emu-clause id=\"sec-createlistiteratorRecord\" oldids=\"sec-createlistiterator\" aoid=\"CreateListIteratorRecord\">\n      <span id=\"sec-createlistiterator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createlistiteratorRecord\">#sec-createlistiteratorRecord</span> CreateListIteratorRecord ( <var>list</var> )</h1>\n      <p>The abstract operation CreateListIteratorRecord takes argument <var>list</var>. It creates an Iterator (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) object record whose next method returns the successive elements of <var>list</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>iterator</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>, &#171; [[IteratedList]], [[ListNextIndex]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedList]] to <var>list</var>.</li><li>Set <var>iterator</var>.[[ListNextIndex]] to 0.</li><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-listiteratornext-functions\" title=\"\"><a href=\"#sec-listiteratornext-functions\">ListIteratorNext Functions</a></emu-xref>.</li><li>Let <var>next</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, &#171; &#187;).</li><li>Return <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>next</var>, [[Done]]: <emu-val>false</emu-val> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The list iterator object is never directly accessible to ECMAScript code.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-listiteratornext-functions\"><h1><span class=\"secnum\">7.4.10.1</span>#sec-listiteratornext-functions ListIteratorNext Functions</h1>...</div></emu-clause>\n\n    "}, "sec-set-iterable": {"num": "23.2.1.1", "title": "#sec-set-iterable Set ( [ iterable ] )", "html": "<emu-clause id=\"sec-set-iterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set-iterable\">#sec-set-iterable</span> Set ( [ <var>iterable</var> ] )</h1>\n        <p>When the <code>Set</code> function is called with optional argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>set</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%Set.prototype%\"</emu-val>, &#171; [[SetData]] &#187;).</li><li>Set <var>set</var>.[[SetData]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>iterable</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>set</var>.</li><li>Let <var>adder</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>set</var>, <emu-val>\"add\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>adder</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>iterable</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>set</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>adder</var>, <var>set</var>, &#171; <var>nextValue</var> &#187;).</li><li><emu-xref aoid=\"IfAbruptCloseIterator\"><a href=\"#sec-ifabruptcloseiterator\">IfAbruptCloseIterator</a></emu-xref>(<var>status</var>, <var>iteratorRecord</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-weakset-iterable": {"num": "23.4.1.1", "title": "#sec-weakset-iterable WeakSet ( [ iterable ] )", "html": "<emu-clause id=\"sec-weakset-iterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset-iterable\">#sec-weakset-iterable</span> WeakSet ( [ <var>iterable</var> ] )</h1>\n        <p>When the <code>WeakSet</code> function is called with optional argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>set</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%WeakSet.prototype%\"</emu-val>, &#171; [[WeakSetData]] &#187;).</li><li>Set <var>set</var>.[[WeakSetData]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>iterable</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>set</var>.</li><li>Let <var>adder</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>set</var>, <emu-val>\"add\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>adder</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>iterable</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>set</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>adder</var>, <var>set</var>, &#171; <var>nextValue</var> &#187;).</li><li><emu-xref aoid=\"IfAbruptCloseIterator\"><a href=\"#sec-ifabruptcloseiterator\">IfAbruptCloseIterator</a></emu-xref>(<var>status</var>, <var>iteratorRecord</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}}