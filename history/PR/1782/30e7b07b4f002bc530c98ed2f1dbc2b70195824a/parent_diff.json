{"from": {"secList": ["sec-map.prototype.foreach", "sec-properties-of-the-array-prototype-object", "sec-set.prototype.foreach", "sec-array.prototype.every", "sec-array.prototype.find", "sec-%typedarray%.prototype.every", "sec-%typedarray%.prototype.filter", "sec-array.prototype.map", "sec-array.prototype.findindex", "sec-properties-of-the-%typedarrayprototype%-object", "sec-%typedarray%.prototype.some", "sec-array.prototype.filter", "sec-array.prototype.some", "sec-array.prototype.foreach"], "secData": {"sec-map.prototype.foreach": {"num": "23.1.3.5", "title": "#sec-map.prototype.foreach Map.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-map.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.foreach\">#sec-map.prototype.foreach</span> Map.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>e</var> that is an element of <var>entries</var>, in original key insertion order, do<ol><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>.[[Value]], <var>e</var>.[[Key]], <var>M</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each key/value pair present in the map object, in key insertion order. <var>callbackfn</var> is called only for keys of the map which actually exist; it is not called for keys that have been deleted from the map.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the item, the key of the item, and the Map object being traversed.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>. Each entry of a map's [[MapData]] is only visited once. New keys added after the call to <code>forEach</code> begins are visited. A key will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Keys that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the key is added again before the <code>forEach</code> call completes.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-array-prototype-object": {"num": "22.1.3", "title": "#sec-properties-of-the-array-prototype-object Properties of the Array Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-array-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-array-prototype-object\">#sec-properties-of-the-array-prototype-object</span> Properties of the Array Prototype Object</h1>\n      <p>The Array prototype object:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%ArrayPrototype%</dfn>.</li>\n        <li>is an Array <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is 0 and whose attributes are { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Array prototype object is specified to be an Array <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-array.prototype.concat\"><h1><span class=\"secnum\">22.1.3.1</span>#sec-array.prototype.concat Array.prototype.concat ( ...arguments )</h1>...</div><div id=\"excluded-sec-array.prototype.constructor\"><h1><span class=\"secnum\">22.1.3.2</span>#sec-array.prototype.constructor Array.prototype.constructor</h1>...</div><div id=\"excluded-sec-array.prototype.copywithin\"><h1><span class=\"secnum\">22.1.3.3</span>#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-array.prototype.entries\"><h1><span class=\"secnum\">22.1.3.4</span>#sec-array.prototype.entries Array.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-array.prototype.every\"><h1><span class=\"secnum\">22.1.3.5</span>#sec-array.prototype.every Array.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.fill\"><h1><span class=\"secnum\">22.1.3.6</span>#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.filter\"><h1><span class=\"secnum\">22.1.3.7</span>#sec-array.prototype.filter Array.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.find\"><h1><span class=\"secnum\">22.1.3.8</span>#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findindex\"><h1><span class=\"secnum\">22.1.3.9</span>#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flat\"><h1><span class=\"secnum\">22.1.3.10</span>#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flatmap\"><h1><span class=\"secnum\">22.1.3.11</span>#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.foreach\"><h1><span class=\"secnum\">22.1.3.12</span>#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.includes\"><h1><span class=\"secnum\">22.1.3.13</span>#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.indexof\"><h1><span class=\"secnum\">22.1.3.14</span>#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.join\"><h1><span class=\"secnum\">22.1.3.15</span>#sec-array.prototype.join Array.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-array.prototype.keys\"><h1><span class=\"secnum\">22.1.3.16</span>#sec-array.prototype.keys Array.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-array.prototype.lastindexof\"><h1><span class=\"secnum\">22.1.3.17</span>#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.map\"><h1><span class=\"secnum\">22.1.3.18</span>#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.pop\"><h1><span class=\"secnum\">22.1.3.19</span>#sec-array.prototype.pop Array.prototype.pop ( )</h1>...</div><div id=\"excluded-sec-array.prototype.push\"><h1><span class=\"secnum\">22.1.3.20</span>#sec-array.prototype.push Array.prototype.push ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.reduce\"><h1><span class=\"secnum\">22.1.3.21</span>#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reduceright\"><h1><span class=\"secnum\">22.1.3.22</span>#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reverse\"><h1><span class=\"secnum\">22.1.3.23</span>#sec-array.prototype.reverse Array.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-array.prototype.shift\"><h1><span class=\"secnum\">22.1.3.24</span>#sec-array.prototype.shift Array.prototype.shift ( )</h1>...</div><div id=\"excluded-sec-array.prototype.slice\"><h1><span class=\"secnum\">22.1.3.25</span>#sec-array.prototype.slice Array.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-array.prototype.some\"><h1><span class=\"secnum\">22.1.3.26</span>#sec-array.prototype.some Array.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.sort\"><h1><span class=\"secnum\">22.1.3.27</span>#sec-array.prototype.sort Array.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-array.prototype.splice\"><h1><span class=\"secnum\">22.1.3.28</span>#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.tolocalestring\"><h1><span class=\"secnum\">22.1.3.29</span>#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.tostring\"><h1><span class=\"secnum\">22.1.3.30</span>#sec-array.prototype.tostring Array.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-array.prototype.unshift\"><h1><span class=\"secnum\">22.1.3.31</span>#sec-array.prototype.unshift Array.prototype.unshift ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.values\"><h1><span class=\"secnum\">22.1.3.32</span>#sec-array.prototype.values Array.prototype.values ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@iterator\"><h1><span class=\"secnum\">22.1.3.33</span>#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@unscopables\"><h1><span class=\"secnum\">22.1.3.34</span>#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]</h1>...</div></emu-clause>\n\n    "}, "sec-set.prototype.foreach": {"num": "23.2.3.6", "title": "#sec-set.prototype.foreach Set.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-set.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.foreach\">#sec-set.prototype.foreach</span> Set.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, in original insertion order, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>, <var>e</var>, <var>S</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each value present in the set object, in value insertion order. <var>callbackfn</var> is called only for values of the Set which actually exist; it is not called for keys that have been deleted from the set.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the first two arguments are a value contained in the Set. The same value is passed for both arguments. The Set object being traversed is passed as the third argument.</p>\n          <p>The <var>callbackfn</var> is called with three arguments to be consistent with the call back functions used by <code>forEach</code> methods for Map and Array. For Sets, each item value is considered to be both the key and the value.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>Each value is normally visited only once. However, a value will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Values that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the value is added again before the <code>forEach</code> call completes. New values added after the call to <code>forEach</code> begins are visited.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.every": {"num": "22.1.3.5", "title": "#sec-array.prototype.every Array.prototype.every ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.every\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.every\">#sec-array.prototype.every</span> Array.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments and returns a value that is coercible to the Boolean value <emu-val>true</emu-val> or <emu-val>false</emu-val>. <code>every</code> calls <var>callbackfn</var> once for each element present in the array, in ascending order, until it finds one where <var>callbackfn</var> returns <emu-val>false</emu-val>. If such an element is found, <code>every</code> immediately returns <emu-val>false</emu-val>. Otherwise, if <var>callbackfn</var> returned <emu-val>true</emu-val> for all elements, <code>every</code> will return <emu-val>true</emu-val>. <var>callbackfn</var> is called only for elements of the array which actually exist; it is not called for missing elements of the array.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>every</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>The range of elements processed by <code>every</code> is set before the first call to <var>callbackfn</var>. Elements which are appended to the array after the call to <code>every</code> begins will not be visited by <var>callbackfn</var>. If existing elements of the array are changed, their value as passed to <var>callbackfn</var> will be the value at the time <code>every</code> visits them; elements that are deleted after the call to <code>every</code> begins and before being visited are not visited. <code>every</code> acts like the \"for all\" quantifier in mathematics. In particular, for an empty array, it returns <emu-val>true</emu-val>.</p>\n        </div></emu-note>\n        <p>When the <code>every</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>true</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>every</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.find": {"num": "22.1.3.8", "title": "#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.find\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.find\">#sec-array.prototype.find</span> Array.prototype.find ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p>The <code>find</code> method is called with one or two arguments, <var>predicate</var> and <var>thisArg</var>.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>predicate</var> should be a function that accepts three arguments and returns a value that is coercible to a Boolean value. <code>find</code> calls <var>predicate</var> once for each element of the array, in ascending order, until it finds one where <var>predicate</var> returns <emu-val>true</emu-val>. If such an element is found, <code>find</code> immediately returns that element value. Otherwise, <code>find</code> returns <emu-val>undefined</emu-val>.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>predicate</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>predicate</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>find</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>predicate</var>.</p>\n          <p>The range of elements processed by <code>find</code> is set before the first call to <var>predicate</var>. Elements that are appended to the array after the call to <code>find</code> begins will not be visited by <var>predicate</var>. If existing elements of the array are changed, their value as passed to <var>predicate</var> will be the value at the time that <code>find</code> visits them.</p>\n        </div></emu-note>\n        <p>When the <code>find</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <var>kValue</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>find</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.every": {"num": "22.2.3.7", "title": "#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.every\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.every\">#sec-%typedarray%.prototype.every</span> %TypedArray%.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.every</code> is a distinct function that implements the same algorithm as <code>Array.prototype.every</code> as defined in  <emu-xref href=\"#sec-array.prototype.every\"><a href=\"#sec-array.prototype.every\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.every\">#sec-array.prototype.every</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.filter": {"num": "22.2.3.9", "title": "#sec-%typedarray%.prototype.filter %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.filter\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.filter\">#sec-%typedarray%.prototype.filter</span> %TypedArray%.prototype.filter ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.filter</code> are the same as for <code>Array.prototype.filter</code> as defined in  <emu-xref href=\"#sec-array.prototype.filter\"><a href=\"#sec-array.prototype.filter\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.filter\">#sec-array.prototype.filter</a></emu-xref>.</p>\n        <p>When the <code>filter</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>kept</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>k</var> be 0.</li><li>Let <var>captured</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>selected</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>selected</var> is <emu-val>true</emu-val>, then<ol><li>Append <var>kValue</var> to the end of <var>kept</var>.</li><li>Set <var>captured</var> to <var>captured</var> + 1.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"TypedArraySpeciesCreate\"><a href=\"#typedarray-species-create\">TypedArraySpeciesCreate</a></emu-xref>(<var>O</var>, &#171; <var>captured</var> &#187;).</li><li>Let <var>n</var> be 0.</li><li>For each element <var>e</var> of <var>kept</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>e</var>, <emu-val>true</emu-val>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype.map": {"num": "22.1.3.18", "title": "#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.map\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.map\">#sec-array.prototype.map</span> Array.prototype.map ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>map</code> calls <var>callbackfn</var> once for each element in the array, in ascending order, and constructs a new Array from the results. <var>callbackfn</var> is called only for elements of the array which actually exist; it is not called for missing elements of the array.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>map</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>The range of elements processed by <code>map</code> is set before the first call to <var>callbackfn</var>. Elements which are appended to the array after the call to <code>map</code> begins will not be visited by <var>callbackfn</var>. If existing elements of the array are changed, their value as passed to <var>callbackfn</var> will be the value at the time <code>map</code> visits them; elements that are deleted after the call to <code>map</code> begins and before being visited are not visited.</p>\n        </div></emu-note>\n        <p>When the <code>map</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>mappedValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>mappedValue</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>map</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.findindex": {"num": "22.1.3.9", "title": "#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.findindex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.findindex\">#sec-array.prototype.findindex</span> Array.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>predicate</var> should be a function that accepts three arguments and returns a value that is coercible to the Boolean value <emu-val>true</emu-val> or <emu-val>false</emu-val>. <code>findIndex</code> calls <var>predicate</var> once for each element of the array, in ascending order, until it finds one where <var>predicate</var> returns <emu-val>true</emu-val>. If such an element is found, <code>findIndex</code> immediately returns the index of that element value. Otherwise, <code>findIndex</code> returns -1.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>predicate</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>predicate</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>findIndex</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>predicate</var>.</p>\n          <p>The range of elements processed by <code>findIndex</code> is set before the first call to <var>predicate</var>. Elements that are appended to the array after the call to <code>findIndex</code> begins will not be visited by <var>predicate</var>. If existing elements of the array are changed, their value as passed to <var>predicate</var> will be the value at the time that <code>findIndex</code> visits them.</p>\n        </div></emu-note>\n        <p>When the <code>findIndex</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <var>k</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return -1.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>findIndex</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-%typedarrayprototype%-object": {"num": "22.2.3", "title": "#sec-properties-of-the-%typedarrayprototype%-object Properties of the %TypedArray.prototype% Object", "html": "<emu-clause id=\"sec-properties-of-the-%typedarrayprototype%-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-%typedarrayprototype%-object\">#sec-properties-of-the-%typedarrayprototype%-object</span> Properties of the %TypedArray.prototype% Object</h1>\n      <p>The  <dfn>%TypedArray.prototype%</dfn> object:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n        <li>is an ordinary object.</li>\n        <li>does not have a [[ViewedArrayBuffer]] or any other of the internal slots that are specific to <var>TypedArray</var> instance objects.</li>\n      </ul>\n\n      <div id=\"excluded-sec-get-%typedarray%.prototype.buffer\"><h1><span class=\"secnum\">22.2.3.1</span>#sec-get-%typedarray%.prototype.buffer get %TypedArray%.prototype.buffer</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.bytelength\"><h1><span class=\"secnum\">22.2.3.2</span>#sec-get-%typedarray%.prototype.bytelength get %TypedArray%.prototype.byteLength</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.byteoffset\"><h1><span class=\"secnum\">22.2.3.3</span>#sec-get-%typedarray%.prototype.byteoffset get %TypedArray%.prototype.byteOffset</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.constructor\"><h1><span class=\"secnum\">22.2.3.4</span>#sec-%typedarray%.prototype.constructor %TypedArray%.prototype.constructor</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.copywithin\"><h1><span class=\"secnum\">22.2.3.5</span>#sec-%typedarray%.prototype.copywithin %TypedArray%.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.entries\"><h1><span class=\"secnum\">22.2.3.6</span>#sec-%typedarray%.prototype.entries %TypedArray%.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.every\"><h1><span class=\"secnum\">22.2.3.7</span>#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.fill\"><h1><span class=\"secnum\">22.2.3.8</span>#sec-%typedarray%.prototype.fill %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.filter\"><h1><span class=\"secnum\">22.2.3.9</span>#sec-%typedarray%.prototype.filter %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.find\"><h1><span class=\"secnum\">22.2.3.10</span>#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.findindex\"><h1><span class=\"secnum\">22.2.3.11</span>#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.foreach\"><h1><span class=\"secnum\">22.2.3.12</span>#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.includes\"><h1><span class=\"secnum\">22.2.3.13</span>#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.indexof\"><h1><span class=\"secnum\">22.2.3.14</span>#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.join\"><h1><span class=\"secnum\">22.2.3.15</span>#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.keys\"><h1><span class=\"secnum\">22.2.3.16</span>#sec-%typedarray%.prototype.keys %TypedArray%.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.lastindexof\"><h1><span class=\"secnum\">22.2.3.17</span>#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.length\"><h1><span class=\"secnum\">22.2.3.18</span>#sec-get-%typedarray%.prototype.length get %TypedArray%.prototype.length</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.map\"><h1><span class=\"secnum\">22.2.3.19</span>#sec-%typedarray%.prototype.map %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduce\"><h1><span class=\"secnum\">22.2.3.20</span>#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduceright\"><h1><span class=\"secnum\">22.2.3.21</span>#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reverse\"><h1><span class=\"secnum\">22.2.3.22</span>#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.set-overloaded-offset\"><h1><span class=\"secnum\">22.2.3.23</span>#sec-%typedarray%.prototype.set-overloaded-offset %TypedArray%.prototype.set ( overloaded [ , offset ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.slice\"><h1><span class=\"secnum\">22.2.3.24</span>#sec-%typedarray%.prototype.slice %TypedArray%.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.some\"><h1><span class=\"secnum\">22.2.3.25</span>#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.sort\"><h1><span class=\"secnum\">22.2.3.26</span>#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.subarray\"><h1><span class=\"secnum\">22.2.3.27</span>#sec-%typedarray%.prototype.subarray %TypedArray%.prototype.subarray ( begin, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tolocalestring\"><h1><span class=\"secnum\">22.2.3.28</span>#sec-%typedarray%.prototype.tolocalestring %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tostring\"><h1><span class=\"secnum\">22.2.3.29</span>#sec-%typedarray%.prototype.tostring %TypedArray%.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.values\"><h1><span class=\"secnum\">22.2.3.30</span>#sec-%typedarray%.prototype.values %TypedArray%.prototype.values ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype-@@iterator\"><h1><span class=\"secnum\">22.2.3.31</span>#sec-%typedarray%.prototype-@@iterator %TypedArray%.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype-@@tostringtag\"><h1><span class=\"secnum\">22.2.3.32</span>#sec-get-%typedarray%.prototype-@@tostringtag get %TypedArray%.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n\n    "}, "sec-%typedarray%.prototype.some": {"num": "22.2.3.25", "title": "#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.some\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.some\">#sec-%typedarray%.prototype.some</span> %TypedArray%.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.some</code> is a distinct function that implements the same algorithm as <code>Array.prototype.some</code> as defined in  <emu-xref href=\"#sec-array.prototype.some\"><a href=\"#sec-array.prototype.some\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.some\">#sec-array.prototype.some</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose  <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype.filter": {"num": "22.1.3.7", "title": "#sec-array.prototype.filter Array.prototype.filter ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.filter\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.filter\">#sec-array.prototype.filter</span> Array.prototype.filter ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments and returns a value that is coercible to the Boolean value <emu-val>true</emu-val> or <emu-val>false</emu-val>. <code>filter</code> calls <var>callbackfn</var> once for each element in the array, in ascending order, and constructs a new array of all the values for which <var>callbackfn</var> returns <emu-val>true</emu-val>. <var>callbackfn</var> is called only for elements of the array which actually exist; it is not called for missing elements of the array.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>filter</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>The range of elements processed by <code>filter</code> is set before the first call to <var>callbackfn</var>. Elements which are appended to the array after the call to <code>filter</code> begins will not be visited by <var>callbackfn</var>. If existing elements of the array are changed their value as passed to <var>callbackfn</var> will be the value at the time <code>filter</code> visits them; elements that are deleted after the call to <code>filter</code> begins and before being visited are not visited.</p>\n        </div></emu-note>\n        <p>When the <code>filter</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Let <var>k</var> be 0.</li><li>Let <var>to</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>selected</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>selected</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>to</var>), <var>kValue</var>).</li><li>Set <var>to</var> to <var>to</var> + 1.</li></ol></li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>filter</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.some": {"num": "22.1.3.26", "title": "#sec-array.prototype.some Array.prototype.some ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.some\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.some\">#sec-array.prototype.some</span> Array.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments and returns a value that is coercible to the Boolean value <emu-val>true</emu-val> or <emu-val>false</emu-val>. <code>some</code> calls <var>callbackfn</var> once for each element present in the array, in ascending order, until it finds one where <var>callbackfn</var> returns <emu-val>true</emu-val>. If such an element is found, <code>some</code> immediately returns <emu-val>true</emu-val>. Otherwise, <code>some</code> returns <emu-val>false</emu-val>. <var>callbackfn</var> is called only for elements of the array which actually exist; it is not called for missing elements of the array.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>some</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>The range of elements processed by <code>some</code> is set before the first call to <var>callbackfn</var>. Elements that are appended to the array after the call to <code>some</code> begins will not be visited by <var>callbackfn</var>. If existing elements of the array are changed, their value as passed to <var>callbackfn</var> will be the value at the time that <code>some</code> visits them; elements that are deleted after the call to <code>some</code> begins and before being visited are not visited. <code>some</code> acts like the \"exists\" quantifier in mathematics. In particular, for an empty array, it returns <emu-val>false</emu-val>.</p>\n        </div></emu-note>\n        <p>When the <code>some</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>some</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.foreach": {"num": "22.1.3.12", "title": "#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.foreach\">#sec-array.prototype.foreach</span> Array.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each element present in the array, in ascending order. <var>callbackfn</var> is called only for elements of the array which actually exist; it is not called for missing elements of the array.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n        </div></emu-note>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n        <p>This function is the  <dfn>%ArrayProto_forEach%</dfn> intrinsic object.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>forEach</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-map.prototype.foreach", "sec-properties-of-the-array-prototype-object", "sec-set.prototype.foreach", "sec-array.prototype.every", "sec-array.prototype.find", "sec-%typedarray%.prototype.every", "sec-%typedarray%.prototype.filter", "sec-array.prototype.map", "sec-array.prototype.findindex", "sec-properties-of-the-%typedarrayprototype%-object", "sec-%typedarray%.prototype.some", "sec-array.prototype.filter", "sec-array.prototype.some", "sec-array.prototype.foreach"], "secData": {"sec-map.prototype.foreach": {"num": "23.1.3.5", "title": "#sec-map.prototype.foreach Map.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-map.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.foreach\">#sec-map.prototype.foreach</span> Map.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>e</var> that is an element of <var>entries</var>, in original key insertion order, do<ol><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>.[[Value]], <var>e</var>.[[Key]], <var>M</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each key/value pair present in the map object, in key insertion order. <var>callbackfn</var> is called only for keys of the map which actually exist; it is not called for keys that have been deleted from the map.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the item, the key of the item, and the Map object being traversed.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>. Each entry of a map's [[MapData]] is only visited once. New keys added after the call to <code>forEach</code> begins are visited. A key will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Keys that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the key is added again before the <code>forEach</code> call completes.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-array-prototype-object": {"num": "22.1.3", "title": "#sec-properties-of-the-array-prototype-object Properties of the Array Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-array-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-array-prototype-object\">#sec-properties-of-the-array-prototype-object</span> Properties of the Array Prototype Object</h1>\n      <p>The Array prototype object:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%ArrayPrototype%</dfn>.</li>\n        <li>is an Array <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is 0 and whose attributes are { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Array prototype object is specified to be an Array <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-array.prototype.concat\"><h1><span class=\"secnum\">22.1.3.1</span>#sec-array.prototype.concat Array.prototype.concat ( ...arguments )</h1>...</div><div id=\"excluded-sec-array.prototype.constructor\"><h1><span class=\"secnum\">22.1.3.2</span>#sec-array.prototype.constructor Array.prototype.constructor</h1>...</div><div id=\"excluded-sec-array.prototype.copywithin\"><h1><span class=\"secnum\">22.1.3.3</span>#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-array.prototype.entries\"><h1><span class=\"secnum\">22.1.3.4</span>#sec-array.prototype.entries Array.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-array.prototype.every\"><h1><span class=\"secnum\">22.1.3.5</span>#sec-array.prototype.every Array.prototype.every ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.fill\"><h1><span class=\"secnum\">22.1.3.6</span>#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.filter\"><h1><span class=\"secnum\">22.1.3.7</span>#sec-array.prototype.filter Array.prototype.filter ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.find\"><h1><span class=\"secnum\">22.1.3.8</span>#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findindex\"><h1><span class=\"secnum\">22.1.3.9</span>#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flat\"><h1><span class=\"secnum\">22.1.3.10</span>#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flatmap\"><h1><span class=\"secnum\">22.1.3.11</span>#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.foreach\"><h1><span class=\"secnum\">22.1.3.12</span>#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.includes\"><h1><span class=\"secnum\">22.1.3.13</span>#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.indexof\"><h1><span class=\"secnum\">22.1.3.14</span>#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.join\"><h1><span class=\"secnum\">22.1.3.15</span>#sec-array.prototype.join Array.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-array.prototype.keys\"><h1><span class=\"secnum\">22.1.3.16</span>#sec-array.prototype.keys Array.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-array.prototype.lastindexof\"><h1><span class=\"secnum\">22.1.3.17</span>#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.map\"><h1><span class=\"secnum\">22.1.3.18</span>#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.pop\"><h1><span class=\"secnum\">22.1.3.19</span>#sec-array.prototype.pop Array.prototype.pop ( )</h1>...</div><div id=\"excluded-sec-array.prototype.push\"><h1><span class=\"secnum\">22.1.3.20</span>#sec-array.prototype.push Array.prototype.push ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.reduce\"><h1><span class=\"secnum\">22.1.3.21</span>#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reduceright\"><h1><span class=\"secnum\">22.1.3.22</span>#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reverse\"><h1><span class=\"secnum\">22.1.3.23</span>#sec-array.prototype.reverse Array.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-array.prototype.shift\"><h1><span class=\"secnum\">22.1.3.24</span>#sec-array.prototype.shift Array.prototype.shift ( )</h1>...</div><div id=\"excluded-sec-array.prototype.slice\"><h1><span class=\"secnum\">22.1.3.25</span>#sec-array.prototype.slice Array.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-array.prototype.some\"><h1><span class=\"secnum\">22.1.3.26</span>#sec-array.prototype.some Array.prototype.some ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.sort\"><h1><span class=\"secnum\">22.1.3.27</span>#sec-array.prototype.sort Array.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-array.prototype.splice\"><h1><span class=\"secnum\">22.1.3.28</span>#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.tolocalestring\"><h1><span class=\"secnum\">22.1.3.29</span>#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.tostring\"><h1><span class=\"secnum\">22.1.3.30</span>#sec-array.prototype.tostring Array.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-array.prototype.unshift\"><h1><span class=\"secnum\">22.1.3.31</span>#sec-array.prototype.unshift Array.prototype.unshift ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.values\"><h1><span class=\"secnum\">22.1.3.32</span>#sec-array.prototype.values Array.prototype.values ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@iterator\"><h1><span class=\"secnum\">22.1.3.33</span>#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@unscopables\"><h1><span class=\"secnum\">22.1.3.34</span>#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]</h1>...</div></emu-clause>\n\n    "}, "sec-set.prototype.foreach": {"num": "23.2.3.6", "title": "#sec-set.prototype.foreach Set.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-set.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.foreach\">#sec-set.prototype.foreach</span> Set.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, in original insertion order, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>, <var>e</var>, <var>S</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each value present in the set object, in value insertion order. <var>callbackfn</var> is called only for values of the Set which actually exist; it is not called for keys that have been deleted from the set.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>.</p>\n          <p><var>callbackfn</var> is called with three arguments: the first two arguments are a value contained in the Set. The same value is passed for both arguments. The Set object being traversed is passed as the third argument.</p>\n          <p>The <var>callbackfn</var> is called with three arguments to be consistent with the call back functions used by <code>forEach</code> methods for Map and Array. For Sets, each item value is considered to be both the key and the value.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>Each value is normally visited only once. However, a value will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Values that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the value is added again before the <code>forEach</code> call completes. New values added after the call to <code>forEach</code> begins are visited.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.every": {"num": "22.1.3.5", "title": "#sec-array.prototype.every Array.prototype.every ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.every\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.every\">#sec-array.prototype.every</span> Array.prototype.every ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>predicate</var> should be a function that accepts three arguments and returns a value that is coercible to the Boolean value <emu-val>true</emu-val> or <emu-val>false</emu-val>. <code>every</code> calls <var>predicate</var> once for each element present in the array, in ascending order, until it finds one where <var>predicate</var> returns <emu-val>false</emu-val>. If such an element is found, <code>every</code> immediately returns <emu-val>false</emu-val>. Otherwise, if <var>predicate</var> returned <emu-val>true</emu-val> for all elements, <code>every</code> will return <emu-val>true</emu-val>. <var>predicate</var> is called only for elements of the array which actually exist; it is not called for missing elements of the array.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>predicate</var>.</p>\n          <p><var>predicate</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>every</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>predicate</var>.</p>\n          <p>The range of elements processed by <code>every</code> is set before the first call to <var>predicate</var>. Elements which are appended to the array after the call to <code>every</code> begins will not be visited by <var>predicate</var>. If existing elements of the array are changed, their value as passed to <var>predicate</var> will be the value at the time <code>every</code> visits them; elements that are deleted after the call to <code>every</code> begins and before being visited are not visited. <code>every</code> acts like the \"for all\" quantifier in mathematics. In particular, for an empty array, it returns <emu-val>true</emu-val>.</p>\n        </div></emu-note>\n        <p>When the <code>every</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If !&#160;<emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>true</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>every</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.find": {"num": "22.1.3.8", "title": "#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.find\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.find\">#sec-array.prototype.find</span> Array.prototype.find ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p>The <code>find</code> method is called with one or two arguments, <var>predicate</var> and <var>thisArg</var>.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>predicate</var> should be a function that accepts three arguments and returns a value that is coercible to a Boolean value. <code>find</code> calls <var>predicate</var> once for each element of the array, in ascending order, until it finds one where <var>predicate</var> returns <emu-val>true</emu-val>. If such an element is found, <code>find</code> immediately returns that element value. Otherwise, <code>find</code> returns <emu-val>undefined</emu-val>.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>predicate</var>.</p>\n          <p><var>predicate</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>find</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>predicate</var>.</p>\n          <p>The range of elements processed by <code>find</code> is set before the first call to <var>predicate</var>. Elements that are appended to the array after the call to <code>find</code> begins will not be visited by <var>predicate</var>. If existing elements of the array are changed, their value as passed to <var>predicate</var> will be the value at the time that <code>find</code> visits them.</p>\n        </div></emu-note>\n        <p>When the <code>find</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <var>kValue</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>find</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.every": {"num": "22.2.3.7", "title": "#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.every\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.every\">#sec-%typedarray%.prototype.every</span> %TypedArray%.prototype.every ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.every</code> is a distinct function that implements the same algorithm as <code>Array.prototype.every</code> as defined in  <emu-xref href=\"#sec-array.prototype.every\"><a href=\"#sec-array.prototype.every\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.every\">#sec-array.prototype.every</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.filter": {"num": "22.2.3.9", "title": "#sec-%typedarray%.prototype.filter %TypedArray%.prototype.filter ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.filter\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.filter\">#sec-%typedarray%.prototype.filter</span> %TypedArray%.prototype.filter ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.filter</code> are the same as for <code>Array.prototype.filter</code> as defined in  <emu-xref href=\"#sec-array.prototype.filter\"><a href=\"#sec-array.prototype.filter\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.filter\">#sec-array.prototype.filter</a></emu-xref>.</p>\n        <p>When the <code>filter</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If !&#160;<emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>kept</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>k</var> be 0.</li><li>Let <var>captured</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>selected</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>selected</var> is <emu-val>true</emu-val>, then<ol><li>Append <var>kValue</var> to the end of <var>kept</var>.</li><li>Set <var>captured</var> to <var>captured</var> + 1.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"TypedArraySpeciesCreate\"><a href=\"#typedarray-species-create\">TypedArraySpeciesCreate</a></emu-xref>(<var>O</var>, &#171; <var>captured</var> &#187;).</li><li>Let <var>n</var> be 0.</li><li>For each element <var>e</var> of <var>kept</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>e</var>, <emu-val>true</emu-val>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype.map": {"num": "22.1.3.18", "title": "#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.map\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.map\">#sec-array.prototype.map</span> Array.prototype.map ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>map</code> calls <var>callbackfn</var> once for each element in the array, in ascending order, and constructs a new Array from the results. <var>callbackfn</var> is called only for elements of the array which actually exist; it is not called for missing elements of the array.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>map</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>The range of elements processed by <code>map</code> is set before the first call to <var>callbackfn</var>. Elements which are appended to the array after the call to <code>map</code> begins will not be visited by <var>callbackfn</var>. If existing elements of the array are changed, their value as passed to <var>callbackfn</var> will be the value at the time <code>map</code> visits them; elements that are deleted after the call to <code>map</code> begins and before being visited are not visited.</p>\n        </div></emu-note>\n        <p>When the <code>map</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>mappedValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>mappedValue</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>map</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.findindex": {"num": "22.1.3.9", "title": "#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.findindex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.findindex\">#sec-array.prototype.findindex</span> Array.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>predicate</var> should be a function that accepts three arguments and returns a value that is coercible to the Boolean value <emu-val>true</emu-val> or <emu-val>false</emu-val>. <code>findIndex</code> calls <var>predicate</var> once for each element of the array, in ascending order, until it finds one where <var>predicate</var> returns <emu-val>true</emu-val>. If such an element is found, <code>findIndex</code> immediately returns the index of that element value. Otherwise, <code>findIndex</code> returns -1.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>predicate</var>.</p>\n          <p><var>predicate</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>findIndex</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>predicate</var>.</p>\n          <p>The range of elements processed by <code>findIndex</code> is set before the first call to <var>predicate</var>. Elements that are appended to the array after the call to <code>findIndex</code> begins will not be visited by <var>predicate</var>. If existing elements of the array are changed, their value as passed to <var>predicate</var> will be the value at the time that <code>findIndex</code> visits them.</p>\n        </div></emu-note>\n        <p>When the <code>findIndex</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <var>k</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return -1.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>findIndex</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-%typedarrayprototype%-object": {"num": "22.2.3", "title": "#sec-properties-of-the-%typedarrayprototype%-object Properties of the %TypedArray.prototype% Object", "html": "<emu-clause id=\"sec-properties-of-the-%typedarrayprototype%-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-%typedarrayprototype%-object\">#sec-properties-of-the-%typedarrayprototype%-object</span> Properties of the %TypedArray.prototype% Object</h1>\n      <p>The  <dfn>%TypedArray.prototype%</dfn> object:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n        <li>is an ordinary object.</li>\n        <li>does not have a [[ViewedArrayBuffer]] or any other of the internal slots that are specific to <var>TypedArray</var> instance objects.</li>\n      </ul>\n\n      <div id=\"excluded-sec-get-%typedarray%.prototype.buffer\"><h1><span class=\"secnum\">22.2.3.1</span>#sec-get-%typedarray%.prototype.buffer get %TypedArray%.prototype.buffer</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.bytelength\"><h1><span class=\"secnum\">22.2.3.2</span>#sec-get-%typedarray%.prototype.bytelength get %TypedArray%.prototype.byteLength</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.byteoffset\"><h1><span class=\"secnum\">22.2.3.3</span>#sec-get-%typedarray%.prototype.byteoffset get %TypedArray%.prototype.byteOffset</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.constructor\"><h1><span class=\"secnum\">22.2.3.4</span>#sec-%typedarray%.prototype.constructor %TypedArray%.prototype.constructor</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.copywithin\"><h1><span class=\"secnum\">22.2.3.5</span>#sec-%typedarray%.prototype.copywithin %TypedArray%.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.entries\"><h1><span class=\"secnum\">22.2.3.6</span>#sec-%typedarray%.prototype.entries %TypedArray%.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.every\"><h1><span class=\"secnum\">22.2.3.7</span>#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.fill\"><h1><span class=\"secnum\">22.2.3.8</span>#sec-%typedarray%.prototype.fill %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.filter\"><h1><span class=\"secnum\">22.2.3.9</span>#sec-%typedarray%.prototype.filter %TypedArray%.prototype.filter ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.find\"><h1><span class=\"secnum\">22.2.3.10</span>#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.findindex\"><h1><span class=\"secnum\">22.2.3.11</span>#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.foreach\"><h1><span class=\"secnum\">22.2.3.12</span>#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.includes\"><h1><span class=\"secnum\">22.2.3.13</span>#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.indexof\"><h1><span class=\"secnum\">22.2.3.14</span>#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.join\"><h1><span class=\"secnum\">22.2.3.15</span>#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.keys\"><h1><span class=\"secnum\">22.2.3.16</span>#sec-%typedarray%.prototype.keys %TypedArray%.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.lastindexof\"><h1><span class=\"secnum\">22.2.3.17</span>#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.length\"><h1><span class=\"secnum\">22.2.3.18</span>#sec-get-%typedarray%.prototype.length get %TypedArray%.prototype.length</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.map\"><h1><span class=\"secnum\">22.2.3.19</span>#sec-%typedarray%.prototype.map %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduce\"><h1><span class=\"secnum\">22.2.3.20</span>#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduceright\"><h1><span class=\"secnum\">22.2.3.21</span>#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reverse\"><h1><span class=\"secnum\">22.2.3.22</span>#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.set-overloaded-offset\"><h1><span class=\"secnum\">22.2.3.23</span>#sec-%typedarray%.prototype.set-overloaded-offset %TypedArray%.prototype.set ( overloaded [ , offset ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.slice\"><h1><span class=\"secnum\">22.2.3.24</span>#sec-%typedarray%.prototype.slice %TypedArray%.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.some\"><h1><span class=\"secnum\">22.2.3.25</span>#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.sort\"><h1><span class=\"secnum\">22.2.3.26</span>#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.subarray\"><h1><span class=\"secnum\">22.2.3.27</span>#sec-%typedarray%.prototype.subarray %TypedArray%.prototype.subarray ( begin, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tolocalestring\"><h1><span class=\"secnum\">22.2.3.28</span>#sec-%typedarray%.prototype.tolocalestring %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tostring\"><h1><span class=\"secnum\">22.2.3.29</span>#sec-%typedarray%.prototype.tostring %TypedArray%.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.values\"><h1><span class=\"secnum\">22.2.3.30</span>#sec-%typedarray%.prototype.values %TypedArray%.prototype.values ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype-@@iterator\"><h1><span class=\"secnum\">22.2.3.31</span>#sec-%typedarray%.prototype-@@iterator %TypedArray%.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype-@@tostringtag\"><h1><span class=\"secnum\">22.2.3.32</span>#sec-get-%typedarray%.prototype-@@tostringtag get %TypedArray%.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n\n    "}, "sec-%typedarray%.prototype.some": {"num": "22.2.3.25", "title": "#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.some\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.some\">#sec-%typedarray%.prototype.some</span> %TypedArray%.prototype.some ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.some</code> is a distinct function that implements the same algorithm as <code>Array.prototype.some</code> as defined in  <emu-xref href=\"#sec-array.prototype.some\"><a href=\"#sec-array.prototype.some\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.some\">#sec-array.prototype.some</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose  <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype.filter": {"num": "22.1.3.7", "title": "#sec-array.prototype.filter Array.prototype.filter ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.filter\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.filter\">#sec-array.prototype.filter</span> Array.prototype.filter ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>predicate</var> should be a function that accepts three arguments and returns a value that is coercible to the Boolean value <emu-val>true</emu-val> or <emu-val>false</emu-val>. <code>filter</code> calls <var>predicate</var> once for each element in the array, in ascending order, and constructs a new array of all the values for which <var>predicate</var> returns <emu-val>true</emu-val>. <var>predicate</var> is called only for elements of the array which actually exist; it is not called for missing elements of the array.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>predicate</var>.</p>\n          <p><var>predicate</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>filter</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>predicate</var>.</p>\n          <p>The range of elements processed by <code>filter</code> is set before the first call to <var>predicate</var>. Elements which are appended to the array after the call to <code>filter</code> begins will not be visited by <var>predicate</var>. If existing elements of the array are changed their value as passed to <var>predicate</var> will be the value at the time <code>filter</code> visits them; elements that are deleted after the call to <code>filter</code> begins and before being visited are not visited.</p>\n        </div></emu-note>\n        <p>When the <code>filter</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If !&#160;<emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Let <var>k</var> be 0.</li><li>Let <var>to</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>selected</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>selected</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>to</var>), <var>kValue</var>).</li><li>Set <var>to</var> to <var>to</var> + 1.</li></ol></li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>filter</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.some": {"num": "22.1.3.26", "title": "#sec-array.prototype.some Array.prototype.some ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.some\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.some\">#sec-array.prototype.some</span> Array.prototype.some ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>predicate</var> should be a function that accepts three arguments and returns a value that is coercible to the Boolean value <emu-val>true</emu-val> or <emu-val>false</emu-val>. <code>some</code> calls <var>predicate</var> once for each element present in the array, in ascending order, until it finds one where <var>predicate</var> returns <emu-val>true</emu-val>. If such an element is found, <code>some</code> immediately returns <emu-val>true</emu-val>. Otherwise, <code>some</code> returns <emu-val>false</emu-val>. <var>predicate</var> is called only for elements of the array which actually exist; it is not called for missing elements of the array.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>predicate</var>.</p>\n          <p><var>predicate</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>some</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>predicate</var>.</p>\n          <p>The range of elements processed by <code>some</code> is set before the first call to <var>predicate</var>. Elements that are appended to the array after the call to <code>some</code> begins will not be visited by <var>predicate</var>. If existing elements of the array are changed, their value as passed to <var>predicate</var> will be the value at the time that <code>some</code> visits them; elements that are deleted after the call to <code>some</code> begins and before being visited are not visited. <code>some</code> acts like the \"exists\" quantifier in mathematics. In particular, for an empty array, it returns <emu-val>false</emu-val>.</p>\n        </div></emu-note>\n        <p>When the <code>some</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If !&#160;<emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>predicate</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Let <var>testResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>predicate</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;)).</li><li>If <var>testResult</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>some</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.foreach": {"num": "22.1.3.12", "title": "#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.foreach\">#sec-array.prototype.foreach</span> Array.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each element present in the array, in ascending order. <var>callbackfn</var> is called only for elements of the array which actually exist; it is not called for missing elements of the array.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the element, the index of the element, and the object being traversed.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n        </div></emu-note>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var>, <var>O</var> &#187;).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n        <p>This function is the  <dfn>%ArrayProto_forEach%</dfn> intrinsic object.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>forEach</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}