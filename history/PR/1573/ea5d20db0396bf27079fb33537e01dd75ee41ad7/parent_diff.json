{"from": {"secList": ["sec-runtime-semantics", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-returnifabrupt-shorthands", "sec-returnifabrupt"], "secData": {"sec-runtime-semantics": {"num": "5.2.3", "title": "#sec-runtime-semantics Runtime Semantics", "html": "<emu-clause id=\"sec-runtime-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics\">#sec-runtime-semantics</span> Runtime Semantics</h1>\n      <p>Algorithms which specify semantics that must be called at runtime are called  <dfn>runtime semantics</dfn>. Runtime semantics are defined by <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> or syntax-directed operations. Such algorithms always return a completion record.</p>\n      <div id=\"excluded-sec-implicit-completion-values\"><h1><span class=\"secnum\">5.2.3.1</span>#sec-implicit-completion-values Implicit Completion Values</h1>...</div><div id=\"excluded-sec-throw-an-exception\"><h1><span class=\"secnum\">5.2.3.2</span>#sec-throw-an-exception Throw an Exception</h1>...</div><div id=\"excluded-sec-returnifabrupt\"><h1><span class=\"secnum\">5.2.3.3</span>#sec-returnifabrupt ReturnIfAbrupt</h1>...</div><div id=\"excluded-sec-returnifabrupt-shorthands\"><h1><span class=\"secnum\">5.2.3.4</span>#sec-returnifabrupt-shorthands ReturnIfAbrupt Shorthands</h1>...</div></emu-clause>\n    "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "9.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method for an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>argumentsList</var> and <var>newTarget</var>. <var>argumentsList</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <code>\"base\"</code>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>\"%ObjectPrototype%\"</code>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <code>\"base\"</code>, perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>constructorEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <code>\"base\"</code>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>envRec</var>.GetThisBinding().\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-returnifabrupt-shorthands": {"num": "5.2.3.4", "title": "#sec-returnifabrupt-shorthands ReturnIfAbrupt Shorthands", "html": "<emu-clause id=\"sec-returnifabrupt-shorthands\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-returnifabrupt-shorthands\">#sec-returnifabrupt-shorthands</span> ReturnIfAbrupt Shorthands</h1>\n        <p>Invocations of <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and syntax-directed operations that are prefixed by <code>?</code> indicate that <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref> should be applied to the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>. For example, the step:</p>\n        <emu-alg><ol><li>?&#160;OperationName().\n        </li></ol></emu-alg>\n        <p>is equivalent to the following step:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(OperationName()).\n        </li></ol></emu-alg>\n        <p>Similarly, for method application style, the step:</p>\n        <emu-alg><ol><li>? <var>someValue</var>.OperationName().\n        </li></ol></emu-alg>\n        <p>is equivalent to:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>someValue</var>.OperationName()).\n        </li></ol></emu-alg>\n        <p>Similarly, prefix <code>!</code> is used to indicate that the following invocation of an abstract or syntax-directed operation will never return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and that the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>'s [[Value]] field should be used in place of the return value of the operation. For example, the step:</p>\n        <emu-alg><ol><li>Let <var>val</var> be !&#160;OperationName().\n        </li></ol></emu-alg>\n        <p>is equivalent to the following steps:</p>\n        <emu-alg><ol><li>Let <var>val</var> be OperationName().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>val</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>If <var>val</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>val</var> to <var>val</var>.[[Value]].\n        </li></ol></emu-alg>\n        <p>Syntax-directed operations for <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> make use of this shorthand by placing <code>!</code> or <code>?</code> before the invocation of the operation:</p>\n        <emu-alg><ol><li>Perform ! SyntaxDirectedOperation of <emu-nt>NonTerminal</emu-nt>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-returnifabrupt": {"num": "5.2.3.3", "title": "#sec-returnifabrupt ReturnIfAbrupt", "html": "<emu-clause id=\"sec-returnifabrupt\" aoid=\"ReturnIfAbrupt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-returnifabrupt\">#sec-returnifabrupt</span> ReturnIfAbrupt</h1>\n        <p>Algorithms steps that say or are otherwise equivalent to:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>argument</var>).\n        </li></ol></emu-alg>\n        <p>mean the same thing as:</p>\n        <emu-alg><ol><li>If <var>argument</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <var>argument</var>.</li><li>Else if <var>argument</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>argument</var> to <var>argument</var>.[[Value]].\n        </li></ol></emu-alg>\n        <p>Algorithms steps that say or are otherwise equivalent to:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(AbstractOperation()).\n        </li></ol></emu-alg>\n        <p>mean the same thing as:</p>\n        <emu-alg><ol><li>Let <var>hygienicTemp</var> be AbstractOperation().</li><li>If <var>hygienicTemp</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <var>hygienicTemp</var>.</li><li>Else if <var>hygienicTemp</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>hygienicTemp</var> to <var>hygienicTemp</var>.[[Value]].\n        </li></ol></emu-alg>\n        <p>Where <var>hygienicTemp</var> is ephemeral and visible only in the steps pertaining to ReturnIfAbrupt.</p>\n        <p>Algorithms steps that say or are otherwise equivalent to:</p>\n        <emu-alg><ol><li>Let <var>result</var> be AbstractOperation(<emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>argument</var>)).\n        </li></ol></emu-alg>\n        <p>mean the same thing as:</p>\n        <emu-alg><ol><li>If <var>argument</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <var>argument</var>.</li><li>If <var>argument</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>argument</var> to <var>argument</var>.[[Value]].</li><li>Let <var>result</var> be AbstractOperation(<var>argument</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n      "}}, "figData": {}}, "to": {"secList": ["sec-runtime-semantics", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-returnifabrupt-shorthands", "sec-returnifabrupt"], "secData": {"sec-runtime-semantics": {"num": "5.2.3", "title": "#sec-runtime-semantics Runtime Semantics", "html": "<emu-clause id=\"sec-runtime-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics\">#sec-runtime-semantics</span> Runtime Semantics</h1>\n      <p>Algorithms which specify semantics that must be called at runtime are called  <dfn>runtime semantics</dfn>. Runtime semantics are defined by <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> or syntax-directed operations. Such algorithms always return a completion record.</p>\n      <div id=\"excluded-sec-implicit-completion-values\"><h1><span class=\"secnum\">5.2.3.1</span>#sec-implicit-completion-values Implicit Completion Values</h1>...</div><div id=\"excluded-sec-throw-an-exception\"><h1><span class=\"secnum\">5.2.3.2</span>#sec-throw-an-exception Throw an Exception</h1>...</div><div id=\"excluded-sec-returnifabrupt\"><h1><span class=\"secnum\">5.2.3.3</span>#sec-returnifabrupt ReturnIfAbrupt</h1>...</div><div id=\"excluded-sec-returnifabrupt-shorthands\"><h1><span class=\"secnum\">5.2.3.4</span>#sec-returnifabrupt-shorthands Shorthands Relating to Completion Records</h1>...</div></emu-clause>\n    "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "9.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method for an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>argumentsList</var> and <var>newTarget</var>. <var>argumentsList</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <code>\"base\"</code>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>\"%ObjectPrototype%\"</code>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <code>\"base\"</code>, perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>constructorEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <code>\"base\"</code>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li></ol></li><li>Return ? <var>envRec</var>.GetThisBinding().\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-returnifabrupt-shorthands": {"num": "5.2.3.4", "title": "#sec-returnifabrupt-shorthands Shorthands Relating to Completion Records", "html": "<emu-clause id=\"sec-returnifabrupt-shorthands\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-returnifabrupt-shorthands\">#sec-returnifabrupt-shorthands</span> Shorthands Relating to Completion Records</h1>\n\n        <p>Invocations of <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> may be prefixed by <code>?</code> as shorthand for applying the <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref> expansion.</p>\n        <emu-alg><ol><li>?&#160;OperationName().\n        </li></ol></emu-alg>\n        <p>is equivalent to</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(OperationName()).\n        </li></ol></emu-alg>\n        <p>wherever it appears. Similarly, prefix <code>?</code> may be used to apply the <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref> expansion to the result of applying a syntax-directed operation. For example,</p>\n        <emu-alg><ol><li>Let <var>result</var> be ? SyntaxDirectedOperation of <emu-nt>NonTerminal</emu-nt>.\n        </li></ol></emu-alg>\n        <p>is equivalent to the sequence of steps:</p>\n        <emu-alg><ol><li>Let <var>result</var> be <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(SyntaxDirectedOperation of <emu-nt>NonTerminal</emu-nt>).\n        </li></ol></emu-alg>\n\n        <p>Invocations of <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> may be prefixed by <code>!</code> to indicate that the result will never be an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and that the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>'s [[Value]] field should be used in place of the return value of the operation.</p>\n        <emu-alg><ol><li>Let <var>val</var> be !&#160;OperationName().\n        </li></ol></emu-alg>\n        <p>is equivalent to the sequence of steps:</p>\n        <emu-alg><ol><li>Let <var>val</var> be OperationName().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>val</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>If <var>val</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>val</var> to <var>val</var>.[[Value]].\n        </li></ol></emu-alg>\n        <p>Similarly, syntax-directed operations may make use of this shorthand by placing <code>!</code> before the invocation of the operation:</p>\n        <emu-alg><ol><li>Let <var>result</var> be ! SyntaxDirectedOperation of <emu-nt>NonTerminal</emu-nt>.\n        </li></ol></emu-alg>\n        <p>is equivalent to the sequence of steps:</p>\n        <emu-alg><ol><li>Let <var>result</var> be SyntaxDirectedOperation of <emu-nt>NonTerminal</emu-nt>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>If <var>result</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>result</var> to <var>result</var>.[[Value]].\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-returnifabrupt": {"num": "5.2.3.3", "title": "#sec-returnifabrupt ReturnIfAbrupt", "html": "<emu-clause id=\"sec-returnifabrupt\" aoid=\"ReturnIfAbrupt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-returnifabrupt\">#sec-returnifabrupt</span> ReturnIfAbrupt</h1>\n        <p>An algorithm step that says:</p>\n        <emu-alg><ol><li><emu-val>[before]</emu-val> <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<emu-val>[argument]</emu-val>) <emu-val>[after]</emu-val>\n        </li></ol></emu-alg>\n        <p>is equivalent to the sequence of steps:</p>\n        <emu-alg><ol><li>Let <var>hygienicTemp</var> be <emu-val>[argument]</emu-val>.</li><li>If <var>hygienicTemp</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <var>hygienicTemp</var>.</li><li>Else if <var>hygienicTemp</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>hygienicTemp</var> to <var>hygienicTemp</var>.[[Value]].</li><li><emu-val>[before]</emu-val> <var>hygienicTemp</var> <emu-val>[after]</emu-val>\n        </li></ol></emu-alg>\n        <p>where</p>\n        <ul>\n          <li><emu-val>[before]</emu-val>, if present, is any algorithm text that does not contain ReturnIfAbrupt.</li>\n          <li><emu-val>[after]</emu-val>, if present, is any algorithm text.</li>\n          <li><emu-val>[argument]</emu-val> is an alias, an application of an abstract operation, an application of a syntax-directed operation, or a use of ReturnIfAbrupt.</li>\n          <li><var>hygienicTemp</var> is ephemeral and visible only in the steps pertaining to this ReturnIfAbrupt expansion.</li>\n        </ul>\n\n        <p>For example, an algorithm step that says:</p>\n        <emu-alg><ol><li>Set <var>someAlias</var> to <var>someValue</var> if <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>someValue</var>.OperationName(<var>firstArgument</var>, <var>secondArgument</var>)) is <emu-val>true</emu-val>.\n        </li></ol></emu-alg>\n        <p>is equivalent to the sequence of steps:</p>\n        <emu-alg><ol><li>Let <var>hygienicTemp</var> be <var>someValue</var>.OperationName(<var>firstArgument</var>, <var>secondArgument</var>).</li><li>If <var>hygienicTemp</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return <var>hygienicTemp</var>.</li><li>Else if <var>hygienicTemp</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>hygienicTemp</var> to <var>hygienicTemp</var>.[[Value]].</li><li>Set <var>someAlias</var> to <var>someValue</var> if <var>hygienicTemp</var> is <emu-val>true</emu-val>.\n        </li></ol></emu-alg>\n\n        <p>Note that the resulting steps of ReturnIfAbrupt expansion may themselves contain ReturnIfAbrupt. In these cases, expansion can be applied to the resulting steps until the steps no longer contain ReturnIfAbrupt.</p>\n      </emu-clause>\n\n      "}}, "figData": {}}}