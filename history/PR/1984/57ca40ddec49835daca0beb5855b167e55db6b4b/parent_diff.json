{"from": {"secList": ["sec-jobs", "sec-hostenqueuepromisejob"], "secData": {"sec-jobs": {"num": "8.4", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\">\n    <span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A  <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript host environments. This specification describes the host hook <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; host environments may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must:\n        \n        <ol>\n          <li>Push an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li>\n          <li>Perform any implementation-defined preparation steps.</li>\n          <li>Call the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any implementation-defined cleanup steps.</li>\n          <li>Pop the previously-pushed <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a normal completion, implementing its own handling of errors.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>Host environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">8.4.1</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}, "sec-hostenqueuepromisejob": {"num": "8.4.1", "title": "#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )", "html": "<emu-clause id=\"sec-hostenqueuepromisejob\" aoid=\"HostEnqueuePromiseJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostenqueuepromisejob\">#sec-hostenqueuepromisejob</span> HostEnqueuePromiseJob ( <var>job</var>, <var>realm</var> )</h1>\n      <p>HostEnqueuePromiseJob is a host-defined abstract operation that schedules the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> <var>job</var> to be performed, at some future time. The Abstract Closures used with this algorithm are intended to be related to the handling of Promises, or otherwise, to be scheduled with equal priority to Promise handling operations.</p>\n      <p>The <var>realm</var> parameter is passed through to hosts with no normative requirements; it is either <emu-val>null</emu-val> or a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</p>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        The <var>realm</var> for PromiseResolveThenableJobs is the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the <var>then</var> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The <var>realm</var> for PromiseReactionJobs is the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the handler if the handler is not <emu-val>undefined</emu-val>. Otherwise the <var>realm</var> is <emu-val>null</emu-val>. The WHATWG HTML specification, for example, uses <var>realm</var> to check for ability to run script and to prepare to run script.\n      \n      </div></emu-note>\n\n      <p>The implementation of HostEnqueuePromiseJob must conform to the requirements in  <emu-xref href=\"#sec-jobs\"><a href=\"#sec-jobs\" class=\"excluded-xref\" excluded-id=\"sec-jobs\">#sec-jobs</a></emu-xref>. Additionally, Jobs must be scheduled in FIFO order, with Jobs running in the same order as the HostEnqueuePromiseJob invocations which scheduled them.</p>\n    </emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-jobs", "sec-hostenqueuepromisejob"], "secData": {"sec-jobs": {"num": "8.4", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\">\n    <span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A  <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript host environments. This specification describes the host hook <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; host environments may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must perform the following:\n        \n        <ol>\n          <li>Perform any implementation-defined preparation steps.</li>\n          <li>Call the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any implementation-defined cleanup steps.</li>\n          <li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a normal completion, implementing its own handling of errors.</li>\n    </ul>\n\n    <p>At any point in time, an execution is  <dfn id=\"job-preparedtoevaluatecode\">prepared to evaluate code</dfn> in <var>scriptOrModule</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref>, or <emu-val>null</emu-val>) when all of the following conditions are true:</p>\n    <ul>\n      <li>The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li>\n      <li>The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li>\n      <li>The ScriptOrModule component of the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is <var>scriptOrModule</var>.</li>\n    </ul>\n\n    <p>Particular kinds of Jobs have additional conformance requirements.</p>\n\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>Host environments may prepare an execution to evaluate code by pushing execution contexts onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The specific steps are implementation-defined.</p>\n      <p>Host environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">8.4.1</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}, "sec-hostenqueuepromisejob": {"num": "8.4.1", "title": "#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )", "html": "<emu-clause id=\"sec-hostenqueuepromisejob\" aoid=\"HostEnqueuePromiseJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostenqueuepromisejob\">#sec-hostenqueuepromisejob</span> HostEnqueuePromiseJob ( <var>job</var>, <var>realm</var> )</h1>\n      <p>HostEnqueuePromiseJob is a host-defined abstract operation that schedules the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> <var>job</var> to be performed, at some future time. The Abstract Closures used with this algorithm are intended to be related to the handling of Promises, or otherwise, to be scheduled with equal priority to Promise handling operations.</p>\n      <p>The <var>realm</var> parameter is passed through to hosts with no normative requirements; it is either <emu-val>null</emu-val> or a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</p>\n\n      <p>The implementation of HostEnqueuePromiseJob must conform to the requirements in  <emu-xref href=\"#sec-jobs\"><a href=\"#sec-jobs\" class=\"excluded-xref\" excluded-id=\"sec-jobs\">#sec-jobs</a></emu-xref>. Additionally, Jobs enqueued by this hook must conform to all of the following requirements:</p>\n      <ul>\n        <li>Let <var>scriptOrModule</var> be <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>(). If <var>realm</var> is not <emu-val>null</emu-val>, when the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> runs, the implementation must perform implementation-defined steps such that execution is <emu-xref href=\"#job-preparedtoevaluatecode\"><a href=\"#job-preparedtoevaluatecode\">prepared to evaluate code</a></emu-xref> in <var>scriptOrModule</var> before the <var>job</var> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> is called.</li>\n        <li>Jobs must be scheduled in FIFO order, with Jobs running in the same order as the HostEnqueuePromiseJob invocations which scheduled them.</li>\n      </ul>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        The <var>realm</var> for PromiseResolveThenableJobs is the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the <var>then</var> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The <var>realm</var> for PromiseReactionJobs is the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the handler if the handler is not <emu-val>undefined</emu-val>. Otherwise the <var>realm</var> is <emu-val>null</emu-val> and no user ECMAScript code will be evaluated. The WHATWG HTML specification, for example, uses <var>realm</var> to check for ability to run script and to prepare to run script.\n      \n      </div></emu-note>\n    </emu-clause>\n  "}}, "figData": {}}}