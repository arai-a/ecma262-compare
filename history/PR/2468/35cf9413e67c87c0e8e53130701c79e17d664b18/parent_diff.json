{"from": {"secList": ["sec-property-descriptor-specification-type", "sec-property-attributes", "sec-invariants-of-the-essential-internal-methods", "sec-list-and-record-specification-type", "sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p", "sec-iscompatiblepropertydescriptor", "sec-validateandapplypropertydescriptor"], "secData": {"sec-property-descriptor-specification-type": {"num": "6.2.5", "title": "#sec-property-descriptor-specification-type The Property Descriptor Specification Type", "html": "<emu-clause id=\"sec-property-descriptor-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-property-descriptor-specification-type\">#sec-property-descriptor-specification-type</span> The Property Descriptor Specification Type</h1>\n      <p>The <dfn>Property Descriptor</dfn> type is used to explain the manipulation and reification of Object property attributes. Values of the Property Descriptor type are Records. Each field's name is an attribute name and its value is a corresponding attribute value as specified in <emu-xref href=\"#sec-property-attributes\"><a href=\"#sec-property-attributes\" class=\"excluded-xref\" excluded-id=\"sec-property-attributes\">#sec-property-attributes</a></emu-xref>. In addition, any field may be present or absent. The schema name used within this specification to tag literal descriptions of Property Descriptor records is &#8220;PropertyDescriptor&#8221;.</p>\n      <p>Property Descriptor values may be further classified as data Property Descriptors and accessor Property Descriptors based upon the existence or use of certain fields. A data Property Descriptor is one that includes any fields named either [[Value]] or [[Writable]]. An accessor Property Descriptor is one that includes any fields named either [[Get]] or [[Set]]. Any Property Descriptor may have fields named [[Enumerable]] and [[Configurable]]. A Property Descriptor value may not be both a data Property Descriptor and an accessor Property Descriptor; however, it may be neither. A generic Property Descriptor is a Property Descriptor value that is neither a data Property Descriptor nor an accessor Property Descriptor. A fully populated Property Descriptor is one that is either an accessor Property Descriptor or a data Property Descriptor and that has all of the fields that correspond to the property attributes defined in either <emu-xref href=\"#table-data-property-attributes\"><a href=\"#table-data-property-attributes\" class=\"excluded-xref\" excluded-id=\"table-data-property-attributes\">#table-data-property-attributes</a></emu-xref> or <emu-xref href=\"#table-accessor-property-attributes\"><a href=\"#table-accessor-property-attributes\" class=\"excluded-xref\" excluded-id=\"table-accessor-property-attributes\">#table-accessor-property-attributes</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Property Descriptor values:</p>\n\n      <div id=\"excluded-sec-isaccessordescriptor\"><h1><span class=\"secnum\">6.2.5.1</span>#sec-isaccessordescriptor IsAccessorDescriptor ( Desc )</h1>...</div><div id=\"excluded-sec-isdatadescriptor\"><h1><span class=\"secnum\">6.2.5.2</span>#sec-isdatadescriptor IsDataDescriptor ( Desc )</h1>...</div><div id=\"excluded-sec-isgenericdescriptor\"><h1><span class=\"secnum\">6.2.5.3</span>#sec-isgenericdescriptor IsGenericDescriptor ( Desc )</h1>...</div><div id=\"excluded-sec-frompropertydescriptor\"><h1><span class=\"secnum\">6.2.5.4</span>#sec-frompropertydescriptor FromPropertyDescriptor ( Desc )</h1>...</div><div id=\"excluded-sec-topropertydescriptor\"><h1><span class=\"secnum\">6.2.5.5</span>#sec-topropertydescriptor ToPropertyDescriptor ( Obj )</h1>...</div><div id=\"excluded-sec-completepropertydescriptor\"><h1><span class=\"secnum\">6.2.5.6</span>#sec-completepropertydescriptor CompletePropertyDescriptor ( Desc )</h1>...</div></emu-clause>\n\n    "}, "sec-property-attributes": {"num": "6.1.7.1", "title": "#sec-property-attributes Property Attributes", "html": "<emu-clause id=\"sec-property-attributes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-property-attributes\">#sec-property-attributes</span> Property Attributes</h1>\n        <p>Attributes are used in this specification to define and explain the state of Object properties. A <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> associates a key value with the attributes listed in <emu-xref href=\"#table-data-property-attributes\"><a href=\"#table-data-property-attributes\" class=\"excluded-xref\" excluded-id=\"table-data-property-attributes\">#table-data-property-attributes</a></emu-xref>.</p>\n        <emu-table id=\"table-data-property-attributes\" caption=\"Attributes of a Data Property\" oldids=\"table-2\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-data-property-attributes\">#table-data-property-attributes</span>: Attributes of a Data Property</figcaption><span id=\"table-2\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Attribute Name\n              </th>\n              <th>\n                Value Domain\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Value]]\n              </td>\n              <td>\n                Any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>\n              </td>\n              <td>\n                The value retrieved by a get access of the property.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Writable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>false</emu-val>, attempts by ECMAScript code to change the property's [[Value]] attribute using [[Set]] will not succeed.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Enumerable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>true</emu-val>, the property will be enumerated by a for-in enumeration (see <emu-xref href=\"#sec-for-in-and-for-of-statements\"><a href=\"#sec-for-in-and-for-of-statements\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</a></emu-xref>). Otherwise, the property is said to be non-enumerable.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Configurable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>false</emu-val>, attempts to delete the property, change the property to be an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>, or change its attributes (other than [[Value]], or changing [[Writable]] to <emu-val>false</emu-val>) will fail.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>An <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> associates a key value with the attributes listed in <emu-xref href=\"#table-accessor-property-attributes\"><a href=\"#table-accessor-property-attributes\" class=\"excluded-xref\" excluded-id=\"table-accessor-property-attributes\">#table-accessor-property-attributes</a></emu-xref>.</p>\n        <emu-table id=\"table-accessor-property-attributes\" caption=\"Attributes of an Accessor Property\" oldids=\"table-3\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-accessor-property-attributes\">#table-accessor-property-attributes</span>: Attributes of an Accessor Property</figcaption><span id=\"table-3\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Attribute Name\n              </th>\n              <th>\n                Value Domain\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              </td>\n              <td>\n                Object | Undefined\n              </td>\n              <td>\n                If the value is an Object it must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function's [[Call]] internal method (<emu-xref href=\"#table-additional-essential-internal-methods-of-function-objects\"><a href=\"#table-additional-essential-internal-methods-of-function-objects\" class=\"excluded-xref\" excluded-id=\"table-additional-essential-internal-methods-of-function-objects\">#table-additional-essential-internal-methods-of-function-objects</a></emu-xref>) is called with an empty arguments list to retrieve the property value each time a get access of the property is performed.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              </td>\n              <td>\n                Object | Undefined\n              </td>\n              <td>\n                If the value is an Object it must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function's [[Call]] internal method (<emu-xref href=\"#table-additional-essential-internal-methods-of-function-objects\"><a href=\"#table-additional-essential-internal-methods-of-function-objects\" class=\"excluded-xref\" excluded-id=\"table-additional-essential-internal-methods-of-function-objects\">#table-additional-essential-internal-methods-of-function-objects</a></emu-xref>) is called with an arguments list containing the assigned value as its sole argument each time a set access of the property is performed. The effect of a property's [[Set]] internal method may, but is not required to, have an effect on the value returned by subsequent calls to the property's [[Get]] internal method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Enumerable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>true</emu-val>, the property is to be enumerated by a for-in enumeration (see <emu-xref href=\"#sec-for-in-and-for-of-statements\"><a href=\"#sec-for-in-and-for-of-statements\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</a></emu-xref>). Otherwise, the property is said to be non-enumerable.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Configurable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>false</emu-val>, attempts to delete the property, change the property to be a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, or change its attributes will fail.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>If the initial values of a property's attributes are not explicitly specified by this specification, the default value defined in <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\" class=\"excluded-xref\" excluded-id=\"table-default-attribute-values\">#table-default-attribute-values</a></emu-xref> is used.</p>\n        <emu-table id=\"table-default-attribute-values\" caption=\"Default Attribute Values\" oldids=\"table-4\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-default-attribute-values\">#table-default-attribute-values</span>: Default Attribute Values</figcaption><span id=\"table-4\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Attribute Name\n              </th>\n              <th>\n                Default Value\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Value]]\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Writable]]\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Enumerable]]\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Configurable]]\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-invariants-of-the-essential-internal-methods": {"num": "6.1.7.3", "title": "#sec-invariants-of-the-essential-internal-methods Invariants of the Essential Internal Methods", "html": "<emu-clause id=\"sec-invariants-of-the-essential-internal-methods\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-invariants-of-the-essential-internal-methods\">#sec-invariants-of-the-essential-internal-methods</span> Invariants of the Essential Internal Methods</h1>\n        <p>The Internal Methods of Objects of an ECMAScript engine must conform to the list of invariants specified below. Ordinary ECMAScript Objects as well as all standard exotic objects in this specification maintain these invariants. ECMAScript Proxy objects maintain these invariants by means of runtime checks on the result of traps invoked on the [[ProxyHandler]] object.</p>\n        <p>Any implementation provided exotic objects must also maintain these invariants for those objects. Violation of these invariants may cause ECMAScript code to have unpredictable behaviour and create security issues. However, violation of these invariants must never compromise the memory safety of an implementation.</p>\n        <p>An implementation must not allow these invariants to be circumvented in any manner such as by providing alternative interfaces that implement the functionality of the essential internal methods without enforcing their invariants.</p>\n        <h2>Definitions:</h2>\n        <ul>\n          <li>\n            The <em>target</em> of an internal method is the object upon which the internal method is called.\n          </li>\n          <li>\n            A target is <em>non-extensible</em> if it has been observed to return <emu-val>false</emu-val> from its [[IsExtensible]] internal method, or <emu-val>true</emu-val> from its [[PreventExtensions]] internal method.\n          </li>\n          <li>\n            A <em>non-existent</em> property is a property that does not exist as an own property on a non-extensible target.\n          </li>\n          <li>\n            All references to <em><emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref></em> are according to the definition of the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> algorithm.\n          </li>\n        </ul>\n        <h2>Return value:</h2>\n        <p>The value returned by any internal method must be a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> with either:</p>\n        <ul>\n          <li>[[Type]] = <emu-const>normal</emu-const>, [[Target]] = <emu-const>empty</emu-const>, and [[Value]] = a value of the \"normal return type\" shown below for that internal method, or</li>\n          <li>[[Type]] = <emu-const>throw</emu-const>, [[Target]] = <emu-const>empty</emu-const>, and [[Value]] = any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>An internal method must not return a completion with [[Type]] = <emu-const>continue</emu-const>, <emu-const>break</emu-const>, or <emu-const>return</emu-const>.</p>\n        </div></emu-note>\n        <h2>[[GetPrototypeOf]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is either Object or Null.\n          </li>\n          <li>\n            If target is non-extensible, and [[GetPrototypeOf]] returns a value <var>V</var>, then any future calls to [[GetPrototypeOf]] should return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>An object's prototype chain should have finite length (that is, starting from any object, recursively applying the [[GetPrototypeOf]] internal method to its result should eventually lead to the value <emu-val>null</emu-val>). However, this requirement is not enforceable as an object level invariant if the prototype chain includes any exotic objects that do not use the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> definition of [[GetPrototypeOf]]. Such a circular prototype chain may result in infinite loops when accessing object properties.</p>\n        </div></emu-note>\n        <h2>[[SetPrototypeOf]] ( <var>V</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If target is non-extensible, [[SetPrototypeOf]] must return <emu-val>false</emu-val>, unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as the target's observed [[GetPrototypeOf]] value.\n          </li>\n        </ul>\n        <h2>[[IsExtensible]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If [[IsExtensible]] returns <emu-val>false</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[PreventExtensions]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If [[PreventExtensions]] returns <emu-val>true</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val> and the target is now considered non-extensible.\n          </li>\n        </ul>\n        <h2>[[GetOwnProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is either <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or Undefined.\n          </li>\n          <li>\n            If the Type of the return value is <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, the return value must be a fully populated <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>.\n          </li>\n          <li>\n            If <var>P</var> is described as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, all future calls to [[GetOwnProperty]] ( <var>P</var> ) must return <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> whose [[Value]] is <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          </li>\n          <li>\n            If <var>P</var>'s attributes other than [[Writable]] may change over time or if the property might be deleted, then <var>P</var>'s [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          </li>\n          <li>\n            If the [[Writable]] attribute may change from <emu-val>false</emu-val> to <emu-val>true</emu-val>, then the [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          </li>\n          <li>\n            If the target is non-extensible and <var>P</var> is non-existent, then all future calls to [[GetOwnProperty]] (<var>P</var>) on the target must describe <var>P</var> as non-existent (i.e. [[GetOwnProperty]] (<var>P</var>) must return <emu-val>undefined</emu-val>).\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>As a consequence of the third invariant, if a property is described as a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> and it may return different values over time, then either or both of the [[Writable]] and [[Configurable]] attributes must be <emu-val>true</emu-val> even if no mechanism to change the value is exposed via the other essential internal methods.</p>\n        </div></emu-note>\n        <h2>[[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            [[DefineOwnProperty]] must return <emu-val>false</emu-val> if <var>P</var> has previously been observed as a non-configurable own property of the target, unless either:\n            <ol>\n              <li>\n                <var>P</var> is a writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>. A non-configurable writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> can be changed into a non-configurable non-writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>.\n              </li>\n              <li>\n                All attributes of <var>Desc</var> are the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s attributes.\n              </li>\n            </ol>\n          </li>\n          <li>\n            [[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>) must return <emu-val>false</emu-val> if target is non-extensible and <var>P</var> is a non-existent own property. That is, a non-extensible target object cannot be extended with new properties.\n          </li>\n        </ul>\n        <h2>[[HasProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[HasProperty]] must return <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Get]] ( <var>P</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target with value <var>V</var>, then [[Get]] must return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Get]] attribute is <emu-val>undefined</emu-val>, the [[Get]] operation must return <emu-val>undefined</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target, then [[Set]] must return <emu-val>false</emu-val> unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Set]] attribute is <emu-val>undefined</emu-val>, the [[Set]] operation must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Delete]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[Delete]] must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[OwnPropertyKeys]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must not contain any duplicate entries.\n          </li>\n          <li>\n            The Type of each element of the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is either String or Symbol.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain at least the keys of all non-configurable own properties that have previously been observed.\n          </li>\n          <li>\n            If the target is non-extensible, the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain only the keys of all own properties of the target that are observable using [[GetOwnProperty]].\n          </li>\n        </ul>\n        <h2>[[Call]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n          </li>\n        </ul>\n        <h2>[[Construct]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Object.\n          </li>\n          <li>\n            The target must also have a [[Call]] internal method.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-list-and-record-specification-type": {"num": "6.2.1", "title": "#sec-list-and-record-specification-type The List and Record Specification Types", "html": "<emu-clause id=\"sec-list-and-record-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-list-and-record-specification-type\">#sec-list-and-record-specification-type</span> The List and Record Specification Types</h1>\n      <p>The <dfn>List</dfn> type is used to explain the evaluation of argument lists (see <emu-xref href=\"#sec-argument-lists\"><a href=\"#sec-argument-lists\" class=\"excluded-xref\" excluded-id=\"sec-argument-lists\">#sec-argument-lists</a></emu-xref>) in <code>new</code> expressions, in function calls, and in other algorithms where a simple ordered list of values is needed. Values of the List type are simply ordered sequences of list elements containing the individual values. These sequences may be of any length. The elements of a list may be randomly accessed using 0-origin indices. For notational convenience an array-like syntax can be used to access List elements. For example, <var>arguments</var>[2] is shorthand for saying the 3<sup>rd</sup> element of the List <var>arguments</var>.</p>\n      <p>When an algorithm iterates over the elements of a List without specifying an order, the order used is the order of the elements in the List.</p>\n      <p>For notational convenience within this specification, a literal syntax can be used to express a new List value. For example, &#171; 1, 2 &#187; defines a List value that has two elements each of which is initialized to a specific value. A new empty List can be expressed as &#171; &#187;.</p>\n      <p>In this specification, the phrase \"the <dfn id=\"list-concatenation\">list-concatenation</dfn> of <var>A</var>, <var>B</var>, ...\" (where each argument is a possibly empty List) denotes a new List value whose elements are the concatenation of the elements (in order) of each of the arguments (in order).</p>\n      <p>The <dfn>Record</dfn> type is used to describe data aggregations within the algorithms of this specification. A Record type value consists of one or more named fields. The value of each field is either an ECMAScript value or an abstract value represented by a name associated with the Record type. Field names are always enclosed in double brackets, for example [[Value]].</p>\n      <p>For notational convenience within this specification, an object literal-like syntax can be used to express a Record value. For example, { [[Field1]]: 42, [[Field2]]: <emu-val>false</emu-val>, [[Field3]]: <emu-const>empty</emu-const> } defines a Record value that has three fields, each of which is initialized to a specific value. Field name order is not significant. Any fields that are not explicitly listed are considered to be absent.</p>\n      <p>In specification text and algorithms, dot notation may be used to refer to a specific field of a Record value. For example, if R is the record shown in the previous paragraph then R.[[Field2]] is shorthand for &#8220;the field of R named [[Field2]]&#8221;.</p>\n      <p>Schema for commonly used Record field combinations may be named, and that name may be used as a prefix to a literal Record value to identify the specific kind of aggregations that is being described. For example: PropertyDescriptor { [[Value]]: 42, [[Writable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p": {"num": "10.5.5", "title": "#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p [[GetOwnProperty]] ( P )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p\">#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p</span> [[GetOwnProperty]] ( <var>P</var> )</h1>\n      <p>The [[GetOwnProperty]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"getOwnPropertyDescriptor\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li></ol></li><li>Let <var>trapResultObj</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>trapResultObj</var>) is neither Object nor Undefined, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>trapResultObj</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>resultDesc</var> be ?&#160;<emu-xref aoid=\"ToPropertyDescriptor\"><a href=\"#sec-topropertydescriptor\">ToPropertyDescriptor</a></emu-xref>(<var>trapResultObj</var>).</li><li>Call <emu-xref aoid=\"CompletePropertyDescriptor\"><a href=\"#sec-completepropertydescriptor\">CompletePropertyDescriptor</a></emu-xref>(<var>resultDesc</var>).</li><li>Let <var>valid</var> be <emu-xref aoid=\"IsCompatiblePropertyDescriptor\"><a href=\"#sec-iscompatiblepropertydescriptor\">IsCompatiblePropertyDescriptor</a></emu-xref>(<var>extensibleTarget</var>, <var>resultDesc</var>, <var>targetDesc</var>).</li><li>If <var>valid</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>resultDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val> or <var>targetDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>resultDesc</var> has a [[Writable]] field and <var>resultDesc</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <var>targetDesc</var>.[[Writable]] is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <var>resultDesc</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[GetOwnProperty]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[GetOwnProperty]] must be either an Object or <emu-val>undefined</emu-val>.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if the target object is not extensible, unless it does not exist as an own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as existent, if the target object is not extensible, unless it exists as an own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as non-configurable, unless it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as both non-configurable and non-writable, unless it exists as a non-configurable, non-writable own property of the target object.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-iscompatiblepropertydescriptor": {"num": "10.1.6.2", "title": "#sec-iscompatiblepropertydescriptor IsCompatiblePropertyDescriptor ( Extensible, Desc, Current )", "html": "<emu-clause id=\"sec-iscompatiblepropertydescriptor\" aoid=\"IsCompatiblePropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iscompatiblepropertydescriptor\">#sec-iscompatiblepropertydescriptor</span> IsCompatiblePropertyDescriptor ( <var>Extensible</var>, <var>Desc</var>, <var>Current</var> )</h1>\n        <p>The abstract operation IsCompatiblePropertyDescriptor takes arguments <var>Extensible</var> (a Boolean), <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>), and <var>Current</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"ValidateAndApplyPropertyDescriptor\"><a href=\"#sec-validateandapplypropertydescriptor\">ValidateAndApplyPropertyDescriptor</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>undefined</emu-val>, <var>Extensible</var>, <var>Desc</var>, <var>Current</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-validateandapplypropertydescriptor": {"num": "10.1.6.3", "title": "#sec-validateandapplypropertydescriptor ValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )", "html": "<emu-clause id=\"sec-validateandapplypropertydescriptor\" aoid=\"ValidateAndApplyPropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validateandapplypropertydescriptor\">#sec-validateandapplypropertydescriptor</span> ValidateAndApplyPropertyDescriptor ( <var>O</var>, <var>P</var>, <var>extensible</var>, <var>Desc</var>, <var>current</var> )</h1>\n        <p>The abstract operation ValidateAndApplyPropertyDescriptor takes arguments <var>O</var> (an Object or <emu-val>undefined</emu-val>), <var>P</var> (a property key), <var>extensible</var> (a Boolean), <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>), and <var>current</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>).</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If <emu-val>undefined</emu-val> is passed as <var>O</var>, only validation is performed and no object updates are performed.</p>\n        </div></emu-note>\n        <p>It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>O</var> is not <emu-val>undefined</emu-val>, then <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>current</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>extensible</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>extensible</var> is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"IsGenericDescriptor\"><a href=\"#sec-isgenericdescriptor\">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val> or <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, create an own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> named <var>P</var> of object <var>O</var> whose [[Value]], [[Writable]], [[Enumerable]], and [[Configurable]] attribute values are described by <var>Desc</var>. If the value of an attribute field of <var>Desc</var> is absent, the attribute of the newly created property is set to its <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default value</a></emu-xref>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>.</li><li>If <var>O</var> is not <emu-val>undefined</emu-val>, create an own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> named <var>P</var> of object <var>O</var> whose [[Get]], [[Set]], [[Enumerable]], and [[Configurable]] attribute values are described by <var>Desc</var>. If the value of an attribute field of <var>Desc</var> is absent, the attribute of the newly created property is set to its <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default value</a></emu-xref>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If every field in <var>Desc</var> is absent, return <emu-val>true</emu-val>.</li><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>Desc</var>.[[Configurable]] is present and its value is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var>.[[Enumerable]] is present and !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Enumerable]], <var>current</var>.[[Enumerable]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsGenericDescriptor\"><a href=\"#sec-isgenericdescriptor\">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>NOTE: No further validation is required.</li></ol></li><li>Else if !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(! <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>current</var>), !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>)) is <emu-val>false</emu-val>, then<ol><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>current</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, convert the property named <var>P</var> of object <var>O</var> from a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default values</a></emu-xref>.</li></ol></li><li>Else,<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, convert the property named <var>P</var> of object <var>O</var> from an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default values</a></emu-xref>.</li></ol></li></ol></li><li>Else if <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>current</var>) and <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) are both <emu-val>true</emu-val>, then<ol><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val> and <var>current</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <var>Desc</var>.[[Writable]] is present and <var>Desc</var>.[[Writable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var>.[[Value]] is present and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Value]], <var>current</var>.[[Value]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>current</var>) and !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) are both <emu-val>true</emu-val>.</li><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>Desc</var>.[[Set]] is present and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Set]], <var>current</var>.[[Set]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var>.[[Get]] is present and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Get]], <var>current</var>.[[Get]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>O</var> is not <emu-val>undefined</emu-val>, then<ol><li>For each field of <var>Desc</var> that is present, set the corresponding attribute of the property named <var>P</var> of object <var>O</var> to the value of the field.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {"table-data-property-attributes": "Table 3", "table-accessor-property-attributes": "Table 4", "table-default-attribute-values": "Table 5", "table-additional-essential-internal-methods-of-function-objects": "Table 7"}}, "to": {"secList": ["sec-property-descriptor-specification-type", "sec-property-attributes", "sec-invariants-of-the-essential-internal-methods", "sec-list-and-record-specification-type", "sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p", "sec-iscompatiblepropertydescriptor", "sec-validateandapplypropertydescriptor"], "secData": {"sec-property-descriptor-specification-type": {"num": "6.2.5", "title": "#sec-property-descriptor-specification-type The Property Descriptor Specification Type", "html": "<emu-clause id=\"sec-property-descriptor-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-property-descriptor-specification-type\">#sec-property-descriptor-specification-type</span> The Property Descriptor Specification Type</h1>\n      <p>The <dfn>Property Descriptor</dfn> type is used to explain the manipulation and reification of Object property attributes. Values of the Property Descriptor type are Records. Each field's name is an attribute name and its value is a corresponding attribute value as specified in <emu-xref href=\"#sec-property-attributes\"><a href=\"#sec-property-attributes\" class=\"excluded-xref\" excluded-id=\"sec-property-attributes\">#sec-property-attributes</a></emu-xref>. In addition, any field may be present or absent. The schema name used within this specification to tag literal descriptions of Property Descriptor records is &#8220;PropertyDescriptor&#8221;.</p>\n      <p>Property Descriptor values may be further classified as data Property Descriptors and accessor Property Descriptors based upon the existence or use of certain fields. A data Property Descriptor is one that includes any fields named either [[Value]] or [[Writable]]. An accessor Property Descriptor is one that includes any fields named either [[Get]] or [[Set]]. Any Property Descriptor may have fields named [[Enumerable]] and [[Configurable]]. A Property Descriptor value may not be both a data Property Descriptor and an accessor Property Descriptor; however, it may be neither. A generic Property Descriptor is a Property Descriptor value that is neither a data Property Descriptor nor an accessor Property Descriptor. A <dfn>fully populated Property Descriptor</dfn> is one that is either an accessor Property Descriptor or a data Property Descriptor and that has all of the corresponding fields defined in <emu-xref href=\"#table-object-property-attributes\"><a href=\"#table-object-property-attributes\" class=\"excluded-xref\" excluded-id=\"table-object-property-attributes\">#table-object-property-attributes</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Property Descriptor values:</p>\n      <!-- TODO: replace Boolean-returning operations with PropertyDescriptorType &#8594; ~generic~ | ~data~ | ~accessor~? -->\n\n      <div id=\"excluded-sec-isaccessordescriptor\"><h1><span class=\"secnum\">6.2.5.1</span>#sec-isaccessordescriptor IsAccessorDescriptor ( Desc )</h1>...</div><div id=\"excluded-sec-isdatadescriptor\"><h1><span class=\"secnum\">6.2.5.2</span>#sec-isdatadescriptor IsDataDescriptor ( Desc )</h1>...</div><div id=\"excluded-sec-isgenericdescriptor\"><h1><span class=\"secnum\">6.2.5.3</span>#sec-isgenericdescriptor IsGenericDescriptor ( Desc )</h1>...</div><div id=\"excluded-sec-frompropertydescriptor\"><h1><span class=\"secnum\">6.2.5.4</span>#sec-frompropertydescriptor FromPropertyDescriptor ( Desc )</h1>...</div><div id=\"excluded-sec-topropertydescriptor\"><h1><span class=\"secnum\">6.2.5.5</span>#sec-topropertydescriptor ToPropertyDescriptor ( Obj )</h1>...</div><div id=\"excluded-sec-completepropertydescriptor\"><h1><span class=\"secnum\">6.2.5.6</span>#sec-completepropertydescriptor CompletePropertyDescriptor ( Desc )</h1>...</div></emu-clause>\n\n    "}, "sec-property-attributes": {"num": "6.1.7.1", "title": "#sec-property-attributes Property Attributes", "html": "<emu-clause id=\"sec-property-attributes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-property-attributes\">#sec-property-attributes</span> Property Attributes</h1>\n        <!-- TODO: merge this with sec-property-descriptor-specification-type?\n        cf. https://github.com/tc39/ecma262/issues/1067\n        -->\n        <p>Attributes are used in this specification to define and explain the state of Object properties as described in <emu-xref href=\"#table-object-property-attributes\"><a href=\"#table-object-property-attributes\" class=\"excluded-xref\" excluded-id=\"table-object-property-attributes\">#table-object-property-attributes</a></emu-xref>. Unless specified explicitly, the initial value of each attribute is its Default Value.</p>\n        <emu-table id=\"table-object-property-attributes\" caption=\"Attributes of an Object property\" oldids=\"table-2,table-3,table-4,table-data-property-attributes,table-accessor-property-attributes,table-default-attribute-values\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-object-property-attributes\">#table-object-property-attributes</span>: Attributes of an Object property</figcaption><span id=\"table-default-attribute-values\"></span><span id=\"table-accessor-property-attributes\"></span><span id=\"table-data-property-attributes\"></span><span id=\"table-4\"></span><span id=\"table-3\"></span><span id=\"table-2\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>Attribute Name</th>\n              <th>Types of property for which it is present</th>\n              <th>Value Domain</th>\n              <th>Default Value</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td>\n                [[Value]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>\n              </td>\n              <td>\n                Any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The value retrieved by a get access of the property.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Writable]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n              <td>\n                If <emu-val>false</emu-val>, attempts by ECMAScript code to change the property's [[Value]] attribute using [[Set]] will not succeed.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>\n              </td>\n              <td>\n                Object | Undefined\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                If the value is an Object it must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function's [[Call]] internal method (<emu-xref href=\"#table-additional-essential-internal-methods-of-function-objects\"><a href=\"#table-additional-essential-internal-methods-of-function-objects\" class=\"excluded-xref\" excluded-id=\"table-additional-essential-internal-methods-of-function-objects\">#table-additional-essential-internal-methods-of-function-objects</a></emu-xref>) is called with an empty arguments list to retrieve the property value each time a get access of the property is performed.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>\n              </td>\n              <td>\n                Object | Undefined\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                If the value is an Object it must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function's [[Call]] internal method (<emu-xref href=\"#table-additional-essential-internal-methods-of-function-objects\"><a href=\"#table-additional-essential-internal-methods-of-function-objects\" class=\"excluded-xref\" excluded-id=\"table-additional-essential-internal-methods-of-function-objects\">#table-additional-essential-internal-methods-of-function-objects</a></emu-xref>) is called with an arguments list containing the assigned value as its sole argument each time a set access of the property is performed. The effect of a property's [[Set]] internal method may, but is not required to, have an effect on the value returned by subsequent calls to the property's [[Get]] internal method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Enumerable]]\n              </td>\n              <td>\n                All\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n              <td>\n                If <emu-val>true</emu-val>, the property will be enumerated by a for-in enumeration (see <emu-xref href=\"#sec-for-in-and-for-of-statements\"><a href=\"#sec-for-in-and-for-of-statements\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</a></emu-xref>). Otherwise, the property is said to be non-enumerable.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Configurable]]\n              </td>\n              <td>\n                All\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n              <td>\n                If <emu-val>false</emu-val>, attempts to delete the property, change it from a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> or from an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, or make any changes to its attributes (other than replacing an existing [[Value]] or setting [[Writable]] to <emu-val>false</emu-val>) will fail.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-invariants-of-the-essential-internal-methods": {"num": "6.1.7.3", "title": "#sec-invariants-of-the-essential-internal-methods Invariants of the Essential Internal Methods", "html": "<emu-clause id=\"sec-invariants-of-the-essential-internal-methods\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-invariants-of-the-essential-internal-methods\">#sec-invariants-of-the-essential-internal-methods</span> Invariants of the Essential Internal Methods</h1>\n        <p>The Internal Methods of Objects of an ECMAScript engine must conform to the list of invariants specified below. Ordinary ECMAScript Objects as well as all standard exotic objects in this specification maintain these invariants. ECMAScript Proxy objects maintain these invariants by means of runtime checks on the result of traps invoked on the [[ProxyHandler]] object.</p>\n        <p>Any implementation provided exotic objects must also maintain these invariants for those objects. Violation of these invariants may cause ECMAScript code to have unpredictable behaviour and create security issues. However, violation of these invariants must never compromise the memory safety of an implementation.</p>\n        <p>An implementation must not allow these invariants to be circumvented in any manner such as by providing alternative interfaces that implement the functionality of the essential internal methods without enforcing their invariants.</p>\n        <h2>Definitions:</h2>\n        <ul>\n          <li>\n            The <em>target</em> of an internal method is the object upon which the internal method is called.\n          </li>\n          <li>\n            A target is <em>non-extensible</em> if it has been observed to return <emu-val>false</emu-val> from its [[IsExtensible]] internal method, or <emu-val>true</emu-val> from its [[PreventExtensions]] internal method.\n          </li>\n          <li>\n            A <em>non-existent</em> property is a property that does not exist as an own property on a non-extensible target.\n          </li>\n          <li>\n            All references to <em><emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref></em> are according to the definition of the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> algorithm.\n          </li>\n        </ul>\n        <h2>Return value:</h2>\n        <p>The value returned by any internal method must be a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> with either:</p>\n        <ul>\n          <li>[[Type]] = <emu-const>normal</emu-const>, [[Target]] = <emu-const>empty</emu-const>, and [[Value]] = a value of the \"normal return type\" shown below for that internal method, or</li>\n          <li>[[Type]] = <emu-const>throw</emu-const>, [[Target]] = <emu-const>empty</emu-const>, and [[Value]] = any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>An internal method must not return a completion with [[Type]] = <emu-const>continue</emu-const>, <emu-const>break</emu-const>, or <emu-const>return</emu-const>.</p>\n        </div></emu-note>\n        <h2>[[GetPrototypeOf]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is either Object or Null.\n          </li>\n          <li>\n            If target is non-extensible, and [[GetPrototypeOf]] returns a value <var>V</var>, then any future calls to [[GetPrototypeOf]] should return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>An object's prototype chain should have finite length (that is, starting from any object, recursively applying the [[GetPrototypeOf]] internal method to its result should eventually lead to the value <emu-val>null</emu-val>). However, this requirement is not enforceable as an object level invariant if the prototype chain includes any exotic objects that do not use the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> definition of [[GetPrototypeOf]]. Such a circular prototype chain may result in infinite loops when accessing object properties.</p>\n        </div></emu-note>\n        <h2>[[SetPrototypeOf]] ( <var>V</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If target is non-extensible, [[SetPrototypeOf]] must return <emu-val>false</emu-val>, unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as the target's observed [[GetPrototypeOf]] value.\n          </li>\n        </ul>\n        <h2>[[IsExtensible]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If [[IsExtensible]] returns <emu-val>false</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[PreventExtensions]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If [[PreventExtensions]] returns <emu-val>true</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val> and the target is now considered non-extensible.\n          </li>\n        </ul>\n        <h2>[[GetOwnProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is either <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or Undefined.\n          </li>\n          <li>\n            If the Type of the return value is <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, the return value must be a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">fully populated Property Descriptor</a></emu-xref>.\n          </li>\n          <li>\n            If <var>P</var> is described as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, all future calls to [[GetOwnProperty]] ( <var>P</var> ) must return <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> whose [[Value]] is <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          </li>\n          <li>\n            If <var>P</var>'s attributes other than [[Writable]] may change over time or if the property might be deleted, then <var>P</var>'s [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          </li>\n          <li>\n            If the [[Writable]] attribute may change from <emu-val>false</emu-val> to <emu-val>true</emu-val>, then the [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          </li>\n          <li>\n            If the target is non-extensible and <var>P</var> is non-existent, then all future calls to [[GetOwnProperty]] (<var>P</var>) on the target must describe <var>P</var> as non-existent (i.e. [[GetOwnProperty]] (<var>P</var>) must return <emu-val>undefined</emu-val>).\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>As a consequence of the third invariant, if a property is described as a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> and it may return different values over time, then either or both of the [[Writable]] and [[Configurable]] attributes must be <emu-val>true</emu-val> even if no mechanism to change the value is exposed via the other essential internal methods.</p>\n        </div></emu-note>\n        <h2>[[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            [[DefineOwnProperty]] must return <emu-val>false</emu-val> if <var>P</var> has previously been observed as a non-configurable own property of the target, unless either:\n            <ol>\n              <li>\n                <var>P</var> is a writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>. A non-configurable writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> can be changed into a non-configurable non-writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>.\n              </li>\n              <li>\n                All attributes of <var>Desc</var> are the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s attributes.\n              </li>\n            </ol>\n          </li>\n          <li>\n            [[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>) must return <emu-val>false</emu-val> if target is non-extensible and <var>P</var> is a non-existent own property. That is, a non-extensible target object cannot be extended with new properties.\n          </li>\n        </ul>\n        <h2>[[HasProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[HasProperty]] must return <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Get]] ( <var>P</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target with value <var>V</var>, then [[Get]] must return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Get]] attribute is <emu-val>undefined</emu-val>, the [[Get]] operation must return <emu-val>undefined</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target, then [[Set]] must return <emu-val>false</emu-val> unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Set]] attribute is <emu-val>undefined</emu-val>, the [[Set]] operation must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Delete]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[Delete]] must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[OwnPropertyKeys]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must not contain any duplicate entries.\n          </li>\n          <li>\n            The Type of each element of the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is either String or Symbol.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain at least the keys of all non-configurable own properties that have previously been observed.\n          </li>\n          <li>\n            If the target is non-extensible, the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain only the keys of all own properties of the target that are observable using [[GetOwnProperty]].\n          </li>\n        </ul>\n        <h2>[[Call]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n          </li>\n        </ul>\n        <h2>[[Construct]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Object.\n          </li>\n          <li>\n            The target must also have a [[Call]] internal method.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-list-and-record-specification-type": {"num": "6.2.1", "title": "#sec-list-and-record-specification-type The List and Record Specification Types", "html": "<emu-clause id=\"sec-list-and-record-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-list-and-record-specification-type\">#sec-list-and-record-specification-type</span> The List and Record Specification Types</h1>\n      <p>The <dfn>List</dfn> type is used to explain the evaluation of argument lists (see <emu-xref href=\"#sec-argument-lists\"><a href=\"#sec-argument-lists\" class=\"excluded-xref\" excluded-id=\"sec-argument-lists\">#sec-argument-lists</a></emu-xref>) in <code>new</code> expressions, in function calls, and in other algorithms where a simple ordered list of values is needed. Values of the List type are simply ordered sequences of list elements containing the individual values. These sequences may be of any length. The elements of a list may be randomly accessed using 0-origin indices. For notational convenience an array-like syntax can be used to access List elements. For example, <var>arguments</var>[2] is shorthand for saying the 3<sup>rd</sup> element of the List <var>arguments</var>.</p>\n      <p>When an algorithm iterates over the elements of a List without specifying an order, the order used is the order of the elements in the List.</p>\n      <p>For notational convenience within this specification, a literal syntax can be used to express a new List value. For example, &#171; 1, 2 &#187; defines a List value that has two elements each of which is initialized to a specific value. A new empty List can be expressed as &#171; &#187;.</p>\n      <p>In this specification, the phrase \"the <dfn id=\"list-concatenation\">list-concatenation</dfn> of <var>A</var>, <var>B</var>, ...\" (where each argument is a possibly empty List) denotes a new List value whose elements are the concatenation of the elements (in order) of each of the arguments (in order).</p>\n      <p>The <dfn>Record</dfn> type is used to describe data aggregations within the algorithms of this specification. A Record type value consists of one or more named fields. The value of each field is either an ECMAScript value or an abstract value represented by a name associated with the Record type. Field names are always enclosed in double brackets, for example [[Value]]. When the name of a field is identified by a named alias (<emu-xref href=\"#sec-algorithm-conventions\"><a href=\"#sec-algorithm-conventions\" class=\"excluded-xref\" excluded-id=\"sec-algorithm-conventions\">#sec-algorithm-conventions</a></emu-xref>), the alias name is wrapped in angle brackets inside the double brackets, for example [[&lt;<var>fieldName</var>&gt;]].</p>\n      <p>For notational convenience within this specification, an object literal-like syntax can be used to express a Record value. For example, { [[Field1]]: 42, [[Field2]]: <emu-val>false</emu-val>, [[Field3]]: <emu-const>empty</emu-const> } defines a Record value that has three fields, each of which is initialized to a specific value. Field name order is not significant. Any fields that are not explicitly listed are considered to be absent.</p>\n      <p>In specification text and algorithms, dot notation may be used to refer to a specific field of a Record value. For example, if R is the record shown in the previous paragraph then R.[[Field2]] is shorthand for &#8220;the field of R named [[Field2]]&#8221;.</p>\n      <p>Schema for commonly used Record field combinations may be named, and that name may be used as a prefix to a literal Record value to identify the specific kind of aggregations that is being described. For example: PropertyDescriptor { [[Value]]: 42, [[Writable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p": {"num": "10.5.5", "title": "#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p [[GetOwnProperty]] ( P )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p\">#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p</span> [[GetOwnProperty]] ( <var>P</var> )</h1>\n      <p>The [[GetOwnProperty]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"getOwnPropertyDescriptor\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li></ol></li><li>Let <var>trapResultObj</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>trapResultObj</var>) is neither Object nor Undefined, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>trapResultObj</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>resultDesc</var> be ?&#160;<emu-xref aoid=\"ToPropertyDescriptor\"><a href=\"#sec-topropertydescriptor\">ToPropertyDescriptor</a></emu-xref>(<var>trapResultObj</var>).</li><li>Call <emu-xref aoid=\"CompletePropertyDescriptor\"><a href=\"#sec-completepropertydescriptor\">CompletePropertyDescriptor</a></emu-xref>(<var>resultDesc</var>).</li><li>Let <var>valid</var> be <emu-xref aoid=\"IsCompatiblePropertyDescriptor\"><a href=\"#sec-iscompatiblepropertydescriptor\">IsCompatiblePropertyDescriptor</a></emu-xref>(<var>extensibleTarget</var>, <var>resultDesc</var>, <var>targetDesc</var>).</li><li>If <var>valid</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>resultDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val> or <var>targetDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>resultDesc</var> has a [[Writable]] field and <var>resultDesc</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetDesc</var> has a [[Writable]] field.</li><li>If <var>targetDesc</var>.[[Writable]] is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <var>resultDesc</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[GetOwnProperty]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[GetOwnProperty]] must be either an Object or <emu-val>undefined</emu-val>.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if it exists as an own property of a non-extensible target object.\n          </li>\n          <li>\n            A property cannot be reported as existent, if it does not exist as an own property of the target object and the target object is not extensible.\n          </li>\n          <li>\n            A property cannot be reported as non-configurable, unless it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as both non-configurable and non-writable, unless it exists as a non-configurable, non-writable own property of the target object.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-iscompatiblepropertydescriptor": {"num": "10.1.6.2", "title": "#sec-iscompatiblepropertydescriptor IsCompatiblePropertyDescriptor ( Extensible, Desc, Current )", "html": "<emu-clause id=\"sec-iscompatiblepropertydescriptor\" aoid=\"IsCompatiblePropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iscompatiblepropertydescriptor\">#sec-iscompatiblepropertydescriptor</span> IsCompatiblePropertyDescriptor ( <var>Extensible</var>, <var>Desc</var>, <var>Current</var> )</h1>\n        <p>The abstract operation IsCompatiblePropertyDescriptor takes arguments <var>Extensible</var> (a Boolean), <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>), and <var>Current</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"ValidateAndApplyPropertyDescriptor\"><a href=\"#sec-validateandapplypropertydescriptor\">ValidateAndApplyPropertyDescriptor</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>\"\"</emu-val>, <var>Extensible</var>, <var>Desc</var>, <var>Current</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-validateandapplypropertydescriptor": {"num": "10.1.6.3", "title": "#sec-validateandapplypropertydescriptor ValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )", "html": "<emu-clause id=\"sec-validateandapplypropertydescriptor\" aoid=\"ValidateAndApplyPropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validateandapplypropertydescriptor\">#sec-validateandapplypropertydescriptor</span> ValidateAndApplyPropertyDescriptor ( <var>O</var>, <var>P</var>, <var>extensible</var>, <var>Desc</var>, <var>current</var> )</h1>\n        <p>The abstract operation ValidateAndApplyPropertyDescriptor takes arguments <var>O</var> (an Object or <emu-val>undefined</emu-val>), <var>P</var> (a property key), <var>extensible</var> (a Boolean), <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>), and <var>current</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or <emu-val>undefined</emu-val>). It returns a Boolean value which is <emu-val>true</emu-val> if and only if <var>Desc</var> can be applied as the property of an object with specified <var>extensibility</var> and current property <var>current</var> while upholding <emu-xref href=\"#sec-invariants-of-the-essential-internal-methods\"><a href=\"#sec-invariants-of-the-essential-internal-methods\">invariants</a></emu-xref>. When such application is possible and <var>O</var> is not <emu-val>undefined</emu-val>, it is performed for the property named <var>P</var> (which is created if necessary). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>current</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>extensible</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>O</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>Create an own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> named <var>P</var> of object <var>O</var> whose [[Get]], [[Set]], [[Enumerable]], and [[Configurable]] attribute values are described by <var>Desc</var>. If the value of an attribute field of <var>Desc</var> is absent, the attribute of the newly created property is set to its <emu-xref href=\"#table-object-property-attributes\"><a href=\"#table-object-property-attributes\">default value</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Create an own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> named <var>P</var> of object <var>O</var> whose [[Value]], [[Writable]], [[Enumerable]], and [[Configurable]] attribute values are described by <var>Desc</var>. If the value of an attribute field of <var>Desc</var> is absent, the attribute of the newly created property is set to its <emu-xref href=\"#table-object-property-attributes\"><a href=\"#table-object-property-attributes\">default value</a></emu-xref>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>current</var> is a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">fully populated Property Descriptor</a></emu-xref>.</li><li>If every field in <var>Desc</var> is absent, return <emu-val>true</emu-val>.</li><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>Let <var>immutableFields</var> be &#171; [[Configurable]], [[Enumerable]], [[Get]], [[Set]] &#187;.</li><li>If !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>current</var>) is <emu-val>true</emu-val> or <var>current</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>Append [[Value]] and [[Writable]] to <var>immutableFields</var>.</li></ol></li><li>For each field name <var>field</var> of <var>immutableFields</var>, do<ol><li>If <var>Desc</var>.[[&lt;<var>field</var>&gt;]] is present and either <var>current</var>.[[&lt;<var>field</var>&gt;]] is not present or !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[&lt;<var>field</var>&gt;]], <var>current</var>.[[&lt;<var>field</var>&gt;]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>O</var> is not <emu-val>undefined</emu-val>, then<ol><li>If !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>current</var>) is <emu-val>true</emu-val> and !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the property named <var>P</var> of object <var>O</var> with an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> having [[Configurable]] and [[Enumerable]] attributes as described by <var>current</var> and each other attribute set to its <emu-xref href=\"#table-object-property-attributes\"><a href=\"#table-object-property-attributes\">default value</a></emu-xref>.</li></ol></li><li>Else if !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>current</var>) is <emu-val>true</emu-val> and !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the property named <var>P</var> of object <var>O</var> with a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> having [[Configurable]] and [[Enumerable]] attributes as described by <var>current</var> and each other attribute set to its <emu-xref href=\"#table-object-property-attributes\"><a href=\"#table-object-property-attributes\">default value</a></emu-xref>.</li></ol></li><li>For each field of <var>Desc</var> that is present, set the corresponding attribute of the property named <var>P</var> of object <var>O</var> to the value of the field.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {"table-object-property-attributes": "Table 3", "table-additional-essential-internal-methods-of-function-objects": "Table 5"}}}