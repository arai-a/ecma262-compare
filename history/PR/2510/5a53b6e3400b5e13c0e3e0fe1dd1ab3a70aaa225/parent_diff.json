{"from": {"secList": ["sec-samevalue", "sec-samevaluezero", "sec-numeric-types"], "secData": {"sec-samevalue": {"num": "7.2.10", "title": "#sec-samevalue SameValue ( x, y )", "html": "<emu-clause id=\"sec-samevalue\" aoid=\"SameValue\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevalue\">#sec-samevalue</span> SameValue ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValue takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number or BigInt, then<ol><li>Return !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>)::sameValue(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This algorithm differs from the <emu-xref aoid=\"IsStrictlyEqual\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual</a></emu-xref> Algorithm in its treatment of signed zeroes and NaNs.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-samevaluezero": {"num": "7.2.11", "title": "#sec-samevaluezero SameValueZero ( x, y )", "html": "<emu-clause id=\"sec-samevaluezero\" aoid=\"SameValueZero\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevaluezero\">#sec-samevaluezero</span> SameValueZero ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValueZero takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number or BigInt, then<ol><li>Return !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>)::sameValueZero(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>SameValueZero differs from <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> only in its treatment of <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-numeric-types": {"num": "6.1.6", "title": "#sec-numeric-types Numeric Types", "html": "<emu-clause id=\"sec-numeric-types\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types\">#sec-numeric-types</span> Numeric Types</h1>\n      <p>ECMAScript has two built-in numeric types: Number and BigInt. In this specification, every numeric type <var>T</var> contains a multiplicative identity value denoted <var>T</var>::unit. The specification types also have the following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>, likewise denoted <var>T</var>::<i>op</i> for a given operation with specification name <i>op</i>. All argument types are <var>T</var>. The \"Result\" column shows the return type, along with an indication if it is possible for some invocations of the operation to return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-table id=\"table-numeric-type-ops\" caption=\"Numeric Type Operations\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-numeric-type-ops\">#table-numeric-type-ops</span>: Numeric Type Operations</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Invocation Synopsis\n            </th>\n            <th>\n              Example source\n            </th>\n            <th>\n              Invoked by the Evaluation semantics of ...\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unaryMinus(x)\n            </td>\n            <td>\n              <code>-x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unary-minus-operator\" title=\"\"><a href=\"#sec-unary-minus-operator\">Unary <code>-</code> Operator</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseNOT(x)\n            </td>\n            <td>\n              <code>~x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-bitwise-not-operator\" title=\"\"><a href=\"#sec-bitwise-not-operator\">Bitwise NOT Operator ( <code>~</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::exponentiate(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;**&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-exp-operator\" title=\"\"><a href=\"#sec-exp-operator\">Exponentiation Operator</a></emu-xref>\n              and <emu-xref href=\"#sec-math.pow\" title=\"\"><a href=\"#sec-math.pow\">Math.pow ( <var>base</var>, <var>exponent</var> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::multiply(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;*&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::divide(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;/&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::remainder(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;%&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::add(x,&#160;y)\n            </td>\n            <td>\n              <code>x ++</code><br><code>++ x</code><br><code>x&#160;+&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-increment-operator\" title=\"\"><a href=\"#sec-postfix-increment-operator\">Postfix Increment Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-increment-operator\" title=\"\"><a href=\"#sec-prefix-increment-operator\">Prefix Increment Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-addition-operator-plus\" title=\"\"><a href=\"#sec-addition-operator-plus\">The Addition Operator ( <code>+</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::subtract(x,&#160;y)\n            </td>\n            <td>\n              <code>x --</code><br><code>-- x</code><br><code>x&#160;-&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-decrement-operator\" title=\"\"><a href=\"#sec-postfix-decrement-operator\">Postfix Decrement Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-decrement-operator\" title=\"\"><a href=\"#sec-prefix-decrement-operator\">Prefix Decrement Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-subtraction-operator-minus\" title=\"\"><a href=\"#sec-subtraction-operator-minus\">The Subtraction Operator ( <code>-</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::leftShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&lt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-left-shift-operator\" title=\"\"><a href=\"#sec-left-shift-operator\">The Left Shift Operator ( <code>&lt;&lt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::signedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-signed-right-shift-operator\" title=\"\"><a href=\"#sec-signed-right-shift-operator\">The Signed Right Shift Operator ( <code>&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unsignedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unsigned-right-shift-operator\" title=\"\"><a href=\"#sec-unsigned-right-shift-operator\">The Unsigned Right Shift Operator ( <code>&gt;&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>TypeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::lessThan(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&#160;y</code><br><code>x&#160;&gt;&#160;y</code><br><code>x&#160;&lt;=&#160;y</code><br><code>x&#160;&gt;=&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-relational-operators\" title=\"\"><a href=\"#sec-relational-operators\">Relational Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-islessthan\" title=\"\"><a href=\"#sec-islessthan\">IsLessThan ( <var>x</var>, <var>y</var>, <var>LeftFirst</var> )</a></emu-xref>\n            </td>\n            <td>\n              Boolean or <emu-val>undefined</emu-val> (for unordered inputs)\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::equal(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;==&#160;y</code><br><code>x&#160;!=&#160;y</code><br><code>x&#160;===&#160;y</code><br><code>x&#160;!==&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-equality-operators\" title=\"\"><a href=\"#sec-equality-operators\">Equality Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-isstrictlyequal\" title=\"\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual ( <var>x</var>, <var>y</var> )</a></emu-xref>\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValue(x,&#160;y)\n            </td>\n            <td>\n            </td>\n            <td>\n              Object internal methods,\n              via <emu-xref href=\"#sec-samevalue\" title=\"\"><a href=\"#sec-samevalue\">SameValue ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test exact value equality\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValueZero(x,&#160;y)\n            </td>\n            <td>\n            </td>\n            <td>\n              Array, Map, and Set methods,\n              via <emu-xref href=\"#sec-samevaluezero\" title=\"\"><a href=\"#sec-samevaluezero\">SameValueZero ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test value equality ignoring differences among members of the zero cohort (i.e., <emu-val>-0</emu-val><sub>&#120125;</sub> and <emu-val>+0</emu-val><sub>&#120125;</sub>)\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseAND(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&amp;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseXOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;^&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;|&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::toString(x)\n            </td>\n            <td>\n              <code>String(x)</code>\n            </td>\n            <td>\n              Many expressions and built-in functions, via <emu-xref href=\"#sec-tostring\" title=\"\"><a href=\"#sec-tostring\">ToString ( <var>argument</var> )</a></emu-xref>\n            </td>\n            <td>\n              String\n            </td>\n\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The <var>T</var>::unit value and <var>T</var>::<var>op</var> operations are not a part of the ECMAScript language; they are defined here solely to aid the specification of the semantics of the ECMAScript language. Other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are defined throughout this specification.</p>\n      <p>Because the numeric types are in general not convertible without loss of precision or truncation, the ECMAScript language provides no implicit conversion among these types. Programmers must explicitly call <code>Number</code> and <code>BigInt</code> functions to convert among types when calling a function which requires another type.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The first and subsequent editions of ECMAScript have provided, for certain operators, implicit numeric conversions that could lose precision or truncate. These legacy implicit conversions are maintained for backward compatibility, but not provided for BigInt in order to minimize opportunity for programmer error, and to leave open the option of generalized <em>value types</em> in a future edition.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ecmascript-language-types-number-type\"><h1><span class=\"secnum\">6.1.6.1</span>#sec-ecmascript-language-types-number-type The Number Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-bigint-type\"><h1><span class=\"secnum\">6.1.6.2</span>#sec-ecmascript-language-types-bigint-type The BigInt Type</h1>...</div></emu-clause>\n\n    "}}, "figData": {"table-numeric-type-ops": "Table 2"}}, "to": {"secList": ["sec-samevalue", "sec-samevaluezero", "sec-numeric-types"], "secData": {"sec-samevalue": {"num": "7.2.10", "title": "#sec-samevalue SameValue ( x, y )", "html": "<emu-clause id=\"sec-samevalue\" aoid=\"SameValue\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevalue\">#sec-samevalue</span> SameValue ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValue takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean indicating whether or not the two arguments are the same value. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number or BigInt, then<ol><li>Return !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>)::sameValue(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This algorithm differs from the <emu-xref aoid=\"IsStrictlyEqual\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual</a></emu-xref> Algorithm by treating all <emu-val>NaN</emu-val> values as equivalent and by differentiating <emu-val>+0</emu-val><sub>&#120125;</sub> from <emu-val>-0</emu-val><sub>&#120125;</sub>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-samevaluezero": {"num": "7.2.11", "title": "#sec-samevaluezero SameValueZero ( x, y )", "html": "<emu-clause id=\"sec-samevaluezero\" aoid=\"SameValueZero\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevaluezero\">#sec-samevaluezero</span> SameValueZero ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValueZero takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean indicating whether or not the two arguments are the same value (ignoring the difference between <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number or BigInt, then<ol><li>Return !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>)::sameValueZero(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>SameValueZero differs from <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> only in that it treats <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub> as equivalent.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-numeric-types": {"num": "6.1.6", "title": "#sec-numeric-types Numeric Types", "html": "<emu-clause id=\"sec-numeric-types\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types\">#sec-numeric-types</span> Numeric Types</h1>\n      <p>ECMAScript has two built-in numeric types: Number and BigInt. In this specification, every numeric type <var>T</var> contains a multiplicative identity value denoted <var>T</var>::unit. The specification types also have the following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>, likewise denoted <var>T</var>::<i>op</i> for a given operation with specification name <i>op</i>. All argument types are <var>T</var>. The \"Result\" column shows the return type, along with an indication if it is possible for some invocations of the operation to return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-table id=\"table-numeric-type-ops\" caption=\"Numeric Type Operations\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-numeric-type-ops\">#table-numeric-type-ops</span>: Numeric Type Operations</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Invocation Synopsis\n            </th>\n            <th>\n              Example source\n            </th>\n            <th>\n              Invoked by the Evaluation semantics of ...\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unaryMinus(x)\n            </td>\n            <td>\n              <code>-x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unary-minus-operator\" title=\"\"><a href=\"#sec-unary-minus-operator\">Unary <code>-</code> Operator</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseNOT(x)\n            </td>\n            <td>\n              <code>~x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-bitwise-not-operator\" title=\"\"><a href=\"#sec-bitwise-not-operator\">Bitwise NOT Operator ( <code>~</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::exponentiate(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;**&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-exp-operator\" title=\"\"><a href=\"#sec-exp-operator\">Exponentiation Operator</a></emu-xref>\n              and <emu-xref href=\"#sec-math.pow\" title=\"\"><a href=\"#sec-math.pow\">Math.pow ( <var>base</var>, <var>exponent</var> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::multiply(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;*&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::divide(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;/&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::remainder(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;%&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::add(x,&#160;y)\n            </td>\n            <td>\n              <code>x ++</code><br><code>++ x</code><br><code>x&#160;+&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-increment-operator\" title=\"\"><a href=\"#sec-postfix-increment-operator\">Postfix Increment Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-increment-operator\" title=\"\"><a href=\"#sec-prefix-increment-operator\">Prefix Increment Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-addition-operator-plus\" title=\"\"><a href=\"#sec-addition-operator-plus\">The Addition Operator ( <code>+</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::subtract(x,&#160;y)\n            </td>\n            <td>\n              <code>x --</code><br><code>-- x</code><br><code>x&#160;-&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-decrement-operator\" title=\"\"><a href=\"#sec-postfix-decrement-operator\">Postfix Decrement Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-decrement-operator\" title=\"\"><a href=\"#sec-prefix-decrement-operator\">Prefix Decrement Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-subtraction-operator-minus\" title=\"\"><a href=\"#sec-subtraction-operator-minus\">The Subtraction Operator ( <code>-</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::leftShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&lt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-left-shift-operator\" title=\"\"><a href=\"#sec-left-shift-operator\">The Left Shift Operator ( <code>&lt;&lt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::signedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-signed-right-shift-operator\" title=\"\"><a href=\"#sec-signed-right-shift-operator\">The Signed Right Shift Operator ( <code>&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unsignedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unsigned-right-shift-operator\" title=\"\"><a href=\"#sec-unsigned-right-shift-operator\">The Unsigned Right Shift Operator ( <code>&gt;&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>TypeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::lessThan(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&#160;y</code><br><code>x&#160;&gt;&#160;y</code><br><code>x&#160;&lt;=&#160;y</code><br><code>x&#160;&gt;=&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-relational-operators\" title=\"\"><a href=\"#sec-relational-operators\">Relational Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-islessthan\" title=\"\"><a href=\"#sec-islessthan\">IsLessThan ( <var>x</var>, <var>y</var>, <var>LeftFirst</var> )</a></emu-xref>\n            </td>\n            <td>\n              Boolean or <emu-val>undefined</emu-val> (for unordered inputs)\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::equal(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;==&#160;y</code><br><code>x&#160;!=&#160;y</code><br><code>x&#160;===&#160;y</code><br><code>x&#160;!==&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-equality-operators\" title=\"\"><a href=\"#sec-equality-operators\">Equality Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-isstrictlyequal\" title=\"\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual ( <var>x</var>, <var>y</var> )</a></emu-xref>\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValue(x,&#160;y)\n            </td>\n            <td>\n              <code>Object.is(x, y)</code>\n            </td>\n            <td>\n              Object internal methods,\n              via <emu-xref href=\"#sec-samevalue\" title=\"\"><a href=\"#sec-samevalue\">SameValue ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test exact value equality\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValueZero(x,&#160;y)\n            </td>\n            <td>\n              <code>[x].includes(y)</code>\n            </td>\n            <td>\n              Array, Map, and Set methods,\n              via <emu-xref href=\"#sec-samevaluezero\" title=\"\"><a href=\"#sec-samevaluezero\">SameValueZero ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test value equality ignoring differences between Numbers in the zero cohort (i.e., <emu-val>-0</emu-val><sub>&#120125;</sub> and <emu-val>+0</emu-val><sub>&#120125;</sub>)\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseAND(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&amp;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseXOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;^&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;|&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::toString(x)\n            </td>\n            <td>\n              <code>String(x)</code>\n            </td>\n            <td>\n              Many expressions and built-in functions, via <emu-xref href=\"#sec-tostring\" title=\"\"><a href=\"#sec-tostring\">ToString ( <var>argument</var> )</a></emu-xref>\n            </td>\n            <td>\n              String\n            </td>\n\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The <var>T</var>::unit value and <var>T</var>::<var>op</var> operations are not a part of the ECMAScript language; they are defined here solely to aid the specification of the semantics of the ECMAScript language. Other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are defined throughout this specification.</p>\n      <p>Because the numeric types are in general not convertible without loss of precision or truncation, the ECMAScript language provides no implicit conversion among these types. Programmers must explicitly call <code>Number</code> and <code>BigInt</code> functions to convert among types when calling a function which requires another type.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The first and subsequent editions of ECMAScript have provided, for certain operators, implicit numeric conversions that could lose precision or truncate. These legacy implicit conversions are maintained for backward compatibility, but not provided for BigInt in order to minimize opportunity for programmer error, and to leave open the option of generalized <em>value types</em> in a future edition.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ecmascript-language-types-number-type\"><h1><span class=\"secnum\">6.1.6.1</span>#sec-ecmascript-language-types-number-type The Number Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-bigint-type\"><h1><span class=\"secnum\">6.1.6.2</span>#sec-ecmascript-language-types-bigint-type The BigInt Type</h1>...</div></emu-clause>\n\n    "}}, "figData": {"table-numeric-type-ops": "Table 2"}}}