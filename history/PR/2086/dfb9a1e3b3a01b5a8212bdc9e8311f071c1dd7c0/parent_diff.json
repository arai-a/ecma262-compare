{"from": {"secList": ["sec-triggerpromisereactions", "sec-performpromisethen", "sec-promise-resolve-functions", "sec-jobs", "sec-newpromisereactionjob", "sec-promisereaction-records", "sec-newpromiseresolvethenablejob"], "secData": {"sec-triggerpromisereactions": {"num": "25.6.1.8", "title": "#sec-triggerpromisereactions TriggerPromiseReactions ( reactions, argument )", "html": "<emu-clause id=\"sec-triggerpromisereactions\" aoid=\"TriggerPromiseReactions\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-triggerpromisereactions\">#sec-triggerpromisereactions</span> TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )</h1>\n        <p>The abstract operation TriggerPromiseReactions takes arguments <var>reactions</var> (a collection of PromiseReaction Records) and <var>argument</var>. It enqueues a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> for each record in <var>reactions</var>. Each such <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> processes the [[Type]] and [[Handler]] of the PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, and if the [[Handler]] is a function, calls it passing the given argument. If the [[Handler]] is <emu-val>undefined</emu-val>, the behaviour is determined by the [[Type]]. It performs the following steps when called:</p>\n        <emu-alg><ol><li>For each <var>reaction</var> in <var>reactions</var>, in original insertion order, do<ol><li>Let <var>job</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>reaction</var>, <var>argument</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>job</var>.[[Job]], <var>job</var>.[[Realm]]).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-performpromisethen": {"num": "25.6.5.4.1", "title": "#sec-performpromisethen PerformPromiseThen ( promise, onFulfilled, onRejected [ , resultCapability ] )", "html": "<emu-clause id=\"sec-performpromisethen\" aoid=\"PerformPromiseThen\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performpromisethen\">#sec-performpromisethen</span> PerformPromiseThen ( <var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var> [ , <var>resultCapability</var> ] )</h1>\n          <p>The abstract operation PerformPromiseThen takes arguments <var>promise</var>, <var>onFulfilled</var>, and <var>onRejected</var> and optional argument <var>resultCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>). It performs the &#8220;then&#8221; operation on <var>promise</var> using <var>onFulfilled</var> and <var>onRejected</var> as its settlement actions. If <var>resultCapability</var> is passed, the result is stored by updating <var>resultCapability</var>'s promise. If it is not passed, then PerformPromiseThen is being called by a specification-internal operation where the result does not matter. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPromise\"><a href=\"#sec-ispromise\">IsPromise</a></emu-xref>(<var>promise</var>) is <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is not present, then<ol><li>Set <var>resultCapability</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onFulfilled</var>) is <emu-val>false</emu-val>, then<ol><li>Set <var>onFulfilled</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onRejected</var>) is <emu-val>false</emu-val>, then<ol><li>Set <var>onRejected</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>fulfillReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <emu-const>Fulfill</emu-const>, [[Handler]]: <var>onFulfilled</var> }.</li><li>Let <var>rejectReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <emu-const>Reject</emu-const>, [[Handler]]: <var>onRejected</var> }.</li><li>If <var>promise</var>.[[PromiseState]] is <emu-const>pending</emu-const>, then<ol><li>Append <var>fulfillReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseFulfillReactions]].</li><li>Append <var>rejectReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseRejectReactions]].</li></ol></li><li>Else if <var>promise</var>.[[PromiseState]] is <emu-const>fulfilled</emu-const>, then<ol><li>Let <var>value</var> be <var>promise</var>.[[PromiseResult]].</li><li>Let <var>fulfillJob</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>fulfillReaction</var>, <var>value</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>fulfillJob</var>.[[Job]], <var>fulfillJob</var>.[[Realm]]).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>promise</var>.[[PromiseState]] is <emu-const>rejected</emu-const>.</li><li>Let <var>reason</var> be <var>promise</var>.[[PromiseResult]].</li><li>If <var>promise</var>.[[PromiseIsHandled]] is <emu-val>false</emu-val>, perform <emu-xref aoid=\"HostPromiseRejectionTracker\"><a href=\"#sec-host-promise-rejection-tracker\">HostPromiseRejectionTracker</a></emu-xref>(<var>promise</var>, <emu-val>\"handle\"</emu-val>).</li><li>Let <var>rejectJob</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>rejectReaction</var>, <var>reason</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>rejectJob</var>.[[Job]], <var>rejectJob</var>.[[Realm]]).</li></ol></li><li>Set <var>promise</var>.[[PromiseIsHandled]] to <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is <emu-val>undefined</emu-val>, then<ol><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li>Return <var>resultCapability</var>.[[Promise]].</li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-promise-resolve-functions": {"num": "25.6.1.3.2", "title": "#sec-promise-resolve-functions Promise Resolve Functions", "html": "<emu-clause id=\"sec-promise-resolve-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-resolve-functions\">#sec-promise-resolve-functions</span> Promise Resolve Functions</h1>\n          <p>A promise resolve function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal slots.</p>\n          <p>When a promise resolve function is called with argument <var>resolution</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> has a [[Promise]] internal slot whose value is an Object.</li><li>Let <var>promise</var> be <var>F</var>.[[Promise]].</li><li>Let <var>alreadyResolved</var> be <var>F</var>.[[AlreadyResolved]].</li><li>If <var>alreadyResolved</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>alreadyResolved</var>.[[Value]] to <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>resolution</var>, <var>promise</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>selfResolutionError</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>Return <emu-xref aoid=\"RejectPromise\"><a href=\"#sec-rejectpromise\">RejectPromise</a></emu-xref>(<var>promise</var>, <var>selfResolutionError</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>resolution</var>) is not Object, then<ol><li>Return <emu-xref aoid=\"FulfillPromise\"><a href=\"#sec-fulfillpromise\">FulfillPromise</a></emu-xref>(<var>promise</var>, <var>resolution</var>).</li></ol></li><li>Let <var>then</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>resolution</var>, <emu-val>\"then\"</emu-val>).</li><li>If <var>then</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Return <emu-xref aoid=\"RejectPromise\"><a href=\"#sec-rejectpromise\">RejectPromise</a></emu-xref>(<var>promise</var>, <var>then</var>.[[Value]]).</li></ol></li><li>Let <var>thenAction</var> be <var>then</var>.[[Value]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>thenAction</var>) is <emu-val>false</emu-val>, then<ol><li>Return <emu-xref aoid=\"FulfillPromise\"><a href=\"#sec-fulfillpromise\">FulfillPromise</a></emu-xref>(<var>promise</var>, <var>resolution</var>).</li></ol></li><li>Let <var>job</var> be <emu-xref aoid=\"NewPromiseResolveThenableJob\"><a href=\"#sec-newpromiseresolvethenablejob\">NewPromiseResolveThenableJob</a></emu-xref>(<var>promise</var>, <var>resolution</var>, <var>thenAction</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>job</var>.[[Job]], <var>job</var>.[[Realm]]).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a promise resolve function is 1.</p>\n        </emu-clause>\n      "}, "sec-jobs": {"num": "8.4", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\">\n    <span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript host environments. This specification describes the host hook <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; host environments may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must:\n        <ol>\n          <li>Push an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li>\n          <li>Perform any implementation-defined preparation steps.</li>\n          <li>Call the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any implementation-defined cleanup steps.</li>\n          <li>Pop the previously-pushed <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a normal completion, implementing its own handling of errors.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>Host environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">8.4.1</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}, "sec-newpromisereactionjob": {"num": "25.6.2.1", "title": "#sec-newpromisereactionjob NewPromiseReactionJob ( reaction, argument )", "html": "<emu-clause id=\"sec-newpromisereactionjob\" aoid=\"NewPromiseReactionJob\" oldids=\"sec-promisereactionjob\">\n        <span id=\"sec-promisereactionjob\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromisereactionjob\">#sec-newpromisereactionjob</span> NewPromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</h1>\n        <p>The abstract operation NewPromiseReactionJob takes arguments <var>reaction</var> and <var>argument</var>. It returns a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>reaction</var> and <var>argument</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>reaction</var> is a PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>reaction</var>.[[Capability]].</li><li>Let <var>type</var> be <var>reaction</var>.[[Type]].</li><li>Let <var>handler</var> be <var>reaction</var>.[[Handler]].</li><li>If <var>handler</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>type</var> is <emu-const>Fulfill</emu-const>, let <var>handlerResult</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>argument</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>type</var> is <emu-const>Reject</emu-const>.</li><li>Let <var>handlerResult</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>argument</var>).</li></ol></li></ol></li><li>Else, let <var>handlerResult</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>handler</var>, <emu-val>undefined</emu-val>, &#171; <var>argument</var> &#187;).</li><li>If <var>promiseCapability</var> is <emu-val>undefined</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>handlerResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>promiseCapability</var> is a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>.</li><li>If <var>handlerResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>handlerRealm</var> be <emu-val>null</emu-val>.</li><li>If <var>reaction</var>.[[Handler]] is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>getHandlerRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>reaction</var>.[[Handler]]).</li><li>If <var>getHandlerRealmResult</var> is a normal completion, then set <var>handlerRealm</var> to <var>getHandlerRealmResult</var>.[[Value]].</li></ol></li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>handlerRealm</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-promisereaction-records": {"num": "25.6.1.2", "title": "#sec-promisereaction-records PromiseReaction Records", "html": "<emu-clause id=\"sec-promisereaction-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promisereaction-records\">#sec-promisereaction-records</span> PromiseReaction Records</h1>\n        <p>The PromiseReaction is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> value used to store information about how a promise should react when it becomes resolved or rejected with a given value. PromiseReaction records are created by the <emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref> abstract operation, and are used by the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> returned by <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>.</p>\n        <p>PromiseReaction records have the fields listed in <emu-xref href=\"#table-58\"><a href=\"#table-58\" class=\"excluded-xref\" excluded-id=\"table-58\">#table-58</a></emu-xref>.</p>\n        <emu-table id=\"table-58\" caption=\"PromiseReaction Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-58\">#table-58</span>: PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Capability]]\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>, or <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The capabilities of the promise for which this record provides a reaction handler.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Type]]\n              </td>\n              <td>\n                <emu-const>Fulfill</emu-const> | <emu-const>Reject</emu-const>\n              </td>\n              <td>\n                The [[Type]] is used when [[Handler]] is <emu-val>undefined</emu-val> to allow for behaviour specific to the settlement type.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Handler]]\n              </td>\n              <td>\n                A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> or <emu-val>undefined</emu-val>.\n              </td>\n              <td>\n                The function that should be applied to the incoming value, and whose return value will govern what happens to the derived promise. If [[Handler]] is <emu-val>undefined</emu-val>, a function that depends on the value of [[Type]] will be used instead.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-newpromiseresolvethenablejob": {"num": "25.6.2.2", "title": "#sec-newpromiseresolvethenablejob NewPromiseResolveThenableJob ( promiseToResolve, thenable, then )", "html": "<emu-clause id=\"sec-newpromiseresolvethenablejob\" aoid=\"NewPromiseResolveThenableJob\" oldids=\"sec-promiseresolvethenablejob\">\n        <span id=\"sec-promiseresolvethenablejob\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromiseresolvethenablejob\">#sec-newpromiseresolvethenablejob</span> NewPromiseResolveThenableJob ( <var>promiseToResolve</var>, <var>thenable</var>, <var>then</var> )</h1>\n        <p>The abstract operation NewPromiseResolveThenableJob takes arguments <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var> and performs the following steps when called:<ol><li>Let <var>resolvingFunctions</var> be <emu-xref aoid=\"CreateResolvingFunctions\"><a href=\"#sec-createresolvingfunctions\">CreateResolvingFunctions</a></emu-xref>(<var>promiseToResolve</var>).</li><li>Let <var>thenCallResult</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>then</var>, <var>thenable</var>, &#171; <var>resolvingFunctions</var>.[[Resolve]], <var>resolvingFunctions</var>.[[Reject]] &#187;).</li><li>If <var>thenCallResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resolvingFunctions</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>thenCallResult</var>.[[Value]] &#187;).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>thenCallResult</var>).</li></ol></li><li>Let <var>getThenRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>then</var>).</li><li>If <var>getThenRealmResult</var> is a normal completion, then let <var>thenRealm</var> be <var>getThenRealmResult</var>.[[Value]].</li><li>Otherwise, let <var>thenRealm</var> be <emu-val>null</emu-val>.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>thenRealm</var> }.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> uses the supplied thenable and its <code>then</code> method to resolve the given promise. This process must take place as a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> to ensure that the evaluation of the <code>then</code> method occurs after evaluation of any surrounding code has completed.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {"table-5": "Table 6", "table-58": "Table 77"}}, "to": {"secList": ["sec-triggerpromisereactions", "sec-performpromisethen", "sec-promise-resolve-functions", "sec-jobs", "sec-newpromisereactionjob", "sec-promisereaction-records", "sec-newpromiseresolvethenablejob"], "secData": {"sec-triggerpromisereactions": {"num": "25.6.1.8", "title": "#sec-triggerpromisereactions TriggerPromiseReactions ( reactions, argument )", "html": "<emu-clause id=\"sec-triggerpromisereactions\" aoid=\"TriggerPromiseReactions\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-triggerpromisereactions\">#sec-triggerpromisereactions</span> TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )</h1>\n        <p>The abstract operation TriggerPromiseReactions takes arguments <var>reactions</var> (a collection of PromiseReaction Records) and <var>argument</var>. It enqueues a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> for each record in <var>reactions</var>. Each such <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> processes the [[Type]] and [[Handler]] of the PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, and if the [[Handler]] is not <emu-const>empty</emu-const>, calls it passing the given argument. If the [[Handler]] is <emu-const>empty</emu-const>, the behaviour is determined by the [[Type]]. It performs the following steps when called:</p>\n        <emu-alg><ol><li>For each <var>reaction</var> in <var>reactions</var>, in original insertion order, do<ol><li>Let <var>job</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>reaction</var>, <var>argument</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>job</var>.[[Job]], <var>job</var>.[[Realm]]).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-performpromisethen": {"num": "25.6.5.4.1", "title": "#sec-performpromisethen PerformPromiseThen ( promise, onFulfilled, onRejected [ , resultCapability ] )", "html": "<emu-clause id=\"sec-performpromisethen\" aoid=\"PerformPromiseThen\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performpromisethen\">#sec-performpromisethen</span> PerformPromiseThen ( <var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var> [ , <var>resultCapability</var> ] )</h1>\n          <p>The abstract operation PerformPromiseThen takes arguments <var>promise</var>, <var>onFulfilled</var>, and <var>onRejected</var> and optional argument <var>resultCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>). It performs the &#8220;then&#8221; operation on <var>promise</var> using <var>onFulfilled</var> and <var>onRejected</var> as its settlement actions. If <var>resultCapability</var> is passed, the result is stored by updating <var>resultCapability</var>'s promise. If it is not passed, then PerformPromiseThen is being called by a specification-internal operation where the result does not matter. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPromise\"><a href=\"#sec-ispromise\">IsPromise</a></emu-xref>(<var>promise</var>) is <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is not present, then<ol><li>Set <var>resultCapability</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onFulfilled</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>onFulfilledJobCallback</var> be <emu-const>empty</emu-const>.</li></ol></li><li>Else,<ol><li>Let <var>onFulfilledJobCallback</var> be <emu-xref aoid=\"HostMakeJobCallback\"><a href=\"#sec-hostmakejobcallback\">HostMakeJobCallback</a></emu-xref>(<var>onFulfilled</var>).</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onRejected</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>onRejectedJobCallback</var> be <emu-const>empty</emu-const>.</li></ol></li><li>Else,<ol><li>Let <var>onRejectedJobCallback</var> be <emu-xref aoid=\"HostMakeJobCallback\"><a href=\"#sec-hostmakejobcallback\">HostMakeJobCallback</a></emu-xref>(<var>onRejected</var>).</li></ol></li><li>Let <var>fulfillReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <emu-const>Fulfill</emu-const>, [[Handler]]: <var>onFulfilledJobCallback</var> }.</li><li>Let <var>rejectReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <emu-const>Reject</emu-const>, [[Handler]]: <var>onRejectedJobCallback</var> }.</li><li>If <var>promise</var>.[[PromiseState]] is <emu-const>pending</emu-const>, then<ol><li>Append <var>fulfillReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseFulfillReactions]].</li><li>Append <var>rejectReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseRejectReactions]].</li></ol></li><li>Else if <var>promise</var>.[[PromiseState]] is <emu-const>fulfilled</emu-const>, then<ol><li>Let <var>value</var> be <var>promise</var>.[[PromiseResult]].</li><li>Let <var>fulfillJob</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>fulfillReaction</var>, <var>value</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>fulfillJob</var>.[[Job]], <var>fulfillJob</var>.[[Realm]]).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>promise</var>.[[PromiseState]] is <emu-const>rejected</emu-const>.</li><li>Let <var>reason</var> be <var>promise</var>.[[PromiseResult]].</li><li>If <var>promise</var>.[[PromiseIsHandled]] is <emu-val>false</emu-val>, perform <emu-xref aoid=\"HostPromiseRejectionTracker\"><a href=\"#sec-host-promise-rejection-tracker\">HostPromiseRejectionTracker</a></emu-xref>(<var>promise</var>, <emu-val>\"handle\"</emu-val>).</li><li>Let <var>rejectJob</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>rejectReaction</var>, <var>reason</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>rejectJob</var>.[[Job]], <var>rejectJob</var>.[[Realm]]).</li></ol></li><li>Set <var>promise</var>.[[PromiseIsHandled]] to <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is <emu-val>undefined</emu-val>, then<ol><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li>Return <var>resultCapability</var>.[[Promise]].</li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-promise-resolve-functions": {"num": "25.6.1.3.2", "title": "#sec-promise-resolve-functions Promise Resolve Functions", "html": "<emu-clause id=\"sec-promise-resolve-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-resolve-functions\">#sec-promise-resolve-functions</span> Promise Resolve Functions</h1>\n          <p>A promise resolve function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal slots.</p>\n          <p>When a promise resolve function is called with argument <var>resolution</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> has a [[Promise]] internal slot whose value is an Object.</li><li>Let <var>promise</var> be <var>F</var>.[[Promise]].</li><li>Let <var>alreadyResolved</var> be <var>F</var>.[[AlreadyResolved]].</li><li>If <var>alreadyResolved</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>alreadyResolved</var>.[[Value]] to <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>resolution</var>, <var>promise</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>selfResolutionError</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>Return <emu-xref aoid=\"RejectPromise\"><a href=\"#sec-rejectpromise\">RejectPromise</a></emu-xref>(<var>promise</var>, <var>selfResolutionError</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>resolution</var>) is not Object, then<ol><li>Return <emu-xref aoid=\"FulfillPromise\"><a href=\"#sec-fulfillpromise\">FulfillPromise</a></emu-xref>(<var>promise</var>, <var>resolution</var>).</li></ol></li><li>Let <var>then</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>resolution</var>, <emu-val>\"then\"</emu-val>).</li><li>If <var>then</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Return <emu-xref aoid=\"RejectPromise\"><a href=\"#sec-rejectpromise\">RejectPromise</a></emu-xref>(<var>promise</var>, <var>then</var>.[[Value]]).</li></ol></li><li>Let <var>thenAction</var> be <var>then</var>.[[Value]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>thenAction</var>) is <emu-val>false</emu-val>, then<ol><li>Return <emu-xref aoid=\"FulfillPromise\"><a href=\"#sec-fulfillpromise\">FulfillPromise</a></emu-xref>(<var>promise</var>, <var>resolution</var>).</li></ol></li><li>Let <var>thenJobCallback</var> be <emu-xref aoid=\"HostMakeJobCallback\"><a href=\"#sec-hostmakejobcallback\">HostMakeJobCallback</a></emu-xref>(<var>thenAction</var>).</li><li>Let <var>job</var> be <emu-xref aoid=\"NewPromiseResolveThenableJob\"><a href=\"#sec-newpromiseresolvethenablejob\">NewPromiseResolveThenableJob</a></emu-xref>(<var>promise</var>, <var>resolution</var>, <var>thenJobCallback</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>job</var>.[[Job]], <var>job</var>.[[Realm]]).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a promise resolve function is 1.</p>\n        </emu-clause>\n      "}, "sec-jobs": {"num": "8.4", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\">\n    <span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript host environments. This specification describes the host hook <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; host environments may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must:\n        <ol>\n          <li>Push an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li>\n          <li>Perform any implementation-defined preparation steps.</li>\n          <li>Call the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any implementation-defined cleanup steps.</li>\n          <li>Pop the previously-pushed <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a normal completion, implementing its own handling of errors.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>Host environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-jobcallback-records\"><h1><span class=\"secnum\">8.4.1</span>#sec-jobcallback-records JobCallback Records</h1>...</div><div id=\"excluded-sec-hostmakejobcallback\"><h1><span class=\"secnum\">8.4.2</span>#sec-hostmakejobcallback HostMakeJobCallback ( callable )</h1>...</div><div id=\"excluded-sec-hostcalljobcallback\"><h1><span class=\"secnum\">8.4.3</span>#sec-hostcalljobcallback HostCallJobCallback ( jobCallback, V [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">8.4.4</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}, "sec-newpromisereactionjob": {"num": "25.6.2.1", "title": "#sec-newpromisereactionjob NewPromiseReactionJob ( reaction, argument )", "html": "<emu-clause id=\"sec-newpromisereactionjob\" aoid=\"NewPromiseReactionJob\" oldids=\"sec-promisereactionjob\">\n        <span id=\"sec-promisereactionjob\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromisereactionjob\">#sec-newpromisereactionjob</span> NewPromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</h1>\n        <p>The abstract operation NewPromiseReactionJob takes arguments <var>reaction</var> and <var>argument</var>. It returns a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>reaction</var> and <var>argument</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>reaction</var> is a PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>reaction</var>.[[Capability]].</li><li>Let <var>type</var> be <var>reaction</var>.[[Type]].</li><li>Let <var>handler</var> be <var>reaction</var>.[[Handler]].</li><li>If <var>handler</var> is <emu-const>empty</emu-const>, then<ol><li>If <var>type</var> is <emu-const>Fulfill</emu-const>, let <var>handlerResult</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>argument</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>type</var> is <emu-const>Reject</emu-const>.</li><li>Let <var>handlerResult</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>argument</var>).</li></ol></li></ol></li><li>Else, let <var>handlerResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>handler</var>, <emu-val>undefined</emu-val>, &#171; <var>argument</var> &#187;).</li><li>If <var>promiseCapability</var> is <emu-val>undefined</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>handlerResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>promiseCapability</var> is a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>.</li><li>If <var>handlerResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>handlerRealm</var> be <emu-val>null</emu-val>.</li><li>If <var>reaction</var>.[[Handler]] is not <emu-const>empty</emu-const>, then<ol><li>Let <var>getHandlerRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>reaction</var>.[[Handler]].[[Callback]]).</li><li>If <var>getHandlerRealmResult</var> is a normal completion, then set <var>handlerRealm</var> to <var>getHandlerRealmResult</var>.[[Value]].</li></ol></li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>handlerRealm</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-promisereaction-records": {"num": "25.6.1.2", "title": "#sec-promisereaction-records PromiseReaction Records", "html": "<emu-clause id=\"sec-promisereaction-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promisereaction-records\">#sec-promisereaction-records</span> PromiseReaction Records</h1>\n        <p>The PromiseReaction is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> value used to store information about how a promise should react when it becomes resolved or rejected with a given value. PromiseReaction records are created by the <emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref> abstract operation, and are used by the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> returned by <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>.</p>\n        <p>PromiseReaction records have the fields listed in <emu-xref href=\"#table-58\"><a href=\"#table-58\" class=\"excluded-xref\" excluded-id=\"table-58\">#table-58</a></emu-xref>.</p>\n        <emu-table id=\"table-58\" caption=\"PromiseReaction Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-58\">#table-58</span>: PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Capability]]\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>, or <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The capabilities of the promise for which this record provides a reaction handler.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Type]]\n              </td>\n              <td>\n                <emu-const>Fulfill</emu-const> | <emu-const>Reject</emu-const>\n              </td>\n              <td>\n                The [[Type]] is used when [[Handler]] is <emu-const>empty</emu-const> to allow for behaviour specific to the settlement type.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Handler]]\n              </td>\n              <td>\n                A JobCallback <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> | <emu-const>empty</emu-const>.\n              </td>\n              <td>\n                The function that should be applied to the incoming value, and whose return value will govern what happens to the derived promise. If [[Handler]] is <emu-const>empty</emu-const>, a function that depends on the value of [[Type]] will be used instead.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-newpromiseresolvethenablejob": {"num": "25.6.2.2", "title": "#sec-newpromiseresolvethenablejob NewPromiseResolveThenableJob ( promiseToResolve, thenable, then )", "html": "<emu-clause id=\"sec-newpromiseresolvethenablejob\" aoid=\"NewPromiseResolveThenableJob\" oldids=\"sec-promiseresolvethenablejob\">\n        <span id=\"sec-promiseresolvethenablejob\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromiseresolvethenablejob\">#sec-newpromiseresolvethenablejob</span> NewPromiseResolveThenableJob ( <var>promiseToResolve</var>, <var>thenable</var>, <var>then</var> )</h1>\n        <p>The abstract operation NewPromiseResolveThenableJob takes arguments <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var> and performs the following steps when called:<ol><li>Let <var>resolvingFunctions</var> be <emu-xref aoid=\"CreateResolvingFunctions\"><a href=\"#sec-createresolvingfunctions\">CreateResolvingFunctions</a></emu-xref>(<var>promiseToResolve</var>).</li><li>Let <var>thenCallResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>then</var>, <var>thenable</var>, &#171; <var>resolvingFunctions</var>.[[Resolve]], <var>resolvingFunctions</var>.[[Reject]] &#187;).</li><li>If <var>thenCallResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resolvingFunctions</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>thenCallResult</var>.[[Value]] &#187;).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>thenCallResult</var>).</li></ol></li><li>Let <var>getThenRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>then</var>).</li><li>If <var>getThenRealmResult</var> is a normal completion, then let <var>thenRealm</var> be <var>getThenRealmResult</var>.[[Value]].</li><li>Otherwise, let <var>thenRealm</var> be <emu-val>null</emu-val>.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>thenRealm</var> }.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> uses the supplied thenable and its <code>then</code> method to resolve the given promise. This process must take place as a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> to ensure that the evaluation of the <code>then</code> method occurs after evaluation of any surrounding code has completed.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {"table-5": "Table 6", "table-58": "Table 78"}}}